target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"
declare ccc i8* @memcpy$def(i8*, i8*, i64)
declare ccc i8* @memmove$def(i8*, i8*, i64)
declare ccc i8* @memset$def(i8*, i64, i64)
declare ccc i64 @newSpark$def(i8*, i8*)
!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}

%Main_ZCzpZC_closure_struct = type <{i64}>
@Main_ZCzpZC_closure$def = internal global %Main_ZCzpZC_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ZCzpZC_info$def to i64)}>
@Main_ZCzpZC_closure = alias i8, bitcast (%Main_ZCzpZC_closure_struct* @Main_ZCzpZC_closure$def to i8*)
@Main_ZCzpZC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ZCzpZC_info$def to i8*)
define internal ghccc void @Main_ZCzpZC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n5jF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5jA
c5jA:
  %ln5jG = load i64*, i64** %Hp_Var
  %ln5jH = getelementptr inbounds i64, i64* %ln5jG, i32 3
  %ln5jI = ptrtoint i64* %ln5jH to i64
  %ln5jJ = inttoptr i64 %ln5jI to i64*
  store i64* %ln5jJ, i64** %Hp_Var
  %ln5jK = load i64*, i64** %Hp_Var
  %ln5jL = ptrtoint i64* %ln5jK to i64
  %ln5jM = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln5jN = bitcast i64* %ln5jM to i64*
  %ln5jO = load i64, i64* %ln5jN, !tbaa !5
  %ln5jP = icmp ugt i64 %ln5jL, %ln5jO
  %ln5jR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5jP, i1 0 )
  br i1 %ln5jR, label %c5jE, label %c5jD
c5jD:
  %ln5jT = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln5jS = load i64*, i64** %Hp_Var
  %ln5jU = getelementptr inbounds i64, i64* %ln5jS, i32 -2
  store i64 %ln5jT, i64* %ln5jU, !tbaa !3
  %ln5jW = load i64, i64* %R2_Var
  %ln5jV = load i64*, i64** %Hp_Var
  %ln5jX = getelementptr inbounds i64, i64* %ln5jV, i32 -1
  store i64 %ln5jW, i64* %ln5jX, !tbaa !3
  %ln5jZ = load i64, i64* %R3_Var
  %ln5jY = load i64*, i64** %Hp_Var
  %ln5k0 = getelementptr inbounds i64, i64* %ln5jY, i32 0
  store i64 %ln5jZ, i64* %ln5k0, !tbaa !3
  %ln5k2 = load i64*, i64** %Hp_Var
  %ln5k3 = ptrtoint i64* %ln5k2 to i64
  %ln5k4 = add i64 %ln5k3, -14
  store i64 %ln5k4, i64* %R1_Var
  %ln5k5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln5k6 = bitcast i64* %ln5k5 to i64*
  %ln5k7 = load i64, i64* %ln5k6, !tbaa !2
  %ln5k8 = inttoptr i64 %ln5k7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5k9 = load i64*, i64** %Hp_Var
  %ln5ka = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5k8( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln5k9, i64 %ln5ka, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5jE:
  %ln5kb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln5kb, !tbaa !5
  %ln5kc = load i64, i64* %R3_Var
  store i64 %ln5kc, i64* %R3_Var
  %ln5kd = load i64, i64* %R2_Var
  store i64 %ln5kd, i64* %R2_Var
  %ln5ke = ptrtoint %Main_ZCzpZC_closure_struct* @Main_ZCzpZC_closure$def to i64
  store i64 %ln5ke, i64* %R1_Var
  %ln5kf = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5kg = bitcast i64* %ln5kf to i64*
  %ln5kh = load i64, i64* %ln5kg, !tbaa !5
  %ln5ki = inttoptr i64 %ln5kh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5kj = load i64*, i64** %Hp_Var
  %ln5kk = load i64, i64* %R1_Var
  %ln5kl = load i64, i64* %R2_Var
  %ln5km = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5ki( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln5kj, i64 %ln5kk, i64 %ln5kl, i64 %ln5km, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)
%Main_Pzz_closure_struct = type <{i64}>
@Main_Pzz_closure$def = internal global %Main_Pzz_closure_struct<{i64 ptrtoint (i8* @Main_Pzz_con_info to i64)}>
@Main_Pzz_closure = alias i8, bitcast (%Main_Pzz_closure_struct* @Main_Pzz_closure$def to i8*)
%_u5kw_srt_struct = type <{i64, i64, i64, i64}>
%r565_closure_struct = type <{i64, i64, i64, i64}>
@_u5kw_srt$def = internal global %_u5kw_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64), i64 ptrtoint (i8* @base_TextziRead_readEither5_closure to i64), i64 0}>
@_u5kw_srt = internal alias i8, bitcast (%_u5kw_srt_struct* @_u5kw_srt$def to i8*)
@r565_closure$def = internal global %r565_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r565_info$def to i64), i64 0, i64 0, i64 0}>
@r565_closure = internal alias i8, bitcast (%r565_closure_struct* @r565_closure$def to i8*)
@r565_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r565_info$def to i8*)
define internal ghccc void @r565_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5kw_srt_struct* @_u5kw_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r565_info$def to i64)) to i32),i32 0)}>
{
n5kx:
  %lc5kq = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5kt
c5kt:
  %ln5ky = load i64*, i64** %Sp_Var
  %ln5kz = getelementptr inbounds i64, i64* %ln5ky, i32 -2
  %ln5kA = ptrtoint i64* %ln5kz to i64
  %ln5kB = icmp ult i64 %ln5kA, %SpLim_Arg
  %ln5kC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5kB, i1 0 )
  br i1 %ln5kC, label %c5ku, label %c5kv
c5kv:
  %ln5kD = ptrtoint i64* %Base_Arg to i64
  %ln5kE = inttoptr i64 %ln5kD to i8*
  %ln5kF = load i64, i64* %R1_Var
  %ln5kG = inttoptr i64 %ln5kF to i8*
  %ln5kH = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5kI = call ccc i8* (i8*, i8*) %ln5kH( i8* %ln5kE, i8* %ln5kG ) nounwind
  %ln5kJ = ptrtoint i8* %ln5kI to i64
  store i64 %ln5kJ, i64* %lc5kq
  %ln5kK = load i64, i64* %lc5kq
  %ln5kL = icmp eq i64 %ln5kK, 0
  br i1 %ln5kL, label %c5ks, label %c5kr
c5kr:
  %ln5kN = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5kM = load i64*, i64** %Sp_Var
  %ln5kO = getelementptr inbounds i64, i64* %ln5kM, i32 -2
  store i64 %ln5kN, i64* %ln5kO, !tbaa !2
  %ln5kQ = load i64, i64* %lc5kq
  %ln5kP = load i64*, i64** %Sp_Var
  %ln5kR = getelementptr inbounds i64, i64* %ln5kP, i32 -1
  store i64 %ln5kQ, i64* %ln5kR, !tbaa !2
  %ln5kS = ptrtoint i8* @base_TextziRead_readEither5_closure to i64
  store i64 %ln5kS, i64* %R2_Var
  %ln5kT = load i64*, i64** %Sp_Var
  %ln5kU = getelementptr inbounds i64, i64* %ln5kT, i32 -2
  %ln5kV = ptrtoint i64* %ln5kU to i64
  %ln5kW = inttoptr i64 %ln5kV to i64*
  store i64* %ln5kW, i64** %Sp_Var
  %ln5kX = bitcast i8* @base_GHCziErr_errorWithoutStackTrace_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5kY = load i64*, i64** %Sp_Var
  %ln5kZ = load i64, i64* %R1_Var
  %ln5l0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5kX( i64* %Base_Arg, i64* %ln5kY, i64* %Hp_Arg, i64 %ln5kZ, i64 %ln5l0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5ks:
  %ln5l2 = load i64, i64* %R1_Var
  %ln5l3 = inttoptr i64 %ln5l2 to i64*
  %ln5l4 = load i64, i64* %ln5l3, !tbaa !4
  %ln5l5 = inttoptr i64 %ln5l4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5l6 = load i64*, i64** %Sp_Var
  %ln5l7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5l5( i64* %Base_Arg, i64* %ln5l6, i64* %Hp_Arg, i64 %ln5l7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5ku:
  %ln5l8 = load i64, i64* %R1_Var
  store i64 %ln5l8, i64* %R1_Var
  %ln5l9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5la = bitcast i64* %ln5l9 to i64*
  %ln5lb = load i64, i64* %ln5la, !tbaa !5
  %ln5lc = inttoptr i64 %ln5lb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5ld = load i64*, i64** %Sp_Var
  %ln5le = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5lc( i64* %Base_Arg, i64* %ln5ld, i64* %Hp_Arg, i64 %ln5le, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r564_closure_struct = type <{i64, i64}>
@r564_closure$def = internal global %r564_closure_struct<{i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_IS_con_info to i64), i64 0}>
@r564_closure = internal alias i8, bitcast (%r564_closure_struct* @r564_closure$def to i8*)
%_u5lo_srt_struct = type <{i64, i64, i64, i64}>
%r563_closure_struct = type <{i64, i64, i64, i64}>
@_u5lo_srt$def = internal global %_u5lo_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64), i64 ptrtoint (i8* @base_TextziRead_readEither2_closure to i64), i64 0}>
@_u5lo_srt = internal alias i8, bitcast (%_u5lo_srt_struct* @_u5lo_srt$def to i8*)
@r563_closure$def = internal global %r563_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r563_info$def to i64), i64 0, i64 0, i64 0}>
@r563_closure = internal alias i8, bitcast (%r563_closure_struct* @r563_closure$def to i8*)
@r563_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r563_info$def to i8*)
define internal ghccc void @r563_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5lo_srt_struct* @_u5lo_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r563_info$def to i64)) to i32),i32 0)}>
{
n5lp:
  %lc5li = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5ll
c5ll:
  %ln5lq = load i64*, i64** %Sp_Var
  %ln5lr = getelementptr inbounds i64, i64* %ln5lq, i32 -2
  %ln5ls = ptrtoint i64* %ln5lr to i64
  %ln5lt = icmp ult i64 %ln5ls, %SpLim_Arg
  %ln5lu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5lt, i1 0 )
  br i1 %ln5lu, label %c5lm, label %c5ln
c5ln:
  %ln5lv = ptrtoint i64* %Base_Arg to i64
  %ln5lw = inttoptr i64 %ln5lv to i8*
  %ln5lx = load i64, i64* %R1_Var
  %ln5ly = inttoptr i64 %ln5lx to i8*
  %ln5lz = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5lA = call ccc i8* (i8*, i8*) %ln5lz( i8* %ln5lw, i8* %ln5ly ) nounwind
  %ln5lB = ptrtoint i8* %ln5lA to i64
  store i64 %ln5lB, i64* %lc5li
  %ln5lC = load i64, i64* %lc5li
  %ln5lD = icmp eq i64 %ln5lC, 0
  br i1 %ln5lD, label %c5lk, label %c5lj
c5lj:
  %ln5lF = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5lE = load i64*, i64** %Sp_Var
  %ln5lG = getelementptr inbounds i64, i64* %ln5lE, i32 -2
  store i64 %ln5lF, i64* %ln5lG, !tbaa !2
  %ln5lI = load i64, i64* %lc5li
  %ln5lH = load i64*, i64** %Sp_Var
  %ln5lJ = getelementptr inbounds i64, i64* %ln5lH, i32 -1
  store i64 %ln5lI, i64* %ln5lJ, !tbaa !2
  %ln5lK = ptrtoint i8* @base_TextziRead_readEither2_closure to i64
  store i64 %ln5lK, i64* %R2_Var
  %ln5lL = load i64*, i64** %Sp_Var
  %ln5lM = getelementptr inbounds i64, i64* %ln5lL, i32 -2
  %ln5lN = ptrtoint i64* %ln5lM to i64
  %ln5lO = inttoptr i64 %ln5lN to i64*
  store i64* %ln5lO, i64** %Sp_Var
  %ln5lP = bitcast i8* @base_GHCziErr_errorWithoutStackTrace_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5lQ = load i64*, i64** %Sp_Var
  %ln5lR = load i64, i64* %R1_Var
  %ln5lS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5lP( i64* %Base_Arg, i64* %ln5lQ, i64* %Hp_Arg, i64 %ln5lR, i64 %ln5lS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5lk:
  %ln5lU = load i64, i64* %R1_Var
  %ln5lV = inttoptr i64 %ln5lU to i64*
  %ln5lW = load i64, i64* %ln5lV, !tbaa !4
  %ln5lX = inttoptr i64 %ln5lW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5lY = load i64*, i64** %Sp_Var
  %ln5lZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5lX( i64* %Base_Arg, i64* %ln5lY, i64* %Hp_Arg, i64 %ln5lZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5lm:
  %ln5m0 = load i64, i64* %R1_Var
  store i64 %ln5m0, i64* %R1_Var
  %ln5m1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5m2 = bitcast i64* %ln5m1 to i64*
  %ln5m3 = load i64, i64* %ln5m2, !tbaa !5
  %ln5m4 = inttoptr i64 %ln5m3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5m5 = load i64*, i64** %Sp_Var
  %ln5m6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5m4( i64* %Base_Arg, i64* %ln5m5, i64* %Hp_Arg, i64 %ln5m6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r560_bytes_struct = type <{[59 x i8]}>
@r560_bytes$def = internal constant %r560_bytes_struct<{[59 x i8] [i8 80, i8 97, i8 116, i8 116, i8 101, i8 114, i8 110, i8 32, i8 109, i8 97, i8 116, i8 99, i8 104, i8 32, i8 102, i8 97, i8 105, i8 108, i8 117, i8 114, i8 101, i8 32, i8 105, i8 110, i8 32, i8 100, i8 111, i8 32, i8 101, i8 120, i8 112, i8 114, i8 101, i8 115, i8 115, i8 105, i8 111, i8 110, i8 32, i8 97, i8 116, i8 32, i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 50, i8 51, i8 58, i8 49, i8 55, i8 45, i8 50, i8 49, i8 0]}>, align 1
@r560_bytes = internal alias i8, bitcast (%r560_bytes_struct* @r560_bytes$def to i8*)
%r561_closure_struct = type <{i64, i64, i64, i64}>
@r561_closure$def = internal global %r561_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r561_info$def to i64), i64 0, i64 0, i64 0}>
@r561_closure = internal alias i8, bitcast (%r561_closure_struct* @r561_closure$def to i8*)
@r561_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r561_info$def to i8*)
define internal ghccc void @r561_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
n5mg:
  %lc5ma = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5md
c5md:
  %ln5mh = load i64*, i64** %Sp_Var
  %ln5mi = getelementptr inbounds i64, i64* %ln5mh, i32 -2
  %ln5mj = ptrtoint i64* %ln5mi to i64
  %ln5mk = icmp ult i64 %ln5mj, %SpLim_Arg
  %ln5ml = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5mk, i1 0 )
  br i1 %ln5ml, label %c5me, label %c5mf
c5mf:
  %ln5mm = ptrtoint i64* %Base_Arg to i64
  %ln5mn = inttoptr i64 %ln5mm to i8*
  %ln5mo = load i64, i64* %R1_Var
  %ln5mp = inttoptr i64 %ln5mo to i8*
  %ln5mq = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5mr = call ccc i8* (i8*, i8*) %ln5mq( i8* %ln5mn, i8* %ln5mp ) nounwind
  %ln5ms = ptrtoint i8* %ln5mr to i64
  store i64 %ln5ms, i64* %lc5ma
  %ln5mt = load i64, i64* %lc5ma
  %ln5mu = icmp eq i64 %ln5mt, 0
  br i1 %ln5mu, label %c5mc, label %c5mb
c5mb:
  %ln5mw = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5mv = load i64*, i64** %Sp_Var
  %ln5mx = getelementptr inbounds i64, i64* %ln5mv, i32 -2
  store i64 %ln5mw, i64* %ln5mx, !tbaa !2
  %ln5mz = load i64, i64* %lc5ma
  %ln5my = load i64*, i64** %Sp_Var
  %ln5mA = getelementptr inbounds i64, i64* %ln5my, i32 -1
  store i64 %ln5mz, i64* %ln5mA, !tbaa !2
  %ln5mB = ptrtoint %r560_bytes_struct* @r560_bytes$def to i64
  store i64 %ln5mB, i64* %R2_Var
  %ln5mC = load i64*, i64** %Sp_Var
  %ln5mD = getelementptr inbounds i64, i64* %ln5mC, i32 -2
  %ln5mE = ptrtoint i64* %ln5mD to i64
  %ln5mF = inttoptr i64 %ln5mE to i64*
  store i64* %ln5mF, i64** %Sp_Var
  %ln5mG = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5mH = load i64*, i64** %Sp_Var
  %ln5mI = load i64, i64* %R1_Var
  %ln5mJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5mG( i64* %Base_Arg, i64* %ln5mH, i64* %Hp_Arg, i64 %ln5mI, i64 %ln5mJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5mc:
  %ln5mL = load i64, i64* %R1_Var
  %ln5mM = inttoptr i64 %ln5mL to i64*
  %ln5mN = load i64, i64* %ln5mM, !tbaa !4
  %ln5mO = inttoptr i64 %ln5mN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5mP = load i64*, i64** %Sp_Var
  %ln5mQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5mO( i64* %Base_Arg, i64* %ln5mP, i64* %Hp_Arg, i64 %ln5mQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5me:
  %ln5mR = load i64, i64* %R1_Var
  store i64 %ln5mR, i64* %R1_Var
  %ln5mS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5mT = bitcast i64* %ln5mS to i64*
  %ln5mU = load i64, i64* %ln5mT, !tbaa !5
  %ln5mV = inttoptr i64 %ln5mU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5mW = load i64*, i64** %Sp_Var
  %ln5mX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5mV( i64* %Base_Arg, i64* %ln5mW, i64* %Hp_Arg, i64 %ln5mX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u5n7_srt_struct = type <{i64, i64, i64, i64}>
%r562_closure_struct = type <{i64, i64, i64, i64}>
@_u5n7_srt$def = internal global %_u5n7_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziIO_mkUserError_closure to i64), i64 ptrtoint (%r561_closure_struct* @r561_closure$def to i64), i64 0}>
@_u5n7_srt = internal alias i8, bitcast (%_u5n7_srt_struct* @_u5n7_srt$def to i8*)
@r562_closure$def = internal global %r562_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r562_info$def to i64), i64 0, i64 0, i64 0}>
@r562_closure = internal alias i8, bitcast (%r562_closure_struct* @r562_closure$def to i8*)
@r562_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r562_info$def to i8*)
define internal ghccc void @r562_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5n7_srt_struct* @_u5n7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r562_info$def to i64)) to i32),i32 0)}>
{
n5n8:
  %lc5n1 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5n4
c5n4:
  %ln5n9 = load i64*, i64** %Sp_Var
  %ln5na = getelementptr inbounds i64, i64* %ln5n9, i32 -2
  %ln5nb = ptrtoint i64* %ln5na to i64
  %ln5nc = icmp ult i64 %ln5nb, %SpLim_Arg
  %ln5nd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5nc, i1 0 )
  br i1 %ln5nd, label %c5n5, label %c5n6
c5n6:
  %ln5ne = ptrtoint i64* %Base_Arg to i64
  %ln5nf = inttoptr i64 %ln5ne to i8*
  %ln5ng = load i64, i64* %R1_Var
  %ln5nh = inttoptr i64 %ln5ng to i8*
  %ln5ni = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5nj = call ccc i8* (i8*, i8*) %ln5ni( i8* %ln5nf, i8* %ln5nh ) nounwind
  %ln5nk = ptrtoint i8* %ln5nj to i64
  store i64 %ln5nk, i64* %lc5n1
  %ln5nl = load i64, i64* %lc5n1
  %ln5nm = icmp eq i64 %ln5nl, 0
  br i1 %ln5nm, label %c5n3, label %c5n2
c5n2:
  %ln5no = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5nn = load i64*, i64** %Sp_Var
  %ln5np = getelementptr inbounds i64, i64* %ln5nn, i32 -2
  store i64 %ln5no, i64* %ln5np, !tbaa !2
  %ln5nr = load i64, i64* %lc5n1
  %ln5nq = load i64*, i64** %Sp_Var
  %ln5ns = getelementptr inbounds i64, i64* %ln5nq, i32 -1
  store i64 %ln5nr, i64* %ln5ns, !tbaa !2
  %ln5nt = ptrtoint %r561_closure_struct* @r561_closure$def to i64
  store i64 %ln5nt, i64* %R2_Var
  %ln5nu = load i64*, i64** %Sp_Var
  %ln5nv = getelementptr inbounds i64, i64* %ln5nu, i32 -2
  %ln5nw = ptrtoint i64* %ln5nv to i64
  %ln5nx = inttoptr i64 %ln5nw to i64*
  store i64* %ln5nx, i64** %Sp_Var
  %ln5ny = bitcast i8* @base_GHCziIO_mkUserError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5nz = load i64*, i64** %Sp_Var
  %ln5nA = load i64, i64* %R1_Var
  %ln5nB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5ny( i64* %Base_Arg, i64* %ln5nz, i64* %Hp_Arg, i64 %ln5nA, i64 %ln5nB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5n3:
  %ln5nD = load i64, i64* %R1_Var
  %ln5nE = inttoptr i64 %ln5nD to i64*
  %ln5nF = load i64, i64* %ln5nE, !tbaa !4
  %ln5nG = inttoptr i64 %ln5nF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5nH = load i64*, i64** %Sp_Var
  %ln5nI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5nG( i64* %Base_Arg, i64* %ln5nH, i64* %Hp_Arg, i64 %ln5nI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5n5:
  %ln5nJ = load i64, i64* %R1_Var
  store i64 %ln5nJ, i64* %R1_Var
  %ln5nK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5nL = bitcast i64* %ln5nK to i64*
  %ln5nM = load i64, i64* %ln5nL, !tbaa !5
  %ln5nN = inttoptr i64 %ln5nM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5nO = load i64*, i64** %Sp_Var
  %ln5nP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5nN( i64* %Base_Arg, i64* %ln5nO, i64* %Hp_Arg, i64 %ln5nP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55Y_closure_struct = type <{i64}>
@r55Y_closure$def = internal global %r55Y_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Y_info$def to i64)}>
@r55Y_closure = internal alias i8, bitcast (%r55Y_closure_struct* @r55Y_closure$def to i8*)
@r55Y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Y_info$def to i8*)
define internal ghccc void @r55Y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n5om:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5o1
c5o1:
  %ln5on = load i64*, i64** %Sp_Var
  %ln5oo = getelementptr inbounds i64, i64* %ln5on, i32 -2
  %ln5op = ptrtoint i64* %ln5oo to i64
  %ln5oq = icmp ult i64 %ln5op, %SpLim_Arg
  %ln5or = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5oq, i1 0 )
  br i1 %ln5or, label %c5o2, label %u5og
u5og:
  %ln5ot = load i64, i64* %R2_Var
  %ln5os = load i64*, i64** %Sp_Var
  %ln5ou = getelementptr inbounds i64, i64* %ln5os, i32 -1
  store i64 %ln5ot, i64* %ln5ou, !tbaa !2
  %ln5ov = load i64*, i64** %Sp_Var
  %ln5ow = getelementptr inbounds i64, i64* %ln5ov, i32 -1
  %ln5ox = ptrtoint i64* %ln5ow to i64
  %ln5oy = inttoptr i64 %ln5ox to i64*
  store i64* %ln5oy, i64** %Sp_Var
  %ln5oz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5nR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5oA = load i64*, i64** %Sp_Var
  %ln5oB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5oz( i64* %Base_Arg, i64* %ln5oA, i64* %Hp_Arg, i64 %ln5oB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5o2:
  %ln5oC = load i64, i64* %R2_Var
  store i64 %ln5oC, i64* %R2_Var
  %ln5oD = ptrtoint %r55Y_closure_struct* @r55Y_closure$def to i64
  store i64 %ln5oD, i64* %R1_Var
  %ln5oE = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5oF = bitcast i64* %ln5oE to i64*
  %ln5oG = load i64, i64* %ln5oF, !tbaa !5
  %ln5oH = inttoptr i64 %ln5oG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5oI = load i64*, i64** %Sp_Var
  %ln5oJ = load i64, i64* %R1_Var
  %ln5oK = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5oH( i64* %Base_Arg, i64* %ln5oI, i64* %Hp_Arg, i64 %ln5oJ, i64 %ln5oK, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c5nR = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5nR$def to i8*)
define internal ghccc void @_c5nR$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n5oL:
  %ls5i1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5nR
c5nR:
  %ln5oM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln5oN = bitcast i64* %ln5oM to i64*
  %ln5oO = load i64, i64* %ln5oN, !tbaa !2
  store i64 %ln5oO, i64* %ls5i1
  %ln5oP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5nU_info$def to i64
  %ln5oQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln5oP, i64* %ln5oQ, !tbaa !2
  %ln5oR = load i64, i64* %ls5i1
  store i64 %ln5oR, i64* %R1_Var
  %ln5oS = load i64, i64* %R1_Var
  %ln5oT = and i64 %ln5oS, 7
  %ln5oU = icmp ne i64 %ln5oT, 0
  br i1 %ln5oU, label %u5oi, label %c5nV
c5nV:
  %ln5oW = load i64, i64* %R1_Var
  %ln5oX = inttoptr i64 %ln5oW to i64*
  %ln5oY = load i64, i64* %ln5oX, !tbaa !4
  %ln5oZ = inttoptr i64 %ln5oY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5p0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5oZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5p0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5oi:
  %ln5p1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5nU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5p2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5p1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5p2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5nU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5nU_info$def to i8*)
define internal ghccc void @c5nU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n5p3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5i4 = alloca i64, i32 1
  br label %c5nU
c5nU:
  %ln5p4 = load i64, i64* %R1_Var
  %ln5p5 = and i64 %ln5p4, 7
  switch i64 %ln5p5, label %c5nY [i64 1, label %c5nY
i64 2, label %c5nZ]
c5nY:
  %ln5p6 = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %ln5p7 = add i64 %ln5p6, 1
  store i64 %ln5p7, i64* %R1_Var
  %ln5p8 = load i64*, i64** %Sp_Var
  %ln5p9 = getelementptr inbounds i64, i64* %ln5p8, i32 1
  %ln5pa = ptrtoint i64* %ln5p9 to i64
  %ln5pb = inttoptr i64 %ln5pa to i64*
  store i64* %ln5pb, i64** %Sp_Var
  %ln5pc = load i64*, i64** %Sp_Var
  %ln5pd = getelementptr inbounds i64, i64* %ln5pc, i32 0
  %ln5pe = bitcast i64* %ln5pd to i64*
  %ln5pf = load i64, i64* %ln5pe, !tbaa !2
  %ln5pg = inttoptr i64 %ln5pf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5ph = load i64*, i64** %Sp_Var
  %ln5pi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5pg( i64* %Base_Arg, i64* %ln5ph, i64* %Hp_Arg, i64 %ln5pi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5nZ:
  %ln5pk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5o9_info$def to i64
  %ln5pj = load i64*, i64** %Sp_Var
  %ln5pl = getelementptr inbounds i64, i64* %ln5pj, i32 -1
  store i64 %ln5pk, i64* %ln5pl, !tbaa !2
  %ln5po = load i64, i64* %R1_Var
  %ln5pp = add i64 %ln5po, 14
  %ln5pq = inttoptr i64 %ln5pp to i64*
  %ln5pr = load i64, i64* %ln5pq, !tbaa !4
  store i64 %ln5pr, i64* %ls5i4
  %ln5pu = load i64, i64* %R1_Var
  %ln5pv = add i64 %ln5pu, 6
  %ln5pw = inttoptr i64 %ln5pv to i64*
  %ln5px = load i64, i64* %ln5pw, !tbaa !4
  store i64 %ln5px, i64* %R1_Var
  %ln5pz = load i64, i64* %ls5i4
  %ln5py = load i64*, i64** %Sp_Var
  %ln5pA = getelementptr inbounds i64, i64* %ln5py, i32 0
  store i64 %ln5pz, i64* %ln5pA, !tbaa !2
  %ln5pB = load i64*, i64** %Sp_Var
  %ln5pC = getelementptr inbounds i64, i64* %ln5pB, i32 -1
  %ln5pD = ptrtoint i64* %ln5pC to i64
  %ln5pE = inttoptr i64 %ln5pD to i64*
  store i64* %ln5pE, i64** %Sp_Var
  %ln5pF = load i64, i64* %R1_Var
  %ln5pG = and i64 %ln5pF, 7
  %ln5pH = icmp ne i64 %ln5pG, 0
  br i1 %ln5pH, label %u5oj, label %c5ob
c5ob:
  %ln5pJ = load i64, i64* %R1_Var
  %ln5pK = inttoptr i64 %ln5pJ to i64*
  %ln5pL = load i64, i64* %ln5pK, !tbaa !4
  %ln5pM = inttoptr i64 %ln5pL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5pN = load i64*, i64** %Sp_Var
  %ln5pO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5pM( i64* %Base_Arg, i64* %ln5pN, i64* %Hp_Arg, i64 %ln5pO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5oj:
  %ln5pP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5o9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5pQ = load i64*, i64** %Sp_Var
  %ln5pR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5pP( i64* %Base_Arg, i64* %ln5pQ, i64* %Hp_Arg, i64 %ln5pR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5o9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5o9_info$def to i8*)
define internal ghccc void @c5o9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n5pS:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5o9
c5o9:
  %ln5pU = load i64*, i64** %Sp_Var
  %ln5pV = getelementptr inbounds i64, i64* %ln5pU, i32 1
  %ln5pW = bitcast i64* %ln5pV to i64*
  %ln5pX = load i64, i64* %ln5pW, !tbaa !2
  %ln5pT = load i64*, i64** %Sp_Var
  %ln5pY = getelementptr inbounds i64, i64* %ln5pT, i32 1
  store i64 %ln5pX, i64* %ln5pY, !tbaa !2
  %ln5pZ = load i64*, i64** %Sp_Var
  %ln5q0 = getelementptr inbounds i64, i64* %ln5pZ, i32 1
  %ln5q1 = ptrtoint i64* %ln5q0 to i64
  %ln5q2 = inttoptr i64 %ln5q1 to i64*
  store i64* %ln5q2, i64** %Sp_Var
  %ln5q3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5nR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5q4 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5q3( i64* %Base_Arg, i64* %ln5q4, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_rnfListOfRational_closure_struct = type <{i64}>
@Main_rnfListOfRational_closure$def = internal global %Main_rnfListOfRational_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_rnfListOfRational_info$def to i64)}>
@Main_rnfListOfRational_closure = alias i8, bitcast (%Main_rnfListOfRational_closure_struct* @Main_rnfListOfRational_closure$def to i8*)
@Main_rnfListOfRational_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_rnfListOfRational_info$def to i8*)
define ghccc void @Main_rnfListOfRational_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n5qc:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5q9
c5q9:
  %ln5qd = load i64, i64* %R2_Var
  store i64 %ln5qd, i64* %R2_Var
  %ln5qe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Y_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5qf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5qe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5qf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdtczqZCzpZC3_bytes_struct = type <{[5 x i8]}>
@Main_zdtczqZCzpZC3_bytes$def = internal constant %Main_zdtczqZCzpZC3_bytes_struct<{[5 x i8] [i8 39, i8 58, i8 43, i8 58, i8 0]}>, align 1
@Main_zdtczqZCzpZC3_bytes = alias i8, bitcast (%Main_zdtczqZCzpZC3_bytes_struct* @Main_zdtczqZCzpZC3_bytes$def to i8*)
%Main_zdtczqZCzpZC2_closure_struct = type <{i64, i64}>
@Main_zdtczqZCzpZC2_closure$def = internal global %Main_zdtczqZCzpZC2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqZCzpZC3_bytes_struct* @Main_zdtczqZCzpZC3_bytes$def to i64)}>
@Main_zdtczqZCzpZC2_closure = alias i8, bitcast (%Main_zdtczqZCzpZC2_closure_struct* @Main_zdtczqZCzpZC2_closure$def to i8*)
%Main_zdtczqPzz3_bytes_struct = type <{[4 x i8]}>
@Main_zdtczqPzz3_bytes$def = internal constant %Main_zdtczqPzz3_bytes_struct<{[4 x i8] [i8 39, i8 80, i8 122, i8 0]}>, align 1
@Main_zdtczqPzz3_bytes = alias i8, bitcast (%Main_zdtczqPzz3_bytes_struct* @Main_zdtczqPzz3_bytes$def to i8*)
%Main_zdtczqPzz2_closure_struct = type <{i64, i64}>
@Main_zdtczqPzz2_closure$def = internal global %Main_zdtczqPzz2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqPzz3_bytes_struct* @Main_zdtczqPzz3_bytes$def to i64)}>
@Main_zdtczqPzz2_closure = alias i8, bitcast (%Main_zdtczqPzz2_closure_struct* @Main_zdtczqPzz2_closure$def to i8*)
%Main_zdtcPs2_bytes_struct = type <{[3 x i8]}>
@Main_zdtcPs2_bytes$def = internal constant %Main_zdtcPs2_bytes_struct<{[3 x i8] [i8 80, i8 115, i8 0]}>, align 1
@Main_zdtcPs2_bytes = alias i8, bitcast (%Main_zdtcPs2_bytes_struct* @Main_zdtcPs2_bytes$def to i8*)
%Main_zdtcPs1_closure_struct = type <{i64, i64}>
@Main_zdtcPs1_closure$def = internal global %Main_zdtcPs1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtcPs2_bytes_struct* @Main_zdtcPs2_bytes$def to i64)}>
@Main_zdtcPs1_closure = alias i8, bitcast (%Main_zdtcPs1_closure_struct* @Main_zdtcPs1_closure$def to i8*)
%r55V_closure_struct = type <{i64, i64}>
@r55V_closure$def = internal global %r55V_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepVar_con_info to i64), i64 0}>
@r55V_closure = internal alias i8, bitcast (%r55V_closure_struct* @r55V_closure$def to i8*)
%r55W_closure_struct = type <{i64, i64, i64, i64}>
@r55W_closure$def = internal global %r55W_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%r55V_closure_struct* @r55V_closure$def to i64),i64 2), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r55W_closure = internal alias i8, bitcast (%r55W_closure_struct* @r55W_closure$def to i8*)
%r55E_bytes_struct = type <{[39 x i8]}>
@r55E_bytes$def = internal constant %r55E_bytes_struct<{[39 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 40, i8 49, i8 50, i8 53, i8 44, i8 57, i8 41, i8 45, i8 40, i8 49, i8 50, i8 56, i8 44, i8 53, i8 57, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 115, i8 113, i8 114, i8 116, i8 0]}>, align 1
@r55E_bytes = internal alias i8, bitcast (%r55E_bytes_struct* @r55E_bytes$def to i8*)
%r55F_closure_struct = type <{i64, i64, i64, i64}>
@r55F_closure$def = internal global %r55F_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55F_info$def to i64), i64 0, i64 0, i64 0}>
@r55F_closure = internal alias i8, bitcast (%r55F_closure_struct* @r55F_closure$def to i8*)
@r55F_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55F_info$def to i8*)
define internal ghccc void @r55F_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55F_info$def to i64)) to i32),i32 0)}>
{
n5qp:
  %lc5qj = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5qm
c5qm:
  %ln5qq = load i64*, i64** %Sp_Var
  %ln5qr = getelementptr inbounds i64, i64* %ln5qq, i32 -2
  %ln5qs = ptrtoint i64* %ln5qr to i64
  %ln5qt = icmp ult i64 %ln5qs, %SpLim_Arg
  %ln5qu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5qt, i1 0 )
  br i1 %ln5qu, label %c5qn, label %c5qo
c5qo:
  %ln5qv = ptrtoint i64* %Base_Arg to i64
  %ln5qw = inttoptr i64 %ln5qv to i8*
  %ln5qx = load i64, i64* %R1_Var
  %ln5qy = inttoptr i64 %ln5qx to i8*
  %ln5qz = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5qA = call ccc i8* (i8*, i8*) %ln5qz( i8* %ln5qw, i8* %ln5qy ) nounwind
  %ln5qB = ptrtoint i8* %ln5qA to i64
  store i64 %ln5qB, i64* %lc5qj
  %ln5qC = load i64, i64* %lc5qj
  %ln5qD = icmp eq i64 %ln5qC, 0
  br i1 %ln5qD, label %c5ql, label %c5qk
c5qk:
  %ln5qF = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5qE = load i64*, i64** %Sp_Var
  %ln5qG = getelementptr inbounds i64, i64* %ln5qE, i32 -2
  store i64 %ln5qF, i64* %ln5qG, !tbaa !2
  %ln5qI = load i64, i64* %lc5qj
  %ln5qH = load i64*, i64** %Sp_Var
  %ln5qJ = getelementptr inbounds i64, i64* %ln5qH, i32 -1
  store i64 %ln5qI, i64* %ln5qJ, !tbaa !2
  %ln5qK = ptrtoint %r55E_bytes_struct* @r55E_bytes$def to i64
  store i64 %ln5qK, i64* %R2_Var
  %ln5qL = load i64*, i64** %Sp_Var
  %ln5qM = getelementptr inbounds i64, i64* %ln5qL, i32 -2
  %ln5qN = ptrtoint i64* %ln5qM to i64
  %ln5qO = inttoptr i64 %ln5qN to i64*
  store i64* %ln5qO, i64** %Sp_Var
  %ln5qP = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5qQ = load i64*, i64** %Sp_Var
  %ln5qR = load i64, i64* %R1_Var
  %ln5qS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5qP( i64* %Base_Arg, i64* %ln5qQ, i64* %Hp_Arg, i64 %ln5qR, i64 %ln5qS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5ql:
  %ln5qU = load i64, i64* %R1_Var
  %ln5qV = inttoptr i64 %ln5qU to i64*
  %ln5qW = load i64, i64* %ln5qV, !tbaa !4
  %ln5qX = inttoptr i64 %ln5qW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5qY = load i64*, i64** %Sp_Var
  %ln5qZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5qX( i64* %Base_Arg, i64* %ln5qY, i64* %Hp_Arg, i64 %ln5qZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5qn:
  %ln5r0 = load i64, i64* %R1_Var
  store i64 %ln5r0, i64* %R1_Var
  %ln5r1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5r2 = bitcast i64* %ln5r1 to i64*
  %ln5r3 = load i64, i64* %ln5r2, !tbaa !5
  %ln5r4 = inttoptr i64 %ln5r3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5r5 = load i64*, i64** %Sp_Var
  %ln5r6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5r4( i64* %Base_Arg, i64* %ln5r5, i64* %Hp_Arg, i64 %ln5r6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55H_closure_struct = type <{i64, i64, i64, i64}>
@r55H_closure$def = internal global %r55H_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55H_info$def to i64), i64 0, i64 0, i64 0}>
@r55H_closure = internal alias i8, bitcast (%r55H_closure_struct* @r55H_closure$def to i8*)
@r55H_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55H_info$def to i8*)
define internal ghccc void @r55H_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55H_info$def to i64)) to i32),i32 0)}>
{
n5rg:
  %lc5ra = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5rd
c5rd:
  %ln5rh = load i64*, i64** %Sp_Var
  %ln5ri = getelementptr inbounds i64, i64* %ln5rh, i32 -2
  %ln5rj = ptrtoint i64* %ln5ri to i64
  %ln5rk = icmp ult i64 %ln5rj, %SpLim_Arg
  %ln5rl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5rk, i1 0 )
  br i1 %ln5rl, label %c5re, label %c5rf
c5rf:
  %ln5rm = ptrtoint i64* %Base_Arg to i64
  %ln5rn = inttoptr i64 %ln5rm to i8*
  %ln5ro = load i64, i64* %R1_Var
  %ln5rp = inttoptr i64 %ln5ro to i8*
  %ln5rq = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5rr = call ccc i8* (i8*, i8*) %ln5rq( i8* %ln5rn, i8* %ln5rp ) nounwind
  %ln5rs = ptrtoint i8* %ln5rr to i64
  store i64 %ln5rs, i64* %lc5ra
  %ln5rt = load i64, i64* %lc5ra
  %ln5ru = icmp eq i64 %ln5rt, 0
  br i1 %ln5ru, label %c5rc, label %c5rb
c5rb:
  %ln5rw = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5rv = load i64*, i64** %Sp_Var
  %ln5rx = getelementptr inbounds i64, i64* %ln5rv, i32 -2
  store i64 %ln5rw, i64* %ln5rx, !tbaa !2
  %ln5rz = load i64, i64* %lc5ra
  %ln5ry = load i64*, i64** %Sp_Var
  %ln5rA = getelementptr inbounds i64, i64* %ln5ry, i32 -1
  store i64 %ln5rz, i64* %ln5rA, !tbaa !2
  %ln5rB = ptrtoint %r55E_bytes_struct* @r55E_bytes$def to i64
  store i64 %ln5rB, i64* %R2_Var
  %ln5rC = load i64*, i64** %Sp_Var
  %ln5rD = getelementptr inbounds i64, i64* %ln5rC, i32 -2
  %ln5rE = ptrtoint i64* %ln5rD to i64
  %ln5rF = inttoptr i64 %ln5rE to i64*
  store i64* %ln5rF, i64** %Sp_Var
  %ln5rG = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5rH = load i64*, i64** %Sp_Var
  %ln5rI = load i64, i64* %R1_Var
  %ln5rJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5rG( i64* %Base_Arg, i64* %ln5rH, i64* %Hp_Arg, i64 %ln5rI, i64 %ln5rJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5rc:
  %ln5rL = load i64, i64* %R1_Var
  %ln5rM = inttoptr i64 %ln5rL to i64*
  %ln5rN = load i64, i64* %ln5rM, !tbaa !4
  %ln5rO = inttoptr i64 %ln5rN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5rP = load i64*, i64** %Sp_Var
  %ln5rQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5rO( i64* %Base_Arg, i64* %ln5rP, i64* %Hp_Arg, i64 %ln5rQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5re:
  %ln5rR = load i64, i64* %R1_Var
  store i64 %ln5rR, i64* %R1_Var
  %ln5rS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5rT = bitcast i64* %ln5rS to i64*
  %ln5rU = load i64, i64* %ln5rT, !tbaa !5
  %ln5rV = inttoptr i64 %ln5rU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5rW = load i64*, i64** %Sp_Var
  %ln5rX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5rV( i64* %Base_Arg, i64* %ln5rW, i64* %Hp_Arg, i64 %ln5rX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_revert3_bytes_struct = type <{[47 x i8]}>
@Main_revert3_bytes$def = internal constant %Main_revert3_bytes_struct<{[47 x i8] [i8 119, i8 119, i8 32, i8 97, i8 32, i8 45, i8 62, i8 32, i8 97, i8 32, i8 45, i8 62, i8 32, i8 66, i8 111, i8 111, i8 108, i8 32, i8 105, i8 110, i8 32, i8 111, i8 117, i8 116, i8 112, i8 117, i8 116, i8 32, i8 102, i8 105, i8 108, i8 101, i8 32, i8 32, i8 226, i8 128, i8 152, i8 77, i8 97, i8 105, i8 110, i8 46, i8 111, i8 226, i8 128, i8 153, i8 0]}>, align 1
@Main_revert3_bytes = alias i8, bitcast (%Main_revert3_bytes_struct* @Main_revert3_bytes$def to i8*)
%Main_revert2_closure_struct = type <{i64, i64, i64, i64}>
@Main_revert2_closure$def = internal global %Main_revert2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert2_info$def to i64), i64 0, i64 0, i64 0}>
@Main_revert2_closure = alias i8, bitcast (%Main_revert2_closure_struct* @Main_revert2_closure$def to i8*)
@Main_revert2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert2_info$def to i8*)
define ghccc void @Main_revert2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_absentError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert2_info$def to i64)) to i32),i32 0)}>
{
n5s7:
  %lc5s1 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5s4
c5s4:
  %ln5s8 = load i64*, i64** %Sp_Var
  %ln5s9 = getelementptr inbounds i64, i64* %ln5s8, i32 -2
  %ln5sa = ptrtoint i64* %ln5s9 to i64
  %ln5sb = icmp ult i64 %ln5sa, %SpLim_Arg
  %ln5sc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5sb, i1 0 )
  br i1 %ln5sc, label %c5s5, label %c5s6
c5s6:
  %ln5sd = ptrtoint i64* %Base_Arg to i64
  %ln5se = inttoptr i64 %ln5sd to i8*
  %ln5sf = load i64, i64* %R1_Var
  %ln5sg = inttoptr i64 %ln5sf to i8*
  %ln5sh = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5si = call ccc i8* (i8*, i8*) %ln5sh( i8* %ln5se, i8* %ln5sg ) nounwind
  %ln5sj = ptrtoint i8* %ln5si to i64
  store i64 %ln5sj, i64* %lc5s1
  %ln5sk = load i64, i64* %lc5s1
  %ln5sl = icmp eq i64 %ln5sk, 0
  br i1 %ln5sl, label %c5s3, label %c5s2
c5s2:
  %ln5sn = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5sm = load i64*, i64** %Sp_Var
  %ln5so = getelementptr inbounds i64, i64* %ln5sm, i32 -2
  store i64 %ln5sn, i64* %ln5so, !tbaa !2
  %ln5sq = load i64, i64* %lc5s1
  %ln5sp = load i64*, i64** %Sp_Var
  %ln5sr = getelementptr inbounds i64, i64* %ln5sp, i32 -1
  store i64 %ln5sq, i64* %ln5sr, !tbaa !2
  %ln5ss = ptrtoint %Main_revert3_bytes_struct* @Main_revert3_bytes$def to i64
  store i64 %ln5ss, i64* %R2_Var
  %ln5st = load i64*, i64** %Sp_Var
  %ln5su = getelementptr inbounds i64, i64* %ln5st, i32 -2
  %ln5sv = ptrtoint i64* %ln5su to i64
  %ln5sw = inttoptr i64 %ln5sv to i64*
  store i64* %ln5sw, i64** %Sp_Var
  %ln5sx = bitcast i8* @base_ControlziExceptionziBase_absentError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5sy = load i64*, i64** %Sp_Var
  %ln5sz = load i64, i64* %R1_Var
  %ln5sA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5sx( i64* %Base_Arg, i64* %ln5sy, i64* %Hp_Arg, i64 %ln5sz, i64 %ln5sA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5s3:
  %ln5sC = load i64, i64* %R1_Var
  %ln5sD = inttoptr i64 %ln5sC to i64*
  %ln5sE = load i64, i64* %ln5sD, !tbaa !4
  %ln5sF = inttoptr i64 %ln5sE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5sG = load i64*, i64** %Sp_Var
  %ln5sH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5sF( i64* %Base_Arg, i64* %ln5sG, i64* %Hp_Arg, i64 %ln5sH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5s5:
  %ln5sI = load i64, i64* %R1_Var
  store i64 %ln5sI, i64* %R1_Var
  %ln5sJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5sK = bitcast i64* %ln5sJ to i64*
  %ln5sL = load i64, i64* %ln5sK, !tbaa !5
  %ln5sM = inttoptr i64 %ln5sL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5sN = load i64*, i64** %Sp_Var
  %ln5sO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5sM( i64* %Base_Arg, i64* %ln5sN, i64* %Hp_Arg, i64 %ln5sO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55B_bytes_struct = type <{[41 x i8]}>
@r55B_bytes$def = internal constant %r55B_bytes_struct<{[41 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 40, i8 49, i8 49, i8 49, i8 44, i8 49, i8 41, i8 45, i8 40, i8 49, i8 49, i8 51, i8 44, i8 52, i8 57, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 114, i8 101, i8 118, i8 101, i8 114, i8 116, i8 0]}>, align 1
@r55B_bytes = internal alias i8, bitcast (%r55B_bytes_struct* @r55B_bytes$def to i8*)
%Main_revert1_closure_struct = type <{i64, i64, i64, i64}>
@Main_revert1_closure$def = internal global %Main_revert1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_revert1_closure = alias i8, bitcast (%Main_revert1_closure_struct* @Main_revert1_closure$def to i8*)
@Main_revert1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert1_info$def to i8*)
define ghccc void @Main_revert1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert1_info$def to i64)) to i32),i32 0)}>
{
n5sY:
  %lc5sS = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5sV
c5sV:
  %ln5sZ = load i64*, i64** %Sp_Var
  %ln5t0 = getelementptr inbounds i64, i64* %ln5sZ, i32 -2
  %ln5t1 = ptrtoint i64* %ln5t0 to i64
  %ln5t2 = icmp ult i64 %ln5t1, %SpLim_Arg
  %ln5t3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5t2, i1 0 )
  br i1 %ln5t3, label %c5sW, label %c5sX
c5sX:
  %ln5t4 = ptrtoint i64* %Base_Arg to i64
  %ln5t5 = inttoptr i64 %ln5t4 to i8*
  %ln5t6 = load i64, i64* %R1_Var
  %ln5t7 = inttoptr i64 %ln5t6 to i8*
  %ln5t8 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5t9 = call ccc i8* (i8*, i8*) %ln5t8( i8* %ln5t5, i8* %ln5t7 ) nounwind
  %ln5ta = ptrtoint i8* %ln5t9 to i64
  store i64 %ln5ta, i64* %lc5sS
  %ln5tb = load i64, i64* %lc5sS
  %ln5tc = icmp eq i64 %ln5tb, 0
  br i1 %ln5tc, label %c5sU, label %c5sT
c5sT:
  %ln5te = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5td = load i64*, i64** %Sp_Var
  %ln5tf = getelementptr inbounds i64, i64* %ln5td, i32 -2
  store i64 %ln5te, i64* %ln5tf, !tbaa !2
  %ln5th = load i64, i64* %lc5sS
  %ln5tg = load i64*, i64** %Sp_Var
  %ln5ti = getelementptr inbounds i64, i64* %ln5tg, i32 -1
  store i64 %ln5th, i64* %ln5ti, !tbaa !2
  %ln5tj = ptrtoint %r55B_bytes_struct* @r55B_bytes$def to i64
  store i64 %ln5tj, i64* %R2_Var
  %ln5tk = load i64*, i64** %Sp_Var
  %ln5tl = getelementptr inbounds i64, i64* %ln5tk, i32 -2
  %ln5tm = ptrtoint i64* %ln5tl to i64
  %ln5tn = inttoptr i64 %ln5tm to i64*
  store i64* %ln5tn, i64** %Sp_Var
  %ln5to = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5tp = load i64*, i64** %Sp_Var
  %ln5tq = load i64, i64* %R1_Var
  %ln5tr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5to( i64* %Base_Arg, i64* %ln5tp, i64* %Hp_Arg, i64 %ln5tq, i64 %ln5tr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5sU:
  %ln5tt = load i64, i64* %R1_Var
  %ln5tu = inttoptr i64 %ln5tt to i64*
  %ln5tv = load i64, i64* %ln5tu, !tbaa !4
  %ln5tw = inttoptr i64 %ln5tv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5tx = load i64*, i64** %Sp_Var
  %ln5ty = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5tw( i64* %Base_Arg, i64* %ln5tx, i64* %Hp_Arg, i64 %ln5ty, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5sW:
  %ln5tz = load i64, i64* %R1_Var
  store i64 %ln5tz, i64* %R1_Var
  %ln5tA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5tB = bitcast i64* %ln5tA to i64*
  %ln5tC = load i64, i64* %ln5tB, !tbaa !5
  %ln5tD = inttoptr i64 %ln5tC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5tE = load i64*, i64** %Sp_Var
  %ln5tF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5tD( i64* %Base_Arg, i64* %ln5tE, i64* %Hp_Arg, i64 %ln5tF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_revert4_closure_struct = type <{i64, i64, i64, i64}>
@Main_revert4_closure$def = internal global %Main_revert4_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert4_info$def to i64), i64 0, i64 0, i64 0}>
@Main_revert4_closure = alias i8, bitcast (%Main_revert4_closure_struct* @Main_revert4_closure$def to i8*)
@Main_revert4_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert4_info$def to i8*)
define ghccc void @Main_revert4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert4_info$def to i64)) to i32),i32 0)}>
{
n5tP:
  %lc5tJ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5tM
c5tM:
  %ln5tQ = load i64*, i64** %Sp_Var
  %ln5tR = getelementptr inbounds i64, i64* %ln5tQ, i32 -2
  %ln5tS = ptrtoint i64* %ln5tR to i64
  %ln5tT = icmp ult i64 %ln5tS, %SpLim_Arg
  %ln5tU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5tT, i1 0 )
  br i1 %ln5tU, label %c5tN, label %c5tO
c5tO:
  %ln5tV = ptrtoint i64* %Base_Arg to i64
  %ln5tW = inttoptr i64 %ln5tV to i8*
  %ln5tX = load i64, i64* %R1_Var
  %ln5tY = inttoptr i64 %ln5tX to i8*
  %ln5tZ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5u0 = call ccc i8* (i8*, i8*) %ln5tZ( i8* %ln5tW, i8* %ln5tY ) nounwind
  %ln5u1 = ptrtoint i8* %ln5u0 to i64
  store i64 %ln5u1, i64* %lc5tJ
  %ln5u2 = load i64, i64* %lc5tJ
  %ln5u3 = icmp eq i64 %ln5u2, 0
  br i1 %ln5u3, label %c5tL, label %c5tK
c5tK:
  %ln5u5 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5u4 = load i64*, i64** %Sp_Var
  %ln5u6 = getelementptr inbounds i64, i64* %ln5u4, i32 -2
  store i64 %ln5u5, i64* %ln5u6, !tbaa !2
  %ln5u8 = load i64, i64* %lc5tJ
  %ln5u7 = load i64*, i64** %Sp_Var
  %ln5u9 = getelementptr inbounds i64, i64* %ln5u7, i32 -1
  store i64 %ln5u8, i64* %ln5u9, !tbaa !2
  %ln5ua = ptrtoint %r55B_bytes_struct* @r55B_bytes$def to i64
  store i64 %ln5ua, i64* %R2_Var
  %ln5ub = load i64*, i64** %Sp_Var
  %ln5uc = getelementptr inbounds i64, i64* %ln5ub, i32 -2
  %ln5ud = ptrtoint i64* %ln5uc to i64
  %ln5ue = inttoptr i64 %ln5ud to i64*
  store i64* %ln5ue, i64** %Sp_Var
  %ln5uf = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5ug = load i64*, i64** %Sp_Var
  %ln5uh = load i64, i64* %R1_Var
  %ln5ui = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5uf( i64* %Base_Arg, i64* %ln5ug, i64* %Hp_Arg, i64 %ln5uh, i64 %ln5ui, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5tL:
  %ln5uk = load i64, i64* %R1_Var
  %ln5ul = inttoptr i64 %ln5uk to i64*
  %ln5um = load i64, i64* %ln5ul, !tbaa !4
  %ln5un = inttoptr i64 %ln5um to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5uo = load i64*, i64** %Sp_Var
  %ln5up = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5un( i64* %Base_Arg, i64* %ln5uo, i64* %Hp_Arg, i64 %ln5up, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5tN:
  %ln5uq = load i64, i64* %R1_Var
  store i64 %ln5uq, i64* %R1_Var
  %ln5ur = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5us = bitcast i64* %ln5ur to i64*
  %ln5ut = load i64, i64* %ln5us, !tbaa !5
  %ln5uu = inttoptr i64 %ln5ut to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5uv = load i64*, i64** %Sp_Var
  %ln5uw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5uu( i64* %Base_Arg, i64* %ln5uv, i64* %Hp_Arg, i64 %ln5uw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwtoList_closure_struct = type <{i64}>
@Main_zdwtoList_closure$def = internal global %Main_zdwtoList_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to i64)}>
@Main_zdwtoList_closure = alias i8, bitcast (%Main_zdwtoList_closure_struct* @Main_zdwtoList_closure$def to i8*)
@s5c8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c8_info$def to i8*)
define internal ghccc void @s5c8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n5v2:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5uL
c5uL:
  %ln5v3 = load i64*, i64** %Sp_Var
  %ln5v4 = getelementptr inbounds i64, i64* %ln5v3, i32 -2
  %ln5v5 = ptrtoint i64* %ln5v4 to i64
  %ln5v6 = icmp ult i64 %ln5v5, %SpLim_Arg
  %ln5v7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5v6, i1 0 )
  br i1 %ln5v7, label %c5uM, label %c5uN
c5uN:
  %ln5v9 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln5v8 = load i64*, i64** %Sp_Var
  %ln5va = getelementptr inbounds i64, i64* %ln5v8, i32 -2
  store i64 %ln5v9, i64* %ln5va, !tbaa !2
  %ln5vc = load i64, i64* %R1_Var
  %ln5vb = load i64*, i64** %Sp_Var
  %ln5vd = getelementptr inbounds i64, i64* %ln5vb, i32 -1
  store i64 %ln5vc, i64* %ln5vd, !tbaa !2
  %ln5vg = load i64, i64* %R1_Var
  %ln5vh = add i64 %ln5vg, 16
  %ln5vi = inttoptr i64 %ln5vh to i64*
  %ln5vj = load i64, i64* %ln5vi, !tbaa !4
  store i64 %ln5vj, i64* %R2_Var
  %ln5vk = load i64*, i64** %Sp_Var
  %ln5vl = getelementptr inbounds i64, i64* %ln5vk, i32 -2
  %ln5vm = ptrtoint i64* %ln5vl to i64
  %ln5vn = inttoptr i64 %ln5vm to i64*
  store i64* %ln5vn, i64** %Sp_Var
  %ln5vo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5vp = load i64*, i64** %Sp_Var
  %ln5vq = load i64, i64* %R1_Var
  %ln5vr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5vo( i64* %Base_Arg, i64* %ln5vp, i64* %Hp_Arg, i64 %ln5vq, i64 %ln5vr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5uM:
  %ln5vs = load i64, i64* %R1_Var
  store i64 %ln5vs, i64* %R1_Var
  %ln5vt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5vu = bitcast i64* %ln5vt to i64*
  %ln5vv = load i64, i64* %ln5vu, !tbaa !5
  %ln5vw = inttoptr i64 %ln5vv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5vx = load i64*, i64** %Sp_Var
  %ln5vy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5vw( i64* %Base_Arg, i64* %ln5vx, i64* %Hp_Arg, i64 %ln5vy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwtoList_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to i8*)
define ghccc void @Main_zdwtoList_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n5vz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5uS
c5uS:
  %ln5vA = load i64*, i64** %Sp_Var
  %ln5vB = getelementptr inbounds i64, i64* %ln5vA, i32 -1
  %ln5vC = ptrtoint i64* %ln5vB to i64
  %ln5vD = icmp ult i64 %ln5vC, %SpLim_Arg
  %ln5vE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5vD, i1 0 )
  br i1 %ln5vE, label %c5uT, label %c5uU
c5uU:
  %ln5vG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5uB_info$def to i64
  %ln5vF = load i64*, i64** %Sp_Var
  %ln5vH = getelementptr inbounds i64, i64* %ln5vF, i32 -1
  store i64 %ln5vG, i64* %ln5vH, !tbaa !2
  %ln5vI = load i64, i64* %R2_Var
  store i64 %ln5vI, i64* %R1_Var
  %ln5vJ = load i64*, i64** %Sp_Var
  %ln5vK = getelementptr inbounds i64, i64* %ln5vJ, i32 -1
  %ln5vL = ptrtoint i64* %ln5vK to i64
  %ln5vM = inttoptr i64 %ln5vL to i64*
  store i64* %ln5vM, i64** %Sp_Var
  %ln5vN = load i64, i64* %R1_Var
  %ln5vO = and i64 %ln5vN, 7
  %ln5vP = icmp ne i64 %ln5vO, 0
  br i1 %ln5vP, label %u5v1, label %c5uC
c5uC:
  %ln5vR = load i64, i64* %R1_Var
  %ln5vS = inttoptr i64 %ln5vR to i64*
  %ln5vT = load i64, i64* %ln5vS, !tbaa !4
  %ln5vU = inttoptr i64 %ln5vT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5vV = load i64*, i64** %Sp_Var
  %ln5vW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5vU( i64* %Base_Arg, i64* %ln5vV, i64* %Hp_Arg, i64 %ln5vW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5v1:
  %ln5vX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5uB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5vY = load i64*, i64** %Sp_Var
  %ln5vZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5vX( i64* %Base_Arg, i64* %ln5vY, i64* %Hp_Arg, i64 %ln5vZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5uT:
  %ln5w0 = load i64, i64* %R2_Var
  store i64 %ln5w0, i64* %R2_Var
  %ln5w1 = ptrtoint %Main_zdwtoList_closure_struct* @Main_zdwtoList_closure$def to i64
  store i64 %ln5w1, i64* %R1_Var
  %ln5w2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5w3 = bitcast i64* %ln5w2 to i64*
  %ln5w4 = load i64, i64* %ln5w3, !tbaa !5
  %ln5w5 = inttoptr i64 %ln5w4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5w6 = load i64*, i64** %Sp_Var
  %ln5w7 = load i64, i64* %R1_Var
  %ln5w8 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5w5( i64* %Base_Arg, i64* %ln5w6, i64* %Hp_Arg, i64 %ln5w7, i64 %ln5w8, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5uB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5uB_info$def to i8*)
define internal ghccc void @c5uB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n5w9:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5c6 = alloca i64, i32 1
  %ls5c7 = alloca i64, i32 1
  br label %c5uB
c5uB:
  %ln5wa = load i64, i64* %R1_Var
  %ln5wb = and i64 %ln5wa, 7
  switch i64 %ln5wb, label %c5uP [i64 1, label %c5uP
i64 2, label %c5uQ]
c5uP:
  %ln5wc = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln5wd = add i64 %ln5wc, 1
  store i64 %ln5wd, i64* %R1_Var
  %ln5we = load i64*, i64** %Sp_Var
  %ln5wf = getelementptr inbounds i64, i64* %ln5we, i32 1
  %ln5wg = ptrtoint i64* %ln5wf to i64
  %ln5wh = inttoptr i64 %ln5wg to i64*
  store i64* %ln5wh, i64** %Sp_Var
  %ln5wi = load i64*, i64** %Sp_Var
  %ln5wj = getelementptr inbounds i64, i64* %ln5wi, i32 0
  %ln5wk = bitcast i64* %ln5wj to i64*
  %ln5wl = load i64, i64* %ln5wk, !tbaa !2
  %ln5wm = inttoptr i64 %ln5wl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5wn = load i64*, i64** %Sp_Var
  %ln5wo = load i64*, i64** %Hp_Var
  %ln5wp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5wm( i64* %Base_Arg, i64* %ln5wn, i64* %ln5wo, i64 %ln5wp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5uQ:
  %ln5wq = load i64*, i64** %Hp_Var
  %ln5wr = getelementptr inbounds i64, i64* %ln5wq, i32 6
  %ln5ws = ptrtoint i64* %ln5wr to i64
  %ln5wt = inttoptr i64 %ln5ws to i64*
  store i64* %ln5wt, i64** %Hp_Var
  %ln5wu = load i64*, i64** %Hp_Var
  %ln5wv = ptrtoint i64* %ln5wu to i64
  %ln5ww = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln5wx = bitcast i64* %ln5ww to i64*
  %ln5wy = load i64, i64* %ln5wx, !tbaa !5
  %ln5wz = icmp ugt i64 %ln5wv, %ln5wy
  %ln5wA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5wz, i1 0 )
  br i1 %ln5wA, label %c5v0, label %c5uZ
c5uZ:
  %ln5wD = load i64, i64* %R1_Var
  %ln5wE = add i64 %ln5wD, 6
  %ln5wF = inttoptr i64 %ln5wE to i64*
  %ln5wG = load i64, i64* %ln5wF, !tbaa !4
  store i64 %ln5wG, i64* %ls5c6
  %ln5wJ = load i64, i64* %R1_Var
  %ln5wK = add i64 %ln5wJ, 14
  %ln5wL = inttoptr i64 %ln5wK to i64*
  %ln5wM = load i64, i64* %ln5wL, !tbaa !4
  store i64 %ln5wM, i64* %ls5c7
  %ln5wO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c8_info$def to i64
  %ln5wN = load i64*, i64** %Hp_Var
  %ln5wP = getelementptr inbounds i64, i64* %ln5wN, i32 -5
  store i64 %ln5wO, i64* %ln5wP, !tbaa !3
  %ln5wR = load i64, i64* %ls5c7
  %ln5wQ = load i64*, i64** %Hp_Var
  %ln5wS = getelementptr inbounds i64, i64* %ln5wQ, i32 -3
  store i64 %ln5wR, i64* %ln5wS, !tbaa !3
  %ln5wU = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln5wT = load i64*, i64** %Hp_Var
  %ln5wV = getelementptr inbounds i64, i64* %ln5wT, i32 -2
  store i64 %ln5wU, i64* %ln5wV, !tbaa !3
  %ln5wX = load i64, i64* %ls5c6
  %ln5wW = load i64*, i64** %Hp_Var
  %ln5wY = getelementptr inbounds i64, i64* %ln5wW, i32 -1
  store i64 %ln5wX, i64* %ln5wY, !tbaa !3
  %ln5x0 = load i64*, i64** %Hp_Var
  %ln5x1 = getelementptr inbounds i64, i64* %ln5x0, i32 -5
  %ln5x2 = ptrtoint i64* %ln5x1 to i64
  %ln5wZ = load i64*, i64** %Hp_Var
  %ln5x3 = getelementptr inbounds i64, i64* %ln5wZ, i32 0
  store i64 %ln5x2, i64* %ln5x3, !tbaa !3
  %ln5x5 = load i64*, i64** %Hp_Var
  %ln5x6 = ptrtoint i64* %ln5x5 to i64
  %ln5x7 = add i64 %ln5x6, -14
  store i64 %ln5x7, i64* %R1_Var
  %ln5x8 = load i64*, i64** %Sp_Var
  %ln5x9 = getelementptr inbounds i64, i64* %ln5x8, i32 1
  %ln5xa = ptrtoint i64* %ln5x9 to i64
  %ln5xb = inttoptr i64 %ln5xa to i64*
  store i64* %ln5xb, i64** %Sp_Var
  %ln5xc = load i64*, i64** %Sp_Var
  %ln5xd = getelementptr inbounds i64, i64* %ln5xc, i32 0
  %ln5xe = bitcast i64* %ln5xd to i64*
  %ln5xf = load i64, i64* %ln5xe, !tbaa !2
  %ln5xg = inttoptr i64 %ln5xf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5xh = load i64*, i64** %Sp_Var
  %ln5xi = load i64*, i64** %Hp_Var
  %ln5xj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5xg( i64* %Base_Arg, i64* %ln5xh, i64* %ln5xi, i64 %ln5xj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5v0:
  %ln5xk = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln5xk, !tbaa !5
  %ln5xl = load i64, i64* %R1_Var
  store i64 %ln5xl, i64* %R1_Var
  %ln5xm = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5xn = load i64*, i64** %Sp_Var
  %ln5xo = load i64*, i64** %Hp_Var
  %ln5xp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5xm( i64* %Base_Arg, i64* %ln5xn, i64* %ln5xo, i64 %ln5xp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_toList_closure_struct = type <{i64}>
@Main_toList_closure$def = internal global %Main_toList_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_toList_info$def to i64)}>
@Main_toList_closure = alias i8, bitcast (%Main_toList_closure_struct* @Main_toList_closure$def to i8*)
@Main_toList_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_toList_info$def to i8*)
define ghccc void @Main_toList_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n5xx:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c5xu
c5xu:
  store i64 %R3_Arg, i64* %R2_Var
  %ln5xy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5xz = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5xy( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5xz, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_takePs_closure_struct = type <{i64}>
@Main_takePs_closure$def = internal global %Main_takePs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_takePs_info$def to i64)}>
@Main_takePs_closure = alias i8, bitcast (%Main_takePs_closure_struct* @Main_takePs_closure$def to i8*)
@Main_takePs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_takePs_info$def to i8*)
define ghccc void @Main_takePs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n5y0:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5xH
c5xH:
  %ln5y1 = load i64*, i64** %Sp_Var
  %ln5y2 = getelementptr inbounds i64, i64* %ln5y1, i32 -2
  %ln5y3 = ptrtoint i64* %ln5y2 to i64
  %ln5y4 = icmp ult i64 %ln5y3, %SpLim_Arg
  %ln5y5 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5y4, i1 0 )
  br i1 %ln5y5, label %c5xI, label %c5xJ
c5xJ:
  %ln5y7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5xE_info$def to i64
  %ln5y6 = load i64*, i64** %Sp_Var
  %ln5y8 = getelementptr inbounds i64, i64* %ln5y6, i32 -2
  store i64 %ln5y7, i64* %ln5y8, !tbaa !2
  %ln5y9 = load i64, i64* %R3_Var
  store i64 %ln5y9, i64* %R1_Var
  %ln5yb = load i64, i64* %R4_Var
  %ln5ya = load i64*, i64** %Sp_Var
  %ln5yc = getelementptr inbounds i64, i64* %ln5ya, i32 -1
  store i64 %ln5yb, i64* %ln5yc, !tbaa !2
  %ln5yd = load i64*, i64** %Sp_Var
  %ln5ye = getelementptr inbounds i64, i64* %ln5yd, i32 -2
  %ln5yf = ptrtoint i64* %ln5ye to i64
  %ln5yg = inttoptr i64 %ln5yf to i64*
  store i64* %ln5yg, i64** %Sp_Var
  %ln5yh = load i64, i64* %R1_Var
  %ln5yi = and i64 %ln5yh, 7
  %ln5yj = icmp ne i64 %ln5yi, 0
  br i1 %ln5yj, label %u5xZ, label %c5xF
c5xF:
  %ln5yl = load i64, i64* %R1_Var
  %ln5ym = inttoptr i64 %ln5yl to i64*
  %ln5yn = load i64, i64* %ln5ym, !tbaa !4
  %ln5yo = inttoptr i64 %ln5yn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5yp = load i64*, i64** %Sp_Var
  %ln5yq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5yo( i64* %Base_Arg, i64* %ln5yp, i64* %Hp_Arg, i64 %ln5yq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5xZ:
  %ln5yr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5xE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5ys = load i64*, i64** %Sp_Var
  %ln5yt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5yr( i64* %Base_Arg, i64* %ln5ys, i64* %Hp_Arg, i64 %ln5yt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5xI:
  %ln5yu = load i64, i64* %R4_Var
  store i64 %ln5yu, i64* %R4_Var
  %ln5yv = load i64, i64* %R3_Var
  store i64 %ln5yv, i64* %R3_Var
  %ln5yw = load i64, i64* %R2_Var
  store i64 %ln5yw, i64* %R2_Var
  %ln5yx = ptrtoint %Main_takePs_closure_struct* @Main_takePs_closure$def to i64
  store i64 %ln5yx, i64* %R1_Var
  %ln5yy = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5yz = bitcast i64* %ln5yy to i64*
  %ln5yA = load i64, i64* %ln5yz, !tbaa !5
  %ln5yB = inttoptr i64 %ln5yA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5yC = load i64*, i64** %Sp_Var
  %ln5yD = load i64, i64* %R1_Var
  %ln5yE = load i64, i64* %R2_Var
  %ln5yF = load i64, i64* %R3_Var
  %ln5yG = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5yB( i64* %Base_Arg, i64* %ln5yC, i64* %Hp_Arg, i64 %ln5yD, i64 %ln5yE, i64 %ln5yF, i64 %ln5yG, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5xE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5xE_info$def to i8*)
define internal ghccc void @c5xE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n5yH:
  %ls5cf = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c5xE
c5xE:
  %ln5yK = load i64, i64* %R1_Var
  %ln5yL = add i64 %ln5yK, 7
  %ln5yM = inttoptr i64 %ln5yL to i64*
  %ln5yN = load i64, i64* %ln5yM, !tbaa !4
  store i64 %ln5yN, i64* %ls5cf
  %ln5yO = load i64, i64* %ls5cf
  %ln5yP = icmp slt i64 0, %ln5yO
  %ln5yQ = zext i1 %ln5yP to i64
  switch i64 %ln5yQ, label %c5xQ [i64 1, label %c5xU]
c5xQ:
  %ln5yR = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln5yS = add i64 %ln5yR, 1
  store i64 %ln5yS, i64* %R1_Var
  %ln5yT = load i64*, i64** %Sp_Var
  %ln5yU = getelementptr inbounds i64, i64* %ln5yT, i32 2
  %ln5yV = ptrtoint i64* %ln5yU to i64
  %ln5yW = inttoptr i64 %ln5yV to i64*
  store i64* %ln5yW, i64** %Sp_Var
  %ln5yX = load i64*, i64** %Sp_Var
  %ln5yY = getelementptr inbounds i64, i64* %ln5yX, i32 0
  %ln5yZ = bitcast i64* %ln5yY to i64*
  %ln5z0 = load i64, i64* %ln5yZ, !tbaa !2
  %ln5z1 = inttoptr i64 %ln5z0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5z2 = load i64*, i64** %Sp_Var
  %ln5z3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5z1( i64* %Base_Arg, i64* %ln5z2, i64* %Hp_Arg, i64 %ln5z3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5xU:
  %ln5z5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5xT_info$def to i64
  %ln5z4 = load i64*, i64** %Sp_Var
  %ln5z6 = getelementptr inbounds i64, i64* %ln5z4, i32 0
  store i64 %ln5z5, i64* %ln5z6, !tbaa !2
  %ln5z7 = load i64*, i64** %Sp_Var
  %ln5z8 = getelementptr inbounds i64, i64* %ln5z7, i32 1
  %ln5z9 = bitcast i64* %ln5z8 to i64*
  %ln5za = load i64, i64* %ln5z9, !tbaa !2
  store i64 %ln5za, i64* %R2_Var
  %ln5zc = load i64, i64* %ls5cf
  %ln5zb = load i64*, i64** %Sp_Var
  %ln5zd = getelementptr inbounds i64, i64* %ln5zb, i32 1
  store i64 %ln5zc, i64* %ln5zd, !tbaa !2
  %ln5ze = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5zf = load i64*, i64** %Sp_Var
  %ln5zg = load i64, i64* %R1_Var
  %ln5zh = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5ze( i64* %Base_Arg, i64* %ln5zf, i64* %Hp_Arg, i64 %ln5zg, i64 %ln5zh, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5xT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5xT_info$def to i8*)
define internal ghccc void @c5xT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
n5zi:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5xT
c5xT:
  store i64 %R1_Arg, i64* %R3_Var
  %ln5zj = load i64*, i64** %Sp_Var
  %ln5zk = getelementptr inbounds i64, i64* %ln5zj, i32 1
  %ln5zl = bitcast i64* %ln5zk to i64*
  %ln5zm = load i64, i64* %ln5zl, !tbaa !2
  store i64 %ln5zm, i64* %R2_Var
  %ln5zn = load i64*, i64** %Sp_Var
  %ln5zo = getelementptr inbounds i64, i64* %ln5zn, i32 2
  %ln5zp = ptrtoint i64* %ln5zo to i64
  %ln5zq = inttoptr i64 %ln5zp to i64*
  store i64* %ln5zq, i64** %Sp_Var
  %ln5zr = bitcast i8* @base_GHCziList_zdwunsafeTake_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5zs = load i64*, i64** %Sp_Var
  %ln5zt = load i64, i64* %R2_Var
  %ln5zu = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5zr( i64* %Base_Arg, i64* %ln5zs, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5zt, i64 %ln5zu, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55v_bytes_struct = type <{[17 x i8]}>
@r55v_bytes$def = internal constant %r55v_bytes_struct<{[17 x i8] [i8 112, i8 111, i8 119, i8 101, i8 114, i8 32, i8 115, i8 101, i8 114, i8 105, i8 101, i8 115, i8 32, i8 48, i8 47, i8 48, i8 0]}>, align 1
@r55v_bytes = internal alias i8, bitcast (%r55v_bytes_struct* @r55v_bytes$def to i8*)



%r55o_bytes_struct = type <{[8 x i8]}>
@r55o_bytes$def = internal constant %r55o_bytes_struct<{[8 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 0]}>, align 1
@r55o_bytes = internal alias i8, bitcast (%r55o_bytes_struct* @r55o_bytes$def to i8*)
%r55p_closure_struct = type <{i64, i64, i64, i64}>
@r55p_closure$def = internal global %r55p_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55p_info$def to i64), i64 0, i64 0, i64 0}>
@r55p_closure = internal alias i8, bitcast (%r55p_closure_struct* @r55p_closure$def to i8*)
@r55p_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55p_info$def to i8*)
define internal ghccc void @r55p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
n5zE:
  %lc5zy = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5zB
c5zB:
  %ln5zF = load i64*, i64** %Sp_Var
  %ln5zG = getelementptr inbounds i64, i64* %ln5zF, i32 -2
  %ln5zH = ptrtoint i64* %ln5zG to i64
  %ln5zI = icmp ult i64 %ln5zH, %SpLim_Arg
  %ln5zJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5zI, i1 0 )
  br i1 %ln5zJ, label %c5zC, label %c5zD
c5zD:
  %ln5zK = ptrtoint i64* %Base_Arg to i64
  %ln5zL = inttoptr i64 %ln5zK to i8*
  %ln5zM = load i64, i64* %R1_Var
  %ln5zN = inttoptr i64 %ln5zM to i8*
  %ln5zO = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5zP = call ccc i8* (i8*, i8*) %ln5zO( i8* %ln5zL, i8* %ln5zN ) nounwind
  %ln5zQ = ptrtoint i8* %ln5zP to i64
  store i64 %ln5zQ, i64* %lc5zy
  %ln5zR = load i64, i64* %lc5zy
  %ln5zS = icmp eq i64 %ln5zR, 0
  br i1 %ln5zS, label %c5zA, label %c5zz
c5zz:
  %ln5zU = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5zT = load i64*, i64** %Sp_Var
  %ln5zV = getelementptr inbounds i64, i64* %ln5zT, i32 -2
  store i64 %ln5zU, i64* %ln5zV, !tbaa !2
  %ln5zX = load i64, i64* %lc5zy
  %ln5zW = load i64*, i64** %Sp_Var
  %ln5zY = getelementptr inbounds i64, i64* %ln5zW, i32 -1
  store i64 %ln5zX, i64* %ln5zY, !tbaa !2
  %ln5zZ = ptrtoint %r55o_bytes_struct* @r55o_bytes$def to i64
  store i64 %ln5zZ, i64* %R2_Var
  %ln5A0 = load i64*, i64** %Sp_Var
  %ln5A1 = getelementptr inbounds i64, i64* %ln5A0, i32 -2
  %ln5A2 = ptrtoint i64* %ln5A1 to i64
  %ln5A3 = inttoptr i64 %ln5A2 to i64*
  store i64* %ln5A3, i64** %Sp_Var
  %ln5A4 = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5A5 = load i64*, i64** %Sp_Var
  %ln5A6 = load i64, i64* %R1_Var
  %ln5A7 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5A4( i64* %Base_Arg, i64* %ln5A5, i64* %Hp_Arg, i64 %ln5A6, i64 %ln5A7, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5zA:
  %ln5A9 = load i64, i64* %R1_Var
  %ln5Aa = inttoptr i64 %ln5A9 to i64*
  %ln5Ab = load i64, i64* %ln5Aa, !tbaa !4
  %ln5Ac = inttoptr i64 %ln5Ab to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Ad = load i64*, i64** %Sp_Var
  %ln5Ae = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Ac( i64* %Base_Arg, i64* %ln5Ad, i64* %Hp_Arg, i64 %ln5Ae, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5zC:
  %ln5Af = load i64, i64* %R1_Var
  store i64 %ln5Af, i64* %R1_Var
  %ln5Ag = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Ah = bitcast i64* %ln5Ag to i64*
  %ln5Ai = load i64, i64* %ln5Ah, !tbaa !5
  %ln5Aj = inttoptr i64 %ln5Ai to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Ak = load i64*, i64** %Sp_Var
  %ln5Al = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Aj( i64* %Base_Arg, i64* %ln5Ak, i64* %Hp_Arg, i64 %ln5Al, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)
%r55n_closure_struct = type <{i64, i64, i64, i64}>
@r55n_closure$def = internal global %r55n_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55n_info$def to i64), i64 0, i64 0, i64 0}>
@r55n_closure = internal alias i8, bitcast (%r55n_closure_struct* @r55n_closure$def to i8*)
@r55n_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55n_info$def to i8*)
define internal ghccc void @r55n_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
n5Av:
  %lc5Ap = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5As
c5As:
  %ln5Aw = load i64*, i64** %Sp_Var
  %ln5Ax = getelementptr inbounds i64, i64* %ln5Aw, i32 -2
  %ln5Ay = ptrtoint i64* %ln5Ax to i64
  %ln5Az = icmp ult i64 %ln5Ay, %SpLim_Arg
  %ln5AA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Az, i1 0 )
  br i1 %ln5AA, label %c5At, label %c5Au
c5Au:
  %ln5AB = ptrtoint i64* %Base_Arg to i64
  %ln5AC = inttoptr i64 %ln5AB to i8*
  %ln5AD = load i64, i64* %R1_Var
  %ln5AE = inttoptr i64 %ln5AD to i8*
  %ln5AF = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5AG = call ccc i8* (i8*, i8*) %ln5AF( i8* %ln5AC, i8* %ln5AE ) nounwind
  %ln5AH = ptrtoint i8* %ln5AG to i64
  store i64 %ln5AH, i64* %lc5Ap
  %ln5AI = load i64, i64* %lc5Ap
  %ln5AJ = icmp eq i64 %ln5AI, 0
  br i1 %ln5AJ, label %c5Ar, label %c5Aq
c5Aq:
  %ln5AL = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5AK = load i64*, i64** %Sp_Var
  %ln5AM = getelementptr inbounds i64, i64* %ln5AK, i32 -2
  store i64 %ln5AL, i64* %ln5AM, !tbaa !2
  %ln5AO = load i64, i64* %lc5Ap
  %ln5AN = load i64*, i64** %Sp_Var
  %ln5AP = getelementptr inbounds i64, i64* %ln5AN, i32 -1
  store i64 %ln5AO, i64* %ln5AP, !tbaa !2
  %ln5AQ = ptrtoint %Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64
  store i64 %ln5AQ, i64* %R2_Var
  %ln5AR = load i64*, i64** %Sp_Var
  %ln5AS = getelementptr inbounds i64, i64* %ln5AR, i32 -2
  %ln5AT = ptrtoint i64* %ln5AS to i64
  %ln5AU = inttoptr i64 %ln5AT to i64*
  store i64* %ln5AU, i64** %Sp_Var
  %ln5AV = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5AW = load i64*, i64** %Sp_Var
  %ln5AX = load i64, i64* %R1_Var
  %ln5AY = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5AV( i64* %Base_Arg, i64* %ln5AW, i64* %Hp_Arg, i64 %ln5AX, i64 %ln5AY, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Ar:
  %ln5B0 = load i64, i64* %R1_Var
  %ln5B1 = inttoptr i64 %ln5B0 to i64*
  %ln5B2 = load i64, i64* %ln5B1, !tbaa !4
  %ln5B3 = inttoptr i64 %ln5B2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5B4 = load i64*, i64** %Sp_Var
  %ln5B5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5B3( i64* %Base_Arg, i64* %ln5B4, i64* %Hp_Arg, i64 %ln5B5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5At:
  %ln5B6 = load i64, i64* %R1_Var
  store i64 %ln5B6, i64* %R1_Var
  %ln5B7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5B8 = bitcast i64* %ln5B7 to i64*
  %ln5B9 = load i64, i64* %ln5B8, !tbaa !5
  %ln5Ba = inttoptr i64 %ln5B9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Bb = load i64*, i64** %Sp_Var
  %ln5Bc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Ba( i64* %Base_Arg, i64* %ln5Bb, i64* %Hp_Arg, i64 %ln5Bc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)
%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)
%r55m_closure_struct = type <{i64, i64, i64, i64}>
@r55m_closure$def = internal global %r55m_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55m_info$def to i64), i64 0, i64 0, i64 0}>
@r55m_closure = internal alias i8, bitcast (%r55m_closure_struct* @r55m_closure$def to i8*)
@r55m_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55m_info$def to i8*)
define internal ghccc void @r55m_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
n5Bm:
  %lc5Bg = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Bj
c5Bj:
  %ln5Bn = load i64*, i64** %Sp_Var
  %ln5Bo = getelementptr inbounds i64, i64* %ln5Bn, i32 -2
  %ln5Bp = ptrtoint i64* %ln5Bo to i64
  %ln5Bq = icmp ult i64 %ln5Bp, %SpLim_Arg
  %ln5Br = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Bq, i1 0 )
  br i1 %ln5Br, label %c5Bk, label %c5Bl
c5Bl:
  %ln5Bs = ptrtoint i64* %Base_Arg to i64
  %ln5Bt = inttoptr i64 %ln5Bs to i8*
  %ln5Bu = load i64, i64* %R1_Var
  %ln5Bv = inttoptr i64 %ln5Bu to i8*
  %ln5Bw = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Bx = call ccc i8* (i8*, i8*) %ln5Bw( i8* %ln5Bt, i8* %ln5Bv ) nounwind
  %ln5By = ptrtoint i8* %ln5Bx to i64
  store i64 %ln5By, i64* %lc5Bg
  %ln5Bz = load i64, i64* %lc5Bg
  %ln5BA = icmp eq i64 %ln5Bz, 0
  br i1 %ln5BA, label %c5Bi, label %c5Bh
c5Bh:
  %ln5BC = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5BB = load i64*, i64** %Sp_Var
  %ln5BD = getelementptr inbounds i64, i64* %ln5BB, i32 -2
  store i64 %ln5BC, i64* %ln5BD, !tbaa !2
  %ln5BF = load i64, i64* %lc5Bg
  %ln5BE = load i64*, i64** %Sp_Var
  %ln5BG = getelementptr inbounds i64, i64* %ln5BE, i32 -1
  store i64 %ln5BF, i64* %ln5BG, !tbaa !2
  %ln5BH = ptrtoint %Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64
  store i64 %ln5BH, i64* %R2_Var
  %ln5BI = load i64*, i64** %Sp_Var
  %ln5BJ = getelementptr inbounds i64, i64* %ln5BI, i32 -2
  %ln5BK = ptrtoint i64* %ln5BJ to i64
  %ln5BL = inttoptr i64 %ln5BK to i64*
  store i64* %ln5BL, i64** %Sp_Var
  %ln5BM = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5BN = load i64*, i64** %Sp_Var
  %ln5BO = load i64, i64* %R1_Var
  %ln5BP = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5BM( i64* %Base_Arg, i64* %ln5BN, i64* %Hp_Arg, i64 %ln5BO, i64 %ln5BP, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Bi:
  %ln5BR = load i64, i64* %R1_Var
  %ln5BS = inttoptr i64 %ln5BR to i64*
  %ln5BT = load i64, i64* %ln5BS, !tbaa !4
  %ln5BU = inttoptr i64 %ln5BT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5BV = load i64*, i64** %Sp_Var
  %ln5BW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5BU( i64* %Base_Arg, i64* %ln5BV, i64* %Hp_Arg, i64 %ln5BW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Bk:
  %ln5BX = load i64, i64* %R1_Var
  store i64 %ln5BX, i64* %R1_Var
  %ln5BY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5BZ = bitcast i64* %ln5BY to i64*
  %ln5C0 = load i64, i64* %ln5BZ, !tbaa !5
  %ln5C1 = inttoptr i64 %ln5C0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5C2 = load i64*, i64** %Sp_Var
  %ln5C3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5C1( i64* %Base_Arg, i64* %ln5C2, i64* %Hp_Arg, i64 %ln5C3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55t_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@r55t_closure$def = internal global %r55t_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_SrcLoc_con_info to i64), i64 ptrtoint (%r55m_closure_struct* @r55m_closure$def to i64), i64 ptrtoint (%r55n_closure_struct* @r55n_closure$def to i64), i64 ptrtoint (%r55p_closure_struct* @r55p_closure$def to i64), i64 add (i64 ptrtoint (i8* @stg_INTLIKE_closure to i64),i64 1841), i64 add (i64 ptrtoint (i8* @stg_INTLIKE_closure to i64),i64 529), i64 add (i64 ptrtoint (i8* @stg_INTLIKE_closure to i64),i64 1841), i64 add (i64 ptrtoint (i8* @stg_INTLIKE_closure to i64),i64 913), i64 0}>
@r55t_closure = internal alias i8, bitcast (%r55t_closure_struct* @r55t_closure$def to i8*)
%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)
%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)
%Main_zdtcPs_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtcPs_closure$def = internal global %Main_zdtcPs_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtcPs1_closure_struct* @Main_zdtcPs1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_krepzdztArrzt_closure to i64),i64 4), i64 3152603336918175369, i64 6661543607147607512, i64 0, i64 3}>
@Main_zdtcPs_closure = alias i8, bitcast (%Main_zdtcPs_closure_struct* @Main_zdtcPs_closure$def to i8*)
%Main_zdtczqPzz1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqPzz1_closure$def = internal global %Main_zdtczqPzz1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtcPs_closure_struct* @Main_zdtcPs_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r55W_closure_struct* @r55W_closure$def to i64),i64 2), i64 3}>
@Main_zdtczqPzz1_closure = alias i8, bitcast (%Main_zdtczqPzz1_closure_struct* @Main_zdtczqPzz1_closure$def to i8*)
%r55X_closure_struct = type <{i64, i64, i64, i64}>
@r55X_closure$def = internal global %r55X_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtczqPzz1_closure_struct* @Main_zdtczqPzz1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqPzz1_closure_struct* @Main_zdtczqPzz1_closure$def to i64),i64 1), i64 3}>
@r55X_closure = internal alias i8, bitcast (%r55X_closure_struct* @r55X_closure$def to i8*)
%Main_zdtczqZCzpZC1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqZCzpZC1_closure$def = internal global %Main_zdtczqZCzpZC1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r55V_closure_struct* @r55V_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%r55X_closure_struct* @r55X_closure$def to i64),i64 4), i64 3}>
@Main_zdtczqZCzpZC1_closure = alias i8, bitcast (%Main_zdtczqZCzpZC1_closure_struct* @Main_zdtczqZCzpZC1_closure$def to i8*)
%Main_zdtczqPzz_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqPzz_closure$def = internal global %Main_zdtczqPzz_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqPzz2_closure_struct* @Main_zdtczqPzz2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqPzz1_closure_struct* @Main_zdtczqPzz1_closure$def to i64),i64 1), i64 -4821434816003699014, i64 93718777895652471, i64 1, i64 3}>
@Main_zdtczqPzz_closure = alias i8, bitcast (%Main_zdtczqPzz_closure_struct* @Main_zdtczqPzz_closure$def to i8*)
%Main_zdtczqZCzpZC_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqZCzpZC_closure$def = internal global %Main_zdtczqZCzpZC_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqZCzpZC2_closure_struct* @Main_zdtczqZCzpZC2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqZCzpZC1_closure_struct* @Main_zdtczqZCzpZC1_closure$def to i64),i64 4), i64 7395227422687993392, i64 -7328256106770263986, i64 1, i64 3}>
@Main_zdtczqZCzpZC_closure = alias i8, bitcast (%Main_zdtczqZCzpZC_closure_struct* @Main_zdtczqZCzpZC_closure$def to i8*)
%r55k_bytes_struct = type <{[6 x i8]}>
@r55k_bytes$def = internal constant %r55k_bytes_struct<{[6 x i8] [i8 101, i8 114, i8 114, i8 111, i8 114, i8 0]}>, align 1
@r55k_bytes = internal alias i8, bitcast (%r55k_bytes_struct* @r55k_bytes$def to i8*)
%r55l_closure_struct = type <{i64, i64, i64, i64}>
@r55l_closure$def = internal global %r55l_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55l_info$def to i64), i64 0, i64 0, i64 0}>
@r55l_closure = internal alias i8, bitcast (%r55l_closure_struct* @r55l_closure$def to i8*)
@r55l_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55l_info$def to i8*)
define internal ghccc void @r55l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 0}>
{
n5Cd:
  %lc5C7 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Ca
c5Ca:
  %ln5Ce = load i64*, i64** %Sp_Var
  %ln5Cf = getelementptr inbounds i64, i64* %ln5Ce, i32 -2
  %ln5Cg = ptrtoint i64* %ln5Cf to i64
  %ln5Ch = icmp ult i64 %ln5Cg, %SpLim_Arg
  %ln5Ci = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Ch, i1 0 )
  br i1 %ln5Ci, label %c5Cb, label %c5Cc
c5Cc:
  %ln5Cj = ptrtoint i64* %Base_Arg to i64
  %ln5Ck = inttoptr i64 %ln5Cj to i8*
  %ln5Cl = load i64, i64* %R1_Var
  %ln5Cm = inttoptr i64 %ln5Cl to i8*
  %ln5Cn = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Co = call ccc i8* (i8*, i8*) %ln5Cn( i8* %ln5Ck, i8* %ln5Cm ) nounwind
  %ln5Cp = ptrtoint i8* %ln5Co to i64
  store i64 %ln5Cp, i64* %lc5C7
  %ln5Cq = load i64, i64* %lc5C7
  %ln5Cr = icmp eq i64 %ln5Cq, 0
  br i1 %ln5Cr, label %c5C9, label %c5C8
c5C8:
  %ln5Ct = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Cs = load i64*, i64** %Sp_Var
  %ln5Cu = getelementptr inbounds i64, i64* %ln5Cs, i32 -2
  store i64 %ln5Ct, i64* %ln5Cu, !tbaa !2
  %ln5Cw = load i64, i64* %lc5C7
  %ln5Cv = load i64*, i64** %Sp_Var
  %ln5Cx = getelementptr inbounds i64, i64* %ln5Cv, i32 -1
  store i64 %ln5Cw, i64* %ln5Cx, !tbaa !2
  %ln5Cy = ptrtoint %r55k_bytes_struct* @r55k_bytes$def to i64
  store i64 %ln5Cy, i64* %R2_Var
  %ln5Cz = load i64*, i64** %Sp_Var
  %ln5CA = getelementptr inbounds i64, i64* %ln5Cz, i32 -2
  %ln5CB = ptrtoint i64* %ln5CA to i64
  %ln5CC = inttoptr i64 %ln5CB to i64*
  store i64* %ln5CC, i64** %Sp_Var
  %ln5CD = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5CE = load i64*, i64** %Sp_Var
  %ln5CF = load i64, i64* %R1_Var
  %ln5CG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5CD( i64* %Base_Arg, i64* %ln5CE, i64* %Hp_Arg, i64 %ln5CF, i64 %ln5CG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5C9:
  %ln5CI = load i64, i64* %R1_Var
  %ln5CJ = inttoptr i64 %ln5CI to i64*
  %ln5CK = load i64, i64* %ln5CJ, !tbaa !4
  %ln5CL = inttoptr i64 %ln5CK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5CM = load i64*, i64** %Sp_Var
  %ln5CN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5CL( i64* %Base_Arg, i64* %ln5CM, i64* %Hp_Arg, i64 %ln5CN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Cb:
  %ln5CO = load i64, i64* %R1_Var
  store i64 %ln5CO, i64* %R1_Var
  %ln5CP = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5CQ = bitcast i64* %ln5CP to i64*
  %ln5CR = load i64, i64* %ln5CQ, !tbaa !5
  %ln5CS = inttoptr i64 %ln5CR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5CT = load i64*, i64** %Sp_Var
  %ln5CU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5CS( i64* %Base_Arg, i64* %ln5CT, i64* %Hp_Arg, i64 %ln5CU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55u_closure_struct = type <{i64, i64, i64, i64, i64}>
@r55u_closure$def = internal global %r55u_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_PushCallStack_con_info to i64), i64 ptrtoint (%r55l_closure_struct* @r55l_closure$def to i64), i64 add (i64 ptrtoint (%r55t_closure_struct* @r55t_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziStackziTypes_EmptyCallStack_closure to i64),i64 1), i64 0}>
@r55u_closure = internal alias i8, bitcast (%r55u_closure_struct* @r55u_closure$def to i8*)
%_u5D9_srt_struct = type <{i64, i64, i64, i64}>
%r55w_closure_struct = type <{i64, i64, i64, i64}>
@_u5D9_srt$def = internal global %_u5D9_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziErr_error_closure to i64), i64 ptrtoint (%r55u_closure_struct* @r55u_closure$def to i64), i64 0}>
@_u5D9_srt = internal alias i8, bitcast (%_u5D9_srt_struct* @_u5D9_srt$def to i8*)
@r55w_closure$def = internal global %r55w_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55w_info$def to i64), i64 0, i64 0, i64 0}>
@r55w_closure = internal alias i8, bitcast (%r55w_closure_struct* @r55w_closure$def to i8*)
@r55w_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55w_info$def to i8*)
define internal ghccc void @r55w_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5D9_srt_struct* @_u5D9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55w_info$def to i64)) to i32),i32 0)}>
{
n5Da:
  %lc5CY = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5D3
c5D3:
  %ln5Db = load i64*, i64** %Sp_Var
  %ln5Dc = getelementptr inbounds i64, i64* %ln5Db, i32 -3
  %ln5Dd = ptrtoint i64* %ln5Dc to i64
  %ln5De = icmp ult i64 %ln5Dd, %SpLim_Arg
  %ln5Df = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5De, i1 0 )
  br i1 %ln5Df, label %c5D4, label %c5D5
c5D5:
  %ln5Dg = ptrtoint i64* %Base_Arg to i64
  %ln5Dh = inttoptr i64 %ln5Dg to i8*
  %ln5Di = load i64, i64* %R1_Var
  %ln5Dj = inttoptr i64 %ln5Di to i8*
  %ln5Dk = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Dl = call ccc i8* (i8*, i8*) %ln5Dk( i8* %ln5Dh, i8* %ln5Dj ) nounwind
  %ln5Dm = ptrtoint i8* %ln5Dl to i64
  store i64 %ln5Dm, i64* %lc5CY
  %ln5Dn = load i64, i64* %lc5CY
  %ln5Do = icmp eq i64 %ln5Dn, 0
  br i1 %ln5Do, label %c5D0, label %c5CZ
c5CZ:
  %ln5Dq = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Dp = load i64*, i64** %Sp_Var
  %ln5Dr = getelementptr inbounds i64, i64* %ln5Dp, i32 -2
  store i64 %ln5Dq, i64* %ln5Dr, !tbaa !2
  %ln5Dt = load i64, i64* %lc5CY
  %ln5Ds = load i64*, i64** %Sp_Var
  %ln5Du = getelementptr inbounds i64, i64* %ln5Ds, i32 -1
  store i64 %ln5Dt, i64* %ln5Du, !tbaa !2
  %ln5Dw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5D1_info$def to i64
  %ln5Dv = load i64*, i64** %Sp_Var
  %ln5Dx = getelementptr inbounds i64, i64* %ln5Dv, i32 -3
  store i64 %ln5Dw, i64* %ln5Dx, !tbaa !2
  %ln5Dy = ptrtoint %r55v_bytes_struct* @r55v_bytes$def to i64
  store i64 %ln5Dy, i64* %R2_Var
  %ln5Dz = load i64*, i64** %Sp_Var
  %ln5DA = getelementptr inbounds i64, i64* %ln5Dz, i32 -3
  %ln5DB = ptrtoint i64* %ln5DA to i64
  %ln5DC = inttoptr i64 %ln5DB to i64*
  store i64* %ln5DC, i64** %Sp_Var
  %ln5DD = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5DE = load i64*, i64** %Sp_Var
  %ln5DF = load i64, i64* %R1_Var
  %ln5DG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5DD( i64* %Base_Arg, i64* %ln5DE, i64* %Hp_Arg, i64 %ln5DF, i64 %ln5DG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5D0:
  %ln5DI = load i64, i64* %R1_Var
  %ln5DJ = inttoptr i64 %ln5DI to i64*
  %ln5DK = load i64, i64* %ln5DJ, !tbaa !4
  %ln5DL = inttoptr i64 %ln5DK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5DM = load i64*, i64** %Sp_Var
  %ln5DN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5DL( i64* %Base_Arg, i64* %ln5DM, i64* %Hp_Arg, i64 %ln5DN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5D4:
  %ln5DO = load i64, i64* %R1_Var
  store i64 %ln5DO, i64* %R1_Var
  %ln5DP = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5DQ = bitcast i64* %ln5DP to i64*
  %ln5DR = load i64, i64* %ln5DQ, !tbaa !5
  %ln5DS = inttoptr i64 %ln5DR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5DT = load i64*, i64** %Sp_Var
  %ln5DU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5DS( i64* %Base_Arg, i64* %ln5DT, i64* %Hp_Arg, i64 %ln5DU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5D1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5D1_info$def to i8*)
define internal ghccc void @c5D1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5D9_srt_struct* @_u5D9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5D1_info$def to i64)) to i32),i32 0)}>
{
n5DV:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5D1
c5D1:
  store i64 %R1_Arg, i64* %R3_Var
  %ln5DW = ptrtoint %r55u_closure_struct* @r55u_closure$def to i64
  %ln5DX = add i64 %ln5DW, 2
  store i64 %ln5DX, i64* %R2_Var
  %ln5DY = load i64*, i64** %Sp_Var
  %ln5DZ = getelementptr inbounds i64, i64* %ln5DY, i32 1
  %ln5E0 = ptrtoint i64* %ln5DZ to i64
  %ln5E1 = inttoptr i64 %ln5E0 to i64*
  store i64* %ln5E1, i64** %Sp_Var
  %ln5E2 = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5E3 = load i64*, i64** %Sp_Var
  %ln5E4 = load i64, i64* %R2_Var
  %ln5E5 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5E2( i64* %Base_Arg, i64* %ln5E3, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5E4, i64 %ln5E5, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55y_closure_struct = type <{i64, i64, i64, i64}>
@r55y_closure$def = internal global %r55y_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55y_info$def to i64), i64 0, i64 0, i64 0}>
@r55y_closure = internal alias i8, bitcast (%r55y_closure_struct* @r55y_closure$def to i8*)
@r55y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55y_info$def to i8*)
define internal ghccc void @r55y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5D9_srt_struct* @_u5D9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55y_info$def to i64)) to i32),i32 0)}>
{
n5Ek:
  %lc5E9 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Ee
c5Ee:
  %ln5El = load i64*, i64** %Sp_Var
  %ln5Em = getelementptr inbounds i64, i64* %ln5El, i32 -3
  %ln5En = ptrtoint i64* %ln5Em to i64
  %ln5Eo = icmp ult i64 %ln5En, %SpLim_Arg
  %ln5Ep = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Eo, i1 0 )
  br i1 %ln5Ep, label %c5Ef, label %c5Eg
c5Eg:
  %ln5Eq = ptrtoint i64* %Base_Arg to i64
  %ln5Er = inttoptr i64 %ln5Eq to i8*
  %ln5Es = load i64, i64* %R1_Var
  %ln5Et = inttoptr i64 %ln5Es to i8*
  %ln5Eu = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Ev = call ccc i8* (i8*, i8*) %ln5Eu( i8* %ln5Er, i8* %ln5Et ) nounwind
  %ln5Ew = ptrtoint i8* %ln5Ev to i64
  store i64 %ln5Ew, i64* %lc5E9
  %ln5Ex = load i64, i64* %lc5E9
  %ln5Ey = icmp eq i64 %ln5Ex, 0
  br i1 %ln5Ey, label %c5Eb, label %c5Ea
c5Ea:
  %ln5EA = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Ez = load i64*, i64** %Sp_Var
  %ln5EB = getelementptr inbounds i64, i64* %ln5Ez, i32 -2
  store i64 %ln5EA, i64* %ln5EB, !tbaa !2
  %ln5ED = load i64, i64* %lc5E9
  %ln5EC = load i64*, i64** %Sp_Var
  %ln5EE = getelementptr inbounds i64, i64* %ln5EC, i32 -1
  store i64 %ln5ED, i64* %ln5EE, !tbaa !2
  %ln5EG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ec_info$def to i64
  %ln5EF = load i64*, i64** %Sp_Var
  %ln5EH = getelementptr inbounds i64, i64* %ln5EF, i32 -3
  store i64 %ln5EG, i64* %ln5EH, !tbaa !2
  %ln5EI = ptrtoint %r55v_bytes_struct* @r55v_bytes$def to i64
  store i64 %ln5EI, i64* %R2_Var
  %ln5EJ = load i64*, i64** %Sp_Var
  %ln5EK = getelementptr inbounds i64, i64* %ln5EJ, i32 -3
  %ln5EL = ptrtoint i64* %ln5EK to i64
  %ln5EM = inttoptr i64 %ln5EL to i64*
  store i64* %ln5EM, i64** %Sp_Var
  %ln5EN = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5EO = load i64*, i64** %Sp_Var
  %ln5EP = load i64, i64* %R1_Var
  %ln5EQ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5EN( i64* %Base_Arg, i64* %ln5EO, i64* %Hp_Arg, i64 %ln5EP, i64 %ln5EQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Eb:
  %ln5ES = load i64, i64* %R1_Var
  %ln5ET = inttoptr i64 %ln5ES to i64*
  %ln5EU = load i64, i64* %ln5ET, !tbaa !4
  %ln5EV = inttoptr i64 %ln5EU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5EW = load i64*, i64** %Sp_Var
  %ln5EX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5EV( i64* %Base_Arg, i64* %ln5EW, i64* %Hp_Arg, i64 %ln5EX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Ef:
  %ln5EY = load i64, i64* %R1_Var
  store i64 %ln5EY, i64* %R1_Var
  %ln5EZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5F0 = bitcast i64* %ln5EZ to i64*
  %ln5F1 = load i64, i64* %ln5F0, !tbaa !5
  %ln5F2 = inttoptr i64 %ln5F1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5F3 = load i64*, i64** %Sp_Var
  %ln5F4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5F2( i64* %Base_Arg, i64* %ln5F3, i64* %Hp_Arg, i64 %ln5F4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5Ec_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ec_info$def to i8*)
define internal ghccc void @c5Ec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u5D9_srt_struct* @_u5D9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ec_info$def to i64)) to i32),i32 0)}>
{
n5F5:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5Ec
c5Ec:
  store i64 %R1_Arg, i64* %R3_Var
  %ln5F6 = ptrtoint %r55u_closure_struct* @r55u_closure$def to i64
  %ln5F7 = add i64 %ln5F6, 2
  store i64 %ln5F7, i64* %R2_Var
  %ln5F8 = load i64*, i64** %Sp_Var
  %ln5F9 = getelementptr inbounds i64, i64* %ln5F8, i32 1
  %ln5Fa = ptrtoint i64* %ln5F9 to i64
  %ln5Fb = inttoptr i64 %ln5Fa to i64*
  store i64* %ln5Fb, i64** %Sp_Var
  %ln5Fc = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Fd = load i64*, i64** %Sp_Var
  %ln5Fe = load i64, i64* %R2_Var
  %ln5Ff = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Fc( i64* %Base_Arg, i64* %ln5Fd, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5Fe, i64 %ln5Ff, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55i_bytes_struct = type <{[35 x i8]}>
@r55i_bytes$def = internal constant %r55i_bytes_struct<{[35 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 40, i8 57, i8 57, i8 44, i8 57, i8 41, i8 45, i8 40, i8 49, i8 48, i8 52, i8 44, i8 52, i8 53, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 47, i8 0]}>, align 1
@r55i_bytes = internal alias i8, bitcast (%r55i_bytes_struct* @r55i_bytes$def to i8*)
%r55j_closure_struct = type <{i64, i64, i64, i64}>
@r55j_closure$def = internal global %r55j_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55j_info$def to i64), i64 0, i64 0, i64 0}>
@r55j_closure = internal alias i8, bitcast (%r55j_closure_struct* @r55j_closure$def to i8*)
@r55j_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55j_info$def to i8*)
define internal ghccc void @r55j_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55j_info$def to i64)) to i32),i32 0)}>
{
n5Fp:
  %lc5Fj = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Fm
c5Fm:
  %ln5Fq = load i64*, i64** %Sp_Var
  %ln5Fr = getelementptr inbounds i64, i64* %ln5Fq, i32 -2
  %ln5Fs = ptrtoint i64* %ln5Fr to i64
  %ln5Ft = icmp ult i64 %ln5Fs, %SpLim_Arg
  %ln5Fu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Ft, i1 0 )
  br i1 %ln5Fu, label %c5Fn, label %c5Fo
c5Fo:
  %ln5Fv = ptrtoint i64* %Base_Arg to i64
  %ln5Fw = inttoptr i64 %ln5Fv to i8*
  %ln5Fx = load i64, i64* %R1_Var
  %ln5Fy = inttoptr i64 %ln5Fx to i8*
  %ln5Fz = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5FA = call ccc i8* (i8*, i8*) %ln5Fz( i8* %ln5Fw, i8* %ln5Fy ) nounwind
  %ln5FB = ptrtoint i8* %ln5FA to i64
  store i64 %ln5FB, i64* %lc5Fj
  %ln5FC = load i64, i64* %lc5Fj
  %ln5FD = icmp eq i64 %ln5FC, 0
  br i1 %ln5FD, label %c5Fl, label %c5Fk
c5Fk:
  %ln5FF = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5FE = load i64*, i64** %Sp_Var
  %ln5FG = getelementptr inbounds i64, i64* %ln5FE, i32 -2
  store i64 %ln5FF, i64* %ln5FG, !tbaa !2
  %ln5FI = load i64, i64* %lc5Fj
  %ln5FH = load i64*, i64** %Sp_Var
  %ln5FJ = getelementptr inbounds i64, i64* %ln5FH, i32 -1
  store i64 %ln5FI, i64* %ln5FJ, !tbaa !2
  %ln5FK = ptrtoint %r55i_bytes_struct* @r55i_bytes$def to i64
  store i64 %ln5FK, i64* %R2_Var
  %ln5FL = load i64*, i64** %Sp_Var
  %ln5FM = getelementptr inbounds i64, i64* %ln5FL, i32 -2
  %ln5FN = ptrtoint i64* %ln5FM to i64
  %ln5FO = inttoptr i64 %ln5FN to i64*
  store i64* %ln5FO, i64** %Sp_Var
  %ln5FP = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5FQ = load i64*, i64** %Sp_Var
  %ln5FR = load i64, i64* %R1_Var
  %ln5FS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5FP( i64* %Base_Arg, i64* %ln5FQ, i64* %Hp_Arg, i64 %ln5FR, i64 %ln5FS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Fl:
  %ln5FU = load i64, i64* %R1_Var
  %ln5FV = inttoptr i64 %ln5FU to i64*
  %ln5FW = load i64, i64* %ln5FV, !tbaa !4
  %ln5FX = inttoptr i64 %ln5FW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5FY = load i64*, i64** %Sp_Var
  %ln5FZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5FX( i64* %Base_Arg, i64* %ln5FY, i64* %Hp_Arg, i64 %ln5FZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Fn:
  %ln5G0 = load i64, i64* %R1_Var
  store i64 %ln5G0, i64* %R1_Var
  %ln5G1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5G2 = bitcast i64* %ln5G1 to i64*
  %ln5G3 = load i64, i64* %ln5G2, !tbaa !5
  %ln5G4 = inttoptr i64 %ln5G3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5G5 = load i64*, i64** %Sp_Var
  %ln5G6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5G4( i64* %Base_Arg, i64* %ln5G5, i64* %Hp_Arg, i64 %ln5G6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55x_closure_struct = type <{i64, i64, i64, i64}>
@r55x_closure$def = internal global %r55x_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55x_info$def to i64), i64 0, i64 0, i64 0}>
@r55x_closure = internal alias i8, bitcast (%r55x_closure_struct* @r55x_closure$def to i8*)
@r55x_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55x_info$def to i8*)
define internal ghccc void @r55x_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55x_info$def to i64)) to i32),i32 0)}>
{
n5Gg:
  %lc5Ga = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Gd
c5Gd:
  %ln5Gh = load i64*, i64** %Sp_Var
  %ln5Gi = getelementptr inbounds i64, i64* %ln5Gh, i32 -2
  %ln5Gj = ptrtoint i64* %ln5Gi to i64
  %ln5Gk = icmp ult i64 %ln5Gj, %SpLim_Arg
  %ln5Gl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Gk, i1 0 )
  br i1 %ln5Gl, label %c5Ge, label %c5Gf
c5Gf:
  %ln5Gm = ptrtoint i64* %Base_Arg to i64
  %ln5Gn = inttoptr i64 %ln5Gm to i8*
  %ln5Go = load i64, i64* %R1_Var
  %ln5Gp = inttoptr i64 %ln5Go to i8*
  %ln5Gq = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Gr = call ccc i8* (i8*, i8*) %ln5Gq( i8* %ln5Gn, i8* %ln5Gp ) nounwind
  %ln5Gs = ptrtoint i8* %ln5Gr to i64
  store i64 %ln5Gs, i64* %lc5Ga
  %ln5Gt = load i64, i64* %lc5Ga
  %ln5Gu = icmp eq i64 %ln5Gt, 0
  br i1 %ln5Gu, label %c5Gc, label %c5Gb
c5Gb:
  %ln5Gw = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Gv = load i64*, i64** %Sp_Var
  %ln5Gx = getelementptr inbounds i64, i64* %ln5Gv, i32 -2
  store i64 %ln5Gw, i64* %ln5Gx, !tbaa !2
  %ln5Gz = load i64, i64* %lc5Ga
  %ln5Gy = load i64*, i64** %Sp_Var
  %ln5GA = getelementptr inbounds i64, i64* %ln5Gy, i32 -1
  store i64 %ln5Gz, i64* %ln5GA, !tbaa !2
  %ln5GB = ptrtoint %r55i_bytes_struct* @r55i_bytes$def to i64
  store i64 %ln5GB, i64* %R2_Var
  %ln5GC = load i64*, i64** %Sp_Var
  %ln5GD = getelementptr inbounds i64, i64* %ln5GC, i32 -2
  %ln5GE = ptrtoint i64* %ln5GD to i64
  %ln5GF = inttoptr i64 %ln5GE to i64*
  store i64* %ln5GF, i64** %Sp_Var
  %ln5GG = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5GH = load i64*, i64** %Sp_Var
  %ln5GI = load i64, i64* %R1_Var
  %ln5GJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5GG( i64* %Base_Arg, i64* %ln5GH, i64* %Hp_Arg, i64 %ln5GI, i64 %ln5GJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Gc:
  %ln5GL = load i64, i64* %R1_Var
  %ln5GM = inttoptr i64 %ln5GL to i64*
  %ln5GN = load i64, i64* %ln5GM, !tbaa !4
  %ln5GO = inttoptr i64 %ln5GN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5GP = load i64*, i64** %Sp_Var
  %ln5GQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5GO( i64* %Base_Arg, i64* %ln5GP, i64* %Hp_Arg, i64 %ln5GQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Ge:
  %ln5GR = load i64, i64* %R1_Var
  store i64 %ln5GR, i64* %R1_Var
  %ln5GS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5GT = bitcast i64* %ln5GS to i64*
  %ln5GU = load i64, i64* %ln5GT, !tbaa !5
  %ln5GV = inttoptr i64 %ln5GU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5GW = load i64*, i64** %Sp_Var
  %ln5GX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5GV( i64* %Base_Arg, i64* %ln5GW, i64* %Hp_Arg, i64 %ln5GX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwextract_closure_struct = type <{i64}>
@Main_zdwextract_closure$def = internal global %Main_zdwextract_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to i64)}>
@Main_zdwextract_closure = alias i8, bitcast (%Main_zdwextract_closure_struct* @Main_zdwextract_closure$def to i8*)
@s5az_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5az_info$def to i8*)
define internal ghccc void @s5az_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
n5HD:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Hg
c5Hg:
  %ln5HE = load i64*, i64** %Sp_Var
  %ln5HF = getelementptr inbounds i64, i64* %ln5HE, i32 -2
  %ln5HG = ptrtoint i64* %ln5HF to i64
  %ln5HH = icmp ult i64 %ln5HG, %SpLim_Arg
  %ln5HI = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5HH, i1 0 )
  br i1 %ln5HI, label %c5Hh, label %c5Hi
c5Hi:
  %ln5HK = ptrtoint i8* @stg_upd_frame_info to i64
  %ln5HJ = load i64*, i64** %Sp_Var
  %ln5HL = getelementptr inbounds i64, i64* %ln5HJ, i32 -2
  store i64 %ln5HK, i64* %ln5HL, !tbaa !2
  %ln5HN = load i64, i64* %R1_Var
  %ln5HM = load i64*, i64** %Sp_Var
  %ln5HO = getelementptr inbounds i64, i64* %ln5HM, i32 -1
  store i64 %ln5HN, i64* %ln5HO, !tbaa !2
  %ln5HR = load i64, i64* %R1_Var
  %ln5HS = add i64 %ln5HR, 16
  %ln5HT = inttoptr i64 %ln5HS to i64*
  %ln5HU = load i64, i64* %ln5HT, !tbaa !4
  store i64 %ln5HU, i64* %R3_Var
  %ln5HX = load i64, i64* %R1_Var
  %ln5HY = add i64 %ln5HX, 24
  %ln5HZ = inttoptr i64 %ln5HY to i64*
  %ln5I0 = load i64, i64* %ln5HZ, !tbaa !4
  %ln5I1 = add i64 %ln5I0, -1
  store i64 %ln5I1, i64* %R2_Var
  %ln5I2 = load i64*, i64** %Sp_Var
  %ln5I3 = getelementptr inbounds i64, i64* %ln5I2, i32 -2
  %ln5I4 = ptrtoint i64* %ln5I3 to i64
  %ln5I5 = inttoptr i64 %ln5I4 to i64*
  store i64* %ln5I5, i64** %Sp_Var
  %ln5I6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5I7 = load i64*, i64** %Sp_Var
  %ln5I8 = load i64, i64* %R1_Var
  %ln5I9 = load i64, i64* %R2_Var
  %ln5Ia = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5I6( i64* %Base_Arg, i64* %ln5I7, i64* %Hp_Arg, i64 %ln5I8, i64 %ln5I9, i64 %ln5Ia, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Hh:
  %ln5Ib = load i64, i64* %R1_Var
  store i64 %ln5Ib, i64* %R1_Var
  %ln5Ic = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Id = bitcast i64* %ln5Ic to i64*
  %ln5Ie = load i64, i64* %ln5Id, !tbaa !5
  %ln5If = inttoptr i64 %ln5Ie to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Ig = load i64*, i64** %Sp_Var
  %ln5Ih = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5If( i64* %Base_Arg, i64* %ln5Ig, i64* %Hp_Arg, i64 %ln5Ih, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwextract_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to i8*)
define ghccc void @Main_zdwextract_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934605, i64 0, i32 14, i32 0}>
{
n5Ii:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5Hm
c5Hm:
  %ln5Ij = load i64*, i64** %Sp_Var
  %ln5Ik = getelementptr inbounds i64, i64* %ln5Ij, i32 -2
  %ln5Il = ptrtoint i64* %ln5Ik to i64
  %ln5Im = icmp ult i64 %ln5Il, %SpLim_Arg
  %ln5In = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Im, i1 0 )
  br i1 %ln5In, label %c5Hn, label %c5Ho
c5Ho:
  %ln5Io = load i64, i64* %R2_Var
  switch i64 %ln5Io, label %c5Hk [i64 0, label %u5HC]
c5Hk:
  %ln5Iq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5H4_info$def to i64
  %ln5Ip = load i64*, i64** %Sp_Var
  %ln5Ir = getelementptr inbounds i64, i64* %ln5Ip, i32 -2
  store i64 %ln5Iq, i64* %ln5Ir, !tbaa !2
  %ln5Is = load i64, i64* %R3_Var
  store i64 %ln5Is, i64* %R1_Var
  %ln5Iu = load i64, i64* %R2_Var
  %ln5It = load i64*, i64** %Sp_Var
  %ln5Iv = getelementptr inbounds i64, i64* %ln5It, i32 -1
  store i64 %ln5Iu, i64* %ln5Iv, !tbaa !2
  %ln5Iw = load i64*, i64** %Sp_Var
  %ln5Ix = getelementptr inbounds i64, i64* %ln5Iw, i32 -2
  %ln5Iy = ptrtoint i64* %ln5Ix to i64
  %ln5Iz = inttoptr i64 %ln5Iy to i64*
  store i64* %ln5Iz, i64** %Sp_Var
  %ln5IA = load i64, i64* %R1_Var
  %ln5IB = and i64 %ln5IA, 7
  %ln5IC = icmp ne i64 %ln5IB, 0
  br i1 %ln5IC, label %u5HB, label %c5H5
c5H5:
  %ln5IE = load i64, i64* %R1_Var
  %ln5IF = inttoptr i64 %ln5IE to i64*
  %ln5IG = load i64, i64* %ln5IF, !tbaa !4
  %ln5IH = inttoptr i64 %ln5IG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5II = load i64*, i64** %Sp_Var
  %ln5IJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5IH( i64* %Base_Arg, i64* %ln5II, i64* %Hp_Arg, i64 %ln5IJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5HB:
  %ln5IK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5H4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5IL = load i64*, i64** %Sp_Var
  %ln5IM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5IK( i64* %Base_Arg, i64* %ln5IL, i64* %Hp_Arg, i64 %ln5IM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5HC:
  %ln5IN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5Hl$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5IO = load i64*, i64** %Sp_Var
  %ln5IP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5IN( i64* %Base_Arg, i64* %ln5IO, i64* %Hp_Arg, i64 %ln5IP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Hn:
  %ln5IQ = load i64, i64* %R3_Var
  store i64 %ln5IQ, i64* %R3_Var
  %ln5IR = load i64, i64* %R2_Var
  store i64 %ln5IR, i64* %R2_Var
  %ln5IS = ptrtoint %Main_zdwextract_closure_struct* @Main_zdwextract_closure$def to i64
  store i64 %ln5IS, i64* %R1_Var
  %ln5IT = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5IU = bitcast i64* %ln5IT to i64*
  %ln5IV = load i64, i64* %ln5IU, !tbaa !5
  %ln5IW = inttoptr i64 %ln5IV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5IX = load i64*, i64** %Sp_Var
  %ln5IY = load i64, i64* %R1_Var
  %ln5IZ = load i64, i64* %R2_Var
  %ln5J0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5IW( i64* %Base_Arg, i64* %ln5IX, i64* %Hp_Arg, i64 %ln5IY, i64 %ln5IZ, i64 %ln5J0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5H4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5H4_info$def to i8*)
define internal ghccc void @c5H4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
n5J1:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5aw = alloca i64, i32 1
  %ls5ax = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5H4
c5H4:
  %ln5J2 = load i64, i64* %R1_Var
  %ln5J3 = and i64 %ln5J2, 7
  switch i64 %ln5J3, label %u5Hz [i64 1, label %u5Hz
i64 2, label %c5Hu]
u5Hz:
  %ln5J4 = load i64*, i64** %Sp_Var
  %ln5J5 = getelementptr inbounds i64, i64* %ln5J4, i32 2
  %ln5J6 = ptrtoint i64* %ln5J5 to i64
  %ln5J7 = inttoptr i64 %ln5J6 to i64*
  store i64* %ln5J7, i64** %Sp_Var
  %ln5J8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5Hl$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5J9 = load i64*, i64** %Sp_Var
  %ln5Ja = load i64*, i64** %Hp_Var
  %ln5Jb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5J8( i64* %Base_Arg, i64* %ln5J9, i64* %ln5Ja, i64 %ln5Jb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Hu:
  %ln5Jc = load i64*, i64** %Hp_Var
  %ln5Jd = getelementptr inbounds i64, i64* %ln5Jc, i32 7
  %ln5Je = ptrtoint i64* %ln5Jd to i64
  %ln5Jf = inttoptr i64 %ln5Je to i64*
  store i64* %ln5Jf, i64** %Hp_Var
  %ln5Jg = load i64*, i64** %Hp_Var
  %ln5Jh = ptrtoint i64* %ln5Jg to i64
  %ln5Ji = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln5Jj = bitcast i64* %ln5Ji to i64*
  %ln5Jk = load i64, i64* %ln5Jj, !tbaa !5
  %ln5Jl = icmp ugt i64 %ln5Jh, %ln5Jk
  %ln5Jm = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Jl, i1 0 )
  br i1 %ln5Jm, label %c5Hx, label %c5Hw
c5Hw:
  %ln5Jp = load i64, i64* %R1_Var
  %ln5Jq = add i64 %ln5Jp, 6
  %ln5Jr = inttoptr i64 %ln5Jq to i64*
  %ln5Js = load i64, i64* %ln5Jr, !tbaa !4
  store i64 %ln5Js, i64* %ls5aw
  %ln5Jv = load i64, i64* %R1_Var
  %ln5Jw = add i64 %ln5Jv, 14
  %ln5Jx = inttoptr i64 %ln5Jw to i64*
  %ln5Jy = load i64, i64* %ln5Jx, !tbaa !4
  store i64 %ln5Jy, i64* %ls5ax
  %ln5JA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5az_info$def to i64
  %ln5Jz = load i64*, i64** %Hp_Var
  %ln5JB = getelementptr inbounds i64, i64* %ln5Jz, i32 -6
  store i64 %ln5JA, i64* %ln5JB, !tbaa !3
  %ln5JD = load i64, i64* %ls5ax
  %ln5JC = load i64*, i64** %Hp_Var
  %ln5JE = getelementptr inbounds i64, i64* %ln5JC, i32 -4
  store i64 %ln5JD, i64* %ln5JE, !tbaa !3
  %ln5JG = load i64*, i64** %Sp_Var
  %ln5JH = getelementptr inbounds i64, i64* %ln5JG, i32 1
  %ln5JI = bitcast i64* %ln5JH to i64*
  %ln5JJ = load i64, i64* %ln5JI, !tbaa !2
  %ln5JF = load i64*, i64** %Hp_Var
  %ln5JK = getelementptr inbounds i64, i64* %ln5JF, i32 -3
  store i64 %ln5JJ, i64* %ln5JK, !tbaa !3
  %ln5JM = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln5JL = load i64*, i64** %Hp_Var
  %ln5JN = getelementptr inbounds i64, i64* %ln5JL, i32 -2
  store i64 %ln5JM, i64* %ln5JN, !tbaa !3
  %ln5JP = load i64, i64* %ls5aw
  %ln5JO = load i64*, i64** %Hp_Var
  %ln5JQ = getelementptr inbounds i64, i64* %ln5JO, i32 -1
  store i64 %ln5JP, i64* %ln5JQ, !tbaa !3
  %ln5JS = load i64*, i64** %Hp_Var
  %ln5JT = getelementptr inbounds i64, i64* %ln5JS, i32 -6
  %ln5JU = ptrtoint i64* %ln5JT to i64
  %ln5JR = load i64*, i64** %Hp_Var
  %ln5JV = getelementptr inbounds i64, i64* %ln5JR, i32 0
  store i64 %ln5JU, i64* %ln5JV, !tbaa !3
  %ln5JX = load i64*, i64** %Hp_Var
  %ln5JY = ptrtoint i64* %ln5JX to i64
  %ln5JZ = add i64 %ln5JY, -14
  store i64 %ln5JZ, i64* %R1_Var
  %ln5K0 = load i64*, i64** %Sp_Var
  %ln5K1 = getelementptr inbounds i64, i64* %ln5K0, i32 2
  %ln5K2 = ptrtoint i64* %ln5K1 to i64
  %ln5K3 = inttoptr i64 %ln5K2 to i64*
  store i64* %ln5K3, i64** %Sp_Var
  %ln5K4 = load i64*, i64** %Sp_Var
  %ln5K5 = getelementptr inbounds i64, i64* %ln5K4, i32 0
  %ln5K6 = bitcast i64* %ln5K5 to i64*
  %ln5K7 = load i64, i64* %ln5K6, !tbaa !2
  %ln5K8 = inttoptr i64 %ln5K7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5K9 = load i64*, i64** %Sp_Var
  %ln5Ka = load i64*, i64** %Hp_Var
  %ln5Kb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5K8( i64* %Base_Arg, i64* %ln5K9, i64* %ln5Ka, i64 %ln5Kb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Hx:
  %ln5Kc = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln5Kc, !tbaa !5
  %ln5Kd = load i64, i64* %R1_Var
  store i64 %ln5Kd, i64* %R1_Var
  %ln5Ke = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Kf = load i64*, i64** %Sp_Var
  %ln5Kg = load i64*, i64** %Hp_Var
  %ln5Kh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Ke( i64* %Base_Arg, i64* %ln5Kf, i64* %ln5Kg, i64 %ln5Kh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c5Hl = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c5Hl$def to i8*)
define internal ghccc void @_c5Hl$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n5Ki:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Hl
c5Hl:
  %ln5Kj = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln5Kk = add i64 %ln5Kj, 1
  store i64 %ln5Kk, i64* %R1_Var
  %ln5Kl = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln5Km = bitcast i64* %ln5Kl to i64*
  %ln5Kn = load i64, i64* %ln5Km, !tbaa !2
  %ln5Ko = inttoptr i64 %ln5Kn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Kp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Ko( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5Kp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_extract_closure_struct = type <{i64}>
@Main_extract_closure$def = internal global %Main_extract_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_extract_info$def to i64)}>
@Main_extract_closure = alias i8, bitcast (%Main_extract_closure_struct* @Main_extract_closure$def to i8*)
@Main_extract_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_extract_info$def to i8*)
define ghccc void @Main_extract_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n5KE:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5Kx
c5Kx:
  %ln5KF = load i64*, i64** %Sp_Var
  %ln5KG = getelementptr inbounds i64, i64* %ln5KF, i32 -2
  %ln5KH = ptrtoint i64* %ln5KG to i64
  %ln5KI = icmp ult i64 %ln5KH, %SpLim_Arg
  %ln5KJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5KI, i1 0 )
  br i1 %ln5KJ, label %c5Ky, label %c5Kz
c5Kz:
  %ln5KL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ku_info$def to i64
  %ln5KK = load i64*, i64** %Sp_Var
  %ln5KM = getelementptr inbounds i64, i64* %ln5KK, i32 -2
  store i64 %ln5KL, i64* %ln5KM, !tbaa !2
  %ln5KN = load i64, i64* %R2_Var
  store i64 %ln5KN, i64* %R1_Var
  %ln5KP = load i64, i64* %R3_Var
  %ln5KO = load i64*, i64** %Sp_Var
  %ln5KQ = getelementptr inbounds i64, i64* %ln5KO, i32 -1
  store i64 %ln5KP, i64* %ln5KQ, !tbaa !2
  %ln5KR = load i64*, i64** %Sp_Var
  %ln5KS = getelementptr inbounds i64, i64* %ln5KR, i32 -2
  %ln5KT = ptrtoint i64* %ln5KS to i64
  %ln5KU = inttoptr i64 %ln5KT to i64*
  store i64* %ln5KU, i64** %Sp_Var
  %ln5KV = load i64, i64* %R1_Var
  %ln5KW = and i64 %ln5KV, 7
  %ln5KX = icmp ne i64 %ln5KW, 0
  br i1 %ln5KX, label %u5KD, label %c5Kv
c5Kv:
  %ln5KZ = load i64, i64* %R1_Var
  %ln5L0 = inttoptr i64 %ln5KZ to i64*
  %ln5L1 = load i64, i64* %ln5L0, !tbaa !4
  %ln5L2 = inttoptr i64 %ln5L1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5L3 = load i64*, i64** %Sp_Var
  %ln5L4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5L2( i64* %Base_Arg, i64* %ln5L3, i64* %Hp_Arg, i64 %ln5L4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5KD:
  %ln5L5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ku_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5L6 = load i64*, i64** %Sp_Var
  %ln5L7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5L5( i64* %Base_Arg, i64* %ln5L6, i64* %Hp_Arg, i64 %ln5L7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Ky:
  %ln5L8 = load i64, i64* %R3_Var
  store i64 %ln5L8, i64* %R3_Var
  %ln5L9 = load i64, i64* %R2_Var
  store i64 %ln5L9, i64* %R2_Var
  %ln5La = ptrtoint %Main_extract_closure_struct* @Main_extract_closure$def to i64
  store i64 %ln5La, i64* %R1_Var
  %ln5Lb = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5Lc = bitcast i64* %ln5Lb to i64*
  %ln5Ld = load i64, i64* %ln5Lc, !tbaa !5
  %ln5Le = inttoptr i64 %ln5Ld to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Lf = load i64*, i64** %Sp_Var
  %ln5Lg = load i64, i64* %R1_Var
  %ln5Lh = load i64, i64* %R2_Var
  %ln5Li = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Le( i64* %Base_Arg, i64* %ln5Lf, i64* %Hp_Arg, i64 %ln5Lg, i64 %ln5Lh, i64 %ln5Li, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5Ku_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Ku_info$def to i8*)
define internal ghccc void @c5Ku_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n5Lj:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5Ku
c5Ku:
  %ln5Lk = load i64*, i64** %Sp_Var
  %ln5Ll = getelementptr inbounds i64, i64* %ln5Lk, i32 1
  %ln5Lm = bitcast i64* %ln5Ll to i64*
  %ln5Ln = load i64, i64* %ln5Lm, !tbaa !2
  store i64 %ln5Ln, i64* %R3_Var
  %ln5Lo = add i64 %R1_Arg, 7
  %ln5Lp = inttoptr i64 %ln5Lo to i64*
  %ln5Lq = load i64, i64* %ln5Lp, !tbaa !4
  store i64 %ln5Lq, i64* %R2_Var
  %ln5Lr = load i64*, i64** %Sp_Var
  %ln5Ls = getelementptr inbounds i64, i64* %ln5Lr, i32 2
  %ln5Lt = ptrtoint i64* %ln5Ls to i64
  %ln5Lu = inttoptr i64 %ln5Lt to i64*
  store i64* %ln5Lu, i64** %Sp_Var
  %ln5Lv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Lw = load i64*, i64** %Sp_Var
  %ln5Lx = load i64, i64* %R2_Var
  %ln5Ly = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Lv( i64* %Base_Arg, i64* %ln5Lw, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln5Lx, i64 %ln5Ly, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs13_bytes_struct = type <{[21 x i8]}>
@Main_zdfFloatingPs13_bytes$def = internal constant %Main_zdfFloatingPs13_bytes_struct<{[21 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 112, i8 105, i8 0]}>, align 1
@Main_zdfFloatingPs13_bytes = alias i8, bitcast (%Main_zdfFloatingPs13_bytes_struct* @Main_zdfFloatingPs13_bytes$def to i8*)
%r55O_closure_struct = type <{i64, i64, i64, i64}>
@r55O_closure$def = internal global %r55O_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55O_info$def to i64), i64 0, i64 0, i64 0}>
@r55O_closure = internal alias i8, bitcast (%r55O_closure_struct* @r55O_closure$def to i8*)
@r55O_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55O_info$def to i8*)
define internal ghccc void @r55O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55O_info$def to i64)) to i32),i32 0)}>
{
n5LI:
  %lc5LC = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5LF
c5LF:
  %ln5LJ = load i64*, i64** %Sp_Var
  %ln5LK = getelementptr inbounds i64, i64* %ln5LJ, i32 -2
  %ln5LL = ptrtoint i64* %ln5LK to i64
  %ln5LM = icmp ult i64 %ln5LL, %SpLim_Arg
  %ln5LN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5LM, i1 0 )
  br i1 %ln5LN, label %c5LG, label %c5LH
c5LH:
  %ln5LO = ptrtoint i64* %Base_Arg to i64
  %ln5LP = inttoptr i64 %ln5LO to i8*
  %ln5LQ = load i64, i64* %R1_Var
  %ln5LR = inttoptr i64 %ln5LQ to i8*
  %ln5LS = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5LT = call ccc i8* (i8*, i8*) %ln5LS( i8* %ln5LP, i8* %ln5LR ) nounwind
  %ln5LU = ptrtoint i8* %ln5LT to i64
  store i64 %ln5LU, i64* %lc5LC
  %ln5LV = load i64, i64* %lc5LC
  %ln5LW = icmp eq i64 %ln5LV, 0
  br i1 %ln5LW, label %c5LE, label %c5LD
c5LD:
  %ln5LY = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5LX = load i64*, i64** %Sp_Var
  %ln5LZ = getelementptr inbounds i64, i64* %ln5LX, i32 -2
  store i64 %ln5LY, i64* %ln5LZ, !tbaa !2
  %ln5M1 = load i64, i64* %lc5LC
  %ln5M0 = load i64*, i64** %Sp_Var
  %ln5M2 = getelementptr inbounds i64, i64* %ln5M0, i32 -1
  store i64 %ln5M1, i64* %ln5M2, !tbaa !2
  %ln5M3 = ptrtoint %Main_zdfFloatingPs13_bytes_struct* @Main_zdfFloatingPs13_bytes$def to i64
  store i64 %ln5M3, i64* %R2_Var
  %ln5M4 = load i64*, i64** %Sp_Var
  %ln5M5 = getelementptr inbounds i64, i64* %ln5M4, i32 -2
  %ln5M6 = ptrtoint i64* %ln5M5 to i64
  %ln5M7 = inttoptr i64 %ln5M6 to i64*
  store i64* %ln5M7, i64** %Sp_Var
  %ln5M8 = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5M9 = load i64*, i64** %Sp_Var
  %ln5Ma = load i64, i64* %R1_Var
  %ln5Mb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5M8( i64* %Base_Arg, i64* %ln5M9, i64* %Hp_Arg, i64 %ln5Ma, i64 %ln5Mb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5LE:
  %ln5Md = load i64, i64* %R1_Var
  %ln5Me = inttoptr i64 %ln5Md to i64*
  %ln5Mf = load i64, i64* %ln5Me, !tbaa !4
  %ln5Mg = inttoptr i64 %ln5Mf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Mh = load i64*, i64** %Sp_Var
  %ln5Mi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Mg( i64* %Base_Arg, i64* %ln5Mh, i64* %Hp_Arg, i64 %ln5Mi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5LG:
  %ln5Mj = load i64, i64* %R1_Var
  store i64 %ln5Mj, i64* %R1_Var
  %ln5Mk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Ml = bitcast i64* %ln5Mk to i64*
  %ln5Mm = load i64, i64* %ln5Ml, !tbaa !5
  %ln5Mn = inttoptr i64 %ln5Mm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Mo = load i64*, i64** %Sp_Var
  %ln5Mp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Mn( i64* %Base_Arg, i64* %ln5Mo, i64* %Hp_Arg, i64 %ln5Mp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs12_bytes_struct = type <{[22 x i8]}>
@Main_zdfFloatingPs12_bytes$def = internal constant %Main_zdfFloatingPs12_bytes_struct<{[22 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 101, i8 120, i8 112, i8 0]}>, align 1
@Main_zdfFloatingPs12_bytes = alias i8, bitcast (%Main_zdfFloatingPs12_bytes_struct* @Main_zdfFloatingPs12_bytes$def to i8*)
%r55I_closure_struct = type <{i64, i64, i64, i64}>
@r55I_closure$def = internal global %r55I_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55I_info$def to i64), i64 0, i64 0, i64 0}>
@r55I_closure = internal alias i8, bitcast (%r55I_closure_struct* @r55I_closure$def to i8*)
@r55I_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55I_info$def to i8*)
define internal ghccc void @r55I_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55I_info$def to i64)) to i32),i32 0)}>
{
n5Mz:
  %lc5Mt = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Mw
c5Mw:
  %ln5MA = load i64*, i64** %Sp_Var
  %ln5MB = getelementptr inbounds i64, i64* %ln5MA, i32 -2
  %ln5MC = ptrtoint i64* %ln5MB to i64
  %ln5MD = icmp ult i64 %ln5MC, %SpLim_Arg
  %ln5ME = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5MD, i1 0 )
  br i1 %ln5ME, label %c5Mx, label %c5My
c5My:
  %ln5MF = ptrtoint i64* %Base_Arg to i64
  %ln5MG = inttoptr i64 %ln5MF to i8*
  %ln5MH = load i64, i64* %R1_Var
  %ln5MI = inttoptr i64 %ln5MH to i8*
  %ln5MJ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5MK = call ccc i8* (i8*, i8*) %ln5MJ( i8* %ln5MG, i8* %ln5MI ) nounwind
  %ln5ML = ptrtoint i8* %ln5MK to i64
  store i64 %ln5ML, i64* %lc5Mt
  %ln5MM = load i64, i64* %lc5Mt
  %ln5MN = icmp eq i64 %ln5MM, 0
  br i1 %ln5MN, label %c5Mv, label %c5Mu
c5Mu:
  %ln5MP = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5MO = load i64*, i64** %Sp_Var
  %ln5MQ = getelementptr inbounds i64, i64* %ln5MO, i32 -2
  store i64 %ln5MP, i64* %ln5MQ, !tbaa !2
  %ln5MS = load i64, i64* %lc5Mt
  %ln5MR = load i64*, i64** %Sp_Var
  %ln5MT = getelementptr inbounds i64, i64* %ln5MR, i32 -1
  store i64 %ln5MS, i64* %ln5MT, !tbaa !2
  %ln5MU = ptrtoint %Main_zdfFloatingPs12_bytes_struct* @Main_zdfFloatingPs12_bytes$def to i64
  store i64 %ln5MU, i64* %R2_Var
  %ln5MV = load i64*, i64** %Sp_Var
  %ln5MW = getelementptr inbounds i64, i64* %ln5MV, i32 -2
  %ln5MX = ptrtoint i64* %ln5MW to i64
  %ln5MY = inttoptr i64 %ln5MX to i64*
  store i64* %ln5MY, i64** %Sp_Var
  %ln5MZ = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5N0 = load i64*, i64** %Sp_Var
  %ln5N1 = load i64, i64* %R1_Var
  %ln5N2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5MZ( i64* %Base_Arg, i64* %ln5N0, i64* %Hp_Arg, i64 %ln5N1, i64 %ln5N2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Mv:
  %ln5N4 = load i64, i64* %R1_Var
  %ln5N5 = inttoptr i64 %ln5N4 to i64*
  %ln5N6 = load i64, i64* %ln5N5, !tbaa !4
  %ln5N7 = inttoptr i64 %ln5N6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5N8 = load i64*, i64** %Sp_Var
  %ln5N9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5N7( i64* %Base_Arg, i64* %ln5N8, i64* %Hp_Arg, i64 %ln5N9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Mx:
  %ln5Na = load i64, i64* %R1_Var
  store i64 %ln5Na, i64* %R1_Var
  %ln5Nb = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Nc = bitcast i64* %ln5Nb to i64*
  %ln5Nd = load i64, i64* %ln5Nc, !tbaa !5
  %ln5Ne = inttoptr i64 %ln5Nd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Nf = load i64*, i64** %Sp_Var
  %ln5Ng = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Ne( i64* %Base_Arg, i64* %ln5Nf, i64* %Hp_Arg, i64 %ln5Ng, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdcexpm1_closure_struct = type <{i64, i64}>
@Main_zdfFloatingPszuzdcexpm1_closure$def = internal global %Main_zdfFloatingPszuzdcexpm1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcexpm1_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdcexpm1_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdcexpm1_closure_struct* @Main_zdfFloatingPszuzdcexpm1_closure$def to i8*)
@Main_zdfFloatingPszuzdcexpm1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcexpm1_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdcexpm1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55I_closure_struct* @r55I_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcexpm1_info$def to i64)) to i32),i32 0)}>
{
n5Nt:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Nn
c5Nn:
  %ln5Nu = load i64*, i64** %Sp_Var
  %ln5Nv = getelementptr inbounds i64, i64* %ln5Nu, i32 -1
  %ln5Nw = ptrtoint i64* %ln5Nv to i64
  %ln5Nx = icmp ult i64 %ln5Nw, %SpLim_Arg
  %ln5Ny = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Nx, i1 0 )
  br i1 %ln5Ny, label %c5No, label %c5Np
c5Np:
  %ln5NA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Nl_info$def to i64
  %ln5Nz = load i64*, i64** %Sp_Var
  %ln5NB = getelementptr inbounds i64, i64* %ln5Nz, i32 -1
  store i64 %ln5NA, i64* %ln5NB, !tbaa !2
  %ln5NC = load i64, i64* %R3_Var
  store i64 %ln5NC, i64* %R2_Var
  %ln5ND = load i64*, i64** %Sp_Var
  %ln5NE = getelementptr inbounds i64, i64* %ln5ND, i32 -1
  %ln5NF = ptrtoint i64* %ln5NE to i64
  %ln5NG = inttoptr i64 %ln5NF to i64*
  store i64* %ln5NG, i64** %Sp_Var
  %ln5NH = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5NI = load i64*, i64** %Sp_Var
  %ln5NJ = load i64, i64* %R1_Var
  %ln5NK = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5NH( i64* %Base_Arg, i64* %ln5NI, i64* %Hp_Arg, i64 %ln5NJ, i64 %ln5NK, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5No:
  %ln5NL = load i64, i64* %R4_Var
  store i64 %ln5NL, i64* %R4_Var
  %ln5NM = load i64, i64* %R3_Var
  store i64 %ln5NM, i64* %R3_Var
  %ln5NN = load i64, i64* %R2_Var
  store i64 %ln5NN, i64* %R2_Var
  %ln5NO = ptrtoint %Main_zdfFloatingPszuzdcexpm1_closure_struct* @Main_zdfFloatingPszuzdcexpm1_closure$def to i64
  store i64 %ln5NO, i64* %R1_Var
  %ln5NP = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln5NQ = bitcast i64* %ln5NP to i64*
  %ln5NR = load i64, i64* %ln5NQ, !tbaa !5
  %ln5NS = inttoptr i64 %ln5NR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5NT = load i64*, i64** %Sp_Var
  %ln5NU = load i64, i64* %R1_Var
  %ln5NV = load i64, i64* %R2_Var
  %ln5NW = load i64, i64* %R3_Var
  %ln5NX = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5NS( i64* %Base_Arg, i64* %ln5NT, i64* %Hp_Arg, i64 %ln5NU, i64 %ln5NV, i64 %ln5NW, i64 %ln5NX, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5Nl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Nl_info$def to i8*)
define internal ghccc void @c5Nl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55I_closure_struct* @r55I_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Nl_info$def to i64)) to i32),i32 0)}>
{
n5NY:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c5Nl
c5Nl:
  %ln5NZ = ptrtoint %r55I_closure_struct* @r55I_closure$def to i64
  store i64 %ln5NZ, i64* %R1_Var
  %ln5O0 = load i64*, i64** %Sp_Var
  %ln5O1 = getelementptr inbounds i64, i64* %ln5O0, i32 1
  %ln5O2 = ptrtoint i64* %ln5O1 to i64
  %ln5O3 = inttoptr i64 %ln5O2 to i64*
  store i64* %ln5O3, i64** %Sp_Var
  %ln5O4 = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5O5 = load i64*, i64** %Sp_Var
  %ln5O6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5O4( i64* %Base_Arg, i64* %ln5O5, i64* %Hp_Arg, i64 %ln5O6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdcztzt_closure_struct = type <{i64, i64}>
@Main_zdfFloatingPszuzdcztzt_closure$def = internal global %Main_zdfFloatingPszuzdcztzt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcztzt_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdcztzt_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdcztzt_closure_struct* @Main_zdfFloatingPszuzdcztzt_closure$def to i8*)
@Main_zdfFloatingPszuzdcztzt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcztzt_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdcztzt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55I_closure_struct* @r55I_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcztzt_info$def to i64)) to i32),i32 0)}>
{
n5Oe:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Ob
c5Ob:
  %ln5Of = ptrtoint %r55I_closure_struct* @r55I_closure$def to i64
  store i64 %ln5Of, i64* %R1_Var
  %ln5Og = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Oh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Og( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5Oh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs11_bytes_struct = type <{[22 x i8]}>
@Main_zdfFloatingPs11_bytes$def = internal constant %Main_zdfFloatingPs11_bytes_struct<{[22 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 108, i8 111, i8 103, i8 0]}>, align 1
@Main_zdfFloatingPs11_bytes = alias i8, bitcast (%Main_zdfFloatingPs11_bytes_struct* @Main_zdfFloatingPs11_bytes$def to i8*)
%r55J_closure_struct = type <{i64, i64, i64, i64}>
@r55J_closure$def = internal global %r55J_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55J_info$def to i64), i64 0, i64 0, i64 0}>
@r55J_closure = internal alias i8, bitcast (%r55J_closure_struct* @r55J_closure$def to i8*)
@r55J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55J_info$def to i8*)
define internal ghccc void @r55J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55J_info$def to i64)) to i32),i32 0)}>
{
n5Or:
  %lc5Ol = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Oo
c5Oo:
  %ln5Os = load i64*, i64** %Sp_Var
  %ln5Ot = getelementptr inbounds i64, i64* %ln5Os, i32 -2
  %ln5Ou = ptrtoint i64* %ln5Ot to i64
  %ln5Ov = icmp ult i64 %ln5Ou, %SpLim_Arg
  %ln5Ow = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Ov, i1 0 )
  br i1 %ln5Ow, label %c5Op, label %c5Oq
c5Oq:
  %ln5Ox = ptrtoint i64* %Base_Arg to i64
  %ln5Oy = inttoptr i64 %ln5Ox to i8*
  %ln5Oz = load i64, i64* %R1_Var
  %ln5OA = inttoptr i64 %ln5Oz to i8*
  %ln5OB = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5OC = call ccc i8* (i8*, i8*) %ln5OB( i8* %ln5Oy, i8* %ln5OA ) nounwind
  %ln5OD = ptrtoint i8* %ln5OC to i64
  store i64 %ln5OD, i64* %lc5Ol
  %ln5OE = load i64, i64* %lc5Ol
  %ln5OF = icmp eq i64 %ln5OE, 0
  br i1 %ln5OF, label %c5On, label %c5Om
c5Om:
  %ln5OH = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5OG = load i64*, i64** %Sp_Var
  %ln5OI = getelementptr inbounds i64, i64* %ln5OG, i32 -2
  store i64 %ln5OH, i64* %ln5OI, !tbaa !2
  %ln5OK = load i64, i64* %lc5Ol
  %ln5OJ = load i64*, i64** %Sp_Var
  %ln5OL = getelementptr inbounds i64, i64* %ln5OJ, i32 -1
  store i64 %ln5OK, i64* %ln5OL, !tbaa !2
  %ln5OM = ptrtoint %Main_zdfFloatingPs11_bytes_struct* @Main_zdfFloatingPs11_bytes$def to i64
  store i64 %ln5OM, i64* %R2_Var
  %ln5ON = load i64*, i64** %Sp_Var
  %ln5OO = getelementptr inbounds i64, i64* %ln5ON, i32 -2
  %ln5OP = ptrtoint i64* %ln5OO to i64
  %ln5OQ = inttoptr i64 %ln5OP to i64*
  store i64* %ln5OQ, i64** %Sp_Var
  %ln5OR = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5OS = load i64*, i64** %Sp_Var
  %ln5OT = load i64, i64* %R1_Var
  %ln5OU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5OR( i64* %Base_Arg, i64* %ln5OS, i64* %Hp_Arg, i64 %ln5OT, i64 %ln5OU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5On:
  %ln5OW = load i64, i64* %R1_Var
  %ln5OX = inttoptr i64 %ln5OW to i64*
  %ln5OY = load i64, i64* %ln5OX, !tbaa !4
  %ln5OZ = inttoptr i64 %ln5OY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5P0 = load i64*, i64** %Sp_Var
  %ln5P1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5OZ( i64* %Base_Arg, i64* %ln5P0, i64* %Hp_Arg, i64 %ln5P1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Op:
  %ln5P2 = load i64, i64* %R1_Var
  store i64 %ln5P2, i64* %R1_Var
  %ln5P3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5P4 = bitcast i64* %ln5P3 to i64*
  %ln5P5 = load i64, i64* %ln5P4, !tbaa !5
  %ln5P6 = inttoptr i64 %ln5P5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5P7 = load i64*, i64** %Sp_Var
  %ln5P8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5P6( i64* %Base_Arg, i64* %ln5P7, i64* %Hp_Arg, i64 %ln5P8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdclog1p_closure_struct = type <{i64, i64}>
@Main_zdfFloatingPszuzdclog1p_closure$def = internal global %Main_zdfFloatingPszuzdclog1p_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1p_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdclog1p_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdclog1p_closure_struct* @Main_zdfFloatingPszuzdclog1p_closure$def to i8*)
@Main_zdfFloatingPszuzdclog1p_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1p_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdclog1p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55J_closure_struct* @r55J_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1p_info$def to i64)) to i32),i32 0)}>
{
n5Pg:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Pd
c5Pd:
  %ln5Ph = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  store i64 %ln5Ph, i64* %R1_Var
  %ln5Pi = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Pj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Pi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5Pj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdclog1pexp_closure_struct = type <{i64, i64}>
@Main_zdfFloatingPszuzdclog1pexp_closure$def = internal global %Main_zdfFloatingPszuzdclog1pexp_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1pexp_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdclog1pexp_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdclog1pexp_closure_struct* @Main_zdfFloatingPszuzdclog1pexp_closure$def to i8*)
@Main_zdfFloatingPszuzdclog1pexp_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1pexp_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdclog1pexp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55J_closure_struct* @r55J_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1pexp_info$def to i64)) to i32),i32 0)}>
{
n5Pr:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Po
c5Po:
  %ln5Ps = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  store i64 %ln5Ps, i64* %R1_Var
  %ln5Pt = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Pu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Pt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5Pu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdclog1mexp_closure_struct = type <{i64, i64}>
@Main_zdfFloatingPszuzdclog1mexp_closure$def = internal global %Main_zdfFloatingPszuzdclog1mexp_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1mexp_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdclog1mexp_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdclog1mexp_closure_struct* @Main_zdfFloatingPszuzdclog1mexp_closure$def to i8*)
@Main_zdfFloatingPszuzdclog1mexp_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1mexp_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdclog1mexp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55J_closure_struct* @r55J_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1mexp_info$def to i64)) to i32),i32 0)}>
{
n5PC:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Pz
c5Pz:
  %ln5PD = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  store i64 %ln5PD, i64* %R1_Var
  %ln5PE = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5PF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5PE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln5PF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs10_bytes_struct = type <{[22 x i8]}>
@Main_zdfFloatingPs10_bytes$def = internal constant %Main_zdfFloatingPs10_bytes_struct<{[22 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 115, i8 105, i8 110, i8 0]}>, align 1
@Main_zdfFloatingPs10_bytes = alias i8, bitcast (%Main_zdfFloatingPs10_bytes_struct* @Main_zdfFloatingPs10_bytes$def to i8*)
%r55M_closure_struct = type <{i64, i64, i64, i64}>
@r55M_closure$def = internal global %r55M_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55M_info$def to i64), i64 0, i64 0, i64 0}>
@r55M_closure = internal alias i8, bitcast (%r55M_closure_struct* @r55M_closure$def to i8*)
@r55M_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55M_info$def to i8*)
define internal ghccc void @r55M_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55M_info$def to i64)) to i32),i32 0)}>
{
n5PP:
  %lc5PJ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5PM
c5PM:
  %ln5PQ = load i64*, i64** %Sp_Var
  %ln5PR = getelementptr inbounds i64, i64* %ln5PQ, i32 -2
  %ln5PS = ptrtoint i64* %ln5PR to i64
  %ln5PT = icmp ult i64 %ln5PS, %SpLim_Arg
  %ln5PU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5PT, i1 0 )
  br i1 %ln5PU, label %c5PN, label %c5PO
c5PO:
  %ln5PV = ptrtoint i64* %Base_Arg to i64
  %ln5PW = inttoptr i64 %ln5PV to i8*
  %ln5PX = load i64, i64* %R1_Var
  %ln5PY = inttoptr i64 %ln5PX to i8*
  %ln5PZ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Q0 = call ccc i8* (i8*, i8*) %ln5PZ( i8* %ln5PW, i8* %ln5PY ) nounwind
  %ln5Q1 = ptrtoint i8* %ln5Q0 to i64
  store i64 %ln5Q1, i64* %lc5PJ
  %ln5Q2 = load i64, i64* %lc5PJ
  %ln5Q3 = icmp eq i64 %ln5Q2, 0
  br i1 %ln5Q3, label %c5PL, label %c5PK
c5PK:
  %ln5Q5 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Q4 = load i64*, i64** %Sp_Var
  %ln5Q6 = getelementptr inbounds i64, i64* %ln5Q4, i32 -2
  store i64 %ln5Q5, i64* %ln5Q6, !tbaa !2
  %ln5Q8 = load i64, i64* %lc5PJ
  %ln5Q7 = load i64*, i64** %Sp_Var
  %ln5Q9 = getelementptr inbounds i64, i64* %ln5Q7, i32 -1
  store i64 %ln5Q8, i64* %ln5Q9, !tbaa !2
  %ln5Qa = ptrtoint %Main_zdfFloatingPs10_bytes_struct* @Main_zdfFloatingPs10_bytes$def to i64
  store i64 %ln5Qa, i64* %R2_Var
  %ln5Qb = load i64*, i64** %Sp_Var
  %ln5Qc = getelementptr inbounds i64, i64* %ln5Qb, i32 -2
  %ln5Qd = ptrtoint i64* %ln5Qc to i64
  %ln5Qe = inttoptr i64 %ln5Qd to i64*
  store i64* %ln5Qe, i64** %Sp_Var
  %ln5Qf = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Qg = load i64*, i64** %Sp_Var
  %ln5Qh = load i64, i64* %R1_Var
  %ln5Qi = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Qf( i64* %Base_Arg, i64* %ln5Qg, i64* %Hp_Arg, i64 %ln5Qh, i64 %ln5Qi, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5PL:
  %ln5Qk = load i64, i64* %R1_Var
  %ln5Ql = inttoptr i64 %ln5Qk to i64*
  %ln5Qm = load i64, i64* %ln5Ql, !tbaa !4
  %ln5Qn = inttoptr i64 %ln5Qm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Qo = load i64*, i64** %Sp_Var
  %ln5Qp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Qn( i64* %Base_Arg, i64* %ln5Qo, i64* %Hp_Arg, i64 %ln5Qp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5PN:
  %ln5Qq = load i64, i64* %R1_Var
  store i64 %ln5Qq, i64* %R1_Var
  %ln5Qr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Qs = bitcast i64* %ln5Qr to i64*
  %ln5Qt = load i64, i64* %ln5Qs, !tbaa !5
  %ln5Qu = inttoptr i64 %ln5Qt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Qv = load i64*, i64** %Sp_Var
  %ln5Qw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Qu( i64* %Base_Arg, i64* %ln5Qv, i64* %Hp_Arg, i64 %ln5Qw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs9_bytes_struct = type <{[22 x i8]}>
@Main_zdfFloatingPs9_bytes$def = internal constant %Main_zdfFloatingPs9_bytes_struct<{[22 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 99, i8 111, i8 115, i8 0]}>, align 1
@Main_zdfFloatingPs9_bytes = alias i8, bitcast (%Main_zdfFloatingPs9_bytes_struct* @Main_zdfFloatingPs9_bytes$def to i8*)
%r55N_closure_struct = type <{i64, i64, i64, i64}>
@r55N_closure$def = internal global %r55N_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55N_info$def to i64), i64 0, i64 0, i64 0}>
@r55N_closure = internal alias i8, bitcast (%r55N_closure_struct* @r55N_closure$def to i8*)
@r55N_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55N_info$def to i8*)
define internal ghccc void @r55N_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55N_info$def to i64)) to i32),i32 0)}>
{
n5QG:
  %lc5QA = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5QD
c5QD:
  %ln5QH = load i64*, i64** %Sp_Var
  %ln5QI = getelementptr inbounds i64, i64* %ln5QH, i32 -2
  %ln5QJ = ptrtoint i64* %ln5QI to i64
  %ln5QK = icmp ult i64 %ln5QJ, %SpLim_Arg
  %ln5QL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5QK, i1 0 )
  br i1 %ln5QL, label %c5QE, label %c5QF
c5QF:
  %ln5QM = ptrtoint i64* %Base_Arg to i64
  %ln5QN = inttoptr i64 %ln5QM to i8*
  %ln5QO = load i64, i64* %R1_Var
  %ln5QP = inttoptr i64 %ln5QO to i8*
  %ln5QQ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5QR = call ccc i8* (i8*, i8*) %ln5QQ( i8* %ln5QN, i8* %ln5QP ) nounwind
  %ln5QS = ptrtoint i8* %ln5QR to i64
  store i64 %ln5QS, i64* %lc5QA
  %ln5QT = load i64, i64* %lc5QA
  %ln5QU = icmp eq i64 %ln5QT, 0
  br i1 %ln5QU, label %c5QC, label %c5QB
c5QB:
  %ln5QW = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5QV = load i64*, i64** %Sp_Var
  %ln5QX = getelementptr inbounds i64, i64* %ln5QV, i32 -2
  store i64 %ln5QW, i64* %ln5QX, !tbaa !2
  %ln5QZ = load i64, i64* %lc5QA
  %ln5QY = load i64*, i64** %Sp_Var
  %ln5R0 = getelementptr inbounds i64, i64* %ln5QY, i32 -1
  store i64 %ln5QZ, i64* %ln5R0, !tbaa !2
  %ln5R1 = ptrtoint %Main_zdfFloatingPs9_bytes_struct* @Main_zdfFloatingPs9_bytes$def to i64
  store i64 %ln5R1, i64* %R2_Var
  %ln5R2 = load i64*, i64** %Sp_Var
  %ln5R3 = getelementptr inbounds i64, i64* %ln5R2, i32 -2
  %ln5R4 = ptrtoint i64* %ln5R3 to i64
  %ln5R5 = inttoptr i64 %ln5R4 to i64*
  store i64* %ln5R5, i64** %Sp_Var
  %ln5R6 = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5R7 = load i64*, i64** %Sp_Var
  %ln5R8 = load i64, i64* %R1_Var
  %ln5R9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5R6( i64* %Base_Arg, i64* %ln5R7, i64* %Hp_Arg, i64 %ln5R8, i64 %ln5R9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5QC:
  %ln5Rb = load i64, i64* %R1_Var
  %ln5Rc = inttoptr i64 %ln5Rb to i64*
  %ln5Rd = load i64, i64* %ln5Rc, !tbaa !4
  %ln5Re = inttoptr i64 %ln5Rd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Rf = load i64*, i64** %Sp_Var
  %ln5Rg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Re( i64* %Base_Arg, i64* %ln5Rf, i64* %Hp_Arg, i64 %ln5Rg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5QE:
  %ln5Rh = load i64, i64* %R1_Var
  store i64 %ln5Rh, i64* %R1_Var
  %ln5Ri = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Rj = bitcast i64* %ln5Ri to i64*
  %ln5Rk = load i64, i64* %ln5Rj, !tbaa !5
  %ln5Rl = inttoptr i64 %ln5Rk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Rm = load i64*, i64** %Sp_Var
  %ln5Rn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Rl( i64* %Base_Arg, i64* %ln5Rm, i64* %Hp_Arg, i64 %ln5Rn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs8_bytes_struct = type <{[23 x i8]}>
@Main_zdfFloatingPs8_bytes$def = internal constant %Main_zdfFloatingPs8_bytes_struct<{[23 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 115, i8 105, i8 110, i8 0]}>, align 1
@Main_zdfFloatingPs8_bytes = alias i8, bitcast (%Main_zdfFloatingPs8_bytes_struct* @Main_zdfFloatingPs8_bytes$def to i8*)
%r55P_closure_struct = type <{i64, i64, i64, i64}>
@r55P_closure$def = internal global %r55P_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55P_info$def to i64), i64 0, i64 0, i64 0}>
@r55P_closure = internal alias i8, bitcast (%r55P_closure_struct* @r55P_closure$def to i8*)
@r55P_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55P_info$def to i8*)
define internal ghccc void @r55P_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55P_info$def to i64)) to i32),i32 0)}>
{
n5Rx:
  %lc5Rr = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Ru
c5Ru:
  %ln5Ry = load i64*, i64** %Sp_Var
  %ln5Rz = getelementptr inbounds i64, i64* %ln5Ry, i32 -2
  %ln5RA = ptrtoint i64* %ln5Rz to i64
  %ln5RB = icmp ult i64 %ln5RA, %SpLim_Arg
  %ln5RC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5RB, i1 0 )
  br i1 %ln5RC, label %c5Rv, label %c5Rw
c5Rw:
  %ln5RD = ptrtoint i64* %Base_Arg to i64
  %ln5RE = inttoptr i64 %ln5RD to i8*
  %ln5RF = load i64, i64* %R1_Var
  %ln5RG = inttoptr i64 %ln5RF to i8*
  %ln5RH = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5RI = call ccc i8* (i8*, i8*) %ln5RH( i8* %ln5RE, i8* %ln5RG ) nounwind
  %ln5RJ = ptrtoint i8* %ln5RI to i64
  store i64 %ln5RJ, i64* %lc5Rr
  %ln5RK = load i64, i64* %lc5Rr
  %ln5RL = icmp eq i64 %ln5RK, 0
  br i1 %ln5RL, label %c5Rt, label %c5Rs
c5Rs:
  %ln5RN = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5RM = load i64*, i64** %Sp_Var
  %ln5RO = getelementptr inbounds i64, i64* %ln5RM, i32 -2
  store i64 %ln5RN, i64* %ln5RO, !tbaa !2
  %ln5RQ = load i64, i64* %lc5Rr
  %ln5RP = load i64*, i64** %Sp_Var
  %ln5RR = getelementptr inbounds i64, i64* %ln5RP, i32 -1
  store i64 %ln5RQ, i64* %ln5RR, !tbaa !2
  %ln5RS = ptrtoint %Main_zdfFloatingPs8_bytes_struct* @Main_zdfFloatingPs8_bytes$def to i64
  store i64 %ln5RS, i64* %R2_Var
  %ln5RT = load i64*, i64** %Sp_Var
  %ln5RU = getelementptr inbounds i64, i64* %ln5RT, i32 -2
  %ln5RV = ptrtoint i64* %ln5RU to i64
  %ln5RW = inttoptr i64 %ln5RV to i64*
  store i64* %ln5RW, i64** %Sp_Var
  %ln5RX = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5RY = load i64*, i64** %Sp_Var
  %ln5RZ = load i64, i64* %R1_Var
  %ln5S0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5RX( i64* %Base_Arg, i64* %ln5RY, i64* %Hp_Arg, i64 %ln5RZ, i64 %ln5S0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Rt:
  %ln5S2 = load i64, i64* %R1_Var
  %ln5S3 = inttoptr i64 %ln5S2 to i64*
  %ln5S4 = load i64, i64* %ln5S3, !tbaa !4
  %ln5S5 = inttoptr i64 %ln5S4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5S6 = load i64*, i64** %Sp_Var
  %ln5S7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5S5( i64* %Base_Arg, i64* %ln5S6, i64* %Hp_Arg, i64 %ln5S7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Rv:
  %ln5S8 = load i64, i64* %R1_Var
  store i64 %ln5S8, i64* %R1_Var
  %ln5S9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Sa = bitcast i64* %ln5S9 to i64*
  %ln5Sb = load i64, i64* %ln5Sa, !tbaa !5
  %ln5Sc = inttoptr i64 %ln5Sb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Sd = load i64*, i64** %Sp_Var
  %ln5Se = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Sc( i64* %Base_Arg, i64* %ln5Sd, i64* %Hp_Arg, i64 %ln5Se, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs7_bytes_struct = type <{[23 x i8]}>
@Main_zdfFloatingPs7_bytes$def = internal constant %Main_zdfFloatingPs7_bytes_struct<{[23 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 99, i8 111, i8 115, i8 0]}>, align 1
@Main_zdfFloatingPs7_bytes = alias i8, bitcast (%Main_zdfFloatingPs7_bytes_struct* @Main_zdfFloatingPs7_bytes$def to i8*)
%r55Q_closure_struct = type <{i64, i64, i64, i64}>
@r55Q_closure$def = internal global %r55Q_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Q_info$def to i64), i64 0, i64 0, i64 0}>
@r55Q_closure = internal alias i8, bitcast (%r55Q_closure_struct* @r55Q_closure$def to i8*)
@r55Q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Q_info$def to i8*)
define internal ghccc void @r55Q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Q_info$def to i64)) to i32),i32 0)}>
{
n5So:
  %lc5Si = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Sl
c5Sl:
  %ln5Sp = load i64*, i64** %Sp_Var
  %ln5Sq = getelementptr inbounds i64, i64* %ln5Sp, i32 -2
  %ln5Sr = ptrtoint i64* %ln5Sq to i64
  %ln5Ss = icmp ult i64 %ln5Sr, %SpLim_Arg
  %ln5St = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Ss, i1 0 )
  br i1 %ln5St, label %c5Sm, label %c5Sn
c5Sn:
  %ln5Su = ptrtoint i64* %Base_Arg to i64
  %ln5Sv = inttoptr i64 %ln5Su to i8*
  %ln5Sw = load i64, i64* %R1_Var
  %ln5Sx = inttoptr i64 %ln5Sw to i8*
  %ln5Sy = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Sz = call ccc i8* (i8*, i8*) %ln5Sy( i8* %ln5Sv, i8* %ln5Sx ) nounwind
  %ln5SA = ptrtoint i8* %ln5Sz to i64
  store i64 %ln5SA, i64* %lc5Si
  %ln5SB = load i64, i64* %lc5Si
  %ln5SC = icmp eq i64 %ln5SB, 0
  br i1 %ln5SC, label %c5Sk, label %c5Sj
c5Sj:
  %ln5SE = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5SD = load i64*, i64** %Sp_Var
  %ln5SF = getelementptr inbounds i64, i64* %ln5SD, i32 -2
  store i64 %ln5SE, i64* %ln5SF, !tbaa !2
  %ln5SH = load i64, i64* %lc5Si
  %ln5SG = load i64*, i64** %Sp_Var
  %ln5SI = getelementptr inbounds i64, i64* %ln5SG, i32 -1
  store i64 %ln5SH, i64* %ln5SI, !tbaa !2
  %ln5SJ = ptrtoint %Main_zdfFloatingPs7_bytes_struct* @Main_zdfFloatingPs7_bytes$def to i64
  store i64 %ln5SJ, i64* %R2_Var
  %ln5SK = load i64*, i64** %Sp_Var
  %ln5SL = getelementptr inbounds i64, i64* %ln5SK, i32 -2
  %ln5SM = ptrtoint i64* %ln5SL to i64
  %ln5SN = inttoptr i64 %ln5SM to i64*
  store i64* %ln5SN, i64** %Sp_Var
  %ln5SO = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5SP = load i64*, i64** %Sp_Var
  %ln5SQ = load i64, i64* %R1_Var
  %ln5SR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5SO( i64* %Base_Arg, i64* %ln5SP, i64* %Hp_Arg, i64 %ln5SQ, i64 %ln5SR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Sk:
  %ln5ST = load i64, i64* %R1_Var
  %ln5SU = inttoptr i64 %ln5ST to i64*
  %ln5SV = load i64, i64* %ln5SU, !tbaa !4
  %ln5SW = inttoptr i64 %ln5SV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5SX = load i64*, i64** %Sp_Var
  %ln5SY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5SW( i64* %Base_Arg, i64* %ln5SX, i64* %Hp_Arg, i64 %ln5SY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Sm:
  %ln5SZ = load i64, i64* %R1_Var
  store i64 %ln5SZ, i64* %R1_Var
  %ln5T0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5T1 = bitcast i64* %ln5T0 to i64*
  %ln5T2 = load i64, i64* %ln5T1, !tbaa !5
  %ln5T3 = inttoptr i64 %ln5T2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5T4 = load i64*, i64** %Sp_Var
  %ln5T5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5T3( i64* %Base_Arg, i64* %ln5T4, i64* %Hp_Arg, i64 %ln5T5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs6_bytes_struct = type <{[23 x i8]}>
@Main_zdfFloatingPs6_bytes$def = internal constant %Main_zdfFloatingPs6_bytes_struct<{[23 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 116, i8 97, i8 110, i8 0]}>, align 1
@Main_zdfFloatingPs6_bytes = alias i8, bitcast (%Main_zdfFloatingPs6_bytes_struct* @Main_zdfFloatingPs6_bytes$def to i8*)
%r55R_closure_struct = type <{i64, i64, i64, i64}>
@r55R_closure$def = internal global %r55R_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55R_info$def to i64), i64 0, i64 0, i64 0}>
@r55R_closure = internal alias i8, bitcast (%r55R_closure_struct* @r55R_closure$def to i8*)
@r55R_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55R_info$def to i8*)
define internal ghccc void @r55R_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55R_info$def to i64)) to i32),i32 0)}>
{
n5Tf:
  %lc5T9 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Tc
c5Tc:
  %ln5Tg = load i64*, i64** %Sp_Var
  %ln5Th = getelementptr inbounds i64, i64* %ln5Tg, i32 -2
  %ln5Ti = ptrtoint i64* %ln5Th to i64
  %ln5Tj = icmp ult i64 %ln5Ti, %SpLim_Arg
  %ln5Tk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Tj, i1 0 )
  br i1 %ln5Tk, label %c5Td, label %c5Te
c5Te:
  %ln5Tl = ptrtoint i64* %Base_Arg to i64
  %ln5Tm = inttoptr i64 %ln5Tl to i8*
  %ln5Tn = load i64, i64* %R1_Var
  %ln5To = inttoptr i64 %ln5Tn to i8*
  %ln5Tp = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Tq = call ccc i8* (i8*, i8*) %ln5Tp( i8* %ln5Tm, i8* %ln5To ) nounwind
  %ln5Tr = ptrtoint i8* %ln5Tq to i64
  store i64 %ln5Tr, i64* %lc5T9
  %ln5Ts = load i64, i64* %lc5T9
  %ln5Tt = icmp eq i64 %ln5Ts, 0
  br i1 %ln5Tt, label %c5Tb, label %c5Ta
c5Ta:
  %ln5Tv = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Tu = load i64*, i64** %Sp_Var
  %ln5Tw = getelementptr inbounds i64, i64* %ln5Tu, i32 -2
  store i64 %ln5Tv, i64* %ln5Tw, !tbaa !2
  %ln5Ty = load i64, i64* %lc5T9
  %ln5Tx = load i64*, i64** %Sp_Var
  %ln5Tz = getelementptr inbounds i64, i64* %ln5Tx, i32 -1
  store i64 %ln5Ty, i64* %ln5Tz, !tbaa !2
  %ln5TA = ptrtoint %Main_zdfFloatingPs6_bytes_struct* @Main_zdfFloatingPs6_bytes$def to i64
  store i64 %ln5TA, i64* %R2_Var
  %ln5TB = load i64*, i64** %Sp_Var
  %ln5TC = getelementptr inbounds i64, i64* %ln5TB, i32 -2
  %ln5TD = ptrtoint i64* %ln5TC to i64
  %ln5TE = inttoptr i64 %ln5TD to i64*
  store i64* %ln5TE, i64** %Sp_Var
  %ln5TF = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5TG = load i64*, i64** %Sp_Var
  %ln5TH = load i64, i64* %R1_Var
  %ln5TI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5TF( i64* %Base_Arg, i64* %ln5TG, i64* %Hp_Arg, i64 %ln5TH, i64 %ln5TI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Tb:
  %ln5TK = load i64, i64* %R1_Var
  %ln5TL = inttoptr i64 %ln5TK to i64*
  %ln5TM = load i64, i64* %ln5TL, !tbaa !4
  %ln5TN = inttoptr i64 %ln5TM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5TO = load i64*, i64** %Sp_Var
  %ln5TP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5TN( i64* %Base_Arg, i64* %ln5TO, i64* %Hp_Arg, i64 %ln5TP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Td:
  %ln5TQ = load i64, i64* %R1_Var
  store i64 %ln5TQ, i64* %R1_Var
  %ln5TR = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5TS = bitcast i64* %ln5TR to i64*
  %ln5TT = load i64, i64* %ln5TS, !tbaa !5
  %ln5TU = inttoptr i64 %ln5TT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5TV = load i64*, i64** %Sp_Var
  %ln5TW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5TU( i64* %Base_Arg, i64* %ln5TV, i64* %Hp_Arg, i64 %ln5TW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs5_bytes_struct = type <{[23 x i8]}>
@Main_zdfFloatingPs5_bytes$def = internal constant %Main_zdfFloatingPs5_bytes_struct<{[23 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 115, i8 105, i8 110, i8 104, i8 0]}>, align 1
@Main_zdfFloatingPs5_bytes = alias i8, bitcast (%Main_zdfFloatingPs5_bytes_struct* @Main_zdfFloatingPs5_bytes$def to i8*)
%r55K_closure_struct = type <{i64, i64, i64, i64}>
@r55K_closure$def = internal global %r55K_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55K_info$def to i64), i64 0, i64 0, i64 0}>
@r55K_closure = internal alias i8, bitcast (%r55K_closure_struct* @r55K_closure$def to i8*)
@r55K_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55K_info$def to i8*)
define internal ghccc void @r55K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55K_info$def to i64)) to i32),i32 0)}>
{
n5U6:
  %lc5U0 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5U3
c5U3:
  %ln5U7 = load i64*, i64** %Sp_Var
  %ln5U8 = getelementptr inbounds i64, i64* %ln5U7, i32 -2
  %ln5U9 = ptrtoint i64* %ln5U8 to i64
  %ln5Ua = icmp ult i64 %ln5U9, %SpLim_Arg
  %ln5Ub = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Ua, i1 0 )
  br i1 %ln5Ub, label %c5U4, label %c5U5
c5U5:
  %ln5Uc = ptrtoint i64* %Base_Arg to i64
  %ln5Ud = inttoptr i64 %ln5Uc to i8*
  %ln5Ue = load i64, i64* %R1_Var
  %ln5Uf = inttoptr i64 %ln5Ue to i8*
  %ln5Ug = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Uh = call ccc i8* (i8*, i8*) %ln5Ug( i8* %ln5Ud, i8* %ln5Uf ) nounwind
  %ln5Ui = ptrtoint i8* %ln5Uh to i64
  store i64 %ln5Ui, i64* %lc5U0
  %ln5Uj = load i64, i64* %lc5U0
  %ln5Uk = icmp eq i64 %ln5Uj, 0
  br i1 %ln5Uk, label %c5U2, label %c5U1
c5U1:
  %ln5Um = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Ul = load i64*, i64** %Sp_Var
  %ln5Un = getelementptr inbounds i64, i64* %ln5Ul, i32 -2
  store i64 %ln5Um, i64* %ln5Un, !tbaa !2
  %ln5Up = load i64, i64* %lc5U0
  %ln5Uo = load i64*, i64** %Sp_Var
  %ln5Uq = getelementptr inbounds i64, i64* %ln5Uo, i32 -1
  store i64 %ln5Up, i64* %ln5Uq, !tbaa !2
  %ln5Ur = ptrtoint %Main_zdfFloatingPs5_bytes_struct* @Main_zdfFloatingPs5_bytes$def to i64
  store i64 %ln5Ur, i64* %R2_Var
  %ln5Us = load i64*, i64** %Sp_Var
  %ln5Ut = getelementptr inbounds i64, i64* %ln5Us, i32 -2
  %ln5Uu = ptrtoint i64* %ln5Ut to i64
  %ln5Uv = inttoptr i64 %ln5Uu to i64*
  store i64* %ln5Uv, i64** %Sp_Var
  %ln5Uw = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Ux = load i64*, i64** %Sp_Var
  %ln5Uy = load i64, i64* %R1_Var
  %ln5Uz = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Uw( i64* %Base_Arg, i64* %ln5Ux, i64* %Hp_Arg, i64 %ln5Uy, i64 %ln5Uz, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5U2:
  %ln5UB = load i64, i64* %R1_Var
  %ln5UC = inttoptr i64 %ln5UB to i64*
  %ln5UD = load i64, i64* %ln5UC, !tbaa !4
  %ln5UE = inttoptr i64 %ln5UD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5UF = load i64*, i64** %Sp_Var
  %ln5UG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5UE( i64* %Base_Arg, i64* %ln5UF, i64* %Hp_Arg, i64 %ln5UG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5U4:
  %ln5UH = load i64, i64* %R1_Var
  store i64 %ln5UH, i64* %R1_Var
  %ln5UI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5UJ = bitcast i64* %ln5UI to i64*
  %ln5UK = load i64, i64* %ln5UJ, !tbaa !5
  %ln5UL = inttoptr i64 %ln5UK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5UM = load i64*, i64** %Sp_Var
  %ln5UN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5UL( i64* %Base_Arg, i64* %ln5UM, i64* %Hp_Arg, i64 %ln5UN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs4_bytes_struct = type <{[23 x i8]}>
@Main_zdfFloatingPs4_bytes$def = internal constant %Main_zdfFloatingPs4_bytes_struct<{[23 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 99, i8 111, i8 115, i8 104, i8 0]}>, align 1
@Main_zdfFloatingPs4_bytes = alias i8, bitcast (%Main_zdfFloatingPs4_bytes_struct* @Main_zdfFloatingPs4_bytes$def to i8*)
%r55L_closure_struct = type <{i64, i64, i64, i64}>
@r55L_closure$def = internal global %r55L_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55L_info$def to i64), i64 0, i64 0, i64 0}>
@r55L_closure = internal alias i8, bitcast (%r55L_closure_struct* @r55L_closure$def to i8*)
@r55L_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55L_info$def to i8*)
define internal ghccc void @r55L_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55L_info$def to i64)) to i32),i32 0)}>
{
n5UX:
  %lc5UR = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5UU
c5UU:
  %ln5UY = load i64*, i64** %Sp_Var
  %ln5UZ = getelementptr inbounds i64, i64* %ln5UY, i32 -2
  %ln5V0 = ptrtoint i64* %ln5UZ to i64
  %ln5V1 = icmp ult i64 %ln5V0, %SpLim_Arg
  %ln5V2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5V1, i1 0 )
  br i1 %ln5V2, label %c5UV, label %c5UW
c5UW:
  %ln5V3 = ptrtoint i64* %Base_Arg to i64
  %ln5V4 = inttoptr i64 %ln5V3 to i8*
  %ln5V5 = load i64, i64* %R1_Var
  %ln5V6 = inttoptr i64 %ln5V5 to i8*
  %ln5V7 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5V8 = call ccc i8* (i8*, i8*) %ln5V7( i8* %ln5V4, i8* %ln5V6 ) nounwind
  %ln5V9 = ptrtoint i8* %ln5V8 to i64
  store i64 %ln5V9, i64* %lc5UR
  %ln5Va = load i64, i64* %lc5UR
  %ln5Vb = icmp eq i64 %ln5Va, 0
  br i1 %ln5Vb, label %c5UT, label %c5US
c5US:
  %ln5Vd = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5Vc = load i64*, i64** %Sp_Var
  %ln5Ve = getelementptr inbounds i64, i64* %ln5Vc, i32 -2
  store i64 %ln5Vd, i64* %ln5Ve, !tbaa !2
  %ln5Vg = load i64, i64* %lc5UR
  %ln5Vf = load i64*, i64** %Sp_Var
  %ln5Vh = getelementptr inbounds i64, i64* %ln5Vf, i32 -1
  store i64 %ln5Vg, i64* %ln5Vh, !tbaa !2
  %ln5Vi = ptrtoint %Main_zdfFloatingPs4_bytes_struct* @Main_zdfFloatingPs4_bytes$def to i64
  store i64 %ln5Vi, i64* %R2_Var
  %ln5Vj = load i64*, i64** %Sp_Var
  %ln5Vk = getelementptr inbounds i64, i64* %ln5Vj, i32 -2
  %ln5Vl = ptrtoint i64* %ln5Vk to i64
  %ln5Vm = inttoptr i64 %ln5Vl to i64*
  store i64* %ln5Vm, i64** %Sp_Var
  %ln5Vn = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Vo = load i64*, i64** %Sp_Var
  %ln5Vp = load i64, i64* %R1_Var
  %ln5Vq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Vn( i64* %Base_Arg, i64* %ln5Vo, i64* %Hp_Arg, i64 %ln5Vp, i64 %ln5Vq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5UT:
  %ln5Vs = load i64, i64* %R1_Var
  %ln5Vt = inttoptr i64 %ln5Vs to i64*
  %ln5Vu = load i64, i64* %ln5Vt, !tbaa !4
  %ln5Vv = inttoptr i64 %ln5Vu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Vw = load i64*, i64** %Sp_Var
  %ln5Vx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Vv( i64* %Base_Arg, i64* %ln5Vw, i64* %Hp_Arg, i64 %ln5Vx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5UV:
  %ln5Vy = load i64, i64* %R1_Var
  store i64 %ln5Vy, i64* %R1_Var
  %ln5Vz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5VA = bitcast i64* %ln5Vz to i64*
  %ln5VB = load i64, i64* %ln5VA, !tbaa !5
  %ln5VC = inttoptr i64 %ln5VB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5VD = load i64*, i64** %Sp_Var
  %ln5VE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5VC( i64* %Base_Arg, i64* %ln5VD, i64* %Hp_Arg, i64 %ln5VE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs3_bytes_struct = type <{[24 x i8]}>
@Main_zdfFloatingPs3_bytes$def = internal constant %Main_zdfFloatingPs3_bytes_struct<{[24 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 115, i8 105, i8 110, i8 104, i8 0]}>, align 1
@Main_zdfFloatingPs3_bytes = alias i8, bitcast (%Main_zdfFloatingPs3_bytes_struct* @Main_zdfFloatingPs3_bytes$def to i8*)
%r55S_closure_struct = type <{i64, i64, i64, i64}>
@r55S_closure$def = internal global %r55S_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55S_info$def to i64), i64 0, i64 0, i64 0}>
@r55S_closure = internal alias i8, bitcast (%r55S_closure_struct* @r55S_closure$def to i8*)
@r55S_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55S_info$def to i8*)
define internal ghccc void @r55S_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55S_info$def to i64)) to i32),i32 0)}>
{
n5VO:
  %lc5VI = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5VL
c5VL:
  %ln5VP = load i64*, i64** %Sp_Var
  %ln5VQ = getelementptr inbounds i64, i64* %ln5VP, i32 -2
  %ln5VR = ptrtoint i64* %ln5VQ to i64
  %ln5VS = icmp ult i64 %ln5VR, %SpLim_Arg
  %ln5VT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5VS, i1 0 )
  br i1 %ln5VT, label %c5VM, label %c5VN
c5VN:
  %ln5VU = ptrtoint i64* %Base_Arg to i64
  %ln5VV = inttoptr i64 %ln5VU to i8*
  %ln5VW = load i64, i64* %R1_Var
  %ln5VX = inttoptr i64 %ln5VW to i8*
  %ln5VY = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5VZ = call ccc i8* (i8*, i8*) %ln5VY( i8* %ln5VV, i8* %ln5VX ) nounwind
  %ln5W0 = ptrtoint i8* %ln5VZ to i64
  store i64 %ln5W0, i64* %lc5VI
  %ln5W1 = load i64, i64* %lc5VI
  %ln5W2 = icmp eq i64 %ln5W1, 0
  br i1 %ln5W2, label %c5VK, label %c5VJ
c5VJ:
  %ln5W4 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5W3 = load i64*, i64** %Sp_Var
  %ln5W5 = getelementptr inbounds i64, i64* %ln5W3, i32 -2
  store i64 %ln5W4, i64* %ln5W5, !tbaa !2
  %ln5W7 = load i64, i64* %lc5VI
  %ln5W6 = load i64*, i64** %Sp_Var
  %ln5W8 = getelementptr inbounds i64, i64* %ln5W6, i32 -1
  store i64 %ln5W7, i64* %ln5W8, !tbaa !2
  %ln5W9 = ptrtoint %Main_zdfFloatingPs3_bytes_struct* @Main_zdfFloatingPs3_bytes$def to i64
  store i64 %ln5W9, i64* %R2_Var
  %ln5Wa = load i64*, i64** %Sp_Var
  %ln5Wb = getelementptr inbounds i64, i64* %ln5Wa, i32 -2
  %ln5Wc = ptrtoint i64* %ln5Wb to i64
  %ln5Wd = inttoptr i64 %ln5Wc to i64*
  store i64* %ln5Wd, i64** %Sp_Var
  %ln5We = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Wf = load i64*, i64** %Sp_Var
  %ln5Wg = load i64, i64* %R1_Var
  %ln5Wh = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5We( i64* %Base_Arg, i64* %ln5Wf, i64* %Hp_Arg, i64 %ln5Wg, i64 %ln5Wh, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5VK:
  %ln5Wj = load i64, i64* %R1_Var
  %ln5Wk = inttoptr i64 %ln5Wj to i64*
  %ln5Wl = load i64, i64* %ln5Wk, !tbaa !4
  %ln5Wm = inttoptr i64 %ln5Wl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Wn = load i64*, i64** %Sp_Var
  %ln5Wo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Wm( i64* %Base_Arg, i64* %ln5Wn, i64* %Hp_Arg, i64 %ln5Wo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5VM:
  %ln5Wp = load i64, i64* %R1_Var
  store i64 %ln5Wp, i64* %R1_Var
  %ln5Wq = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Wr = bitcast i64* %ln5Wq to i64*
  %ln5Ws = load i64, i64* %ln5Wr, !tbaa !5
  %ln5Wt = inttoptr i64 %ln5Ws to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Wu = load i64*, i64** %Sp_Var
  %ln5Wv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Wt( i64* %Base_Arg, i64* %ln5Wu, i64* %Hp_Arg, i64 %ln5Wv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs2_bytes_struct = type <{[24 x i8]}>
@Main_zdfFloatingPs2_bytes$def = internal constant %Main_zdfFloatingPs2_bytes_struct<{[24 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 99, i8 111, i8 115, i8 104, i8 0]}>, align 1
@Main_zdfFloatingPs2_bytes = alias i8, bitcast (%Main_zdfFloatingPs2_bytes_struct* @Main_zdfFloatingPs2_bytes$def to i8*)
%r55T_closure_struct = type <{i64, i64, i64, i64}>
@r55T_closure$def = internal global %r55T_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55T_info$def to i64), i64 0, i64 0, i64 0}>
@r55T_closure = internal alias i8, bitcast (%r55T_closure_struct* @r55T_closure$def to i8*)
@r55T_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55T_info$def to i8*)
define internal ghccc void @r55T_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55T_info$def to i64)) to i32),i32 0)}>
{
n5WF:
  %lc5Wz = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5WC
c5WC:
  %ln5WG = load i64*, i64** %Sp_Var
  %ln5WH = getelementptr inbounds i64, i64* %ln5WG, i32 -2
  %ln5WI = ptrtoint i64* %ln5WH to i64
  %ln5WJ = icmp ult i64 %ln5WI, %SpLim_Arg
  %ln5WK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5WJ, i1 0 )
  br i1 %ln5WK, label %c5WD, label %c5WE
c5WE:
  %ln5WL = ptrtoint i64* %Base_Arg to i64
  %ln5WM = inttoptr i64 %ln5WL to i8*
  %ln5WN = load i64, i64* %R1_Var
  %ln5WO = inttoptr i64 %ln5WN to i8*
  %ln5WP = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5WQ = call ccc i8* (i8*, i8*) %ln5WP( i8* %ln5WM, i8* %ln5WO ) nounwind
  %ln5WR = ptrtoint i8* %ln5WQ to i64
  store i64 %ln5WR, i64* %lc5Wz
  %ln5WS = load i64, i64* %lc5Wz
  %ln5WT = icmp eq i64 %ln5WS, 0
  br i1 %ln5WT, label %c5WB, label %c5WA
c5WA:
  %ln5WV = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5WU = load i64*, i64** %Sp_Var
  %ln5WW = getelementptr inbounds i64, i64* %ln5WU, i32 -2
  store i64 %ln5WV, i64* %ln5WW, !tbaa !2
  %ln5WY = load i64, i64* %lc5Wz
  %ln5WX = load i64*, i64** %Sp_Var
  %ln5WZ = getelementptr inbounds i64, i64* %ln5WX, i32 -1
  store i64 %ln5WY, i64* %ln5WZ, !tbaa !2
  %ln5X0 = ptrtoint %Main_zdfFloatingPs2_bytes_struct* @Main_zdfFloatingPs2_bytes$def to i64
  store i64 %ln5X0, i64* %R2_Var
  %ln5X1 = load i64*, i64** %Sp_Var
  %ln5X2 = getelementptr inbounds i64, i64* %ln5X1, i32 -2
  %ln5X3 = ptrtoint i64* %ln5X2 to i64
  %ln5X4 = inttoptr i64 %ln5X3 to i64*
  store i64* %ln5X4, i64** %Sp_Var
  %ln5X5 = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5X6 = load i64*, i64** %Sp_Var
  %ln5X7 = load i64, i64* %R1_Var
  %ln5X8 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5X5( i64* %Base_Arg, i64* %ln5X6, i64* %Hp_Arg, i64 %ln5X7, i64 %ln5X8, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5WB:
  %ln5Xa = load i64, i64* %R1_Var
  %ln5Xb = inttoptr i64 %ln5Xa to i64*
  %ln5Xc = load i64, i64* %ln5Xb, !tbaa !4
  %ln5Xd = inttoptr i64 %ln5Xc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Xe = load i64*, i64** %Sp_Var
  %ln5Xf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Xd( i64* %Base_Arg, i64* %ln5Xe, i64* %Hp_Arg, i64 %ln5Xf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5WD:
  %ln5Xg = load i64, i64* %R1_Var
  store i64 %ln5Xg, i64* %R1_Var
  %ln5Xh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Xi = bitcast i64* %ln5Xh to i64*
  %ln5Xj = load i64, i64* %ln5Xi, !tbaa !5
  %ln5Xk = inttoptr i64 %ln5Xj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Xl = load i64*, i64** %Sp_Var
  %ln5Xm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Xk( i64* %Base_Arg, i64* %ln5Xl, i64* %Hp_Arg, i64 %ln5Xm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs1_bytes_struct = type <{[24 x i8]}>
@Main_zdfFloatingPs1_bytes$def = internal constant %Main_zdfFloatingPs1_bytes_struct<{[24 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 49, i8 50, i8 52, i8 58, i8 49, i8 48, i8 45, i8 52, i8 56, i8 124, i8 97, i8 116, i8 97, i8 110, i8 104, i8 0]}>, align 1
@Main_zdfFloatingPs1_bytes = alias i8, bitcast (%Main_zdfFloatingPs1_bytes_struct* @Main_zdfFloatingPs1_bytes$def to i8*)
%r55U_closure_struct = type <{i64, i64, i64, i64}>
@r55U_closure$def = internal global %r55U_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55U_info$def to i64), i64 0, i64 0, i64 0}>
@r55U_closure = internal alias i8, bitcast (%r55U_closure_struct* @r55U_closure$def to i8*)
@r55U_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55U_info$def to i8*)
define internal ghccc void @r55U_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55U_info$def to i64)) to i32),i32 0)}>
{
n5Xw:
  %lc5Xq = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Xt
c5Xt:
  %ln5Xx = load i64*, i64** %Sp_Var
  %ln5Xy = getelementptr inbounds i64, i64* %ln5Xx, i32 -2
  %ln5Xz = ptrtoint i64* %ln5Xy to i64
  %ln5XA = icmp ult i64 %ln5Xz, %SpLim_Arg
  %ln5XB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5XA, i1 0 )
  br i1 %ln5XB, label %c5Xu, label %c5Xv
c5Xv:
  %ln5XC = ptrtoint i64* %Base_Arg to i64
  %ln5XD = inttoptr i64 %ln5XC to i8*
  %ln5XE = load i64, i64* %R1_Var
  %ln5XF = inttoptr i64 %ln5XE to i8*
  %ln5XG = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5XH = call ccc i8* (i8*, i8*) %ln5XG( i8* %ln5XD, i8* %ln5XF ) nounwind
  %ln5XI = ptrtoint i8* %ln5XH to i64
  store i64 %ln5XI, i64* %lc5Xq
  %ln5XJ = load i64, i64* %lc5Xq
  %ln5XK = icmp eq i64 %ln5XJ, 0
  br i1 %ln5XK, label %c5Xs, label %c5Xr
c5Xr:
  %ln5XM = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5XL = load i64*, i64** %Sp_Var
  %ln5XN = getelementptr inbounds i64, i64* %ln5XL, i32 -2
  store i64 %ln5XM, i64* %ln5XN, !tbaa !2
  %ln5XP = load i64, i64* %lc5Xq
  %ln5XO = load i64*, i64** %Sp_Var
  %ln5XQ = getelementptr inbounds i64, i64* %ln5XO, i32 -1
  store i64 %ln5XP, i64* %ln5XQ, !tbaa !2
  %ln5XR = ptrtoint %Main_zdfFloatingPs1_bytes_struct* @Main_zdfFloatingPs1_bytes$def to i64
  store i64 %ln5XR, i64* %R2_Var
  %ln5XS = load i64*, i64** %Sp_Var
  %ln5XT = getelementptr inbounds i64, i64* %ln5XS, i32 -2
  %ln5XU = ptrtoint i64* %ln5XT to i64
  %ln5XV = inttoptr i64 %ln5XU to i64*
  store i64* %ln5XV, i64** %Sp_Var
  %ln5XW = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5XX = load i64*, i64** %Sp_Var
  %ln5XY = load i64, i64* %R1_Var
  %ln5XZ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5XW( i64* %Base_Arg, i64* %ln5XX, i64* %Hp_Arg, i64 %ln5XY, i64 %ln5XZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Xs:
  %ln5Y1 = load i64, i64* %R1_Var
  %ln5Y2 = inttoptr i64 %ln5Y1 to i64*
  %ln5Y3 = load i64, i64* %ln5Y2, !tbaa !4
  %ln5Y4 = inttoptr i64 %ln5Y3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Y5 = load i64*, i64** %Sp_Var
  %ln5Y6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Y4( i64* %Base_Arg, i64* %ln5Y5, i64* %Hp_Arg, i64 %ln5Y6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Xu:
  %ln5Y7 = load i64, i64* %R1_Var
  store i64 %ln5Y7, i64* %R1_Var
  %ln5Y8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Y9 = bitcast i64* %ln5Y8 to i64*
  %ln5Ya = load i64, i64* %ln5Y9, !tbaa !5
  %ln5Yb = inttoptr i64 %ln5Ya to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Yc = load i64*, i64** %Sp_Var
  %ln5Yd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Yb( i64* %Base_Arg, i64* %ln5Yc, i64* %Hp_Arg, i64 %ln5Yd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFractionalPs1_bytes_struct = type <{[30 x i8]}>
@Main_zdfFractionalPs1_bytes$def = internal constant %Main_zdfFractionalPs1_bytes_struct<{[30 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 57, i8 54, i8 58, i8 49, i8 48, i8 45, i8 53, i8 48, i8 124, i8 102, i8 114, i8 111, i8 109, i8 82, i8 97, i8 116, i8 105, i8 111, i8 110, i8 97, i8 108, i8 0]}>, align 1
@Main_zdfFractionalPs1_bytes = alias i8, bitcast (%Main_zdfFractionalPs1_bytes_struct* @Main_zdfFractionalPs1_bytes$def to i8*)
%r55z_closure_struct = type <{i64, i64, i64, i64}>
@r55z_closure$def = internal global %r55z_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55z_info$def to i64), i64 0, i64 0, i64 0}>
@r55z_closure = internal alias i8, bitcast (%r55z_closure_struct* @r55z_closure$def to i8*)
@r55z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55z_info$def to i8*)
define internal ghccc void @r55z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55z_info$def to i64)) to i32),i32 0)}>
{
n5Yn:
  %lc5Yh = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Yk
c5Yk:
  %ln5Yo = load i64*, i64** %Sp_Var
  %ln5Yp = getelementptr inbounds i64, i64* %ln5Yo, i32 -2
  %ln5Yq = ptrtoint i64* %ln5Yp to i64
  %ln5Yr = icmp ult i64 %ln5Yq, %SpLim_Arg
  %ln5Ys = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5Yr, i1 0 )
  br i1 %ln5Ys, label %c5Yl, label %c5Ym
c5Ym:
  %ln5Yt = ptrtoint i64* %Base_Arg to i64
  %ln5Yu = inttoptr i64 %ln5Yt to i8*
  %ln5Yv = load i64, i64* %R1_Var
  %ln5Yw = inttoptr i64 %ln5Yv to i8*
  %ln5Yx = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln5Yy = call ccc i8* (i8*, i8*) %ln5Yx( i8* %ln5Yu, i8* %ln5Yw ) nounwind
  %ln5Yz = ptrtoint i8* %ln5Yy to i64
  store i64 %ln5Yz, i64* %lc5Yh
  %ln5YA = load i64, i64* %lc5Yh
  %ln5YB = icmp eq i64 %ln5YA, 0
  br i1 %ln5YB, label %c5Yj, label %c5Yi
c5Yi:
  %ln5YD = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln5YC = load i64*, i64** %Sp_Var
  %ln5YE = getelementptr inbounds i64, i64* %ln5YC, i32 -2
  store i64 %ln5YD, i64* %ln5YE, !tbaa !2
  %ln5YG = load i64, i64* %lc5Yh
  %ln5YF = load i64*, i64** %Sp_Var
  %ln5YH = getelementptr inbounds i64, i64* %ln5YF, i32 -1
  store i64 %ln5YG, i64* %ln5YH, !tbaa !2
  %ln5YI = ptrtoint %Main_zdfFractionalPs1_bytes_struct* @Main_zdfFractionalPs1_bytes$def to i64
  store i64 %ln5YI, i64* %R2_Var
  %ln5YJ = load i64*, i64** %Sp_Var
  %ln5YK = getelementptr inbounds i64, i64* %ln5YJ, i32 -2
  %ln5YL = ptrtoint i64* %ln5YK to i64
  %ln5YM = inttoptr i64 %ln5YL to i64*
  store i64* %ln5YM, i64** %Sp_Var
  %ln5YN = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5YO = load i64*, i64** %Sp_Var
  %ln5YP = load i64, i64* %R1_Var
  %ln5YQ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5YN( i64* %Base_Arg, i64* %ln5YO, i64* %Hp_Arg, i64 %ln5YP, i64 %ln5YQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Yj:
  %ln5YS = load i64, i64* %R1_Var
  %ln5YT = inttoptr i64 %ln5YS to i64*
  %ln5YU = load i64, i64* %ln5YT, !tbaa !4
  %ln5YV = inttoptr i64 %ln5YU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5YW = load i64*, i64** %Sp_Var
  %ln5YX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5YV( i64* %Base_Arg, i64* %ln5YW, i64* %Hp_Arg, i64 %ln5YX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Yl:
  %ln5YY = load i64, i64* %R1_Var
  store i64 %ln5YY, i64* %R1_Var
  %ln5YZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln5Z0 = bitcast i64* %ln5YZ to i64*
  %ln5Z1 = load i64, i64* %ln5Z0, !tbaa !5
  %ln5Z2 = inttoptr i64 %ln5Z1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln5Z3 = load i64*, i64** %Sp_Var
  %ln5Z4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln5Z2( i64* %Base_Arg, i64* %ln5Z3, i64* %Hp_Arg, i64 %ln5Z4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zizt_closure_struct = type <{i64}>
@Main_zizt_closure$def = internal global %Main_zizt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to i64)}>
@Main_zizt_closure = alias i8, bitcast (%Main_zizt_closure_struct* @Main_zizt_closure$def to i8*)
@s58Z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Z_info$def to i8*)
define internal ghccc void @s58Z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n5ZH:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Zj
c5Zj:
  %ln5ZI = load i64*, i64** %Sp_Var
  %ln5ZJ = getelementptr inbounds i64, i64* %ln5ZI, i32 -2
  %ln5ZK = ptrtoint i64* %ln5ZJ to i64
  %ln5ZL = icmp ult i64 %ln5ZK, %SpLim_Arg
  %ln5ZM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln5ZL, i1 0 )
  br i1 %ln5ZM, label %c5Zk, label %c5Zl
c5Zl:
  %ln5ZO = ptrtoint i8* @stg_upd_frame_info to i64
  %ln5ZN = load i64*, i64** %Sp_Var
  %ln5ZP = getelementptr inbounds i64, i64* %ln5ZN, i32 -2
  store i64 %ln5ZO, i64* %ln5ZP, !tbaa !2
  %ln5ZR = load i64, i64* %R1_Var
  %ln5ZQ = load i64*, i64** %Sp_Var
  %ln5ZS = getelementptr inbounds i64, i64* %ln5ZQ, i32 -1
  store i64 %ln5ZR, i64* %ln5ZS, !tbaa !2
  %ln5ZV = load i64, i64* %R1_Var
  %ln5ZW = add i64 %ln5ZV, 32
  %ln5ZX = inttoptr i64 %ln5ZW to i64*
  %ln5ZY = load i64, i64* %ln5ZX, !tbaa !4
  store i64 %ln5ZY, i64* %R4_Var
  %ln601 = load i64, i64* %R1_Var
  %ln602 = add i64 %ln601, 24
  %ln603 = inttoptr i64 %ln602 to i64*
  %ln604 = load i64, i64* %ln603, !tbaa !4
  store i64 %ln604, i64* %R3_Var
  %ln607 = load i64, i64* %R1_Var
  %ln608 = add i64 %ln607, 16
  %ln609 = inttoptr i64 %ln608 to i64*
  %ln60a = load i64, i64* %ln609, !tbaa !4
  store i64 %ln60a, i64* %R2_Var
  %ln60b = load i64*, i64** %Sp_Var
  %ln60c = getelementptr inbounds i64, i64* %ln60b, i32 -2
  %ln60d = ptrtoint i64* %ln60c to i64
  %ln60e = inttoptr i64 %ln60d to i64*
  store i64* %ln60e, i64** %Sp_Var
  %ln60f = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln60g = load i64*, i64** %Sp_Var
  %ln60h = load i64, i64* %R1_Var
  %ln60i = load i64, i64* %R2_Var
  %ln60j = load i64, i64* %R3_Var
  %ln60k = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln60f( i64* %Base_Arg, i64* %ln60g, i64* %Hp_Arg, i64 %ln60h, i64 %ln60i, i64 %ln60j, i64 %ln60k, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Zk:
  %ln60l = load i64, i64* %R1_Var
  store i64 %ln60l, i64* %R1_Var
  %ln60m = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln60n = bitcast i64* %ln60m to i64*
  %ln60o = load i64, i64* %ln60n, !tbaa !5
  %ln60p = inttoptr i64 %ln60o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln60q = load i64*, i64** %Sp_Var
  %ln60r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln60p( i64* %Base_Arg, i64* %ln60q, i64* %Hp_Arg, i64 %ln60r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58Y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Y_info$def to i8*)
define internal ghccc void @s58Y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n60s:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c5Zq
c5Zq:
  %ln60t = load i64*, i64** %Sp_Var
  %ln60u = getelementptr inbounds i64, i64* %ln60t, i32 -5
  %ln60v = ptrtoint i64* %ln60u to i64
  %ln60w = icmp ult i64 %ln60v, %SpLim_Arg
  %ln60x = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln60w, i1 0 )
  br i1 %ln60x, label %c5Zr, label %c5Zs
c5Zs:
  %ln60z = ptrtoint i8* @stg_upd_frame_info to i64
  %ln60y = load i64*, i64** %Sp_Var
  %ln60A = getelementptr inbounds i64, i64* %ln60y, i32 -2
  store i64 %ln60z, i64* %ln60A, !tbaa !2
  %ln60C = load i64, i64* %R1_Var
  %ln60B = load i64*, i64** %Sp_Var
  %ln60D = getelementptr inbounds i64, i64* %ln60B, i32 -1
  store i64 %ln60C, i64* %ln60D, !tbaa !2
  %ln60G = load i64, i64* %R1_Var
  %ln60H = add i64 %ln60G, 16
  %ln60I = inttoptr i64 %ln60H to i64*
  %ln60J = load i64, i64* %ln60I, !tbaa !4
  store i64 %ln60J, i64* %R2_Var
  %ln60L = ptrtoint i8* @stg_ap_pp_info to i64
  %ln60K = load i64*, i64** %Sp_Var
  %ln60M = getelementptr inbounds i64, i64* %ln60K, i32 -5
  store i64 %ln60L, i64* %ln60M, !tbaa !2
  %ln60Q = load i64, i64* %R1_Var
  %ln60R = add i64 %ln60Q, 24
  %ln60S = inttoptr i64 %ln60R to i64*
  %ln60T = load i64, i64* %ln60S, !tbaa !4
  %ln60N = load i64*, i64** %Sp_Var
  %ln60U = getelementptr inbounds i64, i64* %ln60N, i32 -4
  store i64 %ln60T, i64* %ln60U, !tbaa !2
  %ln60Y = load i64, i64* %R1_Var
  %ln60Z = add i64 %ln60Y, 32
  %ln610 = inttoptr i64 %ln60Z to i64*
  %ln611 = load i64, i64* %ln610, !tbaa !4
  %ln60V = load i64*, i64** %Sp_Var
  %ln612 = getelementptr inbounds i64, i64* %ln60V, i32 -3
  store i64 %ln611, i64* %ln612, !tbaa !2
  %ln613 = load i64*, i64** %Sp_Var
  %ln614 = getelementptr inbounds i64, i64* %ln613, i32 -5
  %ln615 = ptrtoint i64* %ln614 to i64
  %ln616 = inttoptr i64 %ln615 to i64*
  store i64* %ln616, i64** %Sp_Var
  %ln617 = bitcast i8* @base_GHCziNum_zt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln618 = load i64*, i64** %Sp_Var
  %ln619 = load i64, i64* %R1_Var
  %ln61a = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln617( i64* %Base_Arg, i64* %ln618, i64* %Hp_Arg, i64 %ln619, i64 %ln61a, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Zr:
  %ln61b = load i64, i64* %R1_Var
  store i64 %ln61b, i64* %R1_Var
  %ln61c = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln61d = bitcast i64* %ln61c to i64*
  %ln61e = load i64, i64* %ln61d, !tbaa !5
  %ln61f = inttoptr i64 %ln61e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln61g = load i64*, i64** %Sp_Var
  %ln61h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln61f( i64* %Base_Arg, i64* %ln61g, i64* %Hp_Arg, i64 %ln61h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zizt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to i8*)
define ghccc void @Main_zizt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n61i:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c5Zx
c5Zx:
  %ln61j = load i64*, i64** %Sp_Var
  %ln61k = getelementptr inbounds i64, i64* %ln61j, i32 -3
  %ln61l = ptrtoint i64* %ln61k to i64
  %ln61m = icmp ult i64 %ln61l, %SpLim_Arg
  %ln61n = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln61m, i1 0 )
  br i1 %ln61n, label %c5Zy, label %c5Zz
c5Zz:
  %ln61p = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Z9_info$def to i64
  %ln61o = load i64*, i64** %Sp_Var
  %ln61q = getelementptr inbounds i64, i64* %ln61o, i32 -3
  store i64 %ln61p, i64* %ln61q, !tbaa !2
  %ln61r = load i64, i64* %R4_Var
  store i64 %ln61r, i64* %R1_Var
  %ln61t = load i64, i64* %R2_Var
  %ln61s = load i64*, i64** %Sp_Var
  %ln61u = getelementptr inbounds i64, i64* %ln61s, i32 -2
  store i64 %ln61t, i64* %ln61u, !tbaa !2
  %ln61w = load i64, i64* %R3_Var
  %ln61v = load i64*, i64** %Sp_Var
  %ln61x = getelementptr inbounds i64, i64* %ln61v, i32 -1
  store i64 %ln61w, i64* %ln61x, !tbaa !2
  %ln61y = load i64*, i64** %Sp_Var
  %ln61z = getelementptr inbounds i64, i64* %ln61y, i32 -3
  %ln61A = ptrtoint i64* %ln61z to i64
  %ln61B = inttoptr i64 %ln61A to i64*
  store i64* %ln61B, i64** %Sp_Var
  %ln61C = load i64, i64* %R1_Var
  %ln61D = and i64 %ln61C, 7
  %ln61E = icmp ne i64 %ln61D, 0
  br i1 %ln61E, label %u5ZG, label %c5Za
c5Za:
  %ln61G = load i64, i64* %R1_Var
  %ln61H = inttoptr i64 %ln61G to i64*
  %ln61I = load i64, i64* %ln61H, !tbaa !4
  %ln61J = inttoptr i64 %ln61I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln61K = load i64*, i64** %Sp_Var
  %ln61L = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln61J( i64* %Base_Arg, i64* %ln61K, i64* %Hp_Arg, i64 %ln61L, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u5ZG:
  %ln61M = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Z9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln61N = load i64*, i64** %Sp_Var
  %ln61O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln61M( i64* %Base_Arg, i64* %ln61N, i64* %Hp_Arg, i64 %ln61O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Zy:
  %ln61P = load i64, i64* %R4_Var
  store i64 %ln61P, i64* %R4_Var
  %ln61Q = load i64, i64* %R3_Var
  store i64 %ln61Q, i64* %R3_Var
  %ln61R = load i64, i64* %R2_Var
  store i64 %ln61R, i64* %R2_Var
  %ln61S = ptrtoint %Main_zizt_closure_struct* @Main_zizt_closure$def to i64
  store i64 %ln61S, i64* %R1_Var
  %ln61T = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln61U = bitcast i64* %ln61T to i64*
  %ln61V = load i64, i64* %ln61U, !tbaa !5
  %ln61W = inttoptr i64 %ln61V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln61X = load i64*, i64** %Sp_Var
  %ln61Y = load i64, i64* %R1_Var
  %ln61Z = load i64, i64* %R2_Var
  %ln620 = load i64, i64* %R3_Var
  %ln621 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln61W( i64* %Base_Arg, i64* %ln61X, i64* %Hp_Arg, i64 %ln61Y, i64 %ln61Z, i64 %ln620, i64 %ln621, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c5Z9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c5Z9_info$def to i8*)
define internal ghccc void @c5Z9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n622:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58W = alloca i64, i32 1
  %ls58X = alloca i64, i32 1
  %ls58S = alloca i64, i32 1
  %ls58T = alloca i64, i32 1
  br label %c5Z9
c5Z9:
  %ln623 = load i64, i64* %R1_Var
  %ln624 = and i64 %ln623, 7
  switch i64 %ln624, label %c5Zu [i64 1, label %c5Zu
i64 2, label %c5Zv]
c5Zu:
  %ln625 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln626 = add i64 %ln625, 1
  store i64 %ln626, i64* %R1_Var
  %ln627 = load i64*, i64** %Sp_Var
  %ln628 = getelementptr inbounds i64, i64* %ln627, i32 3
  %ln629 = ptrtoint i64* %ln628 to i64
  %ln62a = inttoptr i64 %ln629 to i64*
  store i64* %ln62a, i64** %Sp_Var
  %ln62b = load i64*, i64** %Sp_Var
  %ln62c = getelementptr inbounds i64, i64* %ln62b, i32 0
  %ln62d = bitcast i64* %ln62c to i64*
  %ln62e = load i64, i64* %ln62d, !tbaa !2
  %ln62f = inttoptr i64 %ln62e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln62g = load i64*, i64** %Sp_Var
  %ln62h = load i64*, i64** %Hp_Var
  %ln62i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln62f( i64* %Base_Arg, i64* %ln62g, i64* %ln62h, i64 %ln62i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5Zv:
  %ln62j = load i64*, i64** %Hp_Var
  %ln62k = getelementptr inbounds i64, i64* %ln62j, i32 13
  %ln62l = ptrtoint i64* %ln62k to i64
  %ln62m = inttoptr i64 %ln62l to i64*
  store i64* %ln62m, i64** %Hp_Var
  %ln62n = load i64*, i64** %Hp_Var
  %ln62o = ptrtoint i64* %ln62n to i64
  %ln62p = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln62q = bitcast i64* %ln62p to i64*
  %ln62r = load i64, i64* %ln62q, !tbaa !5
  %ln62s = icmp ugt i64 %ln62o, %ln62r
  %ln62t = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln62s, i1 0 )
  br i1 %ln62t, label %c5ZF, label %c5ZE
c5ZE:
  %ln62w = load i64, i64* %R1_Var
  %ln62x = add i64 %ln62w, 6
  %ln62y = inttoptr i64 %ln62x to i64*
  %ln62z = load i64, i64* %ln62y, !tbaa !4
  store i64 %ln62z, i64* %ls58W
  %ln62C = load i64, i64* %R1_Var
  %ln62D = add i64 %ln62C, 14
  %ln62E = inttoptr i64 %ln62D to i64*
  %ln62F = load i64, i64* %ln62E, !tbaa !4
  store i64 %ln62F, i64* %ls58X
  %ln62H = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Z_info$def to i64
  %ln62G = load i64*, i64** %Hp_Var
  %ln62I = getelementptr inbounds i64, i64* %ln62G, i32 -12
  store i64 %ln62H, i64* %ln62I, !tbaa !3
  %ln62J = load i64*, i64** %Sp_Var
  %ln62K = getelementptr inbounds i64, i64* %ln62J, i32 1
  %ln62L = bitcast i64* %ln62K to i64*
  %ln62M = load i64, i64* %ln62L, !tbaa !2
  store i64 %ln62M, i64* %ls58S
  %ln62O = load i64, i64* %ls58S
  %ln62N = load i64*, i64** %Hp_Var
  %ln62P = getelementptr inbounds i64, i64* %ln62N, i32 -10
  store i64 %ln62O, i64* %ln62P, !tbaa !3
  %ln62Q = load i64*, i64** %Sp_Var
  %ln62R = getelementptr inbounds i64, i64* %ln62Q, i32 2
  %ln62S = bitcast i64* %ln62R to i64*
  %ln62T = load i64, i64* %ln62S, !tbaa !2
  store i64 %ln62T, i64* %ls58T
  %ln62V = load i64, i64* %ls58T
  %ln62U = load i64*, i64** %Hp_Var
  %ln62W = getelementptr inbounds i64, i64* %ln62U, i32 -9
  store i64 %ln62V, i64* %ln62W, !tbaa !3
  %ln62Y = load i64, i64* %ls58X
  %ln62X = load i64*, i64** %Hp_Var
  %ln62Z = getelementptr inbounds i64, i64* %ln62X, i32 -8
  store i64 %ln62Y, i64* %ln62Z, !tbaa !3
  %ln631 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Y_info$def to i64
  %ln630 = load i64*, i64** %Hp_Var
  %ln632 = getelementptr inbounds i64, i64* %ln630, i32 -7
  store i64 %ln631, i64* %ln632, !tbaa !3
  %ln634 = load i64, i64* %ls58S
  %ln633 = load i64*, i64** %Hp_Var
  %ln635 = getelementptr inbounds i64, i64* %ln633, i32 -5
  store i64 %ln634, i64* %ln635, !tbaa !3
  %ln637 = load i64, i64* %ls58T
  %ln636 = load i64*, i64** %Hp_Var
  %ln638 = getelementptr inbounds i64, i64* %ln636, i32 -4
  store i64 %ln637, i64* %ln638, !tbaa !3
  %ln63a = load i64, i64* %ls58W
  %ln639 = load i64*, i64** %Hp_Var
  %ln63b = getelementptr inbounds i64, i64* %ln639, i32 -3
  store i64 %ln63a, i64* %ln63b, !tbaa !3
  %ln63d = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln63c = load i64*, i64** %Hp_Var
  %ln63e = getelementptr inbounds i64, i64* %ln63c, i32 -2
  store i64 %ln63d, i64* %ln63e, !tbaa !3
  %ln63g = load i64*, i64** %Hp_Var
  %ln63h = getelementptr inbounds i64, i64* %ln63g, i32 -7
  %ln63i = ptrtoint i64* %ln63h to i64
  %ln63f = load i64*, i64** %Hp_Var
  %ln63j = getelementptr inbounds i64, i64* %ln63f, i32 -1
  store i64 %ln63i, i64* %ln63j, !tbaa !3
  %ln63l = load i64*, i64** %Hp_Var
  %ln63m = getelementptr inbounds i64, i64* %ln63l, i32 -12
  %ln63n = ptrtoint i64* %ln63m to i64
  %ln63k = load i64*, i64** %Hp_Var
  %ln63o = getelementptr inbounds i64, i64* %ln63k, i32 0
  store i64 %ln63n, i64* %ln63o, !tbaa !3
  %ln63q = load i64*, i64** %Hp_Var
  %ln63r = ptrtoint i64* %ln63q to i64
  %ln63s = add i64 %ln63r, -14
  store i64 %ln63s, i64* %R1_Var
  %ln63t = load i64*, i64** %Sp_Var
  %ln63u = getelementptr inbounds i64, i64* %ln63t, i32 3
  %ln63v = ptrtoint i64* %ln63u to i64
  %ln63w = inttoptr i64 %ln63v to i64*
  store i64* %ln63w, i64** %Sp_Var
  %ln63x = load i64*, i64** %Sp_Var
  %ln63y = getelementptr inbounds i64, i64* %ln63x, i32 0
  %ln63z = bitcast i64* %ln63y to i64*
  %ln63A = load i64, i64* %ln63z, !tbaa !2
  %ln63B = inttoptr i64 %ln63A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln63C = load i64*, i64** %Sp_Var
  %ln63D = load i64*, i64** %Hp_Var
  %ln63E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln63B( i64* %Base_Arg, i64* %ln63C, i64* %ln63D, i64 %ln63E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c5ZF:
  %ln63F = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %ln63F, !tbaa !5
  %ln63G = load i64, i64* %R1_Var
  store i64 %ln63G, i64* %R1_Var
  %ln63H = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln63I = load i64*, i64** %Sp_Var
  %ln63J = load i64*, i64** %Hp_Var
  %ln63K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln63H( i64* %Base_Arg, i64* %ln63I, i64* %ln63J, i64 %ln63K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_ziztzuzdszizt_closure_struct = type <{i64, i64}>
@Main_ziztzuzdszizt_closure$def = internal global %Main_ziztzuzdszizt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to i64), i64 0}>
@Main_ziztzuzdszizt_closure = alias i8, bitcast (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i8*)
@s58R_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58R_info$def to i8*)
define internal ghccc void @s58R_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58R_info$def to i64)) to i32),i32 0)}>
{
n64n:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c63Z
c63Z:
  %ln64o = load i64*, i64** %Sp_Var
  %ln64p = getelementptr inbounds i64, i64* %ln64o, i32 -2
  %ln64q = ptrtoint i64* %ln64p to i64
  %ln64r = icmp ult i64 %ln64q, %SpLim_Arg
  %ln64s = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln64r, i1 0 )
  br i1 %ln64s, label %c640, label %c641
c641:
  %ln64u = ptrtoint i8* @stg_upd_frame_info to i64
  %ln64t = load i64*, i64** %Sp_Var
  %ln64v = getelementptr inbounds i64, i64* %ln64t, i32 -2
  store i64 %ln64u, i64* %ln64v, !tbaa !2
  %ln64x = load i64, i64* %R1_Var
  %ln64w = load i64*, i64** %Sp_Var
  %ln64y = getelementptr inbounds i64, i64* %ln64w, i32 -1
  store i64 %ln64x, i64* %ln64y, !tbaa !2
  %ln64B = load i64, i64* %R1_Var
  %ln64C = add i64 %ln64B, 24
  %ln64D = inttoptr i64 %ln64C to i64*
  %ln64E = load i64, i64* %ln64D, !tbaa !4
  store i64 %ln64E, i64* %R3_Var
  %ln64H = load i64, i64* %R1_Var
  %ln64I = add i64 %ln64H, 16
  %ln64J = inttoptr i64 %ln64I to i64*
  %ln64K = load i64, i64* %ln64J, !tbaa !4
  store i64 %ln64K, i64* %R2_Var
  %ln64L = load i64*, i64** %Sp_Var
  %ln64M = getelementptr inbounds i64, i64* %ln64L, i32 -2
  %ln64N = ptrtoint i64* %ln64M to i64
  %ln64O = inttoptr i64 %ln64N to i64*
  store i64* %ln64O, i64** %Sp_Var
  %ln64P = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln64Q = load i64*, i64** %Sp_Var
  %ln64R = load i64, i64* %R1_Var
  %ln64S = load i64, i64* %R2_Var
  %ln64T = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln64P( i64* %Base_Arg, i64* %ln64Q, i64* %Hp_Arg, i64 %ln64R, i64 %ln64S, i64 %ln64T, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c640:
  %ln64U = load i64, i64* %R1_Var
  store i64 %ln64U, i64* %R1_Var
  %ln64V = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln64W = bitcast i64* %ln64V to i64*
  %ln64X = load i64, i64* %ln64W, !tbaa !5
  %ln64Y = inttoptr i64 %ln64X to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln64Z = load i64*, i64** %Sp_Var
  %ln650 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln64Y( i64* %Base_Arg, i64* %ln64Z, i64* %Hp_Arg, i64 %ln650, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58Q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Q_info$def to i8*)
define internal ghccc void @s58Q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Q_info$def to i64)) to i32),i32 0)}>
{
n651:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c646
c646:
  %ln652 = load i64*, i64** %Sp_Var
  %ln653 = getelementptr inbounds i64, i64* %ln652, i32 -2
  %ln654 = ptrtoint i64* %ln653 to i64
  %ln655 = icmp ult i64 %ln654, %SpLim_Arg
  %ln656 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln655, i1 0 )
  br i1 %ln656, label %c647, label %c648
c648:
  %ln658 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln657 = load i64*, i64** %Sp_Var
  %ln659 = getelementptr inbounds i64, i64* %ln657, i32 -2
  store i64 %ln658, i64* %ln659, !tbaa !2
  %ln65b = load i64, i64* %R1_Var
  %ln65a = load i64*, i64** %Sp_Var
  %ln65c = getelementptr inbounds i64, i64* %ln65a, i32 -1
  store i64 %ln65b, i64* %ln65c, !tbaa !2
  %ln65f = load i64, i64* %R1_Var
  %ln65g = add i64 %ln65f, 24
  %ln65h = inttoptr i64 %ln65g to i64*
  %ln65i = load i64, i64* %ln65h, !tbaa !4
  store i64 %ln65i, i64* %R3_Var
  %ln65l = load i64, i64* %R1_Var
  %ln65m = add i64 %ln65l, 16
  %ln65n = inttoptr i64 %ln65m to i64*
  %ln65o = load i64, i64* %ln65n, !tbaa !4
  store i64 %ln65o, i64* %R2_Var
  %ln65p = load i64*, i64** %Sp_Var
  %ln65q = getelementptr inbounds i64, i64* %ln65p, i32 -2
  %ln65r = ptrtoint i64* %ln65q to i64
  %ln65s = inttoptr i64 %ln65r to i64*
  store i64* %ln65s, i64** %Sp_Var
  %ln65t = bitcast i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln65u = load i64*, i64** %Sp_Var
  %ln65v = load i64, i64* %R1_Var
  %ln65w = load i64, i64* %R2_Var
  %ln65x = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln65t( i64* %Base_Arg, i64* %ln65u, i64* %Hp_Arg, i64 %ln65v, i64 %ln65w, i64 %ln65x, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c647:
  %ln65y = load i64, i64* %R1_Var
  store i64 %ln65y, i64* %R1_Var
  %ln65z = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln65A = bitcast i64* %ln65z to i64*
  %ln65B = load i64, i64* %ln65A, !tbaa !5
  %ln65C = inttoptr i64 %ln65B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln65D = load i64*, i64** %Sp_Var
  %ln65E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln65C( i64* %Base_Arg, i64* %ln65D, i64* %Hp_Arg, i64 %ln65E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_ziztzuzdszizt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to i8*)
define ghccc void @Main_ziztzuzdszizt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to i64)) to i32),i32 0)}>
{
n65F:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c64d
c64d:
  %ln65G = load i64*, i64** %Sp_Var
  %ln65H = getelementptr inbounds i64, i64* %ln65G, i32 -2
  %ln65I = ptrtoint i64* %ln65H to i64
  %ln65J = icmp ult i64 %ln65I, %SpLim_Arg
  %ln65K = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln65J, i1 0 )
  br i1 %ln65K, label %c64e, label %c64f
c64f:
  %ln65M = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c63P_info$def to i64
  %ln65L = load i64*, i64** %Sp_Var
  %ln65N = getelementptr inbounds i64, i64* %ln65L, i32 -2
  store i64 %ln65M, i64* %ln65N, !tbaa !2
  %ln65O = load i64, i64* %R3_Var
  store i64 %ln65O, i64* %R1_Var
  %ln65Q = load i64, i64* %R2_Var
  %ln65P = load i64*, i64** %Sp_Var
  %ln65R = getelementptr inbounds i64, i64* %ln65P, i32 -1
  store i64 %ln65Q, i64* %ln65R, !tbaa !2
  %ln65S = load i64*, i64** %Sp_Var
  %ln65T = getelementptr inbounds i64, i64* %ln65S, i32 -2
  %ln65U = ptrtoint i64* %ln65T to i64
  %ln65V = inttoptr i64 %ln65U to i64*
  store i64* %ln65V, i64** %Sp_Var
  %ln65W = load i64, i64* %R1_Var
  %ln65X = and i64 %ln65W, 7
  %ln65Y = icmp ne i64 %ln65X, 0
  br i1 %ln65Y, label %u64m, label %c63Q
c63Q:
  %ln660 = load i64, i64* %R1_Var
  %ln661 = inttoptr i64 %ln660 to i64*
  %ln662 = load i64, i64* %ln661, !tbaa !4
  %ln663 = inttoptr i64 %ln662 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln664 = load i64*, i64** %Sp_Var
  %ln665 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln663( i64* %Base_Arg, i64* %ln664, i64* %Hp_Arg, i64 %ln665, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u64m:
  %ln666 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c63P_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln667 = load i64*, i64** %Sp_Var
  %ln668 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln666( i64* %Base_Arg, i64* %ln667, i64* %Hp_Arg, i64 %ln668, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c64e:
  %ln669 = load i64, i64* %R3_Var
  store i64 %ln669, i64* %R3_Var
  %ln66a = load i64, i64* %R2_Var
  store i64 %ln66a, i64* %R2_Var
  %ln66b = ptrtoint %Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i64
  store i64 %ln66b, i64* %R1_Var
  %ln66c = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln66d = bitcast i64* %ln66c to i64*
  %ln66e = load i64, i64* %ln66d, !tbaa !5
  %ln66f = inttoptr i64 %ln66e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln66g = load i64*, i64** %Sp_Var
  %ln66h = load i64, i64* %R1_Var
  %ln66i = load i64, i64* %R2_Var
  %ln66j = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln66f( i64* %Base_Arg, i64* %ln66g, i64* %Hp_Arg, i64 %ln66h, i64 %ln66i, i64 %ln66j, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c63P_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c63P_info$def to i8*)
define internal ghccc void @c63P_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c63P_info$def to i64)) to i32),i32 0)}>
{
n66k:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58O = alloca i64, i32 1
  %ls58P = alloca i64, i32 1
  %ls58L = alloca i64, i32 1
  br label %c63P
c63P:
  %ln66l = load i64, i64* %R1_Var
  %ln66m = and i64 %ln66l, 7
  switch i64 %ln66m, label %c64a [i64 1, label %c64a
i64 2, label %c64b]
c64a:
  %ln66n = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln66o = add i64 %ln66n, 1
  store i64 %ln66o, i64* %R1_Var
  %ln66p = load i64*, i64** %Sp_Var
  %ln66q = getelementptr inbounds i64, i64* %ln66p, i32 2
  %ln66r = ptrtoint i64* %ln66q to i64
  %ln66s = inttoptr i64 %ln66r to i64*
  store i64* %ln66s, i64** %Sp_Var
  %ln66t = load i64*, i64** %Sp_Var
  %ln66u = getelementptr inbounds i64, i64* %ln66t, i32 0
  %ln66v = bitcast i64* %ln66u to i64*
  %ln66w = load i64, i64* %ln66v, !tbaa !2
  %ln66x = inttoptr i64 %ln66w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln66y = load i64*, i64** %Sp_Var
  %ln66z = load i64*, i64** %Hp_Var
  %ln66A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln66x( i64* %Base_Arg, i64* %ln66y, i64* %ln66z, i64 %ln66A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c64b:
  %ln66B = load i64*, i64** %Hp_Var
  %ln66C = getelementptr inbounds i64, i64* %ln66B, i32 11
  %ln66D = ptrtoint i64* %ln66C to i64
  %ln66E = inttoptr i64 %ln66D to i64*
  store i64* %ln66E, i64** %Hp_Var
  %ln66F = load i64*, i64** %Hp_Var
  %ln66G = ptrtoint i64* %ln66F to i64
  %ln66H = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln66I = bitcast i64* %ln66H to i64*
  %ln66J = load i64, i64* %ln66I, !tbaa !5
  %ln66K = icmp ugt i64 %ln66G, %ln66J
  %ln66L = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln66K, i1 0 )
  br i1 %ln66L, label %c64l, label %c64k
c64k:
  %ln66O = load i64, i64* %R1_Var
  %ln66P = add i64 %ln66O, 6
  %ln66Q = inttoptr i64 %ln66P to i64*
  %ln66R = load i64, i64* %ln66Q, !tbaa !4
  store i64 %ln66R, i64* %ls58O
  %ln66U = load i64, i64* %R1_Var
  %ln66V = add i64 %ln66U, 14
  %ln66W = inttoptr i64 %ln66V to i64*
  %ln66X = load i64, i64* %ln66W, !tbaa !4
  store i64 %ln66X, i64* %ls58P
  %ln66Z = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58R_info$def to i64
  %ln66Y = load i64*, i64** %Hp_Var
  %ln670 = getelementptr inbounds i64, i64* %ln66Y, i32 -10
  store i64 %ln66Z, i64* %ln670, !tbaa !3
  %ln671 = load i64*, i64** %Sp_Var
  %ln672 = getelementptr inbounds i64, i64* %ln671, i32 1
  %ln673 = bitcast i64* %ln672 to i64*
  %ln674 = load i64, i64* %ln673, !tbaa !2
  store i64 %ln674, i64* %ls58L
  %ln676 = load i64, i64* %ls58L
  %ln675 = load i64*, i64** %Hp_Var
  %ln677 = getelementptr inbounds i64, i64* %ln675, i32 -8
  store i64 %ln676, i64* %ln677, !tbaa !3
  %ln679 = load i64, i64* %ls58P
  %ln678 = load i64*, i64** %Hp_Var
  %ln67a = getelementptr inbounds i64, i64* %ln678, i32 -7
  store i64 %ln679, i64* %ln67a, !tbaa !3
  %ln67c = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58Q_info$def to i64
  %ln67b = load i64*, i64** %Hp_Var
  %ln67d = getelementptr inbounds i64, i64* %ln67b, i32 -6
  store i64 %ln67c, i64* %ln67d, !tbaa !3
  %ln67f = load i64, i64* %ls58L
  %ln67e = load i64*, i64** %Hp_Var
  %ln67g = getelementptr inbounds i64, i64* %ln67e, i32 -4
  store i64 %ln67f, i64* %ln67g, !tbaa !3
  %ln67i = load i64, i64* %ls58O
  %ln67h = load i64*, i64** %Hp_Var
  %ln67j = getelementptr inbounds i64, i64* %ln67h, i32 -3
  store i64 %ln67i, i64* %ln67j, !tbaa !3
  %ln67l = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln67k = load i64*, i64** %Hp_Var
  %ln67m = getelementptr inbounds i64, i64* %ln67k, i32 -2
  store i64 %ln67l, i64* %ln67m, !tbaa !3
  %ln67o = load i64*, i64** %Hp_Var
  %ln67p = getelementptr inbounds i64, i64* %ln67o, i32 -6
  %ln67q = ptrtoint i64* %ln67p to i64
  %ln67n = load i64*, i64** %Hp_Var
  %ln67r = getelementptr inbounds i64, i64* %ln67n, i32 -1
  store i64 %ln67q, i64* %ln67r, !tbaa !3
  %ln67t = load i64*, i64** %Hp_Var
  %ln67u = getelementptr inbounds i64, i64* %ln67t, i32 -10
  %ln67v = ptrtoint i64* %ln67u to i64
  %ln67s = load i64*, i64** %Hp_Var
  %ln67w = getelementptr inbounds i64, i64* %ln67s, i32 0
  store i64 %ln67v, i64* %ln67w, !tbaa !3
  %ln67y = load i64*, i64** %Hp_Var
  %ln67z = ptrtoint i64* %ln67y to i64
  %ln67A = add i64 %ln67z, -14
  store i64 %ln67A, i64* %R1_Var
  %ln67B = load i64*, i64** %Sp_Var
  %ln67C = getelementptr inbounds i64, i64* %ln67B, i32 2
  %ln67D = ptrtoint i64* %ln67C to i64
  %ln67E = inttoptr i64 %ln67D to i64*
  store i64* %ln67E, i64** %Sp_Var
  %ln67F = load i64*, i64** %Sp_Var
  %ln67G = getelementptr inbounds i64, i64* %ln67F, i32 0
  %ln67H = bitcast i64* %ln67G to i64*
  %ln67I = load i64, i64* %ln67H, !tbaa !2
  %ln67J = inttoptr i64 %ln67I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln67K = load i64*, i64** %Sp_Var
  %ln67L = load i64*, i64** %Hp_Var
  %ln67M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln67J( i64* %Base_Arg, i64* %ln67K, i64* %ln67L, i64 %ln67M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c64l:
  %ln67N = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln67N, !tbaa !5
  %ln67O = load i64, i64* %R1_Var
  store i64 %ln67O, i64* %R1_Var
  %ln67P = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln67Q = load i64*, i64** %Sp_Var
  %ln67R = load i64*, i64** %Hp_Var
  %ln67S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln67P( i64* %Base_Arg, i64* %ln67Q, i64* %ln67R, i64 %ln67S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdcnegate_closure_struct = type <{i64}>
@Main_zdfNumPszuzdcnegate_closure$def = internal global %Main_zdfNumPszuzdcnegate_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to i64)}>
@Main_zdfNumPszuzdcnegate_closure = alias i8, bitcast (%Main_zdfNumPszuzdcnegate_closure_struct* @Main_zdfNumPszuzdcnegate_closure$def to i8*)
@s58G_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58G_info$def to i8*)
define internal ghccc void @s58G_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n68v:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c687
c687:
  %ln68w = load i64*, i64** %Sp_Var
  %ln68x = getelementptr inbounds i64, i64* %ln68w, i32 -2
  %ln68y = ptrtoint i64* %ln68x to i64
  %ln68z = icmp ult i64 %ln68y, %SpLim_Arg
  %ln68A = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln68z, i1 0 )
  br i1 %ln68A, label %c688, label %c689
c689:
  %ln68C = ptrtoint i8* @stg_upd_frame_info to i64
  %ln68B = load i64*, i64** %Sp_Var
  %ln68D = getelementptr inbounds i64, i64* %ln68B, i32 -2
  store i64 %ln68C, i64* %ln68D, !tbaa !2
  %ln68F = load i64, i64* %R1_Var
  %ln68E = load i64*, i64** %Sp_Var
  %ln68G = getelementptr inbounds i64, i64* %ln68E, i32 -1
  store i64 %ln68F, i64* %ln68G, !tbaa !2
  %ln68J = load i64, i64* %R1_Var
  %ln68K = add i64 %ln68J, 24
  %ln68L = inttoptr i64 %ln68K to i64*
  %ln68M = load i64, i64* %ln68L, !tbaa !4
  store i64 %ln68M, i64* %R3_Var
  %ln68P = load i64, i64* %R1_Var
  %ln68Q = add i64 %ln68P, 16
  %ln68R = inttoptr i64 %ln68Q to i64*
  %ln68S = load i64, i64* %ln68R, !tbaa !4
  store i64 %ln68S, i64* %R2_Var
  %ln68T = load i64*, i64** %Sp_Var
  %ln68U = getelementptr inbounds i64, i64* %ln68T, i32 -2
  %ln68V = ptrtoint i64* %ln68U to i64
  %ln68W = inttoptr i64 %ln68V to i64*
  store i64* %ln68W, i64** %Sp_Var
  %ln68X = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln68Y = load i64*, i64** %Sp_Var
  %ln68Z = load i64, i64* %R1_Var
  %ln690 = load i64, i64* %R2_Var
  %ln691 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln68X( i64* %Base_Arg, i64* %ln68Y, i64* %Hp_Arg, i64 %ln68Z, i64 %ln690, i64 %ln691, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c688:
  %ln692 = load i64, i64* %R1_Var
  store i64 %ln692, i64* %R1_Var
  %ln693 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln694 = bitcast i64* %ln693 to i64*
  %ln695 = load i64, i64* %ln694, !tbaa !5
  %ln696 = inttoptr i64 %ln695 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln697 = load i64*, i64** %Sp_Var
  %ln698 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln696( i64* %Base_Arg, i64* %ln697, i64* %Hp_Arg, i64 %ln698, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58F_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58F_info$def to i8*)
define internal ghccc void @s58F_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n699:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c68e
c68e:
  %ln69a = load i64*, i64** %Sp_Var
  %ln69b = getelementptr inbounds i64, i64* %ln69a, i32 -4
  %ln69c = ptrtoint i64* %ln69b to i64
  %ln69d = icmp ult i64 %ln69c, %SpLim_Arg
  %ln69e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln69d, i1 0 )
  br i1 %ln69e, label %c68f, label %c68g
c68g:
  %ln69g = ptrtoint i8* @stg_upd_frame_info to i64
  %ln69f = load i64*, i64** %Sp_Var
  %ln69h = getelementptr inbounds i64, i64* %ln69f, i32 -2
  store i64 %ln69g, i64* %ln69h, !tbaa !2
  %ln69j = load i64, i64* %R1_Var
  %ln69i = load i64*, i64** %Sp_Var
  %ln69k = getelementptr inbounds i64, i64* %ln69i, i32 -1
  store i64 %ln69j, i64* %ln69k, !tbaa !2
  %ln69n = load i64, i64* %R1_Var
  %ln69o = add i64 %ln69n, 16
  %ln69p = inttoptr i64 %ln69o to i64*
  %ln69q = load i64, i64* %ln69p, !tbaa !4
  store i64 %ln69q, i64* %R2_Var
  %ln69s = ptrtoint i8* @stg_ap_p_info to i64
  %ln69r = load i64*, i64** %Sp_Var
  %ln69t = getelementptr inbounds i64, i64* %ln69r, i32 -4
  store i64 %ln69s, i64* %ln69t, !tbaa !2
  %ln69x = load i64, i64* %R1_Var
  %ln69y = add i64 %ln69x, 24
  %ln69z = inttoptr i64 %ln69y to i64*
  %ln69A = load i64, i64* %ln69z, !tbaa !4
  %ln69u = load i64*, i64** %Sp_Var
  %ln69B = getelementptr inbounds i64, i64* %ln69u, i32 -3
  store i64 %ln69A, i64* %ln69B, !tbaa !2
  %ln69C = load i64*, i64** %Sp_Var
  %ln69D = getelementptr inbounds i64, i64* %ln69C, i32 -4
  %ln69E = ptrtoint i64* %ln69D to i64
  %ln69F = inttoptr i64 %ln69E to i64*
  store i64* %ln69F, i64** %Sp_Var
  %ln69G = bitcast i8* @base_GHCziNum_negate_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln69H = load i64*, i64** %Sp_Var
  %ln69I = load i64, i64* %R1_Var
  %ln69J = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln69G( i64* %Base_Arg, i64* %ln69H, i64* %Hp_Arg, i64 %ln69I, i64 %ln69J, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c68f:
  %ln69K = load i64, i64* %R1_Var
  store i64 %ln69K, i64* %R1_Var
  %ln69L = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln69M = bitcast i64* %ln69L to i64*
  %ln69N = load i64, i64* %ln69M, !tbaa !5
  %ln69O = inttoptr i64 %ln69N to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln69P = load i64*, i64** %Sp_Var
  %ln69Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln69O( i64* %Base_Arg, i64* %ln69P, i64* %Hp_Arg, i64 %ln69Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdcnegate_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdcnegate_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n69R:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c68l
c68l:
  %ln69S = load i64*, i64** %Sp_Var
  %ln69T = getelementptr inbounds i64, i64* %ln69S, i32 -2
  %ln69U = ptrtoint i64* %ln69T to i64
  %ln69V = icmp ult i64 %ln69U, %SpLim_Arg
  %ln69W = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln69V, i1 0 )
  br i1 %ln69W, label %c68m, label %c68n
c68n:
  %ln69Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c67X_info$def to i64
  %ln69X = load i64*, i64** %Sp_Var
  %ln69Z = getelementptr inbounds i64, i64* %ln69X, i32 -2
  store i64 %ln69Y, i64* %ln69Z, !tbaa !2
  %ln6a0 = load i64, i64* %R3_Var
  store i64 %ln6a0, i64* %R1_Var
  %ln6a2 = load i64, i64* %R2_Var
  %ln6a1 = load i64*, i64** %Sp_Var
  %ln6a3 = getelementptr inbounds i64, i64* %ln6a1, i32 -1
  store i64 %ln6a2, i64* %ln6a3, !tbaa !2
  %ln6a4 = load i64*, i64** %Sp_Var
  %ln6a5 = getelementptr inbounds i64, i64* %ln6a4, i32 -2
  %ln6a6 = ptrtoint i64* %ln6a5 to i64
  %ln6a7 = inttoptr i64 %ln6a6 to i64*
  store i64* %ln6a7, i64** %Sp_Var
  %ln6a8 = load i64, i64* %R1_Var
  %ln6a9 = and i64 %ln6a8, 7
  %ln6aa = icmp ne i64 %ln6a9, 0
  br i1 %ln6aa, label %u68u, label %c67Y
c67Y:
  %ln6ac = load i64, i64* %R1_Var
  %ln6ad = inttoptr i64 %ln6ac to i64*
  %ln6ae = load i64, i64* %ln6ad, !tbaa !4
  %ln6af = inttoptr i64 %ln6ae to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ag = load i64*, i64** %Sp_Var
  %ln6ah = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6af( i64* %Base_Arg, i64* %ln6ag, i64* %Hp_Arg, i64 %ln6ah, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u68u:
  %ln6ai = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c67X_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6aj = load i64*, i64** %Sp_Var
  %ln6ak = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ai( i64* %Base_Arg, i64* %ln6aj, i64* %Hp_Arg, i64 %ln6ak, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c68m:
  %ln6al = load i64, i64* %R3_Var
  store i64 %ln6al, i64* %R3_Var
  %ln6am = load i64, i64* %R2_Var
  store i64 %ln6am, i64* %R2_Var
  %ln6an = ptrtoint %Main_zdfNumPszuzdcnegate_closure_struct* @Main_zdfNumPszuzdcnegate_closure$def to i64
  store i64 %ln6an, i64* %R1_Var
  %ln6ao = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6ap = bitcast i64* %ln6ao to i64*
  %ln6aq = load i64, i64* %ln6ap, !tbaa !5
  %ln6ar = inttoptr i64 %ln6aq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6as = load i64*, i64** %Sp_Var
  %ln6at = load i64, i64* %R1_Var
  %ln6au = load i64, i64* %R2_Var
  %ln6av = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ar( i64* %Base_Arg, i64* %ln6as, i64* %Hp_Arg, i64 %ln6at, i64 %ln6au, i64 %ln6av, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c67X_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c67X_info$def to i8*)
define internal ghccc void @c67X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n6aw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58D = alloca i64, i32 1
  %ls58E = alloca i64, i32 1
  %ls58A = alloca i64, i32 1
  br label %c67X
c67X:
  %ln6ax = load i64, i64* %R1_Var
  %ln6ay = and i64 %ln6ax, 7
  switch i64 %ln6ay, label %c68i [i64 1, label %c68i
i64 2, label %c68j]
c68i:
  %ln6az = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6aA = add i64 %ln6az, 1
  store i64 %ln6aA, i64* %R1_Var
  %ln6aB = load i64*, i64** %Sp_Var
  %ln6aC = getelementptr inbounds i64, i64* %ln6aB, i32 2
  %ln6aD = ptrtoint i64* %ln6aC to i64
  %ln6aE = inttoptr i64 %ln6aD to i64*
  store i64* %ln6aE, i64** %Sp_Var
  %ln6aF = load i64*, i64** %Sp_Var
  %ln6aG = getelementptr inbounds i64, i64* %ln6aF, i32 0
  %ln6aH = bitcast i64* %ln6aG to i64*
  %ln6aI = load i64, i64* %ln6aH, !tbaa !2
  %ln6aJ = inttoptr i64 %ln6aI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6aK = load i64*, i64** %Sp_Var
  %ln6aL = load i64*, i64** %Hp_Var
  %ln6aM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6aJ( i64* %Base_Arg, i64* %ln6aK, i64* %ln6aL, i64 %ln6aM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c68j:
  %ln6aN = load i64*, i64** %Hp_Var
  %ln6aO = getelementptr inbounds i64, i64* %ln6aN, i32 11
  %ln6aP = ptrtoint i64* %ln6aO to i64
  %ln6aQ = inttoptr i64 %ln6aP to i64*
  store i64* %ln6aQ, i64** %Hp_Var
  %ln6aR = load i64*, i64** %Hp_Var
  %ln6aS = ptrtoint i64* %ln6aR to i64
  %ln6aT = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6aU = bitcast i64* %ln6aT to i64*
  %ln6aV = load i64, i64* %ln6aU, !tbaa !5
  %ln6aW = icmp ugt i64 %ln6aS, %ln6aV
  %ln6aX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6aW, i1 0 )
  br i1 %ln6aX, label %c68t, label %c68s
c68s:
  %ln6b0 = load i64, i64* %R1_Var
  %ln6b1 = add i64 %ln6b0, 6
  %ln6b2 = inttoptr i64 %ln6b1 to i64*
  %ln6b3 = load i64, i64* %ln6b2, !tbaa !4
  store i64 %ln6b3, i64* %ls58D
  %ln6b6 = load i64, i64* %R1_Var
  %ln6b7 = add i64 %ln6b6, 14
  %ln6b8 = inttoptr i64 %ln6b7 to i64*
  %ln6b9 = load i64, i64* %ln6b8, !tbaa !4
  store i64 %ln6b9, i64* %ls58E
  %ln6bb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58G_info$def to i64
  %ln6ba = load i64*, i64** %Hp_Var
  %ln6bc = getelementptr inbounds i64, i64* %ln6ba, i32 -10
  store i64 %ln6bb, i64* %ln6bc, !tbaa !3
  %ln6bd = load i64*, i64** %Sp_Var
  %ln6be = getelementptr inbounds i64, i64* %ln6bd, i32 1
  %ln6bf = bitcast i64* %ln6be to i64*
  %ln6bg = load i64, i64* %ln6bf, !tbaa !2
  store i64 %ln6bg, i64* %ls58A
  %ln6bi = load i64, i64* %ls58A
  %ln6bh = load i64*, i64** %Hp_Var
  %ln6bj = getelementptr inbounds i64, i64* %ln6bh, i32 -8
  store i64 %ln6bi, i64* %ln6bj, !tbaa !3
  %ln6bl = load i64, i64* %ls58E
  %ln6bk = load i64*, i64** %Hp_Var
  %ln6bm = getelementptr inbounds i64, i64* %ln6bk, i32 -7
  store i64 %ln6bl, i64* %ln6bm, !tbaa !3
  %ln6bo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58F_info$def to i64
  %ln6bn = load i64*, i64** %Hp_Var
  %ln6bp = getelementptr inbounds i64, i64* %ln6bn, i32 -6
  store i64 %ln6bo, i64* %ln6bp, !tbaa !3
  %ln6br = load i64, i64* %ls58A
  %ln6bq = load i64*, i64** %Hp_Var
  %ln6bs = getelementptr inbounds i64, i64* %ln6bq, i32 -4
  store i64 %ln6br, i64* %ln6bs, !tbaa !3
  %ln6bu = load i64, i64* %ls58D
  %ln6bt = load i64*, i64** %Hp_Var
  %ln6bv = getelementptr inbounds i64, i64* %ln6bt, i32 -3
  store i64 %ln6bu, i64* %ln6bv, !tbaa !3
  %ln6bx = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6bw = load i64*, i64** %Hp_Var
  %ln6by = getelementptr inbounds i64, i64* %ln6bw, i32 -2
  store i64 %ln6bx, i64* %ln6by, !tbaa !3
  %ln6bA = load i64*, i64** %Hp_Var
  %ln6bB = getelementptr inbounds i64, i64* %ln6bA, i32 -6
  %ln6bC = ptrtoint i64* %ln6bB to i64
  %ln6bz = load i64*, i64** %Hp_Var
  %ln6bD = getelementptr inbounds i64, i64* %ln6bz, i32 -1
  store i64 %ln6bC, i64* %ln6bD, !tbaa !3
  %ln6bF = load i64*, i64** %Hp_Var
  %ln6bG = getelementptr inbounds i64, i64* %ln6bF, i32 -10
  %ln6bH = ptrtoint i64* %ln6bG to i64
  %ln6bE = load i64*, i64** %Hp_Var
  %ln6bI = getelementptr inbounds i64, i64* %ln6bE, i32 0
  store i64 %ln6bH, i64* %ln6bI, !tbaa !3
  %ln6bK = load i64*, i64** %Hp_Var
  %ln6bL = ptrtoint i64* %ln6bK to i64
  %ln6bM = add i64 %ln6bL, -14
  store i64 %ln6bM, i64* %R1_Var
  %ln6bN = load i64*, i64** %Sp_Var
  %ln6bO = getelementptr inbounds i64, i64* %ln6bN, i32 2
  %ln6bP = ptrtoint i64* %ln6bO to i64
  %ln6bQ = inttoptr i64 %ln6bP to i64*
  store i64* %ln6bQ, i64** %Sp_Var
  %ln6bR = load i64*, i64** %Sp_Var
  %ln6bS = getelementptr inbounds i64, i64* %ln6bR, i32 0
  %ln6bT = bitcast i64* %ln6bS to i64*
  %ln6bU = load i64, i64* %ln6bT, !tbaa !2
  %ln6bV = inttoptr i64 %ln6bU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6bW = load i64*, i64** %Sp_Var
  %ln6bX = load i64*, i64** %Hp_Var
  %ln6bY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6bV( i64* %Base_Arg, i64* %ln6bW, i64* %ln6bX, i64 %ln6bY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c68t:
  %ln6bZ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln6bZ, !tbaa !5
  %ln6c0 = load i64, i64* %R1_Var
  store i64 %ln6c0, i64* %R1_Var
  %ln6c1 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6c2 = load i64*, i64** %Sp_Var
  %ln6c3 = load i64*, i64** %Hp_Var
  %ln6c4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6c1( i64* %Base_Arg, i64* %ln6c2, i64* %ln6c3, i64 %ln6c4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdszdcnegate_closure_struct = type <{i64, i64}>
@Main_zdfNumPszuzdszdcnegate_closure$def = internal global %Main_zdfNumPszuzdszdcnegate_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to i64), i64 0}>
@Main_zdfNumPszuzdszdcnegate_closure = alias i8, bitcast (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i8*)
@s58z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58z_info$def to i8*)
define internal ghccc void @s58z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58z_info$def to i64)) to i32),i32 0)}>
{
n6cW:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6cj
c6cj:
  %ln6cX = load i64*, i64** %Sp_Var
  %ln6cY = getelementptr inbounds i64, i64* %ln6cX, i32 -2
  %ln6cZ = ptrtoint i64* %ln6cY to i64
  %ln6d0 = icmp ult i64 %ln6cZ, %SpLim_Arg
  %ln6d1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6d0, i1 0 )
  br i1 %ln6d1, label %c6ck, label %c6cl
c6cl:
  %ln6d3 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6d2 = load i64*, i64** %Sp_Var
  %ln6d4 = getelementptr inbounds i64, i64* %ln6d2, i32 -2
  store i64 %ln6d3, i64* %ln6d4, !tbaa !2
  %ln6d6 = load i64, i64* %R1_Var
  %ln6d5 = load i64*, i64** %Sp_Var
  %ln6d7 = getelementptr inbounds i64, i64* %ln6d5, i32 -1
  store i64 %ln6d6, i64* %ln6d7, !tbaa !2
  %ln6da = load i64, i64* %R1_Var
  %ln6db = add i64 %ln6da, 16
  %ln6dc = inttoptr i64 %ln6db to i64*
  %ln6dd = load i64, i64* %ln6dc, !tbaa !4
  store i64 %ln6dd, i64* %R2_Var
  %ln6de = load i64*, i64** %Sp_Var
  %ln6df = getelementptr inbounds i64, i64* %ln6de, i32 -2
  %ln6dg = ptrtoint i64* %ln6df to i64
  %ln6dh = inttoptr i64 %ln6dg to i64*
  store i64* %ln6dh, i64** %Sp_Var
  %ln6di = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6dj = load i64*, i64** %Sp_Var
  %ln6dk = load i64, i64* %R1_Var
  %ln6dl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6di( i64* %Base_Arg, i64* %ln6dj, i64* %Hp_Arg, i64 %ln6dk, i64 %ln6dl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6ck:
  %ln6dm = load i64, i64* %R1_Var
  store i64 %ln6dm, i64* %R1_Var
  %ln6dn = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6do = bitcast i64* %ln6dn to i64*
  %ln6dp = load i64, i64* %ln6do, !tbaa !5
  %ln6dq = inttoptr i64 %ln6dp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6dr = load i64*, i64** %Sp_Var
  %ln6ds = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6dq( i64* %Base_Arg, i64* %ln6dr, i64* %Hp_Arg, i64 %ln6ds, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58y_info$def to i8*)
define internal ghccc void @s58y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerNegate_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58y_info$def to i64)) to i32),i32 0)}>
{
n6dt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6ct
c6ct:
  %ln6du = load i64*, i64** %Sp_Var
  %ln6dv = getelementptr inbounds i64, i64* %ln6du, i32 -4
  %ln6dw = ptrtoint i64* %ln6dv to i64
  %ln6dx = icmp ult i64 %ln6dw, %SpLim_Arg
  %ln6dy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6dx, i1 0 )
  br i1 %ln6dy, label %c6cB, label %c6cC
c6cC:
  %ln6dA = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6dz = load i64*, i64** %Sp_Var
  %ln6dB = getelementptr inbounds i64, i64* %ln6dz, i32 -2
  store i64 %ln6dA, i64* %ln6dB, !tbaa !2
  %ln6dD = load i64, i64* %R1_Var
  %ln6dC = load i64*, i64** %Sp_Var
  %ln6dE = getelementptr inbounds i64, i64* %ln6dC, i32 -1
  store i64 %ln6dD, i64* %ln6dE, !tbaa !2
  %ln6dG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cq_info$def to i64
  %ln6dF = load i64*, i64** %Sp_Var
  %ln6dH = getelementptr inbounds i64, i64* %ln6dF, i32 -3
  store i64 %ln6dG, i64* %ln6dH, !tbaa !2
  %ln6dK = load i64, i64* %R1_Var
  %ln6dL = add i64 %ln6dK, 16
  %ln6dM = inttoptr i64 %ln6dL to i64*
  %ln6dN = load i64, i64* %ln6dM, !tbaa !4
  store i64 %ln6dN, i64* %R1_Var
  %ln6dO = load i64*, i64** %Sp_Var
  %ln6dP = getelementptr inbounds i64, i64* %ln6dO, i32 -3
  %ln6dQ = ptrtoint i64* %ln6dP to i64
  %ln6dR = inttoptr i64 %ln6dQ to i64*
  store i64* %ln6dR, i64** %Sp_Var
  %ln6dS = load i64, i64* %R1_Var
  %ln6dT = and i64 %ln6dS, 7
  %ln6dU = icmp ne i64 %ln6dT, 0
  br i1 %ln6dU, label %u6cH, label %c6cr
c6cr:
  %ln6dW = load i64, i64* %R1_Var
  %ln6dX = inttoptr i64 %ln6dW to i64*
  %ln6dY = load i64, i64* %ln6dX, !tbaa !4
  %ln6dZ = inttoptr i64 %ln6dY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6e0 = load i64*, i64** %Sp_Var
  %ln6e1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6dZ( i64* %Base_Arg, i64* %ln6e0, i64* %Hp_Arg, i64 %ln6e1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6cH:
  %ln6e2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6e3 = load i64*, i64** %Sp_Var
  %ln6e4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6e2( i64* %Base_Arg, i64* %ln6e3, i64* %Hp_Arg, i64 %ln6e4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6cB:
  %ln6e5 = load i64, i64* %R1_Var
  store i64 %ln6e5, i64* %R1_Var
  %ln6e6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6e7 = bitcast i64* %ln6e6 to i64*
  %ln6e8 = load i64, i64* %ln6e7, !tbaa !5
  %ln6e9 = inttoptr i64 %ln6e8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ea = load i64*, i64** %Sp_Var
  %ln6eb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6e9( i64* %Base_Arg, i64* %ln6ea, i64* %Hp_Arg, i64 %ln6eb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6cq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cq_info$def to i8*)
define internal ghccc void @c6cq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerNegate_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cq_info$def to i64)) to i32),i32 0)}>
{
n6ec:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6cq
c6cq:
  %ln6ee = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cw_info$def to i64
  %ln6ed = load i64*, i64** %Sp_Var
  %ln6ef = getelementptr inbounds i64, i64* %ln6ed, i32 -1
  store i64 %ln6ee, i64* %ln6ef, !tbaa !2
  %ln6eg = add i64 %R1_Arg, 7
  %ln6eh = inttoptr i64 %ln6eg to i64*
  %ln6ei = load i64, i64* %ln6eh, !tbaa !4
  store i64 %ln6ei, i64* %R2_Var
  %ln6ek = add i64 %R1_Arg, 15
  %ln6el = inttoptr i64 %ln6ek to i64*
  %ln6em = load i64, i64* %ln6el, !tbaa !4
  %ln6ej = load i64*, i64** %Sp_Var
  %ln6en = getelementptr inbounds i64, i64* %ln6ej, i32 0
  store i64 %ln6em, i64* %ln6en, !tbaa !2
  %ln6eo = load i64*, i64** %Sp_Var
  %ln6ep = getelementptr inbounds i64, i64* %ln6eo, i32 -1
  %ln6eq = ptrtoint i64* %ln6ep to i64
  %ln6er = inttoptr i64 %ln6eq to i64*
  store i64* %ln6er, i64** %Sp_Var
  %ln6es = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerNegate_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6et = load i64*, i64** %Sp_Var
  %ln6eu = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6es( i64* %Base_Arg, i64* %ln6et, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6eu, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6cw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6cw_info$def to i8*)
define internal ghccc void @c6cw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n6ev:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6cw
c6cw:
  %ln6ew = load i64*, i64** %Hp_Var
  %ln6ex = getelementptr inbounds i64, i64* %ln6ew, i32 3
  %ln6ey = ptrtoint i64* %ln6ex to i64
  %ln6ez = inttoptr i64 %ln6ey to i64*
  store i64* %ln6ez, i64** %Hp_Var
  %ln6eA = load i64*, i64** %Hp_Var
  %ln6eB = ptrtoint i64* %ln6eA to i64
  %ln6eC = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6eD = bitcast i64* %ln6eC to i64*
  %ln6eE = load i64, i64* %ln6eD, !tbaa !5
  %ln6eF = icmp ugt i64 %ln6eB, %ln6eE
  %ln6eG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6eF, i1 0 )
  br i1 %ln6eG, label %c6cG, label %c6cF
c6cF:
  %ln6eI = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln6eH = load i64*, i64** %Hp_Var
  %ln6eJ = getelementptr inbounds i64, i64* %ln6eH, i32 -2
  store i64 %ln6eI, i64* %ln6eJ, !tbaa !3
  %ln6eL = load i64, i64* %R1_Var
  %ln6eK = load i64*, i64** %Hp_Var
  %ln6eM = getelementptr inbounds i64, i64* %ln6eK, i32 -1
  store i64 %ln6eL, i64* %ln6eM, !tbaa !3
  %ln6eO = load i64*, i64** %Sp_Var
  %ln6eP = getelementptr inbounds i64, i64* %ln6eO, i32 1
  %ln6eQ = bitcast i64* %ln6eP to i64*
  %ln6eR = load i64, i64* %ln6eQ, !tbaa !2
  %ln6eN = load i64*, i64** %Hp_Var
  %ln6eS = getelementptr inbounds i64, i64* %ln6eN, i32 0
  store i64 %ln6eR, i64* %ln6eS, !tbaa !3
  %ln6eU = load i64*, i64** %Hp_Var
  %ln6eV = ptrtoint i64* %ln6eU to i64
  %ln6eW = add i64 %ln6eV, -15
  store i64 %ln6eW, i64* %R1_Var
  %ln6eX = load i64*, i64** %Sp_Var
  %ln6eY = getelementptr inbounds i64, i64* %ln6eX, i32 2
  %ln6eZ = ptrtoint i64* %ln6eY to i64
  %ln6f0 = inttoptr i64 %ln6eZ to i64*
  store i64* %ln6f0, i64** %Sp_Var
  %ln6f1 = load i64*, i64** %Sp_Var
  %ln6f2 = getelementptr inbounds i64, i64* %ln6f1, i32 0
  %ln6f3 = bitcast i64* %ln6f2 to i64*
  %ln6f4 = load i64, i64* %ln6f3, !tbaa !2
  %ln6f5 = inttoptr i64 %ln6f4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6f6 = load i64*, i64** %Sp_Var
  %ln6f7 = load i64*, i64** %Hp_Var
  %ln6f8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6f5( i64* %Base_Arg, i64* %ln6f6, i64* %ln6f7, i64 %ln6f8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6cG:
  %ln6f9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln6f9, !tbaa !5
  %ln6fa = load i64, i64* %R1_Var
  store i64 %ln6fa, i64* %R1_Var
  %ln6fb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6fc = load i64*, i64** %Sp_Var
  %ln6fd = load i64*, i64** %Hp_Var
  %ln6fe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6fb( i64* %Base_Arg, i64* %ln6fc, i64* %ln6fd, i64 %ln6fe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdszdcnegate_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdszdcnegate_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerNegate_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to i64)) to i32),i32 0)}>
{
n6ff:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6cM
c6cM:
  %ln6fg = load i64*, i64** %Sp_Var
  %ln6fh = getelementptr inbounds i64, i64* %ln6fg, i32 -1
  %ln6fi = ptrtoint i64* %ln6fh to i64
  %ln6fj = icmp ult i64 %ln6fi, %SpLim_Arg
  %ln6fk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6fj, i1 0 )
  br i1 %ln6fk, label %c6cN, label %c6cO
c6cO:
  %ln6fm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6c9_info$def to i64
  %ln6fl = load i64*, i64** %Sp_Var
  %ln6fn = getelementptr inbounds i64, i64* %ln6fl, i32 -1
  store i64 %ln6fm, i64* %ln6fn, !tbaa !2
  %ln6fo = load i64, i64* %R2_Var
  store i64 %ln6fo, i64* %R1_Var
  %ln6fp = load i64*, i64** %Sp_Var
  %ln6fq = getelementptr inbounds i64, i64* %ln6fp, i32 -1
  %ln6fr = ptrtoint i64* %ln6fq to i64
  %ln6fs = inttoptr i64 %ln6fr to i64*
  store i64* %ln6fs, i64** %Sp_Var
  %ln6ft = load i64, i64* %R1_Var
  %ln6fu = and i64 %ln6ft, 7
  %ln6fv = icmp ne i64 %ln6fu, 0
  br i1 %ln6fv, label %u6cV, label %c6ca
c6ca:
  %ln6fx = load i64, i64* %R1_Var
  %ln6fy = inttoptr i64 %ln6fx to i64*
  %ln6fz = load i64, i64* %ln6fy, !tbaa !4
  %ln6fA = inttoptr i64 %ln6fz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6fB = load i64*, i64** %Sp_Var
  %ln6fC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6fA( i64* %Base_Arg, i64* %ln6fB, i64* %Hp_Arg, i64 %ln6fC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6cV:
  %ln6fD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6c9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6fE = load i64*, i64** %Sp_Var
  %ln6fF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6fD( i64* %Base_Arg, i64* %ln6fE, i64* %Hp_Arg, i64 %ln6fF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6cN:
  %ln6fG = load i64, i64* %R2_Var
  store i64 %ln6fG, i64* %R2_Var
  %ln6fH = ptrtoint %Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64
  store i64 %ln6fH, i64* %R1_Var
  %ln6fI = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6fJ = bitcast i64* %ln6fI to i64*
  %ln6fK = load i64, i64* %ln6fJ, !tbaa !5
  %ln6fL = inttoptr i64 %ln6fK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6fM = load i64*, i64** %Sp_Var
  %ln6fN = load i64, i64* %R1_Var
  %ln6fO = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6fL( i64* %Base_Arg, i64* %ln6fM, i64* %Hp_Arg, i64 %ln6fN, i64 %ln6fO, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6c9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6c9_info$def to i8*)
define internal ghccc void @c6c9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6c9_info$def to i64)) to i32),i32 0)}>
{
n6fP:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58s = alloca i64, i32 1
  %ls58t = alloca i64, i32 1
  br label %c6c9
c6c9:
  %ln6fQ = load i64, i64* %R1_Var
  %ln6fR = and i64 %ln6fQ, 7
  switch i64 %ln6fR, label %c6cJ [i64 1, label %c6cJ
i64 2, label %c6cK]
c6cJ:
  %ln6fS = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6fT = add i64 %ln6fS, 1
  store i64 %ln6fT, i64* %R1_Var
  %ln6fU = load i64*, i64** %Sp_Var
  %ln6fV = getelementptr inbounds i64, i64* %ln6fU, i32 1
  %ln6fW = ptrtoint i64* %ln6fV to i64
  %ln6fX = inttoptr i64 %ln6fW to i64*
  store i64* %ln6fX, i64** %Sp_Var
  %ln6fY = load i64*, i64** %Sp_Var
  %ln6fZ = getelementptr inbounds i64, i64* %ln6fY, i32 0
  %ln6g0 = bitcast i64* %ln6fZ to i64*
  %ln6g1 = load i64, i64* %ln6g0, !tbaa !2
  %ln6g2 = inttoptr i64 %ln6g1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6g3 = load i64*, i64** %Sp_Var
  %ln6g4 = load i64*, i64** %Hp_Var
  %ln6g5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6g2( i64* %Base_Arg, i64* %ln6g3, i64* %ln6g4, i64 %ln6g5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6cK:
  %ln6g6 = load i64*, i64** %Hp_Var
  %ln6g7 = getelementptr inbounds i64, i64* %ln6g6, i32 9
  %ln6g8 = ptrtoint i64* %ln6g7 to i64
  %ln6g9 = inttoptr i64 %ln6g8 to i64*
  store i64* %ln6g9, i64** %Hp_Var
  %ln6ga = load i64*, i64** %Hp_Var
  %ln6gb = ptrtoint i64* %ln6ga to i64
  %ln6gc = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6gd = bitcast i64* %ln6gc to i64*
  %ln6ge = load i64, i64* %ln6gd, !tbaa !5
  %ln6gf = icmp ugt i64 %ln6gb, %ln6ge
  %ln6gg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6gf, i1 0 )
  br i1 %ln6gg, label %c6cU, label %c6cT
c6cT:
  %ln6gj = load i64, i64* %R1_Var
  %ln6gk = add i64 %ln6gj, 6
  %ln6gl = inttoptr i64 %ln6gk to i64*
  %ln6gm = load i64, i64* %ln6gl, !tbaa !4
  store i64 %ln6gm, i64* %ls58s
  %ln6gp = load i64, i64* %R1_Var
  %ln6gq = add i64 %ln6gp, 14
  %ln6gr = inttoptr i64 %ln6gq to i64*
  %ln6gs = load i64, i64* %ln6gr, !tbaa !4
  store i64 %ln6gs, i64* %ls58t
  %ln6gu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58z_info$def to i64
  %ln6gt = load i64*, i64** %Hp_Var
  %ln6gv = getelementptr inbounds i64, i64* %ln6gt, i32 -8
  store i64 %ln6gu, i64* %ln6gv, !tbaa !3
  %ln6gx = load i64, i64* %ls58t
  %ln6gw = load i64*, i64** %Hp_Var
  %ln6gy = getelementptr inbounds i64, i64* %ln6gw, i32 -6
  store i64 %ln6gx, i64* %ln6gy, !tbaa !3
  %ln6gA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58y_info$def to i64
  %ln6gz = load i64*, i64** %Hp_Var
  %ln6gB = getelementptr inbounds i64, i64* %ln6gz, i32 -5
  store i64 %ln6gA, i64* %ln6gB, !tbaa !3
  %ln6gD = load i64, i64* %ls58s
  %ln6gC = load i64*, i64** %Hp_Var
  %ln6gE = getelementptr inbounds i64, i64* %ln6gC, i32 -3
  store i64 %ln6gD, i64* %ln6gE, !tbaa !3
  %ln6gG = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6gF = load i64*, i64** %Hp_Var
  %ln6gH = getelementptr inbounds i64, i64* %ln6gF, i32 -2
  store i64 %ln6gG, i64* %ln6gH, !tbaa !3
  %ln6gJ = load i64*, i64** %Hp_Var
  %ln6gK = getelementptr inbounds i64, i64* %ln6gJ, i32 -5
  %ln6gL = ptrtoint i64* %ln6gK to i64
  %ln6gI = load i64*, i64** %Hp_Var
  %ln6gM = getelementptr inbounds i64, i64* %ln6gI, i32 -1
  store i64 %ln6gL, i64* %ln6gM, !tbaa !3
  %ln6gO = load i64*, i64** %Hp_Var
  %ln6gP = getelementptr inbounds i64, i64* %ln6gO, i32 -8
  %ln6gQ = ptrtoint i64* %ln6gP to i64
  %ln6gN = load i64*, i64** %Hp_Var
  %ln6gR = getelementptr inbounds i64, i64* %ln6gN, i32 0
  store i64 %ln6gQ, i64* %ln6gR, !tbaa !3
  %ln6gT = load i64*, i64** %Hp_Var
  %ln6gU = ptrtoint i64* %ln6gT to i64
  %ln6gV = add i64 %ln6gU, -14
  store i64 %ln6gV, i64* %R1_Var
  %ln6gW = load i64*, i64** %Sp_Var
  %ln6gX = getelementptr inbounds i64, i64* %ln6gW, i32 1
  %ln6gY = ptrtoint i64* %ln6gX to i64
  %ln6gZ = inttoptr i64 %ln6gY to i64*
  store i64* %ln6gZ, i64** %Sp_Var
  %ln6h0 = load i64*, i64** %Sp_Var
  %ln6h1 = getelementptr inbounds i64, i64* %ln6h0, i32 0
  %ln6h2 = bitcast i64* %ln6h1 to i64*
  %ln6h3 = load i64, i64* %ln6h2, !tbaa !2
  %ln6h4 = inttoptr i64 %ln6h3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6h5 = load i64*, i64** %Sp_Var
  %ln6h6 = load i64*, i64** %Hp_Var
  %ln6h7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6h4( i64* %Base_Arg, i64* %ln6h5, i64* %ln6h6, i64 %ln6h7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6cU:
  %ln6h8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %ln6h8, !tbaa !5
  %ln6h9 = load i64, i64* %R1_Var
  store i64 %ln6h9, i64* %R1_Var
  %ln6ha = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6hb = load i64*, i64** %Sp_Var
  %ln6hc = load i64*, i64** %Hp_Var
  %ln6hd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ha( i64* %Base_Arg, i64* %ln6hb, i64* %ln6hc, i64 %ln6hd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdczp_closure_struct = type <{i64}>
@Main_zdfNumPszuzdczp_closure$def = internal global %Main_zdfNumPszuzdczp_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to i64)}>
@Main_zdfNumPszuzdczp_closure = alias i8, bitcast (%Main_zdfNumPszuzdczp_closure_struct* @Main_zdfNumPszuzdczp_closure$def to i8*)
@s58p_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58p_info$def to i8*)
define internal ghccc void @s58p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n6i4:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6hy
c6hy:
  %ln6i5 = load i64*, i64** %Sp_Var
  %ln6i6 = getelementptr inbounds i64, i64* %ln6i5, i32 -2
  %ln6i7 = ptrtoint i64* %ln6i6 to i64
  %ln6i8 = icmp ult i64 %ln6i7, %SpLim_Arg
  %ln6i9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6i8, i1 0 )
  br i1 %ln6i9, label %c6hz, label %c6hA
c6hA:
  %ln6ib = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6ia = load i64*, i64** %Sp_Var
  %ln6ic = getelementptr inbounds i64, i64* %ln6ia, i32 -2
  store i64 %ln6ib, i64* %ln6ic, !tbaa !2
  %ln6ie = load i64, i64* %R1_Var
  %ln6id = load i64*, i64** %Sp_Var
  %ln6if = getelementptr inbounds i64, i64* %ln6id, i32 -1
  store i64 %ln6ie, i64* %ln6if, !tbaa !2
  %ln6ii = load i64, i64* %R1_Var
  %ln6ij = add i64 %ln6ii, 32
  %ln6ik = inttoptr i64 %ln6ij to i64*
  %ln6il = load i64, i64* %ln6ik, !tbaa !4
  store i64 %ln6il, i64* %R4_Var
  %ln6io = load i64, i64* %R1_Var
  %ln6ip = add i64 %ln6io, 24
  %ln6iq = inttoptr i64 %ln6ip to i64*
  %ln6ir = load i64, i64* %ln6iq, !tbaa !4
  store i64 %ln6ir, i64* %R3_Var
  %ln6iu = load i64, i64* %R1_Var
  %ln6iv = add i64 %ln6iu, 16
  %ln6iw = inttoptr i64 %ln6iv to i64*
  %ln6ix = load i64, i64* %ln6iw, !tbaa !4
  store i64 %ln6ix, i64* %R2_Var
  %ln6iy = load i64*, i64** %Sp_Var
  %ln6iz = getelementptr inbounds i64, i64* %ln6iy, i32 -2
  %ln6iA = ptrtoint i64* %ln6iz to i64
  %ln6iB = inttoptr i64 %ln6iA to i64*
  store i64* %ln6iB, i64** %Sp_Var
  %ln6iC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6iD = load i64*, i64** %Sp_Var
  %ln6iE = load i64, i64* %R1_Var
  %ln6iF = load i64, i64* %R2_Var
  %ln6iG = load i64, i64* %R3_Var
  %ln6iH = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6iC( i64* %Base_Arg, i64* %ln6iD, i64* %Hp_Arg, i64 %ln6iE, i64 %ln6iF, i64 %ln6iG, i64 %ln6iH, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6hz:
  %ln6iI = load i64, i64* %R1_Var
  store i64 %ln6iI, i64* %R1_Var
  %ln6iJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6iK = bitcast i64* %ln6iJ to i64*
  %ln6iL = load i64, i64* %ln6iK, !tbaa !5
  %ln6iM = inttoptr i64 %ln6iL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6iN = load i64*, i64** %Sp_Var
  %ln6iO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6iM( i64* %Base_Arg, i64* %ln6iN, i64* %Hp_Arg, i64 %ln6iO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58o_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58o_info$def to i8*)
define internal ghccc void @s58o_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n6iP:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6hF
c6hF:
  %ln6iQ = load i64*, i64** %Sp_Var
  %ln6iR = getelementptr inbounds i64, i64* %ln6iQ, i32 -5
  %ln6iS = ptrtoint i64* %ln6iR to i64
  %ln6iT = icmp ult i64 %ln6iS, %SpLim_Arg
  %ln6iU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6iT, i1 0 )
  br i1 %ln6iU, label %c6hG, label %c6hH
c6hH:
  %ln6iW = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6iV = load i64*, i64** %Sp_Var
  %ln6iX = getelementptr inbounds i64, i64* %ln6iV, i32 -2
  store i64 %ln6iW, i64* %ln6iX, !tbaa !2
  %ln6iZ = load i64, i64* %R1_Var
  %ln6iY = load i64*, i64** %Sp_Var
  %ln6j0 = getelementptr inbounds i64, i64* %ln6iY, i32 -1
  store i64 %ln6iZ, i64* %ln6j0, !tbaa !2
  %ln6j3 = load i64, i64* %R1_Var
  %ln6j4 = add i64 %ln6j3, 16
  %ln6j5 = inttoptr i64 %ln6j4 to i64*
  %ln6j6 = load i64, i64* %ln6j5, !tbaa !4
  store i64 %ln6j6, i64* %R2_Var
  %ln6j8 = ptrtoint i8* @stg_ap_pp_info to i64
  %ln6j7 = load i64*, i64** %Sp_Var
  %ln6j9 = getelementptr inbounds i64, i64* %ln6j7, i32 -5
  store i64 %ln6j8, i64* %ln6j9, !tbaa !2
  %ln6jd = load i64, i64* %R1_Var
  %ln6je = add i64 %ln6jd, 24
  %ln6jf = inttoptr i64 %ln6je to i64*
  %ln6jg = load i64, i64* %ln6jf, !tbaa !4
  %ln6ja = load i64*, i64** %Sp_Var
  %ln6jh = getelementptr inbounds i64, i64* %ln6ja, i32 -4
  store i64 %ln6jg, i64* %ln6jh, !tbaa !2
  %ln6jl = load i64, i64* %R1_Var
  %ln6jm = add i64 %ln6jl, 32
  %ln6jn = inttoptr i64 %ln6jm to i64*
  %ln6jo = load i64, i64* %ln6jn, !tbaa !4
  %ln6ji = load i64*, i64** %Sp_Var
  %ln6jp = getelementptr inbounds i64, i64* %ln6ji, i32 -3
  store i64 %ln6jo, i64* %ln6jp, !tbaa !2
  %ln6jq = load i64*, i64** %Sp_Var
  %ln6jr = getelementptr inbounds i64, i64* %ln6jq, i32 -5
  %ln6js = ptrtoint i64* %ln6jr to i64
  %ln6jt = inttoptr i64 %ln6js to i64*
  store i64* %ln6jt, i64** %Sp_Var
  %ln6ju = bitcast i8* @base_GHCziNum_zp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6jv = load i64*, i64** %Sp_Var
  %ln6jw = load i64, i64* %R1_Var
  %ln6jx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ju( i64* %Base_Arg, i64* %ln6jv, i64* %Hp_Arg, i64 %ln6jw, i64 %ln6jx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6hG:
  %ln6jy = load i64, i64* %R1_Var
  store i64 %ln6jy, i64* %R1_Var
  %ln6jz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6jA = bitcast i64* %ln6jz to i64*
  %ln6jB = load i64, i64* %ln6jA, !tbaa !5
  %ln6jC = inttoptr i64 %ln6jB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6jD = load i64*, i64** %Sp_Var
  %ln6jE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6jC( i64* %Base_Arg, i64* %ln6jD, i64* %Hp_Arg, i64 %ln6jE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdczp_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdczp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n6jF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6hM
c6hM:
  %ln6jG = load i64*, i64** %Sp_Var
  %ln6jH = getelementptr inbounds i64, i64* %ln6jG, i32 -5
  %ln6jI = ptrtoint i64* %ln6jH to i64
  %ln6jJ = icmp ult i64 %ln6jI, %SpLim_Arg
  %ln6jK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6jJ, i1 0 )
  br i1 %ln6jK, label %c6hN, label %c6hO
c6hO:
  %ln6jM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6hi_info$def to i64
  %ln6jL = load i64*, i64** %Sp_Var
  %ln6jN = getelementptr inbounds i64, i64* %ln6jL, i32 -3
  store i64 %ln6jM, i64* %ln6jN, !tbaa !2
  %ln6jO = load i64, i64* %R3_Var
  store i64 %ln6jO, i64* %R1_Var
  %ln6jQ = load i64, i64* %R2_Var
  %ln6jP = load i64*, i64** %Sp_Var
  %ln6jR = getelementptr inbounds i64, i64* %ln6jP, i32 -2
  store i64 %ln6jQ, i64* %ln6jR, !tbaa !2
  %ln6jT = load i64, i64* %R4_Var
  %ln6jS = load i64*, i64** %Sp_Var
  %ln6jU = getelementptr inbounds i64, i64* %ln6jS, i32 -1
  store i64 %ln6jT, i64* %ln6jU, !tbaa !2
  %ln6jV = load i64*, i64** %Sp_Var
  %ln6jW = getelementptr inbounds i64, i64* %ln6jV, i32 -3
  %ln6jX = ptrtoint i64* %ln6jW to i64
  %ln6jY = inttoptr i64 %ln6jX to i64*
  store i64* %ln6jY, i64** %Sp_Var
  %ln6jZ = load i64, i64* %R1_Var
  %ln6k0 = and i64 %ln6jZ, 7
  %ln6k1 = icmp ne i64 %ln6k0, 0
  br i1 %ln6k1, label %u6i3, label %c6hj
c6hj:
  %ln6k3 = load i64, i64* %R1_Var
  %ln6k4 = inttoptr i64 %ln6k3 to i64*
  %ln6k5 = load i64, i64* %ln6k4, !tbaa !4
  %ln6k6 = inttoptr i64 %ln6k5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6k7 = load i64*, i64** %Sp_Var
  %ln6k8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6k6( i64* %Base_Arg, i64* %ln6k7, i64* %Hp_Arg, i64 %ln6k8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6i3:
  %ln6k9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6hi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ka = load i64*, i64** %Sp_Var
  %ln6kb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6k9( i64* %Base_Arg, i64* %ln6ka, i64* %Hp_Arg, i64 %ln6kb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6hN:
  %ln6kc = load i64, i64* %R4_Var
  store i64 %ln6kc, i64* %R4_Var
  %ln6kd = load i64, i64* %R3_Var
  store i64 %ln6kd, i64* %R3_Var
  %ln6ke = load i64, i64* %R2_Var
  store i64 %ln6ke, i64* %R2_Var
  %ln6kf = ptrtoint %Main_zdfNumPszuzdczp_closure_struct* @Main_zdfNumPszuzdczp_closure$def to i64
  store i64 %ln6kf, i64* %R1_Var
  %ln6kg = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6kh = bitcast i64* %ln6kg to i64*
  %ln6ki = load i64, i64* %ln6kh, !tbaa !5
  %ln6kj = inttoptr i64 %ln6ki to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6kk = load i64*, i64** %Sp_Var
  %ln6kl = load i64, i64* %R1_Var
  %ln6km = load i64, i64* %R2_Var
  %ln6kn = load i64, i64* %R3_Var
  %ln6ko = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6kj( i64* %Base_Arg, i64* %ln6kk, i64* %Hp_Arg, i64 %ln6kl, i64 %ln6km, i64 %ln6kn, i64 %ln6ko, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6hi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6hi_info$def to i8*)
define internal ghccc void @c6hi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n6kp:
  %ls58h = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls58i = alloca i64, i32 1
  %ls58j = alloca i64, i32 1
  %ls58k = alloca i64, i32 1
  br label %c6hi
c6hi:
  %ln6kq = load i64*, i64** %Sp_Var
  %ln6kr = getelementptr inbounds i64, i64* %ln6kq, i32 2
  %ln6ks = bitcast i64* %ln6kr to i64*
  %ln6kt = load i64, i64* %ln6ks, !tbaa !2
  store i64 %ln6kt, i64* %ls58h
  %ln6ku = load i64, i64* %R1_Var
  %ln6kv = and i64 %ln6ku, 7
  switch i64 %ln6kv, label %c6hJ [i64 1, label %c6hJ
i64 2, label %c6hK]
c6hJ:
  %ln6kw = load i64, i64* %ls58h
  %ln6kx = and i64 %ln6kw, -8
  store i64 %ln6kx, i64* %R1_Var
  %ln6ky = load i64*, i64** %Sp_Var
  %ln6kz = getelementptr inbounds i64, i64* %ln6ky, i32 3
  %ln6kA = ptrtoint i64* %ln6kz to i64
  %ln6kB = inttoptr i64 %ln6kA to i64*
  store i64* %ln6kB, i64** %Sp_Var
  %ln6kD = load i64, i64* %R1_Var
  %ln6kE = inttoptr i64 %ln6kD to i64*
  %ln6kF = load i64, i64* %ln6kE, !tbaa !4
  %ln6kG = inttoptr i64 %ln6kF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6kH = load i64*, i64** %Sp_Var
  %ln6kI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6kG( i64* %Base_Arg, i64* %ln6kH, i64* %Hp_Arg, i64 %ln6kI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6hK:
  %ln6kK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ho_info$def to i64
  %ln6kJ = load i64*, i64** %Sp_Var
  %ln6kL = getelementptr inbounds i64, i64* %ln6kJ, i32 -2
  store i64 %ln6kK, i64* %ln6kL, !tbaa !2
  %ln6kM = load i64, i64* %R1_Var
  store i64 %ln6kM, i64* %ls58i
  %ln6kP = load i64, i64* %R1_Var
  %ln6kQ = add i64 %ln6kP, 6
  %ln6kR = inttoptr i64 %ln6kQ to i64*
  %ln6kS = load i64, i64* %ln6kR, !tbaa !4
  store i64 %ln6kS, i64* %ls58j
  %ln6kV = load i64, i64* %R1_Var
  %ln6kW = add i64 %ln6kV, 14
  %ln6kX = inttoptr i64 %ln6kW to i64*
  %ln6kY = load i64, i64* %ln6kX, !tbaa !4
  store i64 %ln6kY, i64* %ls58k
  %ln6kZ = load i64, i64* %ls58h
  store i64 %ln6kZ, i64* %R1_Var
  %ln6l1 = load i64, i64* %ls58k
  %ln6l0 = load i64*, i64** %Sp_Var
  %ln6l2 = getelementptr inbounds i64, i64* %ln6l0, i32 -1
  store i64 %ln6l1, i64* %ln6l2, !tbaa !2
  %ln6l4 = load i64, i64* %ls58j
  %ln6l3 = load i64*, i64** %Sp_Var
  %ln6l5 = getelementptr inbounds i64, i64* %ln6l3, i32 0
  store i64 %ln6l4, i64* %ln6l5, !tbaa !2
  %ln6l7 = load i64, i64* %ls58i
  %ln6l6 = load i64*, i64** %Sp_Var
  %ln6l8 = getelementptr inbounds i64, i64* %ln6l6, i32 2
  store i64 %ln6l7, i64* %ln6l8, !tbaa !2
  %ln6l9 = load i64*, i64** %Sp_Var
  %ln6la = getelementptr inbounds i64, i64* %ln6l9, i32 -2
  %ln6lb = ptrtoint i64* %ln6la to i64
  %ln6lc = inttoptr i64 %ln6lb to i64*
  store i64* %ln6lc, i64** %Sp_Var
  %ln6ld = load i64, i64* %R1_Var
  %ln6le = and i64 %ln6ld, 7
  %ln6lf = icmp ne i64 %ln6le, 0
  br i1 %ln6lf, label %u6i2, label %c6hp
c6hp:
  %ln6lh = load i64, i64* %R1_Var
  %ln6li = inttoptr i64 %ln6lh to i64*
  %ln6lj = load i64, i64* %ln6li, !tbaa !4
  %ln6lk = inttoptr i64 %ln6lj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ll = load i64*, i64** %Sp_Var
  %ln6lm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6lk( i64* %Base_Arg, i64* %ln6ll, i64* %Hp_Arg, i64 %ln6lm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6i2:
  %ln6ln = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ho_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6lo = load i64*, i64** %Sp_Var
  %ln6lp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ln( i64* %Base_Arg, i64* %ln6lo, i64* %Hp_Arg, i64 %ln6lp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6ho_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ho_info$def to i8*)
define internal ghccc void @c6ho_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
n6lq:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58m = alloca i64, i32 1
  %ls58n = alloca i64, i32 1
  %ls58f = alloca i64, i32 1
  br label %c6ho
c6ho:
  %ln6lr = load i64, i64* %R1_Var
  %ln6ls = and i64 %ln6lr, 7
  switch i64 %ln6ls, label %c6hV [i64 1, label %c6hV
i64 2, label %c6hX]
c6hV:
  %ln6lt = load i64*, i64** %Sp_Var
  %ln6lu = getelementptr inbounds i64, i64* %ln6lt, i32 4
  %ln6lv = bitcast i64* %ln6lu to i64*
  %ln6lw = load i64, i64* %ln6lv, !tbaa !2
  %ln6lx = and i64 %ln6lw, -8
  store i64 %ln6lx, i64* %R1_Var
  %ln6ly = load i64*, i64** %Sp_Var
  %ln6lz = getelementptr inbounds i64, i64* %ln6ly, i32 5
  %ln6lA = ptrtoint i64* %ln6lz to i64
  %ln6lB = inttoptr i64 %ln6lA to i64*
  store i64* %ln6lB, i64** %Sp_Var
  %ln6lD = load i64, i64* %R1_Var
  %ln6lE = inttoptr i64 %ln6lD to i64*
  %ln6lF = load i64, i64* %ln6lE, !tbaa !4
  %ln6lG = inttoptr i64 %ln6lF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6lH = load i64*, i64** %Sp_Var
  %ln6lI = load i64*, i64** %Hp_Var
  %ln6lJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6lG( i64* %Base_Arg, i64* %ln6lH, i64* %ln6lI, i64 %ln6lJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6hX:
  %ln6lK = load i64*, i64** %Hp_Var
  %ln6lL = getelementptr inbounds i64, i64* %ln6lK, i32 13
  %ln6lM = ptrtoint i64* %ln6lL to i64
  %ln6lN = inttoptr i64 %ln6lM to i64*
  store i64* %ln6lN, i64** %Hp_Var
  %ln6lO = load i64*, i64** %Hp_Var
  %ln6lP = ptrtoint i64* %ln6lO to i64
  %ln6lQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6lR = bitcast i64* %ln6lQ to i64*
  %ln6lS = load i64, i64* %ln6lR, !tbaa !5
  %ln6lT = icmp ugt i64 %ln6lP, %ln6lS
  %ln6lU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6lT, i1 0 )
  br i1 %ln6lU, label %c6i0, label %c6hZ
c6hZ:
  %ln6lX = load i64, i64* %R1_Var
  %ln6lY = add i64 %ln6lX, 6
  %ln6lZ = inttoptr i64 %ln6lY to i64*
  %ln6m0 = load i64, i64* %ln6lZ, !tbaa !4
  store i64 %ln6m0, i64* %ls58m
  %ln6m3 = load i64, i64* %R1_Var
  %ln6m4 = add i64 %ln6m3, 14
  %ln6m5 = inttoptr i64 %ln6m4 to i64*
  %ln6m6 = load i64, i64* %ln6m5, !tbaa !4
  store i64 %ln6m6, i64* %ls58n
  %ln6m8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58p_info$def to i64
  %ln6m7 = load i64*, i64** %Hp_Var
  %ln6m9 = getelementptr inbounds i64, i64* %ln6m7, i32 -12
  store i64 %ln6m8, i64* %ln6m9, !tbaa !3
  %ln6ma = load i64*, i64** %Sp_Var
  %ln6mb = getelementptr inbounds i64, i64* %ln6ma, i32 3
  %ln6mc = bitcast i64* %ln6mb to i64*
  %ln6md = load i64, i64* %ln6mc, !tbaa !2
  store i64 %ln6md, i64* %ls58f
  %ln6mf = load i64, i64* %ls58f
  %ln6me = load i64*, i64** %Hp_Var
  %ln6mg = getelementptr inbounds i64, i64* %ln6me, i32 -10
  store i64 %ln6mf, i64* %ln6mg, !tbaa !3
  %ln6mi = load i64*, i64** %Sp_Var
  %ln6mj = getelementptr inbounds i64, i64* %ln6mi, i32 1
  %ln6mk = bitcast i64* %ln6mj to i64*
  %ln6ml = load i64, i64* %ln6mk, !tbaa !2
  %ln6mh = load i64*, i64** %Hp_Var
  %ln6mm = getelementptr inbounds i64, i64* %ln6mh, i32 -9
  store i64 %ln6ml, i64* %ln6mm, !tbaa !3
  %ln6mo = load i64, i64* %ls58n
  %ln6mn = load i64*, i64** %Hp_Var
  %ln6mp = getelementptr inbounds i64, i64* %ln6mn, i32 -8
  store i64 %ln6mo, i64* %ln6mp, !tbaa !3
  %ln6mr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58o_info$def to i64
  %ln6mq = load i64*, i64** %Hp_Var
  %ln6ms = getelementptr inbounds i64, i64* %ln6mq, i32 -7
  store i64 %ln6mr, i64* %ln6ms, !tbaa !3
  %ln6mu = load i64, i64* %ls58f
  %ln6mt = load i64*, i64** %Hp_Var
  %ln6mv = getelementptr inbounds i64, i64* %ln6mt, i32 -5
  store i64 %ln6mu, i64* %ln6mv, !tbaa !3
  %ln6mx = load i64*, i64** %Sp_Var
  %ln6my = getelementptr inbounds i64, i64* %ln6mx, i32 2
  %ln6mz = bitcast i64* %ln6my to i64*
  %ln6mA = load i64, i64* %ln6mz, !tbaa !2
  %ln6mw = load i64*, i64** %Hp_Var
  %ln6mB = getelementptr inbounds i64, i64* %ln6mw, i32 -4
  store i64 %ln6mA, i64* %ln6mB, !tbaa !3
  %ln6mD = load i64, i64* %ls58m
  %ln6mC = load i64*, i64** %Hp_Var
  %ln6mE = getelementptr inbounds i64, i64* %ln6mC, i32 -3
  store i64 %ln6mD, i64* %ln6mE, !tbaa !3
  %ln6mG = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6mF = load i64*, i64** %Hp_Var
  %ln6mH = getelementptr inbounds i64, i64* %ln6mF, i32 -2
  store i64 %ln6mG, i64* %ln6mH, !tbaa !3
  %ln6mJ = load i64*, i64** %Hp_Var
  %ln6mK = getelementptr inbounds i64, i64* %ln6mJ, i32 -7
  %ln6mL = ptrtoint i64* %ln6mK to i64
  %ln6mI = load i64*, i64** %Hp_Var
  %ln6mM = getelementptr inbounds i64, i64* %ln6mI, i32 -1
  store i64 %ln6mL, i64* %ln6mM, !tbaa !3
  %ln6mO = load i64*, i64** %Hp_Var
  %ln6mP = getelementptr inbounds i64, i64* %ln6mO, i32 -12
  %ln6mQ = ptrtoint i64* %ln6mP to i64
  %ln6mN = load i64*, i64** %Hp_Var
  %ln6mR = getelementptr inbounds i64, i64* %ln6mN, i32 0
  store i64 %ln6mQ, i64* %ln6mR, !tbaa !3
  %ln6mT = load i64*, i64** %Hp_Var
  %ln6mU = ptrtoint i64* %ln6mT to i64
  %ln6mV = add i64 %ln6mU, -14
  store i64 %ln6mV, i64* %R1_Var
  %ln6mW = load i64*, i64** %Sp_Var
  %ln6mX = getelementptr inbounds i64, i64* %ln6mW, i32 5
  %ln6mY = ptrtoint i64* %ln6mX to i64
  %ln6mZ = inttoptr i64 %ln6mY to i64*
  store i64* %ln6mZ, i64** %Sp_Var
  %ln6n0 = load i64*, i64** %Sp_Var
  %ln6n1 = getelementptr inbounds i64, i64* %ln6n0, i32 0
  %ln6n2 = bitcast i64* %ln6n1 to i64*
  %ln6n3 = load i64, i64* %ln6n2, !tbaa !2
  %ln6n4 = inttoptr i64 %ln6n3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6n5 = load i64*, i64** %Sp_Var
  %ln6n6 = load i64*, i64** %Hp_Var
  %ln6n7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6n4( i64* %Base_Arg, i64* %ln6n5, i64* %ln6n6, i64 %ln6n7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6i0:
  %ln6n8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %ln6n8, !tbaa !5
  %ln6n9 = load i64, i64* %R1_Var
  store i64 %ln6n9, i64* %R1_Var
  %ln6na = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6nb = load i64*, i64** %Sp_Var
  %ln6nc = load i64*, i64** %Hp_Var
  %ln6nd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6na( i64* %Base_Arg, i64* %ln6nb, i64* %ln6nc, i64 %ln6nd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdczm_closure_struct = type <{i64}>
@Main_zdfNumPszuzdczm_closure$def = internal global %Main_zdfNumPszuzdczm_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczm_info$def to i64)}>
@Main_zdfNumPszuzdczm_closure = alias i8, bitcast (%Main_zdfNumPszuzdczm_closure_struct* @Main_zdfNumPszuzdczm_closure$def to i8*)
@Main_zdfNumPszuzdczm_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczm_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdczm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n6nq:
  %ls58I = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls58H = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6nk
c6nk:
  %ln6nr = load i64*, i64** %Sp_Var
  %ln6ns = getelementptr inbounds i64, i64* %ln6nr, i32 -3
  %ln6nt = ptrtoint i64* %ln6ns to i64
  %ln6nu = icmp ult i64 %ln6nt, %SpLim_Arg
  %ln6nv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6nu, i1 0 )
  br i1 %ln6nv, label %c6nl, label %c6nm
c6nm:
  %ln6nx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ni_info$def to i64
  %ln6nw = load i64*, i64** %Sp_Var
  %ln6ny = getelementptr inbounds i64, i64* %ln6nw, i32 -3
  store i64 %ln6nx, i64* %ln6ny, !tbaa !2
  %ln6nz = load i64, i64* %R3_Var
  store i64 %ln6nz, i64* %ls58I
  %ln6nA = load i64, i64* %R4_Var
  store i64 %ln6nA, i64* %R3_Var
  %ln6nB = load i64, i64* %R2_Var
  store i64 %ln6nB, i64* %ls58H
  %ln6nC = load i64, i64* %R2_Var
  store i64 %ln6nC, i64* %R2_Var
  %ln6nE = load i64, i64* %ls58H
  %ln6nD = load i64*, i64** %Sp_Var
  %ln6nF = getelementptr inbounds i64, i64* %ln6nD, i32 -2
  store i64 %ln6nE, i64* %ln6nF, !tbaa !2
  %ln6nH = load i64, i64* %ls58I
  %ln6nG = load i64*, i64** %Sp_Var
  %ln6nI = getelementptr inbounds i64, i64* %ln6nG, i32 -1
  store i64 %ln6nH, i64* %ln6nI, !tbaa !2
  %ln6nJ = load i64*, i64** %Sp_Var
  %ln6nK = getelementptr inbounds i64, i64* %ln6nJ, i32 -3
  %ln6nL = ptrtoint i64* %ln6nK to i64
  %ln6nM = inttoptr i64 %ln6nL to i64*
  store i64* %ln6nM, i64** %Sp_Var
  %ln6nN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6nO = load i64*, i64** %Sp_Var
  %ln6nP = load i64, i64* %R1_Var
  %ln6nQ = load i64, i64* %R2_Var
  %ln6nR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6nN( i64* %Base_Arg, i64* %ln6nO, i64* %Hp_Arg, i64 %ln6nP, i64 %ln6nQ, i64 %ln6nR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6nl:
  %ln6nS = load i64, i64* %R4_Var
  store i64 %ln6nS, i64* %R4_Var
  %ln6nT = load i64, i64* %R3_Var
  store i64 %ln6nT, i64* %R3_Var
  %ln6nU = load i64, i64* %R2_Var
  store i64 %ln6nU, i64* %R2_Var
  %ln6nV = ptrtoint %Main_zdfNumPszuzdczm_closure_struct* @Main_zdfNumPszuzdczm_closure$def to i64
  store i64 %ln6nV, i64* %R1_Var
  %ln6nW = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6nX = bitcast i64* %ln6nW to i64*
  %ln6nY = load i64, i64* %ln6nX, !tbaa !5
  %ln6nZ = inttoptr i64 %ln6nY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6o0 = load i64*, i64** %Sp_Var
  %ln6o1 = load i64, i64* %R1_Var
  %ln6o2 = load i64, i64* %R2_Var
  %ln6o3 = load i64, i64* %R3_Var
  %ln6o4 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6nZ( i64* %Base_Arg, i64* %ln6o0, i64* %Hp_Arg, i64 %ln6o1, i64 %ln6o2, i64 %ln6o3, i64 %ln6o4, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6ni_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ni_info$def to i8*)
define internal ghccc void @c6ni_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n6o5:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6ni
c6ni:
  store i64 %R1_Arg, i64* %R4_Var
  %ln6o6 = load i64*, i64** %Sp_Var
  %ln6o7 = getelementptr inbounds i64, i64* %ln6o6, i32 2
  %ln6o8 = bitcast i64* %ln6o7 to i64*
  %ln6o9 = load i64, i64* %ln6o8, !tbaa !2
  store i64 %ln6o9, i64* %R3_Var
  %ln6oa = load i64*, i64** %Sp_Var
  %ln6ob = getelementptr inbounds i64, i64* %ln6oa, i32 1
  %ln6oc = bitcast i64* %ln6ob to i64*
  %ln6od = load i64, i64* %ln6oc, !tbaa !2
  store i64 %ln6od, i64* %R2_Var
  %ln6oe = load i64*, i64** %Sp_Var
  %ln6of = getelementptr inbounds i64, i64* %ln6oe, i32 3
  %ln6og = ptrtoint i64* %ln6of to i64
  %ln6oh = inttoptr i64 %ln6og to i64*
  store i64* %ln6oh, i64** %Sp_Var
  %ln6oi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6oj = load i64*, i64** %Sp_Var
  %ln6ok = load i64, i64* %R2_Var
  %ln6ol = load i64, i64* %R3_Var
  %ln6om = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6oi( i64* %Base_Arg, i64* %ln6oj, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6ok, i64 %ln6ol, i64 %ln6om, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdszdczp_closure_struct = type <{i64, i64}>
@Main_zdfNumPszuzdszdczp_closure$def = internal global %Main_zdfNumPszuzdszdczp_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to i64), i64 0}>
@Main_zdfNumPszuzdszdczp_closure = alias i8, bitcast (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i8*)
@s58e_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58e_info$def to i8*)
define internal ghccc void @s58e_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58e_info$def to i64)) to i32),i32 0)}>
{
n6pd:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6oH
c6oH:
  %ln6pe = load i64*, i64** %Sp_Var
  %ln6pf = getelementptr inbounds i64, i64* %ln6pe, i32 -2
  %ln6pg = ptrtoint i64* %ln6pf to i64
  %ln6ph = icmp ult i64 %ln6pg, %SpLim_Arg
  %ln6pi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6ph, i1 0 )
  br i1 %ln6pi, label %c6oI, label %c6oJ
c6oJ:
  %ln6pk = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6pj = load i64*, i64** %Sp_Var
  %ln6pl = getelementptr inbounds i64, i64* %ln6pj, i32 -2
  store i64 %ln6pk, i64* %ln6pl, !tbaa !2
  %ln6pn = load i64, i64* %R1_Var
  %ln6pm = load i64*, i64** %Sp_Var
  %ln6po = getelementptr inbounds i64, i64* %ln6pm, i32 -1
  store i64 %ln6pn, i64* %ln6po, !tbaa !2
  %ln6pr = load i64, i64* %R1_Var
  %ln6ps = add i64 %ln6pr, 24
  %ln6pt = inttoptr i64 %ln6ps to i64*
  %ln6pu = load i64, i64* %ln6pt, !tbaa !4
  store i64 %ln6pu, i64* %R3_Var
  %ln6px = load i64, i64* %R1_Var
  %ln6py = add i64 %ln6px, 16
  %ln6pz = inttoptr i64 %ln6py to i64*
  %ln6pA = load i64, i64* %ln6pz, !tbaa !4
  store i64 %ln6pA, i64* %R2_Var
  %ln6pB = load i64*, i64** %Sp_Var
  %ln6pC = getelementptr inbounds i64, i64* %ln6pB, i32 -2
  %ln6pD = ptrtoint i64* %ln6pC to i64
  %ln6pE = inttoptr i64 %ln6pD to i64*
  store i64* %ln6pE, i64** %Sp_Var
  %ln6pF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6pG = load i64*, i64** %Sp_Var
  %ln6pH = load i64, i64* %R1_Var
  %ln6pI = load i64, i64* %R2_Var
  %ln6pJ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6pF( i64* %Base_Arg, i64* %ln6pG, i64* %Hp_Arg, i64 %ln6pH, i64 %ln6pI, i64 %ln6pJ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6oI:
  %ln6pK = load i64, i64* %R1_Var
  store i64 %ln6pK, i64* %R1_Var
  %ln6pL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6pM = bitcast i64* %ln6pL to i64*
  %ln6pN = load i64, i64* %ln6pM, !tbaa !5
  %ln6pO = inttoptr i64 %ln6pN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6pP = load i64*, i64** %Sp_Var
  %ln6pQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6pO( i64* %Base_Arg, i64* %ln6pP, i64* %Hp_Arg, i64 %ln6pQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s58d_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58d_info$def to i8*)
define internal ghccc void @s58d_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfEnumRatiozuzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58d_info$def to i64)) to i32),i32 0)}>
{
n6pR:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6oO
c6oO:
  %ln6pS = load i64*, i64** %Sp_Var
  %ln6pT = getelementptr inbounds i64, i64* %ln6pS, i32 -2
  %ln6pU = ptrtoint i64* %ln6pT to i64
  %ln6pV = icmp ult i64 %ln6pU, %SpLim_Arg
  %ln6pW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6pV, i1 0 )
  br i1 %ln6pW, label %c6oP, label %c6oQ
c6oQ:
  %ln6pY = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6pX = load i64*, i64** %Sp_Var
  %ln6pZ = getelementptr inbounds i64, i64* %ln6pX, i32 -2
  store i64 %ln6pY, i64* %ln6pZ, !tbaa !2
  %ln6q1 = load i64, i64* %R1_Var
  %ln6q0 = load i64*, i64** %Sp_Var
  %ln6q2 = getelementptr inbounds i64, i64* %ln6q0, i32 -1
  store i64 %ln6q1, i64* %ln6q2, !tbaa !2
  %ln6q5 = load i64, i64* %R1_Var
  %ln6q6 = add i64 %ln6q5, 24
  %ln6q7 = inttoptr i64 %ln6q6 to i64*
  %ln6q8 = load i64, i64* %ln6q7, !tbaa !4
  store i64 %ln6q8, i64* %R3_Var
  %ln6qb = load i64, i64* %R1_Var
  %ln6qc = add i64 %ln6qb, 16
  %ln6qd = inttoptr i64 %ln6qc to i64*
  %ln6qe = load i64, i64* %ln6qd, !tbaa !4
  store i64 %ln6qe, i64* %R2_Var
  %ln6qf = load i64*, i64** %Sp_Var
  %ln6qg = getelementptr inbounds i64, i64* %ln6qf, i32 -2
  %ln6qh = ptrtoint i64* %ln6qg to i64
  %ln6qi = inttoptr i64 %ln6qh to i64*
  store i64* %ln6qi, i64** %Sp_Var
  %ln6qj = bitcast i8* @base_GHCziReal_zdfEnumRatiozuzdszdczp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6qk = load i64*, i64** %Sp_Var
  %ln6ql = load i64, i64* %R1_Var
  %ln6qm = load i64, i64* %R2_Var
  %ln6qn = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6qj( i64* %Base_Arg, i64* %ln6qk, i64* %Hp_Arg, i64 %ln6ql, i64 %ln6qm, i64 %ln6qn, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6oP:
  %ln6qo = load i64, i64* %R1_Var
  store i64 %ln6qo, i64* %R1_Var
  %ln6qp = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6qq = bitcast i64* %ln6qp to i64*
  %ln6qr = load i64, i64* %ln6qq, !tbaa !5
  %ln6qs = inttoptr i64 %ln6qr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6qt = load i64*, i64** %Sp_Var
  %ln6qu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6qs( i64* %Base_Arg, i64* %ln6qt, i64* %Hp_Arg, i64 %ln6qu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdszdczp_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdszdczp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfEnumRatiozuzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to i64)) to i32),i32 0)}>
{
n6qv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6oV
c6oV:
  %ln6qw = load i64*, i64** %Sp_Var
  %ln6qx = getelementptr inbounds i64, i64* %ln6qw, i32 -4
  %ln6qy = ptrtoint i64* %ln6qx to i64
  %ln6qz = icmp ult i64 %ln6qy, %SpLim_Arg
  %ln6qA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6qz, i1 0 )
  br i1 %ln6qA, label %c6oW, label %c6oX
c6oX:
  %ln6qC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6or_info$def to i64
  %ln6qB = load i64*, i64** %Sp_Var
  %ln6qD = getelementptr inbounds i64, i64* %ln6qB, i32 -2
  store i64 %ln6qC, i64* %ln6qD, !tbaa !2
  %ln6qE = load i64, i64* %R2_Var
  store i64 %ln6qE, i64* %R1_Var
  %ln6qG = load i64, i64* %R3_Var
  %ln6qF = load i64*, i64** %Sp_Var
  %ln6qH = getelementptr inbounds i64, i64* %ln6qF, i32 -1
  store i64 %ln6qG, i64* %ln6qH, !tbaa !2
  %ln6qI = load i64*, i64** %Sp_Var
  %ln6qJ = getelementptr inbounds i64, i64* %ln6qI, i32 -2
  %ln6qK = ptrtoint i64* %ln6qJ to i64
  %ln6qL = inttoptr i64 %ln6qK to i64*
  store i64* %ln6qL, i64** %Sp_Var
  %ln6qM = load i64, i64* %R1_Var
  %ln6qN = and i64 %ln6qM, 7
  %ln6qO = icmp ne i64 %ln6qN, 0
  br i1 %ln6qO, label %u6pc, label %c6os
c6os:
  %ln6qQ = load i64, i64* %R1_Var
  %ln6qR = inttoptr i64 %ln6qQ to i64*
  %ln6qS = load i64, i64* %ln6qR, !tbaa !4
  %ln6qT = inttoptr i64 %ln6qS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6qU = load i64*, i64** %Sp_Var
  %ln6qV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6qT( i64* %Base_Arg, i64* %ln6qU, i64* %Hp_Arg, i64 %ln6qV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6pc:
  %ln6qW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6or_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6qX = load i64*, i64** %Sp_Var
  %ln6qY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6qW( i64* %Base_Arg, i64* %ln6qX, i64* %Hp_Arg, i64 %ln6qY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6oW:
  %ln6qZ = load i64, i64* %R3_Var
  store i64 %ln6qZ, i64* %R3_Var
  %ln6r0 = load i64, i64* %R2_Var
  store i64 %ln6r0, i64* %R2_Var
  %ln6r1 = ptrtoint %Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64
  store i64 %ln6r1, i64* %R1_Var
  %ln6r2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6r3 = bitcast i64* %ln6r2 to i64*
  %ln6r4 = load i64, i64* %ln6r3, !tbaa !5
  %ln6r5 = inttoptr i64 %ln6r4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6r6 = load i64*, i64** %Sp_Var
  %ln6r7 = load i64, i64* %R1_Var
  %ln6r8 = load i64, i64* %R2_Var
  %ln6r9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6r5( i64* %Base_Arg, i64* %ln6r6, i64* %Hp_Arg, i64 %ln6r7, i64 %ln6r8, i64 %ln6r9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6or_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6or_info$def to i8*)
define internal ghccc void @c6or_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6or_info$def to i64)) to i32),i32 0)}>
{
n6ra:
  %ls586 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls587 = alloca i64, i32 1
  %ls588 = alloca i64, i32 1
  %ls589 = alloca i64, i32 1
  br label %c6or
c6or:
  %ln6rb = load i64*, i64** %Sp_Var
  %ln6rc = getelementptr inbounds i64, i64* %ln6rb, i32 1
  %ln6rd = bitcast i64* %ln6rc to i64*
  %ln6re = load i64, i64* %ln6rd, !tbaa !2
  store i64 %ln6re, i64* %ls586
  %ln6rf = load i64, i64* %R1_Var
  %ln6rg = and i64 %ln6rf, 7
  switch i64 %ln6rg, label %c6oS [i64 1, label %c6oS
i64 2, label %c6oT]
c6oS:
  %ln6rh = load i64, i64* %ls586
  %ln6ri = and i64 %ln6rh, -8
  store i64 %ln6ri, i64* %R1_Var
  %ln6rj = load i64*, i64** %Sp_Var
  %ln6rk = getelementptr inbounds i64, i64* %ln6rj, i32 2
  %ln6rl = ptrtoint i64* %ln6rk to i64
  %ln6rm = inttoptr i64 %ln6rl to i64*
  store i64* %ln6rm, i64** %Sp_Var
  %ln6ro = load i64, i64* %R1_Var
  %ln6rp = inttoptr i64 %ln6ro to i64*
  %ln6rq = load i64, i64* %ln6rp, !tbaa !4
  %ln6rr = inttoptr i64 %ln6rq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6rs = load i64*, i64** %Sp_Var
  %ln6rt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6rr( i64* %Base_Arg, i64* %ln6rs, i64* %Hp_Arg, i64 %ln6rt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6oT:
  %ln6rv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ox_info$def to i64
  %ln6ru = load i64*, i64** %Sp_Var
  %ln6rw = getelementptr inbounds i64, i64* %ln6ru, i32 -2
  store i64 %ln6rv, i64* %ln6rw, !tbaa !2
  %ln6rx = load i64, i64* %R1_Var
  store i64 %ln6rx, i64* %ls587
  %ln6rA = load i64, i64* %R1_Var
  %ln6rB = add i64 %ln6rA, 6
  %ln6rC = inttoptr i64 %ln6rB to i64*
  %ln6rD = load i64, i64* %ln6rC, !tbaa !4
  store i64 %ln6rD, i64* %ls588
  %ln6rG = load i64, i64* %R1_Var
  %ln6rH = add i64 %ln6rG, 14
  %ln6rI = inttoptr i64 %ln6rH to i64*
  %ln6rJ = load i64, i64* %ln6rI, !tbaa !4
  store i64 %ln6rJ, i64* %ls589
  %ln6rK = load i64, i64* %ls586
  store i64 %ln6rK, i64* %R1_Var
  %ln6rM = load i64, i64* %ls589
  %ln6rL = load i64*, i64** %Sp_Var
  %ln6rN = getelementptr inbounds i64, i64* %ln6rL, i32 -1
  store i64 %ln6rM, i64* %ln6rN, !tbaa !2
  %ln6rP = load i64, i64* %ls588
  %ln6rO = load i64*, i64** %Sp_Var
  %ln6rQ = getelementptr inbounds i64, i64* %ln6rO, i32 0
  store i64 %ln6rP, i64* %ln6rQ, !tbaa !2
  %ln6rS = load i64, i64* %ls587
  %ln6rR = load i64*, i64** %Sp_Var
  %ln6rT = getelementptr inbounds i64, i64* %ln6rR, i32 1
  store i64 %ln6rS, i64* %ln6rT, !tbaa !2
  %ln6rU = load i64*, i64** %Sp_Var
  %ln6rV = getelementptr inbounds i64, i64* %ln6rU, i32 -2
  %ln6rW = ptrtoint i64* %ln6rV to i64
  %ln6rX = inttoptr i64 %ln6rW to i64*
  store i64* %ln6rX, i64** %Sp_Var
  %ln6rY = load i64, i64* %R1_Var
  %ln6rZ = and i64 %ln6rY, 7
  %ln6s0 = icmp ne i64 %ln6rZ, 0
  br i1 %ln6s0, label %u6pb, label %c6oy
c6oy:
  %ln6s2 = load i64, i64* %R1_Var
  %ln6s3 = inttoptr i64 %ln6s2 to i64*
  %ln6s4 = load i64, i64* %ln6s3, !tbaa !4
  %ln6s5 = inttoptr i64 %ln6s4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6s6 = load i64*, i64** %Sp_Var
  %ln6s7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6s5( i64* %Base_Arg, i64* %ln6s6, i64* %Hp_Arg, i64 %ln6s7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6pb:
  %ln6s8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ox_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6s9 = load i64*, i64** %Sp_Var
  %ln6sa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6s8( i64* %Base_Arg, i64* %ln6s9, i64* %Hp_Arg, i64 %ln6sa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6ox_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ox_info$def to i8*)
define internal ghccc void @c6ox_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ox_info$def to i64)) to i32),i32 0)}>
{
n6sb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls58b = alloca i64, i32 1
  %ls58c = alloca i64, i32 1
  br label %c6ox
c6ox:
  %ln6sc = load i64, i64* %R1_Var
  %ln6sd = and i64 %ln6sc, 7
  switch i64 %ln6sd, label %c6p4 [i64 1, label %c6p4
i64 2, label %c6p6]
c6p4:
  %ln6se = load i64*, i64** %Sp_Var
  %ln6sf = getelementptr inbounds i64, i64* %ln6se, i32 3
  %ln6sg = bitcast i64* %ln6sf to i64*
  %ln6sh = load i64, i64* %ln6sg, !tbaa !2
  %ln6si = and i64 %ln6sh, -8
  store i64 %ln6si, i64* %R1_Var
  %ln6sj = load i64*, i64** %Sp_Var
  %ln6sk = getelementptr inbounds i64, i64* %ln6sj, i32 4
  %ln6sl = ptrtoint i64* %ln6sk to i64
  %ln6sm = inttoptr i64 %ln6sl to i64*
  store i64* %ln6sm, i64** %Sp_Var
  %ln6so = load i64, i64* %R1_Var
  %ln6sp = inttoptr i64 %ln6so to i64*
  %ln6sq = load i64, i64* %ln6sp, !tbaa !4
  %ln6sr = inttoptr i64 %ln6sq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ss = load i64*, i64** %Sp_Var
  %ln6st = load i64*, i64** %Hp_Var
  %ln6su = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6sr( i64* %Base_Arg, i64* %ln6ss, i64* %ln6st, i64 %ln6su, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6p6:
  %ln6sv = load i64*, i64** %Hp_Var
  %ln6sw = getelementptr inbounds i64, i64* %ln6sv, i32 11
  %ln6sx = ptrtoint i64* %ln6sw to i64
  %ln6sy = inttoptr i64 %ln6sx to i64*
  store i64* %ln6sy, i64** %Hp_Var
  %ln6sz = load i64*, i64** %Hp_Var
  %ln6sA = ptrtoint i64* %ln6sz to i64
  %ln6sB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6sC = bitcast i64* %ln6sB to i64*
  %ln6sD = load i64, i64* %ln6sC, !tbaa !5
  %ln6sE = icmp ugt i64 %ln6sA, %ln6sD
  %ln6sF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6sE, i1 0 )
  br i1 %ln6sF, label %c6p9, label %c6p8
c6p8:
  %ln6sI = load i64, i64* %R1_Var
  %ln6sJ = add i64 %ln6sI, 6
  %ln6sK = inttoptr i64 %ln6sJ to i64*
  %ln6sL = load i64, i64* %ln6sK, !tbaa !4
  store i64 %ln6sL, i64* %ls58b
  %ln6sO = load i64, i64* %R1_Var
  %ln6sP = add i64 %ln6sO, 14
  %ln6sQ = inttoptr i64 %ln6sP to i64*
  %ln6sR = load i64, i64* %ln6sQ, !tbaa !4
  store i64 %ln6sR, i64* %ls58c
  %ln6sT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58e_info$def to i64
  %ln6sS = load i64*, i64** %Hp_Var
  %ln6sU = getelementptr inbounds i64, i64* %ln6sS, i32 -10
  store i64 %ln6sT, i64* %ln6sU, !tbaa !3
  %ln6sW = load i64*, i64** %Sp_Var
  %ln6sX = getelementptr inbounds i64, i64* %ln6sW, i32 1
  %ln6sY = bitcast i64* %ln6sX to i64*
  %ln6sZ = load i64, i64* %ln6sY, !tbaa !2
  %ln6sV = load i64*, i64** %Hp_Var
  %ln6t0 = getelementptr inbounds i64, i64* %ln6sV, i32 -8
  store i64 %ln6sZ, i64* %ln6t0, !tbaa !3
  %ln6t2 = load i64, i64* %ls58c
  %ln6t1 = load i64*, i64** %Hp_Var
  %ln6t3 = getelementptr inbounds i64, i64* %ln6t1, i32 -7
  store i64 %ln6t2, i64* %ln6t3, !tbaa !3
  %ln6t5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s58d_info$def to i64
  %ln6t4 = load i64*, i64** %Hp_Var
  %ln6t6 = getelementptr inbounds i64, i64* %ln6t4, i32 -6
  store i64 %ln6t5, i64* %ln6t6, !tbaa !3
  %ln6t8 = load i64*, i64** %Sp_Var
  %ln6t9 = getelementptr inbounds i64, i64* %ln6t8, i32 2
  %ln6ta = bitcast i64* %ln6t9 to i64*
  %ln6tb = load i64, i64* %ln6ta, !tbaa !2
  %ln6t7 = load i64*, i64** %Hp_Var
  %ln6tc = getelementptr inbounds i64, i64* %ln6t7, i32 -4
  store i64 %ln6tb, i64* %ln6tc, !tbaa !3
  %ln6te = load i64, i64* %ls58b
  %ln6td = load i64*, i64** %Hp_Var
  %ln6tf = getelementptr inbounds i64, i64* %ln6td, i32 -3
  store i64 %ln6te, i64* %ln6tf, !tbaa !3
  %ln6th = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6tg = load i64*, i64** %Hp_Var
  %ln6ti = getelementptr inbounds i64, i64* %ln6tg, i32 -2
  store i64 %ln6th, i64* %ln6ti, !tbaa !3
  %ln6tk = load i64*, i64** %Hp_Var
  %ln6tl = getelementptr inbounds i64, i64* %ln6tk, i32 -6
  %ln6tm = ptrtoint i64* %ln6tl to i64
  %ln6tj = load i64*, i64** %Hp_Var
  %ln6tn = getelementptr inbounds i64, i64* %ln6tj, i32 -1
  store i64 %ln6tm, i64* %ln6tn, !tbaa !3
  %ln6tp = load i64*, i64** %Hp_Var
  %ln6tq = getelementptr inbounds i64, i64* %ln6tp, i32 -10
  %ln6tr = ptrtoint i64* %ln6tq to i64
  %ln6to = load i64*, i64** %Hp_Var
  %ln6ts = getelementptr inbounds i64, i64* %ln6to, i32 0
  store i64 %ln6tr, i64* %ln6ts, !tbaa !3
  %ln6tu = load i64*, i64** %Hp_Var
  %ln6tv = ptrtoint i64* %ln6tu to i64
  %ln6tw = add i64 %ln6tv, -14
  store i64 %ln6tw, i64* %R1_Var
  %ln6tx = load i64*, i64** %Sp_Var
  %ln6ty = getelementptr inbounds i64, i64* %ln6tx, i32 4
  %ln6tz = ptrtoint i64* %ln6ty to i64
  %ln6tA = inttoptr i64 %ln6tz to i64*
  store i64* %ln6tA, i64** %Sp_Var
  %ln6tB = load i64*, i64** %Sp_Var
  %ln6tC = getelementptr inbounds i64, i64* %ln6tB, i32 0
  %ln6tD = bitcast i64* %ln6tC to i64*
  %ln6tE = load i64, i64* %ln6tD, !tbaa !2
  %ln6tF = inttoptr i64 %ln6tE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6tG = load i64*, i64** %Sp_Var
  %ln6tH = load i64*, i64** %Hp_Var
  %ln6tI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6tF( i64* %Base_Arg, i64* %ln6tG, i64* %ln6tH, i64 %ln6tI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6p9:
  %ln6tJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln6tJ, !tbaa !5
  %ln6tK = load i64, i64* %R1_Var
  store i64 %ln6tK, i64* %R1_Var
  %ln6tL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6tM = load i64*, i64** %Sp_Var
  %ln6tN = load i64*, i64** %Hp_Var
  %ln6tO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6tL( i64* %Base_Arg, i64* %ln6tM, i64* %ln6tN, i64 %ln6tO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPs3_bytes_struct = type <{[21 x i8]}>
@Main_zdfNumPs3_bytes$def = internal constant %Main_zdfNumPs3_bytes_struct<{[21 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 56, i8 48, i8 58, i8 49, i8 48, i8 45, i8 50, i8 56, i8 124, i8 97, i8 98, i8 115, i8 0]}>, align 1
@Main_zdfNumPs3_bytes = alias i8, bitcast (%Main_zdfNumPs3_bytes_struct* @Main_zdfNumPs3_bytes$def to i8*)
%r55f_closure_struct = type <{i64, i64, i64, i64}>
@r55f_closure$def = internal global %r55f_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55f_info$def to i64), i64 0, i64 0, i64 0}>
@r55f_closure = internal alias i8, bitcast (%r55f_closure_struct* @r55f_closure$def to i8*)
@r55f_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55f_info$def to i8*)
define internal ghccc void @r55f_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55f_info$def to i64)) to i32),i32 0)}>
{
n6tY:
  %lc6tS = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6tV
c6tV:
  %ln6tZ = load i64*, i64** %Sp_Var
  %ln6u0 = getelementptr inbounds i64, i64* %ln6tZ, i32 -2
  %ln6u1 = ptrtoint i64* %ln6u0 to i64
  %ln6u2 = icmp ult i64 %ln6u1, %SpLim_Arg
  %ln6u3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6u2, i1 0 )
  br i1 %ln6u3, label %c6tW, label %c6tX
c6tX:
  %ln6u4 = ptrtoint i64* %Base_Arg to i64
  %ln6u5 = inttoptr i64 %ln6u4 to i8*
  %ln6u6 = load i64, i64* %R1_Var
  %ln6u7 = inttoptr i64 %ln6u6 to i8*
  %ln6u8 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln6u9 = call ccc i8* (i8*, i8*) %ln6u8( i8* %ln6u5, i8* %ln6u7 ) nounwind
  %ln6ua = ptrtoint i8* %ln6u9 to i64
  store i64 %ln6ua, i64* %lc6tS
  %ln6ub = load i64, i64* %lc6tS
  %ln6uc = icmp eq i64 %ln6ub, 0
  br i1 %ln6uc, label %c6tU, label %c6tT
c6tT:
  %ln6ue = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln6ud = load i64*, i64** %Sp_Var
  %ln6uf = getelementptr inbounds i64, i64* %ln6ud, i32 -2
  store i64 %ln6ue, i64* %ln6uf, !tbaa !2
  %ln6uh = load i64, i64* %lc6tS
  %ln6ug = load i64*, i64** %Sp_Var
  %ln6ui = getelementptr inbounds i64, i64* %ln6ug, i32 -1
  store i64 %ln6uh, i64* %ln6ui, !tbaa !2
  %ln6uj = ptrtoint %Main_zdfNumPs3_bytes_struct* @Main_zdfNumPs3_bytes$def to i64
  store i64 %ln6uj, i64* %R2_Var
  %ln6uk = load i64*, i64** %Sp_Var
  %ln6ul = getelementptr inbounds i64, i64* %ln6uk, i32 -2
  %ln6um = ptrtoint i64* %ln6ul to i64
  %ln6un = inttoptr i64 %ln6um to i64*
  store i64* %ln6un, i64** %Sp_Var
  %ln6uo = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6up = load i64*, i64** %Sp_Var
  %ln6uq = load i64, i64* %R1_Var
  %ln6ur = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6uo( i64* %Base_Arg, i64* %ln6up, i64* %Hp_Arg, i64 %ln6uq, i64 %ln6ur, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6tU:
  %ln6ut = load i64, i64* %R1_Var
  %ln6uu = inttoptr i64 %ln6ut to i64*
  %ln6uv = load i64, i64* %ln6uu, !tbaa !4
  %ln6uw = inttoptr i64 %ln6uv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ux = load i64*, i64** %Sp_Var
  %ln6uy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6uw( i64* %Base_Arg, i64* %ln6ux, i64* %Hp_Arg, i64 %ln6uy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6tW:
  %ln6uz = load i64, i64* %R1_Var
  store i64 %ln6uz, i64* %R1_Var
  %ln6uA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6uB = bitcast i64* %ln6uA to i64*
  %ln6uC = load i64, i64* %ln6uB, !tbaa !5
  %ln6uD = inttoptr i64 %ln6uC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6uE = load i64*, i64** %Sp_Var
  %ln6uF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6uD( i64* %Base_Arg, i64* %ln6uE, i64* %Hp_Arg, i64 %ln6uF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPs2_bytes_struct = type <{[24 x i8]}>
@Main_zdfNumPs2_bytes$def = internal constant %Main_zdfNumPs2_bytes_struct<{[24 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 104, i8 115, i8 58, i8 56, i8 48, i8 58, i8 49, i8 48, i8 45, i8 50, i8 56, i8 124, i8 115, i8 105, i8 103, i8 110, i8 117, i8 109, i8 0]}>, align 1
@Main_zdfNumPs2_bytes = alias i8, bitcast (%Main_zdfNumPs2_bytes_struct* @Main_zdfNumPs2_bytes$def to i8*)
%r55g_closure_struct = type <{i64, i64, i64, i64}>
@r55g_closure$def = internal global %r55g_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55g_info$def to i64), i64 0, i64 0, i64 0}>
@r55g_closure = internal alias i8, bitcast (%r55g_closure_struct* @r55g_closure$def to i8*)
@r55g_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55g_info$def to i8*)
define internal ghccc void @r55g_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_noMethodBindingError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55g_info$def to i64)) to i32),i32 0)}>
{
n6uP:
  %lc6uJ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6uM
c6uM:
  %ln6uQ = load i64*, i64** %Sp_Var
  %ln6uR = getelementptr inbounds i64, i64* %ln6uQ, i32 -2
  %ln6uS = ptrtoint i64* %ln6uR to i64
  %ln6uT = icmp ult i64 %ln6uS, %SpLim_Arg
  %ln6uU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6uT, i1 0 )
  br i1 %ln6uU, label %c6uN, label %c6uO
c6uO:
  %ln6uV = ptrtoint i64* %Base_Arg to i64
  %ln6uW = inttoptr i64 %ln6uV to i8*
  %ln6uX = load i64, i64* %R1_Var
  %ln6uY = inttoptr i64 %ln6uX to i8*
  %ln6uZ = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln6v0 = call ccc i8* (i8*, i8*) %ln6uZ( i8* %ln6uW, i8* %ln6uY ) nounwind
  %ln6v1 = ptrtoint i8* %ln6v0 to i64
  store i64 %ln6v1, i64* %lc6uJ
  %ln6v2 = load i64, i64* %lc6uJ
  %ln6v3 = icmp eq i64 %ln6v2, 0
  br i1 %ln6v3, label %c6uL, label %c6uK
c6uK:
  %ln6v5 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln6v4 = load i64*, i64** %Sp_Var
  %ln6v6 = getelementptr inbounds i64, i64* %ln6v4, i32 -2
  store i64 %ln6v5, i64* %ln6v6, !tbaa !2
  %ln6v8 = load i64, i64* %lc6uJ
  %ln6v7 = load i64*, i64** %Sp_Var
  %ln6v9 = getelementptr inbounds i64, i64* %ln6v7, i32 -1
  store i64 %ln6v8, i64* %ln6v9, !tbaa !2
  %ln6va = ptrtoint %Main_zdfNumPs2_bytes_struct* @Main_zdfNumPs2_bytes$def to i64
  store i64 %ln6va, i64* %R2_Var
  %ln6vb = load i64*, i64** %Sp_Var
  %ln6vc = getelementptr inbounds i64, i64* %ln6vb, i32 -2
  %ln6vd = ptrtoint i64* %ln6vc to i64
  %ln6ve = inttoptr i64 %ln6vd to i64*
  store i64* %ln6ve, i64** %Sp_Var
  %ln6vf = bitcast i8* @base_ControlziExceptionziBase_noMethodBindingError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6vg = load i64*, i64** %Sp_Var
  %ln6vh = load i64, i64* %R1_Var
  %ln6vi = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6vf( i64* %Base_Arg, i64* %ln6vg, i64* %Hp_Arg, i64 %ln6vh, i64 %ln6vi, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6uL:
  %ln6vk = load i64, i64* %R1_Var
  %ln6vl = inttoptr i64 %ln6vk to i64*
  %ln6vm = load i64, i64* %ln6vl, !tbaa !4
  %ln6vn = inttoptr i64 %ln6vm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6vo = load i64*, i64** %Sp_Var
  %ln6vp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6vn( i64* %Base_Arg, i64* %ln6vo, i64* %Hp_Arg, i64 %ln6vp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6uN:
  %ln6vq = load i64, i64* %R1_Var
  store i64 %ln6vq, i64* %R1_Var
  %ln6vr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6vs = bitcast i64* %ln6vr to i64*
  %ln6vt = load i64, i64* %ln6vs, !tbaa !5
  %ln6vu = inttoptr i64 %ln6vt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6vv = load i64*, i64** %Sp_Var
  %ln6vw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6vu( i64* %Base_Arg, i64* %ln6vv, i64* %Hp_Arg, i64 %ln6vw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPs1_closure_struct = type <{i64, i64}>
@Main_zdfNumPs1_closure$def = internal global %Main_zdfNumPs1_closure_struct<{i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_IS_con_info to i64), i64 0}>
@Main_zdfNumPs1_closure = alias i8, bitcast (%Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i8*)
%Main_zdfNumPszuzdcfromInteger_closure_struct = type <{i64}>
@Main_zdfNumPszuzdcfromInteger_closure$def = internal global %Main_zdfNumPszuzdcfromInteger_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcfromInteger_info$def to i64)}>
@Main_zdfNumPszuzdcfromInteger_closure = alias i8, bitcast (%Main_zdfNumPszuzdcfromInteger_closure_struct* @Main_zdfNumPszuzdcfromInteger_closure$def to i8*)
@s580_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s580_info$def to i8*)
define internal ghccc void @s580_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n6vZ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6vJ
c6vJ:
  %ln6w0 = load i64*, i64** %Sp_Var
  %ln6w1 = getelementptr inbounds i64, i64* %ln6w0, i32 -4
  %ln6w2 = ptrtoint i64* %ln6w1 to i64
  %ln6w3 = icmp ult i64 %ln6w2, %SpLim_Arg
  %ln6w4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6w3, i1 0 )
  br i1 %ln6w4, label %c6vK, label %c6vL
c6vL:
  %ln6w6 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6w5 = load i64*, i64** %Sp_Var
  %ln6w7 = getelementptr inbounds i64, i64* %ln6w5, i32 -2
  store i64 %ln6w6, i64* %ln6w7, !tbaa !2
  %ln6w9 = load i64, i64* %R1_Var
  %ln6w8 = load i64*, i64** %Sp_Var
  %ln6wa = getelementptr inbounds i64, i64* %ln6w8, i32 -1
  store i64 %ln6w9, i64* %ln6wa, !tbaa !2
  %ln6wd = load i64, i64* %R1_Var
  %ln6we = add i64 %ln6wd, 16
  %ln6wf = inttoptr i64 %ln6we to i64*
  %ln6wg = load i64, i64* %ln6wf, !tbaa !4
  store i64 %ln6wg, i64* %R2_Var
  %ln6wi = ptrtoint i8* @stg_ap_p_info to i64
  %ln6wh = load i64*, i64** %Sp_Var
  %ln6wj = getelementptr inbounds i64, i64* %ln6wh, i32 -4
  store i64 %ln6wi, i64* %ln6wj, !tbaa !2
  %ln6wn = load i64, i64* %R1_Var
  %ln6wo = add i64 %ln6wn, 24
  %ln6wp = inttoptr i64 %ln6wo to i64*
  %ln6wq = load i64, i64* %ln6wp, !tbaa !4
  %ln6wk = load i64*, i64** %Sp_Var
  %ln6wr = getelementptr inbounds i64, i64* %ln6wk, i32 -3
  store i64 %ln6wq, i64* %ln6wr, !tbaa !2
  %ln6ws = load i64*, i64** %Sp_Var
  %ln6wt = getelementptr inbounds i64, i64* %ln6ws, i32 -4
  %ln6wu = ptrtoint i64* %ln6wt to i64
  %ln6wv = inttoptr i64 %ln6wu to i64*
  store i64* %ln6wv, i64** %Sp_Var
  %ln6ww = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6wx = load i64*, i64** %Sp_Var
  %ln6wy = load i64, i64* %R1_Var
  %ln6wz = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ww( i64* %Base_Arg, i64* %ln6wx, i64* %Hp_Arg, i64 %ln6wy, i64 %ln6wz, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6vK:
  %ln6wA = load i64, i64* %R1_Var
  store i64 %ln6wA, i64* %R1_Var
  %ln6wB = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6wC = bitcast i64* %ln6wB to i64*
  %ln6wD = load i64, i64* %ln6wC, !tbaa !5
  %ln6wE = inttoptr i64 %ln6wD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6wF = load i64*, i64** %Sp_Var
  %ln6wG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6wE( i64* %Base_Arg, i64* %ln6wF, i64* %Hp_Arg, i64 %ln6wG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdcfromInteger_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcfromInteger_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdcfromInteger_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n6wH:
  %ls57Y = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls57X = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6vP
c6vP:
  %ln6wI = load i64*, i64** %Sp_Var
  %ln6wJ = getelementptr inbounds i64, i64* %ln6wI, i32 -3
  %ln6wK = ptrtoint i64* %ln6wJ to i64
  %ln6wL = icmp ult i64 %ln6wK, %SpLim_Arg
  %ln6wM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6wL, i1 0 )
  br i1 %ln6wM, label %c6vQ, label %c6vR
c6vR:
  %ln6wO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6vB_info$def to i64
  %ln6wN = load i64*, i64** %Sp_Var
  %ln6wP = getelementptr inbounds i64, i64* %ln6wN, i32 -3
  store i64 %ln6wO, i64* %ln6wP, !tbaa !2
  %ln6wQ = load i64, i64* %R3_Var
  store i64 %ln6wQ, i64* %ls57Y
  %ln6wR = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln6wS = add i64 %ln6wR, 1
  store i64 %ln6wS, i64* %R3_Var
  %ln6wT = load i64, i64* %R2_Var
  store i64 %ln6wT, i64* %ls57X
  %ln6wU = load i64, i64* %ls57Y
  store i64 %ln6wU, i64* %R2_Var
  %ln6wW = load i64, i64* %ls57X
  %ln6wV = load i64*, i64** %Sp_Var
  %ln6wX = getelementptr inbounds i64, i64* %ln6wV, i32 -2
  store i64 %ln6wW, i64* %ln6wX, !tbaa !2
  %ln6wZ = load i64, i64* %ls57Y
  %ln6wY = load i64*, i64** %Sp_Var
  %ln6x0 = getelementptr inbounds i64, i64* %ln6wY, i32 -1
  store i64 %ln6wZ, i64* %ln6x0, !tbaa !2
  %ln6x1 = load i64*, i64** %Sp_Var
  %ln6x2 = getelementptr inbounds i64, i64* %ln6x1, i32 -3
  %ln6x3 = ptrtoint i64* %ln6x2 to i64
  %ln6x4 = inttoptr i64 %ln6x3 to i64*
  store i64* %ln6x4, i64** %Sp_Var
  %ln6x5 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6x6 = load i64*, i64** %Sp_Var
  %ln6x7 = load i64, i64* %R1_Var
  %ln6x8 = load i64, i64* %R2_Var
  %ln6x9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6x5( i64* %Base_Arg, i64* %ln6x6, i64* %Hp_Arg, i64 %ln6x7, i64 %ln6x8, i64 %ln6x9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6vQ:
  %ln6xa = load i64, i64* %R3_Var
  store i64 %ln6xa, i64* %R3_Var
  %ln6xb = load i64, i64* %R2_Var
  store i64 %ln6xb, i64* %R2_Var
  %ln6xc = ptrtoint %Main_zdfNumPszuzdcfromInteger_closure_struct* @Main_zdfNumPszuzdcfromInteger_closure$def to i64
  store i64 %ln6xc, i64* %R1_Var
  %ln6xd = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6xe = bitcast i64* %ln6xd to i64*
  %ln6xf = load i64, i64* %ln6xe, !tbaa !5
  %ln6xg = inttoptr i64 %ln6xf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6xh = load i64*, i64** %Sp_Var
  %ln6xi = load i64, i64* %R1_Var
  %ln6xj = load i64, i64* %R2_Var
  %ln6xk = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6xg( i64* %Base_Arg, i64* %ln6xh, i64* %Hp_Arg, i64 %ln6xi, i64 %ln6xj, i64 %ln6xk, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6vB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6vB_info$def to i8*)
define internal ghccc void @c6vB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n6xl:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6vB
c6vB:
  %ln6xm = load i64, i64* %R1_Var
  switch i64 %ln6xm, label %c6vN [i64 1, label %c6vO]
c6vN:
  %ln6xn = load i64*, i64** %Hp_Var
  %ln6xo = getelementptr inbounds i64, i64* %ln6xn, i32 7
  %ln6xp = ptrtoint i64* %ln6xo to i64
  %ln6xq = inttoptr i64 %ln6xp to i64*
  store i64* %ln6xq, i64** %Hp_Var
  %ln6xr = load i64*, i64** %Hp_Var
  %ln6xs = ptrtoint i64* %ln6xr to i64
  %ln6xt = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6xu = bitcast i64* %ln6xt to i64*
  %ln6xv = load i64, i64* %ln6xu, !tbaa !5
  %ln6xw = icmp ugt i64 %ln6xs, %ln6xv
  %ln6xx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6xw, i1 0 )
  br i1 %ln6xx, label %c6vV, label %c6vU
c6vU:
  %ln6xz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s580_info$def to i64
  %ln6xy = load i64*, i64** %Hp_Var
  %ln6xA = getelementptr inbounds i64, i64* %ln6xy, i32 -6
  store i64 %ln6xz, i64* %ln6xA, !tbaa !3
  %ln6xC = load i64*, i64** %Sp_Var
  %ln6xD = getelementptr inbounds i64, i64* %ln6xC, i32 1
  %ln6xE = bitcast i64* %ln6xD to i64*
  %ln6xF = load i64, i64* %ln6xE, !tbaa !2
  %ln6xB = load i64*, i64** %Hp_Var
  %ln6xG = getelementptr inbounds i64, i64* %ln6xB, i32 -4
  store i64 %ln6xF, i64* %ln6xG, !tbaa !3
  %ln6xI = load i64*, i64** %Sp_Var
  %ln6xJ = getelementptr inbounds i64, i64* %ln6xI, i32 2
  %ln6xK = bitcast i64* %ln6xJ to i64*
  %ln6xL = load i64, i64* %ln6xK, !tbaa !2
  %ln6xH = load i64*, i64** %Hp_Var
  %ln6xM = getelementptr inbounds i64, i64* %ln6xH, i32 -3
  store i64 %ln6xL, i64* %ln6xM, !tbaa !3
  %ln6xO = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6xN = load i64*, i64** %Hp_Var
  %ln6xP = getelementptr inbounds i64, i64* %ln6xN, i32 -2
  store i64 %ln6xO, i64* %ln6xP, !tbaa !3
  %ln6xR = load i64*, i64** %Hp_Var
  %ln6xS = getelementptr inbounds i64, i64* %ln6xR, i32 -6
  %ln6xT = ptrtoint i64* %ln6xS to i64
  %ln6xQ = load i64*, i64** %Hp_Var
  %ln6xU = getelementptr inbounds i64, i64* %ln6xQ, i32 -1
  store i64 %ln6xT, i64* %ln6xU, !tbaa !3
  %ln6xW = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6xX = add i64 %ln6xW, 1
  %ln6xV = load i64*, i64** %Hp_Var
  %ln6xY = getelementptr inbounds i64, i64* %ln6xV, i32 0
  store i64 %ln6xX, i64* %ln6xY, !tbaa !3
  %ln6y0 = load i64*, i64** %Hp_Var
  %ln6y1 = ptrtoint i64* %ln6y0 to i64
  %ln6y2 = add i64 %ln6y1, -14
  store i64 %ln6y2, i64* %R1_Var
  %ln6y3 = load i64*, i64** %Sp_Var
  %ln6y4 = getelementptr inbounds i64, i64* %ln6y3, i32 3
  %ln6y5 = ptrtoint i64* %ln6y4 to i64
  %ln6y6 = inttoptr i64 %ln6y5 to i64*
  store i64* %ln6y6, i64** %Sp_Var
  %ln6y7 = load i64*, i64** %Sp_Var
  %ln6y8 = getelementptr inbounds i64, i64* %ln6y7, i32 0
  %ln6y9 = bitcast i64* %ln6y8 to i64*
  %ln6ya = load i64, i64* %ln6y9, !tbaa !2
  %ln6yb = inttoptr i64 %ln6ya to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6yc = load i64*, i64** %Sp_Var
  %ln6yd = load i64*, i64** %Hp_Var
  %ln6ye = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6yb( i64* %Base_Arg, i64* %ln6yc, i64* %ln6yd, i64 %ln6ye, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6vV:
  %ln6yf = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln6yf, !tbaa !5
  %ln6yg = load i64, i64* %R1_Var
  store i64 %ln6yg, i64* %R1_Var
  %ln6yh = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6yi = load i64*, i64** %Sp_Var
  %ln6yj = load i64*, i64** %Hp_Var
  %ln6yk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6yh( i64* %Base_Arg, i64* %ln6yi, i64* %ln6yj, i64 %ln6yk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6vO:
  %ln6yl = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6ym = add i64 %ln6yl, 1
  store i64 %ln6ym, i64* %R1_Var
  %ln6yn = load i64*, i64** %Sp_Var
  %ln6yo = getelementptr inbounds i64, i64* %ln6yn, i32 3
  %ln6yp = ptrtoint i64* %ln6yo to i64
  %ln6yq = inttoptr i64 %ln6yp to i64*
  store i64* %ln6yq, i64** %Sp_Var
  %ln6yr = load i64*, i64** %Sp_Var
  %ln6ys = getelementptr inbounds i64, i64* %ln6yr, i32 0
  %ln6yt = bitcast i64* %ln6ys to i64*
  %ln6yu = load i64, i64* %ln6yt, !tbaa !2
  %ln6yv = inttoptr i64 %ln6yu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6yw = load i64*, i64** %Sp_Var
  %ln6yx = load i64*, i64** %Hp_Var
  %ln6yy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6yv( i64* %Base_Arg, i64* %ln6yw, i64* %ln6yx, i64 %ln6yy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_integral1_closure_struct = type <{i64, i64, i64, i64}>
@Main_integral1_closure$def = internal global %Main_integral1_closure_struct<{i64 ptrtoint (i8* @base_GHCziReal_ZCzv_con_info to i64), i64 add (i64 ptrtoint (%Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziReal_zdfEnumRatio1_closure to i64),i64 1), i64 3}>
@Main_integral1_closure = alias i8, bitcast (%Main_integral1_closure_struct* @Main_integral1_closure$def to i8*)
%Main_zdfEqPszuzdczeze_closure_struct = type <{i64}>
@Main_zdfEqPszuzdczeze_closure$def = internal global %Main_zdfEqPszuzdczeze_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczeze_info$def to i64)}>
@Main_zdfEqPszuzdczeze_closure = alias i8, bitcast (%Main_zdfEqPszuzdczeze_closure_struct* @Main_zdfEqPszuzdczeze_closure$def to i8*)
@s5ab_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ab_info$def to i8*)
define internal ghccc void @s5ab_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n6A5:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6yS
c6yS:
  %ln6A6 = load i64*, i64** %Sp_Var
  %ln6A7 = getelementptr inbounds i64, i64* %ln6A6, i32 -4
  %ln6A8 = ptrtoint i64* %ln6A7 to i64
  %ln6A9 = icmp ult i64 %ln6A8, %SpLim_Arg
  %ln6Aa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6A9, i1 0 )
  br i1 %ln6Aa, label %c6yT, label %c6yU
c6yU:
  %ln6Ac = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6Ab = load i64*, i64** %Sp_Var
  %ln6Ad = getelementptr inbounds i64, i64* %ln6Ab, i32 -2
  store i64 %ln6Ac, i64* %ln6Ad, !tbaa !2
  %ln6Af = load i64, i64* %R1_Var
  %ln6Ae = load i64*, i64** %Sp_Var
  %ln6Ag = getelementptr inbounds i64, i64* %ln6Ae, i32 -1
  store i64 %ln6Af, i64* %ln6Ag, !tbaa !2
  %ln6Aj = load i64, i64* %R1_Var
  %ln6Ak = add i64 %ln6Aj, 16
  %ln6Al = inttoptr i64 %ln6Ak to i64*
  %ln6Am = load i64, i64* %ln6Al, !tbaa !4
  store i64 %ln6Am, i64* %R2_Var
  %ln6Ao = ptrtoint i8* @stg_ap_p_info to i64
  %ln6An = load i64*, i64** %Sp_Var
  %ln6Ap = getelementptr inbounds i64, i64* %ln6An, i32 -4
  store i64 %ln6Ao, i64* %ln6Ap, !tbaa !2
  %ln6Ar = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln6As = add i64 %ln6Ar, 1
  %ln6Aq = load i64*, i64** %Sp_Var
  %ln6At = getelementptr inbounds i64, i64* %ln6Aq, i32 -3
  store i64 %ln6As, i64* %ln6At, !tbaa !2
  %ln6Au = load i64*, i64** %Sp_Var
  %ln6Av = getelementptr inbounds i64, i64* %ln6Au, i32 -4
  %ln6Aw = ptrtoint i64* %ln6Av to i64
  %ln6Ax = inttoptr i64 %ln6Aw to i64*
  store i64* %ln6Ax, i64** %Sp_Var
  %ln6Ay = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Az = load i64*, i64** %Sp_Var
  %ln6AA = load i64, i64* %R1_Var
  %ln6AB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Ay( i64* %Base_Arg, i64* %ln6Az, i64* %Hp_Arg, i64 %ln6AA, i64 %ln6AB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6yT:
  %ln6AC = load i64, i64* %R1_Var
  store i64 %ln6AC, i64* %R1_Var
  %ln6AD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6AE = bitcast i64* %ln6AD to i64*
  %ln6AF = load i64, i64* %ln6AE, !tbaa !5
  %ln6AG = inttoptr i64 %ln6AF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6AH = load i64*, i64** %Sp_Var
  %ln6AI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6AG( i64* %Base_Arg, i64* %ln6AH, i64* %Hp_Arg, i64 %ln6AI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfEqPszuzdczeze_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczeze_info$def to i8*)
define ghccc void @Main_zdfEqPszuzdczeze_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 0}>
{
n6AJ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6yZ
c6yZ:
  %ln6AK = load i64*, i64** %Sp_Var
  %ln6AL = getelementptr inbounds i64, i64* %ln6AK, i32 -9
  %ln6AM = ptrtoint i64* %ln6AL to i64
  %ln6AN = icmp ult i64 %ln6AM, %SpLim_Arg
  %ln6AO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6AN, i1 0 )
  br i1 %ln6AO, label %c6z0, label %u6zQ
u6zQ:
  %ln6AQ = load i64, i64* %R2_Var
  %ln6AP = load i64*, i64** %Sp_Var
  %ln6AR = getelementptr inbounds i64, i64* %ln6AP, i32 -4
  store i64 %ln6AQ, i64* %ln6AR, !tbaa !2
  %ln6AT = load i64, i64* %R3_Var
  %ln6AS = load i64*, i64** %Sp_Var
  %ln6AU = getelementptr inbounds i64, i64* %ln6AS, i32 -3
  store i64 %ln6AT, i64* %ln6AU, !tbaa !2
  %ln6AW = load i64, i64* %R4_Var
  %ln6AV = load i64*, i64** %Sp_Var
  %ln6AX = getelementptr inbounds i64, i64* %ln6AV, i32 -2
  store i64 %ln6AW, i64* %ln6AX, !tbaa !2
  %ln6AZ = load i64, i64* %R5_Var
  %ln6AY = load i64*, i64** %Sp_Var
  %ln6B0 = getelementptr inbounds i64, i64* %ln6AY, i32 -1
  store i64 %ln6AZ, i64* %ln6B0, !tbaa !2
  %ln6B1 = load i64*, i64** %Sp_Var
  %ln6B2 = getelementptr inbounds i64, i64* %ln6B1, i32 -4
  %ln6B3 = ptrtoint i64* %ln6B2 to i64
  %ln6B4 = inttoptr i64 %ln6B3 to i64*
  store i64* %ln6B4, i64** %Sp_Var
  %ln6B5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6yA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6B6 = load i64*, i64** %Sp_Var
  %ln6B7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6B5( i64* %Base_Arg, i64* %ln6B6, i64* %Hp_Arg, i64 %ln6B7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6z0:
  %ln6B8 = load i64, i64* %R5_Var
  store i64 %ln6B8, i64* %R5_Var
  %ln6B9 = load i64, i64* %R4_Var
  store i64 %ln6B9, i64* %R4_Var
  %ln6Ba = load i64, i64* %R3_Var
  store i64 %ln6Ba, i64* %R3_Var
  %ln6Bb = load i64, i64* %R2_Var
  store i64 %ln6Bb, i64* %R2_Var
  %ln6Bc = ptrtoint %Main_zdfEqPszuzdczeze_closure_struct* @Main_zdfEqPszuzdczeze_closure$def to i64
  store i64 %ln6Bc, i64* %R1_Var
  %ln6Bd = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6Be = bitcast i64* %ln6Bd to i64*
  %ln6Bf = load i64, i64* %ln6Be, !tbaa !5
  %ln6Bg = inttoptr i64 %ln6Bf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Bh = load i64*, i64** %Sp_Var
  %ln6Bi = load i64, i64* %R1_Var
  %ln6Bj = load i64, i64* %R2_Var
  %ln6Bk = load i64, i64* %R3_Var
  %ln6Bl = load i64, i64* %R4_Var
  %ln6Bm = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Bg( i64* %Base_Arg, i64* %ln6Bh, i64* %Hp_Arg, i64 %ln6Bi, i64 %ln6Bj, i64 %ln6Bk, i64 %ln6Bl, i64 %ln6Bm, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c6yA = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6yA$def to i8*)
define internal ghccc void @_c6yA$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n6Bn:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6yA
c6yA:
  %ln6Bp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yD_info$def to i64
  %ln6Bo = load i64*, i64** %Sp_Var
  %ln6Bq = getelementptr inbounds i64, i64* %ln6Bo, i32 -1
  store i64 %ln6Bp, i64* %ln6Bq, !tbaa !2
  %ln6Br = load i64*, i64** %Sp_Var
  %ln6Bs = getelementptr inbounds i64, i64* %ln6Br, i32 2
  %ln6Bt = bitcast i64* %ln6Bs to i64*
  %ln6Bu = load i64, i64* %ln6Bt, !tbaa !2
  store i64 %ln6Bu, i64* %R1_Var
  %ln6Bv = load i64*, i64** %Sp_Var
  %ln6Bw = getelementptr inbounds i64, i64* %ln6Bv, i32 -1
  %ln6Bx = ptrtoint i64* %ln6Bw to i64
  %ln6By = inttoptr i64 %ln6Bx to i64*
  store i64* %ln6By, i64** %Sp_Var
  %ln6Bz = load i64, i64* %R1_Var
  %ln6BA = and i64 %ln6Bz, 7
  %ln6BB = icmp ne i64 %ln6BA, 0
  br i1 %ln6BB, label %u6zW, label %c6yE
c6yE:
  %ln6BD = load i64, i64* %R1_Var
  %ln6BE = inttoptr i64 %ln6BD to i64*
  %ln6BF = load i64, i64* %ln6BE, !tbaa !4
  %ln6BG = inttoptr i64 %ln6BF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6BH = load i64*, i64** %Sp_Var
  %ln6BI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6BG( i64* %Base_Arg, i64* %ln6BH, i64* %Hp_Arg, i64 %ln6BI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6zW:
  %ln6BJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6BK = load i64*, i64** %Sp_Var
  %ln6BL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6BJ( i64* %Base_Arg, i64* %ln6BK, i64* %Hp_Arg, i64 %ln6BL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6yD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yD_info$def to i8*)
define internal ghccc void @c6yD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 260, i32 30, i32 0}>
{
n6BM:
  %ls5a6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls5a7 = alloca i64, i32 1
  %ls5ad = alloca i64, i32 1
  %ls5ae = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6yD
c6yD:
  %ln6BN = load i64*, i64** %Sp_Var
  %ln6BO = getelementptr inbounds i64, i64* %ln6BN, i32 4
  %ln6BP = bitcast i64* %ln6BO to i64*
  %ln6BQ = load i64, i64* %ln6BP, !tbaa !2
  store i64 %ln6BQ, i64* %ls5a6
  %ln6BR = load i64, i64* %R1_Var
  %ln6BS = and i64 %ln6BR, 7
  switch i64 %ln6BS, label %c6yW [i64 1, label %c6yW
i64 2, label %c6yX]
c6yW:
  %ln6BU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yI_info$def to i64
  %ln6BT = load i64*, i64** %Sp_Var
  %ln6BV = getelementptr inbounds i64, i64* %ln6BT, i32 0
  store i64 %ln6BU, i64* %ln6BV, !tbaa !2
  %ln6BW = load i64, i64* %ls5a6
  store i64 %ln6BW, i64* %R1_Var
  %ln6BX = load i64, i64* %R1_Var
  %ln6BY = and i64 %ln6BX, 7
  %ln6BZ = icmp ne i64 %ln6BY, 0
  br i1 %ln6BZ, label %u6zX, label %c6yJ
c6yJ:
  %ln6C1 = load i64, i64* %R1_Var
  %ln6C2 = inttoptr i64 %ln6C1 to i64*
  %ln6C3 = load i64, i64* %ln6C2, !tbaa !4
  %ln6C4 = inttoptr i64 %ln6C3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6C5 = load i64*, i64** %Sp_Var
  %ln6C6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6C4( i64* %Base_Arg, i64* %ln6C5, i64* %Hp_Arg, i64 %ln6C6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6zX:
  %ln6C7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6C8 = load i64*, i64** %Sp_Var
  %ln6C9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6C7( i64* %Base_Arg, i64* %ln6C8, i64* %Hp_Arg, i64 %ln6C9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6yX:
  %ln6Cb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6zo_info$def to i64
  %ln6Ca = load i64*, i64** %Sp_Var
  %ln6Cc = getelementptr inbounds i64, i64* %ln6Ca, i32 -1
  store i64 %ln6Cb, i64* %ln6Cc, !tbaa !2
  %ln6Cd = load i64, i64* %R1_Var
  store i64 %ln6Cd, i64* %ls5a7
  %ln6Cg = load i64, i64* %R1_Var
  %ln6Ch = add i64 %ln6Cg, 6
  %ln6Ci = inttoptr i64 %ln6Ch to i64*
  %ln6Cj = load i64, i64* %ln6Ci, !tbaa !4
  store i64 %ln6Cj, i64* %ls5ad
  %ln6Cm = load i64, i64* %R1_Var
  %ln6Cn = add i64 %ln6Cm, 14
  %ln6Co = inttoptr i64 %ln6Cn to i64*
  %ln6Cp = load i64, i64* %ln6Co, !tbaa !4
  store i64 %ln6Cp, i64* %ls5ae
  %ln6Cq = load i64, i64* %ls5a6
  store i64 %ln6Cq, i64* %R1_Var
  %ln6Cs = load i64, i64* %ls5ae
  %ln6Cr = load i64*, i64** %Sp_Var
  %ln6Ct = getelementptr inbounds i64, i64* %ln6Cr, i32 0
  store i64 %ln6Cs, i64* %ln6Ct, !tbaa !2
  %ln6Cv = load i64, i64* %ls5ad
  %ln6Cu = load i64*, i64** %Sp_Var
  %ln6Cw = getelementptr inbounds i64, i64* %ln6Cu, i32 3
  store i64 %ln6Cv, i64* %ln6Cw, !tbaa !2
  %ln6Cy = load i64, i64* %ls5a7
  %ln6Cx = load i64*, i64** %Sp_Var
  %ln6Cz = getelementptr inbounds i64, i64* %ln6Cx, i32 4
  store i64 %ln6Cy, i64* %ln6Cz, !tbaa !2
  %ln6CA = load i64*, i64** %Sp_Var
  %ln6CB = getelementptr inbounds i64, i64* %ln6CA, i32 -1
  %ln6CC = ptrtoint i64* %ln6CB to i64
  %ln6CD = inttoptr i64 %ln6CC to i64*
  store i64* %ln6CD, i64** %Sp_Var
  %ln6CE = load i64, i64* %R1_Var
  %ln6CF = and i64 %ln6CE, 7
  %ln6CG = icmp ne i64 %ln6CF, 0
  br i1 %ln6CG, label %u6zY, label %c6zq
c6zq:
  %ln6CI = load i64, i64* %R1_Var
  %ln6CJ = inttoptr i64 %ln6CI to i64*
  %ln6CK = load i64, i64* %ln6CJ, !tbaa !4
  %ln6CL = inttoptr i64 %ln6CK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6CM = load i64*, i64** %Sp_Var
  %ln6CN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6CL( i64* %Base_Arg, i64* %ln6CM, i64* %Hp_Arg, i64 %ln6CN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6zY:
  %ln6CO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6zo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6CP = load i64*, i64** %Sp_Var
  %ln6CQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6CO( i64* %Base_Arg, i64* %ln6CP, i64* %Hp_Arg, i64 %ln6CQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6zo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6zo_info$def to i8*)
define internal ghccc void @c6zo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
n6CR:
  %ls5a3 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6zo
c6zo:
  %ln6CS = load i64*, i64** %Sp_Var
  %ln6CT = getelementptr inbounds i64, i64* %ln6CS, i32 2
  %ln6CU = bitcast i64* %ln6CT to i64*
  %ln6CV = load i64, i64* %ln6CU, !tbaa !2
  store i64 %ln6CV, i64* %ls5a3
  %ln6CW = and i64 %R1_Arg, 7
  switch i64 %ln6CW, label %c6zw [i64 1, label %c6zw
i64 2, label %c6zB]
c6zw:
  %ln6CY = load i64, i64* %ls5a3
  %ln6CX = load i64*, i64** %Sp_Var
  %ln6CZ = getelementptr inbounds i64, i64* %ln6CX, i32 2
  store i64 %ln6CY, i64* %ln6CZ, !tbaa !2
  %ln6D1 = load i64*, i64** %Sp_Var
  %ln6D2 = getelementptr inbounds i64, i64* %ln6D1, i32 3
  %ln6D3 = bitcast i64* %ln6D2 to i64*
  %ln6D4 = load i64, i64* %ln6D3, !tbaa !2
  %ln6D0 = load i64*, i64** %Sp_Var
  %ln6D5 = getelementptr inbounds i64, i64* %ln6D0, i32 3
  store i64 %ln6D4, i64* %ln6D5, !tbaa !2
  %ln6D7 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6D8 = add i64 %ln6D7, 1
  %ln6D6 = load i64*, i64** %Sp_Var
  %ln6D9 = getelementptr inbounds i64, i64* %ln6D6, i32 4
  store i64 %ln6D8, i64* %ln6D9, !tbaa !2
  %ln6Db = load i64*, i64** %Sp_Var
  %ln6Dc = getelementptr inbounds i64, i64* %ln6Db, i32 5
  %ln6Dd = bitcast i64* %ln6Dc to i64*
  %ln6De = load i64, i64* %ln6Dd, !tbaa !2
  %ln6Da = load i64*, i64** %Sp_Var
  %ln6Df = getelementptr inbounds i64, i64* %ln6Da, i32 5
  store i64 %ln6De, i64* %ln6Df, !tbaa !2
  %ln6Dg = load i64*, i64** %Sp_Var
  %ln6Dh = getelementptr inbounds i64, i64* %ln6Dg, i32 2
  %ln6Di = ptrtoint i64* %ln6Dh to i64
  %ln6Dj = inttoptr i64 %ln6Di to i64*
  store i64* %ln6Dj, i64** %Sp_Var
  %ln6Dk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6yA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Dl = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Dk( i64* %Base_Arg, i64* %ln6Dl, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6zB:
  %ln6Dn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6zz_info$def to i64
  %ln6Dm = load i64*, i64** %Sp_Var
  %ln6Do = getelementptr inbounds i64, i64* %ln6Dm, i32 0
  store i64 %ln6Dn, i64* %ln6Do, !tbaa !2
  %ln6Dp = load i64, i64* %ls5a3
  store i64 %ln6Dp, i64* %R2_Var
  %ln6Dr = ptrtoint i8* @stg_ap_pp_info to i64
  %ln6Dq = load i64*, i64** %Sp_Var
  %ln6Ds = getelementptr inbounds i64, i64* %ln6Dq, i32 -3
  store i64 %ln6Dr, i64* %ln6Ds, !tbaa !2
  %ln6Du = load i64*, i64** %Sp_Var
  %ln6Dv = getelementptr inbounds i64, i64* %ln6Du, i32 4
  %ln6Dw = bitcast i64* %ln6Dv to i64*
  %ln6Dx = load i64, i64* %ln6Dw, !tbaa !2
  %ln6Dt = load i64*, i64** %Sp_Var
  %ln6Dy = getelementptr inbounds i64, i64* %ln6Dt, i32 -2
  store i64 %ln6Dx, i64* %ln6Dy, !tbaa !2
  %ln6DA = add i64 %R1_Arg, 6
  %ln6DB = inttoptr i64 %ln6DA to i64*
  %ln6DC = load i64, i64* %ln6DB, !tbaa !4
  %ln6Dz = load i64*, i64** %Sp_Var
  %ln6DD = getelementptr inbounds i64, i64* %ln6Dz, i32 -1
  store i64 %ln6DC, i64* %ln6DD, !tbaa !2
  %ln6DF = add i64 %R1_Arg, 14
  %ln6DG = inttoptr i64 %ln6DF to i64*
  %ln6DH = load i64, i64* %ln6DG, !tbaa !4
  %ln6DE = load i64*, i64** %Sp_Var
  %ln6DI = getelementptr inbounds i64, i64* %ln6DE, i32 5
  store i64 %ln6DH, i64* %ln6DI, !tbaa !2
  %ln6DJ = load i64*, i64** %Sp_Var
  %ln6DK = getelementptr inbounds i64, i64* %ln6DJ, i32 -3
  %ln6DL = ptrtoint i64* %ln6DK to i64
  %ln6DM = inttoptr i64 %ln6DL to i64*
  store i64* %ln6DM, i64** %Sp_Var
  %ln6DN = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6DO = load i64*, i64** %Sp_Var
  %ln6DP = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6DN( i64* %Base_Arg, i64* %ln6DO, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6DP, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6zz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6zz_info$def to i8*)
define internal ghccc void @c6zz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 517, i32 30, i32 0}>
{
n6DQ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6zz
c6zz:
  %ln6DR = and i64 %R1_Arg, 7
  switch i64 %ln6DR, label %u6zR [i64 1, label %u6zR
i64 2, label %c6zL]
u6zR:
  %ln6DS = load i64*, i64** %Sp_Var
  %ln6DT = getelementptr inbounds i64, i64* %ln6DS, i32 6
  %ln6DU = ptrtoint i64* %ln6DT to i64
  %ln6DV = inttoptr i64 %ln6DU to i64*
  store i64* %ln6DV, i64** %Sp_Var
  %ln6DW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6zh$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6DX = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6DW( i64* %Base_Arg, i64* %ln6DX, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6zL:
  %ln6DZ = load i64*, i64** %Sp_Var
  %ln6E0 = getelementptr inbounds i64, i64* %ln6DZ, i32 2
  %ln6E1 = bitcast i64* %ln6E0 to i64*
  %ln6E2 = load i64, i64* %ln6E1, !tbaa !2
  %ln6DY = load i64*, i64** %Sp_Var
  %ln6E3 = getelementptr inbounds i64, i64* %ln6DY, i32 2
  store i64 %ln6E2, i64* %ln6E3, !tbaa !2
  %ln6E5 = load i64*, i64** %Sp_Var
  %ln6E6 = getelementptr inbounds i64, i64* %ln6E5, i32 3
  %ln6E7 = bitcast i64* %ln6E6 to i64*
  %ln6E8 = load i64, i64* %ln6E7, !tbaa !2
  %ln6E4 = load i64*, i64** %Sp_Var
  %ln6E9 = getelementptr inbounds i64, i64* %ln6E4, i32 3
  store i64 %ln6E8, i64* %ln6E9, !tbaa !2
  %ln6Eb = load i64*, i64** %Sp_Var
  %ln6Ec = getelementptr inbounds i64, i64* %ln6Eb, i32 1
  %ln6Ed = bitcast i64* %ln6Ec to i64*
  %ln6Ee = load i64, i64* %ln6Ed, !tbaa !2
  %ln6Ea = load i64*, i64** %Sp_Var
  %ln6Ef = getelementptr inbounds i64, i64* %ln6Ea, i32 4
  store i64 %ln6Ee, i64* %ln6Ef, !tbaa !2
  %ln6Eh = load i64*, i64** %Sp_Var
  %ln6Ei = getelementptr inbounds i64, i64* %ln6Eh, i32 5
  %ln6Ej = bitcast i64* %ln6Ei to i64*
  %ln6Ek = load i64, i64* %ln6Ej, !tbaa !2
  %ln6Eg = load i64*, i64** %Sp_Var
  %ln6El = getelementptr inbounds i64, i64* %ln6Eg, i32 5
  store i64 %ln6Ek, i64* %ln6El, !tbaa !2
  %ln6Em = load i64*, i64** %Sp_Var
  %ln6En = getelementptr inbounds i64, i64* %ln6Em, i32 2
  %ln6Eo = ptrtoint i64* %ln6En to i64
  %ln6Ep = inttoptr i64 %ln6Eo to i64*
  store i64* %ln6Ep, i64** %Sp_Var
  %ln6Eq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6yA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Er = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Eq( i64* %Base_Arg, i64* %ln6Er, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6yI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6yI_info$def to i8*)
define internal ghccc void @c6yI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 772, i32 30, i32 0}>
{
n6Es:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5a9 = alloca i64, i32 1
  %ls5aa = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6yI
c6yI:
  %ln6Et = load i64, i64* %R1_Var
  %ln6Eu = and i64 %ln6Et, 7
  switch i64 %ln6Eu, label %c6z6 [i64 1, label %c6z6
i64 2, label %c6z8]
c6z6:
  %ln6Ev = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln6Ew = add i64 %ln6Ev, 2
  store i64 %ln6Ew, i64* %R1_Var
  %ln6Ex = load i64*, i64** %Sp_Var
  %ln6Ey = getelementptr inbounds i64, i64* %ln6Ex, i32 5
  %ln6Ez = ptrtoint i64* %ln6Ey to i64
  %ln6EA = inttoptr i64 %ln6Ez to i64*
  store i64* %ln6EA, i64** %Sp_Var
  %ln6EB = load i64*, i64** %Sp_Var
  %ln6EC = getelementptr inbounds i64, i64* %ln6EB, i32 0
  %ln6ED = bitcast i64* %ln6EC to i64*
  %ln6EE = load i64, i64* %ln6ED, !tbaa !2
  %ln6EF = inttoptr i64 %ln6EE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6EG = load i64*, i64** %Sp_Var
  %ln6EH = load i64*, i64** %Hp_Var
  %ln6EI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6EF( i64* %Base_Arg, i64* %ln6EG, i64* %ln6EH, i64 %ln6EI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6z8:
  %ln6EJ = load i64*, i64** %Hp_Var
  %ln6EK = getelementptr inbounds i64, i64* %ln6EJ, i32 3
  %ln6EL = ptrtoint i64* %ln6EK to i64
  %ln6EM = inttoptr i64 %ln6EL to i64*
  store i64* %ln6EM, i64** %Hp_Var
  %ln6EN = load i64*, i64** %Hp_Var
  %ln6EO = ptrtoint i64* %ln6EN to i64
  %ln6EP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6EQ = bitcast i64* %ln6EP to i64*
  %ln6ER = load i64, i64* %ln6EQ, !tbaa !5
  %ln6ES = icmp ugt i64 %ln6EO, %ln6ER
  %ln6ET = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6ES, i1 0 )
  br i1 %ln6ET, label %c6zb, label %c6za
c6za:
  %ln6EW = load i64, i64* %R1_Var
  %ln6EX = add i64 %ln6EW, 6
  %ln6EY = inttoptr i64 %ln6EX to i64*
  %ln6EZ = load i64, i64* %ln6EY, !tbaa !4
  store i64 %ln6EZ, i64* %ls5a9
  %ln6F2 = load i64, i64* %R1_Var
  %ln6F3 = add i64 %ln6F2, 14
  %ln6F4 = inttoptr i64 %ln6F3 to i64*
  %ln6F5 = load i64, i64* %ln6F4, !tbaa !4
  store i64 %ln6F5, i64* %ls5aa
  %ln6F7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ab_info$def to i64
  %ln6F6 = load i64*, i64** %Hp_Var
  %ln6F8 = getelementptr inbounds i64, i64* %ln6F6, i32 -2
  store i64 %ln6F7, i64* %ln6F8, !tbaa !3
  %ln6Fa = load i64*, i64** %Sp_Var
  %ln6Fb = getelementptr inbounds i64, i64* %ln6Fa, i32 2
  %ln6Fc = bitcast i64* %ln6Fb to i64*
  %ln6Fd = load i64, i64* %ln6Fc, !tbaa !2
  %ln6F9 = load i64*, i64** %Hp_Var
  %ln6Fe = getelementptr inbounds i64, i64* %ln6F9, i32 0
  store i64 %ln6Fd, i64* %ln6Fe, !tbaa !3
  %ln6Fg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6z7_info$def to i64
  %ln6Ff = load i64*, i64** %Sp_Var
  %ln6Fh = getelementptr inbounds i64, i64* %ln6Ff, i32 0
  store i64 %ln6Fg, i64* %ln6Fh, !tbaa !2
  %ln6Fi = load i64*, i64** %Sp_Var
  %ln6Fj = getelementptr inbounds i64, i64* %ln6Fi, i32 1
  %ln6Fk = bitcast i64* %ln6Fj to i64*
  %ln6Fl = load i64, i64* %ln6Fk, !tbaa !2
  store i64 %ln6Fl, i64* %R2_Var
  %ln6Fn = ptrtoint i8* @stg_ap_pp_info to i64
  %ln6Fm = load i64*, i64** %Sp_Var
  %ln6Fo = getelementptr inbounds i64, i64* %ln6Fm, i32 -3
  store i64 %ln6Fn, i64* %ln6Fo, !tbaa !2
  %ln6Fq = load i64, i64* %ls5a9
  %ln6Fp = load i64*, i64** %Sp_Var
  %ln6Fr = getelementptr inbounds i64, i64* %ln6Fp, i32 -2
  store i64 %ln6Fq, i64* %ln6Fr, !tbaa !2
  %ln6Ft = load i64*, i64** %Hp_Var
  %ln6Fu = getelementptr inbounds i64, i64* %ln6Ft, i32 -2
  %ln6Fv = ptrtoint i64* %ln6Fu to i64
  %ln6Fs = load i64*, i64** %Sp_Var
  %ln6Fw = getelementptr inbounds i64, i64* %ln6Fs, i32 -1
  store i64 %ln6Fv, i64* %ln6Fw, !tbaa !2
  %ln6Fy = load i64, i64* %ls5aa
  %ln6Fx = load i64*, i64** %Sp_Var
  %ln6Fz = getelementptr inbounds i64, i64* %ln6Fx, i32 4
  store i64 %ln6Fy, i64* %ln6Fz, !tbaa !2
  %ln6FA = load i64*, i64** %Sp_Var
  %ln6FB = getelementptr inbounds i64, i64* %ln6FA, i32 -3
  %ln6FC = ptrtoint i64* %ln6FB to i64
  %ln6FD = inttoptr i64 %ln6FC to i64*
  store i64* %ln6FD, i64** %Sp_Var
  %ln6FE = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6FF = load i64*, i64** %Sp_Var
  %ln6FG = load i64*, i64** %Hp_Var
  %ln6FH = load i64, i64* %R1_Var
  %ln6FI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6FE( i64* %Base_Arg, i64* %ln6FF, i64* %ln6FG, i64 %ln6FH, i64 %ln6FI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6zb:
  %ln6FJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln6FJ, !tbaa !5
  %ln6FK = load i64, i64* %R1_Var
  store i64 %ln6FK, i64* %R1_Var
  %ln6FL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6FM = load i64*, i64** %Sp_Var
  %ln6FN = load i64*, i64** %Hp_Var
  %ln6FO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6FL( i64* %Base_Arg, i64* %ln6FM, i64* %ln6FN, i64 %ln6FO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6z7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6z7_info$def to i8*)
define internal ghccc void @c6z7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 260, i32 30, i32 0}>
{
n6FP:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6z7
c6z7:
  %ln6FQ = and i64 %R1_Arg, 7
  switch i64 %ln6FQ, label %u6zU [i64 1, label %u6zU
i64 2, label %c6zl]
u6zU:
  %ln6FR = load i64*, i64** %Sp_Var
  %ln6FS = getelementptr inbounds i64, i64* %ln6FR, i32 5
  %ln6FT = ptrtoint i64* %ln6FS to i64
  %ln6FU = inttoptr i64 %ln6FT to i64*
  store i64* %ln6FU, i64** %Sp_Var
  %ln6FV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6zh$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6FW = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6FV( i64* %Base_Arg, i64* %ln6FW, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6zl:
  %ln6FY = load i64*, i64** %Sp_Var
  %ln6FZ = getelementptr inbounds i64, i64* %ln6FY, i32 1
  %ln6G0 = bitcast i64* %ln6FZ to i64*
  %ln6G1 = load i64, i64* %ln6G0, !tbaa !2
  %ln6FX = load i64*, i64** %Sp_Var
  %ln6G2 = getelementptr inbounds i64, i64* %ln6FX, i32 1
  store i64 %ln6G1, i64* %ln6G2, !tbaa !2
  %ln6G4 = load i64*, i64** %Sp_Var
  %ln6G5 = getelementptr inbounds i64, i64* %ln6G4, i32 2
  %ln6G6 = bitcast i64* %ln6G5 to i64*
  %ln6G7 = load i64, i64* %ln6G6, !tbaa !2
  %ln6G3 = load i64*, i64** %Sp_Var
  %ln6G8 = getelementptr inbounds i64, i64* %ln6G3, i32 2
  store i64 %ln6G7, i64* %ln6G8, !tbaa !2
  %ln6Ga = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6Gb = add i64 %ln6Ga, 1
  %ln6G9 = load i64*, i64** %Sp_Var
  %ln6Gc = getelementptr inbounds i64, i64* %ln6G9, i32 3
  store i64 %ln6Gb, i64* %ln6Gc, !tbaa !2
  %ln6Ge = load i64*, i64** %Sp_Var
  %ln6Gf = getelementptr inbounds i64, i64* %ln6Ge, i32 4
  %ln6Gg = bitcast i64* %ln6Gf to i64*
  %ln6Gh = load i64, i64* %ln6Gg, !tbaa !2
  %ln6Gd = load i64*, i64** %Sp_Var
  %ln6Gi = getelementptr inbounds i64, i64* %ln6Gd, i32 4
  store i64 %ln6Gh, i64* %ln6Gi, !tbaa !2
  %ln6Gj = load i64*, i64** %Sp_Var
  %ln6Gk = getelementptr inbounds i64, i64* %ln6Gj, i32 1
  %ln6Gl = ptrtoint i64* %ln6Gk to i64
  %ln6Gm = inttoptr i64 %ln6Gl to i64*
  store i64* %ln6Gm, i64** %Sp_Var
  %ln6Gn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6yA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Go = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Gn( i64* %Base_Arg, i64* %ln6Go, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c6zh = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6zh$def to i8*)
define internal ghccc void @_c6zh$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n6Gp:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6zh
c6zh:
  %ln6Gq = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %ln6Gr = add i64 %ln6Gq, 1
  store i64 %ln6Gr, i64* %R1_Var
  %ln6Gs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln6Gt = bitcast i64* %ln6Gs to i64*
  %ln6Gu = load i64, i64* %ln6Gt, !tbaa !2
  %ln6Gv = inttoptr i64 %ln6Gu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Gw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Gv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln6Gw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfEqPszuzdczsze_closure_struct = type <{i64}>
@Main_zdfEqPszuzdczsze_closure$def = internal global %Main_zdfEqPszuzdczsze_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczsze_info$def to i64)}>
@Main_zdfEqPszuzdczsze_closure = alias i8, bitcast (%Main_zdfEqPszuzdczsze_closure_struct* @Main_zdfEqPszuzdczsze_closure$def to i8*)
@Main_zdfEqPszuzdczsze_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczsze_info$def to i8*)
define ghccc void @Main_zdfEqPszuzdczsze_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 0}>
{
n6GQ:
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6GH
c6GH:
  %ln6GR = load i64*, i64** %Sp_Var
  %ln6GS = getelementptr inbounds i64, i64* %ln6GR, i32 -1
  %ln6GT = ptrtoint i64* %ln6GS to i64
  %ln6GU = icmp ult i64 %ln6GT, %SpLim_Arg
  %ln6GV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6GU, i1 0 )
  br i1 %ln6GV, label %c6GI, label %c6GJ
c6GJ:
  %ln6GX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6GB_info$def to i64
  %ln6GW = load i64*, i64** %Sp_Var
  %ln6GY = getelementptr inbounds i64, i64* %ln6GW, i32 -1
  store i64 %ln6GX, i64* %ln6GY, !tbaa !2
  %ln6GZ = load i64, i64* %R5_Var
  store i64 %ln6GZ, i64* %R5_Var
  %ln6H0 = load i64, i64* %R4_Var
  store i64 %ln6H0, i64* %R4_Var
  %ln6H1 = load i64, i64* %R3_Var
  store i64 %ln6H1, i64* %R3_Var
  %ln6H2 = load i64, i64* %R2_Var
  store i64 %ln6H2, i64* %R2_Var
  %ln6H3 = load i64*, i64** %Sp_Var
  %ln6H4 = getelementptr inbounds i64, i64* %ln6H3, i32 -1
  %ln6H5 = ptrtoint i64* %ln6H4 to i64
  %ln6H6 = inttoptr i64 %ln6H5 to i64*
  store i64* %ln6H6, i64** %Sp_Var
  %ln6H7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczeze_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6H8 = load i64*, i64** %Sp_Var
  %ln6H9 = load i64, i64* %R1_Var
  %ln6Ha = load i64, i64* %R2_Var
  %ln6Hb = load i64, i64* %R3_Var
  %ln6Hc = load i64, i64* %R4_Var
  %ln6Hd = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6H7( i64* %Base_Arg, i64* %ln6H8, i64* %Hp_Arg, i64 %ln6H9, i64 %ln6Ha, i64 %ln6Hb, i64 %ln6Hc, i64 %ln6Hd, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6GI:
  %ln6He = load i64, i64* %R5_Var
  store i64 %ln6He, i64* %R5_Var
  %ln6Hf = load i64, i64* %R4_Var
  store i64 %ln6Hf, i64* %R4_Var
  %ln6Hg = load i64, i64* %R3_Var
  store i64 %ln6Hg, i64* %R3_Var
  %ln6Hh = load i64, i64* %R2_Var
  store i64 %ln6Hh, i64* %R2_Var
  %ln6Hi = ptrtoint %Main_zdfEqPszuzdczsze_closure_struct* @Main_zdfEqPszuzdczsze_closure$def to i64
  store i64 %ln6Hi, i64* %R1_Var
  %ln6Hj = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6Hk = bitcast i64* %ln6Hj to i64*
  %ln6Hl = load i64, i64* %ln6Hk, !tbaa !5
  %ln6Hm = inttoptr i64 %ln6Hl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Hn = load i64*, i64** %Sp_Var
  %ln6Ho = load i64, i64* %R1_Var
  %ln6Hp = load i64, i64* %R2_Var
  %ln6Hq = load i64, i64* %R3_Var
  %ln6Hr = load i64, i64* %R4_Var
  %ln6Hs = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Hm( i64* %Base_Arg, i64* %ln6Hn, i64* %Hp_Arg, i64 %ln6Ho, i64 %ln6Hp, i64 %ln6Hq, i64 %ln6Hr, i64 %ln6Hs, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6GB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6GB_info$def to i8*)
define internal ghccc void @c6GB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n6Ht:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6GB
c6GB:
  %ln6Hu = load i64, i64* %R1_Var
  %ln6Hv = and i64 %ln6Hu, 7
  switch i64 %ln6Hv, label %c6GE [i64 1, label %c6GE
i64 2, label %c6GF]
c6GE:
  %ln6Hw = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln6Hx = add i64 %ln6Hw, 2
  store i64 %ln6Hx, i64* %R1_Var
  %ln6Hy = load i64*, i64** %Sp_Var
  %ln6Hz = getelementptr inbounds i64, i64* %ln6Hy, i32 1
  %ln6HA = ptrtoint i64* %ln6Hz to i64
  %ln6HB = inttoptr i64 %ln6HA to i64*
  store i64* %ln6HB, i64** %Sp_Var
  %ln6HC = load i64*, i64** %Sp_Var
  %ln6HD = getelementptr inbounds i64, i64* %ln6HC, i32 0
  %ln6HE = bitcast i64* %ln6HD to i64*
  %ln6HF = load i64, i64* %ln6HE, !tbaa !2
  %ln6HG = inttoptr i64 %ln6HF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6HH = load i64*, i64** %Sp_Var
  %ln6HI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6HG( i64* %Base_Arg, i64* %ln6HH, i64* %Hp_Arg, i64 %ln6HI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6GF:
  %ln6HJ = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %ln6HK = add i64 %ln6HJ, 1
  store i64 %ln6HK, i64* %R1_Var
  %ln6HL = load i64*, i64** %Sp_Var
  %ln6HM = getelementptr inbounds i64, i64* %ln6HL, i32 1
  %ln6HN = ptrtoint i64* %ln6HM to i64
  %ln6HO = inttoptr i64 %ln6HN to i64*
  store i64* %ln6HO, i64** %Sp_Var
  %ln6HP = load i64*, i64** %Sp_Var
  %ln6HQ = getelementptr inbounds i64, i64* %ln6HP, i32 0
  %ln6HR = bitcast i64* %ln6HQ to i64*
  %ln6HS = load i64, i64* %ln6HR, !tbaa !2
  %ln6HT = inttoptr i64 %ln6HS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6HU = load i64*, i64** %Sp_Var
  %ln6HV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6HT( i64* %Base_Arg, i64* %ln6HU, i64* %Hp_Arg, i64 %ln6HV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfEqPs_closure_struct = type <{i64}>
@Main_zdfEqPs_closure$def = internal global %Main_zdfEqPs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPs_info$def to i64)}>
@Main_zdfEqPs_closure = alias i8, bitcast (%Main_zdfEqPs_closure_struct* @Main_zdfEqPs_closure$def to i8*)
@s5ar_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ar_info$def to i8*)
define internal ghccc void @s5ar_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 0}>
{
n6Im:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6I5
c6I5:
  %ln6In = load i64, i64* %R3_Var
  store i64 %ln6In, i64* %R5_Var
  %ln6Io = load i64, i64* %R2_Var
  store i64 %ln6Io, i64* %R4_Var
  %ln6Ip = add i64 %R1_Arg, 14
  %ln6Iq = inttoptr i64 %ln6Ip to i64*
  %ln6Ir = load i64, i64* %ln6Iq, !tbaa !4
  store i64 %ln6Ir, i64* %R3_Var
  %ln6Is = add i64 %R1_Arg, 6
  %ln6It = inttoptr i64 %ln6Is to i64*
  %ln6Iu = load i64, i64* %ln6It, !tbaa !4
  store i64 %ln6Iu, i64* %R2_Var
  %ln6Iv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczsze_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Iw = load i64, i64* %R2_Var
  %ln6Ix = load i64, i64* %R3_Var
  %ln6Iy = load i64, i64* %R4_Var
  %ln6Iz = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Iv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6Iw, i64 %ln6Ix, i64 %ln6Iy, i64 %ln6Iz, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5aq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5aq_info$def to i8*)
define internal ghccc void @s5aq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 0}>
{
n6IA:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6Id
c6Id:
  %ln6IB = load i64, i64* %R3_Var
  store i64 %ln6IB, i64* %R5_Var
  %ln6IC = load i64, i64* %R2_Var
  store i64 %ln6IC, i64* %R4_Var
  %ln6ID = add i64 %R1_Arg, 14
  %ln6IE = inttoptr i64 %ln6ID to i64*
  %ln6IF = load i64, i64* %ln6IE, !tbaa !4
  store i64 %ln6IF, i64* %R3_Var
  %ln6IG = add i64 %R1_Arg, 6
  %ln6IH = inttoptr i64 %ln6IG to i64*
  %ln6II = load i64, i64* %ln6IH, !tbaa !4
  store i64 %ln6II, i64* %R2_Var
  %ln6IJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPszuzdczeze_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6IK = load i64, i64* %R2_Var
  %ln6IL = load i64, i64* %R3_Var
  %ln6IM = load i64, i64* %R4_Var
  %ln6IN = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6IJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6IK, i64 %ln6IL, i64 %ln6IM, i64 %ln6IN, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfEqPs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfEqPs_info$def to i8*)
define ghccc void @Main_zdfEqPs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n6IO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6Ih
c6Ih:
  %ln6IP = load i64*, i64** %Hp_Var
  %ln6IQ = getelementptr inbounds i64, i64* %ln6IP, i32 9
  %ln6IR = ptrtoint i64* %ln6IQ to i64
  %ln6IS = inttoptr i64 %ln6IR to i64*
  store i64* %ln6IS, i64** %Hp_Var
  %ln6IT = load i64*, i64** %Hp_Var
  %ln6IU = ptrtoint i64* %ln6IT to i64
  %ln6IV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6IW = bitcast i64* %ln6IV to i64*
  %ln6IX = load i64, i64* %ln6IW, !tbaa !5
  %ln6IY = icmp ugt i64 %ln6IU, %ln6IX
  %ln6IZ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6IY, i1 0 )
  br i1 %ln6IZ, label %c6Il, label %c6Ik
c6Ik:
  %ln6J1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ar_info$def to i64
  %ln6J0 = load i64*, i64** %Hp_Var
  %ln6J2 = getelementptr inbounds i64, i64* %ln6J0, i32 -8
  store i64 %ln6J1, i64* %ln6J2, !tbaa !3
  %ln6J4 = load i64, i64* %R2_Var
  %ln6J3 = load i64*, i64** %Hp_Var
  %ln6J5 = getelementptr inbounds i64, i64* %ln6J3, i32 -7
  store i64 %ln6J4, i64* %ln6J5, !tbaa !3
  %ln6J7 = load i64, i64* %R3_Var
  %ln6J6 = load i64*, i64** %Hp_Var
  %ln6J8 = getelementptr inbounds i64, i64* %ln6J6, i32 -6
  store i64 %ln6J7, i64* %ln6J8, !tbaa !3
  %ln6Ja = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5aq_info$def to i64
  %ln6J9 = load i64*, i64** %Hp_Var
  %ln6Jb = getelementptr inbounds i64, i64* %ln6J9, i32 -5
  store i64 %ln6Ja, i64* %ln6Jb, !tbaa !3
  %ln6Jd = load i64, i64* %R2_Var
  %ln6Jc = load i64*, i64** %Hp_Var
  %ln6Je = getelementptr inbounds i64, i64* %ln6Jc, i32 -4
  store i64 %ln6Jd, i64* %ln6Je, !tbaa !3
  %ln6Jg = load i64, i64* %R3_Var
  %ln6Jf = load i64*, i64** %Hp_Var
  %ln6Jh = getelementptr inbounds i64, i64* %ln6Jf, i32 -3
  store i64 %ln6Jg, i64* %ln6Jh, !tbaa !3
  %ln6Jj = ptrtoint i8* @ghczmprim_GHCziClasses_CZCEq_con_info to i64
  %ln6Ji = load i64*, i64** %Hp_Var
  %ln6Jk = getelementptr inbounds i64, i64* %ln6Ji, i32 -2
  store i64 %ln6Jj, i64* %ln6Jk, !tbaa !3
  %ln6Jn = load i64*, i64** %Hp_Var
  %ln6Jo = ptrtoint i64* %ln6Jn to i64
  %ln6Jp = add i64 %ln6Jo, -38
  %ln6Jl = load i64*, i64** %Hp_Var
  %ln6Jq = getelementptr inbounds i64, i64* %ln6Jl, i32 -1
  store i64 %ln6Jp, i64* %ln6Jq, !tbaa !3
  %ln6Jt = load i64*, i64** %Hp_Var
  %ln6Ju = ptrtoint i64* %ln6Jt to i64
  %ln6Jv = add i64 %ln6Ju, -62
  %ln6Jr = load i64*, i64** %Hp_Var
  %ln6Jw = getelementptr inbounds i64, i64* %ln6Jr, i32 0
  store i64 %ln6Jv, i64* %ln6Jw, !tbaa !3
  %ln6Jy = load i64*, i64** %Hp_Var
  %ln6Jz = ptrtoint i64* %ln6Jy to i64
  %ln6JA = add i64 %ln6Jz, -15
  store i64 %ln6JA, i64* %R1_Var
  %ln6JB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln6JC = bitcast i64* %ln6JB to i64*
  %ln6JD = load i64, i64* %ln6JC, !tbaa !2
  %ln6JE = inttoptr i64 %ln6JD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6JF = load i64*, i64** %Hp_Var
  %ln6JG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6JE( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln6JF, i64 %ln6JG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6Il:
  %ln6JH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %ln6JH, !tbaa !5
  %ln6JI = load i64, i64* %R3_Var
  store i64 %ln6JI, i64* %R3_Var
  %ln6JJ = load i64, i64* %R2_Var
  store i64 %ln6JJ, i64* %R2_Var
  %ln6JK = ptrtoint %Main_zdfEqPs_closure_struct* @Main_zdfEqPs_closure$def to i64
  store i64 %ln6JK, i64* %R1_Var
  %ln6JL = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6JM = bitcast i64* %ln6JL to i64*
  %ln6JN = load i64, i64* %ln6JM, !tbaa !5
  %ln6JO = inttoptr i64 %ln6JN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6JP = load i64*, i64** %Hp_Var
  %ln6JQ = load i64, i64* %R1_Var
  %ln6JR = load i64, i64* %R2_Var
  %ln6JS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6JO( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln6JP, i64 %ln6JQ, i64 %ln6JR, i64 %ln6JS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdszdczs_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdfFloatingPszuzdszdczs_closure$def = internal global %Main_zdfFloatingPszuzdszdczs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64), i64 ptrtoint (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i64), i64 ptrtoint (%r55x_closure_struct* @r55x_closure$def to i64), i64 ptrtoint (%r55y_closure_struct* @r55y_closure$def to i64), i64 0}>
@Main_zdfFloatingPszuzdszdczs_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i8*)
@s5b4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5b4_info$def to i8*)
define internal ghccc void @s5b4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5b4_info$def to i64)) to i32),i32 0)}>
{
n6Ns:
  %ls5aX = alloca i64, i32 1
  %ls5aY = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6Kq
c6Kq:
  %ln6Nt = load i64*, i64** %Sp_Var
  %ln6Nu = getelementptr inbounds i64, i64* %ln6Nt, i32 -5
  %ln6Nv = ptrtoint i64* %ln6Nu to i64
  %ln6Nw = icmp ult i64 %ln6Nv, %SpLim_Arg
  %ln6Nx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6Nw, i1 0 )
  br i1 %ln6Nx, label %c6Kw, label %c6Kx
c6Kx:
  %ln6Nz = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6Ny = load i64*, i64** %Sp_Var
  %ln6NA = getelementptr inbounds i64, i64* %ln6Ny, i32 -2
  store i64 %ln6Nz, i64* %ln6NA, !tbaa !2
  %ln6NC = load i64, i64* %R1_Var
  %ln6NB = load i64*, i64** %Sp_Var
  %ln6ND = getelementptr inbounds i64, i64* %ln6NB, i32 -1
  store i64 %ln6NC, i64* %ln6ND, !tbaa !2
  %ln6NF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kn_info$def to i64
  %ln6NE = load i64*, i64** %Sp_Var
  %ln6NG = getelementptr inbounds i64, i64* %ln6NE, i32 -5
  store i64 %ln6NF, i64* %ln6NG, !tbaa !2
  %ln6NJ = load i64, i64* %R1_Var
  %ln6NK = add i64 %ln6NJ, 16
  %ln6NL = inttoptr i64 %ln6NK to i64*
  %ln6NM = load i64, i64* %ln6NL, !tbaa !4
  store i64 %ln6NM, i64* %ls5aX
  %ln6NP = load i64, i64* %R1_Var
  %ln6NQ = add i64 %ln6NP, 24
  %ln6NR = inttoptr i64 %ln6NQ to i64*
  %ln6NS = load i64, i64* %ln6NR, !tbaa !4
  store i64 %ln6NS, i64* %ls5aY
  %ln6NV = load i64, i64* %R1_Var
  %ln6NW = add i64 %ln6NV, 32
  %ln6NX = inttoptr i64 %ln6NW to i64*
  %ln6NY = load i64, i64* %ln6NX, !tbaa !4
  store i64 %ln6NY, i64* %R1_Var
  %ln6O0 = load i64, i64* %ls5aX
  %ln6NZ = load i64*, i64** %Sp_Var
  %ln6O1 = getelementptr inbounds i64, i64* %ln6NZ, i32 -4
  store i64 %ln6O0, i64* %ln6O1, !tbaa !2
  %ln6O3 = load i64, i64* %ls5aY
  %ln6O2 = load i64*, i64** %Sp_Var
  %ln6O4 = getelementptr inbounds i64, i64* %ln6O2, i32 -3
  store i64 %ln6O3, i64* %ln6O4, !tbaa !2
  %ln6O5 = load i64*, i64** %Sp_Var
  %ln6O6 = getelementptr inbounds i64, i64* %ln6O5, i32 -5
  %ln6O7 = ptrtoint i64* %ln6O6 to i64
  %ln6O8 = inttoptr i64 %ln6O7 to i64*
  store i64* %ln6O8, i64** %Sp_Var
  %ln6O9 = load i64, i64* %R1_Var
  %ln6Oa = and i64 %ln6O9, 7
  %ln6Ob = icmp ne i64 %ln6Oa, 0
  br i1 %ln6Ob, label %u6KC, label %c6Ko
c6Ko:
  %ln6Od = load i64, i64* %R1_Var
  %ln6Oe = inttoptr i64 %ln6Od to i64*
  %ln6Of = load i64, i64* %ln6Oe, !tbaa !4
  %ln6Og = inttoptr i64 %ln6Of to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Oh = load i64*, i64** %Sp_Var
  %ln6Oi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Og( i64* %Base_Arg, i64* %ln6Oh, i64* %Hp_Arg, i64 %ln6Oi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6KC:
  %ln6Oj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Ok = load i64*, i64** %Sp_Var
  %ln6Ol = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Oj( i64* %Base_Arg, i64* %ln6Ok, i64* %Hp_Arg, i64 %ln6Ol, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6Kw:
  %ln6Om = load i64, i64* %R1_Var
  store i64 %ln6Om, i64* %R1_Var
  %ln6On = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6Oo = bitcast i64* %ln6On to i64*
  %ln6Op = load i64, i64* %ln6Oo, !tbaa !5
  %ln6Oq = inttoptr i64 %ln6Op to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Or = load i64*, i64** %Sp_Var
  %ln6Os = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Oq( i64* %Base_Arg, i64* %ln6Or, i64* %Hp_Arg, i64 %ln6Os, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Kn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kn_info$def to i8*)
define internal ghccc void @c6Kn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kn_info$def to i64)) to i32),i32 0)}>
{
n6Ot:
  %ls5aY = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6Kn
c6Kn:
  %ln6Ou = load i64*, i64** %Sp_Var
  %ln6Ov = getelementptr inbounds i64, i64* %ln6Ou, i32 2
  %ln6Ow = bitcast i64* %ln6Ov to i64*
  %ln6Ox = load i64, i64* %ln6Ow, !tbaa !2
  store i64 %ln6Ox, i64* %ls5aY
  %ln6Oz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kt_info$def to i64
  %ln6Oy = load i64*, i64** %Sp_Var
  %ln6OA = getelementptr inbounds i64, i64* %ln6Oy, i32 2
  store i64 %ln6Oz, i64* %ln6OA, !tbaa !2
  %ln6OB = add i64 %R1_Arg, 15
  %ln6OC = inttoptr i64 %ln6OB to i64*
  %ln6OD = load i64, i64* %ln6OC, !tbaa !4
  store i64 %ln6OD, i64* %R5_Var
  %ln6OE = add i64 %R1_Arg, 7
  %ln6OF = inttoptr i64 %ln6OE to i64*
  %ln6OG = load i64, i64* %ln6OF, !tbaa !4
  store i64 %ln6OG, i64* %R4_Var
  %ln6OH = load i64, i64* %ls5aY
  store i64 %ln6OH, i64* %R3_Var
  %ln6OI = load i64*, i64** %Sp_Var
  %ln6OJ = getelementptr inbounds i64, i64* %ln6OI, i32 1
  %ln6OK = bitcast i64* %ln6OJ to i64*
  %ln6OL = load i64, i64* %ln6OK, !tbaa !2
  store i64 %ln6OL, i64* %R2_Var
  %ln6OM = load i64*, i64** %Sp_Var
  %ln6ON = getelementptr inbounds i64, i64* %ln6OM, i32 2
  %ln6OO = ptrtoint i64* %ln6ON to i64
  %ln6OP = inttoptr i64 %ln6OO to i64*
  store i64* %ln6OP, i64** %Sp_Var
  %ln6OQ = bitcast i8* @base_GHCziReal_zdwzdszdczs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6OR = load i64*, i64** %Sp_Var
  %ln6OS = load i64, i64* %R2_Var
  %ln6OT = load i64, i64* %R3_Var
  %ln6OU = load i64, i64* %R4_Var
  %ln6OV = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6OQ( i64* %Base_Arg, i64* %ln6OR, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6OS, i64 %ln6OT, i64 %ln6OU, i64 %ln6OV, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Kt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kt_info$def to i8*)
define internal ghccc void @c6Kt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n6OW:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c6Kt
c6Kt:
  %ln6OX = load i64*, i64** %Hp_Var
  %ln6OY = getelementptr inbounds i64, i64* %ln6OX, i32 3
  %ln6OZ = ptrtoint i64* %ln6OY to i64
  %ln6P0 = inttoptr i64 %ln6OZ to i64*
  store i64* %ln6P0, i64** %Hp_Var
  %ln6P1 = load i64*, i64** %Hp_Var
  %ln6P2 = ptrtoint i64* %ln6P1 to i64
  %ln6P3 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6P4 = bitcast i64* %ln6P3 to i64*
  %ln6P5 = load i64, i64* %ln6P4, !tbaa !5
  %ln6P6 = icmp ugt i64 %ln6P2, %ln6P5
  %ln6P7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6P6, i1 0 )
  br i1 %ln6P7, label %c6KB, label %c6KA
c6KA:
  %ln6P9 = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln6P8 = load i64*, i64** %Hp_Var
  %ln6Pa = getelementptr inbounds i64, i64* %ln6P8, i32 -2
  store i64 %ln6P9, i64* %ln6Pa, !tbaa !3
  %ln6Pc = load i64, i64* %R1_Var
  %ln6Pb = load i64*, i64** %Hp_Var
  %ln6Pd = getelementptr inbounds i64, i64* %ln6Pb, i32 -1
  store i64 %ln6Pc, i64* %ln6Pd, !tbaa !3
  %ln6Pf = load i64, i64* %R2_Var
  %ln6Pe = load i64*, i64** %Hp_Var
  %ln6Pg = getelementptr inbounds i64, i64* %ln6Pe, i32 0
  store i64 %ln6Pf, i64* %ln6Pg, !tbaa !3
  %ln6Pi = load i64*, i64** %Hp_Var
  %ln6Pj = ptrtoint i64* %ln6Pi to i64
  %ln6Pk = add i64 %ln6Pj, -15
  store i64 %ln6Pk, i64* %R1_Var
  %ln6Pl = load i64*, i64** %Sp_Var
  %ln6Pm = getelementptr inbounds i64, i64* %ln6Pl, i32 1
  %ln6Pn = ptrtoint i64* %ln6Pm to i64
  %ln6Po = inttoptr i64 %ln6Pn to i64*
  store i64* %ln6Po, i64** %Sp_Var
  %ln6Pp = load i64*, i64** %Sp_Var
  %ln6Pq = getelementptr inbounds i64, i64* %ln6Pp, i32 0
  %ln6Pr = bitcast i64* %ln6Pq to i64*
  %ln6Ps = load i64, i64* %ln6Pr, !tbaa !2
  %ln6Pt = inttoptr i64 %ln6Ps to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Pu = load i64*, i64** %Sp_Var
  %ln6Pv = load i64*, i64** %Hp_Var
  %ln6Pw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Pt( i64* %Base_Arg, i64* %ln6Pu, i64* %ln6Pv, i64 %ln6Pw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6KB:
  %ln6Px = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln6Px, !tbaa !5
  %ln6Py = load i64, i64* %R2_Var
  store i64 %ln6Py, i64* %R2_Var
  %ln6Pz = load i64, i64* %R1_Var
  store i64 %ln6Pz, i64* %R1_Var
  %ln6PA = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6PB = load i64*, i64** %Sp_Var
  %ln6PC = load i64*, i64** %Hp_Var
  %ln6PD = load i64, i64* %R1_Var
  %ln6PE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6PA( i64* %Base_Arg, i64* %ln6PB, i64* %ln6PC, i64 %ln6PD, i64 %ln6PE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5be_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5be_info$def to i8*)
define internal ghccc void @s5be_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5be_info$def to i64)) to i32),i32 0)}>
{
n6PF:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6KJ
c6KJ:
  %ln6PG = load i64*, i64** %Sp_Var
  %ln6PH = getelementptr inbounds i64, i64* %ln6PG, i32 -5
  %ln6PI = ptrtoint i64* %ln6PH to i64
  %ln6PJ = icmp ult i64 %ln6PI, %SpLim_Arg
  %ln6PK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6PJ, i1 0 )
  br i1 %ln6PK, label %c6KR, label %c6KS
c6KS:
  %ln6PM = ptrtoint i8* @stg_upd_frame_info to i64
  %ln6PL = load i64*, i64** %Sp_Var
  %ln6PN = getelementptr inbounds i64, i64* %ln6PL, i32 -2
  store i64 %ln6PM, i64* %ln6PN, !tbaa !2
  %ln6PP = load i64, i64* %R1_Var
  %ln6PO = load i64*, i64** %Sp_Var
  %ln6PQ = getelementptr inbounds i64, i64* %ln6PO, i32 -1
  store i64 %ln6PP, i64* %ln6PQ, !tbaa !2
  %ln6PS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KH_info$def to i64
  %ln6PR = load i64*, i64** %Sp_Var
  %ln6PT = getelementptr inbounds i64, i64* %ln6PR, i32 -5
  store i64 %ln6PS, i64* %ln6PT, !tbaa !2
  %ln6PW = load i64, i64* %R1_Var
  %ln6PX = add i64 %ln6PW, 40
  %ln6PY = inttoptr i64 %ln6PX to i64*
  %ln6PZ = load i64, i64* %ln6PY, !tbaa !4
  store i64 %ln6PZ, i64* %R3_Var
  %ln6Q2 = load i64, i64* %R1_Var
  %ln6Q3 = add i64 %ln6Q2, 32
  %ln6Q4 = inttoptr i64 %ln6Q3 to i64*
  %ln6Q5 = load i64, i64* %ln6Q4, !tbaa !4
  store i64 %ln6Q5, i64* %R2_Var
  %ln6Q9 = load i64, i64* %R1_Var
  %ln6Qa = add i64 %ln6Q9, 24
  %ln6Qb = inttoptr i64 %ln6Qa to i64*
  %ln6Qc = load i64, i64* %ln6Qb, !tbaa !4
  %ln6Q6 = load i64*, i64** %Sp_Var
  %ln6Qd = getelementptr inbounds i64, i64* %ln6Q6, i32 -4
  store i64 %ln6Qc, i64* %ln6Qd, !tbaa !2
  %ln6Qh = load i64, i64* %R1_Var
  %ln6Qi = add i64 %ln6Qh, 16
  %ln6Qj = inttoptr i64 %ln6Qi to i64*
  %ln6Qk = load i64, i64* %ln6Qj, !tbaa !4
  %ln6Qe = load i64*, i64** %Sp_Var
  %ln6Ql = getelementptr inbounds i64, i64* %ln6Qe, i32 -3
  store i64 %ln6Qk, i64* %ln6Ql, !tbaa !2
  %ln6Qm = load i64*, i64** %Sp_Var
  %ln6Qn = getelementptr inbounds i64, i64* %ln6Qm, i32 -5
  %ln6Qo = ptrtoint i64* %ln6Qn to i64
  %ln6Qp = inttoptr i64 %ln6Qo to i64*
  store i64* %ln6Qp, i64** %Sp_Var
  %ln6Qq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Qr = load i64*, i64** %Sp_Var
  %ln6Qs = load i64, i64* %R1_Var
  %ln6Qt = load i64, i64* %R2_Var
  %ln6Qu = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Qq( i64* %Base_Arg, i64* %ln6Qr, i64* %Hp_Arg, i64 %ln6Qs, i64 %ln6Qt, i64 %ln6Qu, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6KR:
  %ln6Qv = load i64, i64* %R1_Var
  store i64 %ln6Qv, i64* %R1_Var
  %ln6Qw = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln6Qx = bitcast i64* %ln6Qw to i64*
  %ln6Qy = load i64, i64* %ln6Qx, !tbaa !5
  %ln6Qz = inttoptr i64 %ln6Qy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6QA = load i64*, i64** %Sp_Var
  %ln6QB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Qz( i64* %Base_Arg, i64* %ln6QA, i64* %Hp_Arg, i64 %ln6QB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6KH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KH_info$def to i8*)
define internal ghccc void @c6KH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KH_info$def to i64)) to i32),i32 0)}>
{
n6QC:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6KH
c6KH:
  %ln6QD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KM_info$def to i64
  %ln6QE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln6QD, i64* %ln6QE, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %ln6QF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6QG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6QF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6QG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6KM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KM_info$def to i8*)
define internal ghccc void @c6KM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KM_info$def to i64)) to i32),i32 0)}>
{
n6QH:
  %ls5aV = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6KM
c6KM:
  %ln6QI = load i64*, i64** %Sp_Var
  %ln6QJ = getelementptr inbounds i64, i64* %ln6QI, i32 1
  %ln6QK = bitcast i64* %ln6QJ to i64*
  %ln6QL = load i64, i64* %ln6QK, !tbaa !2
  store i64 %ln6QL, i64* %ls5aV
  %ln6QN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KQ_info$def to i64
  %ln6QM = load i64*, i64** %Sp_Var
  %ln6QO = getelementptr inbounds i64, i64* %ln6QM, i32 1
  store i64 %ln6QN, i64* %ln6QO, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %ln6QP = load i64, i64* %ls5aV
  store i64 %ln6QP, i64* %R2_Var
  %ln6QQ = load i64*, i64** %Sp_Var
  %ln6QR = getelementptr inbounds i64, i64* %ln6QQ, i32 1
  %ln6QS = ptrtoint i64* %ln6QR to i64
  %ln6QT = inttoptr i64 %ln6QS to i64*
  store i64* %ln6QT, i64** %Sp_Var
  %ln6QU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6QV = load i64*, i64** %Sp_Var
  %ln6QW = load i64, i64* %R2_Var
  %ln6QX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6QU( i64* %Base_Arg, i64* %ln6QV, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6QW, i64 %ln6QX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6KQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KQ_info$def to i8*)
define internal ghccc void @c6KQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6KQ_info$def to i64)) to i32),i32 0)}>
{
n6QY:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6KQ
c6KQ:
  %ln6QZ = load i64*, i64** %Sp_Var
  %ln6R0 = getelementptr inbounds i64, i64* %ln6QZ, i32 1
  %ln6R1 = bitcast i64* %ln6R0 to i64*
  %ln6R2 = load i64, i64* %ln6R1, !tbaa !2
  store i64 %ln6R2, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln6R3 = load i64*, i64** %Sp_Var
  %ln6R4 = getelementptr inbounds i64, i64* %ln6R3, i32 2
  %ln6R5 = ptrtoint i64* %ln6R4 to i64
  %ln6R6 = inttoptr i64 %ln6R5 to i64*
  store i64* %ln6R6, i64** %Sp_Var
  %ln6R7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6R8 = load i64*, i64** %Sp_Var
  %ln6R9 = load i64, i64* %R2_Var
  %ln6Ra = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6R7( i64* %Base_Arg, i64* %ln6R8, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6R9, i64 %ln6Ra, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFloatingPszuzdszdczs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdszdczs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 6, i32 14, i32 0}>
{
n6Rb:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6L3
c6L3:
  %ln6Rc = load i64*, i64** %Sp_Var
  %ln6Rd = getelementptr inbounds i64, i64* %ln6Rc, i32 -7
  %ln6Re = ptrtoint i64* %ln6Rd to i64
  %ln6Rf = icmp ult i64 %ln6Re, %SpLim_Arg
  %ln6Rg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6Rf, i1 0 )
  br i1 %ln6Rg, label %c6L4, label %u6N1
u6N1:
  %ln6Ri = load i64, i64* %R2_Var
  %ln6Rh = load i64*, i64** %Sp_Var
  %ln6Rj = getelementptr inbounds i64, i64* %ln6Rh, i32 -2
  store i64 %ln6Ri, i64* %ln6Rj, !tbaa !2
  %ln6Rl = load i64, i64* %R3_Var
  %ln6Rk = load i64*, i64** %Sp_Var
  %ln6Rm = getelementptr inbounds i64, i64* %ln6Rk, i32 -1
  store i64 %ln6Rl, i64* %ln6Rm, !tbaa !2
  %ln6Rn = load i64*, i64** %Sp_Var
  %ln6Ro = getelementptr inbounds i64, i64* %ln6Rn, i32 -2
  %ln6Rp = ptrtoint i64* %ln6Ro to i64
  %ln6Rq = inttoptr i64 %ln6Rp to i64*
  store i64* %ln6Rq, i64** %Sp_Var
  %ln6Rr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6JU$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Rs = load i64*, i64** %Sp_Var
  %ln6Rt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Rr( i64* %Base_Arg, i64* %ln6Rs, i64* %Hp_Arg, i64 %ln6Rt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6L4:
  %ln6Ru = load i64, i64* %R3_Var
  store i64 %ln6Ru, i64* %R3_Var
  %ln6Rv = load i64, i64* %R2_Var
  store i64 %ln6Rv, i64* %R2_Var
  %ln6Rw = ptrtoint %Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64
  store i64 %ln6Rw, i64* %R1_Var
  %ln6Rx = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln6Ry = bitcast i64* %ln6Rx to i64*
  %ln6Rz = load i64, i64* %ln6Ry, !tbaa !5
  %ln6RA = inttoptr i64 %ln6Rz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6RB = load i64*, i64** %Sp_Var
  %ln6RC = load i64, i64* %R1_Var
  %ln6RD = load i64, i64* %R2_Var
  %ln6RE = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6RA( i64* %Base_Arg, i64* %ln6RB, i64* %Hp_Arg, i64 %ln6RC, i64 %ln6RD, i64 %ln6RE, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c6JU = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6JU$def to i8*)
define internal ghccc void @_c6JU$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n6RF:
  %ls5aJ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6JU
c6JU:
  %ln6RG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln6RH = bitcast i64* %ln6RG to i64*
  %ln6RI = load i64, i64* %ln6RH, !tbaa !2
  store i64 %ln6RI, i64* %ls5aJ
  %ln6RJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6JX_info$def to i64
  %ln6RK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln6RJ, i64* %ln6RK, !tbaa !2
  %ln6RL = load i64, i64* %ls5aJ
  store i64 %ln6RL, i64* %R1_Var
  %ln6RM = load i64, i64* %R1_Var
  %ln6RN = and i64 %ln6RM, 7
  %ln6RO = icmp ne i64 %ln6RN, 0
  br i1 %ln6RO, label %u6Nb, label %c6JY
c6JY:
  %ln6RQ = load i64, i64* %R1_Var
  %ln6RR = inttoptr i64 %ln6RQ to i64*
  %ln6RS = load i64, i64* %ln6RR, !tbaa !4
  %ln6RT = inttoptr i64 %ln6RS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6RU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6RT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln6RU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nb:
  %ln6RV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6JX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6RW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6RV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln6RW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6JX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6JX_info$def to i8*)
define internal ghccc void @c6JX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6JX_info$def to i64)) to i32),i32 0)}>
{
n6RX:
  %ls5aK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5aV = alloca i64, i32 1
  br label %c6JX
c6JX:
  %ln6RY = load i64, i64* %R1_Var
  %ln6RZ = and i64 %ln6RY, 7
  switch i64 %ln6RZ, label %c6L0 [i64 1, label %c6L0
i64 2, label %c6L1]
c6L0:
  %ln6S0 = load i64*, i64** %Sp_Var
  %ln6S1 = getelementptr inbounds i64, i64* %ln6S0, i32 1
  %ln6S2 = bitcast i64* %ln6S1 to i64*
  %ln6S3 = load i64, i64* %ln6S2, !tbaa !2
  store i64 %ln6S3, i64* %ls5aK
  %ln6S5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6L7_info$def to i64
  %ln6S4 = load i64*, i64** %Sp_Var
  %ln6S6 = getelementptr inbounds i64, i64* %ln6S4, i32 1
  store i64 %ln6S5, i64* %ln6S6, !tbaa !2
  %ln6S7 = load i64, i64* %ls5aK
  store i64 %ln6S7, i64* %R1_Var
  %ln6S8 = load i64*, i64** %Sp_Var
  %ln6S9 = getelementptr inbounds i64, i64* %ln6S8, i32 1
  %ln6Sa = ptrtoint i64* %ln6S9 to i64
  %ln6Sb = inttoptr i64 %ln6Sa to i64*
  store i64* %ln6Sb, i64** %Sp_Var
  %ln6Sc = load i64, i64* %R1_Var
  %ln6Sd = and i64 %ln6Sc, 7
  %ln6Se = icmp ne i64 %ln6Sd, 0
  br i1 %ln6Se, label %u6Nc, label %c6L9
c6L9:
  %ln6Sg = load i64, i64* %R1_Var
  %ln6Sh = inttoptr i64 %ln6Sg to i64*
  %ln6Si = load i64, i64* %ln6Sh, !tbaa !4
  %ln6Sj = inttoptr i64 %ln6Si to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Sk = load i64*, i64** %Sp_Var
  %ln6Sl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Sj( i64* %Base_Arg, i64* %ln6Sk, i64* %Hp_Arg, i64 %ln6Sl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nc:
  %ln6Sm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6L7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Sn = load i64*, i64** %Sp_Var
  %ln6So = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Sm( i64* %Base_Arg, i64* %ln6Sn, i64* %Hp_Arg, i64 %ln6So, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6L1:
  %ln6Sq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6K3_info$def to i64
  %ln6Sp = load i64*, i64** %Sp_Var
  %ln6Sr = getelementptr inbounds i64, i64* %ln6Sp, i32 -1
  store i64 %ln6Sq, i64* %ln6Sr, !tbaa !2
  %ln6Su = load i64, i64* %R1_Var
  %ln6Sv = add i64 %ln6Su, 14
  %ln6Sw = inttoptr i64 %ln6Sv to i64*
  %ln6Sx = load i64, i64* %ln6Sw, !tbaa !4
  store i64 %ln6Sx, i64* %ls5aV
  %ln6SA = load i64, i64* %R1_Var
  %ln6SB = add i64 %ln6SA, 6
  %ln6SC = inttoptr i64 %ln6SB to i64*
  %ln6SD = load i64, i64* %ln6SC, !tbaa !4
  store i64 %ln6SD, i64* %R1_Var
  %ln6SF = load i64, i64* %ls5aV
  %ln6SE = load i64*, i64** %Sp_Var
  %ln6SG = getelementptr inbounds i64, i64* %ln6SE, i32 0
  store i64 %ln6SF, i64* %ln6SG, !tbaa !2
  %ln6SH = load i64*, i64** %Sp_Var
  %ln6SI = getelementptr inbounds i64, i64* %ln6SH, i32 -1
  %ln6SJ = ptrtoint i64* %ln6SI to i64
  %ln6SK = inttoptr i64 %ln6SJ to i64*
  store i64* %ln6SK, i64** %Sp_Var
  %ln6SL = load i64, i64* %R1_Var
  %ln6SM = and i64 %ln6SL, 7
  %ln6SN = icmp ne i64 %ln6SM, 0
  br i1 %ln6SN, label %u6Nd, label %c6K4
c6K4:
  %ln6SP = load i64, i64* %R1_Var
  %ln6SQ = inttoptr i64 %ln6SP to i64*
  %ln6SR = load i64, i64* %ln6SQ, !tbaa !4
  %ln6SS = inttoptr i64 %ln6SR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ST = load i64*, i64** %Sp_Var
  %ln6SU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6SS( i64* %Base_Arg, i64* %ln6ST, i64* %Hp_Arg, i64 %ln6SU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nd:
  %ln6SV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6K3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6SW = load i64*, i64** %Sp_Var
  %ln6SX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6SV( i64* %Base_Arg, i64* %ln6SW, i64* %Hp_Arg, i64 %ln6SX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6K3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6K3_info$def to i8*)
define internal ghccc void @c6K3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6K3_info$def to i64)) to i32),i32 0)}>
{
n6SY:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %ls5aX = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6K3
c6K3:
  %ln6T0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6LN_info$def to i64
  %ln6SZ = load i64*, i64** %Sp_Var
  %ln6T1 = getelementptr inbounds i64, i64* %ln6SZ, i32 -2
  store i64 %ln6T0, i64* %ln6T1, !tbaa !2
  %ln6T2 = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln6T3 = add i64 %ln6T2, 1
  store i64 %ln6T3, i64* %R3_Var
  %ln6T4 = add i64 %R1_Arg, 7
  %ln6T5 = inttoptr i64 %ln6T4 to i64*
  %ln6T6 = load i64, i64* %ln6T5, !tbaa !4
  store i64 %ln6T6, i64* %ls5aX
  %ln6T7 = load i64, i64* %ls5aX
  store i64 %ln6T7, i64* %R2_Var
  %ln6T9 = add i64 %R1_Arg, 15
  %ln6Ta = inttoptr i64 %ln6T9 to i64*
  %ln6Tb = load i64, i64* %ln6Ta, !tbaa !4
  %ln6T8 = load i64*, i64** %Sp_Var
  %ln6Tc = getelementptr inbounds i64, i64* %ln6T8, i32 -1
  store i64 %ln6Tb, i64* %ln6Tc, !tbaa !2
  %ln6Te = load i64, i64* %ls5aX
  %ln6Td = load i64*, i64** %Sp_Var
  %ln6Tf = getelementptr inbounds i64, i64* %ln6Td, i32 0
  store i64 %ln6Te, i64* %ln6Tf, !tbaa !2
  %ln6Tg = load i64*, i64** %Sp_Var
  %ln6Th = getelementptr inbounds i64, i64* %ln6Tg, i32 -2
  %ln6Ti = ptrtoint i64* %ln6Th to i64
  %ln6Tj = inttoptr i64 %ln6Ti to i64*
  store i64* %ln6Tj, i64** %Sp_Var
  %ln6Tk = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Tl = load i64*, i64** %Sp_Var
  %ln6Tm = load i64, i64* %R2_Var
  %ln6Tn = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Tk( i64* %Base_Arg, i64* %ln6Tl, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6Tm, i64 %ln6Tn, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6LN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6LN_info$def to i8*)
define internal ghccc void @c6LN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6LN_info$def to i64)) to i32),i32 0)}>
{
n6To:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6LN
c6LN:
  switch i64 %R1_Arg, label %u6N2 [i64 1, label %c6M9]
u6N2:
  %ln6Tp = load i64*, i64** %Sp_Var
  %ln6Tq = getelementptr inbounds i64, i64* %ln6Tp, i32 1
  %ln6Tr = ptrtoint i64* %ln6Tq to i64
  %ln6Ts = inttoptr i64 %ln6Tr to i64*
  store i64* %ln6Ts, i64** %Sp_Var
  %ln6Tt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Tu = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Tt( i64* %Base_Arg, i64* %ln6Tu, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6M9:
  %ln6Tw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6M7_info$def to i64
  %ln6Tv = load i64*, i64** %Sp_Var
  %ln6Tx = getelementptr inbounds i64, i64* %ln6Tv, i32 0
  store i64 %ln6Tw, i64* %ln6Tx, !tbaa !2
  %ln6Ty = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln6Tz = add i64 %ln6Ty, 1
  store i64 %ln6Tz, i64* %R3_Var
  %ln6TA = load i64*, i64** %Sp_Var
  %ln6TB = getelementptr inbounds i64, i64* %ln6TA, i32 1
  %ln6TC = bitcast i64* %ln6TB to i64*
  %ln6TD = load i64, i64* %ln6TC, !tbaa !2
  store i64 %ln6TD, i64* %R2_Var
  %ln6TE = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6TF = load i64*, i64** %Sp_Var
  %ln6TG = load i64, i64* %R2_Var
  %ln6TH = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6TE( i64* %Base_Arg, i64* %ln6TF, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6TG, i64 %ln6TH, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6M7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6M7_info$def to i8*)
define internal ghccc void @c6M7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6M7_info$def to i64)) to i32),i32 0)}>
{
n6TI:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6M7
c6M7:
  %ln6TJ = load i64, i64* %R1_Var
  switch i64 %ln6TJ, label %u6N3 [i64 1, label %c6Mk]
u6N3:
  %ln6TK = load i64*, i64** %Sp_Var
  %ln6TL = getelementptr inbounds i64, i64* %ln6TK, i32 1
  %ln6TM = ptrtoint i64* %ln6TL to i64
  %ln6TN = inttoptr i64 %ln6TM to i64*
  store i64* %ln6TN, i64** %Sp_Var
  %ln6TO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6TP = load i64*, i64** %Sp_Var
  %ln6TQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6TO( i64* %Base_Arg, i64* %ln6TP, i64* %Hp_Arg, i64 %ln6TQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6Mk:
  %ln6TS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mi_info$def to i64
  %ln6TR = load i64*, i64** %Sp_Var
  %ln6TT = getelementptr inbounds i64, i64* %ln6TR, i32 0
  store i64 %ln6TS, i64* %ln6TT, !tbaa !2
  %ln6TU = load i64*, i64** %Sp_Var
  %ln6TV = getelementptr inbounds i64, i64* %ln6TU, i32 4
  %ln6TW = bitcast i64* %ln6TV to i64*
  %ln6TX = load i64, i64* %ln6TW, !tbaa !2
  store i64 %ln6TX, i64* %R1_Var
  %ln6TY = load i64, i64* %R1_Var
  %ln6TZ = and i64 %ln6TY, 7
  %ln6U0 = icmp ne i64 %ln6TZ, 0
  br i1 %ln6U0, label %u6Nk, label %c6Ml
c6Ml:
  %ln6U2 = load i64, i64* %R1_Var
  %ln6U3 = inttoptr i64 %ln6U2 to i64*
  %ln6U4 = load i64, i64* %ln6U3, !tbaa !4
  %ln6U5 = inttoptr i64 %ln6U4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6U6 = load i64*, i64** %Sp_Var
  %ln6U7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6U5( i64* %Base_Arg, i64* %ln6U6, i64* %Hp_Arg, i64 %ln6U7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nk:
  %ln6U8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6U9 = load i64*, i64** %Sp_Var
  %ln6Ua = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6U8( i64* %Base_Arg, i64* %ln6U9, i64* %Hp_Arg, i64 %ln6Ua, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Mi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mi_info$def to i8*)
define internal ghccc void @c6Mi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mi_info$def to i64)) to i32),i32 0)}>
{
n6Ub:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5bj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6Mi
c6Mi:
  %ln6Uc = load i64, i64* %R1_Var
  %ln6Ud = and i64 %ln6Uc, 7
  switch i64 %ln6Ud, label %u6N4 [i64 1, label %u6N4
i64 2, label %c6Mw]
u6N4:
  %ln6Ue = load i64*, i64** %Sp_Var
  %ln6Uf = getelementptr inbounds i64, i64* %ln6Ue, i32 1
  %ln6Ug = ptrtoint i64* %ln6Uf to i64
  %ln6Uh = inttoptr i64 %ln6Ug to i64*
  store i64* %ln6Uh, i64** %Sp_Var
  %ln6Ui = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Uj = load i64*, i64** %Sp_Var
  %ln6Uk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Ui( i64* %Base_Arg, i64* %ln6Uj, i64* %Hp_Arg, i64 %ln6Uk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6Mw:
  %ln6Um = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mu_info$def to i64
  %ln6Ul = load i64*, i64** %Sp_Var
  %ln6Un = getelementptr inbounds i64, i64* %ln6Ul, i32 -1
  store i64 %ln6Um, i64* %ln6Un, !tbaa !2
  %ln6Uq = load i64, i64* %R1_Var
  %ln6Ur = add i64 %ln6Uq, 14
  %ln6Us = inttoptr i64 %ln6Ur to i64*
  %ln6Ut = load i64, i64* %ln6Us, !tbaa !4
  store i64 %ln6Ut, i64* %ls5bj
  %ln6Uw = load i64, i64* %R1_Var
  %ln6Ux = add i64 %ln6Uw, 6
  %ln6Uy = inttoptr i64 %ln6Ux to i64*
  %ln6Uz = load i64, i64* %ln6Uy, !tbaa !4
  store i64 %ln6Uz, i64* %R1_Var
  %ln6UB = load i64, i64* %ls5bj
  %ln6UA = load i64*, i64** %Sp_Var
  %ln6UC = getelementptr inbounds i64, i64* %ln6UA, i32 0
  store i64 %ln6UB, i64* %ln6UC, !tbaa !2
  %ln6UD = load i64*, i64** %Sp_Var
  %ln6UE = getelementptr inbounds i64, i64* %ln6UD, i32 -1
  %ln6UF = ptrtoint i64* %ln6UE to i64
  %ln6UG = inttoptr i64 %ln6UF to i64*
  store i64* %ln6UG, i64** %Sp_Var
  %ln6UH = load i64, i64* %R1_Var
  %ln6UI = and i64 %ln6UH, 7
  %ln6UJ = icmp ne i64 %ln6UI, 0
  br i1 %ln6UJ, label %u6Nm, label %c6Mx
c6Mx:
  %ln6UL = load i64, i64* %R1_Var
  %ln6UM = inttoptr i64 %ln6UL to i64*
  %ln6UN = load i64, i64* %ln6UM, !tbaa !4
  %ln6UO = inttoptr i64 %ln6UN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6UP = load i64*, i64** %Sp_Var
  %ln6UQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6UO( i64* %Base_Arg, i64* %ln6UP, i64* %Hp_Arg, i64 %ln6UQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nm:
  %ln6UR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6US = load i64*, i64** %Sp_Var
  %ln6UT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6UR( i64* %Base_Arg, i64* %ln6US, i64* %Hp_Arg, i64 %ln6UT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Mu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mu_info$def to i8*)
define internal ghccc void @c6Mu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Mu_info$def to i64)) to i32),i32 0)}>
{
n6UU:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6Mu
c6Mu:
  %ln6UW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6MB_info$def to i64
  %ln6UV = load i64*, i64** %Sp_Var
  %ln6UX = getelementptr inbounds i64, i64* %ln6UV, i32 -1
  store i64 %ln6UW, i64* %ln6UX, !tbaa !2
  %ln6UY = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln6UZ = add i64 %ln6UY, 1
  store i64 %ln6UZ, i64* %R3_Var
  %ln6V0 = add i64 %R1_Arg, 7
  %ln6V1 = inttoptr i64 %ln6V0 to i64*
  %ln6V2 = load i64, i64* %ln6V1, !tbaa !4
  store i64 %ln6V2, i64* %R2_Var
  %ln6V4 = add i64 %R1_Arg, 15
  %ln6V5 = inttoptr i64 %ln6V4 to i64*
  %ln6V6 = load i64, i64* %ln6V5, !tbaa !4
  %ln6V3 = load i64*, i64** %Sp_Var
  %ln6V7 = getelementptr inbounds i64, i64* %ln6V3, i32 0
  store i64 %ln6V6, i64* %ln6V7, !tbaa !2
  %ln6V8 = load i64*, i64** %Sp_Var
  %ln6V9 = getelementptr inbounds i64, i64* %ln6V8, i32 -1
  %ln6Va = ptrtoint i64* %ln6V9 to i64
  %ln6Vb = inttoptr i64 %ln6Va to i64*
  store i64* %ln6Vb, i64** %Sp_Var
  %ln6Vc = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Vd = load i64*, i64** %Sp_Var
  %ln6Ve = load i64, i64* %R2_Var
  %ln6Vf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Vc( i64* %Base_Arg, i64* %ln6Vd, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6Ve, i64 %ln6Vf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6MB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6MB_info$def to i8*)
define internal ghccc void @c6MB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6MB_info$def to i64)) to i32),i32 0)}>
{
n6Vg:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5bm = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6MB
c6MB:
  switch i64 %R1_Arg, label %u6N5 [i64 1, label %c6MN]
u6N5:
  %ln6Vh = load i64*, i64** %Sp_Var
  %ln6Vi = getelementptr inbounds i64, i64* %ln6Vh, i32 3
  %ln6Vj = ptrtoint i64* %ln6Vi to i64
  %ln6Vk = inttoptr i64 %ln6Vj to i64*
  store i64* %ln6Vk, i64** %Sp_Var
  %ln6Vl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Vm = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Vl( i64* %Base_Arg, i64* %ln6Vm, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6MN:
  %ln6Vn = load i64*, i64** %Sp_Var
  %ln6Vo = getelementptr inbounds i64, i64* %ln6Vn, i32 1
  %ln6Vp = bitcast i64* %ln6Vo to i64*
  %ln6Vq = load i64, i64* %ln6Vp, !tbaa !2
  store i64 %ln6Vq, i64* %ls5bm
  %ln6Vs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ML_info$def to i64
  %ln6Vr = load i64*, i64** %Sp_Var
  %ln6Vt = getelementptr inbounds i64, i64* %ln6Vr, i32 1
  store i64 %ln6Vs, i64* %ln6Vt, !tbaa !2
  %ln6Vu = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln6Vv = add i64 %ln6Vu, 1
  store i64 %ln6Vv, i64* %R3_Var
  %ln6Vw = load i64, i64* %ls5bm
  store i64 %ln6Vw, i64* %R2_Var
  %ln6Vx = load i64*, i64** %Sp_Var
  %ln6Vy = getelementptr inbounds i64, i64* %ln6Vx, i32 1
  %ln6Vz = ptrtoint i64* %ln6Vy to i64
  %ln6VA = inttoptr i64 %ln6Vz to i64*
  store i64* %ln6VA, i64** %Sp_Var
  %ln6VB = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6VC = load i64*, i64** %Sp_Var
  %ln6VD = load i64, i64* %R2_Var
  %ln6VE = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6VB( i64* %Base_Arg, i64* %ln6VC, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6VD, i64 %ln6VE, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6ML_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ML_info$def to i8*)
define internal ghccc void @c6ML_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6ML_info$def to i64)) to i32),i32 0)}>
{
n6VF:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6ML
c6ML:
  switch i64 %R1_Arg, label %u6N6 [i64 1, label %c6MX]
u6N6:
  %ln6VG = load i64*, i64** %Sp_Var
  %ln6VH = getelementptr inbounds i64, i64* %ln6VG, i32 2
  %ln6VI = ptrtoint i64* %ln6VH to i64
  %ln6VJ = inttoptr i64 %ln6VI to i64*
  store i64* %ln6VJ, i64** %Sp_Var
  %ln6VK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6VL = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6VK( i64* %Base_Arg, i64* %ln6VL, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6MX:
  %ln6VN = load i64*, i64** %Sp_Var
  %ln6VO = getelementptr inbounds i64, i64* %ln6VN, i32 4
  %ln6VP = bitcast i64* %ln6VO to i64*
  %ln6VQ = load i64, i64* %ln6VP, !tbaa !2
  %ln6VM = load i64*, i64** %Sp_Var
  %ln6VR = getelementptr inbounds i64, i64* %ln6VM, i32 4
  store i64 %ln6VQ, i64* %ln6VR, !tbaa !2
  %ln6VT = load i64*, i64** %Sp_Var
  %ln6VU = getelementptr inbounds i64, i64* %ln6VT, i32 1
  %ln6VV = bitcast i64* %ln6VU to i64*
  %ln6VW = load i64, i64* %ln6VV, !tbaa !2
  %ln6VS = load i64*, i64** %Sp_Var
  %ln6VX = getelementptr inbounds i64, i64* %ln6VS, i32 5
  store i64 %ln6VW, i64* %ln6VX, !tbaa !2
  %ln6VY = load i64*, i64** %Sp_Var
  %ln6VZ = getelementptr inbounds i64, i64* %ln6VY, i32 4
  %ln6W0 = ptrtoint i64* %ln6VZ to i64
  %ln6W1 = inttoptr i64 %ln6W0 to i64*
  store i64* %ln6W1, i64** %Sp_Var
  %ln6W2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6JU$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6W3 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6W2( i64* %Base_Arg, i64* %ln6W3, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s5aZ = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5aZ$def to i8*)
define internal ghccc void @_s5aZ$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n6W4:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s5aZ
s5aZ:
  %ln6W6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kd_info$def to i64
  %ln6W5 = load i64*, i64** %Sp_Var
  %ln6W7 = getelementptr inbounds i64, i64* %ln6W5, i32 -1
  store i64 %ln6W6, i64* %ln6W7, !tbaa !2
  %ln6W8 = load i64*, i64** %Sp_Var
  %ln6W9 = getelementptr inbounds i64, i64* %ln6W8, i32 3
  %ln6Wa = bitcast i64* %ln6W9 to i64*
  %ln6Wb = load i64, i64* %ln6Wa, !tbaa !2
  store i64 %ln6Wb, i64* %R1_Var
  %ln6Wc = load i64*, i64** %Sp_Var
  %ln6Wd = getelementptr inbounds i64, i64* %ln6Wc, i32 -1
  %ln6We = ptrtoint i64* %ln6Wd to i64
  %ln6Wf = inttoptr i64 %ln6We to i64*
  store i64* %ln6Wf, i64** %Sp_Var
  %ln6Wg = load i64, i64* %R1_Var
  %ln6Wh = and i64 %ln6Wg, 7
  %ln6Wi = icmp ne i64 %ln6Wh, 0
  br i1 %ln6Wi, label %u6Nr, label %c6Ke
c6Ke:
  %ln6Wk = load i64, i64* %R1_Var
  %ln6Wl = inttoptr i64 %ln6Wk to i64*
  %ln6Wm = load i64, i64* %ln6Wl, !tbaa !4
  %ln6Wn = inttoptr i64 %ln6Wm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Wo = load i64*, i64** %Sp_Var
  %ln6Wp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Wn( i64* %Base_Arg, i64* %ln6Wo, i64* %Hp_Arg, i64 %ln6Wp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nr:
  %ln6Wq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kd_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Wr = load i64*, i64** %Sp_Var
  %ln6Ws = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Wq( i64* %Base_Arg, i64* %ln6Wr, i64* %Hp_Arg, i64 %ln6Ws, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Kd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kd_info$def to i8*)
define internal ghccc void @c6Kd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 516, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Kd_info$def to i64)) to i32),i32 0)}>
{
n6Wt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5b2 = alloca i64, i32 1
  %ls5b3 = alloca i64, i32 1
  %lc6Kj = alloca i64, i32 1
  br label %c6Kd
c6Kd:
  %ln6Wu = load i64, i64* %R1_Var
  %ln6Wv = and i64 %ln6Wu, 7
  switch i64 %ln6Wv, label %c6LT [i64 1, label %c6LT
i64 2, label %c6LV]
c6LT:
  %ln6Ww = ptrtoint %r55x_closure_struct* @r55x_closure$def to i64
  store i64 %ln6Ww, i64* %R1_Var
  %ln6Wx = load i64*, i64** %Sp_Var
  %ln6Wy = getelementptr inbounds i64, i64* %ln6Wx, i32 5
  %ln6Wz = ptrtoint i64* %ln6Wy to i64
  %ln6WA = inttoptr i64 %ln6Wz to i64*
  store i64* %ln6WA, i64** %Sp_Var
  %ln6WC = load i64, i64* %R1_Var
  %ln6WD = inttoptr i64 %ln6WC to i64*
  %ln6WE = load i64, i64* %ln6WD, !tbaa !4
  %ln6WF = inttoptr i64 %ln6WE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6WG = load i64*, i64** %Sp_Var
  %ln6WH = load i64*, i64** %Hp_Var
  %ln6WI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6WF( i64* %Base_Arg, i64* %ln6WG, i64* %ln6WH, i64 %ln6WI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6LV:
  %ln6WJ = load i64*, i64** %Hp_Var
  %ln6WK = getelementptr inbounds i64, i64* %ln6WJ, i32 14
  %ln6WL = ptrtoint i64* %ln6WK to i64
  %ln6WM = inttoptr i64 %ln6WL to i64*
  store i64* %ln6WM, i64** %Hp_Var
  %ln6WN = load i64*, i64** %Hp_Var
  %ln6WO = ptrtoint i64* %ln6WN to i64
  %ln6WP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln6WQ = bitcast i64* %ln6WP to i64*
  %ln6WR = load i64, i64* %ln6WQ, !tbaa !5
  %ln6WS = icmp ugt i64 %ln6WO, %ln6WR
  %ln6WT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln6WS, i1 0 )
  br i1 %ln6WT, label %c6LY, label %c6LX
c6LX:
  %ln6WW = load i64, i64* %R1_Var
  %ln6WX = add i64 %ln6WW, 6
  %ln6WY = inttoptr i64 %ln6WX to i64*
  %ln6WZ = load i64, i64* %ln6WY, !tbaa !4
  store i64 %ln6WZ, i64* %ls5b2
  %ln6X2 = load i64, i64* %R1_Var
  %ln6X3 = add i64 %ln6X2, 14
  %ln6X4 = inttoptr i64 %ln6X3 to i64*
  %ln6X5 = load i64, i64* %ln6X4, !tbaa !4
  store i64 %ln6X5, i64* %ls5b3
  %ln6X7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5b4_info$def to i64
  %ln6X6 = load i64*, i64** %Hp_Var
  %ln6X8 = getelementptr inbounds i64, i64* %ln6X6, i32 -13
  store i64 %ln6X7, i64* %ln6X8, !tbaa !3
  %ln6Xa = load i64*, i64** %Sp_Var
  %ln6Xb = getelementptr inbounds i64, i64* %ln6Xa, i32 2
  %ln6Xc = bitcast i64* %ln6Xb to i64*
  %ln6Xd = load i64, i64* %ln6Xc, !tbaa !2
  %ln6X9 = load i64*, i64** %Hp_Var
  %ln6Xe = getelementptr inbounds i64, i64* %ln6X9, i32 -11
  store i64 %ln6Xd, i64* %ln6Xe, !tbaa !3
  %ln6Xg = load i64*, i64** %Sp_Var
  %ln6Xh = getelementptr inbounds i64, i64* %ln6Xg, i32 1
  %ln6Xi = bitcast i64* %ln6Xh to i64*
  %ln6Xj = load i64, i64* %ln6Xi, !tbaa !2
  %ln6Xf = load i64*, i64** %Hp_Var
  %ln6Xk = getelementptr inbounds i64, i64* %ln6Xf, i32 -10
  store i64 %ln6Xj, i64* %ln6Xk, !tbaa !3
  %ln6Xm = load i64, i64* %ls5b2
  %ln6Xl = load i64*, i64** %Hp_Var
  %ln6Xn = getelementptr inbounds i64, i64* %ln6Xl, i32 -9
  store i64 %ln6Xm, i64* %ln6Xn, !tbaa !3
  %ln6Xp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5be_info$def to i64
  %ln6Xo = load i64*, i64** %Hp_Var
  %ln6Xq = getelementptr inbounds i64, i64* %ln6Xo, i32 -8
  store i64 %ln6Xp, i64* %ln6Xq, !tbaa !3
  %ln6Xs = load i64, i64* %R1_Var
  %ln6Xr = load i64*, i64** %Hp_Var
  %ln6Xt = getelementptr inbounds i64, i64* %ln6Xr, i32 -6
  store i64 %ln6Xs, i64* %ln6Xt, !tbaa !3
  %ln6Xv = load i64*, i64** %Sp_Var
  %ln6Xw = getelementptr inbounds i64, i64* %ln6Xv, i32 3
  %ln6Xx = bitcast i64* %ln6Xw to i64*
  %ln6Xy = load i64, i64* %ln6Xx, !tbaa !2
  %ln6Xu = load i64*, i64** %Hp_Var
  %ln6Xz = getelementptr inbounds i64, i64* %ln6Xu, i32 -5
  store i64 %ln6Xy, i64* %ln6Xz, !tbaa !3
  %ln6XA = load i64*, i64** %Hp_Var
  %ln6XB = getelementptr inbounds i64, i64* %ln6XA, i32 -13
  %ln6XC = ptrtoint i64* %ln6XB to i64
  store i64 %ln6XC, i64* %lc6Kj
  %ln6XE = load i64, i64* %lc6Kj
  %ln6XD = load i64*, i64** %Hp_Var
  %ln6XF = getelementptr inbounds i64, i64* %ln6XD, i32 -4
  store i64 %ln6XE, i64* %ln6XF, !tbaa !3
  %ln6XH = load i64, i64* %ls5b3
  %ln6XG = load i64*, i64** %Hp_Var
  %ln6XI = getelementptr inbounds i64, i64* %ln6XG, i32 -3
  store i64 %ln6XH, i64* %ln6XI, !tbaa !3
  %ln6XK = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln6XJ = load i64*, i64** %Hp_Var
  %ln6XL = getelementptr inbounds i64, i64* %ln6XJ, i32 -2
  store i64 %ln6XK, i64* %ln6XL, !tbaa !3
  %ln6XN = load i64, i64* %lc6Kj
  %ln6XM = load i64*, i64** %Hp_Var
  %ln6XO = getelementptr inbounds i64, i64* %ln6XM, i32 -1
  store i64 %ln6XN, i64* %ln6XO, !tbaa !3
  %ln6XQ = load i64*, i64** %Hp_Var
  %ln6XR = getelementptr inbounds i64, i64* %ln6XQ, i32 -8
  %ln6XS = ptrtoint i64* %ln6XR to i64
  %ln6XP = load i64*, i64** %Hp_Var
  %ln6XT = getelementptr inbounds i64, i64* %ln6XP, i32 0
  store i64 %ln6XS, i64* %ln6XT, !tbaa !3
  %ln6XV = load i64*, i64** %Hp_Var
  %ln6XW = ptrtoint i64* %ln6XV to i64
  %ln6XX = add i64 %ln6XW, -14
  store i64 %ln6XX, i64* %R1_Var
  %ln6XY = load i64*, i64** %Sp_Var
  %ln6XZ = getelementptr inbounds i64, i64* %ln6XY, i32 5
  %ln6Y0 = ptrtoint i64* %ln6XZ to i64
  %ln6Y1 = inttoptr i64 %ln6Y0 to i64*
  store i64* %ln6Y1, i64** %Sp_Var
  %ln6Y2 = load i64*, i64** %Sp_Var
  %ln6Y3 = getelementptr inbounds i64, i64* %ln6Y2, i32 0
  %ln6Y4 = bitcast i64* %ln6Y3 to i64*
  %ln6Y5 = load i64, i64* %ln6Y4, !tbaa !2
  %ln6Y6 = inttoptr i64 %ln6Y5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Y7 = load i64*, i64** %Sp_Var
  %ln6Y8 = load i64*, i64** %Hp_Var
  %ln6Y9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Y6( i64* %Base_Arg, i64* %ln6Y7, i64* %ln6Y8, i64 %ln6Y9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6LY:
  %ln6Ya = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 112, i64* %ln6Ya, !tbaa !5
  %ln6Yb = load i64, i64* %R1_Var
  store i64 %ln6Yb, i64* %R1_Var
  %ln6Yc = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Yd = load i64*, i64** %Sp_Var
  %ln6Ye = load i64*, i64** %Hp_Var
  %ln6Yf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Yc( i64* %Base_Arg, i64* %ln6Yd, i64* %ln6Ye, i64 %ln6Yf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6L7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6L7_info$def to i8*)
define internal ghccc void @c6L7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6L7_info$def to i64)) to i32),i32 0)}>
{
n6Yg:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5aO = alloca i64, i32 1
  br label %c6L7
c6L7:
  %ln6Yh = load i64, i64* %R1_Var
  %ln6Yi = and i64 %ln6Yh, 7
  switch i64 %ln6Yi, label %c6Lf [i64 1, label %c6Lf
i64 2, label %c6Lk]
c6Lf:
  %ln6Yj = ptrtoint %r55y_closure_struct* @r55y_closure$def to i64
  store i64 %ln6Yj, i64* %R1_Var
  %ln6Yk = load i64*, i64** %Sp_Var
  %ln6Yl = getelementptr inbounds i64, i64* %ln6Yk, i32 1
  %ln6Ym = ptrtoint i64* %ln6Yl to i64
  %ln6Yn = inttoptr i64 %ln6Ym to i64*
  store i64* %ln6Yn, i64** %Sp_Var
  %ln6Yp = load i64, i64* %R1_Var
  %ln6Yq = inttoptr i64 %ln6Yp to i64*
  %ln6Yr = load i64, i64* %ln6Yq, !tbaa !4
  %ln6Ys = inttoptr i64 %ln6Yr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Yt = load i64*, i64** %Sp_Var
  %ln6Yu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Ys( i64* %Base_Arg, i64* %ln6Yt, i64* %Hp_Arg, i64 %ln6Yu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6Lk:
  %ln6Yw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Li_info$def to i64
  %ln6Yv = load i64*, i64** %Sp_Var
  %ln6Yx = getelementptr inbounds i64, i64* %ln6Yv, i32 -1
  store i64 %ln6Yw, i64* %ln6Yx, !tbaa !2
  %ln6YA = load i64, i64* %R1_Var
  %ln6YB = add i64 %ln6YA, 14
  %ln6YC = inttoptr i64 %ln6YB to i64*
  %ln6YD = load i64, i64* %ln6YC, !tbaa !4
  store i64 %ln6YD, i64* %ls5aO
  %ln6YG = load i64, i64* %R1_Var
  %ln6YH = add i64 %ln6YG, 6
  %ln6YI = inttoptr i64 %ln6YH to i64*
  %ln6YJ = load i64, i64* %ln6YI, !tbaa !4
  store i64 %ln6YJ, i64* %R1_Var
  %ln6YL = load i64, i64* %ls5aO
  %ln6YK = load i64*, i64** %Sp_Var
  %ln6YM = getelementptr inbounds i64, i64* %ln6YK, i32 0
  store i64 %ln6YL, i64* %ln6YM, !tbaa !2
  %ln6YN = load i64*, i64** %Sp_Var
  %ln6YO = getelementptr inbounds i64, i64* %ln6YN, i32 -1
  %ln6YP = ptrtoint i64* %ln6YO to i64
  %ln6YQ = inttoptr i64 %ln6YP to i64*
  store i64* %ln6YQ, i64** %Sp_Var
  %ln6YR = load i64, i64* %R1_Var
  %ln6YS = and i64 %ln6YR, 7
  %ln6YT = icmp ne i64 %ln6YS, 0
  br i1 %ln6YT, label %u6Nf, label %c6Ll
c6Ll:
  %ln6YV = load i64, i64* %R1_Var
  %ln6YW = inttoptr i64 %ln6YV to i64*
  %ln6YX = load i64, i64* %ln6YW, !tbaa !4
  %ln6YY = inttoptr i64 %ln6YX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6YZ = load i64*, i64** %Sp_Var
  %ln6Z0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6YY( i64* %Base_Arg, i64* %ln6YZ, i64* %Hp_Arg, i64 %ln6Z0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u6Nf:
  %ln6Z1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Li_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Z2 = load i64*, i64** %Sp_Var
  %ln6Z3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Z1( i64* %Base_Arg, i64* %ln6Z2, i64* %Hp_Arg, i64 %ln6Z3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Li_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Li_info$def to i8*)
define internal ghccc void @c6Li_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Li_info$def to i64)) to i32),i32 0)}>
{
n6Z4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6Li
c6Li:
  %ln6Z6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lp_info$def to i64
  %ln6Z5 = load i64*, i64** %Sp_Var
  %ln6Z7 = getelementptr inbounds i64, i64* %ln6Z5, i32 -1
  store i64 %ln6Z6, i64* %ln6Z7, !tbaa !2
  %ln6Z8 = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln6Z9 = add i64 %ln6Z8, 1
  store i64 %ln6Z9, i64* %R3_Var
  %ln6Za = add i64 %R1_Arg, 7
  %ln6Zb = inttoptr i64 %ln6Za to i64*
  %ln6Zc = load i64, i64* %ln6Zb, !tbaa !4
  store i64 %ln6Zc, i64* %R2_Var
  %ln6Ze = add i64 %R1_Arg, 15
  %ln6Zf = inttoptr i64 %ln6Ze to i64*
  %ln6Zg = load i64, i64* %ln6Zf, !tbaa !4
  %ln6Zd = load i64*, i64** %Sp_Var
  %ln6Zh = getelementptr inbounds i64, i64* %ln6Zd, i32 0
  store i64 %ln6Zg, i64* %ln6Zh, !tbaa !2
  %ln6Zi = load i64*, i64** %Sp_Var
  %ln6Zj = getelementptr inbounds i64, i64* %ln6Zi, i32 -1
  %ln6Zk = ptrtoint i64* %ln6Zj to i64
  %ln6Zl = inttoptr i64 %ln6Zk to i64*
  store i64* %ln6Zl, i64** %Sp_Var
  %ln6Zm = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Zn = load i64*, i64** %Sp_Var
  %ln6Zo = load i64, i64* %R2_Var
  %ln6Zp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Zm( i64* %Base_Arg, i64* %ln6Zn, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6Zo, i64 %ln6Zp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Lp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lp_info$def to i8*)
define internal ghccc void @c6Lp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lp_info$def to i64)) to i32),i32 0)}>
{
n6Zq:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5aR = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c6Lp
c6Lp:
  switch i64 %R1_Arg, label %u6N8 [i64 1, label %c6LB]
u6N8:
  %ln6Zr = load i64*, i64** %Sp_Var
  %ln6Zs = getelementptr inbounds i64, i64* %ln6Zr, i32 3
  %ln6Zt = ptrtoint i64* %ln6Zs to i64
  %ln6Zu = inttoptr i64 %ln6Zt to i64*
  store i64* %ln6Zu, i64** %Sp_Var
  %ln6Zv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6Lw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6Zw = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6Zv( i64* %Base_Arg, i64* %ln6Zw, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6LB:
  %ln6Zx = load i64*, i64** %Sp_Var
  %ln6Zy = getelementptr inbounds i64, i64* %ln6Zx, i32 1
  %ln6Zz = bitcast i64* %ln6Zy to i64*
  %ln6ZA = load i64, i64* %ln6Zz, !tbaa !2
  store i64 %ln6ZA, i64* %ls5aR
  %ln6ZC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lz_info$def to i64
  %ln6ZB = load i64*, i64** %Sp_Var
  %ln6ZD = getelementptr inbounds i64, i64* %ln6ZB, i32 1
  store i64 %ln6ZC, i64* %ln6ZD, !tbaa !2
  %ln6ZE = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln6ZF = add i64 %ln6ZE, 1
  store i64 %ln6ZF, i64* %R3_Var
  %ln6ZG = load i64, i64* %ls5aR
  store i64 %ln6ZG, i64* %R2_Var
  %ln6ZH = load i64*, i64** %Sp_Var
  %ln6ZI = getelementptr inbounds i64, i64* %ln6ZH, i32 1
  %ln6ZJ = ptrtoint i64* %ln6ZI to i64
  %ln6ZK = inttoptr i64 %ln6ZJ to i64*
  store i64* %ln6ZK, i64** %Sp_Var
  %ln6ZL = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ZM = load i64*, i64** %Sp_Var
  %ln6ZN = load i64, i64* %R2_Var
  %ln6ZO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ZL( i64* %Base_Arg, i64* %ln6ZM, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln6ZN, i64 %ln6ZO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c6Lz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lz_info$def to i8*)
define internal ghccc void @c6Lz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c6Lz_info$def to i64)) to i32),i32 0)}>
{
n6ZP:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c6Lz
c6Lz:
  switch i64 %R1_Arg, label %u6N9 [i64 1, label %c6LL]
u6N9:
  %ln6ZQ = load i64*, i64** %Sp_Var
  %ln6ZR = getelementptr inbounds i64, i64* %ln6ZQ, i32 2
  %ln6ZS = ptrtoint i64* %ln6ZR to i64
  %ln6ZT = inttoptr i64 %ln6ZS to i64*
  store i64* %ln6ZT, i64** %Sp_Var
  %ln6ZU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6Lw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln6ZV = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln6ZU( i64* %Base_Arg, i64* %ln6ZV, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c6LL:
  %ln6ZX = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln6ZY = add i64 %ln6ZX, 1
  %ln6ZW = load i64*, i64** %Sp_Var
  %ln6ZZ = getelementptr inbounds i64, i64* %ln6ZW, i32 0
  store i64 %ln6ZY, i64* %ln6ZZ, !tbaa !2
  %ln701 = load i64*, i64** %Sp_Var
  %ln702 = getelementptr inbounds i64, i64* %ln701, i32 1
  %ln703 = bitcast i64* %ln702 to i64*
  %ln704 = load i64, i64* %ln703, !tbaa !2
  %ln700 = load i64*, i64** %Sp_Var
  %ln705 = getelementptr inbounds i64, i64* %ln700, i32 1
  store i64 %ln704, i64* %ln705, !tbaa !2
  %ln706 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6JU$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln707 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln706( i64* %Base_Arg, i64* %ln707, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c6Lw = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c6Lw$def to i8*)
define internal ghccc void @_c6Lw$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n708:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c6Lw
c6Lw:
  %ln709 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln70a = add i64 %ln709, 1
  store i64 %ln70a, i64* %R1_Var
  %ln70b = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln70c = bitcast i64* %ln70b to i64*
  %ln70d = load i64, i64* %ln70c, !tbaa !2
  %ln70e = inttoptr i64 %ln70d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln70f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln70e( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln70f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u738_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdfFloatingPszuzdczs_closure_struct = type <{i64, i64}>
@_u738_srt$def = internal global %_u738_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r55j_closure_struct* @r55j_closure$def to i64), i64 ptrtoint (%r55w_closure_struct* @r55w_closure$def to i64), i64 0}>
@_u738_srt = internal alias i8, bitcast (%_u738_srt_struct* @_u738_srt$def to i8*)
@Main_zdfFloatingPszuzdczs_closure$def = internal global %Main_zdfFloatingPszuzdczs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdczs_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i8*)
@s5br_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5br_info$def to i8*)
define internal ghccc void @s5br_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n739:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c70o
c70o:
  %ln73a = load i64*, i64** %Sp_Var
  %ln73b = getelementptr inbounds i64, i64* %ln73a, i32 -2
  %ln73c = ptrtoint i64* %ln73b to i64
  %ln73d = icmp ult i64 %ln73c, %SpLim_Arg
  %ln73e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln73d, i1 0 )
  br i1 %ln73e, label %c70p, label %c70q
c70q:
  %ln73g = ptrtoint i8* @stg_upd_frame_info to i64
  %ln73f = load i64*, i64** %Sp_Var
  %ln73h = getelementptr inbounds i64, i64* %ln73f, i32 -2
  store i64 %ln73g, i64* %ln73h, !tbaa !2
  %ln73j = load i64, i64* %R1_Var
  %ln73i = load i64*, i64** %Sp_Var
  %ln73k = getelementptr inbounds i64, i64* %ln73i, i32 -1
  store i64 %ln73j, i64* %ln73k, !tbaa !2
  %ln73n = load i64, i64* %R1_Var
  %ln73o = add i64 %ln73n, 16
  %ln73p = inttoptr i64 %ln73o to i64*
  %ln73q = load i64, i64* %ln73p, !tbaa !4
  store i64 %ln73q, i64* %R2_Var
  %ln73r = load i64*, i64** %Sp_Var
  %ln73s = getelementptr inbounds i64, i64* %ln73r, i32 -2
  %ln73t = ptrtoint i64* %ln73s to i64
  %ln73u = inttoptr i64 %ln73t to i64*
  store i64* %ln73u, i64** %Sp_Var
  %ln73v = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln73w = load i64*, i64** %Sp_Var
  %ln73x = load i64, i64* %R1_Var
  %ln73y = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln73v( i64* %Base_Arg, i64* %ln73w, i64* %Hp_Arg, i64 %ln73x, i64 %ln73y, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c70p:
  %ln73z = load i64, i64* %R1_Var
  store i64 %ln73z, i64* %R1_Var
  %ln73A = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln73B = bitcast i64* %ln73A to i64*
  %ln73C = load i64, i64* %ln73B, !tbaa !5
  %ln73D = inttoptr i64 %ln73C to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln73E = load i64*, i64** %Sp_Var
  %ln73F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln73D( i64* %Base_Arg, i64* %ln73E, i64* %Hp_Arg, i64 %ln73F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bs_info$def to i8*)
define internal ghccc void @s5bs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n73G:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c70v
c70v:
  %ln73H = load i64*, i64** %Sp_Var
  %ln73I = getelementptr inbounds i64, i64* %ln73H, i32 -4
  %ln73J = ptrtoint i64* %ln73I to i64
  %ln73K = icmp ult i64 %ln73J, %SpLim_Arg
  %ln73L = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln73K, i1 0 )
  br i1 %ln73L, label %c70w, label %c70x
c70x:
  %ln73N = ptrtoint i8* @stg_upd_frame_info to i64
  %ln73M = load i64*, i64** %Sp_Var
  %ln73O = getelementptr inbounds i64, i64* %ln73M, i32 -2
  store i64 %ln73N, i64* %ln73O, !tbaa !2
  %ln73Q = load i64, i64* %R1_Var
  %ln73P = load i64*, i64** %Sp_Var
  %ln73R = getelementptr inbounds i64, i64* %ln73P, i32 -1
  store i64 %ln73Q, i64* %ln73R, !tbaa !2
  %ln73U = load i64, i64* %R1_Var
  %ln73V = add i64 %ln73U, 16
  %ln73W = inttoptr i64 %ln73V to i64*
  %ln73X = load i64, i64* %ln73W, !tbaa !4
  store i64 %ln73X, i64* %R2_Var
  %ln73Z = ptrtoint i8* @stg_ap_p_info to i64
  %ln73Y = load i64*, i64** %Sp_Var
  %ln740 = getelementptr inbounds i64, i64* %ln73Y, i32 -4
  store i64 %ln73Z, i64* %ln740, !tbaa !2
  %ln742 = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln743 = add i64 %ln742, 1
  %ln741 = load i64*, i64** %Sp_Var
  %ln744 = getelementptr inbounds i64, i64* %ln741, i32 -3
  store i64 %ln743, i64* %ln744, !tbaa !2
  %ln745 = load i64*, i64** %Sp_Var
  %ln746 = getelementptr inbounds i64, i64* %ln745, i32 -4
  %ln747 = ptrtoint i64* %ln746 to i64
  %ln748 = inttoptr i64 %ln747 to i64*
  store i64* %ln748, i64** %Sp_Var
  %ln749 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln74a = load i64*, i64** %Sp_Var
  %ln74b = load i64, i64* %R1_Var
  %ln74c = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln749( i64* %Base_Arg, i64* %ln74a, i64* %Hp_Arg, i64 %ln74b, i64 %ln74c, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c70w:
  %ln74d = load i64, i64* %R1_Var
  store i64 %ln74d, i64* %R1_Var
  %ln74e = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln74f = bitcast i64* %ln74e to i64*
  %ln74g = load i64, i64* %ln74f, !tbaa !5
  %ln74h = inttoptr i64 %ln74g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln74i = load i64*, i64** %Sp_Var
  %ln74j = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln74h( i64* %Base_Arg, i64* %ln74i, i64* %Hp_Arg, i64 %ln74j, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bt_info$def to i8*)
define internal ghccc void @s5bt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bt_info$def to i64)) to i32),i32 0)}>
{
n74k:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c70C
c70C:
  %ln74l = load i64*, i64** %Sp_Var
  %ln74m = getelementptr inbounds i64, i64* %ln74l, i32 -2
  %ln74n = ptrtoint i64* %ln74m to i64
  %ln74o = icmp ult i64 %ln74n, %SpLim_Arg
  %ln74p = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln74o, i1 0 )
  br i1 %ln74p, label %c70D, label %c70E
c70E:
  %ln74r = ptrtoint i8* @stg_upd_frame_info to i64
  %ln74q = load i64*, i64** %Sp_Var
  %ln74s = getelementptr inbounds i64, i64* %ln74q, i32 -2
  store i64 %ln74r, i64* %ln74s, !tbaa !2
  %ln74u = load i64, i64* %R1_Var
  %ln74t = load i64*, i64** %Sp_Var
  %ln74v = getelementptr inbounds i64, i64* %ln74t, i32 -1
  store i64 %ln74u, i64* %ln74v, !tbaa !2
  %ln74y = load i64, i64* %R1_Var
  %ln74z = add i64 %ln74y, 24
  %ln74A = inttoptr i64 %ln74z to i64*
  %ln74B = load i64, i64* %ln74A, !tbaa !4
  store i64 %ln74B, i64* %R3_Var
  %ln74E = load i64, i64* %R1_Var
  %ln74F = add i64 %ln74E, 16
  %ln74G = inttoptr i64 %ln74F to i64*
  %ln74H = load i64, i64* %ln74G, !tbaa !4
  store i64 %ln74H, i64* %R2_Var
  %ln74I = load i64*, i64** %Sp_Var
  %ln74J = getelementptr inbounds i64, i64* %ln74I, i32 -2
  %ln74K = ptrtoint i64* %ln74J to i64
  %ln74L = inttoptr i64 %ln74K to i64*
  store i64* %ln74L, i64** %Sp_Var
  %ln74M = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln74N = load i64*, i64** %Sp_Var
  %ln74O = load i64, i64* %R1_Var
  %ln74P = load i64, i64* %R2_Var
  %ln74Q = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln74M( i64* %Base_Arg, i64* %ln74N, i64* %Hp_Arg, i64 %ln74O, i64 %ln74P, i64 %ln74Q, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c70D:
  %ln74R = load i64, i64* %R1_Var
  store i64 %ln74R, i64* %R1_Var
  %ln74S = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln74T = bitcast i64* %ln74S to i64*
  %ln74U = load i64, i64* %ln74T, !tbaa !5
  %ln74V = inttoptr i64 %ln74U to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln74W = load i64*, i64** %Sp_Var
  %ln74X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln74V( i64* %Base_Arg, i64* %ln74W, i64* %Hp_Arg, i64 %ln74X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bI_info$def to i8*)
define internal ghccc void @s5bI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n74Y:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c715
c715:
  %ln74Z = load i64*, i64** %Sp_Var
  %ln750 = getelementptr inbounds i64, i64* %ln74Z, i32 -5
  %ln751 = ptrtoint i64* %ln750 to i64
  %ln752 = icmp ult i64 %ln751, %SpLim_Arg
  %ln753 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln752, i1 0 )
  br i1 %ln753, label %c716, label %c717
c717:
  %ln755 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln754 = load i64*, i64** %Sp_Var
  %ln756 = getelementptr inbounds i64, i64* %ln754, i32 -2
  store i64 %ln755, i64* %ln756, !tbaa !2
  %ln758 = load i64, i64* %R1_Var
  %ln757 = load i64*, i64** %Sp_Var
  %ln759 = getelementptr inbounds i64, i64* %ln757, i32 -1
  store i64 %ln758, i64* %ln759, !tbaa !2
  %ln75c = load i64, i64* %R1_Var
  %ln75d = add i64 %ln75c, 16
  %ln75e = inttoptr i64 %ln75d to i64*
  %ln75f = load i64, i64* %ln75e, !tbaa !4
  store i64 %ln75f, i64* %R2_Var
  %ln75h = ptrtoint i8* @stg_ap_pp_info to i64
  %ln75g = load i64*, i64** %Sp_Var
  %ln75i = getelementptr inbounds i64, i64* %ln75g, i32 -5
  store i64 %ln75h, i64* %ln75i, !tbaa !2
  %ln75m = load i64, i64* %R1_Var
  %ln75n = add i64 %ln75m, 24
  %ln75o = inttoptr i64 %ln75n to i64*
  %ln75p = load i64, i64* %ln75o, !tbaa !4
  %ln75j = load i64*, i64** %Sp_Var
  %ln75q = getelementptr inbounds i64, i64* %ln75j, i32 -4
  store i64 %ln75p, i64* %ln75q, !tbaa !2
  %ln75u = load i64, i64* %R1_Var
  %ln75v = add i64 %ln75u, 32
  %ln75w = inttoptr i64 %ln75v to i64*
  %ln75x = load i64, i64* %ln75w, !tbaa !4
  %ln75r = load i64*, i64** %Sp_Var
  %ln75y = getelementptr inbounds i64, i64* %ln75r, i32 -3
  store i64 %ln75x, i64* %ln75y, !tbaa !2
  %ln75z = load i64*, i64** %Sp_Var
  %ln75A = getelementptr inbounds i64, i64* %ln75z, i32 -5
  %ln75B = ptrtoint i64* %ln75A to i64
  %ln75C = inttoptr i64 %ln75B to i64*
  store i64* %ln75C, i64** %Sp_Var
  %ln75D = bitcast i8* @base_GHCziReal_zs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln75E = load i64*, i64** %Sp_Var
  %ln75F = load i64, i64* %R1_Var
  %ln75G = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln75D( i64* %Base_Arg, i64* %ln75E, i64* %Hp_Arg, i64 %ln75F, i64 %ln75G, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c716:
  %ln75H = load i64, i64* %R1_Var
  store i64 %ln75H, i64* %R1_Var
  %ln75I = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln75J = bitcast i64* %ln75I to i64*
  %ln75K = load i64, i64* %ln75J, !tbaa !5
  %ln75L = inttoptr i64 %ln75K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln75M = load i64*, i64** %Sp_Var
  %ln75N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln75L( i64* %Base_Arg, i64* %ln75M, i64* %Hp_Arg, i64 %ln75N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bL_info$def to i8*)
define internal ghccc void @s5bL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n75O:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %ls5br = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c71i
c71i:
  %ln75P = load i64*, i64** %Sp_Var
  %ln75Q = getelementptr inbounds i64, i64* %ln75P, i32 -5
  %ln75R = ptrtoint i64* %ln75Q to i64
  %ln75S = icmp ult i64 %ln75R, %SpLim_Arg
  %ln75T = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln75S, i1 0 )
  br i1 %ln75T, label %c71m, label %c71n
c71n:
  %ln75V = ptrtoint i8* @stg_upd_frame_info to i64
  %ln75U = load i64*, i64** %Sp_Var
  %ln75W = getelementptr inbounds i64, i64* %ln75U, i32 -2
  store i64 %ln75V, i64* %ln75W, !tbaa !2
  %ln75Y = load i64, i64* %R1_Var
  %ln75X = load i64*, i64** %Sp_Var
  %ln75Z = getelementptr inbounds i64, i64* %ln75X, i32 -1
  store i64 %ln75Y, i64* %ln75Z, !tbaa !2
  %ln761 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71g_info$def to i64
  %ln760 = load i64*, i64** %Sp_Var
  %ln762 = getelementptr inbounds i64, i64* %ln760, i32 -5
  store i64 %ln761, i64* %ln762, !tbaa !2
  %ln765 = load i64, i64* %R1_Var
  %ln766 = add i64 %ln765, 40
  %ln767 = inttoptr i64 %ln766 to i64*
  %ln768 = load i64, i64* %ln767, !tbaa !4
  store i64 %ln768, i64* %R4_Var
  %ln76b = load i64, i64* %R1_Var
  %ln76c = add i64 %ln76b, 32
  %ln76d = inttoptr i64 %ln76c to i64*
  %ln76e = load i64, i64* %ln76d, !tbaa !4
  store i64 %ln76e, i64* %R3_Var
  %ln76h = load i64, i64* %R1_Var
  %ln76i = add i64 %ln76h, 16
  %ln76j = inttoptr i64 %ln76i to i64*
  %ln76k = load i64, i64* %ln76j, !tbaa !4
  store i64 %ln76k, i64* %ls5br
  %ln76l = load i64, i64* %ls5br
  store i64 %ln76l, i64* %R2_Var
  %ln76n = load i64, i64* %ls5br
  %ln76m = load i64*, i64** %Sp_Var
  %ln76o = getelementptr inbounds i64, i64* %ln76m, i32 -4
  store i64 %ln76n, i64* %ln76o, !tbaa !2
  %ln76s = load i64, i64* %R1_Var
  %ln76t = add i64 %ln76s, 24
  %ln76u = inttoptr i64 %ln76t to i64*
  %ln76v = load i64, i64* %ln76u, !tbaa !4
  %ln76p = load i64*, i64** %Sp_Var
  %ln76w = getelementptr inbounds i64, i64* %ln76p, i32 -3
  store i64 %ln76v, i64* %ln76w, !tbaa !2
  %ln76x = load i64*, i64** %Sp_Var
  %ln76y = getelementptr inbounds i64, i64* %ln76x, i32 -5
  %ln76z = ptrtoint i64* %ln76y to i64
  %ln76A = inttoptr i64 %ln76z to i64*
  store i64* %ln76A, i64** %Sp_Var
  %ln76B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln76C = load i64*, i64** %Sp_Var
  %ln76D = load i64, i64* %R1_Var
  %ln76E = load i64, i64* %R2_Var
  %ln76F = load i64, i64* %R3_Var
  %ln76G = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln76B( i64* %Base_Arg, i64* %ln76C, i64* %Hp_Arg, i64 %ln76D, i64 %ln76E, i64 %ln76F, i64 %ln76G, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c71m:
  %ln76H = load i64, i64* %R1_Var
  store i64 %ln76H, i64* %R1_Var
  %ln76I = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln76J = bitcast i64* %ln76I to i64*
  %ln76K = load i64, i64* %ln76J, !tbaa !5
  %ln76L = inttoptr i64 %ln76K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln76M = load i64*, i64** %Sp_Var
  %ln76N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln76L( i64* %Base_Arg, i64* %ln76M, i64* %Hp_Arg, i64 %ln76N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c71g_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71g_info$def to i8*)
define internal ghccc void @c71g_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n76O:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c71g
c71g:
  %ln76P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71l_info$def to i64
  %ln76Q = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln76P, i64* %ln76Q, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %ln76R = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln76S = bitcast i64* %ln76R to i64*
  %ln76T = load i64, i64* %ln76S, !tbaa !2
  store i64 %ln76T, i64* %R2_Var
  %ln76U = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln76V = load i64, i64* %R2_Var
  %ln76W = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln76U( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln76V, i64 %ln76W, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c71l_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71l_info$def to i8*)
define internal ghccc void @c71l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n76X:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c71l
c71l:
  store i64 %R1_Arg, i64* %R4_Var
  %ln76Y = load i64*, i64** %Sp_Var
  %ln76Z = getelementptr inbounds i64, i64* %ln76Y, i32 2
  %ln770 = bitcast i64* %ln76Z to i64*
  %ln771 = load i64, i64* %ln770, !tbaa !2
  store i64 %ln771, i64* %R3_Var
  %ln772 = load i64*, i64** %Sp_Var
  %ln773 = getelementptr inbounds i64, i64* %ln772, i32 1
  %ln774 = bitcast i64* %ln773 to i64*
  %ln775 = load i64, i64* %ln774, !tbaa !2
  store i64 %ln775, i64* %R2_Var
  %ln776 = load i64*, i64** %Sp_Var
  %ln777 = getelementptr inbounds i64, i64* %ln776, i32 3
  %ln778 = ptrtoint i64* %ln777 to i64
  %ln779 = inttoptr i64 %ln778 to i64*
  store i64* %ln779, i64** %Sp_Var
  %ln77a = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln77b = load i64*, i64** %Sp_Var
  %ln77c = load i64, i64* %R2_Var
  %ln77d = load i64, i64* %R3_Var
  %ln77e = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln77a( i64* %Base_Arg, i64* %ln77b, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln77c, i64 %ln77d, i64 %ln77e, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bM_info$def to i8*)
define internal ghccc void @s5bM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 15, i32 0}>
{
n77f:
  %ls5bM = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5br = alloca i64, i32 1
  %ls5bC = alloca i64, i32 1
  %ls5bI = alloca i64, i32 1
  %ls5bH = alloca i64, i32 1
  %ls5bF = alloca i64, i32 1
  %ls5bt = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c71t
c71t:
  %ln77g = load i64, i64* %R1_Var
  store i64 %ln77g, i64* %ls5bM
  %ln77h = load i64*, i64** %Sp_Var
  %ln77i = getelementptr inbounds i64, i64* %ln77h, i32 -2
  %ln77j = ptrtoint i64* %ln77i to i64
  %ln77k = icmp ult i64 %ln77j, %SpLim_Arg
  %ln77l = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln77k, i1 0 )
  br i1 %ln77l, label %c71u, label %c71v
c71v:
  %ln77m = load i64*, i64** %Hp_Var
  %ln77n = getelementptr inbounds i64, i64* %ln77m, i32 6
  %ln77o = ptrtoint i64* %ln77n to i64
  %ln77p = inttoptr i64 %ln77o to i64*
  store i64* %ln77p, i64** %Hp_Var
  %ln77q = load i64*, i64** %Hp_Var
  %ln77r = ptrtoint i64* %ln77q to i64
  %ln77s = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln77t = bitcast i64* %ln77s to i64*
  %ln77u = load i64, i64* %ln77t, !tbaa !5
  %ln77v = icmp ugt i64 %ln77r, %ln77u
  %ln77w = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln77v, i1 0 )
  br i1 %ln77w, label %c71x, label %c71w
c71w:
  %ln77y = ptrtoint i8* @stg_upd_frame_info to i64
  %ln77x = load i64*, i64** %Sp_Var
  %ln77z = getelementptr inbounds i64, i64* %ln77x, i32 -2
  store i64 %ln77y, i64* %ln77z, !tbaa !2
  %ln77B = load i64, i64* %ls5bM
  %ln77A = load i64*, i64** %Sp_Var
  %ln77C = getelementptr inbounds i64, i64* %ln77A, i32 -1
  store i64 %ln77B, i64* %ln77C, !tbaa !2
  %ln77D = load i64, i64* %ls5bM
  %ln77E = add i64 %ln77D, 16
  %ln77F = inttoptr i64 %ln77E to i64*
  %ln77G = load i64, i64* %ln77F, !tbaa !1
  store i64 %ln77G, i64* %ls5br
  %ln77H = load i64, i64* %ls5bM
  %ln77I = add i64 %ln77H, 24
  %ln77J = inttoptr i64 %ln77I to i64*
  %ln77K = load i64, i64* %ln77J, !tbaa !1
  store i64 %ln77K, i64* %ls5bC
  %ln77L = load i64, i64* %ls5bM
  %ln77M = add i64 %ln77L, 32
  %ln77N = inttoptr i64 %ln77M to i64*
  %ln77O = load i64, i64* %ln77N, !tbaa !1
  store i64 %ln77O, i64* %ls5bI
  %ln77P = load i64, i64* %ls5bM
  %ln77Q = add i64 %ln77P, 40
  %ln77R = inttoptr i64 %ln77Q to i64*
  %ln77S = load i64, i64* %ln77R, !tbaa !1
  store i64 %ln77S, i64* %ls5bH
  %ln77T = load i64, i64* %ls5bM
  %ln77U = add i64 %ln77T, 48
  %ln77V = inttoptr i64 %ln77U to i64*
  %ln77W = load i64, i64* %ln77V, !tbaa !1
  store i64 %ln77W, i64* %ls5bF
  %ln77X = load i64, i64* %ls5bM
  %ln77Y = add i64 %ln77X, 56
  %ln77Z = inttoptr i64 %ln77Y to i64*
  %ln780 = load i64, i64* %ln77Z, !tbaa !1
  store i64 %ln780, i64* %ls5bt
  %ln782 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bL_info$def to i64
  %ln781 = load i64*, i64** %Hp_Var
  %ln783 = getelementptr inbounds i64, i64* %ln781, i32 -5
  store i64 %ln782, i64* %ln783, !tbaa !3
  %ln785 = load i64, i64* %ls5br
  %ln784 = load i64*, i64** %Hp_Var
  %ln786 = getelementptr inbounds i64, i64* %ln784, i32 -3
  store i64 %ln785, i64* %ln786, !tbaa !3
  %ln788 = load i64, i64* %ls5bC
  %ln787 = load i64*, i64** %Hp_Var
  %ln789 = getelementptr inbounds i64, i64* %ln787, i32 -2
  store i64 %ln788, i64* %ln789, !tbaa !3
  %ln78b = load i64, i64* %ls5bI
  %ln78a = load i64*, i64** %Hp_Var
  %ln78c = getelementptr inbounds i64, i64* %ln78a, i32 -1
  store i64 %ln78b, i64* %ln78c, !tbaa !3
  %ln78e = load i64, i64* %ls5bH
  %ln78d = load i64*, i64** %Hp_Var
  %ln78f = getelementptr inbounds i64, i64* %ln78d, i32 0
  store i64 %ln78e, i64* %ln78f, !tbaa !3
  %ln78g = load i64, i64* %ls5bF
  store i64 %ln78g, i64* %R3_Var
  %ln78h = load i64*, i64** %Hp_Var
  %ln78i = getelementptr inbounds i64, i64* %ln78h, i32 -5
  %ln78j = ptrtoint i64* %ln78i to i64
  store i64 %ln78j, i64* %R2_Var
  %ln78k = load i64, i64* %ls5bt
  store i64 %ln78k, i64* %R1_Var
  %ln78l = load i64*, i64** %Sp_Var
  %ln78m = getelementptr inbounds i64, i64* %ln78l, i32 -2
  %ln78n = ptrtoint i64* %ln78m to i64
  %ln78o = inttoptr i64 %ln78n to i64*
  store i64* %ln78o, i64** %Sp_Var
  %ln78p = bitcast i8* @stg_ap_pp_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln78q = load i64*, i64** %Sp_Var
  %ln78r = load i64*, i64** %Hp_Var
  %ln78s = load i64, i64* %R1_Var
  %ln78t = load i64, i64* %R2_Var
  %ln78u = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln78p( i64* %Base_Arg, i64* %ln78q, i64* %ln78r, i64 %ln78s, i64 %ln78t, i64 %ln78u, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c71x:
  %ln78v = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln78v, !tbaa !5
  br label %c71u
c71u:
  %ln78w = load i64, i64* %ls5bM
  store i64 %ln78w, i64* %R1_Var
  %ln78x = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln78y = bitcast i64* %ln78x to i64*
  %ln78z = load i64, i64* %ln78y, !tbaa !5
  %ln78A = inttoptr i64 %ln78z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln78B = load i64*, i64** %Sp_Var
  %ln78C = load i64*, i64** %Hp_Var
  %ln78D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln78A( i64* %Base_Arg, i64* %ln78B, i64* %ln78C, i64 %ln78D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5bS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bS_info$def to i8*)
define internal ghccc void @s5bS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 5, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u738_srt_struct* @_u738_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bS_info$def to i64)) to i32),i32 0)}>
{
n78E:
  %ls5br = alloca i64, i32 1
  %ls5bt = alloca i64, i32 1
  %ls5bq = alloca i64, i32 1
  %ls5bp = alloca i64, i32 1
  %ls5bs = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c71C
c71C:
  %ln78F = load i64*, i64** %Sp_Var
  %ln78G = getelementptr inbounds i64, i64* %ln78F, i32 -12
  %ln78H = ptrtoint i64* %ln78G to i64
  %ln78I = icmp ult i64 %ln78H, %SpLim_Arg
  %ln78J = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln78I, i1 0 )
  br i1 %ln78J, label %c71D, label %c71E
c71E:
  %ln78L = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70K_info$def to i64
  %ln78K = load i64*, i64** %Sp_Var
  %ln78M = getelementptr inbounds i64, i64* %ln78K, i32 -7
  store i64 %ln78L, i64* %ln78M, !tbaa !2
  %ln78P = load i64, i64* %R1_Var
  %ln78Q = add i64 %ln78P, 6
  %ln78R = inttoptr i64 %ln78Q to i64*
  %ln78S = load i64, i64* %ln78R, !tbaa !4
  store i64 %ln78S, i64* %ls5br
  %ln78V = load i64, i64* %R1_Var
  %ln78W = add i64 %ln78V, 14
  %ln78X = inttoptr i64 %ln78W to i64*
  %ln78Y = load i64, i64* %ln78X, !tbaa !4
  store i64 %ln78Y, i64* %ls5bt
  %ln791 = load i64, i64* %R1_Var
  %ln792 = add i64 %ln791, 22
  %ln793 = inttoptr i64 %ln792 to i64*
  %ln794 = load i64, i64* %ln793, !tbaa !4
  store i64 %ln794, i64* %ls5bq
  %ln797 = load i64, i64* %R1_Var
  %ln798 = add i64 %ln797, 30
  %ln799 = inttoptr i64 %ln798 to i64*
  %ln79a = load i64, i64* %ln799, !tbaa !4
  store i64 %ln79a, i64* %ls5bp
  %ln79d = load i64, i64* %R1_Var
  %ln79e = add i64 %ln79d, 38
  %ln79f = inttoptr i64 %ln79e to i64*
  %ln79g = load i64, i64* %ln79f, !tbaa !4
  store i64 %ln79g, i64* %ls5bs
  %ln79h = load i64, i64* %R2_Var
  store i64 %ln79h, i64* %R1_Var
  %ln79j = load i64, i64* %ls5bp
  %ln79i = load i64*, i64** %Sp_Var
  %ln79k = getelementptr inbounds i64, i64* %ln79i, i32 -6
  store i64 %ln79j, i64* %ln79k, !tbaa !2
  %ln79m = load i64, i64* %ls5bq
  %ln79l = load i64*, i64** %Sp_Var
  %ln79n = getelementptr inbounds i64, i64* %ln79l, i32 -5
  store i64 %ln79m, i64* %ln79n, !tbaa !2
  %ln79p = load i64, i64* %ls5br
  %ln79o = load i64*, i64** %Sp_Var
  %ln79q = getelementptr inbounds i64, i64* %ln79o, i32 -4
  store i64 %ln79p, i64* %ln79q, !tbaa !2
  %ln79s = load i64, i64* %ls5bs
  %ln79r = load i64*, i64** %Sp_Var
  %ln79t = getelementptr inbounds i64, i64* %ln79r, i32 -3
  store i64 %ln79s, i64* %ln79t, !tbaa !2
  %ln79v = load i64, i64* %ls5bt
  %ln79u = load i64*, i64** %Sp_Var
  %ln79w = getelementptr inbounds i64, i64* %ln79u, i32 -2
  store i64 %ln79v, i64* %ln79w, !tbaa !2
  %ln79y = load i64, i64* %R3_Var
  %ln79x = load i64*, i64** %Sp_Var
  %ln79z = getelementptr inbounds i64, i64* %ln79x, i32 -1
  store i64 %ln79y, i64* %ln79z, !tbaa !2
  %ln79A = load i64*, i64** %Sp_Var
  %ln79B = getelementptr inbounds i64, i64* %ln79A, i32 -7
  %ln79C = ptrtoint i64* %ln79B to i64
  %ln79D = inttoptr i64 %ln79C to i64*
  store i64* %ln79D, i64** %Sp_Var
  %ln79E = load i64, i64* %R1_Var
  %ln79F = and i64 %ln79E, 7
  %ln79G = icmp ne i64 %ln79F, 0
  br i1 %ln79G, label %u72X, label %c70L
c70L:
  %ln79I = load i64, i64* %R1_Var
  %ln79J = inttoptr i64 %ln79I to i64*
  %ln79K = load i64, i64* %ln79J, !tbaa !4
  %ln79L = inttoptr i64 %ln79K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln79M = load i64*, i64** %Sp_Var
  %ln79N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln79L( i64* %Base_Arg, i64* %ln79M, i64* %Hp_Arg, i64 %ln79N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u72X:
  %ln79O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70K_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln79P = load i64*, i64** %Sp_Var
  %ln79Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln79O( i64* %Base_Arg, i64* %ln79P, i64* %Hp_Arg, i64 %ln79Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c71D:
  %ln79R = load i64, i64* %R3_Var
  store i64 %ln79R, i64* %R3_Var
  %ln79S = load i64, i64* %R2_Var
  store i64 %ln79S, i64* %R2_Var
  %ln79T = load i64, i64* %R1_Var
  store i64 %ln79T, i64* %R1_Var
  %ln79U = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln79V = bitcast i64* %ln79U to i64*
  %ln79W = load i64, i64* %ln79V, !tbaa !5
  %ln79X = inttoptr i64 %ln79W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln79Y = load i64*, i64** %Sp_Var
  %ln79Z = load i64, i64* %R1_Var
  %ln7a0 = load i64, i64* %R2_Var
  %ln7a1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln79X( i64* %Base_Arg, i64* %ln79Y, i64* %Hp_Arg, i64 %ln79Z, i64 %ln7a0, i64 %ln7a1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c70K_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70K_info$def to i8*)
define internal ghccc void @c70K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u738_srt_struct* @_u738_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70K_info$def to i64)) to i32),i32 0)}>
{
n7a2:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ls5bB = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c70K
c70K:
  %ln7a3 = load i64, i64* %R1_Var
  %ln7a4 = and i64 %ln7a3, 7
  switch i64 %ln7a4, label %c71z [i64 1, label %c71z
i64 2, label %c71A]
c71z:
  %ln7a6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71G_info$def to i64
  %ln7a5 = load i64*, i64** %Sp_Var
  %ln7a7 = getelementptr inbounds i64, i64* %ln7a5, i32 0
  store i64 %ln7a6, i64* %ln7a7, !tbaa !2
  %ln7a8 = load i64*, i64** %Sp_Var
  %ln7a9 = getelementptr inbounds i64, i64* %ln7a8, i32 6
  %ln7aa = bitcast i64* %ln7a9 to i64*
  %ln7ab = load i64, i64* %ln7aa, !tbaa !2
  store i64 %ln7ab, i64* %R1_Var
  %ln7ac = load i64, i64* %R1_Var
  %ln7ad = and i64 %ln7ac, 7
  %ln7ae = icmp ne i64 %ln7ad, 0
  br i1 %ln7ae, label %u72W, label %c71I
c71I:
  %ln7ag = load i64, i64* %R1_Var
  %ln7ah = inttoptr i64 %ln7ag to i64*
  %ln7ai = load i64, i64* %ln7ah, !tbaa !4
  %ln7aj = inttoptr i64 %ln7ai to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7ak = load i64*, i64** %Sp_Var
  %ln7al = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7aj( i64* %Base_Arg, i64* %ln7ak, i64* %Hp_Arg, i64 %ln7al, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u72W:
  %ln7am = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71G_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7an = load i64*, i64** %Sp_Var
  %ln7ao = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7am( i64* %Base_Arg, i64* %ln7an, i64* %Hp_Arg, i64 %ln7ao, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c71A:
  %ln7aq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c724_info$def to i64
  %ln7ap = load i64*, i64** %Sp_Var
  %ln7ar = getelementptr inbounds i64, i64* %ln7ap, i32 -2
  store i64 %ln7aq, i64* %ln7ar, !tbaa !2
  %ln7as = load i64*, i64** %Sp_Var
  %ln7at = getelementptr inbounds i64, i64* %ln7as, i32 1
  %ln7au = bitcast i64* %ln7at to i64*
  %ln7av = load i64, i64* %ln7au, !tbaa !2
  store i64 %ln7av, i64* %R2_Var
  %ln7ax = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7aw = load i64*, i64** %Sp_Var
  %ln7ay = getelementptr inbounds i64, i64* %ln7aw, i32 -5
  store i64 %ln7ax, i64* %ln7ay, !tbaa !2
  %ln7aB = load i64, i64* %R1_Var
  %ln7aC = add i64 %ln7aB, 6
  %ln7aD = inttoptr i64 %ln7aC to i64*
  %ln7aE = load i64, i64* %ln7aD, !tbaa !4
  store i64 %ln7aE, i64* %ls5bB
  %ln7aG = load i64, i64* %ls5bB
  %ln7aF = load i64*, i64** %Sp_Var
  %ln7aH = getelementptr inbounds i64, i64* %ln7aF, i32 -4
  store i64 %ln7aG, i64* %ln7aH, !tbaa !2
  %ln7aJ = load i64*, i64** %Sp_Var
  %ln7aK = getelementptr inbounds i64, i64* %ln7aJ, i32 4
  %ln7aL = bitcast i64* %ln7aK to i64*
  %ln7aM = load i64, i64* %ln7aL, !tbaa !2
  %ln7aI = load i64*, i64** %Sp_Var
  %ln7aN = getelementptr inbounds i64, i64* %ln7aI, i32 -3
  store i64 %ln7aM, i64* %ln7aN, !tbaa !2
  %ln7aR = load i64, i64* %R1_Var
  %ln7aS = add i64 %ln7aR, 14
  %ln7aT = inttoptr i64 %ln7aS to i64*
  %ln7aU = load i64, i64* %ln7aT, !tbaa !4
  %ln7aO = load i64*, i64** %Sp_Var
  %ln7aV = getelementptr inbounds i64, i64* %ln7aO, i32 -1
  store i64 %ln7aU, i64* %ln7aV, !tbaa !2
  %ln7aX = load i64, i64* %ls5bB
  %ln7aW = load i64*, i64** %Sp_Var
  %ln7aY = getelementptr inbounds i64, i64* %ln7aW, i32 0
  store i64 %ln7aX, i64* %ln7aY, !tbaa !2
  %ln7aZ = load i64*, i64** %Sp_Var
  %ln7b0 = getelementptr inbounds i64, i64* %ln7aZ, i32 -5
  %ln7b1 = ptrtoint i64* %ln7b0 to i64
  %ln7b2 = inttoptr i64 %ln7b1 to i64*
  store i64* %ln7b2, i64** %Sp_Var
  %ln7b3 = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7b4 = load i64*, i64** %Sp_Var
  %ln7b5 = load i64, i64* %R1_Var
  %ln7b6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7b3( i64* %Base_Arg, i64* %ln7b4, i64* %Hp_Arg, i64 %ln7b5, i64 %ln7b6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c724_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c724_info$def to i8*)
define internal ghccc void @c724_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55j_closure_struct* @r55j_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c724_info$def to i64)) to i32),i32 0)}>
{
n7b7:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c724
c724:
  %ln7b8 = load i64, i64* %R1_Var
  %ln7b9 = and i64 %ln7b8, 7
  switch i64 %ln7b9, label %u72T [i64 1, label %u72T
i64 2, label %c72q]
u72T:
  %ln7ba = load i64*, i64** %Sp_Var
  %ln7bb = getelementptr inbounds i64, i64* %ln7ba, i32 1
  %ln7bc = ptrtoint i64* %ln7bb to i64
  %ln7bd = inttoptr i64 %ln7bc to i64*
  store i64* %ln7bd, i64** %Sp_Var
  %ln7be = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5bD$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7bf = load i64*, i64** %Sp_Var
  %ln7bg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7be( i64* %Base_Arg, i64* %ln7bf, i64* %Hp_Arg, i64 %ln7bg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c72q:
  %ln7bi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72o_info$def to i64
  %ln7bh = load i64*, i64** %Sp_Var
  %ln7bj = getelementptr inbounds i64, i64* %ln7bh, i32 0
  store i64 %ln7bi, i64* %ln7bj, !tbaa !2
  %ln7bk = load i64*, i64** %Sp_Var
  %ln7bl = getelementptr inbounds i64, i64* %ln7bk, i32 8
  %ln7bm = bitcast i64* %ln7bl to i64*
  %ln7bn = load i64, i64* %ln7bm, !tbaa !2
  store i64 %ln7bn, i64* %R1_Var
  %ln7bo = load i64, i64* %R1_Var
  %ln7bp = and i64 %ln7bo, 7
  %ln7bq = icmp ne i64 %ln7bp, 0
  br i1 %ln7bq, label %u72Y, label %c72r
c72r:
  %ln7bs = load i64, i64* %R1_Var
  %ln7bt = inttoptr i64 %ln7bs to i64*
  %ln7bu = load i64, i64* %ln7bt, !tbaa !4
  %ln7bv = inttoptr i64 %ln7bu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7bw = load i64*, i64** %Sp_Var
  %ln7bx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7bv( i64* %Base_Arg, i64* %ln7bw, i64* %Hp_Arg, i64 %ln7bx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u72Y:
  %ln7by = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72o_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7bz = load i64*, i64** %Sp_Var
  %ln7bA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7by( i64* %Base_Arg, i64* %ln7bz, i64* %Hp_Arg, i64 %ln7bA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c72o_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72o_info$def to i8*)
define internal ghccc void @c72o_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55j_closure_struct* @r55j_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72o_info$def to i64)) to i32),i32 0)}>
{
n7bB:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c72o
c72o:
  %ln7bC = and i64 %R1_Arg, 7
  switch i64 %ln7bC, label %u72U [i64 1, label %u72U
i64 2, label %c72C]
u72U:
  %ln7bD = load i64*, i64** %Sp_Var
  %ln7bE = getelementptr inbounds i64, i64* %ln7bD, i32 1
  %ln7bF = ptrtoint i64* %ln7bE to i64
  %ln7bG = inttoptr i64 %ln7bF to i64*
  store i64* %ln7bG, i64** %Sp_Var
  %ln7bH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5bD$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7bI = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7bH( i64* %Base_Arg, i64* %ln7bI, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c72C:
  %ln7bK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72A_info$def to i64
  %ln7bJ = load i64*, i64** %Sp_Var
  %ln7bL = getelementptr inbounds i64, i64* %ln7bJ, i32 0
  store i64 %ln7bK, i64* %ln7bL, !tbaa !2
  %ln7bM = load i64*, i64** %Sp_Var
  %ln7bN = getelementptr inbounds i64, i64* %ln7bM, i32 3
  %ln7bO = bitcast i64* %ln7bN to i64*
  %ln7bP = load i64, i64* %ln7bO, !tbaa !2
  store i64 %ln7bP, i64* %R2_Var
  %ln7bR = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7bQ = load i64*, i64** %Sp_Var
  %ln7bS = getelementptr inbounds i64, i64* %ln7bQ, i32 -3
  store i64 %ln7bR, i64* %ln7bS, !tbaa !2
  %ln7bU = add i64 %R1_Arg, 6
  %ln7bV = inttoptr i64 %ln7bU to i64*
  %ln7bW = load i64, i64* %ln7bV, !tbaa !4
  %ln7bT = load i64*, i64** %Sp_Var
  %ln7bX = getelementptr inbounds i64, i64* %ln7bT, i32 -2
  store i64 %ln7bW, i64* %ln7bX, !tbaa !2
  %ln7bZ = load i64*, i64** %Sp_Var
  %ln7c0 = getelementptr inbounds i64, i64* %ln7bZ, i32 6
  %ln7c1 = bitcast i64* %ln7c0 to i64*
  %ln7c2 = load i64, i64* %ln7c1, !tbaa !2
  %ln7bY = load i64*, i64** %Sp_Var
  %ln7c3 = getelementptr inbounds i64, i64* %ln7bY, i32 -1
  store i64 %ln7c2, i64* %ln7c3, !tbaa !2
  %ln7c5 = add i64 %R1_Arg, 14
  %ln7c6 = inttoptr i64 %ln7c5 to i64*
  %ln7c7 = load i64, i64* %ln7c6, !tbaa !4
  %ln7c4 = load i64*, i64** %Sp_Var
  %ln7c8 = getelementptr inbounds i64, i64* %ln7c4, i32 6
  store i64 %ln7c7, i64* %ln7c8, !tbaa !2
  %ln7c9 = load i64*, i64** %Sp_Var
  %ln7ca = getelementptr inbounds i64, i64* %ln7c9, i32 -3
  %ln7cb = ptrtoint i64* %ln7ca to i64
  %ln7cc = inttoptr i64 %ln7cb to i64*
  store i64* %ln7cc, i64** %Sp_Var
  %ln7cd = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7ce = load i64*, i64** %Sp_Var
  %ln7cf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7cd( i64* %Base_Arg, i64* %ln7ce, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7cf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c72A_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72A_info$def to i8*)
define internal ghccc void @c72A_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 264, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55j_closure_struct* @r55j_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c72A_info$def to i64)) to i32),i32 0)}>
{
n7cg:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c72A
c72A:
  %ln7ch = load i64, i64* %R1_Var
  %ln7ci = and i64 %ln7ch, 7
  switch i64 %ln7ci, label %u72V [i64 1, label %u72V
i64 2, label %c72M]
u72V:
  %ln7cj = load i64*, i64** %Sp_Var
  %ln7ck = getelementptr inbounds i64, i64* %ln7cj, i32 1
  %ln7cl = ptrtoint i64* %ln7ck to i64
  %ln7cm = inttoptr i64 %ln7cl to i64*
  store i64* %ln7cm, i64** %Sp_Var
  %ln7cn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5bD$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7co = load i64*, i64** %Sp_Var
  %ln7cp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7cn( i64* %Base_Arg, i64* %ln7co, i64* %Hp_Arg, i64 %ln7cp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c72M:
  %ln7cq = load i64*, i64** %Sp_Var
  %ln7cr = getelementptr inbounds i64, i64* %ln7cq, i32 6
  %ln7cs = bitcast i64* %ln7cr to i64*
  %ln7ct = load i64, i64* %ln7cs, !tbaa !2
  store i64 %ln7ct, i64* %R3_Var
  %ln7cu = load i64*, i64** %Sp_Var
  %ln7cv = getelementptr inbounds i64, i64* %ln7cu, i32 1
  %ln7cw = bitcast i64* %ln7cv to i64*
  %ln7cx = load i64, i64* %ln7cw, !tbaa !2
  store i64 %ln7cx, i64* %R2_Var
  %ln7cy = load i64*, i64** %Sp_Var
  %ln7cz = getelementptr inbounds i64, i64* %ln7cy, i32 7
  %ln7cA = bitcast i64* %ln7cz to i64*
  %ln7cB = load i64, i64* %ln7cA, !tbaa !2
  store i64 %ln7cB, i64* %R1_Var
  %ln7cC = load i64*, i64** %Sp_Var
  %ln7cD = getelementptr inbounds i64, i64* %ln7cC, i32 9
  %ln7cE = ptrtoint i64* %ln7cD to i64
  %ln7cF = inttoptr i64 %ln7cE to i64*
  store i64* %ln7cF, i64** %Sp_Var
  %ln7cG = bitcast i8* @stg_ap_pp_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7cH = load i64*, i64** %Sp_Var
  %ln7cI = load i64, i64* %R1_Var
  %ln7cJ = load i64, i64* %R2_Var
  %ln7cK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7cG( i64* %Base_Arg, i64* %ln7cH, i64* %Hp_Arg, i64 %ln7cI, i64 %ln7cJ, i64 %ln7cK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s5bD = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5bD$def to i8*)
define internal ghccc void @_s5bD$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n7cL:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s5bD
s5bD:
  %ln7cN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70V_info$def to i64
  %ln7cM = load i64*, i64** %Sp_Var
  %ln7cO = getelementptr inbounds i64, i64* %ln7cM, i32 -1
  store i64 %ln7cN, i64* %ln7cO, !tbaa !2
  %ln7cP = load i64*, i64** %Sp_Var
  %ln7cQ = getelementptr inbounds i64, i64* %ln7cP, i32 7
  %ln7cR = bitcast i64* %ln7cQ to i64*
  %ln7cS = load i64, i64* %ln7cR, !tbaa !2
  store i64 %ln7cS, i64* %R1_Var
  %ln7cT = load i64*, i64** %Sp_Var
  %ln7cU = getelementptr inbounds i64, i64* %ln7cT, i32 -1
  %ln7cV = ptrtoint i64* %ln7cU to i64
  %ln7cW = inttoptr i64 %ln7cV to i64*
  store i64* %ln7cW, i64** %Sp_Var
  %ln7cX = load i64, i64* %R1_Var
  %ln7cY = and i64 %ln7cX, 7
  %ln7cZ = icmp ne i64 %ln7cY, 0
  br i1 %ln7cZ, label %u732, label %c70W
c70W:
  %ln7d1 = load i64, i64* %R1_Var
  %ln7d2 = inttoptr i64 %ln7d1 to i64*
  %ln7d3 = load i64, i64* %ln7d2, !tbaa !4
  %ln7d4 = inttoptr i64 %ln7d3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7d5 = load i64*, i64** %Sp_Var
  %ln7d6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7d4( i64* %Base_Arg, i64* %ln7d5, i64* %Hp_Arg, i64 %ln7d6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u732:
  %ln7d7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70V_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7d8 = load i64*, i64** %Sp_Var
  %ln7d9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7d7( i64* %Base_Arg, i64* %ln7d8, i64* %Hp_Arg, i64 %ln7d9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c70V_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70V_info$def to i8*)
define internal ghccc void @c70V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 10504, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55j_closure_struct* @r55j_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c70V_info$def to i64)) to i32),i32 0)}>
{
n7da:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5bG = alloca i64, i32 1
  %ls5bH = alloca i64, i32 1
  %lc711 = alloca i64, i32 1
  br label %c70V
c70V:
  %ln7db = load i64, i64* %R1_Var
  %ln7dc = and i64 %ln7db, 7
  switch i64 %ln7dc, label %c72a [i64 1, label %c72a
i64 2, label %c72c]
c72a:
  %ln7dd = ptrtoint %r55j_closure_struct* @r55j_closure$def to i64
  store i64 %ln7dd, i64* %R1_Var
  %ln7de = load i64*, i64** %Sp_Var
  %ln7df = getelementptr inbounds i64, i64* %ln7de, i32 9
  %ln7dg = ptrtoint i64* %ln7df to i64
  %ln7dh = inttoptr i64 %ln7dg to i64*
  store i64* %ln7dh, i64** %Sp_Var
  %ln7dj = load i64, i64* %R1_Var
  %ln7dk = inttoptr i64 %ln7dj to i64*
  %ln7dl = load i64, i64* %ln7dk, !tbaa !4
  %ln7dm = inttoptr i64 %ln7dl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7dn = load i64*, i64** %Sp_Var
  %ln7do = load i64*, i64** %Hp_Var
  %ln7dp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7dm( i64* %Base_Arg, i64* %ln7dn, i64* %ln7do, i64 %ln7dp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c72c:
  %ln7dq = load i64*, i64** %Hp_Var
  %ln7dr = getelementptr inbounds i64, i64* %ln7dq, i32 16
  %ln7ds = ptrtoint i64* %ln7dr to i64
  %ln7dt = inttoptr i64 %ln7ds to i64*
  store i64* %ln7dt, i64** %Hp_Var
  %ln7du = load i64*, i64** %Hp_Var
  %ln7dv = ptrtoint i64* %ln7du to i64
  %ln7dw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7dx = bitcast i64* %ln7dw to i64*
  %ln7dy = load i64, i64* %ln7dx, !tbaa !5
  %ln7dz = icmp ugt i64 %ln7dv, %ln7dy
  %ln7dA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7dz, i1 0 )
  br i1 %ln7dA, label %c72f, label %c72e
c72e:
  %ln7dD = load i64, i64* %R1_Var
  %ln7dE = add i64 %ln7dD, 6
  %ln7dF = inttoptr i64 %ln7dE to i64*
  %ln7dG = load i64, i64* %ln7dF, !tbaa !4
  store i64 %ln7dG, i64* %ls5bG
  %ln7dJ = load i64, i64* %R1_Var
  %ln7dK = add i64 %ln7dJ, 14
  %ln7dL = inttoptr i64 %ln7dK to i64*
  %ln7dM = load i64, i64* %ln7dL, !tbaa !4
  store i64 %ln7dM, i64* %ls5bH
  %ln7dO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bI_info$def to i64
  %ln7dN = load i64*, i64** %Hp_Var
  %ln7dP = getelementptr inbounds i64, i64* %ln7dN, i32 -15
  store i64 %ln7dO, i64* %ln7dP, !tbaa !3
  %ln7dR = load i64*, i64** %Sp_Var
  %ln7dS = getelementptr inbounds i64, i64* %ln7dR, i32 4
  %ln7dT = bitcast i64* %ln7dS to i64*
  %ln7dU = load i64, i64* %ln7dT, !tbaa !2
  %ln7dQ = load i64*, i64** %Hp_Var
  %ln7dV = getelementptr inbounds i64, i64* %ln7dQ, i32 -13
  store i64 %ln7dU, i64* %ln7dV, !tbaa !3
  %ln7dX = load i64*, i64** %Sp_Var
  %ln7dY = getelementptr inbounds i64, i64* %ln7dX, i32 2
  %ln7dZ = bitcast i64* %ln7dY to i64*
  %ln7e0 = load i64, i64* %ln7dZ, !tbaa !2
  %ln7dW = load i64*, i64** %Hp_Var
  %ln7e1 = getelementptr inbounds i64, i64* %ln7dW, i32 -12
  store i64 %ln7e0, i64* %ln7e1, !tbaa !3
  %ln7e3 = load i64, i64* %ls5bG
  %ln7e2 = load i64*, i64** %Hp_Var
  %ln7e4 = getelementptr inbounds i64, i64* %ln7e2, i32 -11
  store i64 %ln7e3, i64* %ln7e4, !tbaa !3
  %ln7e6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bM_info$def to i64
  %ln7e5 = load i64*, i64** %Hp_Var
  %ln7e7 = getelementptr inbounds i64, i64* %ln7e5, i32 -10
  store i64 %ln7e6, i64* %ln7e7, !tbaa !3
  %ln7e9 = load i64*, i64** %Sp_Var
  %ln7ea = getelementptr inbounds i64, i64* %ln7e9, i32 5
  %ln7eb = bitcast i64* %ln7ea to i64*
  %ln7ec = load i64, i64* %ln7eb, !tbaa !2
  %ln7e8 = load i64*, i64** %Hp_Var
  %ln7ed = getelementptr inbounds i64, i64* %ln7e8, i32 -8
  store i64 %ln7ec, i64* %ln7ed, !tbaa !3
  %ln7ef = load i64*, i64** %Sp_Var
  %ln7eg = getelementptr inbounds i64, i64* %ln7ef, i32 1
  %ln7eh = bitcast i64* %ln7eg to i64*
  %ln7ei = load i64, i64* %ln7eh, !tbaa !2
  %ln7ee = load i64*, i64** %Hp_Var
  %ln7ej = getelementptr inbounds i64, i64* %ln7ee, i32 -7
  store i64 %ln7ei, i64* %ln7ej, !tbaa !3
  %ln7ek = load i64*, i64** %Hp_Var
  %ln7el = getelementptr inbounds i64, i64* %ln7ek, i32 -15
  %ln7em = ptrtoint i64* %ln7el to i64
  store i64 %ln7em, i64* %lc711
  %ln7eo = load i64, i64* %lc711
  %ln7en = load i64*, i64** %Hp_Var
  %ln7ep = getelementptr inbounds i64, i64* %ln7en, i32 -6
  store i64 %ln7eo, i64* %ln7ep, !tbaa !3
  %ln7er = load i64, i64* %ls5bH
  %ln7eq = load i64*, i64** %Hp_Var
  %ln7es = getelementptr inbounds i64, i64* %ln7eq, i32 -5
  store i64 %ln7er, i64* %ln7es, !tbaa !3
  %ln7eu = load i64, i64* %R1_Var
  %ln7et = load i64*, i64** %Hp_Var
  %ln7ev = getelementptr inbounds i64, i64* %ln7et, i32 -4
  store i64 %ln7eu, i64* %ln7ev, !tbaa !3
  %ln7ex = load i64*, i64** %Sp_Var
  %ln7ey = getelementptr inbounds i64, i64* %ln7ex, i32 7
  %ln7ez = bitcast i64* %ln7ey to i64*
  %ln7eA = load i64, i64* %ln7ez, !tbaa !2
  %ln7ew = load i64*, i64** %Hp_Var
  %ln7eB = getelementptr inbounds i64, i64* %ln7ew, i32 -3
  store i64 %ln7eA, i64* %ln7eB, !tbaa !3
  %ln7eD = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7eC = load i64*, i64** %Hp_Var
  %ln7eE = getelementptr inbounds i64, i64* %ln7eC, i32 -2
  store i64 %ln7eD, i64* %ln7eE, !tbaa !3
  %ln7eG = load i64, i64* %lc711
  %ln7eF = load i64*, i64** %Hp_Var
  %ln7eH = getelementptr inbounds i64, i64* %ln7eF, i32 -1
  store i64 %ln7eG, i64* %ln7eH, !tbaa !3
  %ln7eJ = load i64*, i64** %Hp_Var
  %ln7eK = getelementptr inbounds i64, i64* %ln7eJ, i32 -10
  %ln7eL = ptrtoint i64* %ln7eK to i64
  %ln7eI = load i64*, i64** %Hp_Var
  %ln7eM = getelementptr inbounds i64, i64* %ln7eI, i32 0
  store i64 %ln7eL, i64* %ln7eM, !tbaa !3
  %ln7eO = load i64*, i64** %Hp_Var
  %ln7eP = ptrtoint i64* %ln7eO to i64
  %ln7eQ = add i64 %ln7eP, -14
  store i64 %ln7eQ, i64* %R1_Var
  %ln7eR = load i64*, i64** %Sp_Var
  %ln7eS = getelementptr inbounds i64, i64* %ln7eR, i32 9
  %ln7eT = ptrtoint i64* %ln7eS to i64
  %ln7eU = inttoptr i64 %ln7eT to i64*
  store i64* %ln7eU, i64** %Sp_Var
  %ln7eV = load i64*, i64** %Sp_Var
  %ln7eW = getelementptr inbounds i64, i64* %ln7eV, i32 0
  %ln7eX = bitcast i64* %ln7eW to i64*
  %ln7eY = load i64, i64* %ln7eX, !tbaa !2
  %ln7eZ = inttoptr i64 %ln7eY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7f0 = load i64*, i64** %Sp_Var
  %ln7f1 = load i64*, i64** %Hp_Var
  %ln7f2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7eZ( i64* %Base_Arg, i64* %ln7f0, i64* %ln7f1, i64 %ln7f2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c72f:
  %ln7f3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %ln7f3, !tbaa !5
  %ln7f4 = load i64, i64* %R1_Var
  store i64 %ln7f4, i64* %R1_Var
  %ln7f5 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7f6 = load i64*, i64** %Sp_Var
  %ln7f7 = load i64*, i64** %Hp_Var
  %ln7f8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7f5( i64* %Base_Arg, i64* %ln7f6, i64* %ln7f7, i64 %ln7f8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c71G_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71G_info$def to i8*)
define internal ghccc void @c71G_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2438, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55w_closure_struct* @r55w_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71G_info$def to i64)) to i32),i32 0)}>
{
n7f9:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5bs = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c71G
c71G:
  %ln7fa = load i64, i64* %R1_Var
  %ln7fb = and i64 %ln7fa, 7
  switch i64 %ln7fb, label %c71O [i64 1, label %c71O
i64 2, label %c71T]
c71O:
  %ln7fc = ptrtoint %r55w_closure_struct* @r55w_closure$def to i64
  store i64 %ln7fc, i64* %R1_Var
  %ln7fd = load i64*, i64** %Sp_Var
  %ln7fe = getelementptr inbounds i64, i64* %ln7fd, i32 7
  %ln7ff = ptrtoint i64* %ln7fe to i64
  %ln7fg = inttoptr i64 %ln7ff to i64*
  store i64* %ln7fg, i64** %Sp_Var
  %ln7fi = load i64, i64* %R1_Var
  %ln7fj = inttoptr i64 %ln7fi to i64*
  %ln7fk = load i64, i64* %ln7fj, !tbaa !4
  %ln7fl = inttoptr i64 %ln7fk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7fm = load i64*, i64** %Sp_Var
  %ln7fn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7fl( i64* %Base_Arg, i64* %ln7fm, i64* %Hp_Arg, i64 %ln7fn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c71T:
  %ln7fo = load i64*, i64** %Sp_Var
  %ln7fp = getelementptr inbounds i64, i64* %ln7fo, i32 4
  %ln7fq = bitcast i64* %ln7fp to i64*
  %ln7fr = load i64, i64* %ln7fq, !tbaa !2
  store i64 %ln7fr, i64* %ls5bs
  %ln7ft = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71R_info$def to i64
  %ln7fs = load i64*, i64** %Sp_Var
  %ln7fu = getelementptr inbounds i64, i64* %ln7fs, i32 4
  store i64 %ln7ft, i64* %ln7fu, !tbaa !2
  %ln7fv = load i64*, i64** %Sp_Var
  %ln7fw = getelementptr inbounds i64, i64* %ln7fv, i32 1
  %ln7fx = bitcast i64* %ln7fw to i64*
  %ln7fy = load i64, i64* %ln7fx, !tbaa !2
  store i64 %ln7fy, i64* %R2_Var
  %ln7fA = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7fz = load i64*, i64** %Sp_Var
  %ln7fB = getelementptr inbounds i64, i64* %ln7fz, i32 1
  store i64 %ln7fA, i64* %ln7fB, !tbaa !2
  %ln7fF = load i64, i64* %R1_Var
  %ln7fG = add i64 %ln7fF, 6
  %ln7fH = inttoptr i64 %ln7fG to i64*
  %ln7fI = load i64, i64* %ln7fH, !tbaa !4
  %ln7fC = load i64*, i64** %Sp_Var
  %ln7fJ = getelementptr inbounds i64, i64* %ln7fC, i32 2
  store i64 %ln7fI, i64* %ln7fJ, !tbaa !2
  %ln7fL = load i64, i64* %ls5bs
  %ln7fK = load i64*, i64** %Sp_Var
  %ln7fM = getelementptr inbounds i64, i64* %ln7fK, i32 3
  store i64 %ln7fL, i64* %ln7fM, !tbaa !2
  %ln7fQ = load i64, i64* %R1_Var
  %ln7fR = add i64 %ln7fQ, 14
  %ln7fS = inttoptr i64 %ln7fR to i64*
  %ln7fT = load i64, i64* %ln7fS, !tbaa !4
  %ln7fN = load i64*, i64** %Sp_Var
  %ln7fU = getelementptr inbounds i64, i64* %ln7fN, i32 6
  store i64 %ln7fT, i64* %ln7fU, !tbaa !2
  %ln7fV = load i64*, i64** %Sp_Var
  %ln7fW = getelementptr inbounds i64, i64* %ln7fV, i32 1
  %ln7fX = ptrtoint i64* %ln7fW to i64
  %ln7fY = inttoptr i64 %ln7fX to i64*
  store i64* %ln7fY, i64** %Sp_Var
  %ln7fZ = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7g0 = load i64*, i64** %Sp_Var
  %ln7g1 = load i64, i64* %R1_Var
  %ln7g2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7fZ( i64* %Base_Arg, i64* %ln7g0, i64* %Hp_Arg, i64 %ln7g1, i64 %ln7g2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c71R_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c71R_info$def to i8*)
define internal ghccc void @c71R_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n7g3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c71R
c71R:
  %ln7g4 = load i64, i64* %R1_Var
  %ln7g5 = and i64 %ln7g4, 7
  switch i64 %ln7g5, label %c71Z [i64 1, label %c71Z
i64 2, label %c723]
c71Z:
  %ln7g6 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7g7 = add i64 %ln7g6, 1
  store i64 %ln7g7, i64* %R1_Var
  %ln7g8 = load i64*, i64** %Sp_Var
  %ln7g9 = getelementptr inbounds i64, i64* %ln7g8, i32 3
  %ln7ga = ptrtoint i64* %ln7g9 to i64
  %ln7gb = inttoptr i64 %ln7ga to i64*
  store i64* %ln7gb, i64** %Sp_Var
  %ln7gc = load i64*, i64** %Sp_Var
  %ln7gd = getelementptr inbounds i64, i64* %ln7gc, i32 0
  %ln7ge = bitcast i64* %ln7gd to i64*
  %ln7gf = load i64, i64* %ln7ge, !tbaa !2
  %ln7gg = inttoptr i64 %ln7gf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7gh = load i64*, i64** %Sp_Var
  %ln7gi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7gg( i64* %Base_Arg, i64* %ln7gh, i64* %Hp_Arg, i64 %ln7gi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c723:
  %ln7gj = load i64*, i64** %Sp_Var
  %ln7gk = getelementptr inbounds i64, i64* %ln7gj, i32 2
  %ln7gl = bitcast i64* %ln7gk to i64*
  %ln7gm = load i64, i64* %ln7gl, !tbaa !2
  store i64 %ln7gm, i64* %R3_Var
  %ln7gn = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7go = add i64 %ln7gn, 1
  store i64 %ln7go, i64* %R2_Var
  %ln7gp = load i64*, i64** %Sp_Var
  %ln7gq = getelementptr inbounds i64, i64* %ln7gp, i32 1
  %ln7gr = bitcast i64* %ln7gq to i64*
  %ln7gs = load i64, i64* %ln7gr, !tbaa !2
  store i64 %ln7gs, i64* %R1_Var
  %ln7gt = load i64*, i64** %Sp_Var
  %ln7gu = getelementptr inbounds i64, i64* %ln7gt, i32 3
  %ln7gv = ptrtoint i64* %ln7gu to i64
  %ln7gw = inttoptr i64 %ln7gv to i64*
  store i64* %ln7gw, i64** %Sp_Var
  %ln7gx = bitcast i8* @stg_ap_pp_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7gy = load i64*, i64** %Sp_Var
  %ln7gz = load i64, i64* %R1_Var
  %ln7gA = load i64, i64* %R2_Var
  %ln7gB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7gx( i64* %Base_Arg, i64* %ln7gy, i64* %Hp_Arg, i64 %ln7gz, i64 %ln7gA, i64 %ln7gB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFloatingPszuzdczs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdczs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u738_srt_struct* @_u738_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to i64)) to i32),i32 0)}>
{
n7gC:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc70k = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c733
c733:
  %ln7gD = load i64*, i64** %Hp_Var
  %ln7gE = getelementptr inbounds i64, i64* %ln7gD, i32 16
  %ln7gF = ptrtoint i64* %ln7gE to i64
  %ln7gG = inttoptr i64 %ln7gF to i64*
  store i64* %ln7gG, i64** %Hp_Var
  %ln7gH = load i64*, i64** %Hp_Var
  %ln7gI = ptrtoint i64* %ln7gH to i64
  %ln7gJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7gK = bitcast i64* %ln7gJ to i64*
  %ln7gL = load i64, i64* %ln7gK, !tbaa !5
  %ln7gM = icmp ugt i64 %ln7gI, %ln7gL
  %ln7gN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7gM, i1 0 )
  br i1 %ln7gN, label %c737, label %c736
c736:
  %ln7gP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5br_info$def to i64
  %ln7gO = load i64*, i64** %Hp_Var
  %ln7gQ = getelementptr inbounds i64, i64* %ln7gO, i32 -15
  store i64 %ln7gP, i64* %ln7gQ, !tbaa !3
  %ln7gS = load i64, i64* %R3_Var
  %ln7gR = load i64*, i64** %Hp_Var
  %ln7gT = getelementptr inbounds i64, i64* %ln7gR, i32 -13
  store i64 %ln7gS, i64* %ln7gT, !tbaa !3
  %ln7gV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bs_info$def to i64
  %ln7gU = load i64*, i64** %Hp_Var
  %ln7gW = getelementptr inbounds i64, i64* %ln7gU, i32 -12
  store i64 %ln7gV, i64* %ln7gW, !tbaa !3
  %ln7gX = load i64*, i64** %Hp_Var
  %ln7gY = getelementptr inbounds i64, i64* %ln7gX, i32 -15
  %ln7gZ = ptrtoint i64* %ln7gY to i64
  store i64 %ln7gZ, i64* %lc70k
  %ln7h1 = load i64, i64* %lc70k
  %ln7h0 = load i64*, i64** %Hp_Var
  %ln7h2 = getelementptr inbounds i64, i64* %ln7h0, i32 -10
  store i64 %ln7h1, i64* %ln7h2, !tbaa !3
  %ln7h4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bt_info$def to i64
  %ln7h3 = load i64*, i64** %Hp_Var
  %ln7h5 = getelementptr inbounds i64, i64* %ln7h3, i32 -9
  store i64 %ln7h4, i64* %ln7h5, !tbaa !3
  %ln7h7 = load i64, i64* %R2_Var
  %ln7h6 = load i64*, i64** %Hp_Var
  %ln7h8 = getelementptr inbounds i64, i64* %ln7h6, i32 -7
  store i64 %ln7h7, i64* %ln7h8, !tbaa !3
  %ln7ha = load i64, i64* %R3_Var
  %ln7h9 = load i64*, i64** %Hp_Var
  %ln7hb = getelementptr inbounds i64, i64* %ln7h9, i32 -6
  store i64 %ln7ha, i64* %ln7hb, !tbaa !3
  %ln7hd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bS_info$def to i64
  %ln7hc = load i64*, i64** %Hp_Var
  %ln7he = getelementptr inbounds i64, i64* %ln7hc, i32 -5
  store i64 %ln7hd, i64* %ln7he, !tbaa !3
  %ln7hg = load i64, i64* %lc70k
  %ln7hf = load i64*, i64** %Hp_Var
  %ln7hh = getelementptr inbounds i64, i64* %ln7hf, i32 -4
  store i64 %ln7hg, i64* %ln7hh, !tbaa !3
  %ln7hj = load i64*, i64** %Hp_Var
  %ln7hk = getelementptr inbounds i64, i64* %ln7hj, i32 -9
  %ln7hl = ptrtoint i64* %ln7hk to i64
  %ln7hi = load i64*, i64** %Hp_Var
  %ln7hm = getelementptr inbounds i64, i64* %ln7hi, i32 -3
  store i64 %ln7hl, i64* %ln7hm, !tbaa !3
  %ln7ho = load i64, i64* %R3_Var
  %ln7hn = load i64*, i64** %Hp_Var
  %ln7hp = getelementptr inbounds i64, i64* %ln7hn, i32 -2
  store i64 %ln7ho, i64* %ln7hp, !tbaa !3
  %ln7hr = load i64, i64* %R2_Var
  %ln7hq = load i64*, i64** %Hp_Var
  %ln7hs = getelementptr inbounds i64, i64* %ln7hq, i32 -1
  store i64 %ln7hr, i64* %ln7hs, !tbaa !3
  %ln7hu = load i64*, i64** %Hp_Var
  %ln7hv = getelementptr inbounds i64, i64* %ln7hu, i32 -12
  %ln7hw = ptrtoint i64* %ln7hv to i64
  %ln7ht = load i64*, i64** %Hp_Var
  %ln7hx = getelementptr inbounds i64, i64* %ln7ht, i32 0
  store i64 %ln7hw, i64* %ln7hx, !tbaa !3
  %ln7hz = load i64*, i64** %Hp_Var
  %ln7hA = ptrtoint i64* %ln7hz to i64
  %ln7hB = add i64 %ln7hA, -38
  store i64 %ln7hB, i64* %R1_Var
  %ln7hC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln7hD = bitcast i64* %ln7hC to i64*
  %ln7hE = load i64, i64* %ln7hD, !tbaa !2
  %ln7hF = inttoptr i64 %ln7hE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7hG = load i64*, i64** %Hp_Var
  %ln7hH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7hF( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7hG, i64 %ln7hH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c737:
  %ln7hI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %ln7hI, !tbaa !5
  %ln7hJ = load i64, i64* %R3_Var
  store i64 %ln7hJ, i64* %R3_Var
  %ln7hK = load i64, i64* %R2_Var
  store i64 %ln7hK, i64* %R2_Var
  %ln7hL = ptrtoint %Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64
  store i64 %ln7hL, i64* %R1_Var
  %ln7hM = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7hN = bitcast i64* %ln7hM to i64*
  %ln7hO = load i64, i64* %ln7hN, !tbaa !5
  %ln7hP = inttoptr i64 %ln7hO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7hQ = load i64*, i64** %Hp_Var
  %ln7hR = load i64, i64* %R1_Var
  %ln7hS = load i64, i64* %R2_Var
  %ln7hT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7hP( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7hQ, i64 %ln7hR, i64 %ln7hS, i64 %ln7hT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdctanh_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_zdfFloatingPszuzdctanh_closure$def = internal global %Main_zdfFloatingPszuzdctanh_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctanh_info$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%r55K_closure_struct* @r55K_closure$def to i64), i64 ptrtoint (%r55L_closure_struct* @r55L_closure$def to i64), i64 0}>
@Main_zdfFloatingPszuzdctanh_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdctanh_closure_struct* @Main_zdfFloatingPszuzdctanh_closure$def to i8*)
@Main_zdfFloatingPszuzdctanh_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctanh_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdctanh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 3, i32 14, i32 0}>
{
n7i1:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7hY
c7hY:
  %ln7i2 = load i64*, i64** %Sp_Var
  %ln7i3 = getelementptr inbounds i64, i64* %ln7i2, i32 -3
  %ln7i4 = ptrtoint i64* %ln7i3 to i64
  %ln7i5 = icmp ult i64 %ln7i4, %SpLim_Arg
  %ln7i6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7i5, i1 0 )
  br i1 %ln7i6, label %c7hZ, label %c7i0
c7i0:
  %ln7i7 = load i64, i64* %R3_Var
  store i64 %ln7i7, i64* %R3_Var
  %ln7i8 = load i64, i64* %R2_Var
  store i64 %ln7i8, i64* %R2_Var
  %ln7ia = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7i9 = load i64*, i64** %Sp_Var
  %ln7ib = getelementptr inbounds i64, i64* %ln7i9, i32 -3
  store i64 %ln7ia, i64* %ln7ib, !tbaa !2
  %ln7id = ptrtoint %r55K_closure_struct* @r55K_closure$def to i64
  %ln7ic = load i64*, i64** %Sp_Var
  %ln7ie = getelementptr inbounds i64, i64* %ln7ic, i32 -2
  store i64 %ln7id, i64* %ln7ie, !tbaa !2
  %ln7ig = ptrtoint %r55L_closure_struct* @r55L_closure$def to i64
  %ln7if = load i64*, i64** %Sp_Var
  %ln7ih = getelementptr inbounds i64, i64* %ln7if, i32 -1
  store i64 %ln7ig, i64* %ln7ih, !tbaa !2
  %ln7ii = load i64*, i64** %Sp_Var
  %ln7ij = getelementptr inbounds i64, i64* %ln7ii, i32 -3
  %ln7ik = ptrtoint i64* %ln7ij to i64
  %ln7il = inttoptr i64 %ln7ik to i64*
  store i64* %ln7il, i64** %Sp_Var
  %ln7im = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7in = load i64*, i64** %Sp_Var
  %ln7io = load i64, i64* %R1_Var
  %ln7ip = load i64, i64* %R2_Var
  %ln7iq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7im( i64* %Base_Arg, i64* %ln7in, i64* %Hp_Arg, i64 %ln7io, i64 %ln7ip, i64 %ln7iq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7hZ:
  %ln7ir = load i64, i64* %R4_Var
  store i64 %ln7ir, i64* %R4_Var
  %ln7is = load i64, i64* %R3_Var
  store i64 %ln7is, i64* %R3_Var
  %ln7it = load i64, i64* %R2_Var
  store i64 %ln7it, i64* %R2_Var
  %ln7iu = ptrtoint %Main_zdfFloatingPszuzdctanh_closure_struct* @Main_zdfFloatingPszuzdctanh_closure$def to i64
  store i64 %ln7iu, i64* %R1_Var
  %ln7iv = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7iw = bitcast i64* %ln7iv to i64*
  %ln7ix = load i64, i64* %ln7iw, !tbaa !5
  %ln7iy = inttoptr i64 %ln7ix to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7iz = load i64*, i64** %Sp_Var
  %ln7iA = load i64, i64* %R1_Var
  %ln7iB = load i64, i64* %R2_Var
  %ln7iC = load i64, i64* %R3_Var
  %ln7iD = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7iy( i64* %Base_Arg, i64* %ln7iz, i64* %Hp_Arg, i64 %ln7iA, i64 %ln7iB, i64 %ln7iC, i64 %ln7iD, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdctan_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_zdfFloatingPszuzdctan_closure$def = internal global %Main_zdfFloatingPszuzdctan_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctan_info$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%r55M_closure_struct* @r55M_closure$def to i64), i64 ptrtoint (%r55N_closure_struct* @r55N_closure$def to i64), i64 0}>
@Main_zdfFloatingPszuzdctan_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdctan_closure_struct* @Main_zdfFloatingPszuzdctan_closure$def to i8*)
@Main_zdfFloatingPszuzdctan_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctan_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdctan_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 3, i32 14, i32 0}>
{
n7iL:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7iI
c7iI:
  %ln7iM = load i64*, i64** %Sp_Var
  %ln7iN = getelementptr inbounds i64, i64* %ln7iM, i32 -3
  %ln7iO = ptrtoint i64* %ln7iN to i64
  %ln7iP = icmp ult i64 %ln7iO, %SpLim_Arg
  %ln7iQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7iP, i1 0 )
  br i1 %ln7iQ, label %c7iJ, label %c7iK
c7iK:
  %ln7iR = load i64, i64* %R3_Var
  store i64 %ln7iR, i64* %R3_Var
  %ln7iS = load i64, i64* %R2_Var
  store i64 %ln7iS, i64* %R2_Var
  %ln7iU = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7iT = load i64*, i64** %Sp_Var
  %ln7iV = getelementptr inbounds i64, i64* %ln7iT, i32 -3
  store i64 %ln7iU, i64* %ln7iV, !tbaa !2
  %ln7iX = ptrtoint %r55M_closure_struct* @r55M_closure$def to i64
  %ln7iW = load i64*, i64** %Sp_Var
  %ln7iY = getelementptr inbounds i64, i64* %ln7iW, i32 -2
  store i64 %ln7iX, i64* %ln7iY, !tbaa !2
  %ln7j0 = ptrtoint %r55N_closure_struct* @r55N_closure$def to i64
  %ln7iZ = load i64*, i64** %Sp_Var
  %ln7j1 = getelementptr inbounds i64, i64* %ln7iZ, i32 -1
  store i64 %ln7j0, i64* %ln7j1, !tbaa !2
  %ln7j2 = load i64*, i64** %Sp_Var
  %ln7j3 = getelementptr inbounds i64, i64* %ln7j2, i32 -3
  %ln7j4 = ptrtoint i64* %ln7j3 to i64
  %ln7j5 = inttoptr i64 %ln7j4 to i64*
  store i64* %ln7j5, i64** %Sp_Var
  %ln7j6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7j7 = load i64*, i64** %Sp_Var
  %ln7j8 = load i64, i64* %R1_Var
  %ln7j9 = load i64, i64* %R2_Var
  %ln7ja = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7j6( i64* %Base_Arg, i64* %ln7j7, i64* %Hp_Arg, i64 %ln7j8, i64 %ln7j9, i64 %ln7ja, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7iJ:
  %ln7jb = load i64, i64* %R4_Var
  store i64 %ln7jb, i64* %R4_Var
  %ln7jc = load i64, i64* %R3_Var
  store i64 %ln7jc, i64* %R3_Var
  %ln7jd = load i64, i64* %R2_Var
  store i64 %ln7jd, i64* %R2_Var
  %ln7je = ptrtoint %Main_zdfFloatingPszuzdctan_closure_struct* @Main_zdfFloatingPszuzdctan_closure$def to i64
  store i64 %ln7je, i64* %R1_Var
  %ln7jf = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7jg = bitcast i64* %ln7jf to i64*
  %ln7jh = load i64, i64* %ln7jg, !tbaa !5
  %ln7ji = inttoptr i64 %ln7jh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7jj = load i64*, i64** %Sp_Var
  %ln7jk = load i64, i64* %R1_Var
  %ln7jl = load i64, i64* %R2_Var
  %ln7jm = load i64, i64* %R3_Var
  %ln7jn = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ji( i64* %Base_Arg, i64* %ln7jj, i64* %Hp_Arg, i64 %ln7jk, i64 %ln7jl, i64 %ln7jm, i64 %ln7jn, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPszuzdclogBase_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdfFloatingPszuzdclogBase_closure$def = internal global %Main_zdfFloatingPszuzdclogBase_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclogBase_info$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%r55J_closure_struct* @r55J_closure$def to i64), i64 0}>
@Main_zdfFloatingPszuzdclogBase_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdclogBase_closure_struct* @Main_zdfFloatingPszuzdclogBase_closure$def to i8*)
@Main_zdfFloatingPszuzdclogBase_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclogBase_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdclogBase_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 2, i32 14, i32 0}>
{
n7jv:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7js
c7js:
  %ln7jw = load i64*, i64** %Sp_Var
  %ln7jx = getelementptr inbounds i64, i64* %ln7jw, i32 -3
  %ln7jy = ptrtoint i64* %ln7jx to i64
  %ln7jz = icmp ult i64 %ln7jy, %SpLim_Arg
  %ln7jA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7jz, i1 0 )
  br i1 %ln7jA, label %c7jt, label %c7ju
c7ju:
  %ln7jB = load i64, i64* %R3_Var
  store i64 %ln7jB, i64* %R3_Var
  %ln7jC = load i64, i64* %R2_Var
  store i64 %ln7jC, i64* %R2_Var
  %ln7jE = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7jD = load i64*, i64** %Sp_Var
  %ln7jF = getelementptr inbounds i64, i64* %ln7jD, i32 -3
  store i64 %ln7jE, i64* %ln7jF, !tbaa !2
  %ln7jH = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  %ln7jG = load i64*, i64** %Sp_Var
  %ln7jI = getelementptr inbounds i64, i64* %ln7jG, i32 -2
  store i64 %ln7jH, i64* %ln7jI, !tbaa !2
  %ln7jK = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  %ln7jJ = load i64*, i64** %Sp_Var
  %ln7jL = getelementptr inbounds i64, i64* %ln7jJ, i32 -1
  store i64 %ln7jK, i64* %ln7jL, !tbaa !2
  %ln7jM = load i64*, i64** %Sp_Var
  %ln7jN = getelementptr inbounds i64, i64* %ln7jM, i32 -3
  %ln7jO = ptrtoint i64* %ln7jN to i64
  %ln7jP = inttoptr i64 %ln7jO to i64*
  store i64* %ln7jP, i64** %Sp_Var
  %ln7jQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7jR = load i64*, i64** %Sp_Var
  %ln7jS = load i64, i64* %R1_Var
  %ln7jT = load i64, i64* %R2_Var
  %ln7jU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7jQ( i64* %Base_Arg, i64* %ln7jR, i64* %Hp_Arg, i64 %ln7jS, i64 %ln7jT, i64 %ln7jU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7jt:
  %ln7jV = load i64, i64* %R5_Var
  store i64 %ln7jV, i64* %R5_Var
  %ln7jW = load i64, i64* %R4_Var
  store i64 %ln7jW, i64* %R4_Var
  %ln7jX = load i64, i64* %R3_Var
  store i64 %ln7jX, i64* %R3_Var
  %ln7jY = load i64, i64* %R2_Var
  store i64 %ln7jY, i64* %R2_Var
  %ln7jZ = ptrtoint %Main_zdfFloatingPszuzdclogBase_closure_struct* @Main_zdfFloatingPszuzdclogBase_closure$def to i64
  store i64 %ln7jZ, i64* %R1_Var
  %ln7k0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7k1 = bitcast i64* %ln7k0 to i64*
  %ln7k2 = load i64, i64* %ln7k1, !tbaa !5
  %ln7k3 = inttoptr i64 %ln7k2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7k4 = load i64*, i64** %Sp_Var
  %ln7k5 = load i64, i64* %R1_Var
  %ln7k6 = load i64, i64* %R2_Var
  %ln7k7 = load i64, i64* %R3_Var
  %ln7k8 = load i64, i64* %R4_Var
  %ln7k9 = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7k3( i64* %Base_Arg, i64* %ln7k4, i64* %Hp_Arg, i64 %ln7k5, i64 %ln7k6, i64 %ln7k7, i64 %ln7k8, i64 %ln7k9, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfShowPs2_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdfShowPs2_closure$def = internal global %Main_zdfShowPs2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_zdfShowPs2_closure = alias i8, bitcast (%Main_zdfShowPs2_closure_struct* @Main_zdfShowPs2_closure$def to i8*)
%Main_zdfShowPs1_closure_struct = type <{i64, i64}>
@Main_zdfShowPs1_closure$def = internal global %Main_zdfShowPs1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPs1_info$def to i64), i64 0}>
@Main_zdfShowPs1_closure = alias i8, bitcast (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i8*)
@Main_zdfShowPs1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPs1_info$def to i8*)
define ghccc void @Main_zdfShowPs1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdfShowIntegerzuzdcshowList_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPs1_info$def to i64)) to i32),i32 0)}>
{
n7kh:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7ke
c7ke:
  %ln7ki = load i64, i64* %R2_Var
  store i64 %ln7ki, i64* %R3_Var
  %ln7kj = ptrtoint %Main_zdfShowPs2_closure_struct* @Main_zdfShowPs2_closure$def to i64
  %ln7kk = add i64 %ln7kj, 2
  store i64 %ln7kk, i64* %R2_Var
  %ln7kl = bitcast i8* @base_GHCziShow_zdfShowIntegerzuzdcshowList_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7km = load i64, i64* %R2_Var
  %ln7kn = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7kl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7km, i64 %ln7kn, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfShowPszuzdcshowsPrec_closure_struct = type <{i64, i64}>
@Main_zdfShowPszuzdcshowsPrec_closure$def = internal global %Main_zdfShowPszuzdcshowsPrec_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowsPrec_info$def to i64), i64 0}>
@Main_zdfShowPszuzdcshowsPrec_closure = alias i8, bitcast (%Main_zdfShowPszuzdcshowsPrec_closure_struct* @Main_zdfShowPszuzdcshowsPrec_closure$def to i8*)
@s5cp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cp_info$def to i8*)
define internal ghccc void @s5cp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7kS:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7kC
c7kC:
  %ln7kT = load i64*, i64** %Sp_Var
  %ln7kU = getelementptr inbounds i64, i64* %ln7kT, i32 -2
  %ln7kV = ptrtoint i64* %ln7kU to i64
  %ln7kW = icmp ult i64 %ln7kV, %SpLim_Arg
  %ln7kX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7kW, i1 0 )
  br i1 %ln7kX, label %c7kD, label %c7kE
c7kE:
  %ln7kZ = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7kY = load i64*, i64** %Sp_Var
  %ln7l0 = getelementptr inbounds i64, i64* %ln7kY, i32 -2
  store i64 %ln7kZ, i64* %ln7l0, !tbaa !2
  %ln7l2 = load i64, i64* %R1_Var
  %ln7l1 = load i64*, i64** %Sp_Var
  %ln7l3 = getelementptr inbounds i64, i64* %ln7l1, i32 -1
  store i64 %ln7l2, i64* %ln7l3, !tbaa !2
  %ln7l6 = load i64, i64* %R1_Var
  %ln7l7 = add i64 %ln7l6, 16
  %ln7l8 = inttoptr i64 %ln7l7 to i64*
  %ln7l9 = load i64, i64* %ln7l8, !tbaa !4
  store i64 %ln7l9, i64* %R2_Var
  %ln7la = load i64*, i64** %Sp_Var
  %ln7lb = getelementptr inbounds i64, i64* %ln7la, i32 -2
  %ln7lc = ptrtoint i64* %ln7lb to i64
  %ln7ld = inttoptr i64 %ln7lc to i64*
  store i64* %ln7ld, i64** %Sp_Var
  %ln7le = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7lf = load i64*, i64** %Sp_Var
  %ln7lg = load i64, i64* %R1_Var
  %ln7lh = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7le( i64* %Base_Arg, i64* %ln7lf, i64* %Hp_Arg, i64 %ln7lg, i64 %ln7lh, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7kD:
  %ln7li = load i64, i64* %R1_Var
  store i64 %ln7li, i64* %R1_Var
  %ln7lj = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7lk = bitcast i64* %ln7lj to i64*
  %ln7ll = load i64, i64* %ln7lk, !tbaa !5
  %ln7lm = inttoptr i64 %ln7ll to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7ln = load i64*, i64** %Sp_Var
  %ln7lo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7lm( i64* %Base_Arg, i64* %ln7ln, i64* %Hp_Arg, i64 %ln7lo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfShowPszuzdcshowsPrec_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowsPrec_info$def to i8*)
define ghccc void @Main_zdfShowPszuzdcshowsPrec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowsPrec_info$def to i64)) to i32),i32 0)}>
{
n7lp:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7kJ
c7kJ:
  %ln7lq = load i64*, i64** %Sp_Var
  %ln7lr = getelementptr inbounds i64, i64* %ln7lq, i32 -2
  %ln7ls = ptrtoint i64* %ln7lr to i64
  %ln7lt = icmp ult i64 %ln7ls, %SpLim_Arg
  %ln7lu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7lt, i1 0 )
  br i1 %ln7lu, label %c7kK, label %c7kL
c7kL:
  %ln7lw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7ks_info$def to i64
  %ln7lv = load i64*, i64** %Sp_Var
  %ln7lx = getelementptr inbounds i64, i64* %ln7lv, i32 -2
  store i64 %ln7lw, i64* %ln7lx, !tbaa !2
  %ln7ly = load i64, i64* %R5_Var
  store i64 %ln7ly, i64* %R1_Var
  %ln7lA = load i64, i64* %R2_Var
  %ln7lz = load i64*, i64** %Sp_Var
  %ln7lB = getelementptr inbounds i64, i64* %ln7lz, i32 -1
  store i64 %ln7lA, i64* %ln7lB, !tbaa !2
  %ln7lC = load i64*, i64** %Sp_Var
  %ln7lD = getelementptr inbounds i64, i64* %ln7lC, i32 -2
  %ln7lE = ptrtoint i64* %ln7lD to i64
  %ln7lF = inttoptr i64 %ln7lE to i64*
  store i64* %ln7lF, i64** %Sp_Var
  %ln7lG = load i64, i64* %R1_Var
  %ln7lH = and i64 %ln7lG, 7
  %ln7lI = icmp ne i64 %ln7lH, 0
  br i1 %ln7lI, label %u7kR, label %c7kt
c7kt:
  %ln7lK = load i64, i64* %R1_Var
  %ln7lL = inttoptr i64 %ln7lK to i64*
  %ln7lM = load i64, i64* %ln7lL, !tbaa !4
  %ln7lN = inttoptr i64 %ln7lM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7lO = load i64*, i64** %Sp_Var
  %ln7lP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7lN( i64* %Base_Arg, i64* %ln7lO, i64* %Hp_Arg, i64 %ln7lP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7kR:
  %ln7lQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7ks_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7lR = load i64*, i64** %Sp_Var
  %ln7lS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7lQ( i64* %Base_Arg, i64* %ln7lR, i64* %Hp_Arg, i64 %ln7lS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7kK:
  %ln7lT = load i64, i64* %R5_Var
  store i64 %ln7lT, i64* %R5_Var
  %ln7lU = load i64, i64* %R4_Var
  store i64 %ln7lU, i64* %R4_Var
  %ln7lV = load i64, i64* %R3_Var
  store i64 %ln7lV, i64* %R3_Var
  %ln7lW = load i64, i64* %R2_Var
  store i64 %ln7lW, i64* %R2_Var
  %ln7lX = ptrtoint %Main_zdfShowPszuzdcshowsPrec_closure_struct* @Main_zdfShowPszuzdcshowsPrec_closure$def to i64
  store i64 %ln7lX, i64* %R1_Var
  %ln7lY = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7lZ = bitcast i64* %ln7lY to i64*
  %ln7m0 = load i64, i64* %ln7lZ, !tbaa !5
  %ln7m1 = inttoptr i64 %ln7m0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7m2 = load i64*, i64** %Sp_Var
  %ln7m3 = load i64, i64* %R1_Var
  %ln7m4 = load i64, i64* %R2_Var
  %ln7m5 = load i64, i64* %R3_Var
  %ln7m6 = load i64, i64* %R4_Var
  %ln7m7 = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7m1( i64* %Base_Arg, i64* %ln7m2, i64* %Hp_Arg, i64 %ln7m3, i64 %ln7m4, i64 %ln7m5, i64 %ln7m6, i64 %ln7m7, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7ks_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7ks_info$def to i8*)
define internal ghccc void @c7ks_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7ks_info$def to i64)) to i32),i32 0)}>
{
n7m8:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7ks
c7ks:
  %ln7m9 = load i64, i64* %R1_Var
  %ln7ma = and i64 %ln7m9, 7
  switch i64 %ln7ma, label %c7kG [i64 1, label %c7kG
i64 2, label %c7kH]
c7kG:
  %ln7mb = ptrtoint %Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64
  %ln7mc = add i64 %ln7mb, 1
  store i64 %ln7mc, i64* %R1_Var
  %ln7md = load i64*, i64** %Sp_Var
  %ln7me = getelementptr inbounds i64, i64* %ln7md, i32 2
  %ln7mf = ptrtoint i64* %ln7me to i64
  %ln7mg = inttoptr i64 %ln7mf to i64*
  store i64* %ln7mg, i64** %Sp_Var
  %ln7mh = load i64*, i64** %Sp_Var
  %ln7mi = getelementptr inbounds i64, i64* %ln7mh, i32 0
  %ln7mj = bitcast i64* %ln7mi to i64*
  %ln7mk = load i64, i64* %ln7mj, !tbaa !2
  %ln7ml = inttoptr i64 %ln7mk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7mm = load i64*, i64** %Sp_Var
  %ln7mn = load i64*, i64** %Hp_Var
  %ln7mo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ml( i64* %Base_Arg, i64* %ln7mm, i64* %ln7mn, i64 %ln7mo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7kH:
  %ln7mp = load i64*, i64** %Hp_Var
  %ln7mq = getelementptr inbounds i64, i64* %ln7mp, i32 3
  %ln7mr = ptrtoint i64* %ln7mq to i64
  %ln7ms = inttoptr i64 %ln7mr to i64*
  store i64* %ln7ms, i64** %Hp_Var
  %ln7mt = load i64*, i64** %Hp_Var
  %ln7mu = ptrtoint i64* %ln7mt to i64
  %ln7mv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7mw = bitcast i64* %ln7mv to i64*
  %ln7mx = load i64, i64* %ln7mw, !tbaa !5
  %ln7my = icmp ugt i64 %ln7mu, %ln7mx
  %ln7mz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7my, i1 0 )
  br i1 %ln7mz, label %c7kQ, label %c7kP
c7kP:
  %ln7mB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cp_info$def to i64
  %ln7mA = load i64*, i64** %Hp_Var
  %ln7mC = getelementptr inbounds i64, i64* %ln7mA, i32 -2
  store i64 %ln7mB, i64* %ln7mC, !tbaa !3
  %ln7mE = load i64, i64* %R1_Var
  %ln7mD = load i64*, i64** %Hp_Var
  %ln7mF = getelementptr inbounds i64, i64* %ln7mD, i32 0
  store i64 %ln7mE, i64* %ln7mF, !tbaa !3
  %ln7mG = load i64*, i64** %Sp_Var
  %ln7mH = getelementptr inbounds i64, i64* %ln7mG, i32 1
  %ln7mI = bitcast i64* %ln7mH to i64*
  %ln7mJ = load i64, i64* %ln7mI, !tbaa !2
  store i64 %ln7mJ, i64* %R2_Var
  %ln7mL = ptrtoint i8* @stg_ap_p_info to i64
  %ln7mK = load i64*, i64** %Sp_Var
  %ln7mM = getelementptr inbounds i64, i64* %ln7mK, i32 0
  store i64 %ln7mL, i64* %ln7mM, !tbaa !2
  %ln7mO = load i64*, i64** %Hp_Var
  %ln7mP = getelementptr inbounds i64, i64* %ln7mO, i32 -2
  %ln7mQ = ptrtoint i64* %ln7mP to i64
  %ln7mN = load i64*, i64** %Sp_Var
  %ln7mR = getelementptr inbounds i64, i64* %ln7mN, i32 1
  store i64 %ln7mQ, i64* %ln7mR, !tbaa !2
  %ln7mS = bitcast i8* @base_GHCziShow_showList_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7mT = load i64*, i64** %Sp_Var
  %ln7mU = load i64*, i64** %Hp_Var
  %ln7mV = load i64, i64* %R1_Var
  %ln7mW = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7mS( i64* %Base_Arg, i64* %ln7mT, i64* %ln7mU, i64 %ln7mV, i64 %ln7mW, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7kQ:
  %ln7mX = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7mX, !tbaa !5
  %ln7mY = load i64, i64* %R1_Var
  store i64 %ln7mY, i64* %R1_Var
  %ln7mZ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7n0 = load i64*, i64** %Sp_Var
  %ln7n1 = load i64*, i64** %Hp_Var
  %ln7n2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7mZ( i64* %Base_Arg, i64* %ln7n0, i64* %ln7n1, i64 %ln7n2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfShowPszuzdcshowList_closure_struct = type <{i64, i64}>
@Main_zdfShowPszuzdcshowList_closure$def = internal global %Main_zdfShowPszuzdcshowList_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowList_info$def to i64), i64 0}>
@Main_zdfShowPszuzdcshowList_closure = alias i8, bitcast (%Main_zdfShowPszuzdcshowList_closure_struct* @Main_zdfShowPszuzdcshowList_closure$def to i8*)
@s5cF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cF_info$def to i8*)
define internal ghccc void @s5cF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7nH:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7nm
c7nm:
  %ln7nI = load i64*, i64** %Sp_Var
  %ln7nJ = getelementptr inbounds i64, i64* %ln7nI, i32 -2
  %ln7nK = ptrtoint i64* %ln7nJ to i64
  %ln7nL = icmp ult i64 %ln7nK, %SpLim_Arg
  %ln7nM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7nL, i1 0 )
  br i1 %ln7nM, label %c7nn, label %c7no
c7no:
  %ln7nO = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7nN = load i64*, i64** %Sp_Var
  %ln7nP = getelementptr inbounds i64, i64* %ln7nN, i32 -2
  store i64 %ln7nO, i64* %ln7nP, !tbaa !2
  %ln7nR = load i64, i64* %R1_Var
  %ln7nQ = load i64*, i64** %Sp_Var
  %ln7nS = getelementptr inbounds i64, i64* %ln7nQ, i32 -1
  store i64 %ln7nR, i64* %ln7nS, !tbaa !2
  %ln7nV = load i64, i64* %R1_Var
  %ln7nW = add i64 %ln7nV, 16
  %ln7nX = inttoptr i64 %ln7nW to i64*
  %ln7nY = load i64, i64* %ln7nX, !tbaa !4
  store i64 %ln7nY, i64* %R2_Var
  %ln7nZ = load i64*, i64** %Sp_Var
  %ln7o0 = getelementptr inbounds i64, i64* %ln7nZ, i32 -2
  %ln7o1 = ptrtoint i64* %ln7o0 to i64
  %ln7o2 = inttoptr i64 %ln7o1 to i64*
  store i64* %ln7o2, i64** %Sp_Var
  %ln7o3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7o4 = load i64*, i64** %Sp_Var
  %ln7o5 = load i64, i64* %R1_Var
  %ln7o6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7o3( i64* %Base_Arg, i64* %ln7o4, i64* %Hp_Arg, i64 %ln7o5, i64 %ln7o6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7nn:
  %ln7o7 = load i64, i64* %R1_Var
  store i64 %ln7o7, i64* %R1_Var
  %ln7o8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7o9 = bitcast i64* %ln7o8 to i64*
  %ln7oa = load i64, i64* %ln7o9, !tbaa !5
  %ln7ob = inttoptr i64 %ln7oa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7oc = load i64*, i64** %Sp_Var
  %ln7od = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ob( i64* %Base_Arg, i64* %ln7oc, i64* %Hp_Arg, i64 %ln7od, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5cG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cG_info$def to i8*)
define internal ghccc void @s5cG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 1, i32 9, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cG_info$def to i64)) to i32),i32 0)}>
{
n7oe:
  %ls5cx = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7nt
c7nt:
  %ln7of = load i64*, i64** %Sp_Var
  %ln7og = getelementptr inbounds i64, i64* %ln7of, i32 -2
  %ln7oh = ptrtoint i64* %ln7og to i64
  %ln7oi = icmp ult i64 %ln7oh, %SpLim_Arg
  %ln7oj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7oi, i1 0 )
  br i1 %ln7oj, label %c7nu, label %c7nv
c7nv:
  %ln7ol = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7nc_info$def to i64
  %ln7ok = load i64*, i64** %Sp_Var
  %ln7om = getelementptr inbounds i64, i64* %ln7ok, i32 -2
  store i64 %ln7ol, i64* %ln7om, !tbaa !2
  %ln7op = load i64, i64* %R1_Var
  %ln7oq = add i64 %ln7op, 7
  %ln7or = inttoptr i64 %ln7oq to i64*
  %ln7os = load i64, i64* %ln7or, !tbaa !4
  store i64 %ln7os, i64* %ls5cx
  %ln7ot = load i64, i64* %R2_Var
  store i64 %ln7ot, i64* %R1_Var
  %ln7ov = load i64, i64* %ls5cx
  %ln7ou = load i64*, i64** %Sp_Var
  %ln7ow = getelementptr inbounds i64, i64* %ln7ou, i32 -1
  store i64 %ln7ov, i64* %ln7ow, !tbaa !2
  %ln7ox = load i64*, i64** %Sp_Var
  %ln7oy = getelementptr inbounds i64, i64* %ln7ox, i32 -2
  %ln7oz = ptrtoint i64* %ln7oy to i64
  %ln7oA = inttoptr i64 %ln7oz to i64*
  store i64* %ln7oA, i64** %Sp_Var
  %ln7oB = load i64, i64* %R1_Var
  %ln7oC = and i64 %ln7oB, 7
  %ln7oD = icmp ne i64 %ln7oC, 0
  br i1 %ln7oD, label %u7nB, label %c7nd
c7nd:
  %ln7oF = load i64, i64* %R1_Var
  %ln7oG = inttoptr i64 %ln7oF to i64*
  %ln7oH = load i64, i64* %ln7oG, !tbaa !4
  %ln7oI = inttoptr i64 %ln7oH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7oJ = load i64*, i64** %Sp_Var
  %ln7oK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7oI( i64* %Base_Arg, i64* %ln7oJ, i64* %Hp_Arg, i64 %ln7oK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7nB:
  %ln7oL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7nc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7oM = load i64*, i64** %Sp_Var
  %ln7oN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7oL( i64* %Base_Arg, i64* %ln7oM, i64* %Hp_Arg, i64 %ln7oN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7nu:
  %ln7oO = load i64, i64* %R2_Var
  store i64 %ln7oO, i64* %R2_Var
  %ln7oP = load i64, i64* %R1_Var
  store i64 %ln7oP, i64* %R1_Var
  %ln7oQ = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7oR = bitcast i64* %ln7oQ to i64*
  %ln7oS = load i64, i64* %ln7oR, !tbaa !5
  %ln7oT = inttoptr i64 %ln7oS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7oU = load i64*, i64** %Sp_Var
  %ln7oV = load i64, i64* %R1_Var
  %ln7oW = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7oT( i64* %Base_Arg, i64* %ln7oU, i64* %Hp_Arg, i64 %ln7oV, i64 %ln7oW, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7nc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7nc_info$def to i8*)
define internal ghccc void @c7nc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7nc_info$def to i64)) to i32),i32 0)}>
{
n7oX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7nc
c7nc:
  %ln7oY = load i64, i64* %R1_Var
  %ln7oZ = and i64 %ln7oY, 7
  switch i64 %ln7oZ, label %c7nq [i64 1, label %c7nq
i64 2, label %c7nr]
c7nq:
  %ln7p0 = ptrtoint %Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64
  %ln7p1 = add i64 %ln7p0, 1
  store i64 %ln7p1, i64* %R1_Var
  %ln7p2 = load i64*, i64** %Sp_Var
  %ln7p3 = getelementptr inbounds i64, i64* %ln7p2, i32 2
  %ln7p4 = ptrtoint i64* %ln7p3 to i64
  %ln7p5 = inttoptr i64 %ln7p4 to i64*
  store i64* %ln7p5, i64** %Sp_Var
  %ln7p6 = load i64*, i64** %Sp_Var
  %ln7p7 = getelementptr inbounds i64, i64* %ln7p6, i32 0
  %ln7p8 = bitcast i64* %ln7p7 to i64*
  %ln7p9 = load i64, i64* %ln7p8, !tbaa !2
  %ln7pa = inttoptr i64 %ln7p9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7pb = load i64*, i64** %Sp_Var
  %ln7pc = load i64*, i64** %Hp_Var
  %ln7pd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7pa( i64* %Base_Arg, i64* %ln7pb, i64* %ln7pc, i64 %ln7pd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7nr:
  %ln7pe = load i64*, i64** %Hp_Var
  %ln7pf = getelementptr inbounds i64, i64* %ln7pe, i32 3
  %ln7pg = ptrtoint i64* %ln7pf to i64
  %ln7ph = inttoptr i64 %ln7pg to i64*
  store i64* %ln7ph, i64** %Hp_Var
  %ln7pi = load i64*, i64** %Hp_Var
  %ln7pj = ptrtoint i64* %ln7pi to i64
  %ln7pk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7pl = bitcast i64* %ln7pk to i64*
  %ln7pm = load i64, i64* %ln7pl, !tbaa !5
  %ln7pn = icmp ugt i64 %ln7pj, %ln7pm
  %ln7po = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7pn, i1 0 )
  br i1 %ln7po, label %c7nA, label %c7nz
c7nz:
  %ln7pq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cF_info$def to i64
  %ln7pp = load i64*, i64** %Hp_Var
  %ln7pr = getelementptr inbounds i64, i64* %ln7pp, i32 -2
  store i64 %ln7pq, i64* %ln7pr, !tbaa !3
  %ln7pt = load i64, i64* %R1_Var
  %ln7ps = load i64*, i64** %Hp_Var
  %ln7pu = getelementptr inbounds i64, i64* %ln7ps, i32 0
  store i64 %ln7pt, i64* %ln7pu, !tbaa !3
  %ln7pv = load i64*, i64** %Sp_Var
  %ln7pw = getelementptr inbounds i64, i64* %ln7pv, i32 1
  %ln7px = bitcast i64* %ln7pw to i64*
  %ln7py = load i64, i64* %ln7px, !tbaa !2
  store i64 %ln7py, i64* %R2_Var
  %ln7pA = ptrtoint i8* @stg_ap_p_info to i64
  %ln7pz = load i64*, i64** %Sp_Var
  %ln7pB = getelementptr inbounds i64, i64* %ln7pz, i32 0
  store i64 %ln7pA, i64* %ln7pB, !tbaa !2
  %ln7pD = load i64*, i64** %Hp_Var
  %ln7pE = getelementptr inbounds i64, i64* %ln7pD, i32 -2
  %ln7pF = ptrtoint i64* %ln7pE to i64
  %ln7pC = load i64*, i64** %Sp_Var
  %ln7pG = getelementptr inbounds i64, i64* %ln7pC, i32 1
  store i64 %ln7pF, i64* %ln7pG, !tbaa !2
  %ln7pH = bitcast i8* @base_GHCziShow_showList_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7pI = load i64*, i64** %Sp_Var
  %ln7pJ = load i64*, i64** %Hp_Var
  %ln7pK = load i64, i64* %R1_Var
  %ln7pL = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7pH( i64* %Base_Arg, i64* %ln7pI, i64* %ln7pJ, i64 %ln7pK, i64 %ln7pL, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7nA:
  %ln7pM = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7pM, !tbaa !5
  %ln7pN = load i64, i64* %R1_Var
  store i64 %ln7pN, i64* %R1_Var
  %ln7pO = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7pP = load i64*, i64** %Sp_Var
  %ln7pQ = load i64*, i64** %Hp_Var
  %ln7pR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7pO( i64* %Base_Arg, i64* %ln7pP, i64* %ln7pQ, i64 %ln7pR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfShowPszuzdcshowList_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowList_info$def to i8*)
define ghccc void @Main_zdfShowPszuzdcshowList_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowList_info$def to i64)) to i32),i32 0)}>
{
n7pS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5cz = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7nC
c7nC:
  %ln7pT = load i64*, i64** %Hp_Var
  %ln7pU = getelementptr inbounds i64, i64* %ln7pT, i32 2
  %ln7pV = ptrtoint i64* %ln7pU to i64
  %ln7pW = inttoptr i64 %ln7pV to i64*
  store i64* %ln7pW, i64** %Hp_Var
  %ln7pX = load i64*, i64** %Hp_Var
  %ln7pY = ptrtoint i64* %ln7pX to i64
  %ln7pZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7q0 = bitcast i64* %ln7pZ to i64*
  %ln7q1 = load i64, i64* %ln7q0, !tbaa !5
  %ln7q2 = icmp ugt i64 %ln7pY, %ln7q1
  %ln7q3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7q2, i1 0 )
  br i1 %ln7q3, label %c7nG, label %c7nF
c7nF:
  %ln7q5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cG_info$def to i64
  %ln7q4 = load i64*, i64** %Hp_Var
  %ln7q6 = getelementptr inbounds i64, i64* %ln7q4, i32 -1
  store i64 %ln7q5, i64* %ln7q6, !tbaa !3
  %ln7q8 = load i64, i64* %R2_Var
  %ln7q7 = load i64*, i64** %Hp_Var
  %ln7q9 = getelementptr inbounds i64, i64* %ln7q7, i32 0
  store i64 %ln7q8, i64* %ln7q9, !tbaa !3
  %ln7qa = load i64, i64* %R4_Var
  store i64 %ln7qa, i64* %ls5cz
  %ln7qb = load i64, i64* %R5_Var
  store i64 %ln7qb, i64* %R4_Var
  %ln7qc = load i64, i64* %ls5cz
  store i64 %ln7qc, i64* %R3_Var
  %ln7qe = load i64*, i64** %Hp_Var
  %ln7qf = ptrtoint i64* %ln7qe to i64
  %ln7qg = add i64 %ln7qf, -7
  store i64 %ln7qg, i64* %R2_Var
  %ln7qh = bitcast i8* @base_GHCziShow_showListzuzu_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7qi = load i64*, i64** %Hp_Var
  %ln7qj = load i64, i64* %R1_Var
  %ln7qk = load i64, i64* %R2_Var
  %ln7ql = load i64, i64* %R3_Var
  %ln7qm = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7qh( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7qi, i64 %ln7qj, i64 %ln7qk, i64 %ln7ql, i64 %ln7qm, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7nG:
  %ln7qn = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln7qn, !tbaa !5
  %ln7qo = load i64, i64* %R5_Var
  store i64 %ln7qo, i64* %R5_Var
  %ln7qp = load i64, i64* %R4_Var
  store i64 %ln7qp, i64* %R4_Var
  %ln7qq = load i64, i64* %R3_Var
  store i64 %ln7qq, i64* %R3_Var
  %ln7qr = load i64, i64* %R2_Var
  store i64 %ln7qr, i64* %R2_Var
  %ln7qs = ptrtoint %Main_zdfShowPszuzdcshowList_closure_struct* @Main_zdfShowPszuzdcshowList_closure$def to i64
  store i64 %ln7qs, i64* %R1_Var
  %ln7qt = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7qu = bitcast i64* %ln7qt to i64*
  %ln7qv = load i64, i64* %ln7qu, !tbaa !5
  %ln7qw = inttoptr i64 %ln7qv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7qx = load i64*, i64** %Hp_Var
  %ln7qy = load i64, i64* %R1_Var
  %ln7qz = load i64, i64* %R2_Var
  %ln7qA = load i64, i64* %R3_Var
  %ln7qB = load i64, i64* %R4_Var
  %ln7qC = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7qw( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7qx, i64 %ln7qy, i64 %ln7qz, i64 %ln7qA, i64 %ln7qB, i64 %ln7qC, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55A_closure_struct = type <{i64, i64, i64, i64}>
@r55A_closure$def = internal global %r55A_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55A_info$def to i64), i64 0, i64 0, i64 0}>
@r55A_closure = internal alias i8, bitcast (%r55A_closure_struct* @r55A_closure$def to i8*)
@r55A_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55A_info$def to i8*)
define internal ghccc void @r55A_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdfShowIntegerzuzdcshowList_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55A_info$def to i64)) to i32),i32 0)}>
{
n7qM:
  %lc7qG = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7qJ
c7qJ:
  %ln7qN = load i64*, i64** %Sp_Var
  %ln7qO = getelementptr inbounds i64, i64* %ln7qN, i32 -2
  %ln7qP = ptrtoint i64* %ln7qO to i64
  %ln7qQ = icmp ult i64 %ln7qP, %SpLim_Arg
  %ln7qR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7qQ, i1 0 )
  br i1 %ln7qR, label %c7qK, label %c7qL
c7qL:
  %ln7qS = ptrtoint i64* %Base_Arg to i64
  %ln7qT = inttoptr i64 %ln7qS to i8*
  %ln7qU = load i64, i64* %R1_Var
  %ln7qV = inttoptr i64 %ln7qU to i8*
  %ln7qW = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln7qX = call ccc i8* (i8*, i8*) %ln7qW( i8* %ln7qT, i8* %ln7qV ) nounwind
  %ln7qY = ptrtoint i8* %ln7qX to i64
  store i64 %ln7qY, i64* %lc7qG
  %ln7qZ = load i64, i64* %lc7qG
  %ln7r0 = icmp eq i64 %ln7qZ, 0
  br i1 %ln7r0, label %c7qI, label %c7qH
c7qH:
  %ln7r2 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln7r1 = load i64*, i64** %Sp_Var
  %ln7r3 = getelementptr inbounds i64, i64* %ln7r1, i32 -2
  store i64 %ln7r2, i64* %ln7r3, !tbaa !2
  %ln7r5 = load i64, i64* %lc7qG
  %ln7r4 = load i64*, i64** %Sp_Var
  %ln7r6 = getelementptr inbounds i64, i64* %ln7r4, i32 -1
  store i64 %ln7r5, i64* %ln7r6, !tbaa !2
  %ln7r7 = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln7r8 = add i64 %ln7r7, 1
  store i64 %ln7r8, i64* %R3_Var
  %ln7r9 = ptrtoint %Main_zdfShowPs2_closure_struct* @Main_zdfShowPs2_closure$def to i64
  %ln7ra = add i64 %ln7r9, 2
  store i64 %ln7ra, i64* %R2_Var
  %ln7rb = load i64*, i64** %Sp_Var
  %ln7rc = getelementptr inbounds i64, i64* %ln7rb, i32 -2
  %ln7rd = ptrtoint i64* %ln7rc to i64
  %ln7re = inttoptr i64 %ln7rd to i64*
  store i64* %ln7re, i64** %Sp_Var
  %ln7rf = bitcast i8* @base_GHCziShow_zdfShowIntegerzuzdcshowList_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7rg = load i64*, i64** %Sp_Var
  %ln7rh = load i64, i64* %R1_Var
  %ln7ri = load i64, i64* %R2_Var
  %ln7rj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7rf( i64* %Base_Arg, i64* %ln7rg, i64* %Hp_Arg, i64 %ln7rh, i64 %ln7ri, i64 %ln7rj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7qI:
  %ln7rl = load i64, i64* %R1_Var
  %ln7rm = inttoptr i64 %ln7rl to i64*
  %ln7rn = load i64, i64* %ln7rm, !tbaa !4
  %ln7ro = inttoptr i64 %ln7rn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7rp = load i64*, i64** %Sp_Var
  %ln7rq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ro( i64* %Base_Arg, i64* %ln7rp, i64* %Hp_Arg, i64 %ln7rq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7qK:
  %ln7rr = load i64, i64* %R1_Var
  store i64 %ln7rr, i64* %R1_Var
  %ln7rs = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7rt = bitcast i64* %ln7rs to i64*
  %ln7ru = load i64, i64* %ln7rt, !tbaa !5
  %ln7rv = inttoptr i64 %ln7ru to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7rw = load i64*, i64** %Sp_Var
  %ln7rx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7rv( i64* %Base_Arg, i64* %ln7rw, i64* %Hp_Arg, i64 %ln7rx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfShowPszuzdcshow_closure_struct = type <{i64, i64}>
@Main_zdfShowPszuzdcshow_closure$def = internal global %Main_zdfShowPszuzdcshow_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshow_info$def to i64), i64 0}>
@Main_zdfShowPszuzdcshow_closure = alias i8, bitcast (%Main_zdfShowPszuzdcshow_closure_struct* @Main_zdfShowPszuzdcshow_closure$def to i8*)
@s5cw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cw_info$def to i8*)
define internal ghccc void @s5cw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7s2:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7rM
c7rM:
  %ln7s3 = load i64*, i64** %Sp_Var
  %ln7s4 = getelementptr inbounds i64, i64* %ln7s3, i32 -2
  %ln7s5 = ptrtoint i64* %ln7s4 to i64
  %ln7s6 = icmp ult i64 %ln7s5, %SpLim_Arg
  %ln7s7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7s6, i1 0 )
  br i1 %ln7s7, label %c7rN, label %c7rO
c7rO:
  %ln7s9 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7s8 = load i64*, i64** %Sp_Var
  %ln7sa = getelementptr inbounds i64, i64* %ln7s8, i32 -2
  store i64 %ln7s9, i64* %ln7sa, !tbaa !2
  %ln7sc = load i64, i64* %R1_Var
  %ln7sb = load i64*, i64** %Sp_Var
  %ln7sd = getelementptr inbounds i64, i64* %ln7sb, i32 -1
  store i64 %ln7sc, i64* %ln7sd, !tbaa !2
  %ln7sg = load i64, i64* %R1_Var
  %ln7sh = add i64 %ln7sg, 16
  %ln7si = inttoptr i64 %ln7sh to i64*
  %ln7sj = load i64, i64* %ln7si, !tbaa !4
  store i64 %ln7sj, i64* %R2_Var
  %ln7sk = load i64*, i64** %Sp_Var
  %ln7sl = getelementptr inbounds i64, i64* %ln7sk, i32 -2
  %ln7sm = ptrtoint i64* %ln7sl to i64
  %ln7sn = inttoptr i64 %ln7sm to i64*
  store i64* %ln7sn, i64** %Sp_Var
  %ln7so = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtoList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7sp = load i64*, i64** %Sp_Var
  %ln7sq = load i64, i64* %R1_Var
  %ln7sr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7so( i64* %Base_Arg, i64* %ln7sp, i64* %Hp_Arg, i64 %ln7sq, i64 %ln7sr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7rN:
  %ln7ss = load i64, i64* %R1_Var
  store i64 %ln7ss, i64* %R1_Var
  %ln7st = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7su = bitcast i64* %ln7st to i64*
  %ln7sv = load i64, i64* %ln7su, !tbaa !5
  %ln7sw = inttoptr i64 %ln7sv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7sx = load i64*, i64** %Sp_Var
  %ln7sy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7sw( i64* %Base_Arg, i64* %ln7sx, i64* %Hp_Arg, i64 %ln7sy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfShowPszuzdcshow_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshow_info$def to i8*)
define ghccc void @Main_zdfShowPszuzdcshow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55A_closure_struct* @r55A_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshow_info$def to i64)) to i32),i32 0)}>
{
n7sz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7rT
c7rT:
  %ln7sA = load i64*, i64** %Sp_Var
  %ln7sB = getelementptr inbounds i64, i64* %ln7sA, i32 -3
  %ln7sC = ptrtoint i64* %ln7sB to i64
  %ln7sD = icmp ult i64 %ln7sC, %SpLim_Arg
  %ln7sE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7sD, i1 0 )
  br i1 %ln7sE, label %c7rU, label %c7rV
c7rV:
  %ln7sG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7rC_info$def to i64
  %ln7sF = load i64*, i64** %Sp_Var
  %ln7sH = getelementptr inbounds i64, i64* %ln7sF, i32 -2
  store i64 %ln7sG, i64* %ln7sH, !tbaa !2
  %ln7sI = load i64, i64* %R4_Var
  store i64 %ln7sI, i64* %R1_Var
  %ln7sK = load i64, i64* %R2_Var
  %ln7sJ = load i64*, i64** %Sp_Var
  %ln7sL = getelementptr inbounds i64, i64* %ln7sJ, i32 -1
  store i64 %ln7sK, i64* %ln7sL, !tbaa !2
  %ln7sM = load i64*, i64** %Sp_Var
  %ln7sN = getelementptr inbounds i64, i64* %ln7sM, i32 -2
  %ln7sO = ptrtoint i64* %ln7sN to i64
  %ln7sP = inttoptr i64 %ln7sO to i64*
  store i64* %ln7sP, i64** %Sp_Var
  %ln7sQ = load i64, i64* %R1_Var
  %ln7sR = and i64 %ln7sQ, 7
  %ln7sS = icmp ne i64 %ln7sR, 0
  br i1 %ln7sS, label %u7s1, label %c7rD
c7rD:
  %ln7sU = load i64, i64* %R1_Var
  %ln7sV = inttoptr i64 %ln7sU to i64*
  %ln7sW = load i64, i64* %ln7sV, !tbaa !4
  %ln7sX = inttoptr i64 %ln7sW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7sY = load i64*, i64** %Sp_Var
  %ln7sZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7sX( i64* %Base_Arg, i64* %ln7sY, i64* %Hp_Arg, i64 %ln7sZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7s1:
  %ln7t0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7rC_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7t1 = load i64*, i64** %Sp_Var
  %ln7t2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7t0( i64* %Base_Arg, i64* %ln7t1, i64* %Hp_Arg, i64 %ln7t2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7rU:
  %ln7t3 = load i64, i64* %R4_Var
  store i64 %ln7t3, i64* %R4_Var
  %ln7t4 = load i64, i64* %R3_Var
  store i64 %ln7t4, i64* %R3_Var
  %ln7t5 = load i64, i64* %R2_Var
  store i64 %ln7t5, i64* %R2_Var
  %ln7t6 = ptrtoint %Main_zdfShowPszuzdcshow_closure_struct* @Main_zdfShowPszuzdcshow_closure$def to i64
  store i64 %ln7t6, i64* %R1_Var
  %ln7t7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7t8 = bitcast i64* %ln7t7 to i64*
  %ln7t9 = load i64, i64* %ln7t8, !tbaa !5
  %ln7ta = inttoptr i64 %ln7t9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7tb = load i64*, i64** %Sp_Var
  %ln7tc = load i64, i64* %R1_Var
  %ln7td = load i64, i64* %R2_Var
  %ln7te = load i64, i64* %R3_Var
  %ln7tf = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ta( i64* %Base_Arg, i64* %ln7tb, i64* %Hp_Arg, i64 %ln7tc, i64 %ln7td, i64 %ln7te, i64 %ln7tf, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7rC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7rC_info$def to i8*)
define internal ghccc void @c7rC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55A_closure_struct* @r55A_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7rC_info$def to i64)) to i32),i32 0)}>
{
n7tg:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7rC
c7rC:
  %ln7th = load i64, i64* %R1_Var
  %ln7ti = and i64 %ln7th, 7
  switch i64 %ln7ti, label %c7rQ [i64 1, label %c7rQ
i64 2, label %c7rR]
c7rQ:
  %ln7tj = ptrtoint %r55A_closure_struct* @r55A_closure$def to i64
  store i64 %ln7tj, i64* %R1_Var
  %ln7tk = load i64*, i64** %Sp_Var
  %ln7tl = getelementptr inbounds i64, i64* %ln7tk, i32 2
  %ln7tm = ptrtoint i64* %ln7tl to i64
  %ln7tn = inttoptr i64 %ln7tm to i64*
  store i64* %ln7tn, i64** %Sp_Var
  %ln7tp = load i64, i64* %R1_Var
  %ln7tq = inttoptr i64 %ln7tp to i64*
  %ln7tr = load i64, i64* %ln7tq, !tbaa !4
  %ln7ts = inttoptr i64 %ln7tr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7tt = load i64*, i64** %Sp_Var
  %ln7tu = load i64*, i64** %Hp_Var
  %ln7tv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ts( i64* %Base_Arg, i64* %ln7tt, i64* %ln7tu, i64 %ln7tv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7rR:
  %ln7tw = load i64*, i64** %Hp_Var
  %ln7tx = getelementptr inbounds i64, i64* %ln7tw, i32 3
  %ln7ty = ptrtoint i64* %ln7tx to i64
  %ln7tz = inttoptr i64 %ln7ty to i64*
  store i64* %ln7tz, i64** %Hp_Var
  %ln7tA = load i64*, i64** %Hp_Var
  %ln7tB = ptrtoint i64* %ln7tA to i64
  %ln7tC = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7tD = bitcast i64* %ln7tC to i64*
  %ln7tE = load i64, i64* %ln7tD, !tbaa !5
  %ln7tF = icmp ugt i64 %ln7tB, %ln7tE
  %ln7tG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7tF, i1 0 )
  br i1 %ln7tG, label %c7s0, label %c7rZ
c7rZ:
  %ln7tI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cw_info$def to i64
  %ln7tH = load i64*, i64** %Hp_Var
  %ln7tJ = getelementptr inbounds i64, i64* %ln7tH, i32 -2
  store i64 %ln7tI, i64* %ln7tJ, !tbaa !3
  %ln7tL = load i64, i64* %R1_Var
  %ln7tK = load i64*, i64** %Hp_Var
  %ln7tM = getelementptr inbounds i64, i64* %ln7tK, i32 0
  store i64 %ln7tL, i64* %ln7tM, !tbaa !3
  %ln7tN = load i64*, i64** %Sp_Var
  %ln7tO = getelementptr inbounds i64, i64* %ln7tN, i32 1
  %ln7tP = bitcast i64* %ln7tO to i64*
  %ln7tQ = load i64, i64* %ln7tP, !tbaa !2
  store i64 %ln7tQ, i64* %R2_Var
  %ln7tS = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7tR = load i64*, i64** %Sp_Var
  %ln7tT = getelementptr inbounds i64, i64* %ln7tR, i32 -1
  store i64 %ln7tS, i64* %ln7tT, !tbaa !2
  %ln7tV = load i64*, i64** %Hp_Var
  %ln7tW = getelementptr inbounds i64, i64* %ln7tV, i32 -2
  %ln7tX = ptrtoint i64* %ln7tW to i64
  %ln7tU = load i64*, i64** %Sp_Var
  %ln7tY = getelementptr inbounds i64, i64* %ln7tU, i32 0
  store i64 %ln7tX, i64* %ln7tY, !tbaa !2
  %ln7u0 = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln7u1 = add i64 %ln7u0, 1
  %ln7tZ = load i64*, i64** %Sp_Var
  %ln7u2 = getelementptr inbounds i64, i64* %ln7tZ, i32 1
  store i64 %ln7u1, i64* %ln7u2, !tbaa !2
  %ln7u3 = load i64*, i64** %Sp_Var
  %ln7u4 = getelementptr inbounds i64, i64* %ln7u3, i32 -1
  %ln7u5 = ptrtoint i64* %ln7u4 to i64
  %ln7u6 = inttoptr i64 %ln7u5 to i64*
  store i64* %ln7u6, i64** %Sp_Var
  %ln7u7 = bitcast i8* @base_GHCziShow_showList_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7u8 = load i64*, i64** %Sp_Var
  %ln7u9 = load i64*, i64** %Hp_Var
  %ln7ua = load i64, i64* %R1_Var
  %ln7ub = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7u7( i64* %Base_Arg, i64* %ln7u8, i64* %ln7u9, i64 %ln7ua, i64 %ln7ub, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7s0:
  %ln7uc = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7uc, !tbaa !5
  %ln7ud = load i64, i64* %R1_Var
  store i64 %ln7ud, i64* %R1_Var
  %ln7ue = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7uf = load i64*, i64** %Sp_Var
  %ln7ug = load i64*, i64** %Hp_Var
  %ln7uh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ue( i64* %Base_Arg, i64* %ln7uf, i64* %ln7ug, i64 %ln7uh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfShowPs_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_zdfShowPs_closure$def = internal global %Main_zdfShowPs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPs_info$def to i64), i64 ptrtoint (%Main_zdfShowPszuzdcshowList_closure_struct* @Main_zdfShowPszuzdcshowList_closure$def to i64), i64 ptrtoint (%Main_zdfShowPszuzdcshow_closure_struct* @Main_zdfShowPszuzdcshow_closure$def to i64), i64 ptrtoint (%Main_zdfShowPszuzdcshowsPrec_closure_struct* @Main_zdfShowPszuzdcshowsPrec_closure$def to i64), i64 0}>
@Main_zdfShowPs_closure = alias i8, bitcast (%Main_zdfShowPs_closure_struct* @Main_zdfShowPs_closure$def to i8*)
@s5cL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cL_info$def to i8*)
define internal ghccc void @s5cL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPszuzdcshowList_closure_struct* @Main_zdfShowPszuzdcshowList_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cL_info$def to i64)) to i32),i32 0)}>
{
n7uQ:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7ur
c7ur:
  %ln7uR = load i64, i64* %R3_Var
  store i64 %ln7uR, i64* %R5_Var
  %ln7uS = load i64, i64* %R2_Var
  store i64 %ln7uS, i64* %R4_Var
  %ln7uT = add i64 %R1_Arg, 14
  %ln7uU = inttoptr i64 %ln7uT to i64*
  %ln7uV = load i64, i64* %ln7uU, !tbaa !4
  store i64 %ln7uV, i64* %R3_Var
  %ln7uW = add i64 %R1_Arg, 6
  %ln7uX = inttoptr i64 %ln7uW to i64*
  %ln7uY = load i64, i64* %ln7uX, !tbaa !4
  store i64 %ln7uY, i64* %R2_Var
  %ln7uZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowList_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7v0 = load i64, i64* %R2_Var
  %ln7v1 = load i64, i64* %R3_Var
  %ln7v2 = load i64, i64* %R4_Var
  %ln7v3 = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7uZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7v0, i64 %ln7v1, i64 %ln7v2, i64 %ln7v3, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5cK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cK_info$def to i8*)
define internal ghccc void @s5cK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPszuzdcshow_closure_struct* @Main_zdfShowPszuzdcshow_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cK_info$def to i64)) to i32),i32 0)}>
{
n7v4:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7uz
c7uz:
  %ln7v5 = load i64, i64* %R2_Var
  store i64 %ln7v5, i64* %R4_Var
  %ln7v6 = add i64 %R1_Arg, 15
  %ln7v7 = inttoptr i64 %ln7v6 to i64*
  %ln7v8 = load i64, i64* %ln7v7, !tbaa !4
  store i64 %ln7v8, i64* %R3_Var
  %ln7v9 = add i64 %R1_Arg, 7
  %ln7va = inttoptr i64 %ln7v9 to i64*
  %ln7vb = load i64, i64* %ln7va, !tbaa !4
  store i64 %ln7vb, i64* %R2_Var
  %ln7vc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshow_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7vd = load i64, i64* %R2_Var
  %ln7ve = load i64, i64* %R3_Var
  %ln7vf = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7vc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7vd, i64 %ln7ve, i64 %ln7vf, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5cJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cJ_info$def to i8*)
define internal ghccc void @s5cJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfShowPszuzdcshowsPrec_closure_struct* @Main_zdfShowPszuzdcshowsPrec_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cJ_info$def to i64)) to i32),i32 0)}>
{
n7vg:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7uH
c7uH:
  %ln7vh = load i64, i64* %R3_Var
  store i64 %ln7vh, i64* %R5_Var
  %ln7vi = load i64, i64* %R2_Var
  store i64 %ln7vi, i64* %R4_Var
  %ln7vj = add i64 %R1_Arg, 14
  %ln7vk = inttoptr i64 %ln7vj to i64*
  %ln7vl = load i64, i64* %ln7vk, !tbaa !4
  store i64 %ln7vl, i64* %R3_Var
  %ln7vm = add i64 %R1_Arg, 6
  %ln7vn = inttoptr i64 %ln7vm to i64*
  %ln7vo = load i64, i64* %ln7vn, !tbaa !4
  store i64 %ln7vo, i64* %R2_Var
  %ln7vp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPszuzdcshowsPrec_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7vq = load i64, i64* %R2_Var
  %ln7vr = load i64, i64* %R3_Var
  %ln7vs = load i64, i64* %R4_Var
  %ln7vt = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7vp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7vq, i64 %ln7vr, i64 %ln7vs, i64 %ln7vt, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfShowPs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfShowPs_info$def to i8*)
define ghccc void @Main_zdfShowPs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 3, i32 14, i32 0}>
{
n7vu:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7uL
c7uL:
  %ln7vv = load i64*, i64** %Hp_Var
  %ln7vw = getelementptr inbounds i64, i64* %ln7vv, i32 13
  %ln7vx = ptrtoint i64* %ln7vw to i64
  %ln7vy = inttoptr i64 %ln7vx to i64*
  store i64* %ln7vy, i64** %Hp_Var
  %ln7vz = load i64*, i64** %Hp_Var
  %ln7vA = ptrtoint i64* %ln7vz to i64
  %ln7vB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7vC = bitcast i64* %ln7vB to i64*
  %ln7vD = load i64, i64* %ln7vC, !tbaa !5
  %ln7vE = icmp ugt i64 %ln7vA, %ln7vD
  %ln7vF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7vE, i1 0 )
  br i1 %ln7vF, label %c7uP, label %c7uO
c7uO:
  %ln7vH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cL_info$def to i64
  %ln7vG = load i64*, i64** %Hp_Var
  %ln7vI = getelementptr inbounds i64, i64* %ln7vG, i32 -12
  store i64 %ln7vH, i64* %ln7vI, !tbaa !3
  %ln7vK = load i64, i64* %R2_Var
  %ln7vJ = load i64*, i64** %Hp_Var
  %ln7vL = getelementptr inbounds i64, i64* %ln7vJ, i32 -11
  store i64 %ln7vK, i64* %ln7vL, !tbaa !3
  %ln7vN = load i64, i64* %R3_Var
  %ln7vM = load i64*, i64** %Hp_Var
  %ln7vO = getelementptr inbounds i64, i64* %ln7vM, i32 -10
  store i64 %ln7vN, i64* %ln7vO, !tbaa !3
  %ln7vQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cK_info$def to i64
  %ln7vP = load i64*, i64** %Hp_Var
  %ln7vR = getelementptr inbounds i64, i64* %ln7vP, i32 -9
  store i64 %ln7vQ, i64* %ln7vR, !tbaa !3
  %ln7vT = load i64, i64* %R2_Var
  %ln7vS = load i64*, i64** %Hp_Var
  %ln7vU = getelementptr inbounds i64, i64* %ln7vS, i32 -8
  store i64 %ln7vT, i64* %ln7vU, !tbaa !3
  %ln7vW = load i64, i64* %R3_Var
  %ln7vV = load i64*, i64** %Hp_Var
  %ln7vX = getelementptr inbounds i64, i64* %ln7vV, i32 -7
  store i64 %ln7vW, i64* %ln7vX, !tbaa !3
  %ln7vZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cJ_info$def to i64
  %ln7vY = load i64*, i64** %Hp_Var
  %ln7w0 = getelementptr inbounds i64, i64* %ln7vY, i32 -6
  store i64 %ln7vZ, i64* %ln7w0, !tbaa !3
  %ln7w2 = load i64, i64* %R2_Var
  %ln7w1 = load i64*, i64** %Hp_Var
  %ln7w3 = getelementptr inbounds i64, i64* %ln7w1, i32 -5
  store i64 %ln7w2, i64* %ln7w3, !tbaa !3
  %ln7w5 = load i64, i64* %R3_Var
  %ln7w4 = load i64*, i64** %Hp_Var
  %ln7w6 = getelementptr inbounds i64, i64* %ln7w4, i32 -4
  store i64 %ln7w5, i64* %ln7w6, !tbaa !3
  %ln7w8 = ptrtoint i8* @base_GHCziShow_CZCShow_con_info to i64
  %ln7w7 = load i64*, i64** %Hp_Var
  %ln7w9 = getelementptr inbounds i64, i64* %ln7w7, i32 -3
  store i64 %ln7w8, i64* %ln7w9, !tbaa !3
  %ln7wc = load i64*, i64** %Hp_Var
  %ln7wd = ptrtoint i64* %ln7wc to i64
  %ln7we = add i64 %ln7wd, -46
  %ln7wa = load i64*, i64** %Hp_Var
  %ln7wf = getelementptr inbounds i64, i64* %ln7wa, i32 -2
  store i64 %ln7we, i64* %ln7wf, !tbaa !3
  %ln7wi = load i64*, i64** %Hp_Var
  %ln7wj = ptrtoint i64* %ln7wi to i64
  %ln7wk = add i64 %ln7wj, -71
  %ln7wg = load i64*, i64** %Hp_Var
  %ln7wl = getelementptr inbounds i64, i64* %ln7wg, i32 -1
  store i64 %ln7wk, i64* %ln7wl, !tbaa !3
  %ln7wo = load i64*, i64** %Hp_Var
  %ln7wp = ptrtoint i64* %ln7wo to i64
  %ln7wq = add i64 %ln7wp, -94
  %ln7wm = load i64*, i64** %Hp_Var
  %ln7wr = getelementptr inbounds i64, i64* %ln7wm, i32 0
  store i64 %ln7wq, i64* %ln7wr, !tbaa !3
  %ln7wt = load i64*, i64** %Hp_Var
  %ln7wu = ptrtoint i64* %ln7wt to i64
  %ln7wv = add i64 %ln7wu, -23
  store i64 %ln7wv, i64* %R1_Var
  %ln7ww = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln7wx = bitcast i64* %ln7ww to i64*
  %ln7wy = load i64, i64* %ln7wx, !tbaa !2
  %ln7wz = inttoptr i64 %ln7wy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7wA = load i64*, i64** %Hp_Var
  %ln7wB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7wz( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7wA, i64 %ln7wB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7uP:
  %ln7wC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %ln7wC, !tbaa !5
  %ln7wD = load i64, i64* %R3_Var
  store i64 %ln7wD, i64* %R3_Var
  %ln7wE = load i64, i64* %R2_Var
  store i64 %ln7wE, i64* %R2_Var
  %ln7wF = ptrtoint %Main_zdfShowPs_closure_struct* @Main_zdfShowPs_closure$def to i64
  store i64 %ln7wF, i64* %R1_Var
  %ln7wG = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7wH = bitcast i64* %ln7wG to i64*
  %ln7wI = load i64, i64* %ln7wH, !tbaa !5
  %ln7wJ = inttoptr i64 %ln7wI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7wK = load i64*, i64** %Hp_Var
  %ln7wL = load i64, i64* %R1_Var
  %ln7wM = load i64, i64* %R2_Var
  %ln7wN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7wJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7wK, i64 %ln7wL, i64 %ln7wM, i64 %ln7wN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFractionalPs2_closure_struct = type <{i64, i64}>
@Main_zdfFractionalPs2_closure$def = internal global %Main_zdfFractionalPs2_closure_struct<{i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_IS_con_info to i64), i64 1}>
@Main_zdfFractionalPs2_closure = alias i8, bitcast (%Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i8*)
%Main_zdszc3_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdszc3_closure$def = internal global %Main_zdszc3_closure_struct<{i64 ptrtoint (i8* @base_GHCziReal_ZCzv_con_info to i64), i64 add (i64 ptrtoint (%Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziReal_zdfEnumRatio1_closure to i64),i64 1), i64 3}>
@Main_zdszc3_closure = alias i8, bitcast (%Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i8*)
%Main_zdszc2_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdszc2_closure$def = internal global %Main_zdszc2_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64),i64 1), i64 3}>
@Main_zdszc2_closure = alias i8, bitcast (%Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i8*)
%Main_xzuzdsx_closure_struct = type <{i64, i64, i64, i64}>
@Main_xzuzdsx_closure$def = internal global %Main_xzuzdsx_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_integral1_closure_struct* @Main_integral1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64),i64 2), i64 3}>
@Main_xzuzdsx_closure = alias i8, bitcast (%Main_xzuzdsx_closure_struct* @Main_xzuzdsx_closure$def to i8*)
%_u7y7_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdfNumPszuzdszdczt_closure_struct = type <{i64, i64, i64, i64}>
@_u7y7_srt$def = internal global %_u7y7_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64), i64 ptrtoint (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i64), i64 0}>
@_u7y7_srt = internal alias i8, bitcast (%_u7y7_srt_struct* @_u7y7_srt$def to i8*)
@Main_zdfNumPszuzdszdczt_closure$def = internal global %Main_zdfNumPszuzdszdczt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64), i64 ptrtoint (i8* @_u7y7_srt to i64), i64 0}>
@Main_zdfNumPszuzdszdczt_closure = alias i8, bitcast (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i8*)
@s59e_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59e_info$def to i8*)
define internal ghccc void @s59e_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59e_info$def to i64)) to i32),i32 0)}>
{
n7y8:
  %ls594 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7xa
c7xa:
  %ln7y9 = load i64*, i64** %Sp_Var
  %ln7ya = getelementptr inbounds i64, i64* %ln7y9, i32 -7
  %ln7yb = ptrtoint i64* %ln7ya to i64
  %ln7yc = icmp ult i64 %ln7yb, %SpLim_Arg
  %ln7yd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7yc, i1 0 )
  br i1 %ln7yd, label %c7xq, label %c7xr
c7xr:
  %ln7yf = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7ye = load i64*, i64** %Sp_Var
  %ln7yg = getelementptr inbounds i64, i64* %ln7ye, i32 -2
  store i64 %ln7yf, i64* %ln7yg, !tbaa !2
  %ln7yi = load i64, i64* %R1_Var
  %ln7yh = load i64*, i64** %Sp_Var
  %ln7yj = getelementptr inbounds i64, i64* %ln7yh, i32 -1
  store i64 %ln7yi, i64* %ln7yj, !tbaa !2
  %ln7yl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7x8_info$def to i64
  %ln7yk = load i64*, i64** %Sp_Var
  %ln7ym = getelementptr inbounds i64, i64* %ln7yk, i32 -7
  store i64 %ln7yl, i64* %ln7ym, !tbaa !2
  %ln7yp = load i64, i64* %R1_Var
  %ln7yq = add i64 %ln7yp, 40
  %ln7yr = inttoptr i64 %ln7yq to i64*
  %ln7ys = load i64, i64* %ln7yr, !tbaa !4
  store i64 %ln7ys, i64* %ls594
  %ln7yt = load i64, i64* %ls594
  store i64 %ln7yt, i64* %R3_Var
  %ln7yu = ptrtoint %Main_xzuzdsx_closure_struct* @Main_xzuzdsx_closure$def to i64
  %ln7yv = add i64 %ln7yu, 2
  store i64 %ln7yv, i64* %R2_Var
  %ln7yz = load i64, i64* %R1_Var
  %ln7yA = add i64 %ln7yz, 16
  %ln7yB = inttoptr i64 %ln7yA to i64*
  %ln7yC = load i64, i64* %ln7yB, !tbaa !4
  %ln7yw = load i64*, i64** %Sp_Var
  %ln7yD = getelementptr inbounds i64, i64* %ln7yw, i32 -6
  store i64 %ln7yC, i64* %ln7yD, !tbaa !2
  %ln7yF = load i64, i64* %ls594
  %ln7yE = load i64*, i64** %Sp_Var
  %ln7yG = getelementptr inbounds i64, i64* %ln7yE, i32 -5
  store i64 %ln7yF, i64* %ln7yG, !tbaa !2
  %ln7yK = load i64, i64* %R1_Var
  %ln7yL = add i64 %ln7yK, 32
  %ln7yM = inttoptr i64 %ln7yL to i64*
  %ln7yN = load i64, i64* %ln7yM, !tbaa !4
  %ln7yH = load i64*, i64** %Sp_Var
  %ln7yO = getelementptr inbounds i64, i64* %ln7yH, i32 -4
  store i64 %ln7yN, i64* %ln7yO, !tbaa !2
  %ln7yS = load i64, i64* %R1_Var
  %ln7yT = add i64 %ln7yS, 24
  %ln7yU = inttoptr i64 %ln7yT to i64*
  %ln7yV = load i64, i64* %ln7yU, !tbaa !4
  %ln7yP = load i64*, i64** %Sp_Var
  %ln7yW = getelementptr inbounds i64, i64* %ln7yP, i32 -3
  store i64 %ln7yV, i64* %ln7yW, !tbaa !2
  %ln7yX = load i64*, i64** %Sp_Var
  %ln7yY = getelementptr inbounds i64, i64* %ln7yX, i32 -7
  %ln7yZ = ptrtoint i64* %ln7yY to i64
  %ln7z0 = inttoptr i64 %ln7yZ to i64*
  store i64* %ln7z0, i64** %Sp_Var
  %ln7z1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7z2 = load i64*, i64** %Sp_Var
  %ln7z3 = load i64, i64* %R1_Var
  %ln7z4 = load i64, i64* %R2_Var
  %ln7z5 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7z1( i64* %Base_Arg, i64* %ln7z2, i64* %Hp_Arg, i64 %ln7z3, i64 %ln7z4, i64 %ln7z5, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xq:
  %ln7z6 = load i64, i64* %R1_Var
  store i64 %ln7z6, i64* %R1_Var
  %ln7z7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7z8 = bitcast i64* %ln7z7 to i64*
  %ln7z9 = load i64, i64* %ln7z8, !tbaa !5
  %ln7za = inttoptr i64 %ln7z9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7zb = load i64*, i64** %Sp_Var
  %ln7zc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7za( i64* %Base_Arg, i64* %ln7zb, i64* %Hp_Arg, i64 %ln7zc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7x8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7x8_info$def to i8*)
define internal ghccc void @c7x8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7x8_info$def to i64)) to i32),i32 0)}>
{
n7zd:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7x8
c7x8:
  %ln7ze = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xd_info$def to i64
  %ln7zf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7ze, i64* %ln7zf, !tbaa !2
  %ln7zg = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %ln7zh = bitcast i64* %ln7zg to i64*
  %ln7zi = load i64, i64* %ln7zh, !tbaa !2
  store i64 %ln7zi, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln7zj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7zk = load i64, i64* %R2_Var
  %ln7zl = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7zj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7zk, i64 %ln7zl, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7xd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xd_info$def to i8*)
define internal ghccc void @c7xd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u7y7_srt_struct* @_u7y7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xd_info$def to i64)) to i32),i32 0)}>
{
n7zm:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7xd
c7xd:
  %ln7zn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xh_info$def to i64
  %ln7zo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7zn, i64* %ln7zo, !tbaa !2
  %ln7zp = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln7zq = bitcast i64* %ln7zp to i64*
  %ln7zr = load i64, i64* %ln7zq, !tbaa !2
  store i64 %ln7zr, i64* %R3_Var
  %ln7zs = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln7zt = bitcast i64* %ln7zs to i64*
  %ln7zu = load i64, i64* %ln7zt, !tbaa !2
  store i64 %ln7zu, i64* %R2_Var
  %ln7zv = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %R1_Arg, i64* %ln7zv, !tbaa !2
  %ln7zw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7zx = load i64, i64* %R2_Var
  %ln7zy = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7zw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7zx, i64 %ln7zy, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7xh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xh_info$def to i8*)
define internal ghccc void @c7xh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 132, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u7y7_srt_struct* @_u7y7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xh_info$def to i64)) to i32),i32 0)}>
{
n7zz:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c7xh
c7xh:
  %ln7zB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xl_info$def to i64
  %ln7zA = load i64*, i64** %Sp_Var
  %ln7zC = getelementptr inbounds i64, i64* %ln7zA, i32 2
  store i64 %ln7zB, i64* %ln7zC, !tbaa !2
  %ln7zD = load i64*, i64** %Sp_Var
  %ln7zE = getelementptr inbounds i64, i64* %ln7zD, i32 4
  %ln7zF = bitcast i64* %ln7zE to i64*
  %ln7zG = load i64, i64* %ln7zF, !tbaa !2
  store i64 %ln7zG, i64* %R3_Var
  %ln7zH = load i64*, i64** %Sp_Var
  %ln7zI = getelementptr inbounds i64, i64* %ln7zH, i32 1
  %ln7zJ = bitcast i64* %ln7zI to i64*
  %ln7zK = load i64, i64* %ln7zJ, !tbaa !2
  store i64 %ln7zK, i64* %R2_Var
  %ln7zL = load i64*, i64** %Sp_Var
  %ln7zM = getelementptr inbounds i64, i64* %ln7zL, i32 4
  store i64 %R1_Arg, i64* %ln7zM, !tbaa !2
  %ln7zN = load i64*, i64** %Sp_Var
  %ln7zO = getelementptr inbounds i64, i64* %ln7zN, i32 2
  %ln7zP = ptrtoint i64* %ln7zO to i64
  %ln7zQ = inttoptr i64 %ln7zP to i64*
  store i64* %ln7zQ, i64** %Sp_Var
  %ln7zR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7zS = load i64*, i64** %Sp_Var
  %ln7zT = load i64, i64* %R2_Var
  %ln7zU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7zR( i64* %Base_Arg, i64* %ln7zS, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7zT, i64 %ln7zU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7xl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xl_info$def to i8*)
define internal ghccc void @c7xl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xl_info$def to i64)) to i32),i32 0)}>
{
n7zV:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7xl
c7xl:
  %ln7zW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xp_info$def to i64
  %ln7zX = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7zW, i64* %ln7zX, !tbaa !2
  %ln7zY = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln7zZ = bitcast i64* %ln7zY to i64*
  %ln7A0 = load i64, i64* %ln7zZ, !tbaa !2
  store i64 %ln7A0, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln7A1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7A2 = load i64, i64* %R2_Var
  %ln7A3 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7A1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7A2, i64 %ln7A3, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7xp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xp_info$def to i8*)
define internal ghccc void @c7xp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7xp_info$def to i64)) to i32),i32 0)}>
{
n7A4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c7xp
c7xp:
  %ln7A5 = load i64*, i64** %Sp_Var
  %ln7A6 = getelementptr inbounds i64, i64* %ln7A5, i32 1
  %ln7A7 = bitcast i64* %ln7A6 to i64*
  %ln7A8 = load i64, i64* %ln7A7, !tbaa !2
  store i64 %ln7A8, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln7A9 = load i64*, i64** %Sp_Var
  %ln7Aa = getelementptr inbounds i64, i64* %ln7A9, i32 3
  %ln7Ab = ptrtoint i64* %ln7Aa to i64
  %ln7Ac = inttoptr i64 %ln7Ab to i64*
  store i64* %ln7Ac, i64** %Sp_Var
  %ln7Ad = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Ae = load i64*, i64** %Sp_Var
  %ln7Af = load i64, i64* %R2_Var
  %ln7Ag = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ad( i64* %Base_Arg, i64* %ln7Ae, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Af, i64 %ln7Ag, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s598_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s598_info$def to i8*)
define internal ghccc void @s598_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s598_info$def to i64)) to i32),i32 0)}>
{
n7Ah:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7xE
c7xE:
  %ln7Ai = load i64*, i64** %Sp_Var
  %ln7Aj = getelementptr inbounds i64, i64* %ln7Ai, i32 -2
  %ln7Ak = ptrtoint i64* %ln7Aj to i64
  %ln7Al = icmp ult i64 %ln7Ak, %SpLim_Arg
  %ln7Am = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Al, i1 0 )
  br i1 %ln7Am, label %c7xF, label %c7xG
c7xG:
  %ln7Ao = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7An = load i64*, i64** %Sp_Var
  %ln7Ap = getelementptr inbounds i64, i64* %ln7An, i32 -2
  store i64 %ln7Ao, i64* %ln7Ap, !tbaa !2
  %ln7Ar = load i64, i64* %R1_Var
  %ln7Aq = load i64*, i64** %Sp_Var
  %ln7As = getelementptr inbounds i64, i64* %ln7Aq, i32 -1
  store i64 %ln7Ar, i64* %ln7As, !tbaa !2
  %ln7Av = load i64, i64* %R1_Var
  %ln7Aw = add i64 %ln7Av, 24
  %ln7Ax = inttoptr i64 %ln7Aw to i64*
  %ln7Ay = load i64, i64* %ln7Ax, !tbaa !4
  store i64 %ln7Ay, i64* %R3_Var
  %ln7AB = load i64, i64* %R1_Var
  %ln7AC = add i64 %ln7AB, 16
  %ln7AD = inttoptr i64 %ln7AC to i64*
  %ln7AE = load i64, i64* %ln7AD, !tbaa !4
  store i64 %ln7AE, i64* %R2_Var
  %ln7AF = load i64*, i64** %Sp_Var
  %ln7AG = getelementptr inbounds i64, i64* %ln7AF, i32 -2
  %ln7AH = ptrtoint i64* %ln7AG to i64
  %ln7AI = inttoptr i64 %ln7AH to i64*
  store i64* %ln7AI, i64** %Sp_Var
  %ln7AJ = bitcast i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7AK = load i64*, i64** %Sp_Var
  %ln7AL = load i64, i64* %R1_Var
  %ln7AM = load i64, i64* %R2_Var
  %ln7AN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7AJ( i64* %Base_Arg, i64* %ln7AK, i64* %Hp_Arg, i64 %ln7AL, i64 %ln7AM, i64 %ln7AN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xF:
  %ln7AO = load i64, i64* %R1_Var
  store i64 %ln7AO, i64* %R1_Var
  %ln7AP = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7AQ = bitcast i64* %ln7AP to i64*
  %ln7AR = load i64, i64* %ln7AQ, !tbaa !5
  %ln7AS = inttoptr i64 %ln7AR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7AT = load i64*, i64** %Sp_Var
  %ln7AU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7AS( i64* %Base_Arg, i64* %ln7AT, i64* %Hp_Arg, i64 %ln7AU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdszdczt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdszdczt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 14, i32 0}>
{
n7AV:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7xL
c7xL:
  %ln7AW = load i64*, i64** %Sp_Var
  %ln7AX = getelementptr inbounds i64, i64* %ln7AW, i32 -3
  %ln7AY = ptrtoint i64* %ln7AX to i64
  %ln7AZ = icmp ult i64 %ln7AY, %SpLim_Arg
  %ln7B0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7AZ, i1 0 )
  br i1 %ln7B0, label %c7xM, label %c7xN
c7xN:
  %ln7B2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wS_info$def to i64
  %ln7B1 = load i64*, i64** %Sp_Var
  %ln7B3 = getelementptr inbounds i64, i64* %ln7B1, i32 -2
  store i64 %ln7B2, i64* %ln7B3, !tbaa !2
  %ln7B4 = load i64, i64* %R2_Var
  store i64 %ln7B4, i64* %R1_Var
  %ln7B6 = load i64, i64* %R3_Var
  %ln7B5 = load i64*, i64** %Sp_Var
  %ln7B7 = getelementptr inbounds i64, i64* %ln7B5, i32 -1
  store i64 %ln7B6, i64* %ln7B7, !tbaa !2
  %ln7B8 = load i64*, i64** %Sp_Var
  %ln7B9 = getelementptr inbounds i64, i64* %ln7B8, i32 -2
  %ln7Ba = ptrtoint i64* %ln7B9 to i64
  %ln7Bb = inttoptr i64 %ln7Ba to i64*
  store i64* %ln7Bb, i64** %Sp_Var
  %ln7Bc = load i64, i64* %R1_Var
  %ln7Bd = and i64 %ln7Bc, 7
  %ln7Be = icmp ne i64 %ln7Bd, 0
  br i1 %ln7Be, label %u7y6, label %c7wT
c7wT:
  %ln7Bg = load i64, i64* %R1_Var
  %ln7Bh = inttoptr i64 %ln7Bg to i64*
  %ln7Bi = load i64, i64* %ln7Bh, !tbaa !4
  %ln7Bj = inttoptr i64 %ln7Bi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Bk = load i64*, i64** %Sp_Var
  %ln7Bl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Bj( i64* %Base_Arg, i64* %ln7Bk, i64* %Hp_Arg, i64 %ln7Bl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7y6:
  %ln7Bm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Bn = load i64*, i64** %Sp_Var
  %ln7Bo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Bm( i64* %Base_Arg, i64* %ln7Bn, i64* %Hp_Arg, i64 %ln7Bo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xM:
  %ln7Bp = load i64, i64* %R3_Var
  store i64 %ln7Bp, i64* %R3_Var
  %ln7Bq = load i64, i64* %R2_Var
  store i64 %ln7Bq, i64* %R2_Var
  %ln7Br = ptrtoint %Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64
  store i64 %ln7Br, i64* %R1_Var
  %ln7Bs = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7Bt = bitcast i64* %ln7Bs to i64*
  %ln7Bu = load i64, i64* %ln7Bt, !tbaa !5
  %ln7Bv = inttoptr i64 %ln7Bu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Bw = load i64*, i64** %Sp_Var
  %ln7Bx = load i64, i64* %R1_Var
  %ln7By = load i64, i64* %R2_Var
  %ln7Bz = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Bv( i64* %Base_Arg, i64* %ln7Bw, i64* %Hp_Arg, i64 %ln7Bx, i64 %ln7By, i64 %ln7Bz, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7wS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wS_info$def to i8*)
define internal ghccc void @c7wS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wS_info$def to i64)) to i32),i32 0)}>
{
n7BA:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls593 = alloca i64, i32 1
  %ls594 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7wS
c7wS:
  %ln7BB = load i64, i64* %R1_Var
  %ln7BC = and i64 %ln7BB, 7
  switch i64 %ln7BC, label %u7y1 [i64 1, label %u7y1
i64 2, label %c7xJ]
u7y1:
  %ln7BD = load i64*, i64** %Sp_Var
  %ln7BE = getelementptr inbounds i64, i64* %ln7BD, i32 2
  %ln7BF = ptrtoint i64* %ln7BE to i64
  %ln7BG = inttoptr i64 %ln7BF to i64*
  store i64* %ln7BG, i64** %Sp_Var
  %ln7BH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7xI$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7BI = load i64*, i64** %Sp_Var
  %ln7BJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7BH( i64* %Base_Arg, i64* %ln7BI, i64* %Hp_Arg, i64 %ln7BJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xJ:
  %ln7BL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wY_info$def to i64
  %ln7BK = load i64*, i64** %Sp_Var
  %ln7BM = getelementptr inbounds i64, i64* %ln7BK, i32 -1
  store i64 %ln7BL, i64* %ln7BM, !tbaa !2
  %ln7BP = load i64, i64* %R1_Var
  %ln7BQ = add i64 %ln7BP, 6
  %ln7BR = inttoptr i64 %ln7BQ to i64*
  %ln7BS = load i64, i64* %ln7BR, !tbaa !4
  store i64 %ln7BS, i64* %ls593
  %ln7BV = load i64, i64* %R1_Var
  %ln7BW = add i64 %ln7BV, 14
  %ln7BX = inttoptr i64 %ln7BW to i64*
  %ln7BY = load i64, i64* %ln7BX, !tbaa !4
  store i64 %ln7BY, i64* %ls594
  %ln7BZ = load i64*, i64** %Sp_Var
  %ln7C0 = getelementptr inbounds i64, i64* %ln7BZ, i32 1
  %ln7C1 = bitcast i64* %ln7C0 to i64*
  %ln7C2 = load i64, i64* %ln7C1, !tbaa !2
  store i64 %ln7C2, i64* %R1_Var
  %ln7C4 = load i64, i64* %ls594
  %ln7C3 = load i64*, i64** %Sp_Var
  %ln7C5 = getelementptr inbounds i64, i64* %ln7C3, i32 0
  store i64 %ln7C4, i64* %ln7C5, !tbaa !2
  %ln7C7 = load i64, i64* %ls593
  %ln7C6 = load i64*, i64** %Sp_Var
  %ln7C8 = getelementptr inbounds i64, i64* %ln7C6, i32 1
  store i64 %ln7C7, i64* %ln7C8, !tbaa !2
  %ln7C9 = load i64*, i64** %Sp_Var
  %ln7Ca = getelementptr inbounds i64, i64* %ln7C9, i32 -1
  %ln7Cb = ptrtoint i64* %ln7Ca to i64
  %ln7Cc = inttoptr i64 %ln7Cb to i64*
  store i64* %ln7Cc, i64** %Sp_Var
  %ln7Cd = load i64, i64* %R1_Var
  %ln7Ce = and i64 %ln7Cd, 7
  %ln7Cf = icmp ne i64 %ln7Ce, 0
  br i1 %ln7Cf, label %u7y3, label %c7wZ
c7wZ:
  %ln7Ch = load i64, i64* %R1_Var
  %ln7Ci = inttoptr i64 %ln7Ch to i64*
  %ln7Cj = load i64, i64* %ln7Ci, !tbaa !4
  %ln7Ck = inttoptr i64 %ln7Cj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Cl = load i64*, i64** %Sp_Var
  %ln7Cm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ck( i64* %Base_Arg, i64* %ln7Cl, i64* %Hp_Arg, i64 %ln7Cm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7y3:
  %ln7Cn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Co = load i64*, i64** %Sp_Var
  %ln7Cp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Cn( i64* %Base_Arg, i64* %ln7Co, i64* %Hp_Arg, i64 %ln7Cp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7wY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wY_info$def to i8*)
define internal ghccc void @c7wY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7wY_info$def to i64)) to i32),i32 0)}>
{
n7Cq:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls596 = alloca i64, i32 1
  %ls597 = alloca i64, i32 1
  %ls593 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7wY
c7wY:
  %ln7Cr = load i64, i64* %R1_Var
  %ln7Cs = and i64 %ln7Cr, 7
  switch i64 %ln7Cs, label %u7y2 [i64 1, label %u7y2
i64 2, label %c7xW]
u7y2:
  %ln7Ct = load i64*, i64** %Sp_Var
  %ln7Cu = getelementptr inbounds i64, i64* %ln7Ct, i32 3
  %ln7Cv = ptrtoint i64* %ln7Cu to i64
  %ln7Cw = inttoptr i64 %ln7Cv to i64*
  store i64* %ln7Cw, i64** %Sp_Var
  %ln7Cx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7xI$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Cy = load i64*, i64** %Sp_Var
  %ln7Cz = load i64*, i64** %Hp_Var
  %ln7CA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Cx( i64* %Base_Arg, i64* %ln7Cy, i64* %ln7Cz, i64 %ln7CA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xW:
  %ln7CB = load i64*, i64** %Hp_Var
  %ln7CC = getelementptr inbounds i64, i64* %ln7CB, i32 13
  %ln7CD = ptrtoint i64* %ln7CC to i64
  %ln7CE = inttoptr i64 %ln7CD to i64*
  store i64* %ln7CE, i64** %Hp_Var
  %ln7CF = load i64*, i64** %Hp_Var
  %ln7CG = ptrtoint i64* %ln7CF to i64
  %ln7CH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7CI = bitcast i64* %ln7CH to i64*
  %ln7CJ = load i64, i64* %ln7CI, !tbaa !5
  %ln7CK = icmp ugt i64 %ln7CG, %ln7CJ
  %ln7CL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7CK, i1 0 )
  br i1 %ln7CL, label %c7xZ, label %c7xY
c7xY:
  %ln7CO = load i64, i64* %R1_Var
  %ln7CP = add i64 %ln7CO, 6
  %ln7CQ = inttoptr i64 %ln7CP to i64*
  %ln7CR = load i64, i64* %ln7CQ, !tbaa !4
  store i64 %ln7CR, i64* %ls596
  %ln7CU = load i64, i64* %R1_Var
  %ln7CV = add i64 %ln7CU, 14
  %ln7CW = inttoptr i64 %ln7CV to i64*
  %ln7CX = load i64, i64* %ln7CW, !tbaa !4
  store i64 %ln7CX, i64* %ls597
  %ln7CZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59e_info$def to i64
  %ln7CY = load i64*, i64** %Hp_Var
  %ln7D0 = getelementptr inbounds i64, i64* %ln7CY, i32 -12
  store i64 %ln7CZ, i64* %ln7D0, !tbaa !3
  %ln7D1 = load i64*, i64** %Sp_Var
  %ln7D2 = getelementptr inbounds i64, i64* %ln7D1, i32 2
  %ln7D3 = bitcast i64* %ln7D2 to i64*
  %ln7D4 = load i64, i64* %ln7D3, !tbaa !2
  store i64 %ln7D4, i64* %ls593
  %ln7D6 = load i64, i64* %ls593
  %ln7D5 = load i64*, i64** %Hp_Var
  %ln7D7 = getelementptr inbounds i64, i64* %ln7D5, i32 -10
  store i64 %ln7D6, i64* %ln7D7, !tbaa !3
  %ln7D9 = load i64, i64* %ls597
  %ln7D8 = load i64*, i64** %Hp_Var
  %ln7Da = getelementptr inbounds i64, i64* %ln7D8, i32 -9
  store i64 %ln7D9, i64* %ln7Da, !tbaa !3
  %ln7Dc = load i64, i64* %ls596
  %ln7Db = load i64*, i64** %Hp_Var
  %ln7Dd = getelementptr inbounds i64, i64* %ln7Db, i32 -8
  store i64 %ln7Dc, i64* %ln7Dd, !tbaa !3
  %ln7Df = load i64*, i64** %Sp_Var
  %ln7Dg = getelementptr inbounds i64, i64* %ln7Df, i32 1
  %ln7Dh = bitcast i64* %ln7Dg to i64*
  %ln7Di = load i64, i64* %ln7Dh, !tbaa !2
  %ln7De = load i64*, i64** %Hp_Var
  %ln7Dj = getelementptr inbounds i64, i64* %ln7De, i32 -7
  store i64 %ln7Di, i64* %ln7Dj, !tbaa !3
  %ln7Dl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s598_info$def to i64
  %ln7Dk = load i64*, i64** %Hp_Var
  %ln7Dm = getelementptr inbounds i64, i64* %ln7Dk, i32 -6
  store i64 %ln7Dl, i64* %ln7Dm, !tbaa !3
  %ln7Do = load i64, i64* %ls593
  %ln7Dn = load i64*, i64** %Hp_Var
  %ln7Dp = getelementptr inbounds i64, i64* %ln7Dn, i32 -4
  store i64 %ln7Do, i64* %ln7Dp, !tbaa !3
  %ln7Dr = load i64, i64* %ls596
  %ln7Dq = load i64*, i64** %Hp_Var
  %ln7Ds = getelementptr inbounds i64, i64* %ln7Dq, i32 -3
  store i64 %ln7Dr, i64* %ln7Ds, !tbaa !3
  %ln7Du = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7Dt = load i64*, i64** %Hp_Var
  %ln7Dv = getelementptr inbounds i64, i64* %ln7Dt, i32 -2
  store i64 %ln7Du, i64* %ln7Dv, !tbaa !3
  %ln7Dx = load i64*, i64** %Hp_Var
  %ln7Dy = getelementptr inbounds i64, i64* %ln7Dx, i32 -6
  %ln7Dz = ptrtoint i64* %ln7Dy to i64
  %ln7Dw = load i64*, i64** %Hp_Var
  %ln7DA = getelementptr inbounds i64, i64* %ln7Dw, i32 -1
  store i64 %ln7Dz, i64* %ln7DA, !tbaa !3
  %ln7DC = load i64*, i64** %Hp_Var
  %ln7DD = getelementptr inbounds i64, i64* %ln7DC, i32 -12
  %ln7DE = ptrtoint i64* %ln7DD to i64
  %ln7DB = load i64*, i64** %Hp_Var
  %ln7DF = getelementptr inbounds i64, i64* %ln7DB, i32 0
  store i64 %ln7DE, i64* %ln7DF, !tbaa !3
  %ln7DH = load i64*, i64** %Hp_Var
  %ln7DI = ptrtoint i64* %ln7DH to i64
  %ln7DJ = add i64 %ln7DI, -14
  store i64 %ln7DJ, i64* %R1_Var
  %ln7DK = load i64*, i64** %Sp_Var
  %ln7DL = getelementptr inbounds i64, i64* %ln7DK, i32 3
  %ln7DM = ptrtoint i64* %ln7DL to i64
  %ln7DN = inttoptr i64 %ln7DM to i64*
  store i64* %ln7DN, i64** %Sp_Var
  %ln7DO = load i64*, i64** %Sp_Var
  %ln7DP = getelementptr inbounds i64, i64* %ln7DO, i32 0
  %ln7DQ = bitcast i64* %ln7DP to i64*
  %ln7DR = load i64, i64* %ln7DQ, !tbaa !2
  %ln7DS = inttoptr i64 %ln7DR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7DT = load i64*, i64** %Sp_Var
  %ln7DU = load i64*, i64** %Hp_Var
  %ln7DV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7DS( i64* %Base_Arg, i64* %ln7DT, i64* %ln7DU, i64 %ln7DV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7xZ:
  %ln7DW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %ln7DW, !tbaa !5
  %ln7DX = load i64, i64* %R1_Var
  store i64 %ln7DX, i64* %R1_Var
  %ln7DY = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7DZ = load i64*, i64** %Sp_Var
  %ln7E0 = load i64*, i64** %Hp_Var
  %ln7E1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7DY( i64* %Base_Arg, i64* %ln7DZ, i64* %ln7E0, i64 %ln7E1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c7xI = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7xI$def to i8*)
define internal ghccc void @_c7xI$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n7E2:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7xI
c7xI:
  %ln7E3 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7E4 = add i64 %ln7E3, 1
  store i64 %ln7E4, i64* %R1_Var
  %ln7E5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln7E6 = bitcast i64* %ln7E5 to i64*
  %ln7E7 = load i64, i64* %ln7E6, !tbaa !2
  %ln7E8 = inttoptr i64 %ln7E7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7E9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7E8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln7E9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_composezuzdscompose_closure_struct = type <{i64, i64}>
@Main_composezuzdscompose_closure$def = internal global %Main_composezuzdscompose_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to i64), i64 0}>
@Main_composezuzdscompose_closure = alias i8, bitcast (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i8*)
@s5cZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cZ_info$def to i8*)
define internal ghccc void @s5cZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cZ_info$def to i64)) to i32),i32 0)}>
{
n7G2:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7EE
c7EE:
  %ln7G3 = add i64 %R1_Arg, 24
  %ln7G4 = inttoptr i64 %ln7G3 to i64*
  %ln7G5 = load i64, i64* %ln7G4, !tbaa !4
  store i64 %ln7G5, i64* %R3_Var
  %ln7G6 = add i64 %R1_Arg, 16
  %ln7G7 = inttoptr i64 %ln7G6 to i64*
  %ln7G8 = load i64, i64* %ln7G7, !tbaa !4
  store i64 %ln7G8, i64* %R2_Var
  %ln7G9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Ga = load i64, i64* %R2_Var
  %ln7Gb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7G9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Ga, i64 %ln7Gb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5d4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d4_info$def to i8*)
define internal ghccc void @s5d4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d4_info$def to i64)) to i32),i32 0)}>
{
n7Gc:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5cQ = alloca i64, i32 1
  %ls5cT = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7F0
c7F0:
  %ln7Gd = load i64*, i64** %Hp_Var
  %ln7Ge = getelementptr inbounds i64, i64* %ln7Gd, i32 3
  %ln7Gf = ptrtoint i64* %ln7Ge to i64
  %ln7Gg = inttoptr i64 %ln7Gf to i64*
  store i64* %ln7Gg, i64** %Hp_Var
  %ln7Gh = load i64*, i64** %Hp_Var
  %ln7Gi = ptrtoint i64* %ln7Gh to i64
  %ln7Gj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Gk = bitcast i64* %ln7Gj to i64*
  %ln7Gl = load i64, i64* %ln7Gk, !tbaa !5
  %ln7Gm = icmp ugt i64 %ln7Gi, %ln7Gl
  %ln7Gn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Gm, i1 0 )
  br i1 %ln7Gn, label %c7F4, label %c7F3
c7F3:
  %ln7Gq = load i64, i64* %R1_Var
  %ln7Gr = add i64 %ln7Gq, 16
  %ln7Gs = inttoptr i64 %ln7Gr to i64*
  %ln7Gt = load i64, i64* %ln7Gs, !tbaa !4
  store i64 %ln7Gt, i64* %ls5cQ
  %ln7Gw = load i64, i64* %R1_Var
  %ln7Gx = add i64 %ln7Gw, 24
  %ln7Gy = inttoptr i64 %ln7Gx to i64*
  %ln7Gz = load i64, i64* %ln7Gy, !tbaa !4
  store i64 %ln7Gz, i64* %ls5cT
  %ln7GB = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7GA = load i64*, i64** %Hp_Var
  %ln7GC = getelementptr inbounds i64, i64* %ln7GA, i32 -2
  store i64 %ln7GB, i64* %ln7GC, !tbaa !3
  %ln7GE = ptrtoint %Main_integral1_closure_struct* @Main_integral1_closure$def to i64
  %ln7GF = add i64 %ln7GE, 1
  %ln7GD = load i64*, i64** %Hp_Var
  %ln7GG = getelementptr inbounds i64, i64* %ln7GD, i32 -1
  store i64 %ln7GF, i64* %ln7GG, !tbaa !3
  %ln7GI = load i64, i64* %ls5cT
  %ln7GH = load i64*, i64** %Hp_Var
  %ln7GJ = getelementptr inbounds i64, i64* %ln7GH, i32 0
  store i64 %ln7GI, i64* %ln7GJ, !tbaa !3
  %ln7GL = load i64*, i64** %Hp_Var
  %ln7GM = ptrtoint i64* %ln7GL to i64
  %ln7GN = add i64 %ln7GM, -14
  store i64 %ln7GN, i64* %R3_Var
  %ln7GO = load i64, i64* %ls5cQ
  store i64 %ln7GO, i64* %R2_Var
  %ln7GP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7GQ = load i64*, i64** %Hp_Var
  %ln7GR = load i64, i64* %R1_Var
  %ln7GS = load i64, i64* %R2_Var
  %ln7GT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7GP( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7GQ, i64 %ln7GR, i64 %ln7GS, i64 %ln7GT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7F4:
  %ln7GU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7GU, !tbaa !5
  %ln7GV = load i64, i64* %R1_Var
  store i64 %ln7GV, i64* %R1_Var
  %ln7GW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7GX = bitcast i64* %ln7GW to i64*
  %ln7GY = load i64, i64* %ln7GX, !tbaa !5
  %ln7GZ = inttoptr i64 %ln7GY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7H0 = load i64*, i64** %Hp_Var
  %ln7H1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7GZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7H0, i64 %ln7H1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5d5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d5_info$def to i8*)
define internal ghccc void @s5d5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d5_info$def to i64)) to i32),i32 0)}>
{
n7H2:
  %ls5d5 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5cQ = alloca i64, i32 1
  %ls5cT = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7F5
c7F5:
  %ln7H3 = load i64, i64* %R1_Var
  store i64 %ln7H3, i64* %ls5d5
  %ln7H4 = load i64*, i64** %Sp_Var
  %ln7H5 = getelementptr inbounds i64, i64* %ln7H4, i32 -2
  %ln7H6 = ptrtoint i64* %ln7H5 to i64
  %ln7H7 = icmp ult i64 %ln7H6, %SpLim_Arg
  %ln7H8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7H7, i1 0 )
  br i1 %ln7H8, label %c7F6, label %c7F7
c7F7:
  %ln7H9 = load i64*, i64** %Hp_Var
  %ln7Ha = getelementptr inbounds i64, i64* %ln7H9, i32 4
  %ln7Hb = ptrtoint i64* %ln7Ha to i64
  %ln7Hc = inttoptr i64 %ln7Hb to i64*
  store i64* %ln7Hc, i64** %Hp_Var
  %ln7Hd = load i64*, i64** %Hp_Var
  %ln7He = ptrtoint i64* %ln7Hd to i64
  %ln7Hf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Hg = bitcast i64* %ln7Hf to i64*
  %ln7Hh = load i64, i64* %ln7Hg, !tbaa !5
  %ln7Hi = icmp ugt i64 %ln7He, %ln7Hh
  %ln7Hj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Hi, i1 0 )
  br i1 %ln7Hj, label %c7F9, label %c7F8
c7F8:
  %ln7Hl = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7Hk = load i64*, i64** %Sp_Var
  %ln7Hm = getelementptr inbounds i64, i64* %ln7Hk, i32 -2
  store i64 %ln7Hl, i64* %ln7Hm, !tbaa !2
  %ln7Ho = load i64, i64* %ls5d5
  %ln7Hn = load i64*, i64** %Sp_Var
  %ln7Hp = getelementptr inbounds i64, i64* %ln7Hn, i32 -1
  store i64 %ln7Ho, i64* %ln7Hp, !tbaa !2
  %ln7Hq = load i64, i64* %ls5d5
  %ln7Hr = add i64 %ln7Hq, 16
  %ln7Hs = inttoptr i64 %ln7Hr to i64*
  %ln7Ht = load i64, i64* %ln7Hs, !tbaa !1
  store i64 %ln7Ht, i64* %ls5cQ
  %ln7Hu = load i64, i64* %ls5d5
  %ln7Hv = add i64 %ln7Hu, 24
  %ln7Hw = inttoptr i64 %ln7Hv to i64*
  %ln7Hx = load i64, i64* %ln7Hw, !tbaa !1
  store i64 %ln7Hx, i64* %ls5cT
  %ln7Hz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d4_info$def to i64
  %ln7Hy = load i64*, i64** %Hp_Var
  %ln7HA = getelementptr inbounds i64, i64* %ln7Hy, i32 -3
  store i64 %ln7Hz, i64* %ln7HA, !tbaa !3
  %ln7HC = load i64, i64* %ls5cQ
  %ln7HB = load i64*, i64** %Hp_Var
  %ln7HD = getelementptr inbounds i64, i64* %ln7HB, i32 -1
  store i64 %ln7HC, i64* %ln7HD, !tbaa !3
  %ln7HF = load i64, i64* %ls5cT
  %ln7HE = load i64*, i64** %Hp_Var
  %ln7HG = getelementptr inbounds i64, i64* %ln7HE, i32 0
  store i64 %ln7HF, i64* %ln7HG, !tbaa !3
  %ln7HH = load i64*, i64** %Hp_Var
  %ln7HI = getelementptr inbounds i64, i64* %ln7HH, i32 -3
  %ln7HJ = ptrtoint i64* %ln7HI to i64
  store i64 %ln7HJ, i64* %R3_Var
  %ln7HK = load i64, i64* %ls5cT
  store i64 %ln7HK, i64* %R2_Var
  %ln7HL = load i64*, i64** %Sp_Var
  %ln7HM = getelementptr inbounds i64, i64* %ln7HL, i32 -2
  %ln7HN = ptrtoint i64* %ln7HM to i64
  %ln7HO = inttoptr i64 %ln7HN to i64*
  store i64* %ln7HO, i64** %Sp_Var
  %ln7HP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7HQ = load i64*, i64** %Sp_Var
  %ln7HR = load i64*, i64** %Hp_Var
  %ln7HS = load i64, i64* %R1_Var
  %ln7HT = load i64, i64* %R2_Var
  %ln7HU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7HP( i64* %Base_Arg, i64* %ln7HQ, i64* %ln7HR, i64 %ln7HS, i64 %ln7HT, i64 %ln7HU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7F9:
  %ln7HV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln7HV, !tbaa !5
  br label %c7F6
c7F6:
  %ln7HW = load i64, i64* %ls5d5
  store i64 %ln7HW, i64* %R1_Var
  %ln7HX = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7HY = bitcast i64* %ln7HX to i64*
  %ln7HZ = load i64, i64* %ln7HY, !tbaa !5
  %ln7I0 = inttoptr i64 %ln7HZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7I1 = load i64*, i64** %Sp_Var
  %ln7I2 = load i64*, i64** %Hp_Var
  %ln7I3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7I0( i64* %Base_Arg, i64* %ln7I1, i64* %ln7I2, i64 %ln7I3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_composezuzdscompose_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to i8*)
define ghccc void @Main_composezuzdscompose_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to i64)) to i32),i32 0)}>
{
n7I4:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7Fe
c7Fe:
  %ln7I5 = load i64*, i64** %Sp_Var
  %ln7I6 = getelementptr inbounds i64, i64* %ln7I5, i32 -6
  %ln7I7 = ptrtoint i64* %ln7I6 to i64
  %ln7I8 = icmp ult i64 %ln7I7, %SpLim_Arg
  %ln7I9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7I8, i1 0 )
  br i1 %ln7I9, label %c7Ff, label %c7Fg
c7Fg:
  %ln7Ib = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ee_info$def to i64
  %ln7Ia = load i64*, i64** %Sp_Var
  %ln7Ic = getelementptr inbounds i64, i64* %ln7Ia, i32 -2
  store i64 %ln7Ib, i64* %ln7Ic, !tbaa !2
  %ln7Id = load i64, i64* %R2_Var
  store i64 %ln7Id, i64* %R1_Var
  %ln7If = load i64, i64* %R3_Var
  %ln7Ie = load i64*, i64** %Sp_Var
  %ln7Ig = getelementptr inbounds i64, i64* %ln7Ie, i32 -1
  store i64 %ln7If, i64* %ln7Ig, !tbaa !2
  %ln7Ih = load i64*, i64** %Sp_Var
  %ln7Ii = getelementptr inbounds i64, i64* %ln7Ih, i32 -2
  %ln7Ij = ptrtoint i64* %ln7Ii to i64
  %ln7Ik = inttoptr i64 %ln7Ij to i64*
  store i64* %ln7Ik, i64** %Sp_Var
  %ln7Il = load i64, i64* %R1_Var
  %ln7Im = and i64 %ln7Il, 7
  %ln7In = icmp ne i64 %ln7Im, 0
  br i1 %ln7In, label %u7G1, label %c7Ef
c7Ef:
  %ln7Ip = load i64, i64* %R1_Var
  %ln7Iq = inttoptr i64 %ln7Ip to i64*
  %ln7Ir = load i64, i64* %ln7Iq, !tbaa !4
  %ln7Is = inttoptr i64 %ln7Ir to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7It = load i64*, i64** %Sp_Var
  %ln7Iu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Is( i64* %Base_Arg, i64* %ln7It, i64* %Hp_Arg, i64 %ln7Iu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7G1:
  %ln7Iv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ee_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Iw = load i64*, i64** %Sp_Var
  %ln7Ix = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Iv( i64* %Base_Arg, i64* %ln7Iw, i64* %Hp_Arg, i64 %ln7Ix, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Ff:
  %ln7Iy = load i64, i64* %R3_Var
  store i64 %ln7Iy, i64* %R3_Var
  %ln7Iz = load i64, i64* %R2_Var
  store i64 %ln7Iz, i64* %R2_Var
  %ln7IA = ptrtoint %Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64
  store i64 %ln7IA, i64* %R1_Var
  %ln7IB = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7IC = bitcast i64* %ln7IB to i64*
  %ln7ID = load i64, i64* %ln7IC, !tbaa !5
  %ln7IE = inttoptr i64 %ln7ID to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7IF = load i64*, i64** %Sp_Var
  %ln7IG = load i64, i64* %R1_Var
  %ln7IH = load i64, i64* %R2_Var
  %ln7II = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7IE( i64* %Base_Arg, i64* %ln7IF, i64* %Hp_Arg, i64 %ln7IG, i64 %ln7IH, i64 %ln7II, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Ee_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ee_info$def to i8*)
define internal ghccc void @c7Ee_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ee_info$def to i64)) to i32),i32 0)}>
{
n7IJ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5cP = alloca i64, i32 1
  %ls5cQ = alloca i64, i32 1
  br label %c7Ee
c7Ee:
  %ln7IK = load i64, i64* %R1_Var
  %ln7IL = and i64 %ln7IK, 7
  switch i64 %ln7IL, label %c7Fb [i64 1, label %c7Fb
i64 2, label %c7Fc]
c7Fb:
  %ln7IM = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7IN = add i64 %ln7IM, 1
  store i64 %ln7IN, i64* %R1_Var
  %ln7IO = load i64*, i64** %Sp_Var
  %ln7IP = getelementptr inbounds i64, i64* %ln7IO, i32 2
  %ln7IQ = ptrtoint i64* %ln7IP to i64
  %ln7IR = inttoptr i64 %ln7IQ to i64*
  store i64* %ln7IR, i64** %Sp_Var
  %ln7IS = load i64*, i64** %Sp_Var
  %ln7IT = getelementptr inbounds i64, i64* %ln7IS, i32 0
  %ln7IU = bitcast i64* %ln7IT to i64*
  %ln7IV = load i64, i64* %ln7IU, !tbaa !2
  %ln7IW = inttoptr i64 %ln7IV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7IX = load i64*, i64** %Sp_Var
  %ln7IY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7IW( i64* %Base_Arg, i64* %ln7IX, i64* %Hp_Arg, i64 %ln7IY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Fc:
  %ln7J0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ek_info$def to i64
  %ln7IZ = load i64*, i64** %Sp_Var
  %ln7J1 = getelementptr inbounds i64, i64* %ln7IZ, i32 -1
  store i64 %ln7J0, i64* %ln7J1, !tbaa !2
  %ln7J4 = load i64, i64* %R1_Var
  %ln7J5 = add i64 %ln7J4, 6
  %ln7J6 = inttoptr i64 %ln7J5 to i64*
  %ln7J7 = load i64, i64* %ln7J6, !tbaa !4
  store i64 %ln7J7, i64* %ls5cP
  %ln7Ja = load i64, i64* %R1_Var
  %ln7Jb = add i64 %ln7Ja, 14
  %ln7Jc = inttoptr i64 %ln7Jb to i64*
  %ln7Jd = load i64, i64* %ln7Jc, !tbaa !4
  store i64 %ln7Jd, i64* %ls5cQ
  %ln7Je = load i64*, i64** %Sp_Var
  %ln7Jf = getelementptr inbounds i64, i64* %ln7Je, i32 1
  %ln7Jg = bitcast i64* %ln7Jf to i64*
  %ln7Jh = load i64, i64* %ln7Jg, !tbaa !2
  store i64 %ln7Jh, i64* %R1_Var
  %ln7Jj = load i64, i64* %ls5cQ
  %ln7Ji = load i64*, i64** %Sp_Var
  %ln7Jk = getelementptr inbounds i64, i64* %ln7Ji, i32 0
  store i64 %ln7Jj, i64* %ln7Jk, !tbaa !2
  %ln7Jm = load i64, i64* %ls5cP
  %ln7Jl = load i64*, i64** %Sp_Var
  %ln7Jn = getelementptr inbounds i64, i64* %ln7Jl, i32 1
  store i64 %ln7Jm, i64* %ln7Jn, !tbaa !2
  %ln7Jo = load i64*, i64** %Sp_Var
  %ln7Jp = getelementptr inbounds i64, i64* %ln7Jo, i32 -1
  %ln7Jq = ptrtoint i64* %ln7Jp to i64
  %ln7Jr = inttoptr i64 %ln7Jq to i64*
  store i64* %ln7Jr, i64** %Sp_Var
  %ln7Js = load i64, i64* %R1_Var
  %ln7Jt = and i64 %ln7Js, 7
  %ln7Ju = icmp ne i64 %ln7Jt, 0
  br i1 %ln7Ju, label %u7FX, label %c7El
c7El:
  %ln7Jw = load i64, i64* %R1_Var
  %ln7Jx = inttoptr i64 %ln7Jw to i64*
  %ln7Jy = load i64, i64* %ln7Jx, !tbaa !4
  %ln7Jz = inttoptr i64 %ln7Jy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7JA = load i64*, i64** %Sp_Var
  %ln7JB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Jz( i64* %Base_Arg, i64* %ln7JA, i64* %Hp_Arg, i64 %ln7JB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7FX:
  %ln7JC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ek_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7JD = load i64*, i64** %Sp_Var
  %ln7JE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7JC( i64* %Base_Arg, i64* %ln7JD, i64* %Hp_Arg, i64 %ln7JE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Ek_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ek_info$def to i8*)
define internal ghccc void @c7Ek_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ek_info$def to i64)) to i32),i32 0)}>
{
n7JF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5cR = alloca i64, i32 1
  %ls5cT = alloca i64, i32 1
  br label %c7Ek
c7Ek:
  %ln7JG = load i64, i64* %R1_Var
  %ln7JH = and i64 %ln7JG, 7
  switch i64 %ln7JH, label %c7Fn [i64 1, label %c7Fn
i64 2, label %c7Fs]
c7Fn:
  %ln7JI = load i64*, i64** %Hp_Var
  %ln7JJ = getelementptr inbounds i64, i64* %ln7JI, i32 3
  %ln7JK = ptrtoint i64* %ln7JJ to i64
  %ln7JL = inttoptr i64 %ln7JK to i64*
  store i64* %ln7JL, i64** %Hp_Var
  %ln7JM = load i64*, i64** %Hp_Var
  %ln7JN = ptrtoint i64* %ln7JM to i64
  %ln7JO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7JP = bitcast i64* %ln7JO to i64*
  %ln7JQ = load i64, i64* %ln7JP, !tbaa !5
  %ln7JR = icmp ugt i64 %ln7JN, %ln7JQ
  %ln7JS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7JR, i1 0 )
  br i1 %ln7JS, label %c7Fq, label %c7Fp
c7Fp:
  %ln7JU = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7JT = load i64*, i64** %Hp_Var
  %ln7JV = getelementptr inbounds i64, i64* %ln7JT, i32 -2
  store i64 %ln7JU, i64* %ln7JV, !tbaa !3
  %ln7JX = load i64*, i64** %Sp_Var
  %ln7JY = getelementptr inbounds i64, i64* %ln7JX, i32 2
  %ln7JZ = bitcast i64* %ln7JY to i64*
  %ln7K0 = load i64, i64* %ln7JZ, !tbaa !2
  %ln7JW = load i64*, i64** %Hp_Var
  %ln7K1 = getelementptr inbounds i64, i64* %ln7JW, i32 -1
  store i64 %ln7K0, i64* %ln7K1, !tbaa !3
  %ln7K3 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7K4 = add i64 %ln7K3, 1
  %ln7K2 = load i64*, i64** %Hp_Var
  %ln7K5 = getelementptr inbounds i64, i64* %ln7K2, i32 0
  store i64 %ln7K4, i64* %ln7K5, !tbaa !3
  %ln7K7 = load i64*, i64** %Hp_Var
  %ln7K8 = ptrtoint i64* %ln7K7 to i64
  %ln7K9 = add i64 %ln7K8, -14
  store i64 %ln7K9, i64* %R1_Var
  %ln7Ka = load i64*, i64** %Sp_Var
  %ln7Kb = getelementptr inbounds i64, i64* %ln7Ka, i32 3
  %ln7Kc = ptrtoint i64* %ln7Kb to i64
  %ln7Kd = inttoptr i64 %ln7Kc to i64*
  store i64* %ln7Kd, i64** %Sp_Var
  %ln7Ke = load i64*, i64** %Sp_Var
  %ln7Kf = getelementptr inbounds i64, i64* %ln7Ke, i32 0
  %ln7Kg = bitcast i64* %ln7Kf to i64*
  %ln7Kh = load i64, i64* %ln7Kg, !tbaa !2
  %ln7Ki = inttoptr i64 %ln7Kh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Kj = load i64*, i64** %Sp_Var
  %ln7Kk = load i64*, i64** %Hp_Var
  %ln7Kl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ki( i64* %Base_Arg, i64* %ln7Kj, i64* %ln7Kk, i64 %ln7Kl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Fq:
  %ln7Km = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7Km, !tbaa !5
  %ln7Kn = load i64, i64* %R1_Var
  store i64 %ln7Kn, i64* %R1_Var
  %ln7Ko = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Kp = load i64*, i64** %Sp_Var
  %ln7Kq = load i64*, i64** %Hp_Var
  %ln7Kr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ko( i64* %Base_Arg, i64* %ln7Kp, i64* %ln7Kq, i64 %ln7Kr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Fs:
  %ln7Kt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Eq_info$def to i64
  %ln7Ks = load i64*, i64** %Sp_Var
  %ln7Ku = getelementptr inbounds i64, i64* %ln7Ks, i32 -2
  store i64 %ln7Kt, i64* %ln7Ku, !tbaa !2
  %ln7Kv = load i64, i64* %R1_Var
  store i64 %ln7Kv, i64* %ls5cR
  %ln7Ky = load i64, i64* %R1_Var
  %ln7Kz = add i64 %ln7Ky, 14
  %ln7KA = inttoptr i64 %ln7Kz to i64*
  %ln7KB = load i64, i64* %ln7KA, !tbaa !4
  store i64 %ln7KB, i64* %ls5cT
  %ln7KE = load i64, i64* %R1_Var
  %ln7KF = add i64 %ln7KE, 6
  %ln7KG = inttoptr i64 %ln7KF to i64*
  %ln7KH = load i64, i64* %ln7KG, !tbaa !4
  store i64 %ln7KH, i64* %R1_Var
  %ln7KJ = load i64, i64* %ls5cT
  %ln7KI = load i64*, i64** %Sp_Var
  %ln7KK = getelementptr inbounds i64, i64* %ln7KI, i32 -1
  store i64 %ln7KJ, i64* %ln7KK, !tbaa !2
  %ln7KM = load i64, i64* %ls5cR
  %ln7KL = load i64*, i64** %Sp_Var
  %ln7KN = getelementptr inbounds i64, i64* %ln7KL, i32 0
  store i64 %ln7KM, i64* %ln7KN, !tbaa !2
  %ln7KO = load i64*, i64** %Sp_Var
  %ln7KP = getelementptr inbounds i64, i64* %ln7KO, i32 -2
  %ln7KQ = ptrtoint i64* %ln7KP to i64
  %ln7KR = inttoptr i64 %ln7KQ to i64*
  store i64* %ln7KR, i64** %Sp_Var
  %ln7KS = load i64, i64* %R1_Var
  %ln7KT = and i64 %ln7KS, 7
  %ln7KU = icmp ne i64 %ln7KT, 0
  br i1 %ln7KU, label %u7FY, label %c7Er
c7Er:
  %ln7KW = load i64, i64* %R1_Var
  %ln7KX = inttoptr i64 %ln7KW to i64*
  %ln7KY = load i64, i64* %ln7KX, !tbaa !4
  %ln7KZ = inttoptr i64 %ln7KY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7L0 = load i64*, i64** %Sp_Var
  %ln7L1 = load i64*, i64** %Hp_Var
  %ln7L2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7KZ( i64* %Base_Arg, i64* %ln7L0, i64* %ln7L1, i64 %ln7L2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7FY:
  %ln7L3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Eq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7L4 = load i64*, i64** %Sp_Var
  %ln7L5 = load i64*, i64** %Hp_Var
  %ln7L6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7L3( i64* %Base_Arg, i64* %ln7L4, i64* %ln7L5, i64 %ln7L6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Eq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Eq_info$def to i8*)
define internal ghccc void @c7Eq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Eq_info$def to i64)) to i32),i32 0)}>
{
n7L7:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c7Eq
c7Eq:
  %ln7L9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EH_info$def to i64
  %ln7L8 = load i64*, i64** %Sp_Var
  %ln7La = getelementptr inbounds i64, i64* %ln7L8, i32 -1
  store i64 %ln7L9, i64* %ln7La, !tbaa !2
  %ln7Lb = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln7Lc = add i64 %ln7Lb, 1
  store i64 %ln7Lc, i64* %R3_Var
  %ln7Ld = add i64 %R1_Arg, 7
  %ln7Le = inttoptr i64 %ln7Ld to i64*
  %ln7Lf = load i64, i64* %ln7Le, !tbaa !4
  store i64 %ln7Lf, i64* %R2_Var
  %ln7Lh = add i64 %R1_Arg, 15
  %ln7Li = inttoptr i64 %ln7Lh to i64*
  %ln7Lj = load i64, i64* %ln7Li, !tbaa !4
  %ln7Lg = load i64*, i64** %Sp_Var
  %ln7Lk = getelementptr inbounds i64, i64* %ln7Lg, i32 0
  store i64 %ln7Lj, i64* %ln7Lk, !tbaa !2
  %ln7Ll = load i64*, i64** %Sp_Var
  %ln7Lm = getelementptr inbounds i64, i64* %ln7Ll, i32 -1
  %ln7Ln = ptrtoint i64* %ln7Lm to i64
  %ln7Lo = inttoptr i64 %ln7Ln to i64*
  store i64* %ln7Lo, i64** %Sp_Var
  %ln7Lp = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Lq = load i64*, i64** %Sp_Var
  %ln7Lr = load i64, i64* %R2_Var
  %ln7Ls = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Lp( i64* %Base_Arg, i64* %ln7Lq, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Lr, i64 %ln7Ls, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7EH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EH_info$def to i8*)
define internal ghccc void @c7EH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EH_info$def to i64)) to i32),i32 0)}>
{
n7Lt:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5cW = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7EH
c7EH:
  switch i64 %R1_Arg, label %u7FV [i64 1, label %c7FK]
u7FV:
  %ln7Lu = load i64*, i64** %Sp_Var
  %ln7Lv = getelementptr inbounds i64, i64* %ln7Lu, i32 2
  %ln7Lw = ptrtoint i64* %ln7Lv to i64
  %ln7Lx = inttoptr i64 %ln7Lw to i64*
  store i64* %ln7Lx, i64** %Sp_Var
  %ln7Ly = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ey_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Lz = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ly( i64* %Base_Arg, i64* %ln7Lz, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7FK:
  %ln7LA = load i64*, i64** %Sp_Var
  %ln7LB = getelementptr inbounds i64, i64* %ln7LA, i32 1
  %ln7LC = bitcast i64* %ln7LB to i64*
  %ln7LD = load i64, i64* %ln7LC, !tbaa !2
  store i64 %ln7LD, i64* %ls5cW
  %ln7LF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EM_info$def to i64
  %ln7LE = load i64*, i64** %Sp_Var
  %ln7LG = getelementptr inbounds i64, i64* %ln7LE, i32 1
  store i64 %ln7LF, i64* %ln7LG, !tbaa !2
  %ln7LH = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln7LI = add i64 %ln7LH, 1
  store i64 %ln7LI, i64* %R3_Var
  %ln7LJ = load i64, i64* %ls5cW
  store i64 %ln7LJ, i64* %R2_Var
  %ln7LK = load i64*, i64** %Sp_Var
  %ln7LL = getelementptr inbounds i64, i64* %ln7LK, i32 1
  %ln7LM = ptrtoint i64* %ln7LL to i64
  %ln7LN = inttoptr i64 %ln7LM to i64*
  store i64* %ln7LN, i64** %Sp_Var
  %ln7LO = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7LP = load i64*, i64** %Sp_Var
  %ln7LQ = load i64, i64* %R2_Var
  %ln7LR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7LO( i64* %Base_Arg, i64* %ln7LP, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7LQ, i64 %ln7LR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7EM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EM_info$def to i8*)
define internal ghccc void @c7EM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7EM_info$def to i64)) to i32),i32 0)}>
{
n7LS:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7EM
c7EM:
  %ln7LT = load i64, i64* %R1_Var
  switch i64 %ln7LT, label %u7FW [i64 1, label %c7FQ]
u7FW:
  %ln7LU = load i64*, i64** %Sp_Var
  %ln7LV = getelementptr inbounds i64, i64* %ln7LU, i32 1
  %ln7LW = ptrtoint i64* %ln7LV to i64
  %ln7LX = inttoptr i64 %ln7LW to i64*
  store i64* %ln7LX, i64** %Sp_Var
  %ln7LY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ey_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7LZ = load i64*, i64** %Sp_Var
  %ln7M0 = load i64*, i64** %Hp_Var
  %ln7M1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7LY( i64* %Base_Arg, i64* %ln7LZ, i64* %ln7M0, i64 %ln7M1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7FQ:
  %ln7M2 = load i64*, i64** %Hp_Var
  %ln7M3 = getelementptr inbounds i64, i64* %ln7M2, i32 7
  %ln7M4 = ptrtoint i64* %ln7M3 to i64
  %ln7M5 = inttoptr i64 %ln7M4 to i64*
  store i64* %ln7M5, i64** %Hp_Var
  %ln7M6 = load i64*, i64** %Hp_Var
  %ln7M7 = ptrtoint i64* %ln7M6 to i64
  %ln7M8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7M9 = bitcast i64* %ln7M8 to i64*
  %ln7Ma = load i64, i64* %ln7M9, !tbaa !5
  %ln7Mb = icmp ugt i64 %ln7M7, %ln7Ma
  %ln7Mc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Mb, i1 0 )
  br i1 %ln7Mc, label %c7FT, label %c7FS
c7FS:
  %ln7Me = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5d5_info$def to i64
  %ln7Md = load i64*, i64** %Hp_Var
  %ln7Mf = getelementptr inbounds i64, i64* %ln7Md, i32 -6
  store i64 %ln7Me, i64* %ln7Mf, !tbaa !3
  %ln7Mh = load i64*, i64** %Sp_Var
  %ln7Mi = getelementptr inbounds i64, i64* %ln7Mh, i32 3
  %ln7Mj = bitcast i64* %ln7Mi to i64*
  %ln7Mk = load i64, i64* %ln7Mj, !tbaa !2
  %ln7Mg = load i64*, i64** %Hp_Var
  %ln7Ml = getelementptr inbounds i64, i64* %ln7Mg, i32 -4
  store i64 %ln7Mk, i64* %ln7Ml, !tbaa !3
  %ln7Mn = load i64*, i64** %Sp_Var
  %ln7Mo = getelementptr inbounds i64, i64* %ln7Mn, i32 1
  %ln7Mp = bitcast i64* %ln7Mo to i64*
  %ln7Mq = load i64, i64* %ln7Mp, !tbaa !2
  %ln7Mm = load i64*, i64** %Hp_Var
  %ln7Mr = getelementptr inbounds i64, i64* %ln7Mm, i32 -3
  store i64 %ln7Mq, i64* %ln7Mr, !tbaa !3
  %ln7Mt = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7Ms = load i64*, i64** %Hp_Var
  %ln7Mu = getelementptr inbounds i64, i64* %ln7Ms, i32 -2
  store i64 %ln7Mt, i64* %ln7Mu, !tbaa !3
  %ln7Mw = load i64*, i64** %Sp_Var
  %ln7Mx = getelementptr inbounds i64, i64* %ln7Mw, i32 4
  %ln7My = bitcast i64* %ln7Mx to i64*
  %ln7Mz = load i64, i64* %ln7My, !tbaa !2
  %ln7Mv = load i64*, i64** %Hp_Var
  %ln7MA = getelementptr inbounds i64, i64* %ln7Mv, i32 -1
  store i64 %ln7Mz, i64* %ln7MA, !tbaa !3
  %ln7MC = load i64*, i64** %Hp_Var
  %ln7MD = getelementptr inbounds i64, i64* %ln7MC, i32 -6
  %ln7ME = ptrtoint i64* %ln7MD to i64
  %ln7MB = load i64*, i64** %Hp_Var
  %ln7MF = getelementptr inbounds i64, i64* %ln7MB, i32 0
  store i64 %ln7ME, i64* %ln7MF, !tbaa !3
  %ln7MH = load i64*, i64** %Hp_Var
  %ln7MI = ptrtoint i64* %ln7MH to i64
  %ln7MJ = add i64 %ln7MI, -14
  store i64 %ln7MJ, i64* %R1_Var
  %ln7MK = load i64*, i64** %Sp_Var
  %ln7ML = getelementptr inbounds i64, i64* %ln7MK, i32 5
  %ln7MM = ptrtoint i64* %ln7ML to i64
  %ln7MN = inttoptr i64 %ln7MM to i64*
  store i64* %ln7MN, i64** %Sp_Var
  %ln7MO = load i64*, i64** %Sp_Var
  %ln7MP = getelementptr inbounds i64, i64* %ln7MO, i32 0
  %ln7MQ = bitcast i64* %ln7MP to i64*
  %ln7MR = load i64, i64* %ln7MQ, !tbaa !2
  %ln7MS = inttoptr i64 %ln7MR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7MT = load i64*, i64** %Sp_Var
  %ln7MU = load i64*, i64** %Hp_Var
  %ln7MV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7MS( i64* %Base_Arg, i64* %ln7MT, i64* %ln7MU, i64 %ln7MV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7FT:
  %ln7MW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln7MW, !tbaa !5
  %ln7MX = load i64, i64* %R1_Var
  store i64 %ln7MX, i64* %R1_Var
  %ln7MY = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7MZ = load i64*, i64** %Sp_Var
  %ln7N0 = load i64*, i64** %Hp_Var
  %ln7N1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7MY( i64* %Base_Arg, i64* %ln7MZ, i64* %ln7N0, i64 %ln7N1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Ey_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ey_info$def to i8*)
define internal ghccc void @c7Ey_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ey_info$def to i64)) to i32),i32 0)}>
{
n7N2:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5cR = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c7Ey
c7Ey:
  %ln7N3 = load i64*, i64** %Hp_Var
  %ln7N4 = getelementptr inbounds i64, i64* %ln7N3, i32 4
  %ln7N5 = ptrtoint i64* %ln7N4 to i64
  %ln7N6 = inttoptr i64 %ln7N5 to i64*
  store i64* %ln7N6, i64** %Hp_Var
  %ln7N7 = load i64*, i64** %Hp_Var
  %ln7N8 = ptrtoint i64* %ln7N7 to i64
  %ln7N9 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Na = bitcast i64* %ln7N9 to i64*
  %ln7Nb = load i64, i64* %ln7Na, !tbaa !5
  %ln7Nc = icmp ugt i64 %ln7N8, %ln7Nb
  %ln7Nd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Nc, i1 0 )
  br i1 %ln7Nd, label %c7FB, label %c7FA
c7FA:
  %ln7Nf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5cZ_info$def to i64
  %ln7Ne = load i64*, i64** %Hp_Var
  %ln7Ng = getelementptr inbounds i64, i64* %ln7Ne, i32 -3
  store i64 %ln7Nf, i64* %ln7Ng, !tbaa !3
  %ln7Ni = load i64*, i64** %Sp_Var
  %ln7Nj = getelementptr inbounds i64, i64* %ln7Ni, i32 2
  %ln7Nk = bitcast i64* %ln7Nj to i64*
  %ln7Nl = load i64, i64* %ln7Nk, !tbaa !2
  %ln7Nh = load i64*, i64** %Hp_Var
  %ln7Nm = getelementptr inbounds i64, i64* %ln7Nh, i32 -1
  store i64 %ln7Nl, i64* %ln7Nm, !tbaa !3
  %ln7Nn = load i64*, i64** %Sp_Var
  %ln7No = getelementptr inbounds i64, i64* %ln7Nn, i32 1
  %ln7Np = bitcast i64* %ln7No to i64*
  %ln7Nq = load i64, i64* %ln7Np, !tbaa !2
  store i64 %ln7Nq, i64* %ls5cR
  %ln7Ns = load i64, i64* %ls5cR
  %ln7Nr = load i64*, i64** %Hp_Var
  %ln7Nt = getelementptr inbounds i64, i64* %ln7Nr, i32 0
  store i64 %ln7Ns, i64* %ln7Nt, !tbaa !3
  %ln7Nv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Fu_info$def to i64
  %ln7Nu = load i64*, i64** %Sp_Var
  %ln7Nw = getelementptr inbounds i64, i64* %ln7Nu, i32 2
  store i64 %ln7Nv, i64* %ln7Nw, !tbaa !2
  %ln7Nx = load i64*, i64** %Hp_Var
  %ln7Ny = getelementptr inbounds i64, i64* %ln7Nx, i32 -3
  %ln7Nz = ptrtoint i64* %ln7Ny to i64
  store i64 %ln7Nz, i64* %R3_Var
  %ln7NA = load i64, i64* %ls5cR
  store i64 %ln7NA, i64* %R2_Var
  %ln7NB = load i64*, i64** %Sp_Var
  %ln7NC = getelementptr inbounds i64, i64* %ln7NB, i32 2
  %ln7ND = ptrtoint i64* %ln7NC to i64
  %ln7NE = inttoptr i64 %ln7ND to i64*
  store i64* %ln7NE, i64** %Sp_Var
  %ln7NF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7NG = load i64*, i64** %Sp_Var
  %ln7NH = load i64*, i64** %Hp_Var
  %ln7NI = load i64, i64* %R2_Var
  %ln7NJ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7NF( i64* %Base_Arg, i64* %ln7NG, i64* %ln7NH, i64 %R1_Arg, i64 %ln7NI, i64 %ln7NJ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7FB:
  %ln7NK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln7NK, !tbaa !5
  %ln7NM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ey_info$def to i64
  %ln7NL = load i64*, i64** %Sp_Var
  %ln7NN = getelementptr inbounds i64, i64* %ln7NL, i32 0
  store i64 %ln7NM, i64* %ln7NN, !tbaa !2
  %ln7NO = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7NP = load i64*, i64** %Sp_Var
  %ln7NQ = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7NO( i64* %Base_Arg, i64* %ln7NP, i64* %ln7NQ, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Fu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Fu_info$def to i8*)
define internal ghccc void @c7Fu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Fu_info$def to i64)) to i32),i32 0)}>
{
n7NR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7Fu
c7Fu:
  %ln7NS = load i64*, i64** %Hp_Var
  %ln7NT = getelementptr inbounds i64, i64* %ln7NS, i32 3
  %ln7NU = ptrtoint i64* %ln7NT to i64
  %ln7NV = inttoptr i64 %ln7NU to i64*
  store i64* %ln7NV, i64** %Hp_Var
  %ln7NW = load i64*, i64** %Hp_Var
  %ln7NX = ptrtoint i64* %ln7NW to i64
  %ln7NY = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7NZ = bitcast i64* %ln7NY to i64*
  %ln7O0 = load i64, i64* %ln7NZ, !tbaa !5
  %ln7O1 = icmp ugt i64 %ln7NX, %ln7O0
  %ln7O2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7O1, i1 0 )
  br i1 %ln7O2, label %c7FE, label %c7FD
c7FD:
  %ln7O4 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7O3 = load i64*, i64** %Hp_Var
  %ln7O5 = getelementptr inbounds i64, i64* %ln7O3, i32 -2
  store i64 %ln7O4, i64* %ln7O5, !tbaa !3
  %ln7O7 = load i64*, i64** %Sp_Var
  %ln7O8 = getelementptr inbounds i64, i64* %ln7O7, i32 1
  %ln7O9 = bitcast i64* %ln7O8 to i64*
  %ln7Oa = load i64, i64* %ln7O9, !tbaa !2
  %ln7O6 = load i64*, i64** %Hp_Var
  %ln7Ob = getelementptr inbounds i64, i64* %ln7O6, i32 -1
  store i64 %ln7Oa, i64* %ln7Ob, !tbaa !3
  %ln7Od = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7Oe = add i64 %ln7Od, 1
  %ln7Oc = load i64*, i64** %Hp_Var
  %ln7Of = getelementptr inbounds i64, i64* %ln7Oc, i32 0
  store i64 %ln7Oe, i64* %ln7Of, !tbaa !3
  %ln7Og = load i64, i64* %R1_Var
  store i64 %ln7Og, i64* %R3_Var
  %ln7Oi = load i64*, i64** %Hp_Var
  %ln7Oj = ptrtoint i64* %ln7Oi to i64
  %ln7Ok = add i64 %ln7Oj, -14
  store i64 %ln7Ok, i64* %R2_Var
  %ln7Ol = load i64*, i64** %Sp_Var
  %ln7Om = getelementptr inbounds i64, i64* %ln7Ol, i32 2
  %ln7On = ptrtoint i64* %ln7Om to i64
  %ln7Oo = inttoptr i64 %ln7On to i64*
  store i64* %ln7Oo, i64** %Sp_Var
  %ln7Op = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Oq = load i64*, i64** %Sp_Var
  %ln7Or = load i64*, i64** %Hp_Var
  %ln7Os = load i64, i64* %R1_Var
  %ln7Ot = load i64, i64* %R2_Var
  %ln7Ou = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Op( i64* %Base_Arg, i64* %ln7Oq, i64* %ln7Or, i64 %ln7Os, i64 %ln7Ot, i64 %ln7Ou, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7FE:
  %ln7Ov = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7Ov, !tbaa !5
  %ln7Ow = load i64, i64* %R1_Var
  store i64 %ln7Ow, i64* %R1_Var
  %ln7Ox = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Oy = load i64*, i64** %Sp_Var
  %ln7Oz = load i64*, i64** %Hp_Var
  %ln7OA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ox( i64* %Base_Arg, i64* %ln7Oy, i64* %ln7Oz, i64 %ln7OA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_list_closure_struct = type <{i64, i64, i64, i64}>
@Main_list_closure$def = internal global %Main_list_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @Main_list_closure to i64),i64 2), i64 3}>
@Main_list_closure = alias i8, bitcast (%Main_list_closure_struct* @Main_list_closure$def to i8*)
%_u7OK_srt_struct = type <{i64, i64, i64, i64}>
%Main_tree_closure_struct = type <{i64, i64, i64, i64}>
%Main_forest_closure_struct = type <{i64, i64, i64, i64}>
@_u7OK_srt$def = internal global %_u7OK_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @Main_tree_closure to i64), i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64), i64 0}>
@_u7OK_srt = internal alias i8, bitcast (%_u7OK_srt_struct* @_u7OK_srt$def to i8*)
@Main_tree_closure$def = internal global %Main_tree_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_integral1_closure_struct* @Main_integral1_closure$def to i64),i64 1), i64 ptrtoint (i8* @Main_forest_closure to i64), i64 0}>
@Main_tree_closure = alias i8, bitcast (%Main_tree_closure_struct* @Main_tree_closure$def to i8*)
@Main_forest_closure$def = internal global %Main_forest_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_forest_info$def to i64), i64 0, i64 0, i64 0}>
@Main_forest_closure = alias i8, bitcast (%Main_forest_closure_struct* @Main_forest_closure$def to i8*)
@Main_forest_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_forest_info$def to i8*)
define ghccc void @Main_forest_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u7OK_srt_struct* @_u7OK_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_forest_info$def to i64)) to i32),i32 0)}>
{
n7OL:
  %lc7OE = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7OH
c7OH:
  %ln7OM = load i64*, i64** %Sp_Var
  %ln7ON = getelementptr inbounds i64, i64* %ln7OM, i32 -2
  %ln7OO = ptrtoint i64* %ln7ON to i64
  %ln7OP = icmp ult i64 %ln7OO, %SpLim_Arg
  %ln7OQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7OP, i1 0 )
  br i1 %ln7OQ, label %c7OI, label %c7OJ
c7OJ:
  %ln7OR = ptrtoint i64* %Base_Arg to i64
  %ln7OS = inttoptr i64 %ln7OR to i8*
  %ln7OT = load i64, i64* %R1_Var
  %ln7OU = inttoptr i64 %ln7OT to i8*
  %ln7OV = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln7OW = call ccc i8* (i8*, i8*) %ln7OV( i8* %ln7OS, i8* %ln7OU ) nounwind
  %ln7OX = ptrtoint i8* %ln7OW to i64
  store i64 %ln7OX, i64* %lc7OE
  %ln7OY = load i64, i64* %lc7OE
  %ln7OZ = icmp eq i64 %ln7OY, 0
  br i1 %ln7OZ, label %c7OG, label %c7OF
c7OF:
  %ln7P1 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln7P0 = load i64*, i64** %Sp_Var
  %ln7P2 = getelementptr inbounds i64, i64* %ln7P0, i32 -2
  store i64 %ln7P1, i64* %ln7P2, !tbaa !2
  %ln7P4 = load i64, i64* %lc7OE
  %ln7P3 = load i64*, i64** %Sp_Var
  %ln7P5 = getelementptr inbounds i64, i64* %ln7P3, i32 -1
  store i64 %ln7P4, i64* %ln7P5, !tbaa !2
  %ln7P6 = ptrtoint %Main_tree_closure_struct* @Main_tree_closure$def to i64
  %ln7P7 = add i64 %ln7P6, 2
  store i64 %ln7P7, i64* %R3_Var
  %ln7P8 = ptrtoint %Main_list_closure_struct* @Main_list_closure$def to i64
  %ln7P9 = add i64 %ln7P8, 2
  store i64 %ln7P9, i64* %R2_Var
  %ln7Pa = load i64*, i64** %Sp_Var
  %ln7Pb = getelementptr inbounds i64, i64* %ln7Pa, i32 -2
  %ln7Pc = ptrtoint i64* %ln7Pb to i64
  %ln7Pd = inttoptr i64 %ln7Pc to i64*
  store i64* %ln7Pd, i64** %Sp_Var
  %ln7Pe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Pf = load i64*, i64** %Sp_Var
  %ln7Pg = load i64, i64* %R1_Var
  %ln7Ph = load i64, i64* %R2_Var
  %ln7Pi = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Pe( i64* %Base_Arg, i64* %ln7Pf, i64* %Hp_Arg, i64 %ln7Pg, i64 %ln7Ph, i64 %ln7Pi, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7OG:
  %ln7Pk = load i64, i64* %R1_Var
  %ln7Pl = inttoptr i64 %ln7Pk to i64*
  %ln7Pm = load i64, i64* %ln7Pl, !tbaa !4
  %ln7Pn = inttoptr i64 %ln7Pm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Po = load i64*, i64** %Sp_Var
  %ln7Pp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Pn( i64* %Base_Arg, i64* %ln7Po, i64* %Hp_Arg, i64 %ln7Pp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7OI:
  %ln7Pq = load i64, i64* %R1_Var
  store i64 %ln7Pq, i64* %R1_Var
  %ln7Pr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7Ps = bitcast i64* %ln7Pr to i64*
  %ln7Pt = load i64, i64* %ln7Ps, !tbaa !5
  %ln7Pu = inttoptr i64 %ln7Pt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Pv = load i64*, i64** %Sp_Var
  %ln7Pw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Pu( i64* %Base_Arg, i64* %ln7Pv, i64* %Hp_Arg, i64 %ln7Pw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u7PG_srt_struct = type <{i64, i64, i64, i64}>
%Main_ts_closure_struct = type <{i64, i64, i64, i64}>
%Main_ts1_closure_struct = type <{i64, i64, i64, i64}>
@_u7PG_srt$def = internal global %_u7PG_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @Main_ts_closure to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64), i64 0}>
@_u7PG_srt = internal alias i8, bitcast (%_u7PG_srt_struct* @_u7PG_srt$def to i8*)
@Main_ts_closure$def = internal global %Main_ts_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64),i64 1), i64 ptrtoint (i8* @Main_ts1_closure to i64), i64 0}>
@Main_ts_closure = alias i8, bitcast (%Main_ts_closure_struct* @Main_ts_closure$def to i8*)
@Main_ts1_closure$def = internal global %Main_ts1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ts1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_ts1_closure = alias i8, bitcast (%Main_ts1_closure_struct* @Main_ts1_closure$def to i8*)
@Main_ts1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ts1_info$def to i8*)
define ghccc void @Main_ts1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u7PG_srt_struct* @_u7PG_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ts1_info$def to i64)) to i32),i32 0)}>
{
n7PH:
  %lc7PA = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7PD
c7PD:
  %ln7PI = load i64*, i64** %Sp_Var
  %ln7PJ = getelementptr inbounds i64, i64* %ln7PI, i32 -2
  %ln7PK = ptrtoint i64* %ln7PJ to i64
  %ln7PL = icmp ult i64 %ln7PK, %SpLim_Arg
  %ln7PM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7PL, i1 0 )
  br i1 %ln7PM, label %c7PE, label %c7PF
c7PF:
  %ln7PN = ptrtoint i64* %Base_Arg to i64
  %ln7PO = inttoptr i64 %ln7PN to i8*
  %ln7PP = load i64, i64* %R1_Var
  %ln7PQ = inttoptr i64 %ln7PP to i8*
  %ln7PR = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln7PS = call ccc i8* (i8*, i8*) %ln7PR( i8* %ln7PO, i8* %ln7PQ ) nounwind
  %ln7PT = ptrtoint i8* %ln7PS to i64
  store i64 %ln7PT, i64* %lc7PA
  %ln7PU = load i64, i64* %lc7PA
  %ln7PV = icmp eq i64 %ln7PU, 0
  br i1 %ln7PV, label %c7PC, label %c7PB
c7PB:
  %ln7PX = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln7PW = load i64*, i64** %Sp_Var
  %ln7PY = getelementptr inbounds i64, i64* %ln7PW, i32 -2
  store i64 %ln7PX, i64* %ln7PY, !tbaa !2
  %ln7Q0 = load i64, i64* %lc7PA
  %ln7PZ = load i64*, i64** %Sp_Var
  %ln7Q1 = getelementptr inbounds i64, i64* %ln7PZ, i32 -1
  store i64 %ln7Q0, i64* %ln7Q1, !tbaa !2
  %ln7Q2 = ptrtoint %Main_ts_closure_struct* @Main_ts_closure$def to i64
  %ln7Q3 = add i64 %ln7Q2, 2
  store i64 %ln7Q3, i64* %R3_Var
  %ln7Q4 = ptrtoint %Main_ts_closure_struct* @Main_ts_closure$def to i64
  %ln7Q5 = add i64 %ln7Q4, 2
  store i64 %ln7Q5, i64* %R2_Var
  %ln7Q6 = load i64*, i64** %Sp_Var
  %ln7Q7 = getelementptr inbounds i64, i64* %ln7Q6, i32 -2
  %ln7Q8 = ptrtoint i64* %ln7Q7 to i64
  %ln7Q9 = inttoptr i64 %ln7Q8 to i64*
  store i64* %ln7Q9, i64** %Sp_Var
  %ln7Qa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Qb = load i64*, i64** %Sp_Var
  %ln7Qc = load i64, i64* %R1_Var
  %ln7Qd = load i64, i64* %R2_Var
  %ln7Qe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Qa( i64* %Base_Arg, i64* %ln7Qb, i64* %Hp_Arg, i64 %ln7Qc, i64 %ln7Qd, i64 %ln7Qe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7PC:
  %ln7Qg = load i64, i64* %R1_Var
  %ln7Qh = inttoptr i64 %ln7Qg to i64*
  %ln7Qi = load i64, i64* %ln7Qh, !tbaa !4
  %ln7Qj = inttoptr i64 %ln7Qi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Qk = load i64*, i64** %Sp_Var
  %ln7Ql = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Qj( i64* %Base_Arg, i64* %ln7Qk, i64* %Hp_Arg, i64 %ln7Ql, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7PE:
  %ln7Qm = load i64, i64* %R1_Var
  store i64 %ln7Qm, i64* %R1_Var
  %ln7Qn = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7Qo = bitcast i64* %ln7Qn to i64*
  %ln7Qp = load i64, i64* %ln7Qo, !tbaa !5
  %ln7Qq = inttoptr i64 %ln7Qp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Qr = load i64*, i64** %Sp_Var
  %ln7Qs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Qq( i64* %Base_Arg, i64* %ln7Qr, i64* %Hp_Arg, i64 %ln7Qs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_x_closure_struct = type <{i64}>
@Main_x_closure$def = internal global %Main_x_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_x_info$def to i64)}>
@Main_x_closure = alias i8, bitcast (%Main_x_closure_struct* @Main_x_closure$def to i8*)
@s583_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s583_info$def to i8*)
define internal ghccc void @s583_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7QS:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7QB
c7QB:
  %ln7QT = load i64*, i64** %Sp_Var
  %ln7QU = getelementptr inbounds i64, i64* %ln7QT, i32 -4
  %ln7QV = ptrtoint i64* %ln7QU to i64
  %ln7QW = icmp ult i64 %ln7QV, %SpLim_Arg
  %ln7QX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7QW, i1 0 )
  br i1 %ln7QX, label %c7QC, label %c7QD
c7QD:
  %ln7QZ = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7QY = load i64*, i64** %Sp_Var
  %ln7R0 = getelementptr inbounds i64, i64* %ln7QY, i32 -2
  store i64 %ln7QZ, i64* %ln7R0, !tbaa !2
  %ln7R2 = load i64, i64* %R1_Var
  %ln7R1 = load i64*, i64** %Sp_Var
  %ln7R3 = getelementptr inbounds i64, i64* %ln7R1, i32 -1
  store i64 %ln7R2, i64* %ln7R3, !tbaa !2
  %ln7R6 = load i64, i64* %R1_Var
  %ln7R7 = add i64 %ln7R6, 16
  %ln7R8 = inttoptr i64 %ln7R7 to i64*
  %ln7R9 = load i64, i64* %ln7R8, !tbaa !4
  store i64 %ln7R9, i64* %R2_Var
  %ln7Rb = ptrtoint i8* @stg_ap_p_info to i64
  %ln7Ra = load i64*, i64** %Sp_Var
  %ln7Rc = getelementptr inbounds i64, i64* %ln7Ra, i32 -4
  store i64 %ln7Rb, i64* %ln7Rc, !tbaa !2
  %ln7Re = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln7Rf = add i64 %ln7Re, 1
  %ln7Rd = load i64*, i64** %Sp_Var
  %ln7Rg = getelementptr inbounds i64, i64* %ln7Rd, i32 -3
  store i64 %ln7Rf, i64* %ln7Rg, !tbaa !2
  %ln7Rh = load i64*, i64** %Sp_Var
  %ln7Ri = getelementptr inbounds i64, i64* %ln7Rh, i32 -4
  %ln7Rj = ptrtoint i64* %ln7Ri to i64
  %ln7Rk = inttoptr i64 %ln7Rj to i64*
  store i64* %ln7Rk, i64** %Sp_Var
  %ln7Rl = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Rm = load i64*, i64** %Sp_Var
  %ln7Rn = load i64, i64* %R1_Var
  %ln7Ro = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Rl( i64* %Base_Arg, i64* %ln7Rm, i64* %Hp_Arg, i64 %ln7Rn, i64 %ln7Ro, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7QC:
  %ln7Rp = load i64, i64* %R1_Var
  store i64 %ln7Rp, i64* %R1_Var
  %ln7Rq = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7Rr = bitcast i64* %ln7Rq to i64*
  %ln7Rs = load i64, i64* %ln7Rr, !tbaa !5
  %ln7Rt = inttoptr i64 %ln7Rs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Ru = load i64*, i64** %Sp_Var
  %ln7Rv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Rt( i64* %Base_Arg, i64* %ln7Ru, i64* %Hp_Arg, i64 %ln7Rv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s582_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s582_info$def to i8*)
define internal ghccc void @s582_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7Rw:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7QJ
c7QJ:
  %ln7Rx = load i64*, i64** %Sp_Var
  %ln7Ry = getelementptr inbounds i64, i64* %ln7Rx, i32 -4
  %ln7Rz = ptrtoint i64* %ln7Ry to i64
  %ln7RA = icmp ult i64 %ln7Rz, %SpLim_Arg
  %ln7RB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7RA, i1 0 )
  br i1 %ln7RB, label %c7QK, label %c7QL
c7QL:
  %ln7RD = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7RC = load i64*, i64** %Sp_Var
  %ln7RE = getelementptr inbounds i64, i64* %ln7RC, i32 -2
  store i64 %ln7RD, i64* %ln7RE, !tbaa !2
  %ln7RG = load i64, i64* %R1_Var
  %ln7RF = load i64*, i64** %Sp_Var
  %ln7RH = getelementptr inbounds i64, i64* %ln7RF, i32 -1
  store i64 %ln7RG, i64* %ln7RH, !tbaa !2
  %ln7RK = load i64, i64* %R1_Var
  %ln7RL = add i64 %ln7RK, 16
  %ln7RM = inttoptr i64 %ln7RL to i64*
  %ln7RN = load i64, i64* %ln7RM, !tbaa !4
  store i64 %ln7RN, i64* %R2_Var
  %ln7RP = ptrtoint i8* @stg_ap_p_info to i64
  %ln7RO = load i64*, i64** %Sp_Var
  %ln7RQ = getelementptr inbounds i64, i64* %ln7RO, i32 -4
  store i64 %ln7RP, i64* %ln7RQ, !tbaa !2
  %ln7RS = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln7RT = add i64 %ln7RS, 1
  %ln7RR = load i64*, i64** %Sp_Var
  %ln7RU = getelementptr inbounds i64, i64* %ln7RR, i32 -3
  store i64 %ln7RT, i64* %ln7RU, !tbaa !2
  %ln7RV = load i64*, i64** %Sp_Var
  %ln7RW = getelementptr inbounds i64, i64* %ln7RV, i32 -4
  %ln7RX = ptrtoint i64* %ln7RW to i64
  %ln7RY = inttoptr i64 %ln7RX to i64*
  store i64* %ln7RY, i64** %Sp_Var
  %ln7RZ = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7S0 = load i64*, i64** %Sp_Var
  %ln7S1 = load i64, i64* %R1_Var
  %ln7S2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7RZ( i64* %Base_Arg, i64* %ln7S0, i64* %Hp_Arg, i64 %ln7S1, i64 %ln7S2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7QK:
  %ln7S3 = load i64, i64* %R1_Var
  store i64 %ln7S3, i64* %R1_Var
  %ln7S4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7S5 = bitcast i64* %ln7S4 to i64*
  %ln7S6 = load i64, i64* %ln7S5, !tbaa !5
  %ln7S7 = inttoptr i64 %ln7S6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7S8 = load i64*, i64** %Sp_Var
  %ln7S9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7S7( i64* %Base_Arg, i64* %ln7S8, i64* %Hp_Arg, i64 %ln7S9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_x_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_x_info$def to i8*)
define ghccc void @Main_x_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n7Sa:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7QN
c7QN:
  %ln7Sb = load i64*, i64** %Hp_Var
  %ln7Sc = getelementptr inbounds i64, i64* %ln7Sb, i32 12
  %ln7Sd = ptrtoint i64* %ln7Sc to i64
  %ln7Se = inttoptr i64 %ln7Sd to i64*
  store i64* %ln7Se, i64** %Hp_Var
  %ln7Sf = load i64*, i64** %Hp_Var
  %ln7Sg = ptrtoint i64* %ln7Sf to i64
  %ln7Sh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Si = bitcast i64* %ln7Sh to i64*
  %ln7Sj = load i64, i64* %ln7Si, !tbaa !5
  %ln7Sk = icmp ugt i64 %ln7Sg, %ln7Sj
  %ln7Sl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Sk, i1 0 )
  br i1 %ln7Sl, label %c7QR, label %c7QQ
c7QQ:
  %ln7Sn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s583_info$def to i64
  %ln7Sm = load i64*, i64** %Hp_Var
  %ln7So = getelementptr inbounds i64, i64* %ln7Sm, i32 -11
  store i64 %ln7Sn, i64* %ln7So, !tbaa !3
  %ln7Sq = load i64, i64* %R2_Var
  %ln7Sp = load i64*, i64** %Hp_Var
  %ln7Sr = getelementptr inbounds i64, i64* %ln7Sp, i32 -9
  store i64 %ln7Sq, i64* %ln7Sr, !tbaa !3
  %ln7St = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7Ss = load i64*, i64** %Hp_Var
  %ln7Su = getelementptr inbounds i64, i64* %ln7Ss, i32 -8
  store i64 %ln7St, i64* %ln7Su, !tbaa !3
  %ln7Sw = load i64*, i64** %Hp_Var
  %ln7Sx = getelementptr inbounds i64, i64* %ln7Sw, i32 -11
  %ln7Sy = ptrtoint i64* %ln7Sx to i64
  %ln7Sv = load i64*, i64** %Hp_Var
  %ln7Sz = getelementptr inbounds i64, i64* %ln7Sv, i32 -7
  store i64 %ln7Sy, i64* %ln7Sz, !tbaa !3
  %ln7SB = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7SC = add i64 %ln7SB, 1
  %ln7SA = load i64*, i64** %Hp_Var
  %ln7SD = getelementptr inbounds i64, i64* %ln7SA, i32 -6
  store i64 %ln7SC, i64* %ln7SD, !tbaa !3
  %ln7SF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s582_info$def to i64
  %ln7SE = load i64*, i64** %Hp_Var
  %ln7SG = getelementptr inbounds i64, i64* %ln7SE, i32 -5
  store i64 %ln7SF, i64* %ln7SG, !tbaa !3
  %ln7SI = load i64, i64* %R2_Var
  %ln7SH = load i64*, i64** %Hp_Var
  %ln7SJ = getelementptr inbounds i64, i64* %ln7SH, i32 -3
  store i64 %ln7SI, i64* %ln7SJ, !tbaa !3
  %ln7SL = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7SK = load i64*, i64** %Hp_Var
  %ln7SM = getelementptr inbounds i64, i64* %ln7SK, i32 -2
  store i64 %ln7SL, i64* %ln7SM, !tbaa !3
  %ln7SO = load i64*, i64** %Hp_Var
  %ln7SP = getelementptr inbounds i64, i64* %ln7SO, i32 -5
  %ln7SQ = ptrtoint i64* %ln7SP to i64
  %ln7SN = load i64*, i64** %Hp_Var
  %ln7SR = getelementptr inbounds i64, i64* %ln7SN, i32 -1
  store i64 %ln7SQ, i64* %ln7SR, !tbaa !3
  %ln7SU = load i64*, i64** %Hp_Var
  %ln7SV = ptrtoint i64* %ln7SU to i64
  %ln7SW = add i64 %ln7SV, -62
  %ln7SS = load i64*, i64** %Hp_Var
  %ln7SX = getelementptr inbounds i64, i64* %ln7SS, i32 0
  store i64 %ln7SW, i64* %ln7SX, !tbaa !3
  %ln7SZ = load i64*, i64** %Hp_Var
  %ln7T0 = ptrtoint i64* %ln7SZ to i64
  %ln7T1 = add i64 %ln7T0, -14
  store i64 %ln7T1, i64* %R1_Var
  %ln7T2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln7T3 = bitcast i64* %ln7T2 to i64*
  %ln7T4 = load i64, i64* %ln7T3, !tbaa !2
  %ln7T5 = inttoptr i64 %ln7T4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7T6 = load i64*, i64** %Hp_Var
  %ln7T7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7T5( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7T6, i64 %ln7T7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7QR:
  %ln7T8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln7T8, !tbaa !5
  %ln7T9 = load i64, i64* %R2_Var
  store i64 %ln7T9, i64* %R2_Var
  %ln7Ta = ptrtoint %Main_x_closure_struct* @Main_x_closure$def to i64
  store i64 %ln7Ta, i64* %R1_Var
  %ln7Tb = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7Tc = bitcast i64* %ln7Tb to i64*
  %ln7Td = load i64, i64* %ln7Tc, !tbaa !5
  %ln7Te = inttoptr i64 %ln7Td to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Tf = load i64*, i64** %Hp_Var
  %ln7Tg = load i64, i64* %R1_Var
  %ln7Th = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Te( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7Tf, i64 %ln7Tg, i64 %ln7Th, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPszuzdczt_closure_struct = type <{i64}>
@Main_zdfNumPszuzdczt_closure$def = internal global %Main_zdfNumPszuzdczt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to i64)}>
@Main_zdfNumPszuzdczt_closure = alias i8, bitcast (%Main_zdfNumPszuzdczt_closure_struct* @Main_zdfNumPszuzdczt_closure$def to i8*)
@s59t_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59t_info$def to i8*)
define internal ghccc void @s59t_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7UT:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7TG
c7TG:
  %ln7UU = load i64*, i64** %Sp_Var
  %ln7UV = getelementptr inbounds i64, i64* %ln7UU, i32 -4
  %ln7UW = ptrtoint i64* %ln7UV to i64
  %ln7UX = icmp ult i64 %ln7UW, %SpLim_Arg
  %ln7UY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7UX, i1 0 )
  br i1 %ln7UY, label %c7TH, label %c7TI
c7TI:
  %ln7V0 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7UZ = load i64*, i64** %Sp_Var
  %ln7V1 = getelementptr inbounds i64, i64* %ln7UZ, i32 -2
  store i64 %ln7V0, i64* %ln7V1, !tbaa !2
  %ln7V3 = load i64, i64* %R1_Var
  %ln7V2 = load i64*, i64** %Sp_Var
  %ln7V4 = getelementptr inbounds i64, i64* %ln7V2, i32 -1
  store i64 %ln7V3, i64* %ln7V4, !tbaa !2
  %ln7V7 = load i64, i64* %R1_Var
  %ln7V8 = add i64 %ln7V7, 16
  %ln7V9 = inttoptr i64 %ln7V8 to i64*
  %ln7Va = load i64, i64* %ln7V9, !tbaa !4
  store i64 %ln7Va, i64* %R2_Var
  %ln7Vc = ptrtoint i8* @stg_ap_p_info to i64
  %ln7Vb = load i64*, i64** %Sp_Var
  %ln7Vd = getelementptr inbounds i64, i64* %ln7Vb, i32 -4
  store i64 %ln7Vc, i64* %ln7Vd, !tbaa !2
  %ln7Vf = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln7Vg = add i64 %ln7Vf, 1
  %ln7Ve = load i64*, i64** %Sp_Var
  %ln7Vh = getelementptr inbounds i64, i64* %ln7Ve, i32 -3
  store i64 %ln7Vg, i64* %ln7Vh, !tbaa !2
  %ln7Vi = load i64*, i64** %Sp_Var
  %ln7Vj = getelementptr inbounds i64, i64* %ln7Vi, i32 -4
  %ln7Vk = ptrtoint i64* %ln7Vj to i64
  %ln7Vl = inttoptr i64 %ln7Vk to i64*
  store i64* %ln7Vl, i64** %Sp_Var
  %ln7Vm = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Vn = load i64*, i64** %Sp_Var
  %ln7Vo = load i64, i64* %R1_Var
  %ln7Vp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Vm( i64* %Base_Arg, i64* %ln7Vn, i64* %Hp_Arg, i64 %ln7Vo, i64 %ln7Vp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7TH:
  %ln7Vq = load i64, i64* %R1_Var
  store i64 %ln7Vq, i64* %R1_Var
  %ln7Vr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7Vs = bitcast i64* %ln7Vr to i64*
  %ln7Vt = load i64, i64* %ln7Vs, !tbaa !5
  %ln7Vu = inttoptr i64 %ln7Vt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Vv = load i64*, i64** %Sp_Var
  %ln7Vw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Vu( i64* %Base_Arg, i64* %ln7Vv, i64* %Hp_Arg, i64 %ln7Vw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59s_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59s_info$def to i8*)
define internal ghccc void @s59s_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n7Vx:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7TO
c7TO:
  %ln7Vy = load i64*, i64** %Sp_Var
  %ln7Vz = getelementptr inbounds i64, i64* %ln7Vy, i32 -4
  %ln7VA = ptrtoint i64* %ln7Vz to i64
  %ln7VB = icmp ult i64 %ln7VA, %SpLim_Arg
  %ln7VC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7VB, i1 0 )
  br i1 %ln7VC, label %c7TP, label %c7TQ
c7TQ:
  %ln7VE = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7VD = load i64*, i64** %Sp_Var
  %ln7VF = getelementptr inbounds i64, i64* %ln7VD, i32 -2
  store i64 %ln7VE, i64* %ln7VF, !tbaa !2
  %ln7VH = load i64, i64* %R1_Var
  %ln7VG = load i64*, i64** %Sp_Var
  %ln7VI = getelementptr inbounds i64, i64* %ln7VG, i32 -1
  store i64 %ln7VH, i64* %ln7VI, !tbaa !2
  %ln7VL = load i64, i64* %R1_Var
  %ln7VM = add i64 %ln7VL, 16
  %ln7VN = inttoptr i64 %ln7VM to i64*
  %ln7VO = load i64, i64* %ln7VN, !tbaa !4
  store i64 %ln7VO, i64* %R2_Var
  %ln7VQ = ptrtoint i8* @stg_ap_p_info to i64
  %ln7VP = load i64*, i64** %Sp_Var
  %ln7VR = getelementptr inbounds i64, i64* %ln7VP, i32 -4
  store i64 %ln7VQ, i64* %ln7VR, !tbaa !2
  %ln7VT = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln7VU = add i64 %ln7VT, 1
  %ln7VS = load i64*, i64** %Sp_Var
  %ln7VV = getelementptr inbounds i64, i64* %ln7VS, i32 -3
  store i64 %ln7VU, i64* %ln7VV, !tbaa !2
  %ln7VW = load i64*, i64** %Sp_Var
  %ln7VX = getelementptr inbounds i64, i64* %ln7VW, i32 -4
  %ln7VY = ptrtoint i64* %ln7VX to i64
  %ln7VZ = inttoptr i64 %ln7VY to i64*
  store i64* %ln7VZ, i64** %Sp_Var
  %ln7W0 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7W1 = load i64*, i64** %Sp_Var
  %ln7W2 = load i64, i64* %R1_Var
  %ln7W3 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7W0( i64* %Base_Arg, i64* %ln7W1, i64* %Hp_Arg, i64 %ln7W2, i64 %ln7W3, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7TP:
  %ln7W4 = load i64, i64* %R1_Var
  store i64 %ln7W4, i64* %R1_Var
  %ln7W5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7W6 = bitcast i64* %ln7W5 to i64*
  %ln7W7 = load i64, i64* %ln7W6, !tbaa !5
  %ln7W8 = inttoptr i64 %ln7W7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7W9 = load i64*, i64** %Sp_Var
  %ln7Wa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7W8( i64* %Base_Arg, i64* %ln7W9, i64* %Hp_Arg, i64 %ln7Wa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59y_info$def to i8*)
define internal ghccc void @s59y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
n7Wb:
  %ls59y = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls59f = alloca i64, i32 1
  %ls59j = alloca i64, i32 1
  %ls59n = alloca i64, i32 1
  %ls59m = alloca i64, i32 1
  %ls59k = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7TU
c7TU:
  %ln7Wc = load i64, i64* %R1_Var
  store i64 %ln7Wc, i64* %ls59y
  %ln7Wd = load i64*, i64** %Sp_Var
  %ln7We = getelementptr inbounds i64, i64* %ln7Wd, i32 -8
  %ln7Wf = ptrtoint i64* %ln7We to i64
  %ln7Wg = icmp ult i64 %ln7Wf, %SpLim_Arg
  %ln7Wh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Wg, i1 0 )
  br i1 %ln7Wh, label %c7Ua, label %c7Ub
c7Ub:
  %ln7Wi = load i64*, i64** %Hp_Var
  %ln7Wj = getelementptr inbounds i64, i64* %ln7Wi, i32 12
  %ln7Wk = ptrtoint i64* %ln7Wj to i64
  %ln7Wl = inttoptr i64 %ln7Wk to i64*
  store i64* %ln7Wl, i64** %Hp_Var
  %ln7Wm = load i64*, i64** %Hp_Var
  %ln7Wn = ptrtoint i64* %ln7Wm to i64
  %ln7Wo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Wp = bitcast i64* %ln7Wo to i64*
  %ln7Wq = load i64, i64* %ln7Wp, !tbaa !5
  %ln7Wr = icmp ugt i64 %ln7Wn, %ln7Wq
  %ln7Ws = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Wr, i1 0 )
  br i1 %ln7Ws, label %c7Ud, label %c7Uc
c7Uc:
  %ln7Wu = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7Wt = load i64*, i64** %Sp_Var
  %ln7Wv = getelementptr inbounds i64, i64* %ln7Wt, i32 -2
  store i64 %ln7Wu, i64* %ln7Wv, !tbaa !2
  %ln7Wx = load i64, i64* %ls59y
  %ln7Ww = load i64*, i64** %Sp_Var
  %ln7Wy = getelementptr inbounds i64, i64* %ln7Ww, i32 -1
  store i64 %ln7Wx, i64* %ln7Wy, !tbaa !2
  %ln7Wz = load i64, i64* %ls59y
  %ln7WA = add i64 %ln7Wz, 16
  %ln7WB = inttoptr i64 %ln7WA to i64*
  %ln7WC = load i64, i64* %ln7WB, !tbaa !1
  store i64 %ln7WC, i64* %ls59f
  %ln7WD = load i64, i64* %ls59y
  %ln7WE = add i64 %ln7WD, 24
  %ln7WF = inttoptr i64 %ln7WE to i64*
  %ln7WG = load i64, i64* %ln7WF, !tbaa !1
  store i64 %ln7WG, i64* %ls59j
  %ln7WH = load i64, i64* %ls59y
  %ln7WI = add i64 %ln7WH, 32
  %ln7WJ = inttoptr i64 %ln7WI to i64*
  %ln7WK = load i64, i64* %ln7WJ, !tbaa !1
  store i64 %ln7WK, i64* %ls59n
  %ln7WL = load i64, i64* %ls59y
  %ln7WM = add i64 %ln7WL, 40
  %ln7WN = inttoptr i64 %ln7WM to i64*
  %ln7WO = load i64, i64* %ln7WN, !tbaa !1
  store i64 %ln7WO, i64* %ls59m
  %ln7WP = load i64, i64* %ls59y
  %ln7WQ = add i64 %ln7WP, 48
  %ln7WR = inttoptr i64 %ln7WQ to i64*
  %ln7WS = load i64, i64* %ln7WR, !tbaa !1
  store i64 %ln7WS, i64* %ls59k
  %ln7WU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59t_info$def to i64
  %ln7WT = load i64*, i64** %Hp_Var
  %ln7WV = getelementptr inbounds i64, i64* %ln7WT, i32 -11
  store i64 %ln7WU, i64* %ln7WV, !tbaa !3
  %ln7WX = load i64, i64* %ls59f
  %ln7WW = load i64*, i64** %Hp_Var
  %ln7WY = getelementptr inbounds i64, i64* %ln7WW, i32 -9
  store i64 %ln7WX, i64* %ln7WY, !tbaa !3
  %ln7X0 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7WZ = load i64*, i64** %Hp_Var
  %ln7X1 = getelementptr inbounds i64, i64* %ln7WZ, i32 -8
  store i64 %ln7X0, i64* %ln7X1, !tbaa !3
  %ln7X3 = load i64*, i64** %Hp_Var
  %ln7X4 = getelementptr inbounds i64, i64* %ln7X3, i32 -11
  %ln7X5 = ptrtoint i64* %ln7X4 to i64
  %ln7X2 = load i64*, i64** %Hp_Var
  %ln7X6 = getelementptr inbounds i64, i64* %ln7X2, i32 -7
  store i64 %ln7X5, i64* %ln7X6, !tbaa !3
  %ln7X8 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln7X9 = add i64 %ln7X8, 1
  %ln7X7 = load i64*, i64** %Hp_Var
  %ln7Xa = getelementptr inbounds i64, i64* %ln7X7, i32 -6
  store i64 %ln7X9, i64* %ln7Xa, !tbaa !3
  %ln7Xc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59s_info$def to i64
  %ln7Xb = load i64*, i64** %Hp_Var
  %ln7Xd = getelementptr inbounds i64, i64* %ln7Xb, i32 -5
  store i64 %ln7Xc, i64* %ln7Xd, !tbaa !3
  %ln7Xf = load i64, i64* %ls59f
  %ln7Xe = load i64*, i64** %Hp_Var
  %ln7Xg = getelementptr inbounds i64, i64* %ln7Xe, i32 -3
  store i64 %ln7Xf, i64* %ln7Xg, !tbaa !3
  %ln7Xi = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln7Xh = load i64*, i64** %Hp_Var
  %ln7Xj = getelementptr inbounds i64, i64* %ln7Xh, i32 -2
  store i64 %ln7Xi, i64* %ln7Xj, !tbaa !3
  %ln7Xl = load i64*, i64** %Hp_Var
  %ln7Xm = getelementptr inbounds i64, i64* %ln7Xl, i32 -5
  %ln7Xn = ptrtoint i64* %ln7Xm to i64
  %ln7Xk = load i64*, i64** %Hp_Var
  %ln7Xo = getelementptr inbounds i64, i64* %ln7Xk, i32 -1
  store i64 %ln7Xn, i64* %ln7Xo, !tbaa !3
  %ln7Xr = load i64*, i64** %Hp_Var
  %ln7Xs = ptrtoint i64* %ln7Xr to i64
  %ln7Xt = add i64 %ln7Xs, -62
  %ln7Xp = load i64*, i64** %Hp_Var
  %ln7Xu = getelementptr inbounds i64, i64* %ln7Xp, i32 0
  store i64 %ln7Xt, i64* %ln7Xu, !tbaa !3
  %ln7Xw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7TS_info$def to i64
  %ln7Xv = load i64*, i64** %Sp_Var
  %ln7Xx = getelementptr inbounds i64, i64* %ln7Xv, i32 -8
  store i64 %ln7Xw, i64* %ln7Xx, !tbaa !2
  %ln7Xy = load i64, i64* %ls59k
  store i64 %ln7Xy, i64* %R4_Var
  %ln7XA = load i64*, i64** %Hp_Var
  %ln7XB = ptrtoint i64* %ln7XA to i64
  %ln7XC = add i64 %ln7XB, -14
  store i64 %ln7XC, i64* %R3_Var
  %ln7XD = load i64, i64* %ls59f
  store i64 %ln7XD, i64* %R2_Var
  %ln7XF = load i64, i64* %ls59f
  %ln7XE = load i64*, i64** %Sp_Var
  %ln7XG = getelementptr inbounds i64, i64* %ln7XE, i32 -7
  store i64 %ln7XF, i64* %ln7XG, !tbaa !2
  %ln7XI = load i64, i64* %ls59j
  %ln7XH = load i64*, i64** %Sp_Var
  %ln7XJ = getelementptr inbounds i64, i64* %ln7XH, i32 -6
  store i64 %ln7XI, i64* %ln7XJ, !tbaa !2
  %ln7XL = load i64, i64* %ls59k
  %ln7XK = load i64*, i64** %Sp_Var
  %ln7XM = getelementptr inbounds i64, i64* %ln7XK, i32 -5
  store i64 %ln7XL, i64* %ln7XM, !tbaa !2
  %ln7XO = load i64, i64* %ls59m
  %ln7XN = load i64*, i64** %Sp_Var
  %ln7XP = getelementptr inbounds i64, i64* %ln7XN, i32 -4
  store i64 %ln7XO, i64* %ln7XP, !tbaa !2
  %ln7XR = load i64, i64* %ls59n
  %ln7XQ = load i64*, i64** %Sp_Var
  %ln7XS = getelementptr inbounds i64, i64* %ln7XQ, i32 -3
  store i64 %ln7XR, i64* %ln7XS, !tbaa !2
  %ln7XT = load i64*, i64** %Sp_Var
  %ln7XU = getelementptr inbounds i64, i64* %ln7XT, i32 -8
  %ln7XV = ptrtoint i64* %ln7XU to i64
  %ln7XW = inttoptr i64 %ln7XV to i64*
  store i64* %ln7XW, i64** %Sp_Var
  %ln7XX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7XY = load i64*, i64** %Sp_Var
  %ln7XZ = load i64*, i64** %Hp_Var
  %ln7Y0 = load i64, i64* %R1_Var
  %ln7Y1 = load i64, i64* %R2_Var
  %ln7Y2 = load i64, i64* %R3_Var
  %ln7Y3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7XX( i64* %Base_Arg, i64* %ln7XY, i64* %ln7XZ, i64 %ln7Y0, i64 %ln7Y1, i64 %ln7Y2, i64 %ln7Y3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Ud:
  %ln7Y4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln7Y4, !tbaa !5
  br label %c7Ua
c7Ua:
  %ln7Y5 = load i64, i64* %ls59y
  store i64 %ln7Y5, i64* %R1_Var
  %ln7Y6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln7Y7 = bitcast i64* %ln7Y6 to i64*
  %ln7Y8 = load i64, i64* %ln7Y7, !tbaa !5
  %ln7Y9 = inttoptr i64 %ln7Y8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Ya = load i64*, i64** %Sp_Var
  %ln7Yb = load i64*, i64** %Hp_Var
  %ln7Yc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Y9( i64* %Base_Arg, i64* %ln7Ya, i64* %ln7Yb, i64 %ln7Yc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7TS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7TS_info$def to i8*)
define internal ghccc void @c7TS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
n7Yd:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7TS
c7TS:
  %ln7Ye = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7TX_info$def to i64
  %ln7Yf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7Ye, i64* %ln7Yf, !tbaa !2
  %ln7Yg = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %ln7Yh = bitcast i64* %ln7Yg to i64*
  %ln7Yi = load i64, i64* %ln7Yh, !tbaa !2
  store i64 %ln7Yi, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln7Yj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln7Yk = bitcast i64* %ln7Yj to i64*
  %ln7Yl = load i64, i64* %ln7Yk, !tbaa !2
  store i64 %ln7Yl, i64* %R2_Var
  %ln7Ym = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Yn = load i64, i64* %R2_Var
  %ln7Yo = load i64, i64* %R3_Var
  %ln7Yp = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Ym( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Yn, i64 %ln7Yo, i64 %ln7Yp, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7TX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7TX_info$def to i8*)
define internal ghccc void @c7TX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
n7Yq:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7TX
c7TX:
  %ln7Yr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U1_info$def to i64
  %ln7Ys = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7Yr, i64* %ln7Ys, !tbaa !2
  %ln7Yt = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln7Yu = bitcast i64* %ln7Yt to i64*
  %ln7Yv = load i64, i64* %ln7Yu, !tbaa !2
  store i64 %ln7Yv, i64* %R4_Var
  %ln7Yw = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %ln7Yx = bitcast i64* %ln7Yw to i64*
  %ln7Yy = load i64, i64* %ln7Yx, !tbaa !2
  store i64 %ln7Yy, i64* %R3_Var
  %ln7Yz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln7YA = bitcast i64* %ln7Yz to i64*
  %ln7YB = load i64, i64* %ln7YA, !tbaa !2
  store i64 %ln7YB, i64* %R2_Var
  %ln7YC = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %R1_Arg, i64* %ln7YC, !tbaa !2
  %ln7YD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7YE = load i64, i64* %R2_Var
  %ln7YF = load i64, i64* %R3_Var
  %ln7YG = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7YD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7YE, i64 %ln7YF, i64 %ln7YG, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7U1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U1_info$def to i8*)
define internal ghccc void @c7U1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 261, i32 30, i32 0}>
{
n7YH:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7U1
c7U1:
  %ln7YI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U5_info$def to i64
  %ln7YJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7YI, i64* %ln7YJ, !tbaa !2
  %ln7YK = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %ln7YL = bitcast i64* %ln7YK to i64*
  %ln7YM = load i64, i64* %ln7YL, !tbaa !2
  store i64 %ln7YM, i64* %R4_Var
  %ln7YN = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln7YO = bitcast i64* %ln7YN to i64*
  %ln7YP = load i64, i64* %ln7YO, !tbaa !2
  store i64 %ln7YP, i64* %R3_Var
  %ln7YQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln7YR = bitcast i64* %ln7YQ to i64*
  %ln7YS = load i64, i64* %ln7YR, !tbaa !2
  store i64 %ln7YS, i64* %R2_Var
  %ln7YT = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %R1_Arg, i64* %ln7YT, !tbaa !2
  %ln7YU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7YV = load i64, i64* %R2_Var
  %ln7YW = load i64, i64* %R3_Var
  %ln7YX = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7YU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7YV, i64 %ln7YW, i64 %ln7YX, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7U5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U5_info$def to i8*)
define internal ghccc void @c7U5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 389, i32 30, i32 0}>
{
n7YY:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c7U5
c7U5:
  %ln7YZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U9_info$def to i64
  %ln7Z0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln7YZ, i64* %ln7Z0, !tbaa !2
  %ln7Z1 = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %ln7Z2 = bitcast i64* %ln7Z1 to i64*
  %ln7Z3 = load i64, i64* %ln7Z2, !tbaa !2
  store i64 %ln7Z3, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln7Z4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln7Z5 = bitcast i64* %ln7Z4 to i64*
  %ln7Z6 = load i64, i64* %ln7Z5, !tbaa !2
  store i64 %ln7Z6, i64* %R2_Var
  %ln7Z7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Z8 = load i64, i64* %R2_Var
  %ln7Z9 = load i64, i64* %R3_Var
  %ln7Za = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Z7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Z8, i64 %ln7Z9, i64 %ln7Za, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7U9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7U9_info$def to i8*)
define internal ghccc void @c7U9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1413, i32 30, i32 0}>
{
n7Zb:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c7U9
c7U9:
  %ln7Zc = load i64*, i64** %Sp_Var
  %ln7Zd = getelementptr inbounds i64, i64* %ln7Zc, i32 4
  %ln7Ze = bitcast i64* %ln7Zd to i64*
  %ln7Zf = load i64, i64* %ln7Ze, !tbaa !2
  store i64 %ln7Zf, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln7Zg = load i64*, i64** %Sp_Var
  %ln7Zh = getelementptr inbounds i64, i64* %ln7Zg, i32 1
  %ln7Zi = bitcast i64* %ln7Zh to i64*
  %ln7Zj = load i64, i64* %ln7Zi, !tbaa !2
  store i64 %ln7Zj, i64* %R2_Var
  %ln7Zk = load i64*, i64** %Sp_Var
  %ln7Zl = getelementptr inbounds i64, i64* %ln7Zk, i32 6
  %ln7Zm = ptrtoint i64* %ln7Zl to i64
  %ln7Zn = inttoptr i64 %ln7Zm to i64*
  store i64* %ln7Zn, i64** %Sp_Var
  %ln7Zo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7Zp = load i64*, i64** %Sp_Var
  %ln7Zq = load i64, i64* %R2_Var
  %ln7Zr = load i64, i64* %R3_Var
  %ln7Zs = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7Zo( i64* %Base_Arg, i64* %ln7Zp, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln7Zq, i64 %ln7Zr, i64 %ln7Zs, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59o_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59o_info$def to i8*)
define internal ghccc void @s59o_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n7Zt:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7Uq
c7Uq:
  %ln7Zu = load i64*, i64** %Sp_Var
  %ln7Zv = getelementptr inbounds i64, i64* %ln7Zu, i32 -5
  %ln7Zw = ptrtoint i64* %ln7Zv to i64
  %ln7Zx = icmp ult i64 %ln7Zw, %SpLim_Arg
  %ln7Zy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Zx, i1 0 )
  br i1 %ln7Zy, label %c7Ur, label %c7Us
c7Us:
  %ln7ZA = ptrtoint i8* @stg_upd_frame_info to i64
  %ln7Zz = load i64*, i64** %Sp_Var
  %ln7ZB = getelementptr inbounds i64, i64* %ln7Zz, i32 -2
  store i64 %ln7ZA, i64* %ln7ZB, !tbaa !2
  %ln7ZD = load i64, i64* %R1_Var
  %ln7ZC = load i64*, i64** %Sp_Var
  %ln7ZE = getelementptr inbounds i64, i64* %ln7ZC, i32 -1
  store i64 %ln7ZD, i64* %ln7ZE, !tbaa !2
  %ln7ZH = load i64, i64* %R1_Var
  %ln7ZI = add i64 %ln7ZH, 16
  %ln7ZJ = inttoptr i64 %ln7ZI to i64*
  %ln7ZK = load i64, i64* %ln7ZJ, !tbaa !4
  store i64 %ln7ZK, i64* %R2_Var
  %ln7ZM = ptrtoint i8* @stg_ap_pp_info to i64
  %ln7ZL = load i64*, i64** %Sp_Var
  %ln7ZN = getelementptr inbounds i64, i64* %ln7ZL, i32 -5
  store i64 %ln7ZM, i64* %ln7ZN, !tbaa !2
  %ln7ZR = load i64, i64* %R1_Var
  %ln7ZS = add i64 %ln7ZR, 24
  %ln7ZT = inttoptr i64 %ln7ZS to i64*
  %ln7ZU = load i64, i64* %ln7ZT, !tbaa !4
  %ln7ZO = load i64*, i64** %Sp_Var
  %ln7ZV = getelementptr inbounds i64, i64* %ln7ZO, i32 -4
  store i64 %ln7ZU, i64* %ln7ZV, !tbaa !2
  %ln7ZZ = load i64, i64* %R1_Var
  %ln800 = add i64 %ln7ZZ, 32
  %ln801 = inttoptr i64 %ln800 to i64*
  %ln802 = load i64, i64* %ln801, !tbaa !4
  %ln7ZW = load i64*, i64** %Sp_Var
  %ln803 = getelementptr inbounds i64, i64* %ln7ZW, i32 -3
  store i64 %ln802, i64* %ln803, !tbaa !2
  %ln804 = load i64*, i64** %Sp_Var
  %ln805 = getelementptr inbounds i64, i64* %ln804, i32 -5
  %ln806 = ptrtoint i64* %ln805 to i64
  %ln807 = inttoptr i64 %ln806 to i64*
  store i64* %ln807, i64** %Sp_Var
  %ln808 = bitcast i8* @base_GHCziNum_zt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln809 = load i64*, i64** %Sp_Var
  %ln80a = load i64, i64* %R1_Var
  %ln80b = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln808( i64* %Base_Arg, i64* %ln809, i64* %Hp_Arg, i64 %ln80a, i64 %ln80b, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Ur:
  %ln80c = load i64, i64* %R1_Var
  store i64 %ln80c, i64* %R1_Var
  %ln80d = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln80e = bitcast i64* %ln80d to i64*
  %ln80f = load i64, i64* %ln80e, !tbaa !5
  %ln80g = inttoptr i64 %ln80f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80h = load i64*, i64** %Sp_Var
  %ln80i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80g( i64* %Base_Arg, i64* %ln80h, i64* %Hp_Arg, i64 %ln80i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPszuzdczt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to i8*)
define ghccc void @Main_zdfNumPszuzdczt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n80j:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7Ux
c7Ux:
  %ln80k = load i64*, i64** %Sp_Var
  %ln80l = getelementptr inbounds i64, i64* %ln80k, i32 -4
  %ln80m = ptrtoint i64* %ln80l to i64
  %ln80n = icmp ult i64 %ln80m, %SpLim_Arg
  %ln80o = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln80n, i1 0 )
  br i1 %ln80o, label %c7Uy, label %c7Uz
c7Uz:
  %ln80q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Tm_info$def to i64
  %ln80p = load i64*, i64** %Sp_Var
  %ln80r = getelementptr inbounds i64, i64* %ln80p, i32 -3
  store i64 %ln80q, i64* %ln80r, !tbaa !2
  %ln80s = load i64, i64* %R3_Var
  store i64 %ln80s, i64* %R1_Var
  %ln80u = load i64, i64* %R2_Var
  %ln80t = load i64*, i64** %Sp_Var
  %ln80v = getelementptr inbounds i64, i64* %ln80t, i32 -2
  store i64 %ln80u, i64* %ln80v, !tbaa !2
  %ln80x = load i64, i64* %R4_Var
  %ln80w = load i64*, i64** %Sp_Var
  %ln80y = getelementptr inbounds i64, i64* %ln80w, i32 -1
  store i64 %ln80x, i64* %ln80y, !tbaa !2
  %ln80z = load i64*, i64** %Sp_Var
  %ln80A = getelementptr inbounds i64, i64* %ln80z, i32 -3
  %ln80B = ptrtoint i64* %ln80A to i64
  %ln80C = inttoptr i64 %ln80B to i64*
  store i64* %ln80C, i64** %Sp_Var
  %ln80D = load i64, i64* %R1_Var
  %ln80E = and i64 %ln80D, 7
  %ln80F = icmp ne i64 %ln80E, 0
  br i1 %ln80F, label %u7US, label %c7Tn
c7Tn:
  %ln80H = load i64, i64* %R1_Var
  %ln80I = inttoptr i64 %ln80H to i64*
  %ln80J = load i64, i64* %ln80I, !tbaa !4
  %ln80K = inttoptr i64 %ln80J to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80L = load i64*, i64** %Sp_Var
  %ln80M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80K( i64* %Base_Arg, i64* %ln80L, i64* %Hp_Arg, i64 %ln80M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7US:
  %ln80N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Tm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80O = load i64*, i64** %Sp_Var
  %ln80P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80N( i64* %Base_Arg, i64* %ln80O, i64* %Hp_Arg, i64 %ln80P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Uy:
  %ln80Q = load i64, i64* %R4_Var
  store i64 %ln80Q, i64* %R4_Var
  %ln80R = load i64, i64* %R3_Var
  store i64 %ln80R, i64* %R3_Var
  %ln80S = load i64, i64* %R2_Var
  store i64 %ln80S, i64* %R2_Var
  %ln80T = ptrtoint %Main_zdfNumPszuzdczt_closure_struct* @Main_zdfNumPszuzdczt_closure$def to i64
  store i64 %ln80T, i64* %R1_Var
  %ln80U = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln80V = bitcast i64* %ln80U to i64*
  %ln80W = load i64, i64* %ln80V, !tbaa !5
  %ln80X = inttoptr i64 %ln80W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80Y = load i64*, i64** %Sp_Var
  %ln80Z = load i64, i64* %R1_Var
  %ln810 = load i64, i64* %R2_Var
  %ln811 = load i64, i64* %R3_Var
  %ln812 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80X( i64* %Base_Arg, i64* %ln80Y, i64* %Hp_Arg, i64 %ln80Z, i64 %ln810, i64 %ln811, i64 %ln812, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Tm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Tm_info$def to i8*)
define internal ghccc void @c7Tm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n813:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls59j = alloca i64, i32 1
  %ls59k = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7Tm
c7Tm:
  %ln814 = load i64, i64* %R1_Var
  %ln815 = and i64 %ln814, 7
  switch i64 %ln815, label %u7UN [i64 1, label %u7UN
i64 2, label %c7Uv]
u7UN:
  %ln816 = load i64*, i64** %Sp_Var
  %ln817 = getelementptr inbounds i64, i64* %ln816, i32 3
  %ln818 = ptrtoint i64* %ln817 to i64
  %ln819 = inttoptr i64 %ln818 to i64*
  store i64* %ln819, i64** %Sp_Var
  %ln81a = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7Uu$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln81b = load i64*, i64** %Sp_Var
  %ln81c = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln81a( i64* %Base_Arg, i64* %ln81b, i64* %Hp_Arg, i64 %ln81c, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Uv:
  %ln81e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ts_info$def to i64
  %ln81d = load i64*, i64** %Sp_Var
  %ln81f = getelementptr inbounds i64, i64* %ln81d, i32 -1
  store i64 %ln81e, i64* %ln81f, !tbaa !2
  %ln81i = load i64, i64* %R1_Var
  %ln81j = add i64 %ln81i, 6
  %ln81k = inttoptr i64 %ln81j to i64*
  %ln81l = load i64, i64* %ln81k, !tbaa !4
  store i64 %ln81l, i64* %ls59j
  %ln81o = load i64, i64* %R1_Var
  %ln81p = add i64 %ln81o, 14
  %ln81q = inttoptr i64 %ln81p to i64*
  %ln81r = load i64, i64* %ln81q, !tbaa !4
  store i64 %ln81r, i64* %ls59k
  %ln81s = load i64*, i64** %Sp_Var
  %ln81t = getelementptr inbounds i64, i64* %ln81s, i32 2
  %ln81u = bitcast i64* %ln81t to i64*
  %ln81v = load i64, i64* %ln81u, !tbaa !2
  store i64 %ln81v, i64* %R1_Var
  %ln81x = load i64, i64* %ls59k
  %ln81w = load i64*, i64** %Sp_Var
  %ln81y = getelementptr inbounds i64, i64* %ln81w, i32 0
  store i64 %ln81x, i64* %ln81y, !tbaa !2
  %ln81A = load i64, i64* %ls59j
  %ln81z = load i64*, i64** %Sp_Var
  %ln81B = getelementptr inbounds i64, i64* %ln81z, i32 2
  store i64 %ln81A, i64* %ln81B, !tbaa !2
  %ln81C = load i64*, i64** %Sp_Var
  %ln81D = getelementptr inbounds i64, i64* %ln81C, i32 -1
  %ln81E = ptrtoint i64* %ln81D to i64
  %ln81F = inttoptr i64 %ln81E to i64*
  store i64* %ln81F, i64** %Sp_Var
  %ln81G = load i64, i64* %R1_Var
  %ln81H = and i64 %ln81G, 7
  %ln81I = icmp ne i64 %ln81H, 0
  br i1 %ln81I, label %u7UP, label %c7Tt
c7Tt:
  %ln81K = load i64, i64* %R1_Var
  %ln81L = inttoptr i64 %ln81K to i64*
  %ln81M = load i64, i64* %ln81L, !tbaa !4
  %ln81N = inttoptr i64 %ln81M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln81O = load i64*, i64** %Sp_Var
  %ln81P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln81N( i64* %Base_Arg, i64* %ln81O, i64* %Hp_Arg, i64 %ln81P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u7UP:
  %ln81Q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ts_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln81R = load i64*, i64** %Sp_Var
  %ln81S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln81Q( i64* %Base_Arg, i64* %ln81R, i64* %Hp_Arg, i64 %ln81S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c7Ts_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c7Ts_info$def to i8*)
define internal ghccc void @c7Ts_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n81T:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls59m = alloca i64, i32 1
  %ls59n = alloca i64, i32 1
  %ls59f = alloca i64, i32 1
  %ls59j = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7Ts
c7Ts:
  %ln81U = load i64, i64* %R1_Var
  %ln81V = and i64 %ln81U, 7
  switch i64 %ln81V, label %u7UO [i64 1, label %u7UO
i64 2, label %c7UI]
u7UO:
  %ln81W = load i64*, i64** %Sp_Var
  %ln81X = getelementptr inbounds i64, i64* %ln81W, i32 4
  %ln81Y = ptrtoint i64* %ln81X to i64
  %ln81Z = inttoptr i64 %ln81Y to i64*
  store i64* %ln81Z, i64** %Sp_Var
  %ln820 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7Uu$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln821 = load i64*, i64** %Sp_Var
  %ln822 = load i64*, i64** %Hp_Var
  %ln823 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln820( i64* %Base_Arg, i64* %ln821, i64* %ln822, i64 %ln823, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7UI:
  %ln824 = load i64*, i64** %Hp_Var
  %ln825 = getelementptr inbounds i64, i64* %ln824, i32 15
  %ln826 = ptrtoint i64* %ln825 to i64
  %ln827 = inttoptr i64 %ln826 to i64*
  store i64* %ln827, i64** %Hp_Var
  %ln828 = load i64*, i64** %Hp_Var
  %ln829 = ptrtoint i64* %ln828 to i64
  %ln82a = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln82b = bitcast i64* %ln82a to i64*
  %ln82c = load i64, i64* %ln82b, !tbaa !5
  %ln82d = icmp ugt i64 %ln829, %ln82c
  %ln82e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln82d, i1 0 )
  br i1 %ln82e, label %c7UL, label %c7UK
c7UK:
  %ln82h = load i64, i64* %R1_Var
  %ln82i = add i64 %ln82h, 6
  %ln82j = inttoptr i64 %ln82i to i64*
  %ln82k = load i64, i64* %ln82j, !tbaa !4
  store i64 %ln82k, i64* %ls59m
  %ln82n = load i64, i64* %R1_Var
  %ln82o = add i64 %ln82n, 14
  %ln82p = inttoptr i64 %ln82o to i64*
  %ln82q = load i64, i64* %ln82p, !tbaa !4
  store i64 %ln82q, i64* %ls59n
  %ln82s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59y_info$def to i64
  %ln82r = load i64*, i64** %Hp_Var
  %ln82t = getelementptr inbounds i64, i64* %ln82r, i32 -14
  store i64 %ln82s, i64* %ln82t, !tbaa !3
  %ln82u = load i64*, i64** %Sp_Var
  %ln82v = getelementptr inbounds i64, i64* %ln82u, i32 2
  %ln82w = bitcast i64* %ln82v to i64*
  %ln82x = load i64, i64* %ln82w, !tbaa !2
  store i64 %ln82x, i64* %ls59f
  %ln82z = load i64, i64* %ls59f
  %ln82y = load i64*, i64** %Hp_Var
  %ln82A = getelementptr inbounds i64, i64* %ln82y, i32 -12
  store i64 %ln82z, i64* %ln82A, !tbaa !3
  %ln82B = load i64*, i64** %Sp_Var
  %ln82C = getelementptr inbounds i64, i64* %ln82B, i32 3
  %ln82D = bitcast i64* %ln82C to i64*
  %ln82E = load i64, i64* %ln82D, !tbaa !2
  store i64 %ln82E, i64* %ls59j
  %ln82G = load i64, i64* %ls59j
  %ln82F = load i64*, i64** %Hp_Var
  %ln82H = getelementptr inbounds i64, i64* %ln82F, i32 -11
  store i64 %ln82G, i64* %ln82H, !tbaa !3
  %ln82J = load i64, i64* %ls59n
  %ln82I = load i64*, i64** %Hp_Var
  %ln82K = getelementptr inbounds i64, i64* %ln82I, i32 -10
  store i64 %ln82J, i64* %ln82K, !tbaa !3
  %ln82M = load i64, i64* %ls59m
  %ln82L = load i64*, i64** %Hp_Var
  %ln82N = getelementptr inbounds i64, i64* %ln82L, i32 -9
  store i64 %ln82M, i64* %ln82N, !tbaa !3
  %ln82P = load i64*, i64** %Sp_Var
  %ln82Q = getelementptr inbounds i64, i64* %ln82P, i32 1
  %ln82R = bitcast i64* %ln82Q to i64*
  %ln82S = load i64, i64* %ln82R, !tbaa !2
  %ln82O = load i64*, i64** %Hp_Var
  %ln82T = getelementptr inbounds i64, i64* %ln82O, i32 -8
  store i64 %ln82S, i64* %ln82T, !tbaa !3
  %ln82V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59o_info$def to i64
  %ln82U = load i64*, i64** %Hp_Var
  %ln82W = getelementptr inbounds i64, i64* %ln82U, i32 -7
  store i64 %ln82V, i64* %ln82W, !tbaa !3
  %ln82Y = load i64, i64* %ls59f
  %ln82X = load i64*, i64** %Hp_Var
  %ln82Z = getelementptr inbounds i64, i64* %ln82X, i32 -5
  store i64 %ln82Y, i64* %ln82Z, !tbaa !3
  %ln831 = load i64, i64* %ls59j
  %ln830 = load i64*, i64** %Hp_Var
  %ln832 = getelementptr inbounds i64, i64* %ln830, i32 -4
  store i64 %ln831, i64* %ln832, !tbaa !3
  %ln834 = load i64, i64* %ls59m
  %ln833 = load i64*, i64** %Hp_Var
  %ln835 = getelementptr inbounds i64, i64* %ln833, i32 -3
  store i64 %ln834, i64* %ln835, !tbaa !3
  %ln837 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln836 = load i64*, i64** %Hp_Var
  %ln838 = getelementptr inbounds i64, i64* %ln836, i32 -2
  store i64 %ln837, i64* %ln838, !tbaa !3
  %ln83a = load i64*, i64** %Hp_Var
  %ln83b = getelementptr inbounds i64, i64* %ln83a, i32 -7
  %ln83c = ptrtoint i64* %ln83b to i64
  %ln839 = load i64*, i64** %Hp_Var
  %ln83d = getelementptr inbounds i64, i64* %ln839, i32 -1
  store i64 %ln83c, i64* %ln83d, !tbaa !3
  %ln83f = load i64*, i64** %Hp_Var
  %ln83g = getelementptr inbounds i64, i64* %ln83f, i32 -14
  %ln83h = ptrtoint i64* %ln83g to i64
  %ln83e = load i64*, i64** %Hp_Var
  %ln83i = getelementptr inbounds i64, i64* %ln83e, i32 0
  store i64 %ln83h, i64* %ln83i, !tbaa !3
  %ln83k = load i64*, i64** %Hp_Var
  %ln83l = ptrtoint i64* %ln83k to i64
  %ln83m = add i64 %ln83l, -14
  store i64 %ln83m, i64* %R1_Var
  %ln83n = load i64*, i64** %Sp_Var
  %ln83o = getelementptr inbounds i64, i64* %ln83n, i32 4
  %ln83p = ptrtoint i64* %ln83o to i64
  %ln83q = inttoptr i64 %ln83p to i64*
  store i64* %ln83q, i64** %Sp_Var
  %ln83r = load i64*, i64** %Sp_Var
  %ln83s = getelementptr inbounds i64, i64* %ln83r, i32 0
  %ln83t = bitcast i64* %ln83s to i64*
  %ln83u = load i64, i64* %ln83t, !tbaa !2
  %ln83v = inttoptr i64 %ln83u to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln83w = load i64*, i64** %Sp_Var
  %ln83x = load i64*, i64** %Hp_Var
  %ln83y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln83v( i64* %Base_Arg, i64* %ln83w, i64* %ln83x, i64 %ln83y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7UL:
  %ln83z = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %ln83z, !tbaa !5
  %ln83A = load i64, i64* %R1_Var
  store i64 %ln83A, i64* %R1_Var
  %ln83B = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln83C = load i64*, i64** %Sp_Var
  %ln83D = load i64*, i64** %Hp_Var
  %ln83E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln83B( i64* %Base_Arg, i64* %ln83C, i64* %ln83D, i64 %ln83E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c7Uu = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c7Uu$def to i8*)
define internal ghccc void @_c7Uu$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n83F:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c7Uu
c7Uu:
  %ln83G = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln83H = add i64 %ln83G, 1
  store i64 %ln83H, i64* %R1_Var
  %ln83I = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln83J = bitcast i64* %ln83I to i64*
  %ln83K = load i64, i64* %ln83J, !tbaa !2
  %ln83L = inttoptr i64 %ln83K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln83M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln83L( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln83M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfNumPs_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdfNumPs_closure$def = internal global %Main_zdfNumPs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPs_info$def to i64), i64 ptrtoint (%r55f_closure_struct* @r55f_closure$def to i64), i64 ptrtoint (%r55g_closure_struct* @r55g_closure$def to i64), i64 0}>
@Main_zdfNumPs_closure = alias i8, bitcast (%Main_zdfNumPs_closure_struct* @Main_zdfNumPs_closure$def to i8*)
@s59E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59E_info$def to i8*)
define internal ghccc void @s59E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 1, i32 9, i32 0}>
{
n84B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c83W
c83W:
  %ln84C = load i64, i64* %R2_Var
  store i64 %ln84C, i64* %R3_Var
  %ln84D = add i64 %R1_Arg, 7
  %ln84E = inttoptr i64 %ln84D to i64*
  %ln84F = load i64, i64* %ln84E, !tbaa !4
  store i64 %ln84F, i64* %R2_Var
  %ln84G = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcfromInteger_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln84H = load i64, i64* %R2_Var
  %ln84I = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln84G( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln84H, i64 %ln84I, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59D_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59D_info$def to i8*)
define internal ghccc void @s59D_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 1, i32 9, i32 0}>
{
n84J:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c844
c844:
  %ln84K = load i64, i64* %R2_Var
  store i64 %ln84K, i64* %R3_Var
  %ln84L = add i64 %R1_Arg, 7
  %ln84M = inttoptr i64 %ln84L to i64*
  %ln84N = load i64, i64* %ln84M, !tbaa !4
  store i64 %ln84N, i64* %R2_Var
  %ln84O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln84P = load i64, i64* %R2_Var
  %ln84Q = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln84O( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln84P, i64 %ln84Q, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59C_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59C_info$def to i8*)
define internal ghccc void @s59C_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 1, i32 9, i32 0}>
{
n84R:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c84c
c84c:
  %ln84S = load i64, i64* %R3_Var
  store i64 %ln84S, i64* %R4_Var
  %ln84T = load i64, i64* %R2_Var
  store i64 %ln84T, i64* %R3_Var
  %ln84U = add i64 %R1_Arg, 6
  %ln84V = inttoptr i64 %ln84U to i64*
  %ln84W = load i64, i64* %ln84V, !tbaa !4
  store i64 %ln84W, i64* %R2_Var
  %ln84X = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln84Y = load i64, i64* %R2_Var
  %ln84Z = load i64, i64* %R3_Var
  %ln850 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln84X( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln84Y, i64 %ln84Z, i64 %ln850, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59B_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59B_info$def to i8*)
define internal ghccc void @s59B_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 1, i32 9, i32 0}>
{
n851:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c84k
c84k:
  %ln852 = load i64, i64* %R3_Var
  store i64 %ln852, i64* %R4_Var
  %ln853 = load i64, i64* %R2_Var
  store i64 %ln853, i64* %R3_Var
  %ln854 = add i64 %R1_Arg, 6
  %ln855 = inttoptr i64 %ln854 to i64*
  %ln856 = load i64, i64* %ln855, !tbaa !4
  store i64 %ln856, i64* %R2_Var
  %ln857 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln858 = load i64, i64* %R2_Var
  %ln859 = load i64, i64* %R3_Var
  %ln85a = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln857( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln858, i64 %ln859, i64 %ln85a, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s59A_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59A_info$def to i8*)
define internal ghccc void @s59A_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 1, i32 9, i32 0}>
{
n85b:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c84s
c84s:
  %ln85c = load i64, i64* %R3_Var
  store i64 %ln85c, i64* %R4_Var
  %ln85d = load i64, i64* %R2_Var
  store i64 %ln85d, i64* %R3_Var
  %ln85e = add i64 %R1_Arg, 6
  %ln85f = inttoptr i64 %ln85e to i64*
  %ln85g = load i64, i64* %ln85f, !tbaa !4
  store i64 %ln85g, i64* %R2_Var
  %ln85h = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln85i = load i64, i64* %R2_Var
  %ln85j = load i64, i64* %R3_Var
  %ln85k = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln85h( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln85i, i64 %ln85j, i64 %ln85k, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfNumPs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPs_info$def to i8*)
define ghccc void @Main_zdfNumPs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 14, i32 0}>
{
n85l:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c84w
c84w:
  %ln85m = load i64*, i64** %Hp_Var
  %ln85n = getelementptr inbounds i64, i64* %ln85m, i32 18
  %ln85o = ptrtoint i64* %ln85n to i64
  %ln85p = inttoptr i64 %ln85o to i64*
  store i64* %ln85p, i64** %Hp_Var
  %ln85q = load i64*, i64** %Hp_Var
  %ln85r = ptrtoint i64* %ln85q to i64
  %ln85s = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln85t = bitcast i64* %ln85s to i64*
  %ln85u = load i64, i64* %ln85t, !tbaa !5
  %ln85v = icmp ugt i64 %ln85r, %ln85u
  %ln85w = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln85v, i1 0 )
  br i1 %ln85w, label %c84A, label %c84z
c84z:
  %ln85y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59E_info$def to i64
  %ln85x = load i64*, i64** %Hp_Var
  %ln85z = getelementptr inbounds i64, i64* %ln85x, i32 -17
  store i64 %ln85y, i64* %ln85z, !tbaa !3
  %ln85B = load i64, i64* %R2_Var
  %ln85A = load i64*, i64** %Hp_Var
  %ln85C = getelementptr inbounds i64, i64* %ln85A, i32 -16
  store i64 %ln85B, i64* %ln85C, !tbaa !3
  %ln85E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59D_info$def to i64
  %ln85D = load i64*, i64** %Hp_Var
  %ln85F = getelementptr inbounds i64, i64* %ln85D, i32 -15
  store i64 %ln85E, i64* %ln85F, !tbaa !3
  %ln85H = load i64, i64* %R2_Var
  %ln85G = load i64*, i64** %Hp_Var
  %ln85I = getelementptr inbounds i64, i64* %ln85G, i32 -14
  store i64 %ln85H, i64* %ln85I, !tbaa !3
  %ln85K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59C_info$def to i64
  %ln85J = load i64*, i64** %Hp_Var
  %ln85L = getelementptr inbounds i64, i64* %ln85J, i32 -13
  store i64 %ln85K, i64* %ln85L, !tbaa !3
  %ln85N = load i64, i64* %R2_Var
  %ln85M = load i64*, i64** %Hp_Var
  %ln85O = getelementptr inbounds i64, i64* %ln85M, i32 -12
  store i64 %ln85N, i64* %ln85O, !tbaa !3
  %ln85Q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59B_info$def to i64
  %ln85P = load i64*, i64** %Hp_Var
  %ln85R = getelementptr inbounds i64, i64* %ln85P, i32 -11
  store i64 %ln85Q, i64* %ln85R, !tbaa !3
  %ln85T = load i64, i64* %R2_Var
  %ln85S = load i64*, i64** %Hp_Var
  %ln85U = getelementptr inbounds i64, i64* %ln85S, i32 -10
  store i64 %ln85T, i64* %ln85U, !tbaa !3
  %ln85W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59A_info$def to i64
  %ln85V = load i64*, i64** %Hp_Var
  %ln85X = getelementptr inbounds i64, i64* %ln85V, i32 -9
  store i64 %ln85W, i64* %ln85X, !tbaa !3
  %ln85Z = load i64, i64* %R2_Var
  %ln85Y = load i64*, i64** %Hp_Var
  %ln860 = getelementptr inbounds i64, i64* %ln85Y, i32 -8
  store i64 %ln85Z, i64* %ln860, !tbaa !3
  %ln862 = ptrtoint i8* @base_GHCziNum_CZCNum_con_info to i64
  %ln861 = load i64*, i64** %Hp_Var
  %ln863 = getelementptr inbounds i64, i64* %ln861, i32 -7
  store i64 %ln862, i64* %ln863, !tbaa !3
  %ln866 = load i64*, i64** %Hp_Var
  %ln867 = ptrtoint i64* %ln866 to i64
  %ln868 = add i64 %ln867, -70
  %ln864 = load i64*, i64** %Hp_Var
  %ln869 = getelementptr inbounds i64, i64* %ln864, i32 -6
  store i64 %ln868, i64* %ln869, !tbaa !3
  %ln86c = load i64*, i64** %Hp_Var
  %ln86d = ptrtoint i64* %ln86c to i64
  %ln86e = add i64 %ln86d, -86
  %ln86a = load i64*, i64** %Hp_Var
  %ln86f = getelementptr inbounds i64, i64* %ln86a, i32 -5
  store i64 %ln86e, i64* %ln86f, !tbaa !3
  %ln86i = load i64*, i64** %Hp_Var
  %ln86j = ptrtoint i64* %ln86i to i64
  %ln86k = add i64 %ln86j, -102
  %ln86g = load i64*, i64** %Hp_Var
  %ln86l = getelementptr inbounds i64, i64* %ln86g, i32 -4
  store i64 %ln86k, i64* %ln86l, !tbaa !3
  %ln86o = load i64*, i64** %Hp_Var
  %ln86p = ptrtoint i64* %ln86o to i64
  %ln86q = add i64 %ln86p, -119
  %ln86m = load i64*, i64** %Hp_Var
  %ln86r = getelementptr inbounds i64, i64* %ln86m, i32 -3
  store i64 %ln86q, i64* %ln86r, !tbaa !3
  %ln86t = ptrtoint %r55f_closure_struct* @r55f_closure$def to i64
  %ln86s = load i64*, i64** %Hp_Var
  %ln86u = getelementptr inbounds i64, i64* %ln86s, i32 -2
  store i64 %ln86t, i64* %ln86u, !tbaa !3
  %ln86w = ptrtoint %r55g_closure_struct* @r55g_closure$def to i64
  %ln86v = load i64*, i64** %Hp_Var
  %ln86x = getelementptr inbounds i64, i64* %ln86v, i32 -1
  store i64 %ln86w, i64* %ln86x, !tbaa !3
  %ln86A = load i64*, i64** %Hp_Var
  %ln86B = ptrtoint i64* %ln86A to i64
  %ln86C = add i64 %ln86B, -135
  %ln86y = load i64*, i64** %Hp_Var
  %ln86D = getelementptr inbounds i64, i64* %ln86y, i32 0
  store i64 %ln86C, i64* %ln86D, !tbaa !3
  %ln86F = load i64*, i64** %Hp_Var
  %ln86G = ptrtoint i64* %ln86F to i64
  %ln86H = add i64 %ln86G, -55
  store i64 %ln86H, i64* %R1_Var
  %ln86I = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln86J = bitcast i64* %ln86I to i64*
  %ln86K = load i64, i64* %ln86J, !tbaa !2
  %ln86L = inttoptr i64 %ln86K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln86M = load i64*, i64** %Hp_Var
  %ln86N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln86L( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln86M, i64 %ln86N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c84A:
  %ln86O = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 144, i64* %ln86O, !tbaa !5
  %ln86P = load i64, i64* %R2_Var
  store i64 %ln86P, i64* %R2_Var
  %ln86Q = ptrtoint %Main_zdfNumPs_closure_struct* @Main_zdfNumPs_closure$def to i64
  store i64 %ln86Q, i64* %R1_Var
  %ln86R = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln86S = bitcast i64* %ln86R to i64*
  %ln86T = load i64, i64* %ln86S, !tbaa !5
  %ln86U = inttoptr i64 %ln86T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln86V = load i64*, i64** %Hp_Var
  %ln86W = load i64, i64* %R1_Var
  %ln86X = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln86U( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln86V, i64 %ln86W, i64 %ln86X, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFractionalPszuzdcp1Fractional_closure_struct = type <{i64, i64}>
@Main_zdfFractionalPszuzdcp1Fractional_closure$def = internal global %Main_zdfFractionalPszuzdcp1Fractional_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcp1Fractional_info$def to i64), i64 0}>
@Main_zdfFractionalPszuzdcp1Fractional_closure = alias i8, bitcast (%Main_zdfFractionalPszuzdcp1Fractional_closure_struct* @Main_zdfFractionalPszuzdcp1Fractional_closure$def to i8*)
@s5aG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5aG_info$def to i8*)
define internal ghccc void @s5aG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n87e:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c876
c876:
  %ln87f = load i64*, i64** %Sp_Var
  %ln87g = getelementptr inbounds i64, i64* %ln87f, i32 -2
  %ln87h = ptrtoint i64* %ln87g to i64
  %ln87i = icmp ult i64 %ln87h, %SpLim_Arg
  %ln87j = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln87i, i1 0 )
  br i1 %ln87j, label %c877, label %c878
c878:
  %ln87l = ptrtoint i8* @stg_upd_frame_info to i64
  %ln87k = load i64*, i64** %Sp_Var
  %ln87m = getelementptr inbounds i64, i64* %ln87k, i32 -2
  store i64 %ln87l, i64* %ln87m, !tbaa !2
  %ln87o = load i64, i64* %R1_Var
  %ln87n = load i64*, i64** %Sp_Var
  %ln87p = getelementptr inbounds i64, i64* %ln87n, i32 -1
  store i64 %ln87o, i64* %ln87p, !tbaa !2
  %ln87s = load i64, i64* %R1_Var
  %ln87t = add i64 %ln87s, 16
  %ln87u = inttoptr i64 %ln87t to i64*
  %ln87v = load i64, i64* %ln87u, !tbaa !4
  store i64 %ln87v, i64* %R2_Var
  %ln87w = load i64*, i64** %Sp_Var
  %ln87x = getelementptr inbounds i64, i64* %ln87w, i32 -2
  %ln87y = ptrtoint i64* %ln87x to i64
  %ln87z = inttoptr i64 %ln87y to i64*
  store i64* %ln87z, i64** %Sp_Var
  %ln87A = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln87B = load i64*, i64** %Sp_Var
  %ln87C = load i64, i64* %R1_Var
  %ln87D = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln87A( i64* %Base_Arg, i64* %ln87B, i64* %Hp_Arg, i64 %ln87C, i64 %ln87D, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c877:
  %ln87E = load i64, i64* %R1_Var
  store i64 %ln87E, i64* %R1_Var
  %ln87F = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln87G = bitcast i64* %ln87F to i64*
  %ln87H = load i64, i64* %ln87G, !tbaa !5
  %ln87I = inttoptr i64 %ln87H to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln87J = load i64*, i64** %Sp_Var
  %ln87K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln87I( i64* %Base_Arg, i64* %ln87J, i64* %Hp_Arg, i64 %ln87K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFractionalPszuzdcp1Fractional_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcp1Fractional_info$def to i8*)
define ghccc void @Main_zdfFractionalPszuzdcp1Fractional_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPs_closure_struct* @Main_zdfNumPs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcp1Fractional_info$def to i64)) to i32),i32 0)}>
{
n87L:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c879
c879:
  %ln87M = load i64*, i64** %Hp_Var
  %ln87N = getelementptr inbounds i64, i64* %ln87M, i32 3
  %ln87O = ptrtoint i64* %ln87N to i64
  %ln87P = inttoptr i64 %ln87O to i64*
  store i64* %ln87P, i64** %Hp_Var
  %ln87Q = load i64*, i64** %Hp_Var
  %ln87R = ptrtoint i64* %ln87Q to i64
  %ln87S = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln87T = bitcast i64* %ln87S to i64*
  %ln87U = load i64, i64* %ln87T, !tbaa !5
  %ln87V = icmp ugt i64 %ln87R, %ln87U
  %ln87W = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln87V, i1 0 )
  br i1 %ln87W, label %c87d, label %c87c
c87c:
  %ln87Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5aG_info$def to i64
  %ln87X = load i64*, i64** %Hp_Var
  %ln87Z = getelementptr inbounds i64, i64* %ln87X, i32 -2
  store i64 %ln87Y, i64* %ln87Z, !tbaa !3
  %ln881 = load i64, i64* %R3_Var
  %ln880 = load i64*, i64** %Hp_Var
  %ln882 = getelementptr inbounds i64, i64* %ln880, i32 0
  store i64 %ln881, i64* %ln882, !tbaa !3
  %ln883 = load i64*, i64** %Hp_Var
  %ln884 = getelementptr inbounds i64, i64* %ln883, i32 -2
  %ln885 = ptrtoint i64* %ln884 to i64
  store i64 %ln885, i64* %R2_Var
  %ln886 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln887 = load i64*, i64** %Hp_Var
  %ln888 = load i64, i64* %R1_Var
  %ln889 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln886( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln887, i64 %ln888, i64 %ln889, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c87d:
  %ln88a = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln88a, !tbaa !5
  %ln88b = load i64, i64* %R3_Var
  store i64 %ln88b, i64* %R3_Var
  %ln88c = load i64, i64* %R2_Var
  store i64 %ln88c, i64* %R2_Var
  %ln88d = ptrtoint %Main_zdfFractionalPszuzdcp1Fractional_closure_struct* @Main_zdfFractionalPszuzdcp1Fractional_closure$def to i64
  store i64 %ln88d, i64* %R1_Var
  %ln88e = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln88f = bitcast i64* %ln88e to i64*
  %ln88g = load i64, i64* %ln88f, !tbaa !5
  %ln88h = inttoptr i64 %ln88g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln88i = load i64*, i64** %Hp_Var
  %ln88j = load i64, i64* %R1_Var
  %ln88k = load i64, i64* %R2_Var
  %ln88l = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln88h( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln88i, i64 %ln88j, i64 %ln88k, i64 %ln88l, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_compose_closure_struct = type <{i64}>
@Main_compose_closure$def = internal global %Main_compose_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_compose_info$def to i64)}>
@Main_compose_closure = alias i8, bitcast (%Main_compose_closure_struct* @Main_compose_closure$def to i8*)
@s5dg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dg_info$def to i8*)
define internal ghccc void @s5dg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8a3:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c88G
c88G:
  %ln8a4 = load i64*, i64** %Sp_Var
  %ln8a5 = getelementptr inbounds i64, i64* %ln8a4, i32 -4
  %ln8a6 = ptrtoint i64* %ln8a5 to i64
  %ln8a7 = icmp ult i64 %ln8a6, %SpLim_Arg
  %ln8a8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8a7, i1 0 )
  br i1 %ln8a8, label %c88H, label %c88I
c88I:
  %ln8aa = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8a9 = load i64*, i64** %Sp_Var
  %ln8ab = getelementptr inbounds i64, i64* %ln8a9, i32 -2
  store i64 %ln8aa, i64* %ln8ab, !tbaa !2
  %ln8ad = load i64, i64* %R1_Var
  %ln8ac = load i64*, i64** %Sp_Var
  %ln8ae = getelementptr inbounds i64, i64* %ln8ac, i32 -1
  store i64 %ln8ad, i64* %ln8ae, !tbaa !2
  %ln8ah = load i64, i64* %R1_Var
  %ln8ai = add i64 %ln8ah, 16
  %ln8aj = inttoptr i64 %ln8ai to i64*
  %ln8ak = load i64, i64* %ln8aj, !tbaa !4
  store i64 %ln8ak, i64* %R2_Var
  %ln8am = ptrtoint i8* @stg_ap_p_info to i64
  %ln8al = load i64*, i64** %Sp_Var
  %ln8an = getelementptr inbounds i64, i64* %ln8al, i32 -4
  store i64 %ln8am, i64* %ln8an, !tbaa !2
  %ln8ap = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln8aq = add i64 %ln8ap, 1
  %ln8ao = load i64*, i64** %Sp_Var
  %ln8ar = getelementptr inbounds i64, i64* %ln8ao, i32 -3
  store i64 %ln8aq, i64* %ln8ar, !tbaa !2
  %ln8as = load i64*, i64** %Sp_Var
  %ln8at = getelementptr inbounds i64, i64* %ln8as, i32 -4
  %ln8au = ptrtoint i64* %ln8at to i64
  %ln8av = inttoptr i64 %ln8au to i64*
  store i64* %ln8av, i64** %Sp_Var
  %ln8aw = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ax = load i64*, i64** %Sp_Var
  %ln8ay = load i64, i64* %R1_Var
  %ln8az = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8aw( i64* %Base_Arg, i64* %ln8ax, i64* %Hp_Arg, i64 %ln8ay, i64 %ln8az, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c88H:
  %ln8aA = load i64, i64* %R1_Var
  store i64 %ln8aA, i64* %R1_Var
  %ln8aB = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8aC = bitcast i64* %ln8aB to i64*
  %ln8aD = load i64, i64* %ln8aC, !tbaa !5
  %ln8aE = inttoptr i64 %ln8aD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8aF = load i64*, i64** %Sp_Var
  %ln8aG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8aE( i64* %Base_Arg, i64* %ln8aF, i64* %Hp_Arg, i64 %ln8aG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5dj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dj_info$def to i8*)
define internal ghccc void @s5dj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n8aH:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c88R
c88R:
  %ln8aI = add i64 %R1_Arg, 40
  %ln8aJ = inttoptr i64 %ln8aI to i64*
  %ln8aK = load i64, i64* %ln8aJ, !tbaa !4
  store i64 %ln8aK, i64* %R5_Var
  %ln8aL = add i64 %R1_Arg, 32
  %ln8aM = inttoptr i64 %ln8aL to i64*
  %ln8aN = load i64, i64* %ln8aM, !tbaa !4
  store i64 %ln8aN, i64* %R4_Var
  %ln8aO = add i64 %R1_Arg, 24
  %ln8aP = inttoptr i64 %ln8aO to i64*
  %ln8aQ = load i64, i64* %ln8aP, !tbaa !4
  store i64 %ln8aQ, i64* %R3_Var
  %ln8aR = add i64 %R1_Arg, 16
  %ln8aS = inttoptr i64 %ln8aR to i64*
  %ln8aT = load i64, i64* %ln8aS, !tbaa !4
  store i64 %ln8aT, i64* %R2_Var
  %ln8aU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_compose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8aV = load i64, i64* %R2_Var
  %ln8aW = load i64, i64* %R3_Var
  %ln8aX = load i64, i64* %R4_Var
  %ln8aY = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8aU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8aV, i64 %ln8aW, i64 %ln8aX, i64 %ln8aY, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5dl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dl_info$def to i8*)
define internal ghccc void @s5dl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8aZ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c898
c898:
  %ln8b0 = load i64*, i64** %Sp_Var
  %ln8b1 = getelementptr inbounds i64, i64* %ln8b0, i32 -4
  %ln8b2 = ptrtoint i64* %ln8b1 to i64
  %ln8b3 = icmp ult i64 %ln8b2, %SpLim_Arg
  %ln8b4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8b3, i1 0 )
  br i1 %ln8b4, label %c899, label %c89a
c89a:
  %ln8b6 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8b5 = load i64*, i64** %Sp_Var
  %ln8b7 = getelementptr inbounds i64, i64* %ln8b5, i32 -2
  store i64 %ln8b6, i64* %ln8b7, !tbaa !2
  %ln8b9 = load i64, i64* %R1_Var
  %ln8b8 = load i64*, i64** %Sp_Var
  %ln8ba = getelementptr inbounds i64, i64* %ln8b8, i32 -1
  store i64 %ln8b9, i64* %ln8ba, !tbaa !2
  %ln8bd = load i64, i64* %R1_Var
  %ln8be = add i64 %ln8bd, 16
  %ln8bf = inttoptr i64 %ln8be to i64*
  %ln8bg = load i64, i64* %ln8bf, !tbaa !4
  store i64 %ln8bg, i64* %R2_Var
  %ln8bi = ptrtoint i8* @stg_ap_p_info to i64
  %ln8bh = load i64*, i64** %Sp_Var
  %ln8bj = getelementptr inbounds i64, i64* %ln8bh, i32 -4
  store i64 %ln8bi, i64* %ln8bj, !tbaa !2
  %ln8bl = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln8bm = add i64 %ln8bl, 1
  %ln8bk = load i64*, i64** %Sp_Var
  %ln8bn = getelementptr inbounds i64, i64* %ln8bk, i32 -3
  store i64 %ln8bm, i64* %ln8bn, !tbaa !2
  %ln8bo = load i64*, i64** %Sp_Var
  %ln8bp = getelementptr inbounds i64, i64* %ln8bo, i32 -4
  %ln8bq = ptrtoint i64* %ln8bp to i64
  %ln8br = inttoptr i64 %ln8bq to i64*
  store i64* %ln8br, i64** %Sp_Var
  %ln8bs = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8bt = load i64*, i64** %Sp_Var
  %ln8bu = load i64, i64* %R1_Var
  %ln8bv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8bs( i64* %Base_Arg, i64* %ln8bt, i64* %Hp_Arg, i64 %ln8bu, i64 %ln8bv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c899:
  %ln8bw = load i64, i64* %R1_Var
  store i64 %ln8bw, i64* %R1_Var
  %ln8bx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8by = bitcast i64* %ln8bx to i64*
  %ln8bz = load i64, i64* %ln8by, !tbaa !5
  %ln8bA = inttoptr i64 %ln8bz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8bB = load i64*, i64** %Sp_Var
  %ln8bC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8bA( i64* %Base_Arg, i64* %ln8bB, i64* %Hp_Arg, i64 %ln8bC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5dn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dn_info$def to i8*)
define internal ghccc void @s5dn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n8bD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5d6 = alloca i64, i32 1
  %ls5d7 = alloca i64, i32 1
  %ls5dc = alloca i64, i32 1
  %ls5df = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c89c
c89c:
  %ln8bE = load i64*, i64** %Hp_Var
  %ln8bF = getelementptr inbounds i64, i64* %ln8bE, i32 6
  %ln8bG = ptrtoint i64* %ln8bF to i64
  %ln8bH = inttoptr i64 %ln8bG to i64*
  store i64* %ln8bH, i64** %Hp_Var
  %ln8bI = load i64*, i64** %Hp_Var
  %ln8bJ = ptrtoint i64* %ln8bI to i64
  %ln8bK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8bL = bitcast i64* %ln8bK to i64*
  %ln8bM = load i64, i64* %ln8bL, !tbaa !5
  %ln8bN = icmp ugt i64 %ln8bJ, %ln8bM
  %ln8bO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8bN, i1 0 )
  br i1 %ln8bO, label %c89g, label %c89f
c89f:
  %ln8bR = load i64, i64* %R1_Var
  %ln8bS = add i64 %ln8bR, 16
  %ln8bT = inttoptr i64 %ln8bS to i64*
  %ln8bU = load i64, i64* %ln8bT, !tbaa !4
  store i64 %ln8bU, i64* %ls5d6
  %ln8bX = load i64, i64* %R1_Var
  %ln8bY = add i64 %ln8bX, 24
  %ln8bZ = inttoptr i64 %ln8bY to i64*
  %ln8c0 = load i64, i64* %ln8bZ, !tbaa !4
  store i64 %ln8c0, i64* %ls5d7
  %ln8c3 = load i64, i64* %R1_Var
  %ln8c4 = add i64 %ln8c3, 32
  %ln8c5 = inttoptr i64 %ln8c4 to i64*
  %ln8c6 = load i64, i64* %ln8c5, !tbaa !4
  store i64 %ln8c6, i64* %ls5dc
  %ln8c9 = load i64, i64* %R1_Var
  %ln8ca = add i64 %ln8c9, 40
  %ln8cb = inttoptr i64 %ln8ca to i64*
  %ln8cc = load i64, i64* %ln8cb, !tbaa !4
  store i64 %ln8cc, i64* %ls5df
  %ln8ce = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dl_info$def to i64
  %ln8cd = load i64*, i64** %Hp_Var
  %ln8cf = getelementptr inbounds i64, i64* %ln8cd, i32 -5
  store i64 %ln8ce, i64* %ln8cf, !tbaa !3
  %ln8ch = load i64, i64* %ls5d7
  %ln8cg = load i64*, i64** %Hp_Var
  %ln8ci = getelementptr inbounds i64, i64* %ln8cg, i32 -3
  store i64 %ln8ch, i64* %ln8ci, !tbaa !3
  %ln8ck = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8cj = load i64*, i64** %Hp_Var
  %ln8cl = getelementptr inbounds i64, i64* %ln8cj, i32 -2
  store i64 %ln8ck, i64* %ln8cl, !tbaa !3
  %ln8cn = load i64*, i64** %Hp_Var
  %ln8co = getelementptr inbounds i64, i64* %ln8cn, i32 -5
  %ln8cp = ptrtoint i64* %ln8co to i64
  %ln8cm = load i64*, i64** %Hp_Var
  %ln8cq = getelementptr inbounds i64, i64* %ln8cm, i32 -1
  store i64 %ln8cp, i64* %ln8cq, !tbaa !3
  %ln8cs = load i64, i64* %ls5df
  %ln8cr = load i64*, i64** %Hp_Var
  %ln8ct = getelementptr inbounds i64, i64* %ln8cr, i32 0
  store i64 %ln8cs, i64* %ln8ct, !tbaa !3
  %ln8cv = load i64*, i64** %Hp_Var
  %ln8cw = ptrtoint i64* %ln8cv to i64
  %ln8cx = add i64 %ln8cw, -14
  store i64 %ln8cx, i64* %R5_Var
  %ln8cy = load i64, i64* %ls5dc
  store i64 %ln8cy, i64* %R4_Var
  %ln8cz = load i64, i64* %ls5d7
  store i64 %ln8cz, i64* %R3_Var
  %ln8cA = load i64, i64* %ls5d6
  store i64 %ln8cA, i64* %R2_Var
  %ln8cB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_compose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cC = load i64*, i64** %Hp_Var
  %ln8cD = load i64, i64* %R1_Var
  %ln8cE = load i64, i64* %R2_Var
  %ln8cF = load i64, i64* %R3_Var
  %ln8cG = load i64, i64* %R4_Var
  %ln8cH = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8cB( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8cC, i64 %ln8cD, i64 %ln8cE, i64 %ln8cF, i64 %ln8cG, i64 %ln8cH, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89g:
  %ln8cI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8cI, !tbaa !5
  %ln8cJ = load i64, i64* %R1_Var
  store i64 %ln8cJ, i64* %R1_Var
  %ln8cK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8cL = bitcast i64* %ln8cK to i64*
  %ln8cM = load i64, i64* %ln8cL, !tbaa !5
  %ln8cN = inttoptr i64 %ln8cM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cO = load i64*, i64** %Hp_Var
  %ln8cP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8cN( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8cO, i64 %ln8cP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5do_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5do_info$def to i8*)
define internal ghccc void @s5do_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n8cQ:
  %ls5do = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5d6 = alloca i64, i32 1
  %ls5d7 = alloca i64, i32 1
  %ls5dc = alloca i64, i32 1
  %ls5df = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c89h
c89h:
  %ln8cR = load i64, i64* %R1_Var
  store i64 %ln8cR, i64* %ls5do
  %ln8cS = load i64*, i64** %Sp_Var
  %ln8cT = getelementptr inbounds i64, i64* %ln8cS, i32 -2
  %ln8cU = ptrtoint i64* %ln8cT to i64
  %ln8cV = icmp ult i64 %ln8cU, %SpLim_Arg
  %ln8cW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8cV, i1 0 )
  br i1 %ln8cW, label %c89i, label %c89j
c89j:
  %ln8cX = load i64*, i64** %Hp_Var
  %ln8cY = getelementptr inbounds i64, i64* %ln8cX, i32 6
  %ln8cZ = ptrtoint i64* %ln8cY to i64
  %ln8d0 = inttoptr i64 %ln8cZ to i64*
  store i64* %ln8d0, i64** %Hp_Var
  %ln8d1 = load i64*, i64** %Hp_Var
  %ln8d2 = ptrtoint i64* %ln8d1 to i64
  %ln8d3 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8d4 = bitcast i64* %ln8d3 to i64*
  %ln8d5 = load i64, i64* %ln8d4, !tbaa !5
  %ln8d6 = icmp ugt i64 %ln8d2, %ln8d5
  %ln8d7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8d6, i1 0 )
  br i1 %ln8d7, label %c89l, label %c89k
c89k:
  %ln8d9 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8d8 = load i64*, i64** %Sp_Var
  %ln8da = getelementptr inbounds i64, i64* %ln8d8, i32 -2
  store i64 %ln8d9, i64* %ln8da, !tbaa !2
  %ln8dc = load i64, i64* %ls5do
  %ln8db = load i64*, i64** %Sp_Var
  %ln8dd = getelementptr inbounds i64, i64* %ln8db, i32 -1
  store i64 %ln8dc, i64* %ln8dd, !tbaa !2
  %ln8de = load i64, i64* %ls5do
  %ln8df = add i64 %ln8de, 16
  %ln8dg = inttoptr i64 %ln8df to i64*
  %ln8dh = load i64, i64* %ln8dg, !tbaa !1
  store i64 %ln8dh, i64* %ls5d6
  %ln8di = load i64, i64* %ls5do
  %ln8dj = add i64 %ln8di, 24
  %ln8dk = inttoptr i64 %ln8dj to i64*
  %ln8dl = load i64, i64* %ln8dk, !tbaa !1
  store i64 %ln8dl, i64* %ls5d7
  %ln8dm = load i64, i64* %ls5do
  %ln8dn = add i64 %ln8dm, 32
  %ln8do = inttoptr i64 %ln8dn to i64*
  %ln8dp = load i64, i64* %ln8do, !tbaa !1
  store i64 %ln8dp, i64* %ls5dc
  %ln8dq = load i64, i64* %ls5do
  %ln8dr = add i64 %ln8dq, 40
  %ln8ds = inttoptr i64 %ln8dr to i64*
  %ln8dt = load i64, i64* %ln8ds, !tbaa !1
  store i64 %ln8dt, i64* %ls5df
  %ln8dv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dn_info$def to i64
  %ln8du = load i64*, i64** %Hp_Var
  %ln8dw = getelementptr inbounds i64, i64* %ln8du, i32 -5
  store i64 %ln8dv, i64* %ln8dw, !tbaa !3
  %ln8dy = load i64, i64* %ls5d6
  %ln8dx = load i64*, i64** %Hp_Var
  %ln8dz = getelementptr inbounds i64, i64* %ln8dx, i32 -3
  store i64 %ln8dy, i64* %ln8dz, !tbaa !3
  %ln8dB = load i64, i64* %ls5d7
  %ln8dA = load i64*, i64** %Hp_Var
  %ln8dC = getelementptr inbounds i64, i64* %ln8dA, i32 -2
  store i64 %ln8dB, i64* %ln8dC, !tbaa !3
  %ln8dE = load i64, i64* %ls5dc
  %ln8dD = load i64*, i64** %Hp_Var
  %ln8dF = getelementptr inbounds i64, i64* %ln8dD, i32 -1
  store i64 %ln8dE, i64* %ln8dF, !tbaa !3
  %ln8dH = load i64, i64* %ls5df
  %ln8dG = load i64*, i64** %Hp_Var
  %ln8dI = getelementptr inbounds i64, i64* %ln8dG, i32 0
  store i64 %ln8dH, i64* %ln8dI, !tbaa !3
  %ln8dJ = load i64*, i64** %Hp_Var
  %ln8dK = getelementptr inbounds i64, i64* %ln8dJ, i32 -5
  %ln8dL = ptrtoint i64* %ln8dK to i64
  store i64 %ln8dL, i64* %R4_Var
  %ln8dM = load i64, i64* %ls5df
  store i64 %ln8dM, i64* %R3_Var
  %ln8dN = load i64, i64* %ls5d7
  store i64 %ln8dN, i64* %R2_Var
  %ln8dO = load i64*, i64** %Sp_Var
  %ln8dP = getelementptr inbounds i64, i64* %ln8dO, i32 -2
  %ln8dQ = ptrtoint i64* %ln8dP to i64
  %ln8dR = inttoptr i64 %ln8dQ to i64*
  store i64* %ln8dR, i64** %Sp_Var
  %ln8dS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8dT = load i64*, i64** %Sp_Var
  %ln8dU = load i64*, i64** %Hp_Var
  %ln8dV = load i64, i64* %R1_Var
  %ln8dW = load i64, i64* %R2_Var
  %ln8dX = load i64, i64* %R3_Var
  %ln8dY = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8dS( i64* %Base_Arg, i64* %ln8dT, i64* %ln8dU, i64 %ln8dV, i64 %ln8dW, i64 %ln8dX, i64 %ln8dY, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89l:
  %ln8dZ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8dZ, !tbaa !5
  br label %c89i
c89i:
  %ln8e0 = load i64, i64* %ls5do
  store i64 %ln8e0, i64* %R1_Var
  %ln8e1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8e2 = bitcast i64* %ln8e1 to i64*
  %ln8e3 = load i64, i64* %ln8e2, !tbaa !5
  %ln8e4 = inttoptr i64 %ln8e3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8e5 = load i64*, i64** %Sp_Var
  %ln8e6 = load i64*, i64** %Hp_Var
  %ln8e7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8e4( i64* %Base_Arg, i64* %ln8e5, i64* %ln8e6, i64 %ln8e7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_compose_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_compose_info$def to i8*)
define ghccc void @Main_compose_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 17179869208, i64 0, i32 14, i32 0}>
{
n8e8:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c89q
c89q:
  %ln8e9 = load i64*, i64** %Sp_Var
  %ln8ea = getelementptr inbounds i64, i64* %ln8e9, i32 -10
  %ln8eb = ptrtoint i64* %ln8ea to i64
  %ln8ec = icmp ult i64 %ln8eb, %SpLim_Arg
  %ln8ed = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8ec, i1 0 )
  br i1 %ln8ed, label %c89r, label %c89s
c89s:
  %ln8ef = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88q_info$def to i64
  %ln8ee = load i64*, i64** %Sp_Var
  %ln8eg = getelementptr inbounds i64, i64* %ln8ee, i32 -4
  store i64 %ln8ef, i64* %ln8eg, !tbaa !2
  %ln8eh = load i64, i64* %R4_Var
  store i64 %ln8eh, i64* %R1_Var
  %ln8ej = load i64, i64* %R2_Var
  %ln8ei = load i64*, i64** %Sp_Var
  %ln8ek = getelementptr inbounds i64, i64* %ln8ei, i32 -3
  store i64 %ln8ej, i64* %ln8ek, !tbaa !2
  %ln8em = load i64, i64* %R3_Var
  %ln8el = load i64*, i64** %Sp_Var
  %ln8en = getelementptr inbounds i64, i64* %ln8el, i32 -2
  store i64 %ln8em, i64* %ln8en, !tbaa !2
  %ln8ep = load i64, i64* %R5_Var
  %ln8eo = load i64*, i64** %Sp_Var
  %ln8eq = getelementptr inbounds i64, i64* %ln8eo, i32 -1
  store i64 %ln8ep, i64* %ln8eq, !tbaa !2
  %ln8er = load i64*, i64** %Sp_Var
  %ln8es = getelementptr inbounds i64, i64* %ln8er, i32 -4
  %ln8et = ptrtoint i64* %ln8es to i64
  %ln8eu = inttoptr i64 %ln8et to i64*
  store i64* %ln8eu, i64** %Sp_Var
  %ln8ev = load i64, i64* %R1_Var
  %ln8ew = and i64 %ln8ev, 7
  %ln8ex = icmp ne i64 %ln8ew, 0
  br i1 %ln8ex, label %u8a2, label %c88r
c88r:
  %ln8ez = load i64, i64* %R1_Var
  %ln8eA = inttoptr i64 %ln8ez to i64*
  %ln8eB = load i64, i64* %ln8eA, !tbaa !4
  %ln8eC = inttoptr i64 %ln8eB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eD = load i64*, i64** %Sp_Var
  %ln8eE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eC( i64* %Base_Arg, i64* %ln8eD, i64* %Hp_Arg, i64 %ln8eE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8a2:
  %ln8eF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88q_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eG = load i64*, i64** %Sp_Var
  %ln8eH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eF( i64* %Base_Arg, i64* %ln8eG, i64* %Hp_Arg, i64 %ln8eH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89r:
  %ln8eI = load i64, i64* %R5_Var
  store i64 %ln8eI, i64* %R5_Var
  %ln8eJ = load i64, i64* %R4_Var
  store i64 %ln8eJ, i64* %R4_Var
  %ln8eK = load i64, i64* %R3_Var
  store i64 %ln8eK, i64* %R3_Var
  %ln8eL = load i64, i64* %R2_Var
  store i64 %ln8eL, i64* %R2_Var
  %ln8eM = ptrtoint %Main_compose_closure_struct* @Main_compose_closure$def to i64
  store i64 %ln8eM, i64* %R1_Var
  %ln8eN = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8eO = bitcast i64* %ln8eN to i64*
  %ln8eP = load i64, i64* %ln8eO, !tbaa !5
  %ln8eQ = inttoptr i64 %ln8eP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eR = load i64*, i64** %Sp_Var
  %ln8eS = load i64, i64* %R1_Var
  %ln8eT = load i64, i64* %R2_Var
  %ln8eU = load i64, i64* %R3_Var
  %ln8eV = load i64, i64* %R4_Var
  %ln8eW = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eQ( i64* %Base_Arg, i64* %ln8eR, i64* %Hp_Arg, i64 %ln8eS, i64 %ln8eT, i64 %ln8eU, i64 %ln8eV, i64 %ln8eW, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c88q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88q_info$def to i8*)
define internal ghccc void @c88q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n8eX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5db = alloca i64, i32 1
  %ls5dc = alloca i64, i32 1
  br label %c88q
c88q:
  %ln8eY = load i64, i64* %R1_Var
  %ln8eZ = and i64 %ln8eY, 7
  switch i64 %ln8eZ, label %c89n [i64 1, label %c89n
i64 2, label %c89o]
c89n:
  %ln8f0 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8f1 = add i64 %ln8f0, 1
  store i64 %ln8f1, i64* %R1_Var
  %ln8f2 = load i64*, i64** %Sp_Var
  %ln8f3 = getelementptr inbounds i64, i64* %ln8f2, i32 4
  %ln8f4 = ptrtoint i64* %ln8f3 to i64
  %ln8f5 = inttoptr i64 %ln8f4 to i64*
  store i64* %ln8f5, i64** %Sp_Var
  %ln8f6 = load i64*, i64** %Sp_Var
  %ln8f7 = getelementptr inbounds i64, i64* %ln8f6, i32 0
  %ln8f8 = bitcast i64* %ln8f7 to i64*
  %ln8f9 = load i64, i64* %ln8f8, !tbaa !2
  %ln8fa = inttoptr i64 %ln8f9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fb = load i64*, i64** %Sp_Var
  %ln8fc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8fa( i64* %Base_Arg, i64* %ln8fb, i64* %Hp_Arg, i64 %ln8fc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89o:
  %ln8fe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88w_info$def to i64
  %ln8fd = load i64*, i64** %Sp_Var
  %ln8ff = getelementptr inbounds i64, i64* %ln8fd, i32 -1
  store i64 %ln8fe, i64* %ln8ff, !tbaa !2
  %ln8fi = load i64, i64* %R1_Var
  %ln8fj = add i64 %ln8fi, 6
  %ln8fk = inttoptr i64 %ln8fj to i64*
  %ln8fl = load i64, i64* %ln8fk, !tbaa !4
  store i64 %ln8fl, i64* %ls5db
  %ln8fo = load i64, i64* %R1_Var
  %ln8fp = add i64 %ln8fo, 14
  %ln8fq = inttoptr i64 %ln8fp to i64*
  %ln8fr = load i64, i64* %ln8fq, !tbaa !4
  store i64 %ln8fr, i64* %ls5dc
  %ln8fs = load i64*, i64** %Sp_Var
  %ln8ft = getelementptr inbounds i64, i64* %ln8fs, i32 3
  %ln8fu = bitcast i64* %ln8ft to i64*
  %ln8fv = load i64, i64* %ln8fu, !tbaa !2
  store i64 %ln8fv, i64* %R1_Var
  %ln8fx = load i64, i64* %ls5dc
  %ln8fw = load i64*, i64** %Sp_Var
  %ln8fy = getelementptr inbounds i64, i64* %ln8fw, i32 0
  store i64 %ln8fx, i64* %ln8fy, !tbaa !2
  %ln8fA = load i64, i64* %ls5db
  %ln8fz = load i64*, i64** %Sp_Var
  %ln8fB = getelementptr inbounds i64, i64* %ln8fz, i32 3
  store i64 %ln8fA, i64* %ln8fB, !tbaa !2
  %ln8fC = load i64*, i64** %Sp_Var
  %ln8fD = getelementptr inbounds i64, i64* %ln8fC, i32 -1
  %ln8fE = ptrtoint i64* %ln8fD to i64
  %ln8fF = inttoptr i64 %ln8fE to i64*
  store i64* %ln8fF, i64** %Sp_Var
  %ln8fG = load i64, i64* %R1_Var
  %ln8fH = and i64 %ln8fG, 7
  %ln8fI = icmp ne i64 %ln8fH, 0
  br i1 %ln8fI, label %u8a1, label %c88x
c88x:
  %ln8fK = load i64, i64* %R1_Var
  %ln8fL = inttoptr i64 %ln8fK to i64*
  %ln8fM = load i64, i64* %ln8fL, !tbaa !4
  %ln8fN = inttoptr i64 %ln8fM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fO = load i64*, i64** %Sp_Var
  %ln8fP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8fN( i64* %Base_Arg, i64* %ln8fO, i64* %Hp_Arg, i64 %ln8fP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8a1:
  %ln8fQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88w_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fR = load i64*, i64** %Sp_Var
  %ln8fS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8fQ( i64* %Base_Arg, i64* %ln8fR, i64* %Hp_Arg, i64 %ln8fS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c88w_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88w_info$def to i8*)
define internal ghccc void @c88w_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
n8fT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5dd = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5de = alloca i64, i32 1
  %ls5df = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c88w
c88w:
  %ln8fU = load i64, i64* %R1_Var
  %ln8fV = and i64 %ln8fU, 7
  switch i64 %ln8fV, label %c89z [i64 1, label %c89z
i64 2, label %c89D]
c89z:
  %ln8fW = load i64*, i64** %Hp_Var
  %ln8fX = getelementptr inbounds i64, i64* %ln8fW, i32 3
  %ln8fY = ptrtoint i64* %ln8fX to i64
  %ln8fZ = inttoptr i64 %ln8fY to i64*
  store i64* %ln8fZ, i64** %Hp_Var
  %ln8g0 = load i64, i64* %R1_Var
  store i64 %ln8g0, i64* %ls5dd
  %ln8g1 = load i64*, i64** %Hp_Var
  %ln8g2 = ptrtoint i64* %ln8g1 to i64
  %ln8g3 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8g4 = bitcast i64* %ln8g3 to i64*
  %ln8g5 = load i64, i64* %ln8g4, !tbaa !5
  %ln8g6 = icmp ugt i64 %ln8g2, %ln8g5
  %ln8g7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8g6, i1 0 )
  br i1 %ln8g7, label %c89C, label %c89B
c89B:
  %ln8g9 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8g8 = load i64*, i64** %Hp_Var
  %ln8ga = getelementptr inbounds i64, i64* %ln8g8, i32 -2
  store i64 %ln8g9, i64* %ln8ga, !tbaa !3
  %ln8gc = load i64*, i64** %Sp_Var
  %ln8gd = getelementptr inbounds i64, i64* %ln8gc, i32 4
  %ln8ge = bitcast i64* %ln8gd to i64*
  %ln8gf = load i64, i64* %ln8ge, !tbaa !2
  %ln8gb = load i64*, i64** %Hp_Var
  %ln8gg = getelementptr inbounds i64, i64* %ln8gb, i32 -1
  store i64 %ln8gf, i64* %ln8gg, !tbaa !3
  %ln8gi = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8gj = add i64 %ln8gi, 1
  %ln8gh = load i64*, i64** %Hp_Var
  %ln8gk = getelementptr inbounds i64, i64* %ln8gh, i32 0
  store i64 %ln8gj, i64* %ln8gk, !tbaa !3
  %ln8gm = load i64*, i64** %Hp_Var
  %ln8gn = ptrtoint i64* %ln8gm to i64
  %ln8go = add i64 %ln8gn, -14
  store i64 %ln8go, i64* %R1_Var
  %ln8gp = load i64*, i64** %Sp_Var
  %ln8gq = getelementptr inbounds i64, i64* %ln8gp, i32 5
  %ln8gr = ptrtoint i64* %ln8gq to i64
  %ln8gs = inttoptr i64 %ln8gr to i64*
  store i64* %ln8gs, i64** %Sp_Var
  %ln8gt = load i64*, i64** %Sp_Var
  %ln8gu = getelementptr inbounds i64, i64* %ln8gt, i32 0
  %ln8gv = bitcast i64* %ln8gu to i64*
  %ln8gw = load i64, i64* %ln8gv, !tbaa !2
  %ln8gx = inttoptr i64 %ln8gw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8gy = load i64*, i64** %Sp_Var
  %ln8gz = load i64*, i64** %Hp_Var
  %ln8gA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8gx( i64* %Base_Arg, i64* %ln8gy, i64* %ln8gz, i64 %ln8gA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89C:
  %ln8gB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8gB, !tbaa !5
  %ln8gC = load i64, i64* %ls5dd
  store i64 %ln8gC, i64* %R1_Var
  %ln8gD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8gE = load i64*, i64** %Sp_Var
  %ln8gF = load i64*, i64** %Hp_Var
  %ln8gG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8gD( i64* %Base_Arg, i64* %ln8gE, i64* %ln8gF, i64 %ln8gG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89D:
  %ln8gH = load i64*, i64** %Hp_Var
  %ln8gI = getelementptr inbounds i64, i64* %ln8gH, i32 3
  %ln8gJ = ptrtoint i64* %ln8gI to i64
  %ln8gK = inttoptr i64 %ln8gJ to i64*
  store i64* %ln8gK, i64** %Hp_Var
  %ln8gL = load i64, i64* %R1_Var
  store i64 %ln8gL, i64* %ls5dd
  %ln8gM = load i64*, i64** %Hp_Var
  %ln8gN = ptrtoint i64* %ln8gM to i64
  %ln8gO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8gP = bitcast i64* %ln8gO to i64*
  %ln8gQ = load i64, i64* %ln8gP, !tbaa !5
  %ln8gR = icmp ugt i64 %ln8gN, %ln8gQ
  %ln8gS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8gR, i1 0 )
  br i1 %ln8gS, label %c89C, label %c89F
c89F:
  %ln8gT = load i64, i64* %ls5dd
  %ln8gU = add i64 %ln8gT, 6
  %ln8gV = inttoptr i64 %ln8gU to i64*
  %ln8gW = load i64, i64* %ln8gV, !tbaa !1
  store i64 %ln8gW, i64* %ls5de
  %ln8gX = load i64, i64* %ls5dd
  %ln8gY = add i64 %ln8gX, 14
  %ln8gZ = inttoptr i64 %ln8gY to i64*
  %ln8h0 = load i64, i64* %ln8gZ, !tbaa !1
  store i64 %ln8h0, i64* %ls5df
  %ln8h2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dg_info$def to i64
  %ln8h1 = load i64*, i64** %Hp_Var
  %ln8h3 = getelementptr inbounds i64, i64* %ln8h1, i32 -2
  store i64 %ln8h2, i64* %ln8h3, !tbaa !3
  %ln8h5 = load i64*, i64** %Sp_Var
  %ln8h6 = getelementptr inbounds i64, i64* %ln8h5, i32 3
  %ln8h7 = bitcast i64* %ln8h6 to i64*
  %ln8h8 = load i64, i64* %ln8h7, !tbaa !2
  %ln8h4 = load i64*, i64** %Hp_Var
  %ln8h9 = getelementptr inbounds i64, i64* %ln8h4, i32 0
  store i64 %ln8h8, i64* %ln8h9, !tbaa !3
  %ln8hb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88J_info$def to i64
  %ln8ha = load i64*, i64** %Sp_Var
  %ln8hc = getelementptr inbounds i64, i64* %ln8ha, i32 -2
  store i64 %ln8hb, i64* %ln8hc, !tbaa !2
  %ln8hd = load i64*, i64** %Sp_Var
  %ln8he = getelementptr inbounds i64, i64* %ln8hd, i32 2
  %ln8hf = bitcast i64* %ln8he to i64*
  %ln8hg = load i64, i64* %ln8hf, !tbaa !2
  store i64 %ln8hg, i64* %R2_Var
  %ln8hi = ptrtoint i8* @stg_ap_pp_info to i64
  %ln8hh = load i64*, i64** %Sp_Var
  %ln8hj = getelementptr inbounds i64, i64* %ln8hh, i32 -5
  store i64 %ln8hi, i64* %ln8hj, !tbaa !2
  %ln8hl = load i64, i64* %ls5de
  %ln8hk = load i64*, i64** %Sp_Var
  %ln8hm = getelementptr inbounds i64, i64* %ln8hk, i32 -4
  store i64 %ln8hl, i64* %ln8hm, !tbaa !2
  %ln8ho = load i64*, i64** %Hp_Var
  %ln8hp = getelementptr inbounds i64, i64* %ln8ho, i32 -2
  %ln8hq = ptrtoint i64* %ln8hp to i64
  %ln8hn = load i64*, i64** %Sp_Var
  %ln8hr = getelementptr inbounds i64, i64* %ln8hn, i32 -3
  store i64 %ln8hq, i64* %ln8hr, !tbaa !2
  %ln8ht = load i64, i64* %ls5df
  %ln8hs = load i64*, i64** %Sp_Var
  %ln8hu = getelementptr inbounds i64, i64* %ln8hs, i32 -1
  store i64 %ln8ht, i64* %ln8hu, !tbaa !2
  %ln8hw = load i64, i64* %ls5dd
  %ln8hv = load i64*, i64** %Sp_Var
  %ln8hx = getelementptr inbounds i64, i64* %ln8hv, i32 0
  store i64 %ln8hw, i64* %ln8hx, !tbaa !2
  %ln8hy = load i64*, i64** %Sp_Var
  %ln8hz = getelementptr inbounds i64, i64* %ln8hy, i32 -5
  %ln8hA = ptrtoint i64* %ln8hz to i64
  %ln8hB = inttoptr i64 %ln8hA to i64*
  store i64* %ln8hB, i64** %Sp_Var
  %ln8hC = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8hD = load i64*, i64** %Sp_Var
  %ln8hE = load i64*, i64** %Hp_Var
  %ln8hF = load i64, i64* %R1_Var
  %ln8hG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8hC( i64* %Base_Arg, i64* %ln8hD, i64* %ln8hE, i64 %ln8hF, i64 %ln8hG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c88J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c88J_info$def to i8*)
define internal ghccc void @c88J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 0}>
{
n8hH:
  %ls5d6 = alloca i64, i32 1
  %ls5d7 = alloca i64, i32 1
  %ls5dc = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5dd = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c88J
c88J:
  %ln8hI = load i64*, i64** %Sp_Var
  %ln8hJ = getelementptr inbounds i64, i64* %ln8hI, i32 4
  %ln8hK = bitcast i64* %ln8hJ to i64*
  %ln8hL = load i64, i64* %ln8hK, !tbaa !2
  store i64 %ln8hL, i64* %ls5d6
  %ln8hM = load i64*, i64** %Sp_Var
  %ln8hN = getelementptr inbounds i64, i64* %ln8hM, i32 5
  %ln8hO = bitcast i64* %ln8hN to i64*
  %ln8hP = load i64, i64* %ln8hO, !tbaa !2
  store i64 %ln8hP, i64* %ls5d7
  %ln8hQ = load i64*, i64** %Sp_Var
  %ln8hR = getelementptr inbounds i64, i64* %ln8hQ, i32 3
  %ln8hS = bitcast i64* %ln8hR to i64*
  %ln8hT = load i64, i64* %ln8hS, !tbaa !2
  store i64 %ln8hT, i64* %ls5dc
  %ln8hU = load i64, i64* %R1_Var
  %ln8hV = and i64 %ln8hU, 7
  switch i64 %ln8hV, label %c89N [i64 1, label %c89N
i64 2, label %c89V]
c89N:
  %ln8hW = load i64*, i64** %Hp_Var
  %ln8hX = getelementptr inbounds i64, i64* %ln8hW, i32 6
  %ln8hY = ptrtoint i64* %ln8hX to i64
  %ln8hZ = inttoptr i64 %ln8hY to i64*
  store i64* %ln8hZ, i64** %Hp_Var
  %ln8i0 = load i64*, i64** %Hp_Var
  %ln8i1 = ptrtoint i64* %ln8i0 to i64
  %ln8i2 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8i3 = bitcast i64* %ln8i2 to i64*
  %ln8i4 = load i64, i64* %ln8i3, !tbaa !5
  %ln8i5 = icmp ugt i64 %ln8i1, %ln8i4
  %ln8i6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8i5, i1 0 )
  br i1 %ln8i6, label %c89Q, label %c89P
c89P:
  %ln8i8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dj_info$def to i64
  %ln8i7 = load i64*, i64** %Hp_Var
  %ln8i9 = getelementptr inbounds i64, i64* %ln8i7, i32 -5
  store i64 %ln8i8, i64* %ln8i9, !tbaa !3
  %ln8ib = load i64, i64* %ls5d6
  %ln8ia = load i64*, i64** %Hp_Var
  %ln8ic = getelementptr inbounds i64, i64* %ln8ia, i32 -3
  store i64 %ln8ib, i64* %ln8ic, !tbaa !3
  %ln8ie = load i64, i64* %ls5d7
  %ln8id = load i64*, i64** %Hp_Var
  %ln8if = getelementptr inbounds i64, i64* %ln8id, i32 -2
  store i64 %ln8ie, i64* %ln8if, !tbaa !3
  %ln8ih = load i64, i64* %ls5dc
  %ln8ig = load i64*, i64** %Hp_Var
  %ln8ii = getelementptr inbounds i64, i64* %ln8ig, i32 -1
  store i64 %ln8ih, i64* %ln8ii, !tbaa !3
  %ln8ij = load i64*, i64** %Sp_Var
  %ln8ik = getelementptr inbounds i64, i64* %ln8ij, i32 2
  %ln8il = bitcast i64* %ln8ik to i64*
  %ln8im = load i64, i64* %ln8il, !tbaa !2
  store i64 %ln8im, i64* %ls5dd
  %ln8io = load i64, i64* %ls5dd
  %ln8in = load i64*, i64** %Hp_Var
  %ln8ip = getelementptr inbounds i64, i64* %ln8in, i32 0
  store i64 %ln8io, i64* %ln8ip, !tbaa !3
  %ln8ir = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c89H_info$def to i64
  %ln8iq = load i64*, i64** %Sp_Var
  %ln8is = getelementptr inbounds i64, i64* %ln8iq, i32 4
  store i64 %ln8ir, i64* %ln8is, !tbaa !2
  %ln8it = load i64*, i64** %Hp_Var
  %ln8iu = getelementptr inbounds i64, i64* %ln8it, i32 -5
  %ln8iv = ptrtoint i64* %ln8iu to i64
  store i64 %ln8iv, i64* %R4_Var
  %ln8iw = load i64, i64* %ls5dd
  store i64 %ln8iw, i64* %R3_Var
  %ln8ix = load i64, i64* %ls5d7
  store i64 %ln8ix, i64* %R2_Var
  %ln8iy = load i64*, i64** %Sp_Var
  %ln8iz = getelementptr inbounds i64, i64* %ln8iy, i32 4
  %ln8iA = ptrtoint i64* %ln8iz to i64
  %ln8iB = inttoptr i64 %ln8iA to i64*
  store i64* %ln8iB, i64** %Sp_Var
  %ln8iC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8iD = load i64*, i64** %Sp_Var
  %ln8iE = load i64*, i64** %Hp_Var
  %ln8iF = load i64, i64* %R1_Var
  %ln8iG = load i64, i64* %R2_Var
  %ln8iH = load i64, i64* %R3_Var
  %ln8iI = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8iC( i64* %Base_Arg, i64* %ln8iD, i64* %ln8iE, i64 %ln8iF, i64 %ln8iG, i64 %ln8iH, i64 %ln8iI, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89Q:
  %ln8iJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8iJ, !tbaa !5
  %ln8iK = load i64, i64* %R1_Var
  store i64 %ln8iK, i64* %R1_Var
  %ln8iL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8iM = load i64*, i64** %Sp_Var
  %ln8iN = load i64*, i64** %Hp_Var
  %ln8iO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8iL( i64* %Base_Arg, i64* %ln8iM, i64* %ln8iN, i64 %ln8iO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89V:
  %ln8iP = load i64*, i64** %Hp_Var
  %ln8iQ = getelementptr inbounds i64, i64* %ln8iP, i32 9
  %ln8iR = ptrtoint i64* %ln8iQ to i64
  %ln8iS = inttoptr i64 %ln8iR to i64*
  store i64* %ln8iS, i64** %Hp_Var
  %ln8iT = load i64*, i64** %Hp_Var
  %ln8iU = ptrtoint i64* %ln8iT to i64
  %ln8iV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8iW = bitcast i64* %ln8iV to i64*
  %ln8iX = load i64, i64* %ln8iW, !tbaa !5
  %ln8iY = icmp ugt i64 %ln8iU, %ln8iX
  %ln8iZ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8iY, i1 0 )
  br i1 %ln8iZ, label %c89Y, label %c89X
c89X:
  %ln8j1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5do_info$def to i64
  %ln8j0 = load i64*, i64** %Hp_Var
  %ln8j2 = getelementptr inbounds i64, i64* %ln8j0, i32 -8
  store i64 %ln8j1, i64* %ln8j2, !tbaa !3
  %ln8j4 = load i64, i64* %ls5d6
  %ln8j3 = load i64*, i64** %Hp_Var
  %ln8j5 = getelementptr inbounds i64, i64* %ln8j3, i32 -6
  store i64 %ln8j4, i64* %ln8j5, !tbaa !3
  %ln8j7 = load i64, i64* %ls5d7
  %ln8j6 = load i64*, i64** %Hp_Var
  %ln8j8 = getelementptr inbounds i64, i64* %ln8j6, i32 -5
  store i64 %ln8j7, i64* %ln8j8, !tbaa !3
  %ln8ja = load i64, i64* %ls5dc
  %ln8j9 = load i64*, i64** %Hp_Var
  %ln8jb = getelementptr inbounds i64, i64* %ln8j9, i32 -4
  store i64 %ln8ja, i64* %ln8jb, !tbaa !3
  %ln8jd = load i64*, i64** %Sp_Var
  %ln8je = getelementptr inbounds i64, i64* %ln8jd, i32 1
  %ln8jf = bitcast i64* %ln8je to i64*
  %ln8jg = load i64, i64* %ln8jf, !tbaa !2
  %ln8jc = load i64*, i64** %Hp_Var
  %ln8jh = getelementptr inbounds i64, i64* %ln8jc, i32 -3
  store i64 %ln8jg, i64* %ln8jh, !tbaa !3
  %ln8jj = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8ji = load i64*, i64** %Hp_Var
  %ln8jk = getelementptr inbounds i64, i64* %ln8ji, i32 -2
  store i64 %ln8jj, i64* %ln8jk, !tbaa !3
  %ln8jm = load i64*, i64** %Sp_Var
  %ln8jn = getelementptr inbounds i64, i64* %ln8jm, i32 6
  %ln8jo = bitcast i64* %ln8jn to i64*
  %ln8jp = load i64, i64* %ln8jo, !tbaa !2
  %ln8jl = load i64*, i64** %Hp_Var
  %ln8jq = getelementptr inbounds i64, i64* %ln8jl, i32 -1
  store i64 %ln8jp, i64* %ln8jq, !tbaa !3
  %ln8js = load i64*, i64** %Hp_Var
  %ln8jt = getelementptr inbounds i64, i64* %ln8js, i32 -8
  %ln8ju = ptrtoint i64* %ln8jt to i64
  %ln8jr = load i64*, i64** %Hp_Var
  %ln8jv = getelementptr inbounds i64, i64* %ln8jr, i32 0
  store i64 %ln8ju, i64* %ln8jv, !tbaa !3
  %ln8jx = load i64*, i64** %Hp_Var
  %ln8jy = ptrtoint i64* %ln8jx to i64
  %ln8jz = add i64 %ln8jy, -14
  store i64 %ln8jz, i64* %R1_Var
  %ln8jA = load i64*, i64** %Sp_Var
  %ln8jB = getelementptr inbounds i64, i64* %ln8jA, i32 7
  %ln8jC = ptrtoint i64* %ln8jB to i64
  %ln8jD = inttoptr i64 %ln8jC to i64*
  store i64* %ln8jD, i64** %Sp_Var
  %ln8jE = load i64*, i64** %Sp_Var
  %ln8jF = getelementptr inbounds i64, i64* %ln8jE, i32 0
  %ln8jG = bitcast i64* %ln8jF to i64*
  %ln8jH = load i64, i64* %ln8jG, !tbaa !2
  %ln8jI = inttoptr i64 %ln8jH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jJ = load i64*, i64** %Sp_Var
  %ln8jK = load i64*, i64** %Hp_Var
  %ln8jL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jI( i64* %Base_Arg, i64* %ln8jJ, i64* %ln8jK, i64 %ln8jL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89Y:
  %ln8jM = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %ln8jM, !tbaa !5
  %ln8jN = load i64, i64* %R1_Var
  store i64 %ln8jN, i64* %R1_Var
  %ln8jO = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jP = load i64*, i64** %Sp_Var
  %ln8jQ = load i64*, i64** %Hp_Var
  %ln8jR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jO( i64* %Base_Arg, i64* %ln8jP, i64* %ln8jQ, i64 %ln8jR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c89H_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c89H_info$def to i8*)
define internal ghccc void @c89H_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n8jS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c89H
c89H:
  %ln8jT = load i64*, i64** %Hp_Var
  %ln8jU = getelementptr inbounds i64, i64* %ln8jT, i32 3
  %ln8jV = ptrtoint i64* %ln8jU to i64
  %ln8jW = inttoptr i64 %ln8jV to i64*
  store i64* %ln8jW, i64** %Hp_Var
  %ln8jX = load i64*, i64** %Hp_Var
  %ln8jY = ptrtoint i64* %ln8jX to i64
  %ln8jZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8k0 = bitcast i64* %ln8jZ to i64*
  %ln8k1 = load i64, i64* %ln8k0, !tbaa !5
  %ln8k2 = icmp ugt i64 %ln8jY, %ln8k1
  %ln8k3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8k2, i1 0 )
  br i1 %ln8k3, label %c89T, label %c89S
c89S:
  %ln8k5 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8k4 = load i64*, i64** %Hp_Var
  %ln8k6 = getelementptr inbounds i64, i64* %ln8k4, i32 -2
  store i64 %ln8k5, i64* %ln8k6, !tbaa !3
  %ln8k8 = load i64*, i64** %Sp_Var
  %ln8k9 = getelementptr inbounds i64, i64* %ln8k8, i32 2
  %ln8ka = bitcast i64* %ln8k9 to i64*
  %ln8kb = load i64, i64* %ln8ka, !tbaa !2
  %ln8k7 = load i64*, i64** %Hp_Var
  %ln8kc = getelementptr inbounds i64, i64* %ln8k7, i32 -1
  store i64 %ln8kb, i64* %ln8kc, !tbaa !3
  %ln8ke = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8kf = add i64 %ln8ke, 1
  %ln8kd = load i64*, i64** %Hp_Var
  %ln8kg = getelementptr inbounds i64, i64* %ln8kd, i32 0
  store i64 %ln8kf, i64* %ln8kg, !tbaa !3
  %ln8kh = load i64, i64* %R1_Var
  store i64 %ln8kh, i64* %R4_Var
  %ln8kj = load i64*, i64** %Hp_Var
  %ln8kk = ptrtoint i64* %ln8kj to i64
  %ln8kl = add i64 %ln8kk, -14
  store i64 %ln8kl, i64* %R3_Var
  %ln8km = load i64*, i64** %Sp_Var
  %ln8kn = getelementptr inbounds i64, i64* %ln8km, i32 1
  %ln8ko = bitcast i64* %ln8kn to i64*
  %ln8kp = load i64, i64* %ln8ko, !tbaa !2
  store i64 %ln8kp, i64* %R2_Var
  %ln8kq = load i64*, i64** %Sp_Var
  %ln8kr = getelementptr inbounds i64, i64* %ln8kq, i32 3
  %ln8ks = ptrtoint i64* %ln8kr to i64
  %ln8kt = inttoptr i64 %ln8ks to i64*
  store i64* %ln8kt, i64** %Sp_Var
  %ln8ku = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kv = load i64*, i64** %Sp_Var
  %ln8kw = load i64*, i64** %Hp_Var
  %ln8kx = load i64, i64* %R1_Var
  %ln8ky = load i64, i64* %R2_Var
  %ln8kz = load i64, i64* %R3_Var
  %ln8kA = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ku( i64* %Base_Arg, i64* %ln8kv, i64* %ln8kw, i64 %ln8kx, i64 %ln8ky, i64 %ln8kz, i64 %ln8kA, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89T:
  %ln8kB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8kB, !tbaa !5
  %ln8kC = load i64, i64* %R1_Var
  store i64 %ln8kC, i64* %R1_Var
  %ln8kD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kE = load i64*, i64** %Sp_Var
  %ln8kF = load i64*, i64** %Hp_Var
  %ln8kG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8kD( i64* %Base_Arg, i64* %ln8kE, i64* %ln8kF, i64 %ln8kG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFractionalPszuzdcrecip_closure_struct = type <{i64, i64}>
@Main_zdfFractionalPszuzdcrecip_closure$def = internal global %Main_zdfFractionalPszuzdcrecip_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcrecip_info$def to i64), i64 0}>
@Main_zdfFractionalPszuzdcrecip_closure = alias i8, bitcast (%Main_zdfFractionalPszuzdcrecip_closure_struct* @Main_zdfFractionalPszuzdcrecip_closure$def to i8*)
@s5bX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bX_info$def to i8*)
define internal ghccc void @s5bX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8l3:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8kR
c8kR:
  %ln8l4 = load i64*, i64** %Sp_Var
  %ln8l5 = getelementptr inbounds i64, i64* %ln8l4, i32 -4
  %ln8l6 = ptrtoint i64* %ln8l5 to i64
  %ln8l7 = icmp ult i64 %ln8l6, %SpLim_Arg
  %ln8l8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8l7, i1 0 )
  br i1 %ln8l8, label %c8kS, label %c8kT
c8kT:
  %ln8la = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8l9 = load i64*, i64** %Sp_Var
  %ln8lb = getelementptr inbounds i64, i64* %ln8l9, i32 -2
  store i64 %ln8la, i64* %ln8lb, !tbaa !2
  %ln8ld = load i64, i64* %R1_Var
  %ln8lc = load i64*, i64** %Sp_Var
  %ln8le = getelementptr inbounds i64, i64* %ln8lc, i32 -1
  store i64 %ln8ld, i64* %ln8le, !tbaa !2
  %ln8lg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kP_info$def to i64
  %ln8lf = load i64*, i64** %Sp_Var
  %ln8lh = getelementptr inbounds i64, i64* %ln8lf, i32 -3
  store i64 %ln8lg, i64* %ln8lh, !tbaa !2
  %ln8lk = load i64, i64* %R1_Var
  %ln8ll = add i64 %ln8lk, 16
  %ln8lm = inttoptr i64 %ln8ll to i64*
  %ln8ln = load i64, i64* %ln8lm, !tbaa !4
  store i64 %ln8ln, i64* %R2_Var
  %ln8lo = load i64*, i64** %Sp_Var
  %ln8lp = getelementptr inbounds i64, i64* %ln8lo, i32 -3
  %ln8lq = ptrtoint i64* %ln8lp to i64
  %ln8lr = inttoptr i64 %ln8lq to i64*
  store i64* %ln8lr, i64** %Sp_Var
  %ln8ls = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lt = load i64*, i64** %Sp_Var
  %ln8lu = load i64, i64* %R1_Var
  %ln8lv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ls( i64* %Base_Arg, i64* %ln8lt, i64* %Hp_Arg, i64 %ln8lu, i64 %ln8lv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8kS:
  %ln8lw = load i64, i64* %R1_Var
  store i64 %ln8lw, i64* %R1_Var
  %ln8lx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8ly = bitcast i64* %ln8lx to i64*
  %ln8lz = load i64, i64* %ln8ly, !tbaa !5
  %ln8lA = inttoptr i64 %ln8lz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lB = load i64*, i64** %Sp_Var
  %ln8lC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8lA( i64* %Base_Arg, i64* %ln8lB, i64* %Hp_Arg, i64 %ln8lC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8kP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kP_info$def to i8*)
define internal ghccc void @c8kP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8lD:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8kP
c8kP:
  store i64 %R1_Arg, i64* %R2_Var
  %ln8lF = ptrtoint i8* @stg_ap_p_info to i64
  %ln8lE = load i64*, i64** %Sp_Var
  %ln8lG = getelementptr inbounds i64, i64* %ln8lE, i32 -1
  store i64 %ln8lF, i64* %ln8lG, !tbaa !2
  %ln8lI = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8lJ = add i64 %ln8lI, 1
  %ln8lH = load i64*, i64** %Sp_Var
  %ln8lK = getelementptr inbounds i64, i64* %ln8lH, i32 0
  store i64 %ln8lJ, i64* %ln8lK, !tbaa !2
  %ln8lL = load i64*, i64** %Sp_Var
  %ln8lM = getelementptr inbounds i64, i64* %ln8lL, i32 -1
  %ln8lN = ptrtoint i64* %ln8lM to i64
  %ln8lO = inttoptr i64 %ln8lN to i64*
  store i64* %ln8lO, i64** %Sp_Var
  %ln8lP = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lQ = load i64*, i64** %Sp_Var
  %ln8lR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8lP( i64* %Base_Arg, i64* %ln8lQ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8lR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFractionalPszuzdcrecip_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcrecip_info$def to i8*)
define ghccc void @Main_zdfFractionalPszuzdcrecip_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcrecip_info$def to i64)) to i32),i32 0)}>
{
n8lS:
  %ls5bV = alloca i64, i32 1
  %ls5bU = alloca i64, i32 1
  %ls5bT = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8kY
c8kY:
  %ln8lT = load i64, i64* %R4_Var
  store i64 %ln8lT, i64* %ls5bV
  %ln8lU = load i64, i64* %R3_Var
  store i64 %ln8lU, i64* %ls5bU
  %ln8lV = load i64, i64* %R2_Var
  store i64 %ln8lV, i64* %ls5bT
  %ln8lW = load i64*, i64** %Sp_Var
  %ln8lX = getelementptr inbounds i64, i64* %ln8lW, i32 -3
  %ln8lY = ptrtoint i64* %ln8lX to i64
  %ln8lZ = icmp ult i64 %ln8lY, %SpLim_Arg
  %ln8m0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8lZ, i1 0 )
  br i1 %ln8m0, label %c8kZ, label %c8l0
c8l0:
  %ln8m1 = load i64*, i64** %Hp_Var
  %ln8m2 = getelementptr inbounds i64, i64* %ln8m1, i32 6
  %ln8m3 = ptrtoint i64* %ln8m2 to i64
  %ln8m4 = inttoptr i64 %ln8m3 to i64*
  store i64* %ln8m4, i64** %Hp_Var
  %ln8m5 = load i64*, i64** %Hp_Var
  %ln8m6 = ptrtoint i64* %ln8m5 to i64
  %ln8m7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8m8 = bitcast i64* %ln8m7 to i64*
  %ln8m9 = load i64, i64* %ln8m8, !tbaa !5
  %ln8ma = icmp ugt i64 %ln8m6, %ln8m9
  %ln8mb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8ma, i1 0 )
  br i1 %ln8mb, label %c8l2, label %c8l1
c8l1:
  %ln8md = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5bX_info$def to i64
  %ln8mc = load i64*, i64** %Hp_Var
  %ln8me = getelementptr inbounds i64, i64* %ln8mc, i32 -5
  store i64 %ln8md, i64* %ln8me, !tbaa !3
  %ln8mg = load i64, i64* %ls5bU
  %ln8mf = load i64*, i64** %Hp_Var
  %ln8mh = getelementptr inbounds i64, i64* %ln8mf, i32 -3
  store i64 %ln8mg, i64* %ln8mh, !tbaa !3
  %ln8mj = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8mi = load i64*, i64** %Hp_Var
  %ln8mk = getelementptr inbounds i64, i64* %ln8mi, i32 -2
  store i64 %ln8mj, i64* %ln8mk, !tbaa !3
  %ln8mm = load i64*, i64** %Hp_Var
  %ln8mn = getelementptr inbounds i64, i64* %ln8mm, i32 -5
  %ln8mo = ptrtoint i64* %ln8mn to i64
  %ln8ml = load i64*, i64** %Hp_Var
  %ln8mp = getelementptr inbounds i64, i64* %ln8ml, i32 -1
  store i64 %ln8mo, i64* %ln8mp, !tbaa !3
  %ln8mr = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8ms = add i64 %ln8mr, 1
  %ln8mq = load i64*, i64** %Hp_Var
  %ln8mt = getelementptr inbounds i64, i64* %ln8mq, i32 0
  store i64 %ln8ms, i64* %ln8mt, !tbaa !3
  %ln8mu = load i64, i64* %ls5bU
  store i64 %ln8mu, i64* %R3_Var
  %ln8mv = load i64, i64* %ls5bT
  store i64 %ln8mv, i64* %R2_Var
  %ln8mx = ptrtoint i8* @stg_ap_pp_info to i64
  %ln8mw = load i64*, i64** %Sp_Var
  %ln8my = getelementptr inbounds i64, i64* %ln8mw, i32 -3
  store i64 %ln8mx, i64* %ln8my, !tbaa !2
  %ln8mB = load i64*, i64** %Hp_Var
  %ln8mC = ptrtoint i64* %ln8mB to i64
  %ln8mD = add i64 %ln8mC, -14
  %ln8mz = load i64*, i64** %Sp_Var
  %ln8mE = getelementptr inbounds i64, i64* %ln8mz, i32 -2
  store i64 %ln8mD, i64* %ln8mE, !tbaa !2
  %ln8mG = load i64, i64* %ls5bV
  %ln8mF = load i64*, i64** %Sp_Var
  %ln8mH = getelementptr inbounds i64, i64* %ln8mF, i32 -1
  store i64 %ln8mG, i64* %ln8mH, !tbaa !2
  %ln8mI = load i64*, i64** %Sp_Var
  %ln8mJ = getelementptr inbounds i64, i64* %ln8mI, i32 -3
  %ln8mK = ptrtoint i64* %ln8mJ to i64
  %ln8mL = inttoptr i64 %ln8mK to i64*
  store i64* %ln8mL, i64** %Sp_Var
  %ln8mM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mN = load i64*, i64** %Sp_Var
  %ln8mO = load i64*, i64** %Hp_Var
  %ln8mP = load i64, i64* %R1_Var
  %ln8mQ = load i64, i64* %R2_Var
  %ln8mR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mM( i64* %Base_Arg, i64* %ln8mN, i64* %ln8mO, i64 %ln8mP, i64 %ln8mQ, i64 %ln8mR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8l2:
  %ln8mS = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8mS, !tbaa !5
  br label %c8kZ
c8kZ:
  %ln8mT = load i64, i64* %ls5bV
  store i64 %ln8mT, i64* %R4_Var
  %ln8mU = load i64, i64* %ls5bU
  store i64 %ln8mU, i64* %R3_Var
  %ln8mV = load i64, i64* %ls5bT
  store i64 %ln8mV, i64* %R2_Var
  %ln8mW = ptrtoint %Main_zdfFractionalPszuzdcrecip_closure_struct* @Main_zdfFractionalPszuzdcrecip_closure$def to i64
  store i64 %ln8mW, i64* %R1_Var
  %ln8mX = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8mY = bitcast i64* %ln8mX to i64*
  %ln8mZ = load i64, i64* %ln8mY, !tbaa !5
  %ln8n0 = inttoptr i64 %ln8mZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8n1 = load i64*, i64** %Sp_Var
  %ln8n2 = load i64*, i64** %Hp_Var
  %ln8n3 = load i64, i64* %R1_Var
  %ln8n4 = load i64, i64* %R2_Var
  %ln8n5 = load i64, i64* %R3_Var
  %ln8n6 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8n0( i64* %Base_Arg, i64* %ln8n1, i64* %ln8n2, i64 %ln8n3, i64 %ln8n4, i64 %ln8n5, i64 %ln8n6, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFractionalPs_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Main_zdfFractionalPs_closure$def = internal global %Main_zdfFractionalPs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPs_info$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%Main_zdfFractionalPszuzdcrecip_closure_struct* @Main_zdfFractionalPszuzdcrecip_closure$def to i64), i64 ptrtoint (%Main_zdfFractionalPszuzdcp1Fractional_closure_struct* @Main_zdfFractionalPszuzdcp1Fractional_closure$def to i64), i64 ptrtoint (%r55z_closure_struct* @r55z_closure$def to i64), i64 0}>
@Main_zdfFractionalPs_closure = alias i8, bitcast (%Main_zdfFractionalPs_closure_struct* @Main_zdfFractionalPs_closure$def to i8*)
@s5c3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c3_info$def to i8*)
define internal ghccc void @s5c3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFractionalPszuzdcrecip_closure_struct* @Main_zdfFractionalPszuzdcrecip_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c3_info$def to i64)) to i32),i32 0)}>
{
n8nD:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8ng
c8ng:
  %ln8nE = load i64, i64* %R2_Var
  store i64 %ln8nE, i64* %R4_Var
  %ln8nF = add i64 %R1_Arg, 15
  %ln8nG = inttoptr i64 %ln8nF to i64*
  %ln8nH = load i64, i64* %ln8nG, !tbaa !4
  store i64 %ln8nH, i64* %R3_Var
  %ln8nI = add i64 %R1_Arg, 7
  %ln8nJ = inttoptr i64 %ln8nI to i64*
  %ln8nK = load i64, i64* %ln8nJ, !tbaa !4
  store i64 %ln8nK, i64* %R2_Var
  %ln8nL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcrecip_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8nM = load i64, i64* %R2_Var
  %ln8nN = load i64, i64* %R3_Var
  %ln8nO = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8nL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8nM, i64 %ln8nN, i64 %ln8nO, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5c2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c2_info$def to i8*)
define internal ghccc void @s5c2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c2_info$def to i64)) to i32),i32 0)}>
{
n8nP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8nn
c8nn:
  %ln8nQ = load i64*, i64** %Sp_Var
  %ln8nR = getelementptr inbounds i64, i64* %ln8nQ, i32 -2
  %ln8nS = ptrtoint i64* %ln8nR to i64
  %ln8nT = icmp ult i64 %ln8nS, %SpLim_Arg
  %ln8nU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8nT, i1 0 )
  br i1 %ln8nU, label %c8no, label %c8np
c8np:
  %ln8nW = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8nV = load i64*, i64** %Sp_Var
  %ln8nX = getelementptr inbounds i64, i64* %ln8nV, i32 -2
  store i64 %ln8nW, i64* %ln8nX, !tbaa !2
  %ln8nZ = load i64, i64* %R1_Var
  %ln8nY = load i64*, i64** %Sp_Var
  %ln8o0 = getelementptr inbounds i64, i64* %ln8nY, i32 -1
  store i64 %ln8nZ, i64* %ln8o0, !tbaa !2
  %ln8o3 = load i64, i64* %R1_Var
  %ln8o4 = add i64 %ln8o3, 24
  %ln8o5 = inttoptr i64 %ln8o4 to i64*
  %ln8o6 = load i64, i64* %ln8o5, !tbaa !4
  store i64 %ln8o6, i64* %R3_Var
  %ln8o9 = load i64, i64* %R1_Var
  %ln8oa = add i64 %ln8o9, 16
  %ln8ob = inttoptr i64 %ln8oa to i64*
  %ln8oc = load i64, i64* %ln8ob, !tbaa !4
  store i64 %ln8oc, i64* %R2_Var
  %ln8od = load i64*, i64** %Sp_Var
  %ln8oe = getelementptr inbounds i64, i64* %ln8od, i32 -2
  %ln8of = ptrtoint i64* %ln8oe to i64
  %ln8og = inttoptr i64 %ln8of to i64*
  store i64* %ln8og, i64** %Sp_Var
  %ln8oh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8oi = load i64*, i64** %Sp_Var
  %ln8oj = load i64, i64* %R1_Var
  %ln8ok = load i64, i64* %R2_Var
  %ln8ol = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8oh( i64* %Base_Arg, i64* %ln8oi, i64* %Hp_Arg, i64 %ln8oj, i64 %ln8ok, i64 %ln8ol, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8no:
  %ln8om = load i64, i64* %R1_Var
  store i64 %ln8om, i64* %R1_Var
  %ln8on = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8oo = bitcast i64* %ln8on to i64*
  %ln8op = load i64, i64* %ln8oo, !tbaa !5
  %ln8oq = inttoptr i64 %ln8op to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8or = load i64*, i64** %Sp_Var
  %ln8os = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8oq( i64* %Base_Arg, i64* %ln8or, i64* %Hp_Arg, i64 %ln8os, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5c1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c1_info$def to i8*)
define internal ghccc void @s5c1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFractionalPszuzdcp1Fractional_closure_struct* @Main_zdfFractionalPszuzdcp1Fractional_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c1_info$def to i64)) to i32),i32 0)}>
{
n8ot:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8nu
c8nu:
  %ln8ou = load i64*, i64** %Sp_Var
  %ln8ov = getelementptr inbounds i64, i64* %ln8ou, i32 -2
  %ln8ow = ptrtoint i64* %ln8ov to i64
  %ln8ox = icmp ult i64 %ln8ow, %SpLim_Arg
  %ln8oy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8ox, i1 0 )
  br i1 %ln8oy, label %c8nv, label %c8nw
c8nw:
  %ln8oA = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8oz = load i64*, i64** %Sp_Var
  %ln8oB = getelementptr inbounds i64, i64* %ln8oz, i32 -2
  store i64 %ln8oA, i64* %ln8oB, !tbaa !2
  %ln8oD = load i64, i64* %R1_Var
  %ln8oC = load i64*, i64** %Sp_Var
  %ln8oE = getelementptr inbounds i64, i64* %ln8oC, i32 -1
  store i64 %ln8oD, i64* %ln8oE, !tbaa !2
  %ln8oH = load i64, i64* %R1_Var
  %ln8oI = add i64 %ln8oH, 24
  %ln8oJ = inttoptr i64 %ln8oI to i64*
  %ln8oK = load i64, i64* %ln8oJ, !tbaa !4
  store i64 %ln8oK, i64* %R3_Var
  %ln8oN = load i64, i64* %R1_Var
  %ln8oO = add i64 %ln8oN, 16
  %ln8oP = inttoptr i64 %ln8oO to i64*
  %ln8oQ = load i64, i64* %ln8oP, !tbaa !4
  store i64 %ln8oQ, i64* %R2_Var
  %ln8oR = load i64*, i64** %Sp_Var
  %ln8oS = getelementptr inbounds i64, i64* %ln8oR, i32 -2
  %ln8oT = ptrtoint i64* %ln8oS to i64
  %ln8oU = inttoptr i64 %ln8oT to i64*
  store i64* %ln8oU, i64** %Sp_Var
  %ln8oV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPszuzdcp1Fractional_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8oW = load i64*, i64** %Sp_Var
  %ln8oX = load i64, i64* %R1_Var
  %ln8oY = load i64, i64* %R2_Var
  %ln8oZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8oV( i64* %Base_Arg, i64* %ln8oW, i64* %Hp_Arg, i64 %ln8oX, i64 %ln8oY, i64 %ln8oZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8nv:
  %ln8p0 = load i64, i64* %R1_Var
  store i64 %ln8p0, i64* %R1_Var
  %ln8p1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8p2 = bitcast i64* %ln8p1 to i64*
  %ln8p3 = load i64, i64* %ln8p2, !tbaa !5
  %ln8p4 = inttoptr i64 %ln8p3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8p5 = load i64*, i64** %Sp_Var
  %ln8p6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8p4( i64* %Base_Arg, i64* %ln8p5, i64* %Hp_Arg, i64 %ln8p6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFractionalPs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPs_info$def to i8*)
define ghccc void @Main_zdfFractionalPs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 4, i32 14, i32 0}>
{
n8p7:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8ny
c8ny:
  %ln8p8 = load i64*, i64** %Hp_Var
  %ln8p9 = getelementptr inbounds i64, i64* %ln8p8, i32 16
  %ln8pa = ptrtoint i64* %ln8p9 to i64
  %ln8pb = inttoptr i64 %ln8pa to i64*
  store i64* %ln8pb, i64** %Hp_Var
  %ln8pc = load i64*, i64** %Hp_Var
  %ln8pd = ptrtoint i64* %ln8pc to i64
  %ln8pe = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8pf = bitcast i64* %ln8pe to i64*
  %ln8pg = load i64, i64* %ln8pf, !tbaa !5
  %ln8ph = icmp ugt i64 %ln8pd, %ln8pg
  %ln8pi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8ph, i1 0 )
  br i1 %ln8pi, label %c8nC, label %c8nB
c8nB:
  %ln8pk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c3_info$def to i64
  %ln8pj = load i64*, i64** %Hp_Var
  %ln8pl = getelementptr inbounds i64, i64* %ln8pj, i32 -15
  store i64 %ln8pk, i64* %ln8pl, !tbaa !3
  %ln8pn = load i64, i64* %R2_Var
  %ln8pm = load i64*, i64** %Hp_Var
  %ln8po = getelementptr inbounds i64, i64* %ln8pm, i32 -14
  store i64 %ln8pn, i64* %ln8po, !tbaa !3
  %ln8pq = load i64, i64* %R3_Var
  %ln8pp = load i64*, i64** %Hp_Var
  %ln8pr = getelementptr inbounds i64, i64* %ln8pp, i32 -13
  store i64 %ln8pq, i64* %ln8pr, !tbaa !3
  %ln8pt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c2_info$def to i64
  %ln8ps = load i64*, i64** %Hp_Var
  %ln8pu = getelementptr inbounds i64, i64* %ln8ps, i32 -12
  store i64 %ln8pt, i64* %ln8pu, !tbaa !3
  %ln8pw = load i64, i64* %R2_Var
  %ln8pv = load i64*, i64** %Hp_Var
  %ln8px = getelementptr inbounds i64, i64* %ln8pv, i32 -10
  store i64 %ln8pw, i64* %ln8px, !tbaa !3
  %ln8pz = load i64, i64* %R3_Var
  %ln8py = load i64*, i64** %Hp_Var
  %ln8pA = getelementptr inbounds i64, i64* %ln8py, i32 -9
  store i64 %ln8pz, i64* %ln8pA, !tbaa !3
  %ln8pC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5c1_info$def to i64
  %ln8pB = load i64*, i64** %Hp_Var
  %ln8pD = getelementptr inbounds i64, i64* %ln8pB, i32 -8
  store i64 %ln8pC, i64* %ln8pD, !tbaa !3
  %ln8pF = load i64, i64* %R2_Var
  %ln8pE = load i64*, i64** %Hp_Var
  %ln8pG = getelementptr inbounds i64, i64* %ln8pE, i32 -6
  store i64 %ln8pF, i64* %ln8pG, !tbaa !3
  %ln8pI = load i64, i64* %R3_Var
  %ln8pH = load i64*, i64** %Hp_Var
  %ln8pJ = getelementptr inbounds i64, i64* %ln8pH, i32 -5
  store i64 %ln8pI, i64* %ln8pJ, !tbaa !3
  %ln8pL = ptrtoint i8* @base_GHCziReal_CZCFractional_con_info to i64
  %ln8pK = load i64*, i64** %Hp_Var
  %ln8pM = getelementptr inbounds i64, i64* %ln8pK, i32 -4
  store i64 %ln8pL, i64* %ln8pM, !tbaa !3
  %ln8pO = load i64*, i64** %Hp_Var
  %ln8pP = getelementptr inbounds i64, i64* %ln8pO, i32 -8
  %ln8pQ = ptrtoint i64* %ln8pP to i64
  %ln8pN = load i64*, i64** %Hp_Var
  %ln8pR = getelementptr inbounds i64, i64* %ln8pN, i32 -3
  store i64 %ln8pQ, i64* %ln8pR, !tbaa !3
  %ln8pT = load i64*, i64** %Hp_Var
  %ln8pU = getelementptr inbounds i64, i64* %ln8pT, i32 -12
  %ln8pV = ptrtoint i64* %ln8pU to i64
  %ln8pS = load i64*, i64** %Hp_Var
  %ln8pW = getelementptr inbounds i64, i64* %ln8pS, i32 -2
  store i64 %ln8pV, i64* %ln8pW, !tbaa !3
  %ln8pZ = load i64*, i64** %Hp_Var
  %ln8q0 = ptrtoint i64* %ln8pZ to i64
  %ln8q1 = add i64 %ln8q0, -119
  %ln8pX = load i64*, i64** %Hp_Var
  %ln8q2 = getelementptr inbounds i64, i64* %ln8pX, i32 -1
  store i64 %ln8q1, i64* %ln8q2, !tbaa !3
  %ln8q4 = ptrtoint %r55z_closure_struct* @r55z_closure$def to i64
  %ln8q3 = load i64*, i64** %Hp_Var
  %ln8q5 = getelementptr inbounds i64, i64* %ln8q3, i32 0
  store i64 %ln8q4, i64* %ln8q5, !tbaa !3
  %ln8q7 = load i64*, i64** %Hp_Var
  %ln8q8 = ptrtoint i64* %ln8q7 to i64
  %ln8q9 = add i64 %ln8q8, -31
  store i64 %ln8q9, i64* %R1_Var
  %ln8qa = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8qb = bitcast i64* %ln8qa to i64*
  %ln8qc = load i64, i64* %ln8qb, !tbaa !2
  %ln8qd = inttoptr i64 %ln8qc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qe = load i64*, i64** %Hp_Var
  %ln8qf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qd( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8qe, i64 %ln8qf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8nC:
  %ln8qg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %ln8qg, !tbaa !5
  %ln8qh = load i64, i64* %R3_Var
  store i64 %ln8qh, i64* %R3_Var
  %ln8qi = load i64, i64* %R2_Var
  store i64 %ln8qi, i64* %R2_Var
  %ln8qj = ptrtoint %Main_zdfFractionalPs_closure_struct* @Main_zdfFractionalPs_closure$def to i64
  store i64 %ln8qj, i64* %R1_Var
  %ln8qk = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8ql = bitcast i64* %ln8qk to i64*
  %ln8qm = load i64, i64* %ln8ql, !tbaa !5
  %ln8qn = inttoptr i64 %ln8qm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qo = load i64*, i64** %Hp_Var
  %ln8qp = load i64, i64* %R1_Var
  %ln8qq = load i64, i64* %R2_Var
  %ln8qr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qn( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8qo, i64 %ln8qp, i64 %ln8qq, i64 %ln8qr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u8t7_srt_struct = type <{i64, i64, i64, i64}>
%_u8t8_srt_struct = type <{i64, i64, i64, i64}>
%_u8t9_srt_struct = type <{i64, i64, i64, i64}>
%_u8ta_srt_struct = type <{i64, i64, i64, i64}>
%Main_revertzuzdsrevert_closure_struct = type <{i64, i64}>
@_u8t7_srt$def = internal global %_u8t7_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64), i64 ptrtoint (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i64), i64 0}>
@_u8t7_srt = internal alias i8, bitcast (%_u8t7_srt_struct* @_u8t7_srt$def to i8*)
@_u8t8_srt$def = internal global %_u8t8_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerNegate_closure to i64), i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64), i64 0}>
@_u8t8_srt = internal alias i8, bitcast (%_u8t8_srt_struct* @_u8t8_srt$def to i8*)
@_u8t9_srt$def = internal global %_u8t9_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_revert1_closure_struct* @Main_revert1_closure$def to i64), i64 ptrtoint (i8* @_u8t8_srt to i64), i64 0}>
@_u8t9_srt = internal alias i8, bitcast (%_u8t9_srt_struct* @_u8t9_srt$def to i8*)
@_u8ta_srt$def = internal global %_u8ta_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @_u8t7_srt to i64), i64 ptrtoint (i8* @_u8t9_srt to i64), i64 0}>
@_u8ta_srt = internal alias i8, bitcast (%_u8ta_srt_struct* @_u8ta_srt$def to i8*)
@Main_revertzuzdsrevert_closure$def = internal global %Main_revertzuzdsrevert_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revertzuzdsrevert_info$def to i64), i64 0}>
@Main_revertzuzdsrevert_closure = alias i8, bitcast (%Main_revertzuzdsrevert_closure_struct* @Main_revertzuzdsrevert_closure$def to i8*)
@s5dQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dQ_info$def to i8*)
define internal ghccc void @s5dQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dQ_info$def to i64)) to i32),i32 0)}>
{
n8tb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8r4
c8r4:
  %ln8tc = load i64*, i64** %Sp_Var
  %ln8td = getelementptr inbounds i64, i64* %ln8tc, i32 -3
  %ln8te = ptrtoint i64* %ln8td to i64
  %ln8tf = icmp ult i64 %ln8te, %SpLim_Arg
  %ln8tg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8tf, i1 0 )
  br i1 %ln8tg, label %c8ra, label %c8rb
c8rb:
  %ln8ti = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8th = load i64*, i64** %Sp_Var
  %ln8tj = getelementptr inbounds i64, i64* %ln8th, i32 -2
  store i64 %ln8ti, i64* %ln8tj, !tbaa !2
  %ln8tl = load i64, i64* %R1_Var
  %ln8tk = load i64*, i64** %Sp_Var
  %ln8tm = getelementptr inbounds i64, i64* %ln8tk, i32 -1
  store i64 %ln8tl, i64* %ln8tm, !tbaa !2
  %ln8to = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r1_info$def to i64
  %ln8tn = load i64*, i64** %Sp_Var
  %ln8tp = getelementptr inbounds i64, i64* %ln8tn, i32 -3
  store i64 %ln8to, i64* %ln8tp, !tbaa !2
  %ln8ts = load i64, i64* %R1_Var
  %ln8tt = add i64 %ln8ts, 16
  %ln8tu = inttoptr i64 %ln8tt to i64*
  %ln8tv = load i64, i64* %ln8tu, !tbaa !4
  store i64 %ln8tv, i64* %R1_Var
  %ln8tw = load i64*, i64** %Sp_Var
  %ln8tx = getelementptr inbounds i64, i64* %ln8tw, i32 -3
  %ln8ty = ptrtoint i64* %ln8tx to i64
  %ln8tz = inttoptr i64 %ln8ty to i64*
  store i64* %ln8tz, i64** %Sp_Var
  %ln8tA = load i64, i64* %R1_Var
  %ln8tB = and i64 %ln8tA, 7
  %ln8tC = icmp ne i64 %ln8tB, 0
  br i1 %ln8tC, label %u8rg, label %c8r2
c8r2:
  %ln8tE = load i64, i64* %R1_Var
  %ln8tF = inttoptr i64 %ln8tE to i64*
  %ln8tG = load i64, i64* %ln8tF, !tbaa !4
  %ln8tH = inttoptr i64 %ln8tG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tI = load i64*, i64** %Sp_Var
  %ln8tJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tH( i64* %Base_Arg, i64* %ln8tI, i64* %Hp_Arg, i64 %ln8tJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8rg:
  %ln8tK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tL = load i64*, i64** %Sp_Var
  %ln8tM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tK( i64* %Base_Arg, i64* %ln8tL, i64* %Hp_Arg, i64 %ln8tM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ra:
  %ln8tN = load i64, i64* %R1_Var
  store i64 %ln8tN, i64* %R1_Var
  %ln8tO = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8tP = bitcast i64* %ln8tO to i64*
  %ln8tQ = load i64, i64* %ln8tP, !tbaa !5
  %ln8tR = inttoptr i64 %ln8tQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tS = load i64*, i64** %Sp_Var
  %ln8tT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tR( i64* %Base_Arg, i64* %ln8tS, i64* %Hp_Arg, i64 %ln8tT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8r1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r1_info$def to i8*)
define internal ghccc void @c8r1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczs_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r1_info$def to i64)) to i32),i32 0)}>
{
n8tU:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8r1
c8r1:
  %ln8tV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r7_info$def to i64
  %ln8tW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8tV, i64* %ln8tW, !tbaa !2
  %ln8tX = add i64 %R1_Arg, 15
  %ln8tY = inttoptr i64 %ln8tX to i64*
  %ln8tZ = load i64, i64* %ln8tY, !tbaa !4
  store i64 %ln8tZ, i64* %R5_Var
  %ln8u0 = add i64 %R1_Arg, 7
  %ln8u1 = inttoptr i64 %ln8u0 to i64*
  %ln8u2 = load i64, i64* %ln8u1, !tbaa !4
  store i64 %ln8u2, i64* %R4_Var
  %ln8u3 = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln8u4 = add i64 %ln8u3, 1
  store i64 %ln8u4, i64* %R3_Var
  %ln8u5 = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8u6 = add i64 %ln8u5, 1
  store i64 %ln8u6, i64* %R2_Var
  %ln8u7 = bitcast i8* @base_GHCziReal_zdwzdszdczs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8u8 = load i64, i64* %R2_Var
  %ln8u9 = load i64, i64* %R3_Var
  %ln8ua = load i64, i64* %R4_Var
  %ln8ub = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8u7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8u8, i64 %ln8u9, i64 %ln8ua, i64 %ln8ub, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8r7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r7_info$def to i8*)
define internal ghccc void @c8r7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8uc:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8r7
c8r7:
  %ln8ud = load i64*, i64** %Hp_Var
  %ln8ue = getelementptr inbounds i64, i64* %ln8ud, i32 3
  %ln8uf = ptrtoint i64* %ln8ue to i64
  %ln8ug = inttoptr i64 %ln8uf to i64*
  store i64* %ln8ug, i64** %Hp_Var
  %ln8uh = load i64*, i64** %Hp_Var
  %ln8ui = ptrtoint i64* %ln8uh to i64
  %ln8uj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8uk = bitcast i64* %ln8uj to i64*
  %ln8ul = load i64, i64* %ln8uk, !tbaa !5
  %ln8um = icmp ugt i64 %ln8ui, %ln8ul
  %ln8un = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8um, i1 0 )
  br i1 %ln8un, label %c8rf, label %c8re
c8re:
  %ln8up = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln8uo = load i64*, i64** %Hp_Var
  %ln8uq = getelementptr inbounds i64, i64* %ln8uo, i32 -2
  store i64 %ln8up, i64* %ln8uq, !tbaa !3
  %ln8us = load i64, i64* %R1_Var
  %ln8ur = load i64*, i64** %Hp_Var
  %ln8ut = getelementptr inbounds i64, i64* %ln8ur, i32 -1
  store i64 %ln8us, i64* %ln8ut, !tbaa !3
  %ln8uv = load i64, i64* %R2_Var
  %ln8uu = load i64*, i64** %Hp_Var
  %ln8uw = getelementptr inbounds i64, i64* %ln8uu, i32 0
  store i64 %ln8uv, i64* %ln8uw, !tbaa !3
  %ln8uy = load i64*, i64** %Hp_Var
  %ln8uz = ptrtoint i64* %ln8uy to i64
  %ln8uA = add i64 %ln8uz, -15
  store i64 %ln8uA, i64* %R1_Var
  %ln8uB = load i64*, i64** %Sp_Var
  %ln8uC = getelementptr inbounds i64, i64* %ln8uB, i32 1
  %ln8uD = ptrtoint i64* %ln8uC to i64
  %ln8uE = inttoptr i64 %ln8uD to i64*
  store i64* %ln8uE, i64** %Sp_Var
  %ln8uF = load i64*, i64** %Sp_Var
  %ln8uG = getelementptr inbounds i64, i64* %ln8uF, i32 0
  %ln8uH = bitcast i64* %ln8uG to i64*
  %ln8uI = load i64, i64* %ln8uH, !tbaa !2
  %ln8uJ = inttoptr i64 %ln8uI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uK = load i64*, i64** %Sp_Var
  %ln8uL = load i64*, i64** %Hp_Var
  %ln8uM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uJ( i64* %Base_Arg, i64* %ln8uK, i64* %ln8uL, i64 %ln8uM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rf:
  %ln8uN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8uN, !tbaa !5
  %ln8uO = load i64, i64* %R2_Var
  store i64 %ln8uO, i64* %R2_Var
  %ln8uP = load i64, i64* %R1_Var
  store i64 %ln8uP, i64* %R1_Var
  %ln8uQ = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uR = load i64*, i64** %Sp_Var
  %ln8uS = load i64*, i64** %Hp_Var
  %ln8uT = load i64, i64* %R1_Var
  %ln8uU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uQ( i64* %Base_Arg, i64* %ln8uR, i64* %ln8uS, i64 %ln8uT, i64 %ln8uU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5dJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dJ_info$def to i8*)
define internal ghccc void @s5dJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8t8_srt_struct* @_u8t8_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dJ_info$def to i64)) to i32),i32 0)}>
{
n8uV:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8rp
c8rp:
  %ln8uW = load i64*, i64** %Sp_Var
  %ln8uX = getelementptr inbounds i64, i64* %ln8uW, i32 -4
  %ln8uY = ptrtoint i64* %ln8uX to i64
  %ln8uZ = icmp ult i64 %ln8uY, %SpLim_Arg
  %ln8v0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8uZ, i1 0 )
  br i1 %ln8v0, label %c8rE, label %c8rF
c8rF:
  %ln8v2 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8v1 = load i64*, i64** %Sp_Var
  %ln8v3 = getelementptr inbounds i64, i64* %ln8v1, i32 -2
  store i64 %ln8v2, i64* %ln8v3, !tbaa !2
  %ln8v5 = load i64, i64* %R1_Var
  %ln8v4 = load i64*, i64** %Sp_Var
  %ln8v6 = getelementptr inbounds i64, i64* %ln8v4, i32 -1
  store i64 %ln8v5, i64* %ln8v6, !tbaa !2
  %ln8v8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rm_info$def to i64
  %ln8v7 = load i64*, i64** %Sp_Var
  %ln8v9 = getelementptr inbounds i64, i64* %ln8v7, i32 -3
  store i64 %ln8v8, i64* %ln8v9, !tbaa !2
  %ln8vc = load i64, i64* %R1_Var
  %ln8vd = add i64 %ln8vc, 16
  %ln8ve = inttoptr i64 %ln8vd to i64*
  %ln8vf = load i64, i64* %ln8ve, !tbaa !4
  store i64 %ln8vf, i64* %R1_Var
  %ln8vg = load i64*, i64** %Sp_Var
  %ln8vh = getelementptr inbounds i64, i64* %ln8vg, i32 -3
  %ln8vi = ptrtoint i64* %ln8vh to i64
  %ln8vj = inttoptr i64 %ln8vi to i64*
  store i64* %ln8vj, i64** %Sp_Var
  %ln8vk = load i64, i64* %R1_Var
  %ln8vl = and i64 %ln8vk, 7
  %ln8vm = icmp ne i64 %ln8vl, 0
  br i1 %ln8vm, label %u8rM, label %c8rn
c8rn:
  %ln8vo = load i64, i64* %R1_Var
  %ln8vp = inttoptr i64 %ln8vo to i64*
  %ln8vq = load i64, i64* %ln8vp, !tbaa !4
  %ln8vr = inttoptr i64 %ln8vq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vs = load i64*, i64** %Sp_Var
  %ln8vt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vr( i64* %Base_Arg, i64* %ln8vs, i64* %Hp_Arg, i64 %ln8vt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8rM:
  %ln8vu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vv = load i64*, i64** %Sp_Var
  %ln8vw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vu( i64* %Base_Arg, i64* %ln8vv, i64* %Hp_Arg, i64 %ln8vw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rE:
  %ln8vx = load i64, i64* %R1_Var
  store i64 %ln8vx, i64* %R1_Var
  %ln8vy = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8vz = bitcast i64* %ln8vy to i64*
  %ln8vA = load i64, i64* %ln8vz, !tbaa !5
  %ln8vB = inttoptr i64 %ln8vA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vC = load i64*, i64** %Sp_Var
  %ln8vD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vB( i64* %Base_Arg, i64* %ln8vC, i64* %Hp_Arg, i64 %ln8vD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rm_info$def to i8*)
define internal ghccc void @c8rm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8t8_srt_struct* @_u8t8_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rm_info$def to i64)) to i32),i32 0)}>
{
n8vE:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8rm
c8rm:
  %ln8vF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rs_info$def to i64
  %ln8vG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8vF, i64* %ln8vG, !tbaa !2
  %ln8vH = add i64 %R1_Arg, 15
  %ln8vI = inttoptr i64 %ln8vH to i64*
  %ln8vJ = load i64, i64* %ln8vI, !tbaa !4
  store i64 %ln8vJ, i64* %R5_Var
  %ln8vK = add i64 %R1_Arg, 7
  %ln8vL = inttoptr i64 %ln8vK to i64*
  %ln8vM = load i64, i64* %ln8vL, !tbaa !4
  store i64 %ln8vM, i64* %R4_Var
  %ln8vN = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln8vO = add i64 %ln8vN, 1
  store i64 %ln8vO, i64* %R3_Var
  %ln8vP = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8vQ = add i64 %ln8vP, 1
  store i64 %ln8vQ, i64* %R2_Var
  %ln8vR = bitcast i8* @base_GHCziReal_zdwzdszdczs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vS = load i64, i64* %R2_Var
  %ln8vT = load i64, i64* %R3_Var
  %ln8vU = load i64, i64* %R4_Var
  %ln8vV = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8vS, i64 %ln8vT, i64 %ln8vU, i64 %ln8vV, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rs_info$def to i8*)
define internal ghccc void @c8rs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerNegate_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rs_info$def to i64)) to i32),i32 0)}>
{
n8vW:
  %ls5dG = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8rs
c8rs:
  %ln8vY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ru_info$def to i64
  %ln8vX = load i64*, i64** %Sp_Var
  %ln8vZ = getelementptr inbounds i64, i64* %ln8vX, i32 -1
  store i64 %ln8vY, i64* %ln8vZ, !tbaa !2
  %ln8w0 = load i64, i64* %R2_Var
  store i64 %ln8w0, i64* %ls5dG
  store i64 %R1_Arg, i64* %R2_Var
  %ln8w2 = load i64, i64* %ls5dG
  %ln8w1 = load i64*, i64** %Sp_Var
  %ln8w3 = getelementptr inbounds i64, i64* %ln8w1, i32 0
  store i64 %ln8w2, i64* %ln8w3, !tbaa !2
  %ln8w4 = load i64*, i64** %Sp_Var
  %ln8w5 = getelementptr inbounds i64, i64* %ln8w4, i32 -1
  %ln8w6 = ptrtoint i64* %ln8w5 to i64
  %ln8w7 = inttoptr i64 %ln8w6 to i64*
  store i64* %ln8w7, i64** %Sp_Var
  %ln8w8 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerNegate_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8w9 = load i64*, i64** %Sp_Var
  %ln8wa = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8w8( i64* %Base_Arg, i64* %ln8w9, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8wa, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ru_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ru_info$def to i8*)
define internal ghccc void @c8ru_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8wb:
  %ls5dH = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ru
c8ru:
  %ln8wc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ry_info$def to i64
  %ln8wd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8wc, i64* %ln8wd, !tbaa !2
  %ln8we = load i64, i64* %R1_Var
  store i64 %ln8we, i64* %ls5dH
  %ln8wf = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8wg = bitcast i64* %ln8wf to i64*
  %ln8wh = load i64, i64* %ln8wg, !tbaa !2
  store i64 %ln8wh, i64* %R1_Var
  %ln8wi = load i64, i64* %ls5dH
  %ln8wj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8wi, i64* %ln8wj, !tbaa !2
  %ln8wk = load i64, i64* %R1_Var
  %ln8wl = and i64 %ln8wk, 7
  %ln8wm = icmp ne i64 %ln8wl, 0
  br i1 %ln8wm, label %u8rN, label %c8rz
c8rz:
  %ln8wo = load i64, i64* %R1_Var
  %ln8wp = inttoptr i64 %ln8wo to i64*
  %ln8wq = load i64, i64* %ln8wp, !tbaa !4
  %ln8wr = inttoptr i64 %ln8wq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ws = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8ws, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8rN:
  %ln8wt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ry_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8wu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ry_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ry_info$def to i8*)
define internal ghccc void @c8ry_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8wv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8ry
c8ry:
  %ln8ww = load i64*, i64** %Hp_Var
  %ln8wx = getelementptr inbounds i64, i64* %ln8ww, i32 3
  %ln8wy = ptrtoint i64* %ln8wx to i64
  %ln8wz = inttoptr i64 %ln8wy to i64*
  store i64* %ln8wz, i64** %Hp_Var
  %ln8wA = load i64*, i64** %Hp_Var
  %ln8wB = ptrtoint i64* %ln8wA to i64
  %ln8wC = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8wD = bitcast i64* %ln8wC to i64*
  %ln8wE = load i64, i64* %ln8wD, !tbaa !5
  %ln8wF = icmp ugt i64 %ln8wB, %ln8wE
  %ln8wG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8wF, i1 0 )
  br i1 %ln8wG, label %c8rL, label %c8rK
c8rK:
  %ln8wI = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln8wH = load i64*, i64** %Hp_Var
  %ln8wJ = getelementptr inbounds i64, i64* %ln8wH, i32 -2
  store i64 %ln8wI, i64* %ln8wJ, !tbaa !3
  %ln8wL = load i64*, i64** %Sp_Var
  %ln8wM = getelementptr inbounds i64, i64* %ln8wL, i32 1
  %ln8wN = bitcast i64* %ln8wM to i64*
  %ln8wO = load i64, i64* %ln8wN, !tbaa !2
  %ln8wK = load i64*, i64** %Hp_Var
  %ln8wP = getelementptr inbounds i64, i64* %ln8wK, i32 -1
  store i64 %ln8wO, i64* %ln8wP, !tbaa !3
  %ln8wR = load i64, i64* %R1_Var
  %ln8wQ = load i64*, i64** %Hp_Var
  %ln8wS = getelementptr inbounds i64, i64* %ln8wQ, i32 0
  store i64 %ln8wR, i64* %ln8wS, !tbaa !3
  %ln8wU = load i64*, i64** %Hp_Var
  %ln8wV = ptrtoint i64* %ln8wU to i64
  %ln8wW = add i64 %ln8wV, -15
  store i64 %ln8wW, i64* %R1_Var
  %ln8wX = load i64*, i64** %Sp_Var
  %ln8wY = getelementptr inbounds i64, i64* %ln8wX, i32 2
  %ln8wZ = ptrtoint i64* %ln8wY to i64
  %ln8x0 = inttoptr i64 %ln8wZ to i64*
  store i64* %ln8x0, i64** %Sp_Var
  %ln8x1 = load i64*, i64** %Sp_Var
  %ln8x2 = getelementptr inbounds i64, i64* %ln8x1, i32 0
  %ln8x3 = bitcast i64* %ln8x2 to i64*
  %ln8x4 = load i64, i64* %ln8x3, !tbaa !2
  %ln8x5 = inttoptr i64 %ln8x4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8x6 = load i64*, i64** %Sp_Var
  %ln8x7 = load i64*, i64** %Hp_Var
  %ln8x8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8x5( i64* %Base_Arg, i64* %ln8x6, i64* %ln8x7, i64 %ln8x8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rL:
  %ln8x9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8x9, !tbaa !5
  %ln8xa = load i64, i64* %R1_Var
  store i64 %ln8xa, i64* %R1_Var
  %ln8xb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xc = load i64*, i64** %Sp_Var
  %ln8xd = load i64*, i64** %Hp_Var
  %ln8xe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xb( i64* %Base_Arg, i64* %ln8xc, i64* %ln8xd, i64 %ln8xe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5dX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dX_info$def to i8*)
define internal ghccc void @s5dX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8t7_srt_struct* @_u8t7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dX_info$def to i64)) to i32),i32 0)}>
{
n8xf:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8s5
c8s5:
  %ln8xg = load i64*, i64** %Sp_Var
  %ln8xh = getelementptr inbounds i64, i64* %ln8xg, i32 -3
  %ln8xi = ptrtoint i64* %ln8xh to i64
  %ln8xj = icmp ult i64 %ln8xi, %SpLim_Arg
  %ln8xk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8xj, i1 0 )
  br i1 %ln8xk, label %c8s6, label %c8s7
c8s7:
  %ln8xm = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8xl = load i64*, i64** %Sp_Var
  %ln8xn = getelementptr inbounds i64, i64* %ln8xl, i32 -2
  store i64 %ln8xm, i64* %ln8xn, !tbaa !2
  %ln8xp = load i64, i64* %R1_Var
  %ln8xo = load i64*, i64** %Sp_Var
  %ln8xq = getelementptr inbounds i64, i64* %ln8xo, i32 -1
  store i64 %ln8xp, i64* %ln8xq, !tbaa !2
  %ln8xs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s3_info$def to i64
  %ln8xr = load i64*, i64** %Sp_Var
  %ln8xt = getelementptr inbounds i64, i64* %ln8xr, i32 -3
  store i64 %ln8xs, i64* %ln8xt, !tbaa !2
  %ln8xw = load i64, i64* %R1_Var
  %ln8xx = add i64 %ln8xw, 24
  %ln8xy = inttoptr i64 %ln8xx to i64*
  %ln8xz = load i64, i64* %ln8xy, !tbaa !4
  store i64 %ln8xz, i64* %R3_Var
  %ln8xC = load i64, i64* %R1_Var
  %ln8xD = add i64 %ln8xC, 16
  %ln8xE = inttoptr i64 %ln8xD to i64*
  %ln8xF = load i64, i64* %ln8xE, !tbaa !4
  store i64 %ln8xF, i64* %R2_Var
  %ln8xG = load i64*, i64** %Sp_Var
  %ln8xH = getelementptr inbounds i64, i64* %ln8xG, i32 -3
  %ln8xI = ptrtoint i64* %ln8xH to i64
  %ln8xJ = inttoptr i64 %ln8xI to i64*
  store i64* %ln8xJ, i64** %Sp_Var
  %ln8xK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_composezuzdscompose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xL = load i64*, i64** %Sp_Var
  %ln8xM = load i64, i64* %R1_Var
  %ln8xN = load i64, i64* %R2_Var
  %ln8xO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xK( i64* %Base_Arg, i64* %ln8xL, i64* %Hp_Arg, i64 %ln8xM, i64 %ln8xN, i64 %ln8xO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8s6:
  %ln8xP = load i64, i64* %R1_Var
  store i64 %ln8xP, i64* %R1_Var
  %ln8xQ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8xR = bitcast i64* %ln8xQ to i64*
  %ln8xS = load i64, i64* %ln8xR, !tbaa !5
  %ln8xT = inttoptr i64 %ln8xS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xU = load i64*, i64** %Sp_Var
  %ln8xV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xT( i64* %Base_Arg, i64* %ln8xU, i64* %Hp_Arg, i64 %ln8xV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8s3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s3_info$def to i8*)
define internal ghccc void @c8s3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8s3_info$def to i64)) to i32),i32 0)}>
{
n8xW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8s3
c8s3:
  store i64 %R1_Arg, i64* %R3_Var
  %ln8xX = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %ln8xY = add i64 %ln8xX, 2
  store i64 %ln8xY, i64* %R2_Var
  %ln8xZ = load i64*, i64** %Sp_Var
  %ln8y0 = getelementptr inbounds i64, i64* %ln8xZ, i32 1
  %ln8y1 = ptrtoint i64* %ln8y0 to i64
  %ln8y2 = inttoptr i64 %ln8y1 to i64*
  store i64* %ln8y2, i64** %Sp_Var
  %ln8y3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8y4 = load i64*, i64** %Sp_Var
  %ln8y5 = load i64, i64* %R2_Var
  %ln8y6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8y3( i64* %Base_Arg, i64* %ln8y4, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8y5, i64 %ln8y6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_revertzuzdsrevert_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revertzuzdsrevert_info$def to i8*)
define ghccc void @Main_revertzuzdsrevert_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8ta_srt_struct* @_u8ta_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revertzuzdsrevert_info$def to i64)) to i32),i32 0)}>
{
n8y7:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8sf
c8sf:
  %ln8y8 = load i64*, i64** %Sp_Var
  %ln8y9 = getelementptr inbounds i64, i64* %ln8y8, i32 -3
  %ln8ya = ptrtoint i64* %ln8y9 to i64
  %ln8yb = icmp ult i64 %ln8ya, %SpLim_Arg
  %ln8yc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8yb, i1 0 )
  br i1 %ln8yc, label %c8sg, label %c8sh
c8sh:
  %ln8ye = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qw_info$def to i64
  %ln8yd = load i64*, i64** %Sp_Var
  %ln8yf = getelementptr inbounds i64, i64* %ln8yd, i32 -1
  store i64 %ln8ye, i64* %ln8yf, !tbaa !2
  %ln8yg = load i64, i64* %R2_Var
  store i64 %ln8yg, i64* %R1_Var
  %ln8yh = load i64*, i64** %Sp_Var
  %ln8yi = getelementptr inbounds i64, i64* %ln8yh, i32 -1
  %ln8yj = ptrtoint i64* %ln8yi to i64
  %ln8yk = inttoptr i64 %ln8yj to i64*
  store i64* %ln8yk, i64** %Sp_Var
  %ln8yl = load i64, i64* %R1_Var
  %ln8ym = and i64 %ln8yl, 7
  %ln8yn = icmp ne i64 %ln8ym, 0
  br i1 %ln8yn, label %u8t5, label %c8qx
c8qx:
  %ln8yp = load i64, i64* %R1_Var
  %ln8yq = inttoptr i64 %ln8yp to i64*
  %ln8yr = load i64, i64* %ln8yq, !tbaa !4
  %ln8ys = inttoptr i64 %ln8yr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yt = load i64*, i64** %Sp_Var
  %ln8yu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ys( i64* %Base_Arg, i64* %ln8yt, i64* %Hp_Arg, i64 %ln8yu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8t5:
  %ln8yv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yw = load i64*, i64** %Sp_Var
  %ln8yx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yv( i64* %Base_Arg, i64* %ln8yw, i64* %Hp_Arg, i64 %ln8yx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sg:
  %ln8yy = load i64, i64* %R2_Var
  store i64 %ln8yy, i64* %R2_Var
  %ln8yz = ptrtoint %Main_revertzuzdsrevert_closure_struct* @Main_revertzuzdsrevert_closure$def to i64
  store i64 %ln8yz, i64* %R1_Var
  %ln8yA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8yB = bitcast i64* %ln8yA to i64*
  %ln8yC = load i64, i64* %ln8yB, !tbaa !5
  %ln8yD = inttoptr i64 %ln8yC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yE = load i64*, i64** %Sp_Var
  %ln8yF = load i64, i64* %R1_Var
  %ln8yG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yD( i64* %Base_Arg, i64* %ln8yE, i64* %Hp_Arg, i64 %ln8yF, i64 %ln8yG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8qw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qw_info$def to i8*)
define internal ghccc void @c8qw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8ta_srt_struct* @_u8ta_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qw_info$def to i64)) to i32),i32 0)}>
{
n8yH:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5ds = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8qw
c8qw:
  %ln8yI = load i64, i64* %R1_Var
  %ln8yJ = and i64 %ln8yI, 7
  switch i64 %ln8yJ, label %u8sT [i64 1, label %u8sT
i64 2, label %c8sd]
u8sT:
  %ln8yK = load i64*, i64** %Sp_Var
  %ln8yL = getelementptr inbounds i64, i64* %ln8yK, i32 1
  %ln8yM = ptrtoint i64* %ln8yL to i64
  %ln8yN = inttoptr i64 %ln8yM to i64*
  store i64* %ln8yN, i64** %Sp_Var
  %ln8yO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8sc$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yP = load i64*, i64** %Sp_Var
  %ln8yQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yO( i64* %Base_Arg, i64* %ln8yP, i64* %Hp_Arg, i64 %ln8yQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sd:
  %ln8yS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qC_info$def to i64
  %ln8yR = load i64*, i64** %Sp_Var
  %ln8yT = getelementptr inbounds i64, i64* %ln8yR, i32 -1
  store i64 %ln8yS, i64* %ln8yT, !tbaa !2
  %ln8yW = load i64, i64* %R1_Var
  %ln8yX = add i64 %ln8yW, 14
  %ln8yY = inttoptr i64 %ln8yX to i64*
  %ln8yZ = load i64, i64* %ln8yY, !tbaa !4
  store i64 %ln8yZ, i64* %ls5ds
  %ln8z2 = load i64, i64* %R1_Var
  %ln8z3 = add i64 %ln8z2, 6
  %ln8z4 = inttoptr i64 %ln8z3 to i64*
  %ln8z5 = load i64, i64* %ln8z4, !tbaa !4
  store i64 %ln8z5, i64* %R1_Var
  %ln8z7 = load i64, i64* %ls5ds
  %ln8z6 = load i64*, i64** %Sp_Var
  %ln8z8 = getelementptr inbounds i64, i64* %ln8z6, i32 0
  store i64 %ln8z7, i64* %ln8z8, !tbaa !2
  %ln8z9 = load i64*, i64** %Sp_Var
  %ln8za = getelementptr inbounds i64, i64* %ln8z9, i32 -1
  %ln8zb = ptrtoint i64* %ln8za to i64
  %ln8zc = inttoptr i64 %ln8zb to i64*
  store i64* %ln8zc, i64** %Sp_Var
  %ln8zd = load i64, i64* %R1_Var
  %ln8ze = and i64 %ln8zd, 7
  %ln8zf = icmp ne i64 %ln8ze, 0
  br i1 %ln8zf, label %u8sY, label %c8qD
c8qD:
  %ln8zh = load i64, i64* %R1_Var
  %ln8zi = inttoptr i64 %ln8zh to i64*
  %ln8zj = load i64, i64* %ln8zi, !tbaa !4
  %ln8zk = inttoptr i64 %ln8zj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zl = load i64*, i64** %Sp_Var
  %ln8zm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zk( i64* %Base_Arg, i64* %ln8zl, i64* %Hp_Arg, i64 %ln8zm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8sY:
  %ln8zn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qC_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zo = load i64*, i64** %Sp_Var
  %ln8zp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zn( i64* %Base_Arg, i64* %ln8zo, i64* %Hp_Arg, i64 %ln8zp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8qC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qC_info$def to i8*)
define internal ghccc void @c8qC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8ta_srt_struct* @_u8ta_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qC_info$def to i64)) to i32),i32 0)}>
{
n8zq:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8qC
c8qC:
  %ln8zs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rO_info$def to i64
  %ln8zr = load i64*, i64** %Sp_Var
  %ln8zt = getelementptr inbounds i64, i64* %ln8zr, i32 -1
  store i64 %ln8zs, i64* %ln8zt, !tbaa !2
  %ln8zu = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln8zv = add i64 %ln8zu, 1
  store i64 %ln8zv, i64* %R3_Var
  %ln8zw = add i64 %R1_Arg, 7
  %ln8zx = inttoptr i64 %ln8zw to i64*
  %ln8zy = load i64, i64* %ln8zx, !tbaa !4
  store i64 %ln8zy, i64* %R2_Var
  %ln8zA = add i64 %R1_Arg, 15
  %ln8zB = inttoptr i64 %ln8zA to i64*
  %ln8zC = load i64, i64* %ln8zB, !tbaa !4
  %ln8zz = load i64*, i64** %Sp_Var
  %ln8zD = getelementptr inbounds i64, i64* %ln8zz, i32 0
  store i64 %ln8zC, i64* %ln8zD, !tbaa !2
  %ln8zE = load i64*, i64** %Sp_Var
  %ln8zF = getelementptr inbounds i64, i64* %ln8zE, i32 -1
  %ln8zG = ptrtoint i64* %ln8zF to i64
  %ln8zH = inttoptr i64 %ln8zG to i64*
  store i64* %ln8zH, i64** %Sp_Var
  %ln8zI = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zJ = load i64*, i64** %Sp_Var
  %ln8zK = load i64, i64* %R2_Var
  %ln8zL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zI( i64* %Base_Arg, i64* %ln8zJ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8zK, i64 %ln8zL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rO_info$def to i8*)
define internal ghccc void @c8rO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8ta_srt_struct* @_u8ta_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rO_info$def to i64)) to i32),i32 0)}>
{
n8zM:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5dv = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8rO
c8rO:
  switch i64 %R1_Arg, label %u8sU [i64 1, label %c8sI]
u8sU:
  %ln8zN = load i64*, i64** %Sp_Var
  %ln8zO = getelementptr inbounds i64, i64* %ln8zN, i32 2
  %ln8zP = ptrtoint i64* %ln8zO to i64
  %ln8zQ = inttoptr i64 %ln8zP to i64*
  store i64* %ln8zQ, i64** %Sp_Var
  %ln8zR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5dw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zS = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zR( i64* %Base_Arg, i64* %ln8zS, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sI:
  %ln8zT = load i64*, i64** %Sp_Var
  %ln8zU = getelementptr inbounds i64, i64* %ln8zT, i32 1
  %ln8zV = bitcast i64* %ln8zU to i64*
  %ln8zW = load i64, i64* %ln8zV, !tbaa !2
  store i64 %ln8zW, i64* %ls5dv
  %ln8zY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rT_info$def to i64
  %ln8zX = load i64*, i64** %Sp_Var
  %ln8zZ = getelementptr inbounds i64, i64* %ln8zX, i32 1
  store i64 %ln8zY, i64* %ln8zZ, !tbaa !2
  %ln8A0 = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln8A1 = add i64 %ln8A0, 1
  store i64 %ln8A1, i64* %R3_Var
  %ln8A2 = load i64, i64* %ls5dv
  store i64 %ln8A2, i64* %R2_Var
  %ln8A3 = load i64*, i64** %Sp_Var
  %ln8A4 = getelementptr inbounds i64, i64* %ln8A3, i32 1
  %ln8A5 = ptrtoint i64* %ln8A4 to i64
  %ln8A6 = inttoptr i64 %ln8A5 to i64*
  store i64* %ln8A6, i64** %Sp_Var
  %ln8A7 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8A8 = load i64*, i64** %Sp_Var
  %ln8A9 = load i64, i64* %R2_Var
  %ln8Aa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8A7( i64* %Base_Arg, i64* %ln8A8, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8A9, i64 %ln8Aa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rT_info$def to i8*)
define internal ghccc void @c8rT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8ta_srt_struct* @_u8ta_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rT_info$def to i64)) to i32),i32 0)}>
{
n8Ab:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc8rY = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8rT
c8rT:
  %ln8Ac = load i64, i64* %R1_Var
  switch i64 %ln8Ac, label %u8sV [i64 1, label %c8sN]
u8sV:
  %ln8Ad = load i64*, i64** %Sp_Var
  %ln8Ae = getelementptr inbounds i64, i64* %ln8Ad, i32 1
  %ln8Af = ptrtoint i64* %ln8Ae to i64
  %ln8Ag = inttoptr i64 %ln8Af to i64*
  store i64* %ln8Ag, i64** %Sp_Var
  %ln8Ah = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5dw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ai = load i64*, i64** %Sp_Var
  %ln8Aj = load i64*, i64** %Hp_Var
  %ln8Ak = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ah( i64* %Base_Arg, i64* %ln8Ai, i64* %ln8Aj, i64 %ln8Ak, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sN:
  %ln8Al = load i64*, i64** %Hp_Var
  %ln8Am = getelementptr inbounds i64, i64* %ln8Al, i32 7
  %ln8An = ptrtoint i64* %ln8Am to i64
  %ln8Ao = inttoptr i64 %ln8An to i64*
  store i64* %ln8Ao, i64** %Hp_Var
  %ln8Ap = load i64*, i64** %Hp_Var
  %ln8Aq = ptrtoint i64* %ln8Ap to i64
  %ln8Ar = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8As = bitcast i64* %ln8Ar to i64*
  %ln8At = load i64, i64* %ln8As, !tbaa !5
  %ln8Au = icmp ugt i64 %ln8Aq, %ln8At
  %ln8Av = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Au, i1 0 )
  br i1 %ln8Av, label %c8sQ, label %c8sP
c8sP:
  %ln8Ax = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8Aw = load i64*, i64** %Hp_Var
  %ln8Ay = getelementptr inbounds i64, i64* %ln8Aw, i32 -6
  store i64 %ln8Ax, i64* %ln8Ay, !tbaa !3
  %ln8AA = ptrtoint %Main_integral1_closure_struct* @Main_integral1_closure$def to i64
  %ln8AB = add i64 %ln8AA, 1
  %ln8Az = load i64*, i64** %Hp_Var
  %ln8AC = getelementptr inbounds i64, i64* %ln8Az, i32 -5
  store i64 %ln8AB, i64* %ln8AC, !tbaa !3
  %ln8AE = load i64*, i64** %Hp_Var
  %ln8AF = getelementptr inbounds i64, i64* %ln8AE, i32 -3
  %ln8AG = ptrtoint i64* %ln8AF to i64
  %ln8AD = load i64*, i64** %Hp_Var
  %ln8AH = getelementptr inbounds i64, i64* %ln8AD, i32 -4
  store i64 %ln8AG, i64* %ln8AH, !tbaa !3
  %ln8AJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dX_info$def to i64
  %ln8AI = load i64*, i64** %Hp_Var
  %ln8AK = getelementptr inbounds i64, i64* %ln8AI, i32 -3
  store i64 %ln8AJ, i64* %ln8AK, !tbaa !3
  %ln8AM = load i64*, i64** %Sp_Var
  %ln8AN = getelementptr inbounds i64, i64* %ln8AM, i32 1
  %ln8AO = bitcast i64* %ln8AN to i64*
  %ln8AP = load i64, i64* %ln8AO, !tbaa !2
  %ln8AL = load i64*, i64** %Hp_Var
  %ln8AQ = getelementptr inbounds i64, i64* %ln8AL, i32 -1
  store i64 %ln8AP, i64* %ln8AQ, !tbaa !3
  %ln8AS = load i64*, i64** %Hp_Var
  %ln8AT = ptrtoint i64* %ln8AS to i64
  %ln8AU = add i64 %ln8AT, -46
  store i64 %ln8AU, i64* %lc8rY
  %ln8AW = load i64, i64* %lc8rY
  %ln8AV = load i64*, i64** %Hp_Var
  %ln8AX = getelementptr inbounds i64, i64* %ln8AV, i32 0
  store i64 %ln8AW, i64* %ln8AX, !tbaa !3
  %ln8AY = load i64, i64* %lc8rY
  store i64 %ln8AY, i64* %R1_Var
  %ln8AZ = load i64*, i64** %Sp_Var
  %ln8B0 = getelementptr inbounds i64, i64* %ln8AZ, i32 2
  %ln8B1 = ptrtoint i64* %ln8B0 to i64
  %ln8B2 = inttoptr i64 %ln8B1 to i64*
  store i64* %ln8B2, i64** %Sp_Var
  %ln8B3 = load i64*, i64** %Sp_Var
  %ln8B4 = getelementptr inbounds i64, i64* %ln8B3, i32 0
  %ln8B5 = bitcast i64* %ln8B4 to i64*
  %ln8B6 = load i64, i64* %ln8B5, !tbaa !2
  %ln8B7 = inttoptr i64 %ln8B6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8B8 = load i64*, i64** %Sp_Var
  %ln8B9 = load i64*, i64** %Hp_Var
  %ln8Ba = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8B7( i64* %Base_Arg, i64* %ln8B8, i64* %ln8B9, i64 %ln8Ba, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sQ:
  %ln8Bb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln8Bb, !tbaa !5
  %ln8Bc = load i64, i64* %R1_Var
  store i64 %ln8Bc, i64* %R1_Var
  %ln8Bd = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Be = load i64*, i64** %Sp_Var
  %ln8Bf = load i64*, i64** %Hp_Var
  %ln8Bg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bd( i64* %Base_Arg, i64* %ln8Be, i64* %ln8Bf, i64 %ln8Bg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s5dw = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5dw$def to i8*)
define internal ghccc void @_s5dw$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n8Bh:
  %ls5ds = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %s5dw
s5dw:
  %ln8Bi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8Bj = bitcast i64* %ln8Bi to i64*
  %ln8Bk = load i64, i64* %ln8Bj, !tbaa !2
  store i64 %ln8Bk, i64* %ls5ds
  %ln8Bl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qM_info$def to i64
  %ln8Bm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Bl, i64* %ln8Bm, !tbaa !2
  %ln8Bn = load i64, i64* %ls5ds
  store i64 %ln8Bn, i64* %R1_Var
  %ln8Bo = load i64, i64* %R1_Var
  %ln8Bp = and i64 %ln8Bo, 7
  %ln8Bq = icmp ne i64 %ln8Bp, 0
  br i1 %ln8Bq, label %u8t6, label %c8qN
c8qN:
  %ln8Bs = load i64, i64* %R1_Var
  %ln8Bt = inttoptr i64 %ln8Bs to i64*
  %ln8Bu = load i64, i64* %ln8Bt, !tbaa !4
  %ln8Bv = inttoptr i64 %ln8Bu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Bw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8t6:
  %ln8Bx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8By = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8By, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8qM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qM_info$def to i8*)
define internal ghccc void @c8qM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8t9_srt_struct* @_u8t9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qM_info$def to i64)) to i32),i32 0)}>
{
n8Bz:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5dy = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8qM
c8qM:
  %ln8BA = load i64, i64* %R1_Var
  %ln8BB = and i64 %ln8BA, 7
  switch i64 %ln8BB, label %u8sW [i64 1, label %u8sW
i64 2, label %c8ss]
u8sW:
  %ln8BC = load i64*, i64** %Sp_Var
  %ln8BD = getelementptr inbounds i64, i64* %ln8BC, i32 1
  %ln8BE = ptrtoint i64* %ln8BD to i64
  %ln8BF = inttoptr i64 %ln8BE to i64*
  store i64* %ln8BF, i64** %Sp_Var
  %ln8BG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8sc$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8BH = load i64*, i64** %Sp_Var
  %ln8BI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8BG( i64* %Base_Arg, i64* %ln8BH, i64* %Hp_Arg, i64 %ln8BI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ss:
  %ln8BK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qS_info$def to i64
  %ln8BJ = load i64*, i64** %Sp_Var
  %ln8BL = getelementptr inbounds i64, i64* %ln8BJ, i32 -1
  store i64 %ln8BK, i64* %ln8BL, !tbaa !2
  %ln8BO = load i64, i64* %R1_Var
  %ln8BP = add i64 %ln8BO, 6
  %ln8BQ = inttoptr i64 %ln8BP to i64*
  %ln8BR = load i64, i64* %ln8BQ, !tbaa !4
  store i64 %ln8BR, i64* %ls5dy
  %ln8BU = load i64, i64* %R1_Var
  %ln8BV = add i64 %ln8BU, 14
  %ln8BW = inttoptr i64 %ln8BV to i64*
  %ln8BX = load i64, i64* %ln8BW, !tbaa !4
  store i64 %ln8BX, i64* %R1_Var
  %ln8BZ = load i64, i64* %ls5dy
  %ln8BY = load i64*, i64** %Sp_Var
  %ln8C0 = getelementptr inbounds i64, i64* %ln8BY, i32 0
  store i64 %ln8BZ, i64* %ln8C0, !tbaa !2
  %ln8C1 = load i64*, i64** %Sp_Var
  %ln8C2 = getelementptr inbounds i64, i64* %ln8C1, i32 -1
  %ln8C3 = ptrtoint i64* %ln8C2 to i64
  %ln8C4 = inttoptr i64 %ln8C3 to i64*
  store i64* %ln8C4, i64** %Sp_Var
  %ln8C5 = load i64, i64* %R1_Var
  %ln8C6 = and i64 %ln8C5, 7
  %ln8C7 = icmp ne i64 %ln8C6, 0
  br i1 %ln8C7, label %u8t0, label %c8qT
c8qT:
  %ln8C9 = load i64, i64* %R1_Var
  %ln8Ca = inttoptr i64 %ln8C9 to i64*
  %ln8Cb = load i64, i64* %ln8Ca, !tbaa !4
  %ln8Cc = inttoptr i64 %ln8Cb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Cd = load i64*, i64** %Sp_Var
  %ln8Ce = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Cc( i64* %Base_Arg, i64* %ln8Cd, i64* %Hp_Arg, i64 %ln8Ce, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8t0:
  %ln8Cf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Cg = load i64*, i64** %Sp_Var
  %ln8Ch = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Cf( i64* %Base_Arg, i64* %ln8Cg, i64* %Hp_Arg, i64 %ln8Ch, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8qS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qS_info$def to i8*)
define internal ghccc void @c8qS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8t9_srt_struct* @_u8t9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8qS_info$def to i64)) to i32),i32 0)}>
{
n8Ci:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5dy = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8qS
c8qS:
  %ln8Cj = load i64, i64* %R1_Var
  %ln8Ck = and i64 %ln8Cj, 7
  switch i64 %ln8Ck, label %c8sv [i64 1, label %c8sv
i64 2, label %u8sX]
c8sv:
  %ln8Cl = load i64*, i64** %Hp_Var
  %ln8Cm = getelementptr inbounds i64, i64* %ln8Cl, i32 12
  %ln8Cn = ptrtoint i64* %ln8Cm to i64
  %ln8Co = inttoptr i64 %ln8Cn to i64*
  store i64* %ln8Co, i64** %Hp_Var
  %ln8Cp = load i64*, i64** %Hp_Var
  %ln8Cq = ptrtoint i64* %ln8Cp to i64
  %ln8Cr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Cs = bitcast i64* %ln8Cr to i64*
  %ln8Ct = load i64, i64* %ln8Cs, !tbaa !5
  %ln8Cu = icmp ugt i64 %ln8Cq, %ln8Ct
  %ln8Cv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Cu, i1 0 )
  br i1 %ln8Cv, label %c8sy, label %c8sx
c8sx:
  %ln8Cx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dQ_info$def to i64
  %ln8Cw = load i64*, i64** %Hp_Var
  %ln8Cy = getelementptr inbounds i64, i64* %ln8Cw, i32 -11
  store i64 %ln8Cx, i64* %ln8Cy, !tbaa !3
  %ln8Cz = load i64*, i64** %Sp_Var
  %ln8CA = getelementptr inbounds i64, i64* %ln8Cz, i32 1
  %ln8CB = bitcast i64* %ln8CA to i64*
  %ln8CC = load i64, i64* %ln8CB, !tbaa !2
  store i64 %ln8CC, i64* %ls5dy
  %ln8CE = load i64, i64* %ls5dy
  %ln8CD = load i64*, i64** %Hp_Var
  %ln8CF = getelementptr inbounds i64, i64* %ln8CD, i32 -9
  store i64 %ln8CE, i64* %ln8CF, !tbaa !3
  %ln8CH = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8CG = load i64*, i64** %Hp_Var
  %ln8CI = getelementptr inbounds i64, i64* %ln8CG, i32 -8
  store i64 %ln8CH, i64* %ln8CI, !tbaa !3
  %ln8CK = load i64*, i64** %Hp_Var
  %ln8CL = getelementptr inbounds i64, i64* %ln8CK, i32 -11
  %ln8CM = ptrtoint i64* %ln8CL to i64
  %ln8CJ = load i64*, i64** %Hp_Var
  %ln8CN = getelementptr inbounds i64, i64* %ln8CJ, i32 -7
  store i64 %ln8CM, i64* %ln8CN, !tbaa !3
  %ln8CP = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8CQ = add i64 %ln8CP, 1
  %ln8CO = load i64*, i64** %Hp_Var
  %ln8CR = getelementptr inbounds i64, i64* %ln8CO, i32 -6
  store i64 %ln8CQ, i64* %ln8CR, !tbaa !3
  %ln8CT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5dJ_info$def to i64
  %ln8CS = load i64*, i64** %Hp_Var
  %ln8CU = getelementptr inbounds i64, i64* %ln8CS, i32 -5
  store i64 %ln8CT, i64* %ln8CU, !tbaa !3
  %ln8CW = load i64, i64* %ls5dy
  %ln8CV = load i64*, i64** %Hp_Var
  %ln8CX = getelementptr inbounds i64, i64* %ln8CV, i32 -3
  store i64 %ln8CW, i64* %ln8CX, !tbaa !3
  %ln8CZ = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8CY = load i64*, i64** %Hp_Var
  %ln8D0 = getelementptr inbounds i64, i64* %ln8CY, i32 -2
  store i64 %ln8CZ, i64* %ln8D0, !tbaa !3
  %ln8D2 = load i64*, i64** %Hp_Var
  %ln8D3 = getelementptr inbounds i64, i64* %ln8D2, i32 -5
  %ln8D4 = ptrtoint i64* %ln8D3 to i64
  %ln8D1 = load i64*, i64** %Hp_Var
  %ln8D5 = getelementptr inbounds i64, i64* %ln8D1, i32 -1
  store i64 %ln8D4, i64* %ln8D5, !tbaa !3
  %ln8D8 = load i64*, i64** %Hp_Var
  %ln8D9 = ptrtoint i64* %ln8D8 to i64
  %ln8Da = add i64 %ln8D9, -62
  %ln8D6 = load i64*, i64** %Hp_Var
  %ln8Db = getelementptr inbounds i64, i64* %ln8D6, i32 0
  store i64 %ln8Da, i64* %ln8Db, !tbaa !3
  %ln8Dd = load i64*, i64** %Hp_Var
  %ln8De = ptrtoint i64* %ln8Dd to i64
  %ln8Df = add i64 %ln8De, -14
  store i64 %ln8Df, i64* %R1_Var
  %ln8Dg = load i64*, i64** %Sp_Var
  %ln8Dh = getelementptr inbounds i64, i64* %ln8Dg, i32 2
  %ln8Di = ptrtoint i64* %ln8Dh to i64
  %ln8Dj = inttoptr i64 %ln8Di to i64*
  store i64* %ln8Dj, i64** %Sp_Var
  %ln8Dk = load i64*, i64** %Sp_Var
  %ln8Dl = getelementptr inbounds i64, i64* %ln8Dk, i32 0
  %ln8Dm = bitcast i64* %ln8Dl to i64*
  %ln8Dn = load i64, i64* %ln8Dm, !tbaa !2
  %ln8Do = inttoptr i64 %ln8Dn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dp = load i64*, i64** %Sp_Var
  %ln8Dq = load i64*, i64** %Hp_Var
  %ln8Dr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Do( i64* %Base_Arg, i64* %ln8Dp, i64* %ln8Dq, i64 %ln8Dr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8sy:
  %ln8Ds = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln8Ds, !tbaa !5
  %ln8Dt = load i64, i64* %R1_Var
  store i64 %ln8Dt, i64* %R1_Var
  %ln8Du = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dv = load i64*, i64** %Sp_Var
  %ln8Dw = load i64*, i64** %Hp_Var
  %ln8Dx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Du( i64* %Base_Arg, i64* %ln8Dv, i64* %ln8Dw, i64 %ln8Dx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8sX:
  %ln8Dy = load i64*, i64** %Sp_Var
  %ln8Dz = getelementptr inbounds i64, i64* %ln8Dy, i32 2
  %ln8DA = ptrtoint i64* %ln8Dz to i64
  %ln8DB = inttoptr i64 %ln8DA to i64*
  store i64* %ln8DB, i64** %Sp_Var
  %ln8DC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8sc$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DD = load i64*, i64** %Sp_Var
  %ln8DE = load i64*, i64** %Hp_Var
  %ln8DF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DC( i64* %Base_Arg, i64* %ln8DD, i64* %ln8DE, i64 %ln8DF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c8sc = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8sc$def to i8*)
define internal ghccc void @_c8sc$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n8DG:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8sc
c8sc:
  %ln8DH = ptrtoint %Main_revert1_closure_struct* @Main_revert1_closure$def to i64
  store i64 %ln8DH, i64* %R1_Var
  %ln8DJ = load i64, i64* %R1_Var
  %ln8DK = inttoptr i64 %ln8DJ to i64*
  %ln8DL = load i64, i64* %ln8DK, !tbaa !4
  %ln8DM = inttoptr i64 %ln8DL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8DN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u8Gs_srt_struct = type <{i64, i64, i64, i64}>
%_u8Gt_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdwrevert_closure_struct = type <{i64, i64}>
@_u8Gs_srt$def = internal global %_u8Gs_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%Main_revert2_closure_struct* @Main_revert2_closure$def to i64), i64 0}>
@_u8Gs_srt = internal alias i8, bitcast (%_u8Gs_srt_struct* @_u8Gs_srt$def to i8*)
@_u8Gt_srt$def = internal global %_u8Gt_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_revert4_closure_struct* @Main_revert4_closure$def to i64), i64 ptrtoint (i8* @_u8Gs_srt to i64), i64 0}>
@_u8Gt_srt = internal alias i8, bitcast (%_u8Gt_srt_struct* @_u8Gt_srt$def to i8*)
@Main_zdwrevert_closure$def = internal global %Main_zdwrevert_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwrevert_info$def to i64), i64 0}>
@Main_zdwrevert_closure = alias i8, bitcast (%Main_zdwrevert_closure_struct* @Main_zdwrevert_closure$def to i8*)
@s5e6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5e6_info$def to i8*)
define internal ghccc void @s5e6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8Gu:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8E2
c8E2:
  %ln8Gv = load i64*, i64** %Sp_Var
  %ln8Gw = getelementptr inbounds i64, i64* %ln8Gv, i32 -2
  %ln8Gx = ptrtoint i64* %ln8Gw to i64
  %ln8Gy = icmp ult i64 %ln8Gx, %SpLim_Arg
  %ln8Gz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Gy, i1 0 )
  br i1 %ln8Gz, label %c8E3, label %c8E4
c8E4:
  %ln8GB = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8GA = load i64*, i64** %Sp_Var
  %ln8GC = getelementptr inbounds i64, i64* %ln8GA, i32 -2
  store i64 %ln8GB, i64* %ln8GC, !tbaa !2
  %ln8GE = load i64, i64* %R1_Var
  %ln8GD = load i64*, i64** %Sp_Var
  %ln8GF = getelementptr inbounds i64, i64* %ln8GD, i32 -1
  store i64 %ln8GE, i64* %ln8GF, !tbaa !2
  %ln8GI = load i64, i64* %R1_Var
  %ln8GJ = add i64 %ln8GI, 16
  %ln8GK = inttoptr i64 %ln8GJ to i64*
  %ln8GL = load i64, i64* %ln8GK, !tbaa !4
  store i64 %ln8GL, i64* %R2_Var
  %ln8GM = load i64*, i64** %Sp_Var
  %ln8GN = getelementptr inbounds i64, i64* %ln8GM, i32 -2
  %ln8GO = ptrtoint i64* %ln8GN to i64
  %ln8GP = inttoptr i64 %ln8GO to i64*
  store i64* %ln8GP, i64** %Sp_Var
  %ln8GQ = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GR = load i64*, i64** %Sp_Var
  %ln8GS = load i64, i64* %R1_Var
  %ln8GT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GQ( i64* %Base_Arg, i64* %ln8GR, i64* %Hp_Arg, i64 %ln8GS, i64 %ln8GT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8E3:
  %ln8GU = load i64, i64* %R1_Var
  store i64 %ln8GU, i64* %R1_Var
  %ln8GV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8GW = bitcast i64* %ln8GV to i64*
  %ln8GX = load i64, i64* %ln8GW, !tbaa !5
  %ln8GY = inttoptr i64 %ln8GX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GZ = load i64*, i64** %Sp_Var
  %ln8H0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GY( i64* %Base_Arg, i64* %ln8GZ, i64* %Hp_Arg, i64 %ln8H0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5e7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5e7_info$def to i8*)
define internal ghccc void @s5e7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8H1:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8E9
c8E9:
  %ln8H2 = load i64*, i64** %Sp_Var
  %ln8H3 = getelementptr inbounds i64, i64* %ln8H2, i32 -4
  %ln8H4 = ptrtoint i64* %ln8H3 to i64
  %ln8H5 = icmp ult i64 %ln8H4, %SpLim_Arg
  %ln8H6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8H5, i1 0 )
  br i1 %ln8H6, label %c8Ea, label %c8Eb
c8Eb:
  %ln8H8 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8H7 = load i64*, i64** %Sp_Var
  %ln8H9 = getelementptr inbounds i64, i64* %ln8H7, i32 -2
  store i64 %ln8H8, i64* %ln8H9, !tbaa !2
  %ln8Hb = load i64, i64* %R1_Var
  %ln8Ha = load i64*, i64** %Sp_Var
  %ln8Hc = getelementptr inbounds i64, i64* %ln8Ha, i32 -1
  store i64 %ln8Hb, i64* %ln8Hc, !tbaa !2
  %ln8Hf = load i64, i64* %R1_Var
  %ln8Hg = add i64 %ln8Hf, 16
  %ln8Hh = inttoptr i64 %ln8Hg to i64*
  %ln8Hi = load i64, i64* %ln8Hh, !tbaa !4
  store i64 %ln8Hi, i64* %R2_Var
  %ln8Hk = ptrtoint i8* @stg_ap_p_info to i64
  %ln8Hj = load i64*, i64** %Sp_Var
  %ln8Hl = getelementptr inbounds i64, i64* %ln8Hj, i32 -4
  store i64 %ln8Hk, i64* %ln8Hl, !tbaa !2
  %ln8Hn = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln8Ho = add i64 %ln8Hn, 1
  %ln8Hm = load i64*, i64** %Sp_Var
  %ln8Hp = getelementptr inbounds i64, i64* %ln8Hm, i32 -3
  store i64 %ln8Ho, i64* %ln8Hp, !tbaa !2
  %ln8Hq = load i64*, i64** %Sp_Var
  %ln8Hr = getelementptr inbounds i64, i64* %ln8Hq, i32 -4
  %ln8Hs = ptrtoint i64* %ln8Hr to i64
  %ln8Ht = inttoptr i64 %ln8Hs to i64*
  store i64* %ln8Ht, i64** %Sp_Var
  %ln8Hu = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hv = load i64*, i64** %Sp_Var
  %ln8Hw = load i64, i64* %R1_Var
  %ln8Hx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hu( i64* %Base_Arg, i64* %ln8Hv, i64* %Hp_Arg, i64 %ln8Hw, i64 %ln8Hx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ea:
  %ln8Hy = load i64, i64* %R1_Var
  store i64 %ln8Hy, i64* %R1_Var
  %ln8Hz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8HA = bitcast i64* %ln8Hz to i64*
  %ln8HB = load i64, i64* %ln8HA, !tbaa !5
  %ln8HC = inttoptr i64 %ln8HB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8HD = load i64*, i64** %Sp_Var
  %ln8HE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8HC( i64* %Base_Arg, i64* %ln8HD, i64* %Hp_Arg, i64 %ln8HE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eh_info$def to i8*)
define internal ghccc void @s5eh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8HF:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Ez
c8Ez:
  %ln8HG = load i64*, i64** %Sp_Var
  %ln8HH = getelementptr inbounds i64, i64* %ln8HG, i32 -4
  %ln8HI = ptrtoint i64* %ln8HH to i64
  %ln8HJ = icmp ult i64 %ln8HI, %SpLim_Arg
  %ln8HK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8HJ, i1 0 )
  br i1 %ln8HK, label %c8EA, label %c8EB
c8EB:
  %ln8HM = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8HL = load i64*, i64** %Sp_Var
  %ln8HN = getelementptr inbounds i64, i64* %ln8HL, i32 -2
  store i64 %ln8HM, i64* %ln8HN, !tbaa !2
  %ln8HP = load i64, i64* %R1_Var
  %ln8HO = load i64*, i64** %Sp_Var
  %ln8HQ = getelementptr inbounds i64, i64* %ln8HO, i32 -1
  store i64 %ln8HP, i64* %ln8HQ, !tbaa !2
  %ln8HT = load i64, i64* %R1_Var
  %ln8HU = add i64 %ln8HT, 16
  %ln8HV = inttoptr i64 %ln8HU to i64*
  %ln8HW = load i64, i64* %ln8HV, !tbaa !4
  store i64 %ln8HW, i64* %R2_Var
  %ln8HY = ptrtoint i8* @stg_ap_p_info to i64
  %ln8HX = load i64*, i64** %Sp_Var
  %ln8HZ = getelementptr inbounds i64, i64* %ln8HX, i32 -4
  store i64 %ln8HY, i64* %ln8HZ, !tbaa !2
  %ln8I1 = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8I2 = add i64 %ln8I1, 1
  %ln8I0 = load i64*, i64** %Sp_Var
  %ln8I3 = getelementptr inbounds i64, i64* %ln8I0, i32 -3
  store i64 %ln8I2, i64* %ln8I3, !tbaa !2
  %ln8I4 = load i64*, i64** %Sp_Var
  %ln8I5 = getelementptr inbounds i64, i64* %ln8I4, i32 -4
  %ln8I6 = ptrtoint i64* %ln8I5 to i64
  %ln8I7 = inttoptr i64 %ln8I6 to i64*
  store i64* %ln8I7, i64** %Sp_Var
  %ln8I8 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8I9 = load i64*, i64** %Sp_Var
  %ln8Ia = load i64, i64* %R1_Var
  %ln8Ib = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8I8( i64* %Base_Arg, i64* %ln8I9, i64* %Hp_Arg, i64 %ln8Ia, i64 %ln8Ib, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8EA:
  %ln8Ic = load i64, i64* %R1_Var
  store i64 %ln8Ic, i64* %R1_Var
  %ln8Id = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Ie = bitcast i64* %ln8Id to i64*
  %ln8If = load i64, i64* %ln8Ie, !tbaa !5
  %ln8Ig = inttoptr i64 %ln8If to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ih = load i64*, i64** %Sp_Var
  %ln8Ii = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ig( i64* %Base_Arg, i64* %ln8Ih, i64* %Hp_Arg, i64 %ln8Ii, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5ei_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ei_info$def to i8*)
define internal ghccc void @s5ei_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8Ij:
  %ls5ei = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e0 = alloca i64, i32 1
  %ls5eb = alloca i64, i32 1
  %ls5e6 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8EC
c8EC:
  %ln8Ik = load i64, i64* %R1_Var
  store i64 %ln8Ik, i64* %ls5ei
  %ln8Il = load i64*, i64** %Sp_Var
  %ln8Im = getelementptr inbounds i64, i64* %ln8Il, i32 -5
  %ln8In = ptrtoint i64* %ln8Im to i64
  %ln8Io = icmp ult i64 %ln8In, %SpLim_Arg
  %ln8Ip = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Io, i1 0 )
  br i1 %ln8Ip, label %c8ED, label %c8EE
c8EE:
  %ln8Iq = load i64*, i64** %Hp_Var
  %ln8Ir = getelementptr inbounds i64, i64* %ln8Iq, i32 3
  %ln8Is = ptrtoint i64* %ln8Ir to i64
  %ln8It = inttoptr i64 %ln8Is to i64*
  store i64* %ln8It, i64** %Hp_Var
  %ln8Iu = load i64*, i64** %Hp_Var
  %ln8Iv = ptrtoint i64* %ln8Iu to i64
  %ln8Iw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Ix = bitcast i64* %ln8Iw to i64*
  %ln8Iy = load i64, i64* %ln8Ix, !tbaa !5
  %ln8Iz = icmp ugt i64 %ln8Iv, %ln8Iy
  %ln8IA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Iz, i1 0 )
  br i1 %ln8IA, label %c8EG, label %c8EF
c8EF:
  %ln8IC = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8IB = load i64*, i64** %Sp_Var
  %ln8ID = getelementptr inbounds i64, i64* %ln8IB, i32 -2
  store i64 %ln8IC, i64* %ln8ID, !tbaa !2
  %ln8IF = load i64, i64* %ls5ei
  %ln8IE = load i64*, i64** %Sp_Var
  %ln8IG = getelementptr inbounds i64, i64* %ln8IE, i32 -1
  store i64 %ln8IF, i64* %ln8IG, !tbaa !2
  %ln8IH = load i64, i64* %ls5ei
  %ln8II = add i64 %ln8IH, 16
  %ln8IJ = inttoptr i64 %ln8II to i64*
  %ln8IK = load i64, i64* %ln8IJ, !tbaa !1
  store i64 %ln8IK, i64* %ls5e0
  %ln8IL = load i64, i64* %ls5ei
  %ln8IM = add i64 %ln8IL, 24
  %ln8IN = inttoptr i64 %ln8IM to i64*
  %ln8IO = load i64, i64* %ln8IN, !tbaa !1
  store i64 %ln8IO, i64* %ls5eb
  %ln8IP = load i64, i64* %ls5ei
  %ln8IQ = add i64 %ln8IP, 32
  %ln8IR = inttoptr i64 %ln8IQ to i64*
  %ln8IS = load i64, i64* %ln8IR, !tbaa !1
  store i64 %ln8IS, i64* %ls5e6
  %ln8IU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eh_info$def to i64
  %ln8IT = load i64*, i64** %Hp_Var
  %ln8IV = getelementptr inbounds i64, i64* %ln8IT, i32 -2
  store i64 %ln8IU, i64* %ln8IV, !tbaa !3
  %ln8IX = load i64, i64* %ls5e6
  %ln8IW = load i64*, i64** %Hp_Var
  %ln8IY = getelementptr inbounds i64, i64* %ln8IW, i32 0
  store i64 %ln8IX, i64* %ln8IY, !tbaa !3
  %ln8IZ = load i64, i64* %ls5e0
  store i64 %ln8IZ, i64* %R2_Var
  %ln8J1 = ptrtoint i8* @stg_ap_pp_info to i64
  %ln8J0 = load i64*, i64** %Sp_Var
  %ln8J2 = getelementptr inbounds i64, i64* %ln8J0, i32 -5
  store i64 %ln8J1, i64* %ln8J2, !tbaa !2
  %ln8J4 = load i64*, i64** %Hp_Var
  %ln8J5 = getelementptr inbounds i64, i64* %ln8J4, i32 -2
  %ln8J6 = ptrtoint i64* %ln8J5 to i64
  %ln8J3 = load i64*, i64** %Sp_Var
  %ln8J7 = getelementptr inbounds i64, i64* %ln8J3, i32 -4
  store i64 %ln8J6, i64* %ln8J7, !tbaa !2
  %ln8J9 = load i64, i64* %ls5eb
  %ln8J8 = load i64*, i64** %Sp_Var
  %ln8Ja = getelementptr inbounds i64, i64* %ln8J8, i32 -3
  store i64 %ln8J9, i64* %ln8Ja, !tbaa !2
  %ln8Jb = load i64*, i64** %Sp_Var
  %ln8Jc = getelementptr inbounds i64, i64* %ln8Jb, i32 -5
  %ln8Jd = ptrtoint i64* %ln8Jc to i64
  %ln8Je = inttoptr i64 %ln8Jd to i64*
  store i64* %ln8Je, i64** %Sp_Var
  %ln8Jf = bitcast i8* @base_GHCziReal_zs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jg = load i64*, i64** %Sp_Var
  %ln8Jh = load i64*, i64** %Hp_Var
  %ln8Ji = load i64, i64* %R1_Var
  %ln8Jj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jf( i64* %Base_Arg, i64* %ln8Jg, i64* %ln8Jh, i64 %ln8Ji, i64 %ln8Jj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8EG:
  %ln8Jk = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Jk, !tbaa !5
  br label %c8ED
c8ED:
  %ln8Jl = load i64, i64* %ls5ei
  store i64 %ln8Jl, i64* %R1_Var
  %ln8Jm = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Jn = bitcast i64* %ln8Jm to i64*
  %ln8Jo = load i64, i64* %ln8Jn, !tbaa !5
  %ln8Jp = inttoptr i64 %ln8Jo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jq = load i64*, i64** %Sp_Var
  %ln8Jr = load i64*, i64** %Hp_Var
  %ln8Js = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jp( i64* %Base_Arg, i64* %ln8Jq, i64* %ln8Jr, i64 %ln8Js, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5ee_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ee_info$def to i8*)
define internal ghccc void @s5ee_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8Jt:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8EU
c8EU:
  %ln8Ju = load i64*, i64** %Sp_Var
  %ln8Jv = getelementptr inbounds i64, i64* %ln8Ju, i32 -4
  %ln8Jw = ptrtoint i64* %ln8Jv to i64
  %ln8Jx = icmp ult i64 %ln8Jw, %SpLim_Arg
  %ln8Jy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Jx, i1 0 )
  br i1 %ln8Jy, label %c8EV, label %c8EW
c8EW:
  %ln8JA = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Jz = load i64*, i64** %Sp_Var
  %ln8JB = getelementptr inbounds i64, i64* %ln8Jz, i32 -2
  store i64 %ln8JA, i64* %ln8JB, !tbaa !2
  %ln8JD = load i64, i64* %R1_Var
  %ln8JC = load i64*, i64** %Sp_Var
  %ln8JE = getelementptr inbounds i64, i64* %ln8JC, i32 -1
  store i64 %ln8JD, i64* %ln8JE, !tbaa !2
  %ln8JH = load i64, i64* %R1_Var
  %ln8JI = add i64 %ln8JH, 16
  %ln8JJ = inttoptr i64 %ln8JI to i64*
  %ln8JK = load i64, i64* %ln8JJ, !tbaa !4
  store i64 %ln8JK, i64* %R2_Var
  %ln8JM = ptrtoint i8* @stg_ap_p_info to i64
  %ln8JL = load i64*, i64** %Sp_Var
  %ln8JN = getelementptr inbounds i64, i64* %ln8JL, i32 -4
  store i64 %ln8JM, i64* %ln8JN, !tbaa !2
  %ln8JP = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8JQ = add i64 %ln8JP, 1
  %ln8JO = load i64*, i64** %Sp_Var
  %ln8JR = getelementptr inbounds i64, i64* %ln8JO, i32 -3
  store i64 %ln8JQ, i64* %ln8JR, !tbaa !2
  %ln8JS = load i64*, i64** %Sp_Var
  %ln8JT = getelementptr inbounds i64, i64* %ln8JS, i32 -4
  %ln8JU = ptrtoint i64* %ln8JT to i64
  %ln8JV = inttoptr i64 %ln8JU to i64*
  store i64* %ln8JV, i64** %Sp_Var
  %ln8JW = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8JX = load i64*, i64** %Sp_Var
  %ln8JY = load i64, i64* %R1_Var
  %ln8JZ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8JW( i64* %Base_Arg, i64* %ln8JX, i64* %Hp_Arg, i64 %ln8JY, i64 %ln8JZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8EV:
  %ln8K0 = load i64, i64* %R1_Var
  store i64 %ln8K0, i64* %R1_Var
  %ln8K1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8K2 = bitcast i64* %ln8K1 to i64*
  %ln8K3 = load i64, i64* %ln8K2, !tbaa !5
  %ln8K4 = inttoptr i64 %ln8K3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8K5 = load i64*, i64** %Sp_Var
  %ln8K6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8K4( i64* %Base_Arg, i64* %ln8K5, i64* %Hp_Arg, i64 %ln8K6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5ef_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ef_info$def to i8*)
define internal ghccc void @s5ef_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8K7:
  %ls5ef = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e0 = alloca i64, i32 1
  %ls5eb = alloca i64, i32 1
  %ls5e6 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8EX
c8EX:
  %ln8K8 = load i64, i64* %R1_Var
  store i64 %ln8K8, i64* %ls5ef
  %ln8K9 = load i64*, i64** %Sp_Var
  %ln8Ka = getelementptr inbounds i64, i64* %ln8K9, i32 -5
  %ln8Kb = ptrtoint i64* %ln8Ka to i64
  %ln8Kc = icmp ult i64 %ln8Kb, %SpLim_Arg
  %ln8Kd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Kc, i1 0 )
  br i1 %ln8Kd, label %c8EY, label %c8EZ
c8EZ:
  %ln8Ke = load i64*, i64** %Hp_Var
  %ln8Kf = getelementptr inbounds i64, i64* %ln8Ke, i32 3
  %ln8Kg = ptrtoint i64* %ln8Kf to i64
  %ln8Kh = inttoptr i64 %ln8Kg to i64*
  store i64* %ln8Kh, i64** %Hp_Var
  %ln8Ki = load i64*, i64** %Hp_Var
  %ln8Kj = ptrtoint i64* %ln8Ki to i64
  %ln8Kk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Kl = bitcast i64* %ln8Kk to i64*
  %ln8Km = load i64, i64* %ln8Kl, !tbaa !5
  %ln8Kn = icmp ugt i64 %ln8Kj, %ln8Km
  %ln8Ko = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Kn, i1 0 )
  br i1 %ln8Ko, label %c8F1, label %c8F0
c8F0:
  %ln8Kq = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Kp = load i64*, i64** %Sp_Var
  %ln8Kr = getelementptr inbounds i64, i64* %ln8Kp, i32 -2
  store i64 %ln8Kq, i64* %ln8Kr, !tbaa !2
  %ln8Kt = load i64, i64* %ls5ef
  %ln8Ks = load i64*, i64** %Sp_Var
  %ln8Ku = getelementptr inbounds i64, i64* %ln8Ks, i32 -1
  store i64 %ln8Kt, i64* %ln8Ku, !tbaa !2
  %ln8Kv = load i64, i64* %ls5ef
  %ln8Kw = add i64 %ln8Kv, 16
  %ln8Kx = inttoptr i64 %ln8Kw to i64*
  %ln8Ky = load i64, i64* %ln8Kx, !tbaa !1
  store i64 %ln8Ky, i64* %ls5e0
  %ln8Kz = load i64, i64* %ls5ef
  %ln8KA = add i64 %ln8Kz, 24
  %ln8KB = inttoptr i64 %ln8KA to i64*
  %ln8KC = load i64, i64* %ln8KB, !tbaa !1
  store i64 %ln8KC, i64* %ls5eb
  %ln8KD = load i64, i64* %ls5ef
  %ln8KE = add i64 %ln8KD, 32
  %ln8KF = inttoptr i64 %ln8KE to i64*
  %ln8KG = load i64, i64* %ln8KF, !tbaa !1
  store i64 %ln8KG, i64* %ls5e6
  %ln8KI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ee_info$def to i64
  %ln8KH = load i64*, i64** %Hp_Var
  %ln8KJ = getelementptr inbounds i64, i64* %ln8KH, i32 -2
  store i64 %ln8KI, i64* %ln8KJ, !tbaa !3
  %ln8KL = load i64, i64* %ls5e6
  %ln8KK = load i64*, i64** %Hp_Var
  %ln8KM = getelementptr inbounds i64, i64* %ln8KK, i32 0
  store i64 %ln8KL, i64* %ln8KM, !tbaa !3
  %ln8KN = load i64, i64* %ls5e0
  store i64 %ln8KN, i64* %R2_Var
  %ln8KP = ptrtoint i8* @stg_ap_pp_info to i64
  %ln8KO = load i64*, i64** %Sp_Var
  %ln8KQ = getelementptr inbounds i64, i64* %ln8KO, i32 -5
  store i64 %ln8KP, i64* %ln8KQ, !tbaa !2
  %ln8KS = load i64*, i64** %Hp_Var
  %ln8KT = getelementptr inbounds i64, i64* %ln8KS, i32 -2
  %ln8KU = ptrtoint i64* %ln8KT to i64
  %ln8KR = load i64*, i64** %Sp_Var
  %ln8KV = getelementptr inbounds i64, i64* %ln8KR, i32 -4
  store i64 %ln8KU, i64* %ln8KV, !tbaa !2
  %ln8KX = load i64, i64* %ls5eb
  %ln8KW = load i64*, i64** %Sp_Var
  %ln8KY = getelementptr inbounds i64, i64* %ln8KW, i32 -3
  store i64 %ln8KX, i64* %ln8KY, !tbaa !2
  %ln8KZ = load i64*, i64** %Sp_Var
  %ln8L0 = getelementptr inbounds i64, i64* %ln8KZ, i32 -5
  %ln8L1 = ptrtoint i64* %ln8L0 to i64
  %ln8L2 = inttoptr i64 %ln8L1 to i64*
  store i64* %ln8L2, i64** %Sp_Var
  %ln8L3 = bitcast i8* @base_GHCziReal_zs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8L4 = load i64*, i64** %Sp_Var
  %ln8L5 = load i64*, i64** %Hp_Var
  %ln8L6 = load i64, i64* %R1_Var
  %ln8L7 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8L3( i64* %Base_Arg, i64* %ln8L4, i64* %ln8L5, i64 %ln8L6, i64 %ln8L7, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8F1:
  %ln8L8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8L8, !tbaa !5
  br label %c8EY
c8EY:
  %ln8L9 = load i64, i64* %ls5ef
  store i64 %ln8L9, i64* %R1_Var
  %ln8La = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Lb = bitcast i64* %ln8La to i64*
  %ln8Lc = load i64, i64* %ln8Lb, !tbaa !5
  %ln8Ld = inttoptr i64 %ln8Lc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Le = load i64*, i64** %Sp_Var
  %ln8Lf = load i64*, i64** %Hp_Var
  %ln8Lg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ld( i64* %Base_Arg, i64* %ln8Le, i64* %ln8Lf, i64 %ln8Lg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eg_info$def to i8*)
define internal ghccc void @s5eg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8Lh:
  %ls5eg = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e0 = alloca i64, i32 1
  %ls5eb = alloca i64, i32 1
  %ls5e6 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8F2
c8F2:
  %ln8Li = load i64, i64* %R1_Var
  store i64 %ln8Li, i64* %ls5eg
  %ln8Lj = load i64*, i64** %Sp_Var
  %ln8Lk = getelementptr inbounds i64, i64* %ln8Lj, i32 -4
  %ln8Ll = ptrtoint i64* %ln8Lk to i64
  %ln8Lm = icmp ult i64 %ln8Ll, %SpLim_Arg
  %ln8Ln = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Lm, i1 0 )
  br i1 %ln8Ln, label %c8F3, label %c8F4
c8F4:
  %ln8Lo = load i64*, i64** %Hp_Var
  %ln8Lp = getelementptr inbounds i64, i64* %ln8Lo, i32 5
  %ln8Lq = ptrtoint i64* %ln8Lp to i64
  %ln8Lr = inttoptr i64 %ln8Lq to i64*
  store i64* %ln8Lr, i64** %Hp_Var
  %ln8Ls = load i64*, i64** %Hp_Var
  %ln8Lt = ptrtoint i64* %ln8Ls to i64
  %ln8Lu = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Lv = bitcast i64* %ln8Lu to i64*
  %ln8Lw = load i64, i64* %ln8Lv, !tbaa !5
  %ln8Lx = icmp ugt i64 %ln8Lt, %ln8Lw
  %ln8Ly = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Lx, i1 0 )
  br i1 %ln8Ly, label %c8F6, label %c8F5
c8F5:
  %ln8LA = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Lz = load i64*, i64** %Sp_Var
  %ln8LB = getelementptr inbounds i64, i64* %ln8Lz, i32 -2
  store i64 %ln8LA, i64* %ln8LB, !tbaa !2
  %ln8LD = load i64, i64* %ls5eg
  %ln8LC = load i64*, i64** %Sp_Var
  %ln8LE = getelementptr inbounds i64, i64* %ln8LC, i32 -1
  store i64 %ln8LD, i64* %ln8LE, !tbaa !2
  %ln8LF = load i64, i64* %ls5eg
  %ln8LG = add i64 %ln8LF, 16
  %ln8LH = inttoptr i64 %ln8LG to i64*
  %ln8LI = load i64, i64* %ln8LH, !tbaa !1
  store i64 %ln8LI, i64* %ls5e0
  %ln8LJ = load i64, i64* %ls5eg
  %ln8LK = add i64 %ln8LJ, 24
  %ln8LL = inttoptr i64 %ln8LK to i64*
  %ln8LM = load i64, i64* %ln8LL, !tbaa !1
  store i64 %ln8LM, i64* %ls5eb
  %ln8LN = load i64, i64* %ls5eg
  %ln8LO = add i64 %ln8LN, 32
  %ln8LP = inttoptr i64 %ln8LO to i64*
  %ln8LQ = load i64, i64* %ln8LP, !tbaa !1
  store i64 %ln8LQ, i64* %ls5e6
  %ln8LS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ef_info$def to i64
  %ln8LR = load i64*, i64** %Hp_Var
  %ln8LT = getelementptr inbounds i64, i64* %ln8LR, i32 -4
  store i64 %ln8LS, i64* %ln8LT, !tbaa !3
  %ln8LV = load i64, i64* %ls5e0
  %ln8LU = load i64*, i64** %Hp_Var
  %ln8LW = getelementptr inbounds i64, i64* %ln8LU, i32 -2
  store i64 %ln8LV, i64* %ln8LW, !tbaa !3
  %ln8LY = load i64, i64* %ls5eb
  %ln8LX = load i64*, i64** %Hp_Var
  %ln8LZ = getelementptr inbounds i64, i64* %ln8LX, i32 -1
  store i64 %ln8LY, i64* %ln8LZ, !tbaa !3
  %ln8M1 = load i64, i64* %ls5e6
  %ln8M0 = load i64*, i64** %Hp_Var
  %ln8M2 = getelementptr inbounds i64, i64* %ln8M0, i32 0
  store i64 %ln8M1, i64* %ln8M2, !tbaa !3
  %ln8M3 = load i64, i64* %ls5e6
  store i64 %ln8M3, i64* %R2_Var
  %ln8M5 = ptrtoint i8* @stg_ap_p_info to i64
  %ln8M4 = load i64*, i64** %Sp_Var
  %ln8M6 = getelementptr inbounds i64, i64* %ln8M4, i32 -4
  store i64 %ln8M5, i64* %ln8M6, !tbaa !2
  %ln8M8 = load i64*, i64** %Hp_Var
  %ln8M9 = getelementptr inbounds i64, i64* %ln8M8, i32 -4
  %ln8Ma = ptrtoint i64* %ln8M9 to i64
  %ln8M7 = load i64*, i64** %Sp_Var
  %ln8Mb = getelementptr inbounds i64, i64* %ln8M7, i32 -3
  store i64 %ln8Ma, i64* %ln8Mb, !tbaa !2
  %ln8Mc = load i64*, i64** %Sp_Var
  %ln8Md = getelementptr inbounds i64, i64* %ln8Mc, i32 -4
  %ln8Me = ptrtoint i64* %ln8Md to i64
  %ln8Mf = inttoptr i64 %ln8Me to i64*
  store i64* %ln8Mf, i64** %Sp_Var
  %ln8Mg = bitcast i8* @base_GHCziNum_negate_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mh = load i64*, i64** %Sp_Var
  %ln8Mi = load i64*, i64** %Hp_Var
  %ln8Mj = load i64, i64* %R1_Var
  %ln8Mk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mg( i64* %Base_Arg, i64* %ln8Mh, i64* %ln8Mi, i64 %ln8Mj, i64 %ln8Mk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8F6:
  %ln8Ml = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln8Ml, !tbaa !5
  br label %c8F3
c8F3:
  %ln8Mm = load i64, i64* %ls5eg
  store i64 %ln8Mm, i64* %R1_Var
  %ln8Mn = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Mo = bitcast i64* %ln8Mn to i64*
  %ln8Mp = load i64, i64* %ln8Mo, !tbaa !5
  %ln8Mq = inttoptr i64 %ln8Mp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Mr = load i64*, i64** %Sp_Var
  %ln8Ms = load i64*, i64** %Hp_Var
  %ln8Mt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Mq( i64* %Base_Arg, i64* %ln8Mr, i64* %ln8Ms, i64 %ln8Mt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5en_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5en_info$def to i8*)
define internal ghccc void @s5en_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8Mu:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Fd
c8Fd:
  %ln8Mv = load i64*, i64** %Sp_Var
  %ln8Mw = getelementptr inbounds i64, i64* %ln8Mv, i32 -4
  %ln8Mx = ptrtoint i64* %ln8Mw to i64
  %ln8My = icmp ult i64 %ln8Mx, %SpLim_Arg
  %ln8Mz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8My, i1 0 )
  br i1 %ln8Mz, label %c8Fe, label %c8Ff
c8Ff:
  %ln8MB = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8MA = load i64*, i64** %Sp_Var
  %ln8MC = getelementptr inbounds i64, i64* %ln8MA, i32 -2
  store i64 %ln8MB, i64* %ln8MC, !tbaa !2
  %ln8ME = load i64, i64* %R1_Var
  %ln8MD = load i64*, i64** %Sp_Var
  %ln8MF = getelementptr inbounds i64, i64* %ln8MD, i32 -1
  store i64 %ln8ME, i64* %ln8MF, !tbaa !2
  %ln8MI = load i64, i64* %R1_Var
  %ln8MJ = add i64 %ln8MI, 16
  %ln8MK = inttoptr i64 %ln8MJ to i64*
  %ln8ML = load i64, i64* %ln8MK, !tbaa !4
  store i64 %ln8ML, i64* %R2_Var
  %ln8MN = ptrtoint i8* @stg_ap_p_info to i64
  %ln8MM = load i64*, i64** %Sp_Var
  %ln8MO = getelementptr inbounds i64, i64* %ln8MM, i32 -4
  store i64 %ln8MN, i64* %ln8MO, !tbaa !2
  %ln8MQ = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln8MR = add i64 %ln8MQ, 1
  %ln8MP = load i64*, i64** %Sp_Var
  %ln8MS = getelementptr inbounds i64, i64* %ln8MP, i32 -3
  store i64 %ln8MR, i64* %ln8MS, !tbaa !2
  %ln8MT = load i64*, i64** %Sp_Var
  %ln8MU = getelementptr inbounds i64, i64* %ln8MT, i32 -4
  %ln8MV = ptrtoint i64* %ln8MU to i64
  %ln8MW = inttoptr i64 %ln8MV to i64*
  store i64* %ln8MW, i64** %Sp_Var
  %ln8MX = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MY = load i64*, i64** %Sp_Var
  %ln8MZ = load i64, i64* %R1_Var
  %ln8N0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MX( i64* %Base_Arg, i64* %ln8MY, i64* %Hp_Arg, i64 %ln8MZ, i64 %ln8N0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fe:
  %ln8N1 = load i64, i64* %R1_Var
  store i64 %ln8N1, i64* %R1_Var
  %ln8N2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8N3 = bitcast i64* %ln8N2 to i64*
  %ln8N4 = load i64, i64* %ln8N3, !tbaa !5
  %ln8N5 = inttoptr i64 %ln8N4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8N6 = load i64*, i64** %Sp_Var
  %ln8N7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8N5( i64* %Base_Arg, i64* %ln8N6, i64* %Hp_Arg, i64 %ln8N7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5et_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5et_info$def to i8*)
define internal ghccc void @s5et_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
n8N8:
  %ls5et = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5ep = alloca i64, i32 1
  %ls5e6 = alloca i64, i32 1
  %ls5e5 = alloca i64, i32 1
  %ls5en = alloca i64, i32 1
  %ls5eo = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Fq
c8Fq:
  %ln8N9 = load i64, i64* %R1_Var
  store i64 %ln8N9, i64* %ls5et
  %ln8Na = load i64*, i64** %Sp_Var
  %ln8Nb = getelementptr inbounds i64, i64* %ln8Na, i32 -2
  %ln8Nc = ptrtoint i64* %ln8Nb to i64
  %ln8Nd = icmp ult i64 %ln8Nc, %SpLim_Arg
  %ln8Ne = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Nd, i1 0 )
  br i1 %ln8Ne, label %c8Fr, label %c8Fs
c8Fs:
  %ln8Nf = load i64*, i64** %Hp_Var
  %ln8Ng = getelementptr inbounds i64, i64* %ln8Nf, i32 3
  %ln8Nh = ptrtoint i64* %ln8Ng to i64
  %ln8Ni = inttoptr i64 %ln8Nh to i64*
  store i64* %ln8Ni, i64** %Hp_Var
  %ln8Nj = load i64*, i64** %Hp_Var
  %ln8Nk = ptrtoint i64* %ln8Nj to i64
  %ln8Nl = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Nm = bitcast i64* %ln8Nl to i64*
  %ln8Nn = load i64, i64* %ln8Nm, !tbaa !5
  %ln8No = icmp ugt i64 %ln8Nk, %ln8Nn
  %ln8Np = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8No, i1 0 )
  br i1 %ln8Np, label %c8Fu, label %c8Ft
c8Ft:
  %ln8Nr = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Nq = load i64*, i64** %Sp_Var
  %ln8Ns = getelementptr inbounds i64, i64* %ln8Nq, i32 -2
  store i64 %ln8Nr, i64* %ln8Ns, !tbaa !2
  %ln8Nu = load i64, i64* %ls5et
  %ln8Nt = load i64*, i64** %Sp_Var
  %ln8Nv = getelementptr inbounds i64, i64* %ln8Nt, i32 -1
  store i64 %ln8Nu, i64* %ln8Nv, !tbaa !2
  %ln8Nw = load i64, i64* %ls5et
  %ln8Nx = add i64 %ln8Nw, 16
  %ln8Ny = inttoptr i64 %ln8Nx to i64*
  %ln8Nz = load i64, i64* %ln8Ny, !tbaa !1
  store i64 %ln8Nz, i64* %ls5ep
  %ln8NA = load i64, i64* %ls5et
  %ln8NB = add i64 %ln8NA, 24
  %ln8NC = inttoptr i64 %ln8NB to i64*
  %ln8ND = load i64, i64* %ln8NC, !tbaa !1
  store i64 %ln8ND, i64* %ls5e6
  %ln8NE = load i64, i64* %ls5et
  %ln8NF = add i64 %ln8NE, 32
  %ln8NG = inttoptr i64 %ln8NF to i64*
  %ln8NH = load i64, i64* %ln8NG, !tbaa !1
  store i64 %ln8NH, i64* %ls5e5
  %ln8NI = load i64, i64* %ls5et
  %ln8NJ = add i64 %ln8NI, 40
  %ln8NK = inttoptr i64 %ln8NJ to i64*
  %ln8NL = load i64, i64* %ln8NK, !tbaa !1
  store i64 %ln8NL, i64* %ls5en
  %ln8NM = load i64, i64* %ls5et
  %ln8NN = add i64 %ln8NM, 48
  %ln8NO = inttoptr i64 %ln8NN to i64*
  %ln8NP = load i64, i64* %ln8NO, !tbaa !1
  store i64 %ln8NP, i64* %ls5eo
  %ln8NR = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8NQ = load i64*, i64** %Hp_Var
  %ln8NS = getelementptr inbounds i64, i64* %ln8NQ, i32 -2
  store i64 %ln8NR, i64* %ln8NS, !tbaa !3
  %ln8NU = load i64, i64* %ls5en
  %ln8NT = load i64*, i64** %Hp_Var
  %ln8NV = getelementptr inbounds i64, i64* %ln8NT, i32 -1
  store i64 %ln8NU, i64* %ln8NV, !tbaa !3
  %ln8NX = load i64, i64* %ls5eo
  %ln8NW = load i64*, i64** %Hp_Var
  %ln8NY = getelementptr inbounds i64, i64* %ln8NW, i32 0
  store i64 %ln8NX, i64* %ln8NY, !tbaa !3
  %ln8O0 = load i64*, i64** %Hp_Var
  %ln8O1 = ptrtoint i64* %ln8O0 to i64
  %ln8O2 = add i64 %ln8O1, -14
  store i64 %ln8O2, i64* %R5_Var
  %ln8O3 = load i64, i64* %ls5e5
  store i64 %ln8O3, i64* %R4_Var
  %ln8O4 = load i64, i64* %ls5e6
  store i64 %ln8O4, i64* %R3_Var
  %ln8O5 = load i64, i64* %ls5ep
  store i64 %ln8O5, i64* %R2_Var
  %ln8O6 = load i64*, i64** %Sp_Var
  %ln8O7 = getelementptr inbounds i64, i64* %ln8O6, i32 -2
  %ln8O8 = ptrtoint i64* %ln8O7 to i64
  %ln8O9 = inttoptr i64 %ln8O8 to i64*
  store i64* %ln8O9, i64** %Sp_Var
  %ln8Oa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_compose_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ob = load i64*, i64** %Sp_Var
  %ln8Oc = load i64*, i64** %Hp_Var
  %ln8Od = load i64, i64* %R1_Var
  %ln8Oe = load i64, i64* %R2_Var
  %ln8Of = load i64, i64* %R3_Var
  %ln8Og = load i64, i64* %R4_Var
  %ln8Oh = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Oa( i64* %Base_Arg, i64* %ln8Ob, i64* %ln8Oc, i64 %ln8Od, i64 %ln8Oe, i64 %ln8Of, i64 %ln8Og, i64 %ln8Oh, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fu:
  %ln8Oi = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Oi, !tbaa !5
  br label %c8Fr
c8Fr:
  %ln8Oj = load i64, i64* %ls5et
  store i64 %ln8Oj, i64* %R1_Var
  %ln8Ok = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Ol = bitcast i64* %ln8Ok to i64*
  %ln8Om = load i64, i64* %ln8Ol, !tbaa !5
  %ln8On = inttoptr i64 %ln8Om to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oo = load i64*, i64** %Sp_Var
  %ln8Op = load i64*, i64** %Hp_Var
  %ln8Oq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8On( i64* %Base_Arg, i64* %ln8Oo, i64* %ln8Op, i64 %ln8Oq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eq_info$def to i8*)
define internal ghccc void @s5eq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8Or:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Fz
c8Fz:
  %ln8Os = load i64*, i64** %Sp_Var
  %ln8Ot = getelementptr inbounds i64, i64* %ln8Os, i32 -4
  %ln8Ou = ptrtoint i64* %ln8Ot to i64
  %ln8Ov = icmp ult i64 %ln8Ou, %SpLim_Arg
  %ln8Ow = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Ov, i1 0 )
  br i1 %ln8Ow, label %c8FA, label %c8FB
c8FB:
  %ln8Oy = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Ox = load i64*, i64** %Sp_Var
  %ln8Oz = getelementptr inbounds i64, i64* %ln8Ox, i32 -2
  store i64 %ln8Oy, i64* %ln8Oz, !tbaa !2
  %ln8OB = load i64, i64* %R1_Var
  %ln8OA = load i64*, i64** %Sp_Var
  %ln8OC = getelementptr inbounds i64, i64* %ln8OA, i32 -1
  store i64 %ln8OB, i64* %ln8OC, !tbaa !2
  %ln8OF = load i64, i64* %R1_Var
  %ln8OG = add i64 %ln8OF, 16
  %ln8OH = inttoptr i64 %ln8OG to i64*
  %ln8OI = load i64, i64* %ln8OH, !tbaa !4
  store i64 %ln8OI, i64* %R2_Var
  %ln8OK = ptrtoint i8* @stg_ap_p_info to i64
  %ln8OJ = load i64*, i64** %Sp_Var
  %ln8OL = getelementptr inbounds i64, i64* %ln8OJ, i32 -4
  store i64 %ln8OK, i64* %ln8OL, !tbaa !2
  %ln8ON = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln8OO = add i64 %ln8ON, 1
  %ln8OM = load i64*, i64** %Sp_Var
  %ln8OP = getelementptr inbounds i64, i64* %ln8OM, i32 -3
  store i64 %ln8OO, i64* %ln8OP, !tbaa !2
  %ln8OQ = load i64*, i64** %Sp_Var
  %ln8OR = getelementptr inbounds i64, i64* %ln8OQ, i32 -4
  %ln8OS = ptrtoint i64* %ln8OR to i64
  %ln8OT = inttoptr i64 %ln8OS to i64*
  store i64* %ln8OT, i64** %Sp_Var
  %ln8OU = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OV = load i64*, i64** %Sp_Var
  %ln8OW = load i64, i64* %R1_Var
  %ln8OX = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OU( i64* %Base_Arg, i64* %ln8OV, i64* %Hp_Arg, i64 %ln8OW, i64 %ln8OX, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FA:
  %ln8OY = load i64, i64* %R1_Var
  store i64 %ln8OY, i64* %R1_Var
  %ln8OZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8P0 = bitcast i64* %ln8OZ to i64*
  %ln8P1 = load i64, i64* %ln8P0, !tbaa !5
  %ln8P2 = inttoptr i64 %ln8P1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8P3 = load i64*, i64** %Sp_Var
  %ln8P4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8P2( i64* %Base_Arg, i64* %ln8P3, i64* %Hp_Arg, i64 %ln8P4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eo_info$def to i8*)
define internal ghccc void @s5eo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8Gs_srt_struct* @_u8Gs_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eo_info$def to i64)) to i32),i32 0)}>
{
n8P5:
  %ls5eo = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e6 = alloca i64, i32 1
  %ls5e5 = alloca i64, i32 1
  %ls5en = alloca i64, i32 1
  %ls5e0 = alloca i64, i32 1
  %ls5dZ = alloca i64, i32 1
  %lc8Fk = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8FD
c8FD:
  %ln8P6 = load i64, i64* %R1_Var
  store i64 %ln8P6, i64* %ls5eo
  %ln8P7 = load i64*, i64** %Sp_Var
  %ln8P8 = getelementptr inbounds i64, i64* %ln8P7, i32 -5
  %ln8P9 = ptrtoint i64* %ln8P8 to i64
  %ln8Pa = icmp ult i64 %ln8P9, %SpLim_Arg
  %ln8Pb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Pa, i1 0 )
  br i1 %ln8Pb, label %c8FE, label %c8FF
c8FF:
  %ln8Pc = load i64*, i64** %Hp_Var
  %ln8Pd = getelementptr inbounds i64, i64* %ln8Pc, i32 16
  %ln8Pe = ptrtoint i64* %ln8Pd to i64
  %ln8Pf = inttoptr i64 %ln8Pe to i64*
  store i64* %ln8Pf, i64** %Hp_Var
  %ln8Pg = load i64*, i64** %Hp_Var
  %ln8Ph = ptrtoint i64* %ln8Pg to i64
  %ln8Pi = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Pj = bitcast i64* %ln8Pi to i64*
  %ln8Pk = load i64, i64* %ln8Pj, !tbaa !5
  %ln8Pl = icmp ugt i64 %ln8Ph, %ln8Pk
  %ln8Pm = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Pl, i1 0 )
  br i1 %ln8Pm, label %c8FH, label %c8FG
c8FG:
  %ln8Po = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Pn = load i64*, i64** %Sp_Var
  %ln8Pp = getelementptr inbounds i64, i64* %ln8Pn, i32 -2
  store i64 %ln8Po, i64* %ln8Pp, !tbaa !2
  %ln8Pr = load i64, i64* %ls5eo
  %ln8Pq = load i64*, i64** %Sp_Var
  %ln8Ps = getelementptr inbounds i64, i64* %ln8Pq, i32 -1
  store i64 %ln8Pr, i64* %ln8Ps, !tbaa !2
  %ln8Pt = load i64, i64* %ls5eo
  %ln8Pu = add i64 %ln8Pt, 16
  %ln8Pv = inttoptr i64 %ln8Pu to i64*
  %ln8Pw = load i64, i64* %ln8Pv, !tbaa !1
  store i64 %ln8Pw, i64* %ls5e6
  %ln8Px = load i64, i64* %ls5eo
  %ln8Py = add i64 %ln8Px, 24
  %ln8Pz = inttoptr i64 %ln8Py to i64*
  %ln8PA = load i64, i64* %ln8Pz, !tbaa !1
  store i64 %ln8PA, i64* %ls5e5
  %ln8PB = load i64, i64* %ls5eo
  %ln8PC = add i64 %ln8PB, 32
  %ln8PD = inttoptr i64 %ln8PC to i64*
  %ln8PE = load i64, i64* %ln8PD, !tbaa !1
  store i64 %ln8PE, i64* %ls5en
  %ln8PF = load i64, i64* %ls5eo
  %ln8PG = add i64 %ln8PF, 40
  %ln8PH = inttoptr i64 %ln8PG to i64*
  %ln8PI = load i64, i64* %ln8PH, !tbaa !1
  store i64 %ln8PI, i64* %ls5e0
  %ln8PJ = load i64, i64* %ls5eo
  %ln8PK = add i64 %ln8PJ, 48
  %ln8PL = inttoptr i64 %ln8PK to i64*
  %ln8PM = load i64, i64* %ln8PL, !tbaa !1
  store i64 %ln8PM, i64* %ls5dZ
  %ln8PO = ptrtoint i8* @ghczmprim_GHCziClasses_CZCEq_con_info to i64
  %ln8PN = load i64*, i64** %Hp_Var
  %ln8PP = getelementptr inbounds i64, i64* %ln8PN, i32 -15
  store i64 %ln8PO, i64* %ln8PP, !tbaa !3
  %ln8PR = load i64, i64* %ls5dZ
  %ln8PQ = load i64*, i64** %Hp_Var
  %ln8PS = getelementptr inbounds i64, i64* %ln8PQ, i32 -14
  store i64 %ln8PR, i64* %ln8PS, !tbaa !3
  %ln8PU = ptrtoint %Main_revert2_closure_struct* @Main_revert2_closure$def to i64
  %ln8PT = load i64*, i64** %Hp_Var
  %ln8PV = getelementptr inbounds i64, i64* %ln8PT, i32 -13
  store i64 %ln8PU, i64* %ln8PV, !tbaa !3
  %ln8PX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5et_info$def to i64
  %ln8PW = load i64*, i64** %Hp_Var
  %ln8PY = getelementptr inbounds i64, i64* %ln8PW, i32 -12
  store i64 %ln8PX, i64* %ln8PY, !tbaa !3
  %ln8Q0 = load i64*, i64** %Hp_Var
  %ln8Q1 = ptrtoint i64* %ln8Q0 to i64
  %ln8Q2 = add i64 %ln8Q1, -119
  store i64 %ln8Q2, i64* %lc8Fk
  %ln8Q4 = load i64, i64* %lc8Fk
  %ln8Q3 = load i64*, i64** %Hp_Var
  %ln8Q5 = getelementptr inbounds i64, i64* %ln8Q3, i32 -10
  store i64 %ln8Q4, i64* %ln8Q5, !tbaa !3
  %ln8Q7 = load i64, i64* %ls5e6
  %ln8Q6 = load i64*, i64** %Hp_Var
  %ln8Q8 = getelementptr inbounds i64, i64* %ln8Q6, i32 -9
  store i64 %ln8Q7, i64* %ln8Q8, !tbaa !3
  %ln8Qa = load i64, i64* %ls5e5
  %ln8Q9 = load i64*, i64** %Hp_Var
  %ln8Qb = getelementptr inbounds i64, i64* %ln8Q9, i32 -8
  store i64 %ln8Qa, i64* %ln8Qb, !tbaa !3
  %ln8Qd = load i64, i64* %ls5en
  %ln8Qc = load i64*, i64** %Hp_Var
  %ln8Qe = getelementptr inbounds i64, i64* %ln8Qc, i32 -7
  store i64 %ln8Qd, i64* %ln8Qe, !tbaa !3
  %ln8Qg = load i64, i64* %ls5eo
  %ln8Qf = load i64*, i64** %Hp_Var
  %ln8Qh = getelementptr inbounds i64, i64* %ln8Qf, i32 -6
  store i64 %ln8Qg, i64* %ln8Qh, !tbaa !3
  %ln8Qj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eq_info$def to i64
  %ln8Qi = load i64*, i64** %Hp_Var
  %ln8Qk = getelementptr inbounds i64, i64* %ln8Qi, i32 -5
  store i64 %ln8Qj, i64* %ln8Qk, !tbaa !3
  %ln8Qm = load i64, i64* %ls5e6
  %ln8Ql = load i64*, i64** %Hp_Var
  %ln8Qn = getelementptr inbounds i64, i64* %ln8Ql, i32 -3
  store i64 %ln8Qm, i64* %ln8Qn, !tbaa !3
  %ln8Qp = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8Qo = load i64*, i64** %Hp_Var
  %ln8Qq = getelementptr inbounds i64, i64* %ln8Qo, i32 -2
  store i64 %ln8Qp, i64* %ln8Qq, !tbaa !3
  %ln8Qs = load i64*, i64** %Hp_Var
  %ln8Qt = getelementptr inbounds i64, i64* %ln8Qs, i32 -5
  %ln8Qu = ptrtoint i64* %ln8Qt to i64
  %ln8Qr = load i64*, i64** %Hp_Var
  %ln8Qv = getelementptr inbounds i64, i64* %ln8Qr, i32 -1
  store i64 %ln8Qu, i64* %ln8Qv, !tbaa !3
  %ln8Qx = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8Qy = add i64 %ln8Qx, 1
  %ln8Qw = load i64*, i64** %Hp_Var
  %ln8Qz = getelementptr inbounds i64, i64* %ln8Qw, i32 0
  store i64 %ln8Qy, i64* %ln8Qz, !tbaa !3
  %ln8QA = load i64, i64* %ls5e0
  store i64 %ln8QA, i64* %R3_Var
  %ln8QB = load i64, i64* %lc8Fk
  store i64 %ln8QB, i64* %R2_Var
  %ln8QD = ptrtoint i8* @stg_ap_pp_info to i64
  %ln8QC = load i64*, i64** %Sp_Var
  %ln8QE = getelementptr inbounds i64, i64* %ln8QC, i32 -5
  store i64 %ln8QD, i64* %ln8QE, !tbaa !2
  %ln8QH = load i64*, i64** %Hp_Var
  %ln8QI = ptrtoint i64* %ln8QH to i64
  %ln8QJ = add i64 %ln8QI, -14
  %ln8QF = load i64*, i64** %Sp_Var
  %ln8QK = getelementptr inbounds i64, i64* %ln8QF, i32 -4
  store i64 %ln8QJ, i64* %ln8QK, !tbaa !2
  %ln8QM = load i64*, i64** %Hp_Var
  %ln8QN = getelementptr inbounds i64, i64* %ln8QM, i32 -12
  %ln8QO = ptrtoint i64* %ln8QN to i64
  %ln8QL = load i64*, i64** %Sp_Var
  %ln8QP = getelementptr inbounds i64, i64* %ln8QL, i32 -3
  store i64 %ln8QO, i64* %ln8QP, !tbaa !2
  %ln8QQ = load i64*, i64** %Sp_Var
  %ln8QR = getelementptr inbounds i64, i64* %ln8QQ, i32 -5
  %ln8QS = ptrtoint i64* %ln8QR to i64
  %ln8QT = inttoptr i64 %ln8QS to i64*
  store i64* %ln8QT, i64** %Sp_Var
  %ln8QU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QV = load i64*, i64** %Sp_Var
  %ln8QW = load i64*, i64** %Hp_Var
  %ln8QX = load i64, i64* %R1_Var
  %ln8QY = load i64, i64* %R2_Var
  %ln8QZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QU( i64* %Base_Arg, i64* %ln8QV, i64* %ln8QW, i64 %ln8QX, i64 %ln8QY, i64 %ln8QZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FH:
  %ln8R0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %ln8R0, !tbaa !5
  br label %c8FE
c8FE:
  %ln8R1 = load i64, i64* %ls5eo
  store i64 %ln8R1, i64* %R1_Var
  %ln8R2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8R3 = bitcast i64* %ln8R2 to i64*
  %ln8R4 = load i64, i64* %ln8R3, !tbaa !5
  %ln8R5 = inttoptr i64 %ln8R4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8R6 = load i64*, i64** %Sp_Var
  %ln8R7 = load i64*, i64** %Hp_Var
  %ln8R8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8R5( i64* %Base_Arg, i64* %ln8R6, i64* %ln8R7, i64 %ln8R8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwrevert_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwrevert_info$def to i8*)
define ghccc void @Main_zdwrevert_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8Gt_srt_struct* @_u8Gt_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwrevert_info$def to i64)) to i32),i32 0)}>
{
n8R9:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8FM
c8FM:
  %ln8Ra = load i64*, i64** %Sp_Var
  %ln8Rb = getelementptr inbounds i64, i64* %ln8Ra, i32 -5
  %ln8Rc = ptrtoint i64* %ln8Rb to i64
  %ln8Rd = icmp ult i64 %ln8Rc, %SpLim_Arg
  %ln8Re = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Rd, i1 0 )
  br i1 %ln8Re, label %c8FN, label %c8FO
c8FO:
  %ln8Rg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DS_info$def to i64
  %ln8Rf = load i64*, i64** %Sp_Var
  %ln8Rh = getelementptr inbounds i64, i64* %ln8Rf, i32 -3
  store i64 %ln8Rg, i64* %ln8Rh, !tbaa !2
  %ln8Ri = load i64, i64* %R4_Var
  store i64 %ln8Ri, i64* %R1_Var
  %ln8Rk = load i64, i64* %R2_Var
  %ln8Rj = load i64*, i64** %Sp_Var
  %ln8Rl = getelementptr inbounds i64, i64* %ln8Rj, i32 -2
  store i64 %ln8Rk, i64* %ln8Rl, !tbaa !2
  %ln8Rn = load i64, i64* %R3_Var
  %ln8Rm = load i64*, i64** %Sp_Var
  %ln8Ro = getelementptr inbounds i64, i64* %ln8Rm, i32 -1
  store i64 %ln8Rn, i64* %ln8Ro, !tbaa !2
  %ln8Rp = load i64*, i64** %Sp_Var
  %ln8Rq = getelementptr inbounds i64, i64* %ln8Rp, i32 -3
  %ln8Rr = ptrtoint i64* %ln8Rq to i64
  %ln8Rs = inttoptr i64 %ln8Rr to i64*
  store i64* %ln8Rs, i64** %Sp_Var
  %ln8Rt = load i64, i64* %R1_Var
  %ln8Ru = and i64 %ln8Rt, 7
  %ln8Rv = icmp ne i64 %ln8Ru, 0
  br i1 %ln8Rv, label %u8Gr, label %c8DT
c8DT:
  %ln8Rx = load i64, i64* %R1_Var
  %ln8Ry = inttoptr i64 %ln8Rx to i64*
  %ln8Rz = load i64, i64* %ln8Ry, !tbaa !4
  %ln8RA = inttoptr i64 %ln8Rz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RB = load i64*, i64** %Sp_Var
  %ln8RC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RA( i64* %Base_Arg, i64* %ln8RB, i64* %Hp_Arg, i64 %ln8RC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Gr:
  %ln8RD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RE = load i64*, i64** %Sp_Var
  %ln8RF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RD( i64* %Base_Arg, i64* %ln8RE, i64* %Hp_Arg, i64 %ln8RF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FN:
  %ln8RG = load i64, i64* %R4_Var
  store i64 %ln8RG, i64* %R4_Var
  %ln8RH = load i64, i64* %R3_Var
  store i64 %ln8RH, i64* %R3_Var
  %ln8RI = load i64, i64* %R2_Var
  store i64 %ln8RI, i64* %R2_Var
  %ln8RJ = ptrtoint %Main_zdwrevert_closure_struct* @Main_zdwrevert_closure$def to i64
  store i64 %ln8RJ, i64* %R1_Var
  %ln8RK = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8RL = bitcast i64* %ln8RK to i64*
  %ln8RM = load i64, i64* %ln8RL, !tbaa !5
  %ln8RN = inttoptr i64 %ln8RM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RO = load i64*, i64** %Sp_Var
  %ln8RP = load i64, i64* %R1_Var
  %ln8RQ = load i64, i64* %R2_Var
  %ln8RR = load i64, i64* %R3_Var
  %ln8RS = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RN( i64* %Base_Arg, i64* %ln8RO, i64* %Hp_Arg, i64 %ln8RP, i64 %ln8RQ, i64 %ln8RR, i64 %ln8RS, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8DS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DS_info$def to i8*)
define internal ghccc void @c8DS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8Gt_srt_struct* @_u8Gt_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8DS_info$def to i64)) to i32),i32 0)}>
{
n8RT:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e4 = alloca i64, i32 1
  %ls5e5 = alloca i64, i32 1
  %lc8DY = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8DS
c8DS:
  %ln8RU = load i64, i64* %R1_Var
  %ln8RV = and i64 %ln8RU, 7
  switch i64 %ln8RV, label %u8Gj [i64 1, label %u8Gj
i64 2, label %c8FK]
u8Gj:
  %ln8RW = load i64*, i64** %Sp_Var
  %ln8RX = getelementptr inbounds i64, i64* %ln8RW, i32 3
  %ln8RY = ptrtoint i64* %ln8RX to i64
  %ln8RZ = inttoptr i64 %ln8RY to i64*
  store i64* %ln8RZ, i64** %Sp_Var
  %ln8S0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8FJ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8S1 = load i64*, i64** %Sp_Var
  %ln8S2 = load i64*, i64** %Hp_Var
  %ln8S3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8S0( i64* %Base_Arg, i64* %ln8S1, i64* %ln8S2, i64 %ln8S3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FK:
  %ln8S4 = load i64*, i64** %Hp_Var
  %ln8S5 = getelementptr inbounds i64, i64* %ln8S4, i32 6
  %ln8S6 = ptrtoint i64* %ln8S5 to i64
  %ln8S7 = inttoptr i64 %ln8S6 to i64*
  store i64* %ln8S7, i64** %Hp_Var
  %ln8S8 = load i64*, i64** %Hp_Var
  %ln8S9 = ptrtoint i64* %ln8S8 to i64
  %ln8Sa = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Sb = bitcast i64* %ln8Sa to i64*
  %ln8Sc = load i64, i64* %ln8Sb, !tbaa !5
  %ln8Sd = icmp ugt i64 %ln8S9, %ln8Sc
  %ln8Se = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Sd, i1 0 )
  br i1 %ln8Se, label %c8FT, label %c8FS
c8FS:
  %ln8Sh = load i64, i64* %R1_Var
  %ln8Si = add i64 %ln8Sh, 6
  %ln8Sj = inttoptr i64 %ln8Si to i64*
  %ln8Sk = load i64, i64* %ln8Sj, !tbaa !4
  store i64 %ln8Sk, i64* %ls5e4
  %ln8Sn = load i64, i64* %R1_Var
  %ln8So = add i64 %ln8Sn, 14
  %ln8Sp = inttoptr i64 %ln8So to i64*
  %ln8Sq = load i64, i64* %ln8Sp, !tbaa !4
  store i64 %ln8Sq, i64* %ls5e5
  %ln8Ss = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5e6_info$def to i64
  %ln8Sr = load i64*, i64** %Hp_Var
  %ln8St = getelementptr inbounds i64, i64* %ln8Sr, i32 -5
  store i64 %ln8Ss, i64* %ln8St, !tbaa !3
  %ln8Sv = load i64*, i64** %Sp_Var
  %ln8Sw = getelementptr inbounds i64, i64* %ln8Sv, i32 2
  %ln8Sx = bitcast i64* %ln8Sw to i64*
  %ln8Sy = load i64, i64* %ln8Sx, !tbaa !2
  %ln8Su = load i64*, i64** %Hp_Var
  %ln8Sz = getelementptr inbounds i64, i64* %ln8Su, i32 -3
  store i64 %ln8Sy, i64* %ln8Sz, !tbaa !3
  %ln8SB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5e7_info$def to i64
  %ln8SA = load i64*, i64** %Hp_Var
  %ln8SC = getelementptr inbounds i64, i64* %ln8SA, i32 -2
  store i64 %ln8SB, i64* %ln8SC, !tbaa !3
  %ln8SD = load i64*, i64** %Hp_Var
  %ln8SE = getelementptr inbounds i64, i64* %ln8SD, i32 -5
  %ln8SF = ptrtoint i64* %ln8SE to i64
  store i64 %ln8SF, i64* %lc8DY
  %ln8SH = load i64, i64* %lc8DY
  %ln8SG = load i64*, i64** %Hp_Var
  %ln8SI = getelementptr inbounds i64, i64* %ln8SG, i32 0
  store i64 %ln8SH, i64* %ln8SI, !tbaa !3
  %ln8SK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ec_info$def to i64
  %ln8SJ = load i64*, i64** %Sp_Var
  %ln8SL = getelementptr inbounds i64, i64* %ln8SJ, i32 -2
  store i64 %ln8SK, i64* %ln8SL, !tbaa !2
  %ln8SM = load i64*, i64** %Hp_Var
  %ln8SN = getelementptr inbounds i64, i64* %ln8SM, i32 -2
  %ln8SO = ptrtoint i64* %ln8SN to i64
  store i64 %ln8SO, i64* %R3_Var
  %ln8SP = load i64, i64* %ls5e4
  store i64 %ln8SP, i64* %R2_Var
  %ln8SQ = load i64*, i64** %Sp_Var
  %ln8SR = getelementptr inbounds i64, i64* %ln8SQ, i32 1
  %ln8SS = bitcast i64* %ln8SR to i64*
  %ln8ST = load i64, i64* %ln8SS, !tbaa !2
  store i64 %ln8ST, i64* %R1_Var
  %ln8SV = load i64, i64* %ls5e5
  %ln8SU = load i64*, i64** %Sp_Var
  %ln8SW = getelementptr inbounds i64, i64* %ln8SU, i32 -1
  store i64 %ln8SV, i64* %ln8SW, !tbaa !2
  %ln8SY = load i64, i64* %lc8DY
  %ln8SX = load i64*, i64** %Sp_Var
  %ln8SZ = getelementptr inbounds i64, i64* %ln8SX, i32 0
  store i64 %ln8SY, i64* %ln8SZ, !tbaa !2
  %ln8T0 = load i64*, i64** %Sp_Var
  %ln8T1 = getelementptr inbounds i64, i64* %ln8T0, i32 -2
  %ln8T2 = ptrtoint i64* %ln8T1 to i64
  %ln8T3 = inttoptr i64 %ln8T2 to i64*
  store i64* %ln8T3, i64** %Sp_Var
  %ln8T4 = bitcast i8* @stg_ap_pp_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8T5 = load i64*, i64** %Sp_Var
  %ln8T6 = load i64*, i64** %Hp_Var
  %ln8T7 = load i64, i64* %R1_Var
  %ln8T8 = load i64, i64* %R2_Var
  %ln8T9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8T4( i64* %Base_Arg, i64* %ln8T5, i64* %ln8T6, i64 %ln8T7, i64 %ln8T8, i64 %ln8T9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FT:
  %ln8Ta = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8Ta, !tbaa !5
  %ln8Tb = load i64, i64* %R1_Var
  store i64 %ln8Tb, i64* %R1_Var
  %ln8Tc = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Td = load i64*, i64** %Sp_Var
  %ln8Te = load i64*, i64** %Hp_Var
  %ln8Tf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Tc( i64* %Base_Arg, i64* %ln8Td, i64* %ln8Te, i64 %ln8Tf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ec_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ec_info$def to i8*)
define internal ghccc void @c8Ec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u8Gt_srt_struct* @_u8Gt_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ec_info$def to i64)) to i32),i32 0)}>
{
n8Tg:
  %ls5e5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc8DY = alloca i64, i32 1
  %lc8F9 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8Ec
c8Ec:
  %ln8Th = load i64*, i64** %Sp_Var
  %ln8Ti = getelementptr inbounds i64, i64* %ln8Th, i32 1
  %ln8Tj = bitcast i64* %ln8Ti to i64*
  %ln8Tk = load i64, i64* %ln8Tj, !tbaa !2
  store i64 %ln8Tk, i64* %ls5e5
  %ln8Tl = load i64, i64* %R1_Var
  %ln8Tm = and i64 %ln8Tl, 7
  switch i64 %ln8Tm, label %c8FW [i64 1, label %c8FW
i64 2, label %c8Gc]
c8FW:
  %ln8To = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eg_info$def to i64
  %ln8Tn = load i64*, i64** %Sp_Var
  %ln8Tp = getelementptr inbounds i64, i64* %ln8Tn, i32 1
  store i64 %ln8To, i64* %ln8Tp, !tbaa !2
  %ln8Tq = load i64, i64* %ls5e5
  store i64 %ln8Tq, i64* %R1_Var
  %ln8Tr = load i64*, i64** %Sp_Var
  %ln8Ts = getelementptr inbounds i64, i64* %ln8Tr, i32 1
  %ln8Tt = ptrtoint i64* %ln8Ts to i64
  %ln8Tu = inttoptr i64 %ln8Tt to i64*
  store i64* %ln8Tu, i64** %Sp_Var
  %ln8Tv = load i64, i64* %R1_Var
  %ln8Tw = and i64 %ln8Tv, 7
  %ln8Tx = icmp ne i64 %ln8Tw, 0
  br i1 %ln8Tx, label %u8Gn, label %c8Eh
c8Eh:
  %ln8Tz = load i64, i64* %R1_Var
  %ln8TA = inttoptr i64 %ln8Tz to i64*
  %ln8TB = load i64, i64* %ln8TA, !tbaa !4
  %ln8TC = inttoptr i64 %ln8TB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TD = load i64*, i64** %Sp_Var
  %ln8TE = load i64*, i64** %Hp_Var
  %ln8TF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TC( i64* %Base_Arg, i64* %ln8TD, i64* %ln8TE, i64 %ln8TF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Gn:
  %ln8TG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TH = load i64*, i64** %Sp_Var
  %ln8TI = load i64*, i64** %Hp_Var
  %ln8TJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TG( i64* %Base_Arg, i64* %ln8TH, i64* %ln8TI, i64 %ln8TJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Gc:
  %ln8TK = load i64*, i64** %Hp_Var
  %ln8TL = getelementptr inbounds i64, i64* %ln8TK, i32 10
  %ln8TM = ptrtoint i64* %ln8TL to i64
  %ln8TN = inttoptr i64 %ln8TM to i64*
  store i64* %ln8TN, i64** %Hp_Var
  %ln8TO = load i64*, i64** %Hp_Var
  %ln8TP = ptrtoint i64* %ln8TO to i64
  %ln8TQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8TR = bitcast i64* %ln8TQ to i64*
  %ln8TS = load i64, i64* %ln8TR, !tbaa !5
  %ln8TT = icmp ugt i64 %ln8TP, %ln8TS
  %ln8TU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8TT, i1 0 )
  br i1 %ln8TU, label %c8Gf, label %c8Ge
c8Ge:
  %ln8TW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5en_info$def to i64
  %ln8TV = load i64*, i64** %Hp_Var
  %ln8TX = getelementptr inbounds i64, i64* %ln8TV, i32 -9
  store i64 %ln8TW, i64* %ln8TX, !tbaa !3
  %ln8TY = load i64*, i64** %Sp_Var
  %ln8TZ = getelementptr inbounds i64, i64* %ln8TY, i32 2
  %ln8U0 = bitcast i64* %ln8TZ to i64*
  %ln8U1 = load i64, i64* %ln8U0, !tbaa !2
  store i64 %ln8U1, i64* %lc8DY
  %ln8U3 = load i64, i64* %lc8DY
  %ln8U2 = load i64*, i64** %Hp_Var
  %ln8U4 = getelementptr inbounds i64, i64* %ln8U2, i32 -7
  store i64 %ln8U3, i64* %ln8U4, !tbaa !3
  %ln8U6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eo_info$def to i64
  %ln8U5 = load i64*, i64** %Hp_Var
  %ln8U7 = getelementptr inbounds i64, i64* %ln8U5, i32 -6
  store i64 %ln8U6, i64* %ln8U7, !tbaa !3
  %ln8U9 = load i64, i64* %lc8DY
  %ln8U8 = load i64*, i64** %Hp_Var
  %ln8Ua = getelementptr inbounds i64, i64* %ln8U8, i32 -4
  store i64 %ln8U9, i64* %ln8Ua, !tbaa !3
  %ln8Uc = load i64, i64* %ls5e5
  %ln8Ub = load i64*, i64** %Hp_Var
  %ln8Ud = getelementptr inbounds i64, i64* %ln8Ub, i32 -3
  store i64 %ln8Uc, i64* %ln8Ud, !tbaa !3
  %ln8Ue = load i64*, i64** %Hp_Var
  %ln8Uf = getelementptr inbounds i64, i64* %ln8Ue, i32 -9
  %ln8Ug = ptrtoint i64* %ln8Uf to i64
  store i64 %ln8Ug, i64* %lc8F9
  %ln8Ui = load i64, i64* %lc8F9
  %ln8Uh = load i64*, i64** %Hp_Var
  %ln8Uj = getelementptr inbounds i64, i64* %ln8Uh, i32 -2
  store i64 %ln8Ui, i64* %ln8Uj, !tbaa !3
  %ln8Ul = load i64*, i64** %Sp_Var
  %ln8Um = getelementptr inbounds i64, i64* %ln8Ul, i32 4
  %ln8Un = bitcast i64* %ln8Um to i64*
  %ln8Uo = load i64, i64* %ln8Un, !tbaa !2
  %ln8Uk = load i64*, i64** %Hp_Var
  %ln8Up = getelementptr inbounds i64, i64* %ln8Uk, i32 -1
  store i64 %ln8Uo, i64* %ln8Up, !tbaa !3
  %ln8Ur = load i64*, i64** %Sp_Var
  %ln8Us = getelementptr inbounds i64, i64* %ln8Ur, i32 3
  %ln8Ut = bitcast i64* %ln8Us to i64*
  %ln8Uu = load i64, i64* %ln8Ut, !tbaa !2
  %ln8Uq = load i64*, i64** %Hp_Var
  %ln8Uv = getelementptr inbounds i64, i64* %ln8Uq, i32 0
  store i64 %ln8Uu, i64* %ln8Uv, !tbaa !3
  %ln8Uw = load i64*, i64** %Hp_Var
  %ln8Ux = getelementptr inbounds i64, i64* %ln8Uw, i32 -6
  %ln8Uy = ptrtoint i64* %ln8Ux to i64
  store i64 %ln8Uy, i64* %R2_Var
  %ln8Uz = load i64, i64* %lc8F9
  store i64 %ln8Uz, i64* %R1_Var
  %ln8UA = load i64*, i64** %Sp_Var
  %ln8UB = getelementptr inbounds i64, i64* %ln8UA, i32 5
  %ln8UC = ptrtoint i64* %ln8UB to i64
  %ln8UD = inttoptr i64 %ln8UC to i64*
  store i64* %ln8UD, i64** %Sp_Var
  %ln8UE = load i64*, i64** %Sp_Var
  %ln8UF = getelementptr inbounds i64, i64* %ln8UE, i32 0
  %ln8UG = bitcast i64* %ln8UF to i64*
  %ln8UH = load i64, i64* %ln8UG, !tbaa !2
  %ln8UI = inttoptr i64 %ln8UH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8UJ = load i64*, i64** %Sp_Var
  %ln8UK = load i64*, i64** %Hp_Var
  %ln8UL = load i64, i64* %R1_Var
  %ln8UM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8UI( i64* %Base_Arg, i64* %ln8UJ, i64* %ln8UK, i64 %ln8UL, i64 %ln8UM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Gf:
  %ln8UN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 80, i64* %ln8UN, !tbaa !5
  %ln8UO = load i64, i64* %R1_Var
  store i64 %ln8UO, i64* %R1_Var
  %ln8UP = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8UQ = load i64*, i64** %Sp_Var
  %ln8UR = load i64*, i64** %Hp_Var
  %ln8US = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8UP( i64* %Base_Arg, i64* %ln8UQ, i64* %ln8UR, i64 %ln8US, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Eg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eg_info$def to i8*)
define internal ghccc void @c8Eg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_revert4_closure_struct* @Main_revert4_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Eg_info$def to i64)) to i32),i32 0)}>
{
n8UT:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5eb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Eg
c8Eg:
  %ln8UU = load i64, i64* %R1_Var
  %ln8UV = and i64 %ln8UU, 7
  switch i64 %ln8UV, label %u8Gk [i64 1, label %u8Gk
i64 2, label %c8G2]
u8Gk:
  %ln8UW = load i64*, i64** %Sp_Var
  %ln8UX = getelementptr inbounds i64, i64* %ln8UW, i32 4
  %ln8UY = ptrtoint i64* %ln8UX to i64
  %ln8UZ = inttoptr i64 %ln8UY to i64*
  store i64* %ln8UZ, i64** %Sp_Var
  %ln8V0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8FJ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8V1 = load i64*, i64** %Sp_Var
  %ln8V2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8V0( i64* %Base_Arg, i64* %ln8V1, i64* %Hp_Arg, i64 %ln8V2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8G2:
  %ln8V4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Em_info$def to i64
  %ln8V3 = load i64*, i64** %Sp_Var
  %ln8V5 = getelementptr inbounds i64, i64* %ln8V3, i32 0
  store i64 %ln8V4, i64* %ln8V5, !tbaa !2
  %ln8V8 = load i64, i64* %R1_Var
  %ln8V9 = add i64 %ln8V8, 6
  %ln8Va = inttoptr i64 %ln8V9 to i64*
  %ln8Vb = load i64, i64* %ln8Va, !tbaa !4
  store i64 %ln8Vb, i64* %ls5eb
  %ln8Ve = load i64, i64* %R1_Var
  %ln8Vf = add i64 %ln8Ve, 14
  %ln8Vg = inttoptr i64 %ln8Vf to i64*
  %ln8Vh = load i64, i64* %ln8Vg, !tbaa !4
  store i64 %ln8Vh, i64* %R1_Var
  %ln8Vj = load i64, i64* %ls5eb
  %ln8Vi = load i64*, i64** %Sp_Var
  %ln8Vk = getelementptr inbounds i64, i64* %ln8Vi, i32 2
  store i64 %ln8Vj, i64* %ln8Vk, !tbaa !2
  %ln8Vl = load i64, i64* %R1_Var
  %ln8Vm = and i64 %ln8Vl, 7
  %ln8Vn = icmp ne i64 %ln8Vm, 0
  br i1 %ln8Vn, label %u8Go, label %c8En
c8En:
  %ln8Vp = load i64, i64* %R1_Var
  %ln8Vq = inttoptr i64 %ln8Vp to i64*
  %ln8Vr = load i64, i64* %ln8Vq, !tbaa !4
  %ln8Vs = inttoptr i64 %ln8Vr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Vt = load i64*, i64** %Sp_Var
  %ln8Vu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Vs( i64* %Base_Arg, i64* %ln8Vt, i64* %Hp_Arg, i64 %ln8Vu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Go:
  %ln8Vv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Em_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Vw = load i64*, i64** %Sp_Var
  %ln8Vx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Vv( i64* %Base_Arg, i64* %ln8Vw, i64* %Hp_Arg, i64 %ln8Vx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Em_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Em_info$def to i8*)
define internal ghccc void @c8Em_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_revert4_closure_struct* @Main_revert4_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Em_info$def to i64)) to i32),i32 0)}>
{
n8Vy:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5e0 = alloca i64, i32 1
  %ls5eb = alloca i64, i32 1
  %lc8DY = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Em
c8Em:
  %ln8Vz = load i64, i64* %R1_Var
  %ln8VA = and i64 %ln8Vz, 7
  switch i64 %ln8VA, label %c8G4 [i64 1, label %c8G4
i64 2, label %u8Gl]
c8G4:
  %ln8VB = load i64*, i64** %Hp_Var
  %ln8VC = getelementptr inbounds i64, i64* %ln8VB, i32 13
  %ln8VD = ptrtoint i64* %ln8VC to i64
  %ln8VE = inttoptr i64 %ln8VD to i64*
  store i64* %ln8VE, i64** %Hp_Var
  %ln8VF = load i64*, i64** %Hp_Var
  %ln8VG = ptrtoint i64* %ln8VF to i64
  %ln8VH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8VI = bitcast i64* %ln8VH to i64*
  %ln8VJ = load i64, i64* %ln8VI, !tbaa !5
  %ln8VK = icmp ugt i64 %ln8VG, %ln8VJ
  %ln8VL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8VK, i1 0 )
  br i1 %ln8VL, label %c8G7, label %c8G6
c8G6:
  %ln8VN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5ei_info$def to i64
  %ln8VM = load i64*, i64** %Hp_Var
  %ln8VO = getelementptr inbounds i64, i64* %ln8VM, i32 -12
  store i64 %ln8VN, i64* %ln8VO, !tbaa !3
  %ln8VP = load i64*, i64** %Sp_Var
  %ln8VQ = getelementptr inbounds i64, i64* %ln8VP, i32 3
  %ln8VR = bitcast i64* %ln8VQ to i64*
  %ln8VS = load i64, i64* %ln8VR, !tbaa !2
  store i64 %ln8VS, i64* %ls5e0
  %ln8VU = load i64, i64* %ls5e0
  %ln8VT = load i64*, i64** %Hp_Var
  %ln8VV = getelementptr inbounds i64, i64* %ln8VT, i32 -10
  store i64 %ln8VU, i64* %ln8VV, !tbaa !3
  %ln8VW = load i64*, i64** %Sp_Var
  %ln8VX = getelementptr inbounds i64, i64* %ln8VW, i32 2
  %ln8VY = bitcast i64* %ln8VX to i64*
  %ln8VZ = load i64, i64* %ln8VY, !tbaa !2
  store i64 %ln8VZ, i64* %ls5eb
  %ln8W1 = load i64, i64* %ls5eb
  %ln8W0 = load i64*, i64** %Hp_Var
  %ln8W2 = getelementptr inbounds i64, i64* %ln8W0, i32 -9
  store i64 %ln8W1, i64* %ln8W2, !tbaa !3
  %ln8W3 = load i64*, i64** %Sp_Var
  %ln8W4 = getelementptr inbounds i64, i64* %ln8W3, i32 1
  %ln8W5 = bitcast i64* %ln8W4 to i64*
  %ln8W6 = load i64, i64* %ln8W5, !tbaa !2
  store i64 %ln8W6, i64* %lc8DY
  %ln8W8 = load i64, i64* %lc8DY
  %ln8W7 = load i64*, i64** %Hp_Var
  %ln8W9 = getelementptr inbounds i64, i64* %ln8W7, i32 -8
  store i64 %ln8W8, i64* %ln8W9, !tbaa !3
  %ln8Wb = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8Wa = load i64*, i64** %Hp_Var
  %ln8Wc = getelementptr inbounds i64, i64* %ln8Wa, i32 -7
  store i64 %ln8Wb, i64* %ln8Wc, !tbaa !3
  %ln8We = load i64*, i64** %Hp_Var
  %ln8Wf = getelementptr inbounds i64, i64* %ln8We, i32 -12
  %ln8Wg = ptrtoint i64* %ln8Wf to i64
  %ln8Wd = load i64*, i64** %Hp_Var
  %ln8Wh = getelementptr inbounds i64, i64* %ln8Wd, i32 -6
  store i64 %ln8Wg, i64* %ln8Wh, !tbaa !3
  %ln8Wj = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln8Wk = add i64 %ln8Wj, 1
  %ln8Wi = load i64*, i64** %Hp_Var
  %ln8Wl = getelementptr inbounds i64, i64* %ln8Wi, i32 -5
  store i64 %ln8Wk, i64* %ln8Wl, !tbaa !3
  %ln8Wn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eg_info$def to i64
  %ln8Wm = load i64*, i64** %Hp_Var
  %ln8Wo = getelementptr inbounds i64, i64* %ln8Wm, i32 -4
  store i64 %ln8Wn, i64* %ln8Wo, !tbaa !3
  %ln8Wq = load i64, i64* %ls5e0
  %ln8Wp = load i64*, i64** %Hp_Var
  %ln8Wr = getelementptr inbounds i64, i64* %ln8Wp, i32 -2
  store i64 %ln8Wq, i64* %ln8Wr, !tbaa !3
  %ln8Wt = load i64, i64* %ls5eb
  %ln8Ws = load i64*, i64** %Hp_Var
  %ln8Wu = getelementptr inbounds i64, i64* %ln8Ws, i32 -1
  store i64 %ln8Wt, i64* %ln8Wu, !tbaa !3
  %ln8Ww = load i64, i64* %lc8DY
  %ln8Wv = load i64*, i64** %Hp_Var
  %ln8Wx = getelementptr inbounds i64, i64* %ln8Wv, i32 0
  store i64 %ln8Ww, i64* %ln8Wx, !tbaa !3
  %ln8Wz = load i64*, i64** %Hp_Var
  %ln8WA = ptrtoint i64* %ln8Wz to i64
  %ln8WB = add i64 %ln8WA, -54
  store i64 %ln8WB, i64* %R2_Var
  %ln8WC = load i64*, i64** %Hp_Var
  %ln8WD = getelementptr inbounds i64, i64* %ln8WC, i32 -4
  %ln8WE = ptrtoint i64* %ln8WD to i64
  store i64 %ln8WE, i64* %R1_Var
  %ln8WF = load i64*, i64** %Sp_Var
  %ln8WG = getelementptr inbounds i64, i64* %ln8WF, i32 4
  %ln8WH = ptrtoint i64* %ln8WG to i64
  %ln8WI = inttoptr i64 %ln8WH to i64*
  store i64* %ln8WI, i64** %Sp_Var
  %ln8WJ = load i64*, i64** %Sp_Var
  %ln8WK = getelementptr inbounds i64, i64* %ln8WJ, i32 0
  %ln8WL = bitcast i64* %ln8WK to i64*
  %ln8WM = load i64, i64* %ln8WL, !tbaa !2
  %ln8WN = inttoptr i64 %ln8WM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8WO = load i64*, i64** %Sp_Var
  %ln8WP = load i64*, i64** %Hp_Var
  %ln8WQ = load i64, i64* %R1_Var
  %ln8WR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8WN( i64* %Base_Arg, i64* %ln8WO, i64* %ln8WP, i64 %ln8WQ, i64 %ln8WR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8G7:
  %ln8WS = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %ln8WS, !tbaa !5
  %ln8WT = load i64, i64* %R1_Var
  store i64 %ln8WT, i64* %R1_Var
  %ln8WU = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8WV = load i64*, i64** %Sp_Var
  %ln8WW = load i64*, i64** %Hp_Var
  %ln8WX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8WU( i64* %Base_Arg, i64* %ln8WV, i64* %ln8WW, i64 %ln8WX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Gl:
  %ln8WY = load i64*, i64** %Sp_Var
  %ln8WZ = getelementptr inbounds i64, i64* %ln8WY, i32 4
  %ln8X0 = ptrtoint i64* %ln8WZ to i64
  %ln8X1 = inttoptr i64 %ln8X0 to i64*
  store i64* %ln8X1, i64** %Sp_Var
  %ln8X2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8FJ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8X3 = load i64*, i64** %Sp_Var
  %ln8X4 = load i64*, i64** %Hp_Var
  %ln8X5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8X2( i64* %Base_Arg, i64* %ln8X3, i64* %ln8X4, i64 %ln8X5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c8FJ = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c8FJ$def to i8*)
define internal ghccc void @_c8FJ$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n8X6:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8FJ
c8FJ:
  %ln8X7 = ptrtoint %Main_revert4_closure_struct* @Main_revert4_closure$def to i64
  store i64 %ln8X7, i64* %R1_Var
  %ln8X9 = load i64, i64* %R1_Var
  %ln8Xa = inttoptr i64 %ln8X9 to i64*
  %ln8Xb = load i64, i64* %ln8Xa, !tbaa !4
  %ln8Xc = inttoptr i64 %ln8Xb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Xd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Xc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Xd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_revert_closure_struct = type <{i64, i64}>
@Main_revert_closure$def = internal global %Main_revert_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert_info$def to i64), i64 0}>
@Main_revert_closure = alias i8, bitcast (%Main_revert_closure_struct* @Main_revert_closure$def to i8*)
@Main_revert_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert_info$def to i8*)
define ghccc void @Main_revert_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwrevert_closure_struct* @Main_zdwrevert_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revert_info$def to i64)) to i32),i32 0)}>
{
n8Xy:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Xl
c8Xl:
  %ln8Xz = load i64*, i64** %Sp_Var
  %ln8XA = getelementptr inbounds i64, i64* %ln8Xz, i32 -3
  %ln8XB = ptrtoint i64* %ln8XA to i64
  %ln8XC = icmp ult i64 %ln8XB, %SpLim_Arg
  %ln8XD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8XC, i1 0 )
  br i1 %ln8XD, label %c8Xr, label %c8Xs
c8Xs:
  %ln8XF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xi_info$def to i64
  %ln8XE = load i64*, i64** %Sp_Var
  %ln8XG = getelementptr inbounds i64, i64* %ln8XE, i32 -3
  store i64 %ln8XF, i64* %ln8XG, !tbaa !2
  %ln8XH = load i64, i64* %R2_Var
  store i64 %ln8XH, i64* %R1_Var
  %ln8XJ = load i64, i64* %R3_Var
  %ln8XI = load i64*, i64** %Sp_Var
  %ln8XK = getelementptr inbounds i64, i64* %ln8XI, i32 -2
  store i64 %ln8XJ, i64* %ln8XK, !tbaa !2
  %ln8XM = load i64, i64* %R4_Var
  %ln8XL = load i64*, i64** %Sp_Var
  %ln8XN = getelementptr inbounds i64, i64* %ln8XL, i32 -1
  store i64 %ln8XM, i64* %ln8XN, !tbaa !2
  %ln8XO = load i64*, i64** %Sp_Var
  %ln8XP = getelementptr inbounds i64, i64* %ln8XO, i32 -3
  %ln8XQ = ptrtoint i64* %ln8XP to i64
  %ln8XR = inttoptr i64 %ln8XQ to i64*
  store i64* %ln8XR, i64** %Sp_Var
  %ln8XS = load i64, i64* %R1_Var
  %ln8XT = and i64 %ln8XS, 7
  %ln8XU = icmp ne i64 %ln8XT, 0
  br i1 %ln8XU, label %u8Xx, label %c8Xj
c8Xj:
  %ln8XW = load i64, i64* %R1_Var
  %ln8XX = inttoptr i64 %ln8XW to i64*
  %ln8XY = load i64, i64* %ln8XX, !tbaa !4
  %ln8XZ = inttoptr i64 %ln8XY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Y0 = load i64*, i64** %Sp_Var
  %ln8Y1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8XZ( i64* %Base_Arg, i64* %ln8Y0, i64* %Hp_Arg, i64 %ln8Y1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Xx:
  %ln8Y2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Y3 = load i64*, i64** %Sp_Var
  %ln8Y4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Y2( i64* %Base_Arg, i64* %ln8Y3, i64* %Hp_Arg, i64 %ln8Y4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Xr:
  %ln8Y5 = load i64, i64* %R4_Var
  store i64 %ln8Y5, i64* %R4_Var
  %ln8Y6 = load i64, i64* %R3_Var
  store i64 %ln8Y6, i64* %R3_Var
  %ln8Y7 = load i64, i64* %R2_Var
  store i64 %ln8Y7, i64* %R2_Var
  %ln8Y8 = ptrtoint %Main_revert_closure_struct* @Main_revert_closure$def to i64
  store i64 %ln8Y8, i64* %R1_Var
  %ln8Y9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Ya = bitcast i64* %ln8Y9 to i64*
  %ln8Yb = load i64, i64* %ln8Ya, !tbaa !5
  %ln8Yc = inttoptr i64 %ln8Yb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Yd = load i64*, i64** %Sp_Var
  %ln8Ye = load i64, i64* %R1_Var
  %ln8Yf = load i64, i64* %R2_Var
  %ln8Yg = load i64, i64* %R3_Var
  %ln8Yh = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Yc( i64* %Base_Arg, i64* %ln8Yd, i64* %Hp_Arg, i64 %ln8Ye, i64 %ln8Yf, i64 %ln8Yg, i64 %ln8Yh, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Xi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xi_info$def to i8*)
define internal ghccc void @c8Xi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwrevert_closure_struct* @Main_zdwrevert_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xi_info$def to i64)) to i32),i32 0)}>
{
n8Yi:
  %ls5ew = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Xi
c8Xi:
  %ln8Yj = load i64*, i64** %Sp_Var
  %ln8Yk = getelementptr inbounds i64, i64* %ln8Yj, i32 2
  %ln8Yl = bitcast i64* %ln8Yk to i64*
  %ln8Ym = load i64, i64* %ln8Yl, !tbaa !2
  store i64 %ln8Ym, i64* %ls5ew
  %ln8Yo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xo_info$def to i64
  %ln8Yn = load i64*, i64** %Sp_Var
  %ln8Yp = getelementptr inbounds i64, i64* %ln8Yn, i32 2
  store i64 %ln8Yo, i64* %ln8Yp, !tbaa !2
  %ln8Yq = load i64, i64* %ls5ew
  store i64 %ln8Yq, i64* %R4_Var
  %ln8Yr = load i64*, i64** %Sp_Var
  %ln8Ys = getelementptr inbounds i64, i64* %ln8Yr, i32 1
  %ln8Yt = bitcast i64* %ln8Ys to i64*
  %ln8Yu = load i64, i64* %ln8Yt, !tbaa !2
  store i64 %ln8Yu, i64* %R3_Var
  %ln8Yv = add i64 %R1_Arg, 7
  %ln8Yw = inttoptr i64 %ln8Yv to i64*
  %ln8Yx = load i64, i64* %ln8Yw, !tbaa !4
  store i64 %ln8Yx, i64* %R2_Var
  %ln8Yy = load i64*, i64** %Sp_Var
  %ln8Yz = getelementptr inbounds i64, i64* %ln8Yy, i32 2
  %ln8YA = ptrtoint i64* %ln8Yz to i64
  %ln8YB = inttoptr i64 %ln8YA to i64*
  store i64* %ln8YB, i64** %Sp_Var
  %ln8YC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwrevert_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8YD = load i64*, i64** %Sp_Var
  %ln8YE = load i64, i64* %R2_Var
  %ln8YF = load i64, i64* %R3_Var
  %ln8YG = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8YC( i64* %Base_Arg, i64* %ln8YD, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8YE, i64 %ln8YF, i64 %ln8YG, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Xo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xo_info$def to i8*)
define internal ghccc void @c8Xo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8YH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Xo
c8Xo:
  %ln8YI = load i64*, i64** %Hp_Var
  %ln8YJ = getelementptr inbounds i64, i64* %ln8YI, i32 3
  %ln8YK = ptrtoint i64* %ln8YJ to i64
  %ln8YL = inttoptr i64 %ln8YK to i64*
  store i64* %ln8YL, i64** %Hp_Var
  %ln8YM = load i64*, i64** %Hp_Var
  %ln8YN = ptrtoint i64* %ln8YM to i64
  %ln8YO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8YP = bitcast i64* %ln8YO to i64*
  %ln8YQ = load i64, i64* %ln8YP, !tbaa !5
  %ln8YR = icmp ugt i64 %ln8YN, %ln8YQ
  %ln8YS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8YR, i1 0 )
  br i1 %ln8YS, label %c8Xw, label %c8Xv
c8Xv:
  %ln8YU = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln8YT = load i64*, i64** %Hp_Var
  %ln8YV = getelementptr inbounds i64, i64* %ln8YT, i32 -2
  store i64 %ln8YU, i64* %ln8YV, !tbaa !3
  %ln8YX = load i64, i64* %R1_Var
  %ln8YW = load i64*, i64** %Hp_Var
  %ln8YY = getelementptr inbounds i64, i64* %ln8YW, i32 -1
  store i64 %ln8YX, i64* %ln8YY, !tbaa !3
  %ln8Z0 = load i64, i64* %R2_Var
  %ln8YZ = load i64*, i64** %Hp_Var
  %ln8Z1 = getelementptr inbounds i64, i64* %ln8YZ, i32 0
  store i64 %ln8Z0, i64* %ln8Z1, !tbaa !3
  %ln8Z3 = load i64*, i64** %Hp_Var
  %ln8Z4 = ptrtoint i64* %ln8Z3 to i64
  %ln8Z5 = add i64 %ln8Z4, -14
  store i64 %ln8Z5, i64* %R1_Var
  %ln8Z6 = load i64*, i64** %Sp_Var
  %ln8Z7 = getelementptr inbounds i64, i64* %ln8Z6, i32 1
  %ln8Z8 = ptrtoint i64* %ln8Z7 to i64
  %ln8Z9 = inttoptr i64 %ln8Z8 to i64*
  store i64* %ln8Z9, i64** %Sp_Var
  %ln8Za = load i64*, i64** %Sp_Var
  %ln8Zb = getelementptr inbounds i64, i64* %ln8Za, i32 0
  %ln8Zc = bitcast i64* %ln8Zb to i64*
  %ln8Zd = load i64, i64* %ln8Zc, !tbaa !2
  %ln8Ze = inttoptr i64 %ln8Zd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zf = load i64*, i64** %Sp_Var
  %ln8Zg = load i64*, i64** %Hp_Var
  %ln8Zh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ze( i64* %Base_Arg, i64* %ln8Zf, i64* %ln8Zg, i64 %ln8Zh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Xw:
  %ln8Zi = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Zi, !tbaa !5
  %ln8Zj = load i64, i64* %R2_Var
  store i64 %ln8Zj, i64* %R2_Var
  %ln8Zk = load i64, i64* %R1_Var
  store i64 %ln8Zk, i64* %R1_Var
  %ln8Zl = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Zm = load i64*, i64** %Sp_Var
  %ln8Zn = load i64*, i64** %Hp_Var
  %ln8Zo = load i64, i64* %R1_Var
  %ln8Zp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Zl( i64* %Base_Arg, i64* %ln8Zm, i64* %ln8Zn, i64 %ln8Zo, i64 %ln8Zp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_derivzuderiv1_closure_struct = type <{i64, i64, i64, i64}>
@Main_derivzuderiv1_closure$def = internal global %Main_derivzuderiv1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_derivzuderiv1_info$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64), i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64), i64 0}>
@Main_derivzuderiv1_closure = alias i8, bitcast (%Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i8*)
@s5eP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eP_info$def to i8*)
define internal ghccc void @s5eP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eP_info$def to i64)) to i32),i32 0)}>
{
n90o:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8ZL
c8ZL:
  %ln90p = load i64*, i64** %Sp_Var
  %ln90q = getelementptr inbounds i64, i64* %ln90p, i32 -3
  %ln90r = ptrtoint i64* %ln90q to i64
  %ln90s = icmp ult i64 %ln90r, %SpLim_Arg
  %ln90t = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln90s, i1 0 )
  br i1 %ln90t, label %c8ZR, label %c8ZS
c8ZS:
  %ln90v = ptrtoint i8* @stg_upd_frame_info to i64
  %ln90u = load i64*, i64** %Sp_Var
  %ln90w = getelementptr inbounds i64, i64* %ln90u, i32 -2
  store i64 %ln90v, i64* %ln90w, !tbaa !2
  %ln90y = load i64, i64* %R1_Var
  %ln90x = load i64*, i64** %Sp_Var
  %ln90z = getelementptr inbounds i64, i64* %ln90x, i32 -1
  store i64 %ln90y, i64* %ln90z, !tbaa !2
  %ln90B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZI_info$def to i64
  %ln90A = load i64*, i64** %Sp_Var
  %ln90C = getelementptr inbounds i64, i64* %ln90A, i32 -3
  store i64 %ln90B, i64* %ln90C, !tbaa !2
  %ln90F = load i64, i64* %R1_Var
  %ln90G = add i64 %ln90F, 16
  %ln90H = inttoptr i64 %ln90G to i64*
  %ln90I = load i64, i64* %ln90H, !tbaa !4
  store i64 %ln90I, i64* %R1_Var
  %ln90J = load i64*, i64** %Sp_Var
  %ln90K = getelementptr inbounds i64, i64* %ln90J, i32 -3
  %ln90L = ptrtoint i64* %ln90K to i64
  %ln90M = inttoptr i64 %ln90L to i64*
  store i64* %ln90M, i64** %Sp_Var
  %ln90N = load i64, i64* %R1_Var
  %ln90O = and i64 %ln90N, 7
  %ln90P = icmp ne i64 %ln90O, 0
  br i1 %ln90P, label %u8ZX, label %c8ZJ
c8ZJ:
  %ln90R = load i64, i64* %R1_Var
  %ln90S = inttoptr i64 %ln90R to i64*
  %ln90T = load i64, i64* %ln90S, !tbaa !4
  %ln90U = inttoptr i64 %ln90T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90V = load i64*, i64** %Sp_Var
  %ln90W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90U( i64* %Base_Arg, i64* %ln90V, i64* %Hp_Arg, i64 %ln90W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8ZX:
  %ln90X = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90Y = load i64*, i64** %Sp_Var
  %ln90Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90X( i64* %Base_Arg, i64* %ln90Y, i64* %Hp_Arg, i64 %ln90Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ZR:
  %ln910 = load i64, i64* %R1_Var
  store i64 %ln910, i64* %R1_Var
  %ln911 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln912 = bitcast i64* %ln911 to i64*
  %ln913 = load i64, i64* %ln912, !tbaa !5
  %ln914 = inttoptr i64 %ln913 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln915 = load i64*, i64** %Sp_Var
  %ln916 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln914( i64* %Base_Arg, i64* %ln915, i64* %Hp_Arg, i64 %ln916, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZI_info$def to i8*)
define internal ghccc void @c8ZI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZI_info$def to i64)) to i32),i32 0)}>
{
n917:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8ZI
c8ZI:
  %ln918 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZO_info$def to i64
  %ln919 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln918, i64* %ln919, !tbaa !2
  %ln91a = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln91b = add i64 %ln91a, 1
  store i64 %ln91b, i64* %R5_Var
  %ln91c = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln91d = add i64 %ln91c, 1
  store i64 %ln91d, i64* %R4_Var
  %ln91e = add i64 %R1_Arg, 15
  %ln91f = inttoptr i64 %ln91e to i64*
  %ln91g = load i64, i64* %ln91f, !tbaa !4
  store i64 %ln91g, i64* %R3_Var
  %ln91h = add i64 %R1_Arg, 7
  %ln91i = inttoptr i64 %ln91h to i64*
  %ln91j = load i64, i64* %ln91i, !tbaa !4
  store i64 %ln91j, i64* %R2_Var
  %ln91k = bitcast i8* @base_GHCziReal_zdwzdszdczp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91l = load i64, i64* %R2_Var
  %ln91m = load i64, i64* %R3_Var
  %ln91n = load i64, i64* %R4_Var
  %ln91o = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91k( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln91l, i64 %ln91m, i64 %ln91n, i64 %ln91o, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZO_info$def to i8*)
define internal ghccc void @c8ZO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n91p:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8ZO
c8ZO:
  %ln91q = load i64*, i64** %Hp_Var
  %ln91r = getelementptr inbounds i64, i64* %ln91q, i32 3
  %ln91s = ptrtoint i64* %ln91r to i64
  %ln91t = inttoptr i64 %ln91s to i64*
  store i64* %ln91t, i64** %Hp_Var
  %ln91u = load i64*, i64** %Hp_Var
  %ln91v = ptrtoint i64* %ln91u to i64
  %ln91w = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln91x = bitcast i64* %ln91w to i64*
  %ln91y = load i64, i64* %ln91x, !tbaa !5
  %ln91z = icmp ugt i64 %ln91v, %ln91y
  %ln91A = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln91z, i1 0 )
  br i1 %ln91A, label %c8ZW, label %c8ZV
c8ZV:
  %ln91C = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln91B = load i64*, i64** %Hp_Var
  %ln91D = getelementptr inbounds i64, i64* %ln91B, i32 -2
  store i64 %ln91C, i64* %ln91D, !tbaa !3
  %ln91F = load i64, i64* %R1_Var
  %ln91E = load i64*, i64** %Hp_Var
  %ln91G = getelementptr inbounds i64, i64* %ln91E, i32 -1
  store i64 %ln91F, i64* %ln91G, !tbaa !3
  %ln91I = load i64, i64* %R2_Var
  %ln91H = load i64*, i64** %Hp_Var
  %ln91J = getelementptr inbounds i64, i64* %ln91H, i32 0
  store i64 %ln91I, i64* %ln91J, !tbaa !3
  %ln91L = load i64*, i64** %Hp_Var
  %ln91M = ptrtoint i64* %ln91L to i64
  %ln91N = add i64 %ln91M, -15
  store i64 %ln91N, i64* %R1_Var
  %ln91O = load i64*, i64** %Sp_Var
  %ln91P = getelementptr inbounds i64, i64* %ln91O, i32 1
  %ln91Q = ptrtoint i64* %ln91P to i64
  %ln91R = inttoptr i64 %ln91Q to i64*
  store i64* %ln91R, i64** %Sp_Var
  %ln91S = load i64*, i64** %Sp_Var
  %ln91T = getelementptr inbounds i64, i64* %ln91S, i32 0
  %ln91U = bitcast i64* %ln91T to i64*
  %ln91V = load i64, i64* %ln91U, !tbaa !2
  %ln91W = inttoptr i64 %ln91V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91X = load i64*, i64** %Sp_Var
  %ln91Y = load i64*, i64** %Hp_Var
  %ln91Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91W( i64* %Base_Arg, i64* %ln91X, i64* %ln91Y, i64 %ln91Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ZW:
  %ln920 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln920, !tbaa !5
  %ln921 = load i64, i64* %R2_Var
  store i64 %ln921, i64* %R2_Var
  %ln922 = load i64, i64* %R1_Var
  store i64 %ln922, i64* %R1_Var
  %ln923 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln924 = load i64*, i64** %Sp_Var
  %ln925 = load i64*, i64** %Hp_Var
  %ln926 = load i64, i64* %R1_Var
  %ln927 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln923( i64* %Base_Arg, i64* %ln924, i64* %ln925, i64 %ln926, i64 %ln927, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eQ_info$def to i8*)
define internal ghccc void @s5eQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eQ_info$def to i64)) to i32),i32 0)}>
{
n928:
  %ls5eQ = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5eE = alloca i64, i32 1
  %ls5eH = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ZY
c8ZY:
  %ln929 = load i64, i64* %R1_Var
  store i64 %ln929, i64* %ls5eQ
  %ln92a = load i64*, i64** %Sp_Var
  %ln92b = getelementptr inbounds i64, i64* %ln92a, i32 -2
  %ln92c = ptrtoint i64* %ln92b to i64
  %ln92d = icmp ult i64 %ln92c, %SpLim_Arg
  %ln92e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln92d, i1 0 )
  br i1 %ln92e, label %c8ZZ, label %c900
c900:
  %ln92f = load i64*, i64** %Hp_Var
  %ln92g = getelementptr inbounds i64, i64* %ln92f, i32 3
  %ln92h = ptrtoint i64* %ln92g to i64
  %ln92i = inttoptr i64 %ln92h to i64*
  store i64* %ln92i, i64** %Hp_Var
  %ln92j = load i64*, i64** %Hp_Var
  %ln92k = ptrtoint i64* %ln92j to i64
  %ln92l = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln92m = bitcast i64* %ln92l to i64*
  %ln92n = load i64, i64* %ln92m, !tbaa !5
  %ln92o = icmp ugt i64 %ln92k, %ln92n
  %ln92p = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln92o, i1 0 )
  br i1 %ln92p, label %c902, label %c901
c901:
  %ln92r = ptrtoint i8* @stg_upd_frame_info to i64
  %ln92q = load i64*, i64** %Sp_Var
  %ln92s = getelementptr inbounds i64, i64* %ln92q, i32 -2
  store i64 %ln92r, i64* %ln92s, !tbaa !2
  %ln92u = load i64, i64* %ls5eQ
  %ln92t = load i64*, i64** %Sp_Var
  %ln92v = getelementptr inbounds i64, i64* %ln92t, i32 -1
  store i64 %ln92u, i64* %ln92v, !tbaa !2
  %ln92w = load i64, i64* %ls5eQ
  %ln92x = add i64 %ln92w, 16
  %ln92y = inttoptr i64 %ln92x to i64*
  %ln92z = load i64, i64* %ln92y, !tbaa !1
  store i64 %ln92z, i64* %ls5eE
  %ln92A = load i64, i64* %ls5eQ
  %ln92B = add i64 %ln92A, 24
  %ln92C = inttoptr i64 %ln92B to i64*
  %ln92D = load i64, i64* %ln92C, !tbaa !1
  store i64 %ln92D, i64* %ls5eH
  %ln92F = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eP_info$def to i64
  %ln92E = load i64*, i64** %Hp_Var
  %ln92G = getelementptr inbounds i64, i64* %ln92E, i32 -2
  store i64 %ln92F, i64* %ln92G, !tbaa !3
  %ln92I = load i64, i64* %ls5eE
  %ln92H = load i64*, i64** %Hp_Var
  %ln92J = getelementptr inbounds i64, i64* %ln92H, i32 0
  store i64 %ln92I, i64* %ln92J, !tbaa !3
  %ln92K = load i64*, i64** %Hp_Var
  %ln92L = getelementptr inbounds i64, i64* %ln92K, i32 -2
  %ln92M = ptrtoint i64* %ln92L to i64
  store i64 %ln92M, i64* %R3_Var
  %ln92N = load i64, i64* %ls5eH
  store i64 %ln92N, i64* %R2_Var
  %ln92O = load i64*, i64** %Sp_Var
  %ln92P = getelementptr inbounds i64, i64* %ln92O, i32 -2
  %ln92Q = ptrtoint i64* %ln92P to i64
  %ln92R = inttoptr i64 %ln92Q to i64*
  store i64* %ln92R, i64** %Sp_Var
  %ln92S = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_derivzuderiv1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92T = load i64*, i64** %Sp_Var
  %ln92U = load i64*, i64** %Hp_Var
  %ln92V = load i64, i64* %R1_Var
  %ln92W = load i64, i64* %R2_Var
  %ln92X = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92S( i64* %Base_Arg, i64* %ln92T, i64* %ln92U, i64 %ln92V, i64 %ln92W, i64 %ln92X, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c902:
  %ln92Y = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln92Y, !tbaa !5
  br label %c8ZZ
c8ZZ:
  %ln92Z = load i64, i64* %ls5eQ
  store i64 %ln92Z, i64* %R1_Var
  %ln930 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln931 = bitcast i64* %ln930 to i64*
  %ln932 = load i64, i64* %ln931, !tbaa !5
  %ln933 = inttoptr i64 %ln932 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln934 = load i64*, i64** %Sp_Var
  %ln935 = load i64*, i64** %Hp_Var
  %ln936 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln933( i64* %Base_Arg, i64* %ln934, i64* %ln935, i64 %ln936, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eI_info$def to i8*)
define internal ghccc void @s5eI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eI_info$def to i64)) to i32),i32 0)}>
{
n937:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c907
c907:
  %ln938 = load i64*, i64** %Sp_Var
  %ln939 = getelementptr inbounds i64, i64* %ln938, i32 -2
  %ln93a = ptrtoint i64* %ln939 to i64
  %ln93b = icmp ult i64 %ln93a, %SpLim_Arg
  %ln93c = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln93b, i1 0 )
  br i1 %ln93c, label %c908, label %c909
c909:
  %ln93e = ptrtoint i8* @stg_upd_frame_info to i64
  %ln93d = load i64*, i64** %Sp_Var
  %ln93f = getelementptr inbounds i64, i64* %ln93d, i32 -2
  store i64 %ln93e, i64* %ln93f, !tbaa !2
  %ln93h = load i64, i64* %R1_Var
  %ln93g = load i64*, i64** %Sp_Var
  %ln93i = getelementptr inbounds i64, i64* %ln93g, i32 -1
  store i64 %ln93h, i64* %ln93i, !tbaa !2
  %ln93l = load i64, i64* %R1_Var
  %ln93m = add i64 %ln93l, 24
  %ln93n = inttoptr i64 %ln93m to i64*
  %ln93o = load i64, i64* %ln93n, !tbaa !4
  store i64 %ln93o, i64* %R3_Var
  %ln93r = load i64, i64* %R1_Var
  %ln93s = add i64 %ln93r, 16
  %ln93t = inttoptr i64 %ln93s to i64*
  %ln93u = load i64, i64* %ln93t, !tbaa !4
  store i64 %ln93u, i64* %R2_Var
  %ln93v = load i64*, i64** %Sp_Var
  %ln93w = getelementptr inbounds i64, i64* %ln93v, i32 -2
  %ln93x = ptrtoint i64* %ln93w to i64
  %ln93y = inttoptr i64 %ln93x to i64*
  store i64* %ln93y, i64** %Sp_Var
  %ln93z = bitcast i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93A = load i64*, i64** %Sp_Var
  %ln93B = load i64, i64* %R1_Var
  %ln93C = load i64, i64* %R2_Var
  %ln93D = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93z( i64* %Base_Arg, i64* %ln93A, i64* %Hp_Arg, i64 %ln93B, i64 %ln93C, i64 %ln93D, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c908:
  %ln93E = load i64, i64* %R1_Var
  store i64 %ln93E, i64* %R1_Var
  %ln93F = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln93G = bitcast i64* %ln93F to i64*
  %ln93H = load i64, i64* %ln93G, !tbaa !5
  %ln93I = inttoptr i64 %ln93H to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93J = load i64*, i64** %Sp_Var
  %ln93K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93I( i64* %Base_Arg, i64* %ln93J, i64* %Hp_Arg, i64 %ln93K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_derivzuderiv1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_derivzuderiv1_info$def to i8*)
define ghccc void @Main_derivzuderiv1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 14, i32 0}>
{
n93L:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c90e
c90e:
  %ln93M = load i64*, i64** %Sp_Var
  %ln93N = getelementptr inbounds i64, i64* %ln93M, i32 -2
  %ln93O = ptrtoint i64* %ln93N to i64
  %ln93P = icmp ult i64 %ln93O, %SpLim_Arg
  %ln93Q = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln93P, i1 0 )
  br i1 %ln93Q, label %c90f, label %c90g
c90g:
  %ln93S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Zu_info$def to i64
  %ln93R = load i64*, i64** %Sp_Var
  %ln93T = getelementptr inbounds i64, i64* %ln93R, i32 -2
  store i64 %ln93S, i64* %ln93T, !tbaa !2
  %ln93U = load i64, i64* %R2_Var
  store i64 %ln93U, i64* %R1_Var
  %ln93W = load i64, i64* %R3_Var
  %ln93V = load i64*, i64** %Sp_Var
  %ln93X = getelementptr inbounds i64, i64* %ln93V, i32 -1
  store i64 %ln93W, i64* %ln93X, !tbaa !2
  %ln93Y = load i64*, i64** %Sp_Var
  %ln93Z = getelementptr inbounds i64, i64* %ln93Y, i32 -2
  %ln940 = ptrtoint i64* %ln93Z to i64
  %ln941 = inttoptr i64 %ln940 to i64*
  store i64* %ln941, i64** %Sp_Var
  %ln942 = load i64, i64* %R1_Var
  %ln943 = and i64 %ln942, 7
  %ln944 = icmp ne i64 %ln943, 0
  br i1 %ln944, label %u90n, label %c8Zv
c8Zv:
  %ln946 = load i64, i64* %R1_Var
  %ln947 = inttoptr i64 %ln946 to i64*
  %ln948 = load i64, i64* %ln947, !tbaa !4
  %ln949 = inttoptr i64 %ln948 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94a = load i64*, i64** %Sp_Var
  %ln94b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln949( i64* %Base_Arg, i64* %ln94a, i64* %Hp_Arg, i64 %ln94b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u90n:
  %ln94c = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Zu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94d = load i64*, i64** %Sp_Var
  %ln94e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94c( i64* %Base_Arg, i64* %ln94d, i64* %Hp_Arg, i64 %ln94e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90f:
  %ln94f = load i64, i64* %R3_Var
  store i64 %ln94f, i64* %R3_Var
  %ln94g = load i64, i64* %R2_Var
  store i64 %ln94g, i64* %R2_Var
  %ln94h = ptrtoint %Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i64
  store i64 %ln94h, i64* %R1_Var
  %ln94i = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln94j = bitcast i64* %ln94i to i64*
  %ln94k = load i64, i64* %ln94j, !tbaa !5
  %ln94l = inttoptr i64 %ln94k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94m = load i64*, i64** %Sp_Var
  %ln94n = load i64, i64* %R1_Var
  %ln94o = load i64, i64* %R2_Var
  %ln94p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94l( i64* %Base_Arg, i64* %ln94m, i64* %Hp_Arg, i64 %ln94n, i64 %ln94o, i64 %ln94p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Zu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Zu_info$def to i8*)
define internal ghccc void @c8Zu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Zu_info$def to i64)) to i32),i32 0)}>
{
n94q:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5eG = alloca i64, i32 1
  %ls5eH = alloca i64, i32 1
  %ls5eE = alloca i64, i32 1
  br label %c8Zu
c8Zu:
  %ln94r = load i64, i64* %R1_Var
  %ln94s = and i64 %ln94r, 7
  switch i64 %ln94s, label %c90b [i64 1, label %c90b
i64 2, label %c90c]
c90b:
  %ln94t = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln94u = add i64 %ln94t, 1
  store i64 %ln94u, i64* %R1_Var
  %ln94v = load i64*, i64** %Sp_Var
  %ln94w = getelementptr inbounds i64, i64* %ln94v, i32 2
  %ln94x = ptrtoint i64* %ln94w to i64
  %ln94y = inttoptr i64 %ln94x to i64*
  store i64* %ln94y, i64** %Sp_Var
  %ln94z = load i64*, i64** %Sp_Var
  %ln94A = getelementptr inbounds i64, i64* %ln94z, i32 0
  %ln94B = bitcast i64* %ln94A to i64*
  %ln94C = load i64, i64* %ln94B, !tbaa !2
  %ln94D = inttoptr i64 %ln94C to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94E = load i64*, i64** %Sp_Var
  %ln94F = load i64*, i64** %Hp_Var
  %ln94G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94D( i64* %Base_Arg, i64* %ln94E, i64* %ln94F, i64 %ln94G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90c:
  %ln94H = load i64*, i64** %Hp_Var
  %ln94I = getelementptr inbounds i64, i64* %ln94H, i32 11
  %ln94J = ptrtoint i64* %ln94I to i64
  %ln94K = inttoptr i64 %ln94J to i64*
  store i64* %ln94K, i64** %Hp_Var
  %ln94L = load i64*, i64** %Hp_Var
  %ln94M = ptrtoint i64* %ln94L to i64
  %ln94N = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln94O = bitcast i64* %ln94N to i64*
  %ln94P = load i64, i64* %ln94O, !tbaa !5
  %ln94Q = icmp ugt i64 %ln94M, %ln94P
  %ln94R = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln94Q, i1 0 )
  br i1 %ln94R, label %c90m, label %c90l
c90l:
  %ln94U = load i64, i64* %R1_Var
  %ln94V = add i64 %ln94U, 6
  %ln94W = inttoptr i64 %ln94V to i64*
  %ln94X = load i64, i64* %ln94W, !tbaa !4
  store i64 %ln94X, i64* %ls5eG
  %ln950 = load i64, i64* %R1_Var
  %ln951 = add i64 %ln950, 14
  %ln952 = inttoptr i64 %ln951 to i64*
  %ln953 = load i64, i64* %ln952, !tbaa !4
  store i64 %ln953, i64* %ls5eH
  %ln955 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eQ_info$def to i64
  %ln954 = load i64*, i64** %Hp_Var
  %ln956 = getelementptr inbounds i64, i64* %ln954, i32 -10
  store i64 %ln955, i64* %ln956, !tbaa !3
  %ln957 = load i64*, i64** %Sp_Var
  %ln958 = getelementptr inbounds i64, i64* %ln957, i32 1
  %ln959 = bitcast i64* %ln958 to i64*
  %ln95a = load i64, i64* %ln959, !tbaa !2
  store i64 %ln95a, i64* %ls5eE
  %ln95c = load i64, i64* %ls5eE
  %ln95b = load i64*, i64** %Hp_Var
  %ln95d = getelementptr inbounds i64, i64* %ln95b, i32 -8
  store i64 %ln95c, i64* %ln95d, !tbaa !3
  %ln95f = load i64, i64* %ls5eH
  %ln95e = load i64*, i64** %Hp_Var
  %ln95g = getelementptr inbounds i64, i64* %ln95e, i32 -7
  store i64 %ln95f, i64* %ln95g, !tbaa !3
  %ln95i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eI_info$def to i64
  %ln95h = load i64*, i64** %Hp_Var
  %ln95j = getelementptr inbounds i64, i64* %ln95h, i32 -6
  store i64 %ln95i, i64* %ln95j, !tbaa !3
  %ln95l = load i64, i64* %ls5eE
  %ln95k = load i64*, i64** %Hp_Var
  %ln95m = getelementptr inbounds i64, i64* %ln95k, i32 -4
  store i64 %ln95l, i64* %ln95m, !tbaa !3
  %ln95o = load i64, i64* %ls5eG
  %ln95n = load i64*, i64** %Hp_Var
  %ln95p = getelementptr inbounds i64, i64* %ln95n, i32 -3
  store i64 %ln95o, i64* %ln95p, !tbaa !3
  %ln95r = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln95q = load i64*, i64** %Hp_Var
  %ln95s = getelementptr inbounds i64, i64* %ln95q, i32 -2
  store i64 %ln95r, i64* %ln95s, !tbaa !3
  %ln95u = load i64*, i64** %Hp_Var
  %ln95v = getelementptr inbounds i64, i64* %ln95u, i32 -6
  %ln95w = ptrtoint i64* %ln95v to i64
  %ln95t = load i64*, i64** %Hp_Var
  %ln95x = getelementptr inbounds i64, i64* %ln95t, i32 -1
  store i64 %ln95w, i64* %ln95x, !tbaa !3
  %ln95z = load i64*, i64** %Hp_Var
  %ln95A = getelementptr inbounds i64, i64* %ln95z, i32 -10
  %ln95B = ptrtoint i64* %ln95A to i64
  %ln95y = load i64*, i64** %Hp_Var
  %ln95C = getelementptr inbounds i64, i64* %ln95y, i32 0
  store i64 %ln95B, i64* %ln95C, !tbaa !3
  %ln95E = load i64*, i64** %Hp_Var
  %ln95F = ptrtoint i64* %ln95E to i64
  %ln95G = add i64 %ln95F, -14
  store i64 %ln95G, i64* %R1_Var
  %ln95H = load i64*, i64** %Sp_Var
  %ln95I = getelementptr inbounds i64, i64* %ln95H, i32 2
  %ln95J = ptrtoint i64* %ln95I to i64
  %ln95K = inttoptr i64 %ln95J to i64*
  store i64* %ln95K, i64** %Sp_Var
  %ln95L = load i64*, i64** %Sp_Var
  %ln95M = getelementptr inbounds i64, i64* %ln95L, i32 0
  %ln95N = bitcast i64* %ln95M to i64*
  %ln95O = load i64, i64* %ln95N, !tbaa !2
  %ln95P = inttoptr i64 %ln95O to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95Q = load i64*, i64** %Sp_Var
  %ln95R = load i64*, i64** %Hp_Var
  %ln95S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95P( i64* %Base_Arg, i64* %ln95Q, i64* %ln95R, i64 %ln95S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90m:
  %ln95T = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln95T, !tbaa !5
  %ln95U = load i64, i64* %R1_Var
  store i64 %ln95U, i64* %R1_Var
  %ln95V = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95W = load i64*, i64** %Sp_Var
  %ln95X = load i64*, i64** %Hp_Var
  %ln95Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95V( i64* %Base_Arg, i64* %ln95W, i64* %ln95X, i64 %ln95Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_deriv_closure_struct = type <{i64}>
@Main_deriv_closure$def = internal global %Main_deriv_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_deriv_info$def to i64)}>
@Main_deriv_closure = alias i8, bitcast (%Main_deriv_closure_struct* @Main_deriv_closure$def to i8*)
@s5eW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eW_info$def to i8*)
define internal ghccc void @s5eW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n97f:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c96d
c96d:
  %ln97g = load i64*, i64** %Sp_Var
  %ln97h = getelementptr inbounds i64, i64* %ln97g, i32 -4
  %ln97i = ptrtoint i64* %ln97h to i64
  %ln97j = icmp ult i64 %ln97i, %SpLim_Arg
  %ln97k = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97j, i1 0 )
  br i1 %ln97k, label %c96e, label %c96f
c96f:
  %ln97m = ptrtoint i8* @stg_upd_frame_info to i64
  %ln97l = load i64*, i64** %Sp_Var
  %ln97n = getelementptr inbounds i64, i64* %ln97l, i32 -2
  store i64 %ln97m, i64* %ln97n, !tbaa !2
  %ln97p = load i64, i64* %R1_Var
  %ln97o = load i64*, i64** %Sp_Var
  %ln97q = getelementptr inbounds i64, i64* %ln97o, i32 -1
  store i64 %ln97p, i64* %ln97q, !tbaa !2
  %ln97t = load i64, i64* %R1_Var
  %ln97u = add i64 %ln97t, 16
  %ln97v = inttoptr i64 %ln97u to i64*
  %ln97w = load i64, i64* %ln97v, !tbaa !4
  store i64 %ln97w, i64* %R2_Var
  %ln97y = ptrtoint i8* @stg_ap_p_info to i64
  %ln97x = load i64*, i64** %Sp_Var
  %ln97z = getelementptr inbounds i64, i64* %ln97x, i32 -4
  store i64 %ln97y, i64* %ln97z, !tbaa !2
  %ln97B = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln97C = add i64 %ln97B, 1
  %ln97A = load i64*, i64** %Sp_Var
  %ln97D = getelementptr inbounds i64, i64* %ln97A, i32 -3
  store i64 %ln97C, i64* %ln97D, !tbaa !2
  %ln97E = load i64*, i64** %Sp_Var
  %ln97F = getelementptr inbounds i64, i64* %ln97E, i32 -4
  %ln97G = ptrtoint i64* %ln97F to i64
  %ln97H = inttoptr i64 %ln97G to i64*
  store i64* %ln97H, i64** %Sp_Var
  %ln97I = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97J = load i64*, i64** %Sp_Var
  %ln97K = load i64, i64* %R1_Var
  %ln97L = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97I( i64* %Base_Arg, i64* %ln97J, i64* %Hp_Arg, i64 %ln97K, i64 %ln97L, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96e:
  %ln97M = load i64, i64* %R1_Var
  store i64 %ln97M, i64* %R1_Var
  %ln97N = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln97O = bitcast i64* %ln97N to i64*
  %ln97P = load i64, i64* %ln97O, !tbaa !5
  %ln97Q = inttoptr i64 %ln97P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97R = load i64*, i64** %Sp_Var
  %ln97S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97Q( i64* %Base_Arg, i64* %ln97R, i64* %Hp_Arg, i64 %ln97S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5f4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f4_info$def to i8*)
define internal ghccc void @s5f4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n97T:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c96z
c96z:
  %ln97U = load i64*, i64** %Sp_Var
  %ln97V = getelementptr inbounds i64, i64* %ln97U, i32 -5
  %ln97W = ptrtoint i64* %ln97V to i64
  %ln97X = icmp ult i64 %ln97W, %SpLim_Arg
  %ln97Y = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97X, i1 0 )
  br i1 %ln97Y, label %c96A, label %c96B
c96B:
  %ln980 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln97Z = load i64*, i64** %Sp_Var
  %ln981 = getelementptr inbounds i64, i64* %ln97Z, i32 -2
  store i64 %ln980, i64* %ln981, !tbaa !2
  %ln983 = load i64, i64* %R1_Var
  %ln982 = load i64*, i64** %Sp_Var
  %ln984 = getelementptr inbounds i64, i64* %ln982, i32 -1
  store i64 %ln983, i64* %ln984, !tbaa !2
  %ln987 = load i64, i64* %R1_Var
  %ln988 = add i64 %ln987, 16
  %ln989 = inttoptr i64 %ln988 to i64*
  %ln98a = load i64, i64* %ln989, !tbaa !4
  store i64 %ln98a, i64* %R2_Var
  %ln98c = ptrtoint i8* @stg_ap_pp_info to i64
  %ln98b = load i64*, i64** %Sp_Var
  %ln98d = getelementptr inbounds i64, i64* %ln98b, i32 -5
  store i64 %ln98c, i64* %ln98d, !tbaa !2
  %ln98h = load i64, i64* %R1_Var
  %ln98i = add i64 %ln98h, 24
  %ln98j = inttoptr i64 %ln98i to i64*
  %ln98k = load i64, i64* %ln98j, !tbaa !4
  %ln98e = load i64*, i64** %Sp_Var
  %ln98l = getelementptr inbounds i64, i64* %ln98e, i32 -4
  store i64 %ln98k, i64* %ln98l, !tbaa !2
  %ln98p = load i64, i64* %R1_Var
  %ln98q = add i64 %ln98p, 32
  %ln98r = inttoptr i64 %ln98q to i64*
  %ln98s = load i64, i64* %ln98r, !tbaa !4
  %ln98m = load i64*, i64** %Sp_Var
  %ln98t = getelementptr inbounds i64, i64* %ln98m, i32 -3
  store i64 %ln98s, i64* %ln98t, !tbaa !2
  %ln98u = load i64*, i64** %Sp_Var
  %ln98v = getelementptr inbounds i64, i64* %ln98u, i32 -5
  %ln98w = ptrtoint i64* %ln98v to i64
  %ln98x = inttoptr i64 %ln98w to i64*
  store i64* %ln98x, i64** %Sp_Var
  %ln98y = bitcast i8* @base_GHCziNum_zp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98z = load i64*, i64** %Sp_Var
  %ln98A = load i64, i64* %R1_Var
  %ln98B = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98y( i64* %Base_Arg, i64* %ln98z, i64* %Hp_Arg, i64 %ln98A, i64 %ln98B, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96A:
  %ln98C = load i64, i64* %R1_Var
  store i64 %ln98C, i64* %R1_Var
  %ln98D = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln98E = bitcast i64* %ln98D to i64*
  %ln98F = load i64, i64* %ln98E, !tbaa !5
  %ln98G = inttoptr i64 %ln98F to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98H = load i64*, i64** %Sp_Var
  %ln98I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98G( i64* %Base_Arg, i64* %ln98H, i64* %Hp_Arg, i64 %ln98I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5f5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f5_info$def to i8*)
define internal ghccc void @s5f5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
n98J:
  %ls5f5 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5eR = alloca i64, i32 1
  %ls5eZ = alloca i64, i32 1
  %ls5eW = alloca i64, i32 1
  %ls5f2 = alloca i64, i32 1
  %ls5eX = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c96C
c96C:
  %ln98K = load i64, i64* %R1_Var
  store i64 %ln98K, i64* %ls5f5
  %ln98L = load i64*, i64** %Sp_Var
  %ln98M = getelementptr inbounds i64, i64* %ln98L, i32 -2
  %ln98N = ptrtoint i64* %ln98M to i64
  %ln98O = icmp ult i64 %ln98N, %SpLim_Arg
  %ln98P = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln98O, i1 0 )
  br i1 %ln98P, label %c96D, label %c96E
c96E:
  %ln98Q = load i64*, i64** %Hp_Var
  %ln98R = getelementptr inbounds i64, i64* %ln98Q, i32 5
  %ln98S = ptrtoint i64* %ln98R to i64
  %ln98T = inttoptr i64 %ln98S to i64*
  store i64* %ln98T, i64** %Hp_Var
  %ln98U = load i64*, i64** %Hp_Var
  %ln98V = ptrtoint i64* %ln98U to i64
  %ln98W = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln98X = bitcast i64* %ln98W to i64*
  %ln98Y = load i64, i64* %ln98X, !tbaa !5
  %ln98Z = icmp ugt i64 %ln98V, %ln98Y
  %ln990 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln98Z, i1 0 )
  br i1 %ln990, label %c96G, label %c96F
c96F:
  %ln992 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln991 = load i64*, i64** %Sp_Var
  %ln993 = getelementptr inbounds i64, i64* %ln991, i32 -2
  store i64 %ln992, i64* %ln993, !tbaa !2
  %ln995 = load i64, i64* %ls5f5
  %ln994 = load i64*, i64** %Sp_Var
  %ln996 = getelementptr inbounds i64, i64* %ln994, i32 -1
  store i64 %ln995, i64* %ln996, !tbaa !2
  %ln997 = load i64, i64* %ls5f5
  %ln998 = add i64 %ln997, 16
  %ln999 = inttoptr i64 %ln998 to i64*
  %ln99a = load i64, i64* %ln999, !tbaa !1
  store i64 %ln99a, i64* %ls5eR
  %ln99b = load i64, i64* %ls5f5
  %ln99c = add i64 %ln99b, 24
  %ln99d = inttoptr i64 %ln99c to i64*
  %ln99e = load i64, i64* %ln99d, !tbaa !1
  store i64 %ln99e, i64* %ls5eZ
  %ln99f = load i64, i64* %ls5f5
  %ln99g = add i64 %ln99f, 32
  %ln99h = inttoptr i64 %ln99g to i64*
  %ln99i = load i64, i64* %ln99h, !tbaa !1
  store i64 %ln99i, i64* %ls5eW
  %ln99j = load i64, i64* %ls5f5
  %ln99k = add i64 %ln99j, 40
  %ln99l = inttoptr i64 %ln99k to i64*
  %ln99m = load i64, i64* %ln99l, !tbaa !1
  store i64 %ln99m, i64* %ls5f2
  %ln99n = load i64, i64* %ls5f5
  %ln99o = add i64 %ln99n, 48
  %ln99p = inttoptr i64 %ln99o to i64*
  %ln99q = load i64, i64* %ln99p, !tbaa !1
  store i64 %ln99q, i64* %ls5eX
  %ln99s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f4_info$def to i64
  %ln99r = load i64*, i64** %Hp_Var
  %ln99t = getelementptr inbounds i64, i64* %ln99r, i32 -4
  store i64 %ln99s, i64* %ln99t, !tbaa !3
  %ln99v = load i64, i64* %ls5eR
  %ln99u = load i64*, i64** %Hp_Var
  %ln99w = getelementptr inbounds i64, i64* %ln99u, i32 -2
  store i64 %ln99v, i64* %ln99w, !tbaa !3
  %ln99y = load i64, i64* %ls5eZ
  %ln99x = load i64*, i64** %Hp_Var
  %ln99z = getelementptr inbounds i64, i64* %ln99x, i32 -1
  store i64 %ln99y, i64* %ln99z, !tbaa !3
  %ln99B = load i64, i64* %ls5eW
  %ln99A = load i64*, i64** %Hp_Var
  %ln99C = getelementptr inbounds i64, i64* %ln99A, i32 0
  store i64 %ln99B, i64* %ln99C, !tbaa !3
  %ln99D = load i64*, i64** %Hp_Var
  %ln99E = getelementptr inbounds i64, i64* %ln99D, i32 -4
  %ln99F = ptrtoint i64* %ln99E to i64
  store i64 %ln99F, i64* %R3_Var
  %ln99G = load i64, i64* %ls5f2
  store i64 %ln99G, i64* %R2_Var
  %ln99H = load i64, i64* %ls5eX
  store i64 %ln99H, i64* %R1_Var
  %ln99I = load i64*, i64** %Sp_Var
  %ln99J = getelementptr inbounds i64, i64* %ln99I, i32 -2
  %ln99K = ptrtoint i64* %ln99J to i64
  %ln99L = inttoptr i64 %ln99K to i64*
  store i64* %ln99L, i64** %Sp_Var
  %ln99M = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99N = load i64*, i64** %Sp_Var
  %ln99O = load i64*, i64** %Hp_Var
  %ln99P = load i64, i64* %R1_Var
  %ln99Q = load i64, i64* %R2_Var
  %ln99R = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99M( i64* %Base_Arg, i64* %ln99N, i64* %ln99O, i64 %ln99P, i64 %ln99Q, i64 %ln99R, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96G:
  %ln99S = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln99S, !tbaa !5
  br label %c96D
c96D:
  %ln99T = load i64, i64* %ls5f5
  store i64 %ln99T, i64* %R1_Var
  %ln99U = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln99V = bitcast i64* %ln99U to i64*
  %ln99W = load i64, i64* %ln99V, !tbaa !5
  %ln99X = inttoptr i64 %ln99W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99Y = load i64*, i64** %Sp_Var
  %ln99Z = load i64*, i64** %Hp_Var
  %ln9a0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99X( i64* %Base_Arg, i64* %ln99Y, i64* %ln99Z, i64 %ln9a0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5f3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f3_info$def to i8*)
define internal ghccc void @s5f3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9a1:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c96L
c96L:
  %ln9a2 = load i64*, i64** %Sp_Var
  %ln9a3 = getelementptr inbounds i64, i64* %ln9a2, i32 -5
  %ln9a4 = ptrtoint i64* %ln9a3 to i64
  %ln9a5 = icmp ult i64 %ln9a4, %SpLim_Arg
  %ln9a6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9a5, i1 0 )
  br i1 %ln9a6, label %c96M, label %c96N
c96N:
  %ln9a8 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9a7 = load i64*, i64** %Sp_Var
  %ln9a9 = getelementptr inbounds i64, i64* %ln9a7, i32 -2
  store i64 %ln9a8, i64* %ln9a9, !tbaa !2
  %ln9ab = load i64, i64* %R1_Var
  %ln9aa = load i64*, i64** %Sp_Var
  %ln9ac = getelementptr inbounds i64, i64* %ln9aa, i32 -1
  store i64 %ln9ab, i64* %ln9ac, !tbaa !2
  %ln9af = load i64, i64* %R1_Var
  %ln9ag = add i64 %ln9af, 16
  %ln9ah = inttoptr i64 %ln9ag to i64*
  %ln9ai = load i64, i64* %ln9ah, !tbaa !4
  store i64 %ln9ai, i64* %R2_Var
  %ln9ak = ptrtoint i8* @stg_ap_pp_info to i64
  %ln9aj = load i64*, i64** %Sp_Var
  %ln9al = getelementptr inbounds i64, i64* %ln9aj, i32 -5
  store i64 %ln9ak, i64* %ln9al, !tbaa !2
  %ln9ap = load i64, i64* %R1_Var
  %ln9aq = add i64 %ln9ap, 24
  %ln9ar = inttoptr i64 %ln9aq to i64*
  %ln9as = load i64, i64* %ln9ar, !tbaa !4
  %ln9am = load i64*, i64** %Sp_Var
  %ln9at = getelementptr inbounds i64, i64* %ln9am, i32 -4
  store i64 %ln9as, i64* %ln9at, !tbaa !2
  %ln9ax = load i64, i64* %R1_Var
  %ln9ay = add i64 %ln9ax, 32
  %ln9az = inttoptr i64 %ln9ay to i64*
  %ln9aA = load i64, i64* %ln9az, !tbaa !4
  %ln9au = load i64*, i64** %Sp_Var
  %ln9aB = getelementptr inbounds i64, i64* %ln9au, i32 -3
  store i64 %ln9aA, i64* %ln9aB, !tbaa !2
  %ln9aC = load i64*, i64** %Sp_Var
  %ln9aD = getelementptr inbounds i64, i64* %ln9aC, i32 -5
  %ln9aE = ptrtoint i64* %ln9aD to i64
  %ln9aF = inttoptr i64 %ln9aE to i64*
  store i64* %ln9aF, i64** %Sp_Var
  %ln9aG = bitcast i8* @base_GHCziNum_zt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9aH = load i64*, i64** %Sp_Var
  %ln9aI = load i64, i64* %R1_Var
  %ln9aJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9aG( i64* %Base_Arg, i64* %ln9aH, i64* %Hp_Arg, i64 %ln9aI, i64 %ln9aJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96M:
  %ln9aK = load i64, i64* %R1_Var
  store i64 %ln9aK, i64* %R1_Var
  %ln9aL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9aM = bitcast i64* %ln9aL to i64*
  %ln9aN = load i64, i64* %ln9aM, !tbaa !5
  %ln9aO = inttoptr i64 %ln9aN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9aP = load i64*, i64** %Sp_Var
  %ln9aQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9aO( i64* %Base_Arg, i64* %ln9aP, i64* %Hp_Arg, i64 %ln9aQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5eX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eX_info$def to i8*)
define internal ghccc void @s5eX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 0}>
{
n9aR:
  %ls5eX = alloca i64, i32 1
  %ls5eR = alloca i64, i32 1
  %ls5eW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c96S
c96S:
  %ln9aS = load i64*, i64** %Sp_Var
  %ln9aT = getelementptr inbounds i64, i64* %ln9aS, i32 -5
  %ln9aU = ptrtoint i64* %ln9aT to i64
  %ln9aV = icmp ult i64 %ln9aU, %SpLim_Arg
  %ln9aW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9aV, i1 0 )
  br i1 %ln9aW, label %c96T, label %c96U
c96U:
  %ln9aY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96l_info$def to i64
  %ln9aX = load i64*, i64** %Sp_Var
  %ln9aZ = getelementptr inbounds i64, i64* %ln9aX, i32 -5
  store i64 %ln9aY, i64* %ln9aZ, !tbaa !2
  %ln9b0 = load i64, i64* %R1_Var
  store i64 %ln9b0, i64* %ls5eX
  %ln9b3 = load i64, i64* %R1_Var
  %ln9b4 = add i64 %ln9b3, 6
  %ln9b5 = inttoptr i64 %ln9b4 to i64*
  %ln9b6 = load i64, i64* %ln9b5, !tbaa !4
  store i64 %ln9b6, i64* %ls5eR
  %ln9b9 = load i64, i64* %R1_Var
  %ln9ba = add i64 %ln9b9, 14
  %ln9bb = inttoptr i64 %ln9ba to i64*
  %ln9bc = load i64, i64* %ln9bb, !tbaa !4
  store i64 %ln9bc, i64* %ls5eW
  %ln9bd = load i64, i64* %R2_Var
  store i64 %ln9bd, i64* %R1_Var
  %ln9bf = load i64, i64* %ls5eR
  %ln9be = load i64*, i64** %Sp_Var
  %ln9bg = getelementptr inbounds i64, i64* %ln9be, i32 -4
  store i64 %ln9bf, i64* %ln9bg, !tbaa !2
  %ln9bi = load i64, i64* %ls5eW
  %ln9bh = load i64*, i64** %Sp_Var
  %ln9bj = getelementptr inbounds i64, i64* %ln9bh, i32 -3
  store i64 %ln9bi, i64* %ln9bj, !tbaa !2
  %ln9bl = load i64, i64* %ls5eX
  %ln9bk = load i64*, i64** %Sp_Var
  %ln9bm = getelementptr inbounds i64, i64* %ln9bk, i32 -2
  store i64 %ln9bl, i64* %ln9bm, !tbaa !2
  %ln9bo = load i64, i64* %R3_Var
  %ln9bn = load i64*, i64** %Sp_Var
  %ln9bp = getelementptr inbounds i64, i64* %ln9bn, i32 -1
  store i64 %ln9bo, i64* %ln9bp, !tbaa !2
  %ln9bq = load i64*, i64** %Sp_Var
  %ln9br = getelementptr inbounds i64, i64* %ln9bq, i32 -5
  %ln9bs = ptrtoint i64* %ln9br to i64
  %ln9bt = inttoptr i64 %ln9bs to i64*
  store i64* %ln9bt, i64** %Sp_Var
  %ln9bu = load i64, i64* %R1_Var
  %ln9bv = and i64 %ln9bu, 7
  %ln9bw = icmp ne i64 %ln9bv, 0
  br i1 %ln9bw, label %u971, label %c96m
c96m:
  %ln9by = load i64, i64* %R1_Var
  %ln9bz = inttoptr i64 %ln9by to i64*
  %ln9bA = load i64, i64* %ln9bz, !tbaa !4
  %ln9bB = inttoptr i64 %ln9bA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bC = load i64*, i64** %Sp_Var
  %ln9bD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bB( i64* %Base_Arg, i64* %ln9bC, i64* %Hp_Arg, i64 %ln9bD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u971:
  %ln9bE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96l_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bF = load i64*, i64** %Sp_Var
  %ln9bG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bE( i64* %Base_Arg, i64* %ln9bF, i64* %Hp_Arg, i64 %ln9bG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96T:
  %ln9bH = load i64, i64* %R3_Var
  store i64 %ln9bH, i64* %R3_Var
  %ln9bI = load i64, i64* %R2_Var
  store i64 %ln9bI, i64* %R2_Var
  %ln9bJ = load i64, i64* %R1_Var
  store i64 %ln9bJ, i64* %R1_Var
  %ln9bK = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9bL = bitcast i64* %ln9bK to i64*
  %ln9bM = load i64, i64* %ln9bL, !tbaa !5
  %ln9bN = inttoptr i64 %ln9bM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bO = load i64*, i64** %Sp_Var
  %ln9bP = load i64, i64* %R1_Var
  %ln9bQ = load i64, i64* %R2_Var
  %ln9bR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bN( i64* %Base_Arg, i64* %ln9bO, i64* %Hp_Arg, i64 %ln9bP, i64 %ln9bQ, i64 %ln9bR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c96l_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c96l_info$def to i8*)
define internal ghccc void @c96l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
n9bS:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5f1 = alloca i64, i32 1
  %ls5f2 = alloca i64, i32 1
  %ls5eR = alloca i64, i32 1
  %ls5eZ = alloca i64, i32 1
  br label %c96l
c96l:
  %ln9bT = load i64, i64* %R1_Var
  %ln9bU = and i64 %ln9bT, 7
  switch i64 %ln9bU, label %c96P [i64 1, label %c96P
i64 2, label %c96Q]
c96P:
  %ln9bV = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9bW = add i64 %ln9bV, 1
  store i64 %ln9bW, i64* %R1_Var
  %ln9bX = load i64*, i64** %Sp_Var
  %ln9bY = getelementptr inbounds i64, i64* %ln9bX, i32 5
  %ln9bZ = ptrtoint i64* %ln9bY to i64
  %ln9c0 = inttoptr i64 %ln9bZ to i64*
  store i64* %ln9c0, i64** %Sp_Var
  %ln9c1 = load i64*, i64** %Sp_Var
  %ln9c2 = getelementptr inbounds i64, i64* %ln9c1, i32 0
  %ln9c3 = bitcast i64* %ln9c2 to i64*
  %ln9c4 = load i64, i64* %ln9c3, !tbaa !2
  %ln9c5 = inttoptr i64 %ln9c4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9c6 = load i64*, i64** %Sp_Var
  %ln9c7 = load i64*, i64** %Hp_Var
  %ln9c8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9c5( i64* %Base_Arg, i64* %ln9c6, i64* %ln9c7, i64 %ln9c8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96Q:
  %ln9c9 = load i64*, i64** %Hp_Var
  %ln9ca = getelementptr inbounds i64, i64* %ln9c9, i32 15
  %ln9cb = ptrtoint i64* %ln9ca to i64
  %ln9cc = inttoptr i64 %ln9cb to i64*
  store i64* %ln9cc, i64** %Hp_Var
  %ln9cd = load i64*, i64** %Hp_Var
  %ln9ce = ptrtoint i64* %ln9cd to i64
  %ln9cf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9cg = bitcast i64* %ln9cf to i64*
  %ln9ch = load i64, i64* %ln9cg, !tbaa !5
  %ln9ci = icmp ugt i64 %ln9ce, %ln9ch
  %ln9cj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ci, i1 0 )
  br i1 %ln9cj, label %c970, label %c96Z
c96Z:
  %ln9cm = load i64, i64* %R1_Var
  %ln9cn = add i64 %ln9cm, 6
  %ln9co = inttoptr i64 %ln9cn to i64*
  %ln9cp = load i64, i64* %ln9co, !tbaa !4
  store i64 %ln9cp, i64* %ls5f1
  %ln9cs = load i64, i64* %R1_Var
  %ln9ct = add i64 %ln9cs, 14
  %ln9cu = inttoptr i64 %ln9ct to i64*
  %ln9cv = load i64, i64* %ln9cu, !tbaa !4
  store i64 %ln9cv, i64* %ls5f2
  %ln9cx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f5_info$def to i64
  %ln9cw = load i64*, i64** %Hp_Var
  %ln9cy = getelementptr inbounds i64, i64* %ln9cw, i32 -14
  store i64 %ln9cx, i64* %ln9cy, !tbaa !3
  %ln9cz = load i64*, i64** %Sp_Var
  %ln9cA = getelementptr inbounds i64, i64* %ln9cz, i32 1
  %ln9cB = bitcast i64* %ln9cA to i64*
  %ln9cC = load i64, i64* %ln9cB, !tbaa !2
  store i64 %ln9cC, i64* %ls5eR
  %ln9cE = load i64, i64* %ls5eR
  %ln9cD = load i64*, i64** %Hp_Var
  %ln9cF = getelementptr inbounds i64, i64* %ln9cD, i32 -12
  store i64 %ln9cE, i64* %ln9cF, !tbaa !3
  %ln9cG = load i64*, i64** %Sp_Var
  %ln9cH = getelementptr inbounds i64, i64* %ln9cG, i32 4
  %ln9cI = bitcast i64* %ln9cH to i64*
  %ln9cJ = load i64, i64* %ln9cI, !tbaa !2
  store i64 %ln9cJ, i64* %ls5eZ
  %ln9cL = load i64, i64* %ls5eZ
  %ln9cK = load i64*, i64** %Hp_Var
  %ln9cM = getelementptr inbounds i64, i64* %ln9cK, i32 -11
  store i64 %ln9cL, i64* %ln9cM, !tbaa !3
  %ln9cO = load i64*, i64** %Sp_Var
  %ln9cP = getelementptr inbounds i64, i64* %ln9cO, i32 2
  %ln9cQ = bitcast i64* %ln9cP to i64*
  %ln9cR = load i64, i64* %ln9cQ, !tbaa !2
  %ln9cN = load i64*, i64** %Hp_Var
  %ln9cS = getelementptr inbounds i64, i64* %ln9cN, i32 -10
  store i64 %ln9cR, i64* %ln9cS, !tbaa !3
  %ln9cU = load i64, i64* %ls5f2
  %ln9cT = load i64*, i64** %Hp_Var
  %ln9cV = getelementptr inbounds i64, i64* %ln9cT, i32 -9
  store i64 %ln9cU, i64* %ln9cV, !tbaa !3
  %ln9cX = load i64*, i64** %Sp_Var
  %ln9cY = getelementptr inbounds i64, i64* %ln9cX, i32 3
  %ln9cZ = bitcast i64* %ln9cY to i64*
  %ln9d0 = load i64, i64* %ln9cZ, !tbaa !2
  %ln9cW = load i64*, i64** %Hp_Var
  %ln9d1 = getelementptr inbounds i64, i64* %ln9cW, i32 -8
  store i64 %ln9d0, i64* %ln9d1, !tbaa !3
  %ln9d3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5f3_info$def to i64
  %ln9d2 = load i64*, i64** %Hp_Var
  %ln9d4 = getelementptr inbounds i64, i64* %ln9d2, i32 -7
  store i64 %ln9d3, i64* %ln9d4, !tbaa !3
  %ln9d6 = load i64, i64* %ls5eR
  %ln9d5 = load i64*, i64** %Hp_Var
  %ln9d7 = getelementptr inbounds i64, i64* %ln9d5, i32 -5
  store i64 %ln9d6, i64* %ln9d7, !tbaa !3
  %ln9d9 = load i64, i64* %ls5eZ
  %ln9d8 = load i64*, i64** %Hp_Var
  %ln9da = getelementptr inbounds i64, i64* %ln9d8, i32 -4
  store i64 %ln9d9, i64* %ln9da, !tbaa !3
  %ln9dc = load i64, i64* %ls5f1
  %ln9db = load i64*, i64** %Hp_Var
  %ln9dd = getelementptr inbounds i64, i64* %ln9db, i32 -3
  store i64 %ln9dc, i64* %ln9dd, !tbaa !3
  %ln9df = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9de = load i64*, i64** %Hp_Var
  %ln9dg = getelementptr inbounds i64, i64* %ln9de, i32 -2
  store i64 %ln9df, i64* %ln9dg, !tbaa !3
  %ln9di = load i64*, i64** %Hp_Var
  %ln9dj = getelementptr inbounds i64, i64* %ln9di, i32 -7
  %ln9dk = ptrtoint i64* %ln9dj to i64
  %ln9dh = load i64*, i64** %Hp_Var
  %ln9dl = getelementptr inbounds i64, i64* %ln9dh, i32 -1
  store i64 %ln9dk, i64* %ln9dl, !tbaa !3
  %ln9dn = load i64*, i64** %Hp_Var
  %ln9do = getelementptr inbounds i64, i64* %ln9dn, i32 -14
  %ln9dp = ptrtoint i64* %ln9do to i64
  %ln9dm = load i64*, i64** %Hp_Var
  %ln9dq = getelementptr inbounds i64, i64* %ln9dm, i32 0
  store i64 %ln9dp, i64* %ln9dq, !tbaa !3
  %ln9ds = load i64*, i64** %Hp_Var
  %ln9dt = ptrtoint i64* %ln9ds to i64
  %ln9du = add i64 %ln9dt, -14
  store i64 %ln9du, i64* %R1_Var
  %ln9dv = load i64*, i64** %Sp_Var
  %ln9dw = getelementptr inbounds i64, i64* %ln9dv, i32 5
  %ln9dx = ptrtoint i64* %ln9dw to i64
  %ln9dy = inttoptr i64 %ln9dx to i64*
  store i64* %ln9dy, i64** %Sp_Var
  %ln9dz = load i64*, i64** %Sp_Var
  %ln9dA = getelementptr inbounds i64, i64* %ln9dz, i32 0
  %ln9dB = bitcast i64* %ln9dA to i64*
  %ln9dC = load i64, i64* %ln9dB, !tbaa !2
  %ln9dD = inttoptr i64 %ln9dC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dE = load i64*, i64** %Sp_Var
  %ln9dF = load i64*, i64** %Hp_Var
  %ln9dG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dD( i64* %Base_Arg, i64* %ln9dE, i64* %ln9dF, i64 %ln9dG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c970:
  %ln9dH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %ln9dH, !tbaa !5
  %ln9dI = load i64, i64* %R1_Var
  store i64 %ln9dI, i64* %R1_Var
  %ln9dJ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dK = load i64*, i64** %Sp_Var
  %ln9dL = load i64*, i64** %Hp_Var
  %ln9dM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dJ( i64* %Base_Arg, i64* %ln9dK, i64* %ln9dL, i64 %ln9dM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_deriv_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_deriv_info$def to i8*)
define ghccc void @Main_deriv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n9dN:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c976
c976:
  %ln9dO = load i64*, i64** %Sp_Var
  %ln9dP = getelementptr inbounds i64, i64* %ln9dO, i32 -2
  %ln9dQ = ptrtoint i64* %ln9dP to i64
  %ln9dR = icmp ult i64 %ln9dQ, %SpLim_Arg
  %ln9dS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9dR, i1 0 )
  br i1 %ln9dS, label %c977, label %c978
c978:
  %ln9dU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c963_info$def to i64
  %ln9dT = load i64*, i64** %Sp_Var
  %ln9dV = getelementptr inbounds i64, i64* %ln9dT, i32 -2
  store i64 %ln9dU, i64* %ln9dV, !tbaa !2
  %ln9dW = load i64, i64* %R3_Var
  store i64 %ln9dW, i64* %R1_Var
  %ln9dY = load i64, i64* %R2_Var
  %ln9dX = load i64*, i64** %Sp_Var
  %ln9dZ = getelementptr inbounds i64, i64* %ln9dX, i32 -1
  store i64 %ln9dY, i64* %ln9dZ, !tbaa !2
  %ln9e0 = load i64*, i64** %Sp_Var
  %ln9e1 = getelementptr inbounds i64, i64* %ln9e0, i32 -2
  %ln9e2 = ptrtoint i64* %ln9e1 to i64
  %ln9e3 = inttoptr i64 %ln9e2 to i64*
  store i64* %ln9e3, i64** %Sp_Var
  %ln9e4 = load i64, i64* %R1_Var
  %ln9e5 = and i64 %ln9e4, 7
  %ln9e6 = icmp ne i64 %ln9e5, 0
  br i1 %ln9e6, label %u97e, label %c964
c964:
  %ln9e8 = load i64, i64* %R1_Var
  %ln9e9 = inttoptr i64 %ln9e8 to i64*
  %ln9ea = load i64, i64* %ln9e9, !tbaa !4
  %ln9eb = inttoptr i64 %ln9ea to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ec = load i64*, i64** %Sp_Var
  %ln9ed = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eb( i64* %Base_Arg, i64* %ln9ec, i64* %Hp_Arg, i64 %ln9ed, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u97e:
  %ln9ee = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c963_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ef = load i64*, i64** %Sp_Var
  %ln9eg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ee( i64* %Base_Arg, i64* %ln9ef, i64* %Hp_Arg, i64 %ln9eg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c977:
  %ln9eh = load i64, i64* %R3_Var
  store i64 %ln9eh, i64* %R3_Var
  %ln9ei = load i64, i64* %R2_Var
  store i64 %ln9ei, i64* %R2_Var
  %ln9ej = ptrtoint %Main_deriv_closure_struct* @Main_deriv_closure$def to i64
  store i64 %ln9ej, i64* %R1_Var
  %ln9ek = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9el = bitcast i64* %ln9ek to i64*
  %ln9em = load i64, i64* %ln9el, !tbaa !5
  %ln9en = inttoptr i64 %ln9em to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eo = load i64*, i64** %Sp_Var
  %ln9ep = load i64, i64* %R1_Var
  %ln9eq = load i64, i64* %R2_Var
  %ln9er = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9en( i64* %Base_Arg, i64* %ln9eo, i64* %Hp_Arg, i64 %ln9ep, i64 %ln9eq, i64 %ln9er, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c963_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c963_info$def to i8*)
define internal ghccc void @c963_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9es:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5eV = alloca i64, i32 1
  %ls5eR = alloca i64, i32 1
  %lc969 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c963
c963:
  %ln9et = load i64, i64* %R1_Var
  %ln9eu = and i64 %ln9et, 7
  switch i64 %ln9eu, label %c973 [i64 1, label %c973
i64 2, label %c974]
c973:
  %ln9ev = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9ew = add i64 %ln9ev, 1
  store i64 %ln9ew, i64* %R1_Var
  %ln9ex = load i64*, i64** %Sp_Var
  %ln9ey = getelementptr inbounds i64, i64* %ln9ex, i32 2
  %ln9ez = ptrtoint i64* %ln9ey to i64
  %ln9eA = inttoptr i64 %ln9ez to i64*
  store i64* %ln9eA, i64** %Sp_Var
  %ln9eB = load i64*, i64** %Sp_Var
  %ln9eC = getelementptr inbounds i64, i64* %ln9eB, i32 0
  %ln9eD = bitcast i64* %ln9eC to i64*
  %ln9eE = load i64, i64* %ln9eD, !tbaa !2
  %ln9eF = inttoptr i64 %ln9eE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eG = load i64*, i64** %Sp_Var
  %ln9eH = load i64*, i64** %Hp_Var
  %ln9eI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eF( i64* %Base_Arg, i64* %ln9eG, i64* %ln9eH, i64 %ln9eI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c974:
  %ln9eJ = load i64*, i64** %Hp_Var
  %ln9eK = getelementptr inbounds i64, i64* %ln9eJ, i32 6
  %ln9eL = ptrtoint i64* %ln9eK to i64
  %ln9eM = inttoptr i64 %ln9eL to i64*
  store i64* %ln9eM, i64** %Hp_Var
  %ln9eN = load i64*, i64** %Hp_Var
  %ln9eO = ptrtoint i64* %ln9eN to i64
  %ln9eP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9eQ = bitcast i64* %ln9eP to i64*
  %ln9eR = load i64, i64* %ln9eQ, !tbaa !5
  %ln9eS = icmp ugt i64 %ln9eO, %ln9eR
  %ln9eT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9eS, i1 0 )
  br i1 %ln9eT, label %c97d, label %c97c
c97c:
  %ln9eW = load i64, i64* %R1_Var
  %ln9eX = add i64 %ln9eW, 14
  %ln9eY = inttoptr i64 %ln9eX to i64*
  %ln9eZ = load i64, i64* %ln9eY, !tbaa !4
  store i64 %ln9eZ, i64* %ls5eV
  %ln9f1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eW_info$def to i64
  %ln9f0 = load i64*, i64** %Hp_Var
  %ln9f2 = getelementptr inbounds i64, i64* %ln9f0, i32 -5
  store i64 %ln9f1, i64* %ln9f2, !tbaa !3
  %ln9f3 = load i64*, i64** %Sp_Var
  %ln9f4 = getelementptr inbounds i64, i64* %ln9f3, i32 1
  %ln9f5 = bitcast i64* %ln9f4 to i64*
  %ln9f6 = load i64, i64* %ln9f5, !tbaa !2
  store i64 %ln9f6, i64* %ls5eR
  %ln9f8 = load i64, i64* %ls5eR
  %ln9f7 = load i64*, i64** %Hp_Var
  %ln9f9 = getelementptr inbounds i64, i64* %ln9f7, i32 -3
  store i64 %ln9f8, i64* %ln9f9, !tbaa !3
  %ln9fb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eX_info$def to i64
  %ln9fa = load i64*, i64** %Hp_Var
  %ln9fc = getelementptr inbounds i64, i64* %ln9fa, i32 -2
  store i64 %ln9fb, i64* %ln9fc, !tbaa !3
  %ln9fe = load i64, i64* %ls5eR
  %ln9fd = load i64*, i64** %Hp_Var
  %ln9ff = getelementptr inbounds i64, i64* %ln9fd, i32 -1
  store i64 %ln9fe, i64* %ln9ff, !tbaa !3
  %ln9fg = load i64*, i64** %Hp_Var
  %ln9fh = getelementptr inbounds i64, i64* %ln9fg, i32 -5
  %ln9fi = ptrtoint i64* %ln9fh to i64
  store i64 %ln9fi, i64* %lc969
  %ln9fk = load i64, i64* %lc969
  %ln9fj = load i64*, i64** %Hp_Var
  %ln9fl = getelementptr inbounds i64, i64* %ln9fj, i32 0
  store i64 %ln9fk, i64* %ln9fl, !tbaa !3
  %ln9fm = load i64, i64* %lc969
  store i64 %ln9fm, i64* %R3_Var
  %ln9fn = load i64, i64* %ls5eV
  store i64 %ln9fn, i64* %R2_Var
  %ln9fp = load i64*, i64** %Hp_Var
  %ln9fq = ptrtoint i64* %ln9fp to i64
  %ln9fr = add i64 %ln9fq, -14
  store i64 %ln9fr, i64* %R1_Var
  %ln9fs = load i64*, i64** %Sp_Var
  %ln9ft = getelementptr inbounds i64, i64* %ln9fs, i32 2
  %ln9fu = ptrtoint i64* %ln9ft to i64
  %ln9fv = inttoptr i64 %ln9fu to i64*
  store i64* %ln9fv, i64** %Sp_Var
  %ln9fw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5eX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fx = load i64*, i64** %Sp_Var
  %ln9fy = load i64*, i64** %Hp_Var
  %ln9fz = load i64, i64* %R1_Var
  %ln9fA = load i64, i64* %R2_Var
  %ln9fB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fw( i64* %Base_Arg, i64* %ln9fx, i64* %ln9fy, i64 %ln9fz, i64 %ln9fA, i64 %ln9fB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c97d:
  %ln9fC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln9fC, !tbaa !5
  %ln9fD = load i64, i64* %R1_Var
  store i64 %ln9fD, i64* %R1_Var
  %ln9fE = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fF = load i64*, i64** %Sp_Var
  %ln9fG = load i64*, i64** %Hp_Var
  %ln9fH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fE( i64* %Base_Arg, i64* %ln9fF, i64* %ln9fG, i64 %ln9fH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_integralzuint1_closure_struct = type <{i64, i64, i64, i64}>
@Main_integralzuint1_closure$def = internal global %Main_integralzuint1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64), i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczs_closure to i64), i64 0}>
@Main_integralzuint1_closure = alias i8, bitcast (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i8*)
@s5fi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fi_info$def to i8*)
define internal ghccc void @s5fi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fi_info$def to i64)) to i32),i32 0)}>
{
n9gG:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9g3
c9g3:
  %ln9gH = load i64*, i64** %Sp_Var
  %ln9gI = getelementptr inbounds i64, i64* %ln9gH, i32 -3
  %ln9gJ = ptrtoint i64* %ln9gI to i64
  %ln9gK = icmp ult i64 %ln9gJ, %SpLim_Arg
  %ln9gL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9gK, i1 0 )
  br i1 %ln9gL, label %c9g9, label %c9ga
c9ga:
  %ln9gN = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9gM = load i64*, i64** %Sp_Var
  %ln9gO = getelementptr inbounds i64, i64* %ln9gM, i32 -2
  store i64 %ln9gN, i64* %ln9gO, !tbaa !2
  %ln9gQ = load i64, i64* %R1_Var
  %ln9gP = load i64*, i64** %Sp_Var
  %ln9gR = getelementptr inbounds i64, i64* %ln9gP, i32 -1
  store i64 %ln9gQ, i64* %ln9gR, !tbaa !2
  %ln9gT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g0_info$def to i64
  %ln9gS = load i64*, i64** %Sp_Var
  %ln9gU = getelementptr inbounds i64, i64* %ln9gS, i32 -3
  store i64 %ln9gT, i64* %ln9gU, !tbaa !2
  %ln9gX = load i64, i64* %R1_Var
  %ln9gY = add i64 %ln9gX, 16
  %ln9gZ = inttoptr i64 %ln9gY to i64*
  %ln9h0 = load i64, i64* %ln9gZ, !tbaa !4
  store i64 %ln9h0, i64* %R1_Var
  %ln9h1 = load i64*, i64** %Sp_Var
  %ln9h2 = getelementptr inbounds i64, i64* %ln9h1, i32 -3
  %ln9h3 = ptrtoint i64* %ln9h2 to i64
  %ln9h4 = inttoptr i64 %ln9h3 to i64*
  store i64* %ln9h4, i64** %Sp_Var
  %ln9h5 = load i64, i64* %R1_Var
  %ln9h6 = and i64 %ln9h5, 7
  %ln9h7 = icmp ne i64 %ln9h6, 0
  br i1 %ln9h7, label %u9gf, label %c9g1
c9g1:
  %ln9h9 = load i64, i64* %R1_Var
  %ln9ha = inttoptr i64 %ln9h9 to i64*
  %ln9hb = load i64, i64* %ln9ha, !tbaa !4
  %ln9hc = inttoptr i64 %ln9hb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hd = load i64*, i64** %Sp_Var
  %ln9he = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hc( i64* %Base_Arg, i64* %ln9hd, i64* %Hp_Arg, i64 %ln9he, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9gf:
  %ln9hf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g0_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hg = load i64*, i64** %Sp_Var
  %ln9hh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hf( i64* %Base_Arg, i64* %ln9hg, i64* %Hp_Arg, i64 %ln9hh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9g9:
  %ln9hi = load i64, i64* %R1_Var
  store i64 %ln9hi, i64* %R1_Var
  %ln9hj = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9hk = bitcast i64* %ln9hj to i64*
  %ln9hl = load i64, i64* %ln9hk, !tbaa !5
  %ln9hm = inttoptr i64 %ln9hl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hn = load i64*, i64** %Sp_Var
  %ln9ho = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hm( i64* %Base_Arg, i64* %ln9hn, i64* %Hp_Arg, i64 %ln9ho, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9g0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g0_info$def to i8*)
define internal ghccc void @c9g0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdwzdszdczp_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g0_info$def to i64)) to i32),i32 0)}>
{
n9hp:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9g0
c9g0:
  %ln9hq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g6_info$def to i64
  %ln9hr = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9hq, i64* %ln9hr, !tbaa !2
  %ln9hs = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %ln9ht = add i64 %ln9hs, 1
  store i64 %ln9ht, i64* %R5_Var
  %ln9hu = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9hv = add i64 %ln9hu, 1
  store i64 %ln9hv, i64* %R4_Var
  %ln9hw = add i64 %R1_Arg, 15
  %ln9hx = inttoptr i64 %ln9hw to i64*
  %ln9hy = load i64, i64* %ln9hx, !tbaa !4
  store i64 %ln9hy, i64* %R3_Var
  %ln9hz = add i64 %R1_Arg, 7
  %ln9hA = inttoptr i64 %ln9hz to i64*
  %ln9hB = load i64, i64* %ln9hA, !tbaa !4
  store i64 %ln9hB, i64* %R2_Var
  %ln9hC = bitcast i8* @base_GHCziReal_zdwzdszdczp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hD = load i64, i64* %R2_Var
  %ln9hE = load i64, i64* %R3_Var
  %ln9hF = load i64, i64* %R4_Var
  %ln9hG = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9hD, i64 %ln9hE, i64 %ln9hF, i64 %ln9hG, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9g6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9g6_info$def to i8*)
define internal ghccc void @c9g6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9hH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9g6
c9g6:
  %ln9hI = load i64*, i64** %Hp_Var
  %ln9hJ = getelementptr inbounds i64, i64* %ln9hI, i32 3
  %ln9hK = ptrtoint i64* %ln9hJ to i64
  %ln9hL = inttoptr i64 %ln9hK to i64*
  store i64* %ln9hL, i64** %Hp_Var
  %ln9hM = load i64*, i64** %Hp_Var
  %ln9hN = ptrtoint i64* %ln9hM to i64
  %ln9hO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9hP = bitcast i64* %ln9hO to i64*
  %ln9hQ = load i64, i64* %ln9hP, !tbaa !5
  %ln9hR = icmp ugt i64 %ln9hN, %ln9hQ
  %ln9hS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9hR, i1 0 )
  br i1 %ln9hS, label %c9ge, label %c9gd
c9gd:
  %ln9hU = ptrtoint i8* @base_GHCziReal_ZCzv_con_info to i64
  %ln9hT = load i64*, i64** %Hp_Var
  %ln9hV = getelementptr inbounds i64, i64* %ln9hT, i32 -2
  store i64 %ln9hU, i64* %ln9hV, !tbaa !3
  %ln9hX = load i64, i64* %R1_Var
  %ln9hW = load i64*, i64** %Hp_Var
  %ln9hY = getelementptr inbounds i64, i64* %ln9hW, i32 -1
  store i64 %ln9hX, i64* %ln9hY, !tbaa !3
  %ln9i0 = load i64, i64* %R2_Var
  %ln9hZ = load i64*, i64** %Hp_Var
  %ln9i1 = getelementptr inbounds i64, i64* %ln9hZ, i32 0
  store i64 %ln9i0, i64* %ln9i1, !tbaa !3
  %ln9i3 = load i64*, i64** %Hp_Var
  %ln9i4 = ptrtoint i64* %ln9i3 to i64
  %ln9i5 = add i64 %ln9i4, -15
  store i64 %ln9i5, i64* %R1_Var
  %ln9i6 = load i64*, i64** %Sp_Var
  %ln9i7 = getelementptr inbounds i64, i64* %ln9i6, i32 1
  %ln9i8 = ptrtoint i64* %ln9i7 to i64
  %ln9i9 = inttoptr i64 %ln9i8 to i64*
  store i64* %ln9i9, i64** %Sp_Var
  %ln9ia = load i64*, i64** %Sp_Var
  %ln9ib = getelementptr inbounds i64, i64* %ln9ia, i32 0
  %ln9ic = bitcast i64* %ln9ib to i64*
  %ln9id = load i64, i64* %ln9ic, !tbaa !2
  %ln9ie = inttoptr i64 %ln9id to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9if = load i64*, i64** %Sp_Var
  %ln9ig = load i64*, i64** %Hp_Var
  %ln9ih = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ie( i64* %Base_Arg, i64* %ln9if, i64* %ln9ig, i64 %ln9ih, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ge:
  %ln9ii = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9ii, !tbaa !5
  %ln9ij = load i64, i64* %R2_Var
  store i64 %ln9ij, i64* %R2_Var
  %ln9ik = load i64, i64* %R1_Var
  store i64 %ln9ik, i64* %R1_Var
  %ln9il = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9im = load i64*, i64** %Sp_Var
  %ln9in = load i64*, i64** %Hp_Var
  %ln9io = load i64, i64* %R1_Var
  %ln9ip = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9il( i64* %Base_Arg, i64* %ln9im, i64* %ln9in, i64 %ln9io, i64 %ln9ip, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fj_info$def to i8*)
define internal ghccc void @s5fj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fj_info$def to i64)) to i32),i32 0)}>
{
n9iq:
  %ls5fj = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5f7 = alloca i64, i32 1
  %ls5fa = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9gg
c9gg:
  %ln9ir = load i64, i64* %R1_Var
  store i64 %ln9ir, i64* %ls5fj
  %ln9is = load i64*, i64** %Sp_Var
  %ln9it = getelementptr inbounds i64, i64* %ln9is, i32 -2
  %ln9iu = ptrtoint i64* %ln9it to i64
  %ln9iv = icmp ult i64 %ln9iu, %SpLim_Arg
  %ln9iw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9iv, i1 0 )
  br i1 %ln9iw, label %c9gh, label %c9gi
c9gi:
  %ln9ix = load i64*, i64** %Hp_Var
  %ln9iy = getelementptr inbounds i64, i64* %ln9ix, i32 3
  %ln9iz = ptrtoint i64* %ln9iy to i64
  %ln9iA = inttoptr i64 %ln9iz to i64*
  store i64* %ln9iA, i64** %Hp_Var
  %ln9iB = load i64*, i64** %Hp_Var
  %ln9iC = ptrtoint i64* %ln9iB to i64
  %ln9iD = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9iE = bitcast i64* %ln9iD to i64*
  %ln9iF = load i64, i64* %ln9iE, !tbaa !5
  %ln9iG = icmp ugt i64 %ln9iC, %ln9iF
  %ln9iH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9iG, i1 0 )
  br i1 %ln9iH, label %c9gk, label %c9gj
c9gj:
  %ln9iJ = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9iI = load i64*, i64** %Sp_Var
  %ln9iK = getelementptr inbounds i64, i64* %ln9iI, i32 -2
  store i64 %ln9iJ, i64* %ln9iK, !tbaa !2
  %ln9iM = load i64, i64* %ls5fj
  %ln9iL = load i64*, i64** %Sp_Var
  %ln9iN = getelementptr inbounds i64, i64* %ln9iL, i32 -1
  store i64 %ln9iM, i64* %ln9iN, !tbaa !2
  %ln9iO = load i64, i64* %ls5fj
  %ln9iP = add i64 %ln9iO, 16
  %ln9iQ = inttoptr i64 %ln9iP to i64*
  %ln9iR = load i64, i64* %ln9iQ, !tbaa !1
  store i64 %ln9iR, i64* %ls5f7
  %ln9iS = load i64, i64* %ls5fj
  %ln9iT = add i64 %ln9iS, 24
  %ln9iU = inttoptr i64 %ln9iT to i64*
  %ln9iV = load i64, i64* %ln9iU, !tbaa !1
  store i64 %ln9iV, i64* %ls5fa
  %ln9iX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fi_info$def to i64
  %ln9iW = load i64*, i64** %Hp_Var
  %ln9iY = getelementptr inbounds i64, i64* %ln9iW, i32 -2
  store i64 %ln9iX, i64* %ln9iY, !tbaa !3
  %ln9j0 = load i64, i64* %ls5f7
  %ln9iZ = load i64*, i64** %Hp_Var
  %ln9j1 = getelementptr inbounds i64, i64* %ln9iZ, i32 0
  store i64 %ln9j0, i64* %ln9j1, !tbaa !3
  %ln9j2 = load i64*, i64** %Hp_Var
  %ln9j3 = getelementptr inbounds i64, i64* %ln9j2, i32 -2
  %ln9j4 = ptrtoint i64* %ln9j3 to i64
  store i64 %ln9j4, i64* %R3_Var
  %ln9j5 = load i64, i64* %ls5fa
  store i64 %ln9j5, i64* %R2_Var
  %ln9j6 = load i64*, i64** %Sp_Var
  %ln9j7 = getelementptr inbounds i64, i64* %ln9j6, i32 -2
  %ln9j8 = ptrtoint i64* %ln9j7 to i64
  %ln9j9 = inttoptr i64 %ln9j8 to i64*
  store i64* %ln9j9, i64** %Sp_Var
  %ln9ja = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jb = load i64*, i64** %Sp_Var
  %ln9jc = load i64*, i64** %Hp_Var
  %ln9jd = load i64, i64* %R1_Var
  %ln9je = load i64, i64* %R2_Var
  %ln9jf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ja( i64* %Base_Arg, i64* %ln9jb, i64* %ln9jc, i64 %ln9jd, i64 %ln9je, i64 %ln9jf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gk:
  %ln9jg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9jg, !tbaa !5
  br label %c9gh
c9gh:
  %ln9jh = load i64, i64* %ls5fj
  store i64 %ln9jh, i64* %R1_Var
  %ln9ji = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9jj = bitcast i64* %ln9ji to i64*
  %ln9jk = load i64, i64* %ln9jj, !tbaa !5
  %ln9jl = inttoptr i64 %ln9jk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jm = load i64*, i64** %Sp_Var
  %ln9jn = load i64*, i64** %Hp_Var
  %ln9jo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9jl( i64* %Base_Arg, i64* %ln9jm, i64* %ln9jn, i64 %ln9jo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fb_info$def to i8*)
define internal ghccc void @s5fb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczs_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fb_info$def to i64)) to i32),i32 0)}>
{
n9jp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9gp
c9gp:
  %ln9jq = load i64*, i64** %Sp_Var
  %ln9jr = getelementptr inbounds i64, i64* %ln9jq, i32 -2
  %ln9js = ptrtoint i64* %ln9jr to i64
  %ln9jt = icmp ult i64 %ln9js, %SpLim_Arg
  %ln9ju = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9jt, i1 0 )
  br i1 %ln9ju, label %c9gq, label %c9gr
c9gr:
  %ln9jw = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9jv = load i64*, i64** %Sp_Var
  %ln9jx = getelementptr inbounds i64, i64* %ln9jv, i32 -2
  store i64 %ln9jw, i64* %ln9jx, !tbaa !2
  %ln9jz = load i64, i64* %R1_Var
  %ln9jy = load i64*, i64** %Sp_Var
  %ln9jA = getelementptr inbounds i64, i64* %ln9jy, i32 -1
  store i64 %ln9jz, i64* %ln9jA, !tbaa !2
  %ln9jD = load i64, i64* %R1_Var
  %ln9jE = add i64 %ln9jD, 24
  %ln9jF = inttoptr i64 %ln9jE to i64*
  %ln9jG = load i64, i64* %ln9jF, !tbaa !4
  store i64 %ln9jG, i64* %R3_Var
  %ln9jJ = load i64, i64* %R1_Var
  %ln9jK = add i64 %ln9jJ, 16
  %ln9jL = inttoptr i64 %ln9jK to i64*
  %ln9jM = load i64, i64* %ln9jL, !tbaa !4
  store i64 %ln9jM, i64* %R2_Var
  %ln9jN = load i64*, i64** %Sp_Var
  %ln9jO = getelementptr inbounds i64, i64* %ln9jN, i32 -2
  %ln9jP = ptrtoint i64* %ln9jO to i64
  %ln9jQ = inttoptr i64 %ln9jP to i64*
  store i64* %ln9jQ, i64** %Sp_Var
  %ln9jR = bitcast i8* @base_GHCziReal_zdfFractionalRatiozuzdszdczs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jS = load i64*, i64** %Sp_Var
  %ln9jT = load i64, i64* %R1_Var
  %ln9jU = load i64, i64* %R2_Var
  %ln9jV = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9jR( i64* %Base_Arg, i64* %ln9jS, i64* %Hp_Arg, i64 %ln9jT, i64 %ln9jU, i64 %ln9jV, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gq:
  %ln9jW = load i64, i64* %R1_Var
  store i64 %ln9jW, i64* %R1_Var
  %ln9jX = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9jY = bitcast i64* %ln9jX to i64*
  %ln9jZ = load i64, i64* %ln9jY, !tbaa !5
  %ln9k0 = inttoptr i64 %ln9jZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9k1 = load i64*, i64** %Sp_Var
  %ln9k2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9k0( i64* %Base_Arg, i64* %ln9k1, i64* %Hp_Arg, i64 %ln9k2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_integralzuint1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to i8*)
define ghccc void @Main_integralzuint1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 14, i32 0}>
{
n9k3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9gw
c9gw:
  %ln9k4 = load i64*, i64** %Sp_Var
  %ln9k5 = getelementptr inbounds i64, i64* %ln9k4, i32 -2
  %ln9k6 = ptrtoint i64* %ln9k5 to i64
  %ln9k7 = icmp ult i64 %ln9k6, %SpLim_Arg
  %ln9k8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9k7, i1 0 )
  br i1 %ln9k8, label %c9gx, label %c9gy
c9gy:
  %ln9ka = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9fM_info$def to i64
  %ln9k9 = load i64*, i64** %Sp_Var
  %ln9kb = getelementptr inbounds i64, i64* %ln9k9, i32 -2
  store i64 %ln9ka, i64* %ln9kb, !tbaa !2
  %ln9kc = load i64, i64* %R2_Var
  store i64 %ln9kc, i64* %R1_Var
  %ln9ke = load i64, i64* %R3_Var
  %ln9kd = load i64*, i64** %Sp_Var
  %ln9kf = getelementptr inbounds i64, i64* %ln9kd, i32 -1
  store i64 %ln9ke, i64* %ln9kf, !tbaa !2
  %ln9kg = load i64*, i64** %Sp_Var
  %ln9kh = getelementptr inbounds i64, i64* %ln9kg, i32 -2
  %ln9ki = ptrtoint i64* %ln9kh to i64
  %ln9kj = inttoptr i64 %ln9ki to i64*
  store i64* %ln9kj, i64** %Sp_Var
  %ln9kk = load i64, i64* %R1_Var
  %ln9kl = and i64 %ln9kk, 7
  %ln9km = icmp ne i64 %ln9kl, 0
  br i1 %ln9km, label %u9gF, label %c9fN
c9fN:
  %ln9ko = load i64, i64* %R1_Var
  %ln9kp = inttoptr i64 %ln9ko to i64*
  %ln9kq = load i64, i64* %ln9kp, !tbaa !4
  %ln9kr = inttoptr i64 %ln9kq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ks = load i64*, i64** %Sp_Var
  %ln9kt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kr( i64* %Base_Arg, i64* %ln9ks, i64* %Hp_Arg, i64 %ln9kt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9gF:
  %ln9ku = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9fM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kv = load i64*, i64** %Sp_Var
  %ln9kw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ku( i64* %Base_Arg, i64* %ln9kv, i64* %Hp_Arg, i64 %ln9kw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gx:
  %ln9kx = load i64, i64* %R3_Var
  store i64 %ln9kx, i64* %R3_Var
  %ln9ky = load i64, i64* %R2_Var
  store i64 %ln9ky, i64* %R2_Var
  %ln9kz = ptrtoint %Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64
  store i64 %ln9kz, i64* %R1_Var
  %ln9kA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9kB = bitcast i64* %ln9kA to i64*
  %ln9kC = load i64, i64* %ln9kB, !tbaa !5
  %ln9kD = inttoptr i64 %ln9kC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kE = load i64*, i64** %Sp_Var
  %ln9kF = load i64, i64* %R1_Var
  %ln9kG = load i64, i64* %R2_Var
  %ln9kH = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kD( i64* %Base_Arg, i64* %ln9kE, i64* %Hp_Arg, i64 %ln9kF, i64 %ln9kG, i64 %ln9kH, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9fM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9fM_info$def to i8*)
define internal ghccc void @c9fM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9fM_info$def to i64)) to i32),i32 0)}>
{
n9kI:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5f9 = alloca i64, i32 1
  %ls5fa = alloca i64, i32 1
  %ls5f7 = alloca i64, i32 1
  br label %c9fM
c9fM:
  %ln9kJ = load i64, i64* %R1_Var
  %ln9kK = and i64 %ln9kJ, 7
  switch i64 %ln9kK, label %c9gt [i64 1, label %c9gt
i64 2, label %c9gu]
c9gt:
  %ln9kL = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9kM = add i64 %ln9kL, 1
  store i64 %ln9kM, i64* %R1_Var
  %ln9kN = load i64*, i64** %Sp_Var
  %ln9kO = getelementptr inbounds i64, i64* %ln9kN, i32 2
  %ln9kP = ptrtoint i64* %ln9kO to i64
  %ln9kQ = inttoptr i64 %ln9kP to i64*
  store i64* %ln9kQ, i64** %Sp_Var
  %ln9kR = load i64*, i64** %Sp_Var
  %ln9kS = getelementptr inbounds i64, i64* %ln9kR, i32 0
  %ln9kT = bitcast i64* %ln9kS to i64*
  %ln9kU = load i64, i64* %ln9kT, !tbaa !2
  %ln9kV = inttoptr i64 %ln9kU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kW = load i64*, i64** %Sp_Var
  %ln9kX = load i64*, i64** %Hp_Var
  %ln9kY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kV( i64* %Base_Arg, i64* %ln9kW, i64* %ln9kX, i64 %ln9kY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gu:
  %ln9kZ = load i64*, i64** %Hp_Var
  %ln9l0 = getelementptr inbounds i64, i64* %ln9kZ, i32 11
  %ln9l1 = ptrtoint i64* %ln9l0 to i64
  %ln9l2 = inttoptr i64 %ln9l1 to i64*
  store i64* %ln9l2, i64** %Hp_Var
  %ln9l3 = load i64*, i64** %Hp_Var
  %ln9l4 = ptrtoint i64* %ln9l3 to i64
  %ln9l5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9l6 = bitcast i64* %ln9l5 to i64*
  %ln9l7 = load i64, i64* %ln9l6, !tbaa !5
  %ln9l8 = icmp ugt i64 %ln9l4, %ln9l7
  %ln9l9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9l8, i1 0 )
  br i1 %ln9l9, label %c9gE, label %c9gD
c9gD:
  %ln9lc = load i64, i64* %R1_Var
  %ln9ld = add i64 %ln9lc, 6
  %ln9le = inttoptr i64 %ln9ld to i64*
  %ln9lf = load i64, i64* %ln9le, !tbaa !4
  store i64 %ln9lf, i64* %ls5f9
  %ln9li = load i64, i64* %R1_Var
  %ln9lj = add i64 %ln9li, 14
  %ln9lk = inttoptr i64 %ln9lj to i64*
  %ln9ll = load i64, i64* %ln9lk, !tbaa !4
  store i64 %ln9ll, i64* %ls5fa
  %ln9ln = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fj_info$def to i64
  %ln9lm = load i64*, i64** %Hp_Var
  %ln9lo = getelementptr inbounds i64, i64* %ln9lm, i32 -10
  store i64 %ln9ln, i64* %ln9lo, !tbaa !3
  %ln9lp = load i64*, i64** %Sp_Var
  %ln9lq = getelementptr inbounds i64, i64* %ln9lp, i32 1
  %ln9lr = bitcast i64* %ln9lq to i64*
  %ln9ls = load i64, i64* %ln9lr, !tbaa !2
  store i64 %ln9ls, i64* %ls5f7
  %ln9lu = load i64, i64* %ls5f7
  %ln9lt = load i64*, i64** %Hp_Var
  %ln9lv = getelementptr inbounds i64, i64* %ln9lt, i32 -8
  store i64 %ln9lu, i64* %ln9lv, !tbaa !3
  %ln9lx = load i64, i64* %ls5fa
  %ln9lw = load i64*, i64** %Hp_Var
  %ln9ly = getelementptr inbounds i64, i64* %ln9lw, i32 -7
  store i64 %ln9lx, i64* %ln9ly, !tbaa !3
  %ln9lA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fb_info$def to i64
  %ln9lz = load i64*, i64** %Hp_Var
  %ln9lB = getelementptr inbounds i64, i64* %ln9lz, i32 -6
  store i64 %ln9lA, i64* %ln9lB, !tbaa !3
  %ln9lD = load i64, i64* %ls5f9
  %ln9lC = load i64*, i64** %Hp_Var
  %ln9lE = getelementptr inbounds i64, i64* %ln9lC, i32 -4
  store i64 %ln9lD, i64* %ln9lE, !tbaa !3
  %ln9lG = load i64, i64* %ls5f7
  %ln9lF = load i64*, i64** %Hp_Var
  %ln9lH = getelementptr inbounds i64, i64* %ln9lF, i32 -3
  store i64 %ln9lG, i64* %ln9lH, !tbaa !3
  %ln9lJ = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9lI = load i64*, i64** %Hp_Var
  %ln9lK = getelementptr inbounds i64, i64* %ln9lI, i32 -2
  store i64 %ln9lJ, i64* %ln9lK, !tbaa !3
  %ln9lM = load i64*, i64** %Hp_Var
  %ln9lN = getelementptr inbounds i64, i64* %ln9lM, i32 -6
  %ln9lO = ptrtoint i64* %ln9lN to i64
  %ln9lL = load i64*, i64** %Hp_Var
  %ln9lP = getelementptr inbounds i64, i64* %ln9lL, i32 -1
  store i64 %ln9lO, i64* %ln9lP, !tbaa !3
  %ln9lR = load i64*, i64** %Hp_Var
  %ln9lS = getelementptr inbounds i64, i64* %ln9lR, i32 -10
  %ln9lT = ptrtoint i64* %ln9lS to i64
  %ln9lQ = load i64*, i64** %Hp_Var
  %ln9lU = getelementptr inbounds i64, i64* %ln9lQ, i32 0
  store i64 %ln9lT, i64* %ln9lU, !tbaa !3
  %ln9lW = load i64*, i64** %Hp_Var
  %ln9lX = ptrtoint i64* %ln9lW to i64
  %ln9lY = add i64 %ln9lX, -14
  store i64 %ln9lY, i64* %R1_Var
  %ln9lZ = load i64*, i64** %Sp_Var
  %ln9m0 = getelementptr inbounds i64, i64* %ln9lZ, i32 2
  %ln9m1 = ptrtoint i64* %ln9m0 to i64
  %ln9m2 = inttoptr i64 %ln9m1 to i64*
  store i64* %ln9m2, i64** %Sp_Var
  %ln9m3 = load i64*, i64** %Sp_Var
  %ln9m4 = getelementptr inbounds i64, i64* %ln9m3, i32 0
  %ln9m5 = bitcast i64* %ln9m4 to i64*
  %ln9m6 = load i64, i64* %ln9m5, !tbaa !2
  %ln9m7 = inttoptr i64 %ln9m6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9m8 = load i64*, i64** %Sp_Var
  %ln9m9 = load i64*, i64** %Hp_Var
  %ln9ma = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9m7( i64* %Base_Arg, i64* %ln9m8, i64* %ln9m9, i64 %ln9ma, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gE:
  %ln9mb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln9mb, !tbaa !5
  %ln9mc = load i64, i64* %R1_Var
  store i64 %ln9mc, i64* %R1_Var
  %ln9md = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9me = load i64*, i64** %Sp_Var
  %ln9mf = load i64*, i64** %Hp_Var
  %ln9mg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9md( i64* %Base_Arg, i64* %ln9me, i64* %ln9mf, i64 %ln9mg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u9mN_srt_struct = type <{i64, i64, i64, i64}>
%_u9mO_srt_struct = type <{i64, i64, i64, i64}>
%_u9mP_srt_struct = type <{i64, i64, i64, i64, i64}>
%Main_sinx1_closure_struct = type <{i64, i64, i64, i64}>
%r55D_closure_struct = type <{i64, i64, i64, i64}>
%Main_sinx2_closure_struct = type <{i64, i64, i64, i64}>
%r55C_closure_struct = type <{i64, i64, i64, i64}>
%Main_cosxzuzdscosx_closure_struct = type <{i64, i64, i64, i64}>
@_u9mN_srt$def = internal global %_u9mN_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @Main_cosxzuzdscosx_closure to i64), i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64), i64 0}>
@_u9mN_srt = internal alias i8, bitcast (%_u9mN_srt_struct* @_u9mN_srt$def to i8*)
@_u9mO_srt$def = internal global %_u9mO_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64), i64 ptrtoint (i8* @Main_sinx1_closure to i64), i64 0}>
@_u9mO_srt = internal alias i8, bitcast (%_u9mO_srt_struct* @_u9mO_srt$def to i8*)
@_u9mP_srt$def = internal global %_u9mP_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64), i64 ptrtoint (i8* @r55D_closure to i64), i64 0}>
@_u9mP_srt = internal alias i8, bitcast (%_u9mP_srt_struct* @_u9mP_srt$def to i8*)
@Main_sinx1_closure$def = internal global %Main_sinx1_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_integral1_closure_struct* @Main_integral1_closure$def to i64),i64 1), i64 ptrtoint (i8* @Main_sinx2_closure to i64), i64 0}>
@Main_sinx1_closure = alias i8, bitcast (%Main_sinx1_closure_struct* @Main_sinx1_closure$def to i8*)
@r55D_closure$def = internal global %r55D_closure_struct<{i64 ptrtoint (i8* @Main_ZCzpZC_con_info to i64), i64 add (i64 ptrtoint (%Main_integral1_closure_struct* @Main_integral1_closure$def to i64),i64 1), i64 ptrtoint (i8* @r55C_closure to i64), i64 0}>
@r55D_closure = internal alias i8, bitcast (%r55D_closure_struct* @r55D_closure$def to i8*)
@Main_sinx2_closure$def = internal global %Main_sinx2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sinx2_info$def to i64), i64 0, i64 0, i64 0}>
@Main_sinx2_closure = alias i8, bitcast (%Main_sinx2_closure_struct* @Main_sinx2_closure$def to i8*)
@r55C_closure$def = internal global %r55C_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55C_info$def to i64), i64 0, i64 0, i64 0}>
@r55C_closure = internal alias i8, bitcast (%r55C_closure_struct* @r55C_closure$def to i8*)
@Main_cosxzuzdscosx_closure$def = internal global %Main_cosxzuzdscosx_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosxzuzdscosx_info$def to i64), i64 0, i64 0, i64 0}>
@Main_cosxzuzdscosx_closure = alias i8, bitcast (%Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i8*)
@Main_sinx2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sinx2_info$def to i8*)
define ghccc void @Main_sinx2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9mN_srt_struct* @_u9mN_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sinx2_info$def to i64)) to i32),i32 0)}>
{
n9mQ:
  %lc9mk = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9mn
c9mn:
  %ln9mR = load i64*, i64** %Sp_Var
  %ln9mS = getelementptr inbounds i64, i64* %ln9mR, i32 -2
  %ln9mT = ptrtoint i64* %ln9mS to i64
  %ln9mU = icmp ult i64 %ln9mT, %SpLim_Arg
  %ln9mV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9mU, i1 0 )
  br i1 %ln9mV, label %c9mo, label %c9mp
c9mp:
  %ln9mW = ptrtoint i64* %Base_Arg to i64
  %ln9mX = inttoptr i64 %ln9mW to i8*
  %ln9mY = load i64, i64* %R1_Var
  %ln9mZ = inttoptr i64 %ln9mY to i8*
  %ln9n0 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln9n1 = call ccc i8* (i8*, i8*) %ln9n0( i8* %ln9mX, i8* %ln9mZ ) nounwind
  %ln9n2 = ptrtoint i8* %ln9n1 to i64
  store i64 %ln9n2, i64* %lc9mk
  %ln9n3 = load i64, i64* %lc9mk
  %ln9n4 = icmp eq i64 %ln9n3, 0
  br i1 %ln9n4, label %c9mm, label %c9ml
c9ml:
  %ln9n6 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9n5 = load i64*, i64** %Sp_Var
  %ln9n7 = getelementptr inbounds i64, i64* %ln9n5, i32 -2
  store i64 %ln9n6, i64* %ln9n7, !tbaa !2
  %ln9n9 = load i64, i64* %lc9mk
  %ln9n8 = load i64*, i64** %Sp_Var
  %ln9na = getelementptr inbounds i64, i64* %ln9n8, i32 -1
  store i64 %ln9n9, i64* %ln9na, !tbaa !2
  %ln9nb = ptrtoint %Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64
  %ln9nc = add i64 %ln9nb, 1
  store i64 %ln9nc, i64* %R3_Var
  %ln9nd = ptrtoint %Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i64
  store i64 %ln9nd, i64* %R2_Var
  %ln9ne = load i64*, i64** %Sp_Var
  %ln9nf = getelementptr inbounds i64, i64* %ln9ne, i32 -2
  %ln9ng = ptrtoint i64* %ln9nf to i64
  %ln9nh = inttoptr i64 %ln9ng to i64*
  store i64* %ln9nh, i64** %Sp_Var
  %ln9ni = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nj = load i64*, i64** %Sp_Var
  %ln9nk = load i64, i64* %R1_Var
  %ln9nl = load i64, i64* %R2_Var
  %ln9nm = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ni( i64* %Base_Arg, i64* %ln9nj, i64* %Hp_Arg, i64 %ln9nk, i64 %ln9nl, i64 %ln9nm, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mm:
  %ln9no = load i64, i64* %R1_Var
  %ln9np = inttoptr i64 %ln9no to i64*
  %ln9nq = load i64, i64* %ln9np, !tbaa !4
  %ln9nr = inttoptr i64 %ln9nq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ns = load i64*, i64** %Sp_Var
  %ln9nt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nr( i64* %Base_Arg, i64* %ln9ns, i64* %Hp_Arg, i64 %ln9nt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mo:
  %ln9nu = load i64, i64* %R1_Var
  store i64 %ln9nu, i64* %R1_Var
  %ln9nv = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9nw = bitcast i64* %ln9nv to i64*
  %ln9nx = load i64, i64* %ln9nw, !tbaa !5
  %ln9ny = inttoptr i64 %ln9nx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nz = load i64*, i64** %Sp_Var
  %ln9nA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ny( i64* %Base_Arg, i64* %ln9nz, i64* %Hp_Arg, i64 %ln9nA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@r55C_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55C_info$def to i8*)
define internal ghccc void @r55C_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9mO_srt_struct* @_u9mO_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55C_info$def to i64)) to i32),i32 0)}>
{
n9nB:
  %lc9mt = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9mw
c9mw:
  %ln9nC = load i64*, i64** %Sp_Var
  %ln9nD = getelementptr inbounds i64, i64* %ln9nC, i32 -2
  %ln9nE = ptrtoint i64* %ln9nD to i64
  %ln9nF = icmp ult i64 %ln9nE, %SpLim_Arg
  %ln9nG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9nF, i1 0 )
  br i1 %ln9nG, label %c9mx, label %c9my
c9my:
  %ln9nH = ptrtoint i64* %Base_Arg to i64
  %ln9nI = inttoptr i64 %ln9nH to i8*
  %ln9nJ = load i64, i64* %R1_Var
  %ln9nK = inttoptr i64 %ln9nJ to i8*
  %ln9nL = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln9nM = call ccc i8* (i8*, i8*) %ln9nL( i8* %ln9nI, i8* %ln9nK ) nounwind
  %ln9nN = ptrtoint i8* %ln9nM to i64
  store i64 %ln9nN, i64* %lc9mt
  %ln9nO = load i64, i64* %lc9mt
  %ln9nP = icmp eq i64 %ln9nO, 0
  br i1 %ln9nP, label %c9mv, label %c9mu
c9mu:
  %ln9nR = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9nQ = load i64*, i64** %Sp_Var
  %ln9nS = getelementptr inbounds i64, i64* %ln9nQ, i32 -2
  store i64 %ln9nR, i64* %ln9nS, !tbaa !2
  %ln9nU = load i64, i64* %lc9mt
  %ln9nT = load i64*, i64** %Sp_Var
  %ln9nV = getelementptr inbounds i64, i64* %ln9nT, i32 -1
  store i64 %ln9nU, i64* %ln9nV, !tbaa !2
  %ln9nW = ptrtoint %Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64
  %ln9nX = add i64 %ln9nW, 1
  store i64 %ln9nX, i64* %R3_Var
  %ln9nY = ptrtoint %Main_sinx1_closure_struct* @Main_sinx1_closure$def to i64
  %ln9nZ = add i64 %ln9nY, 2
  store i64 %ln9nZ, i64* %R2_Var
  %ln9o0 = load i64*, i64** %Sp_Var
  %ln9o1 = getelementptr inbounds i64, i64* %ln9o0, i32 -2
  %ln9o2 = ptrtoint i64* %ln9o1 to i64
  %ln9o3 = inttoptr i64 %ln9o2 to i64*
  store i64* %ln9o3, i64** %Sp_Var
  %ln9o4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9o5 = load i64*, i64** %Sp_Var
  %ln9o6 = load i64, i64* %R1_Var
  %ln9o7 = load i64, i64* %R2_Var
  %ln9o8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9o4( i64* %Base_Arg, i64* %ln9o5, i64* %Hp_Arg, i64 %ln9o6, i64 %ln9o7, i64 %ln9o8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mv:
  %ln9oa = load i64, i64* %R1_Var
  %ln9ob = inttoptr i64 %ln9oa to i64*
  %ln9oc = load i64, i64* %ln9ob, !tbaa !4
  %ln9od = inttoptr i64 %ln9oc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oe = load i64*, i64** %Sp_Var
  %ln9of = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9od( i64* %Base_Arg, i64* %ln9oe, i64* %Hp_Arg, i64 %ln9of, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mx:
  %ln9og = load i64, i64* %R1_Var
  store i64 %ln9og, i64* %R1_Var
  %ln9oh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9oi = bitcast i64* %ln9oh to i64*
  %ln9oj = load i64, i64* %ln9oi, !tbaa !5
  %ln9ok = inttoptr i64 %ln9oj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ol = load i64*, i64** %Sp_Var
  %ln9om = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ok( i64* %Base_Arg, i64* %ln9ol, i64* %Hp_Arg, i64 %ln9om, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_cosxzuzdscosx_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosxzuzdscosx_info$def to i8*)
define ghccc void @Main_cosxzuzdscosx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9mP_srt_struct* @_u9mP_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosxzuzdscosx_info$def to i64)) to i32),i32 0)}>
{
n9on:
  %lc9mC = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9mH
c9mH:
  %ln9oo = load i64*, i64** %Sp_Var
  %ln9op = getelementptr inbounds i64, i64* %ln9oo, i32 -3
  %ln9oq = ptrtoint i64* %ln9op to i64
  %ln9or = icmp ult i64 %ln9oq, %SpLim_Arg
  %ln9os = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9or, i1 0 )
  br i1 %ln9os, label %c9mI, label %c9mJ
c9mJ:
  %ln9ot = ptrtoint i64* %Base_Arg to i64
  %ln9ou = inttoptr i64 %ln9ot to i8*
  %ln9ov = load i64, i64* %R1_Var
  %ln9ow = inttoptr i64 %ln9ov to i8*
  %ln9ox = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln9oy = call ccc i8* (i8*, i8*) %ln9ox( i8* %ln9ou, i8* %ln9ow ) nounwind
  %ln9oz = ptrtoint i8* %ln9oy to i64
  store i64 %ln9oz, i64* %lc9mC
  %ln9oA = load i64, i64* %lc9mC
  %ln9oB = icmp eq i64 %ln9oA, 0
  br i1 %ln9oB, label %c9mE, label %c9mD
c9mD:
  %ln9oD = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9oC = load i64*, i64** %Sp_Var
  %ln9oE = getelementptr inbounds i64, i64* %ln9oC, i32 -2
  store i64 %ln9oD, i64* %ln9oE, !tbaa !2
  %ln9oG = load i64, i64* %lc9mC
  %ln9oF = load i64*, i64** %Sp_Var
  %ln9oH = getelementptr inbounds i64, i64* %ln9oF, i32 -1
  store i64 %ln9oG, i64* %ln9oH, !tbaa !2
  %ln9oJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9mF_info$def to i64
  %ln9oI = load i64*, i64** %Sp_Var
  %ln9oK = getelementptr inbounds i64, i64* %ln9oI, i32 -3
  store i64 %ln9oJ, i64* %ln9oK, !tbaa !2
  %ln9oL = ptrtoint %r55D_closure_struct* @r55D_closure$def to i64
  %ln9oM = add i64 %ln9oL, 2
  store i64 %ln9oM, i64* %R2_Var
  %ln9oN = load i64*, i64** %Sp_Var
  %ln9oO = getelementptr inbounds i64, i64* %ln9oN, i32 -3
  %ln9oP = ptrtoint i64* %ln9oO to i64
  %ln9oQ = inttoptr i64 %ln9oP to i64*
  store i64* %ln9oQ, i64** %Sp_Var
  %ln9oR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oS = load i64*, i64** %Sp_Var
  %ln9oT = load i64, i64* %R1_Var
  %ln9oU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oR( i64* %Base_Arg, i64* %ln9oS, i64* %Hp_Arg, i64 %ln9oT, i64 %ln9oU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mE:
  %ln9oW = load i64, i64* %R1_Var
  %ln9oX = inttoptr i64 %ln9oW to i64*
  %ln9oY = load i64, i64* %ln9oX, !tbaa !4
  %ln9oZ = inttoptr i64 %ln9oY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9p0 = load i64*, i64** %Sp_Var
  %ln9p1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oZ( i64* %Base_Arg, i64* %ln9p0, i64* %Hp_Arg, i64 %ln9p1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9mI:
  %ln9p2 = load i64, i64* %R1_Var
  store i64 %ln9p2, i64* %R1_Var
  %ln9p3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9p4 = bitcast i64* %ln9p3 to i64*
  %ln9p5 = load i64, i64* %ln9p4, !tbaa !5
  %ln9p6 = inttoptr i64 %ln9p5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9p7 = load i64*, i64** %Sp_Var
  %ln9p8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9p6( i64* %Base_Arg, i64* %ln9p7, i64* %Hp_Arg, i64 %ln9p8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9mF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9mF_info$def to i8*)
define internal ghccc void @c9mF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9mF_info$def to i64)) to i32),i32 0)}>
{
n9p9:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9mF
c9mF:
  store i64 %R1_Arg, i64* %R3_Var
  %ln9pa = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %ln9pb = add i64 %ln9pa, 2
  store i64 %ln9pb, i64* %R2_Var
  %ln9pc = load i64*, i64** %Sp_Var
  %ln9pd = getelementptr inbounds i64, i64* %ln9pc, i32 1
  %ln9pe = ptrtoint i64* %ln9pd to i64
  %ln9pf = inttoptr i64 %ln9pe to i64*
  store i64* %ln9pf, i64** %Sp_Var
  %ln9pg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ph = load i64*, i64** %Sp_Var
  %ln9pi = load i64, i64* %R2_Var
  %ln9pj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pg( i64* %Base_Arg, i64* %ln9ph, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9pi, i64 %ln9pj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u9pt_srt_struct = type <{i64, i64, i64, i64, i64}>
%r55Z_closure_struct = type <{i64, i64, i64, i64}>
@_u9pt_srt$def = internal global %_u9pt_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64), i64 ptrtoint (%Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i64), i64 ptrtoint (%Main_sinx1_closure_struct* @Main_sinx1_closure$def to i64), i64 0}>
@_u9pt_srt = internal alias i8, bitcast (%_u9pt_srt_struct* @_u9pt_srt$def to i8*)
@r55Z_closure$def = internal global %r55Z_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Z_info$def to i64), i64 0, i64 0, i64 0}>
@r55Z_closure = internal alias i8, bitcast (%r55Z_closure_struct* @r55Z_closure$def to i8*)
@r55Z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Z_info$def to i8*)
define internal ghccc void @r55Z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9pt_srt_struct* @_u9pt_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55Z_info$def to i64)) to i32),i32 0)}>
{
n9pu:
  %lc9pn = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9pq
c9pq:
  %ln9pv = load i64*, i64** %Sp_Var
  %ln9pw = getelementptr inbounds i64, i64* %ln9pv, i32 -2
  %ln9px = ptrtoint i64* %ln9pw to i64
  %ln9py = icmp ult i64 %ln9px, %SpLim_Arg
  %ln9pz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9py, i1 0 )
  br i1 %ln9pz, label %c9pr, label %c9ps
c9ps:
  %ln9pA = ptrtoint i64* %Base_Arg to i64
  %ln9pB = inttoptr i64 %ln9pA to i8*
  %ln9pC = load i64, i64* %R1_Var
  %ln9pD = inttoptr i64 %ln9pC to i8*
  %ln9pE = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln9pF = call ccc i8* (i8*, i8*) %ln9pE( i8* %ln9pB, i8* %ln9pD ) nounwind
  %ln9pG = ptrtoint i8* %ln9pF to i64
  store i64 %ln9pG, i64* %lc9pn
  %ln9pH = load i64, i64* %lc9pn
  %ln9pI = icmp eq i64 %ln9pH, 0
  br i1 %ln9pI, label %c9pp, label %c9po
c9po:
  %ln9pK = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9pJ = load i64*, i64** %Sp_Var
  %ln9pL = getelementptr inbounds i64, i64* %ln9pJ, i32 -2
  store i64 %ln9pK, i64* %ln9pL, !tbaa !2
  %ln9pN = load i64, i64* %lc9pn
  %ln9pM = load i64*, i64** %Sp_Var
  %ln9pO = getelementptr inbounds i64, i64* %ln9pM, i32 -1
  store i64 %ln9pN, i64* %ln9pO, !tbaa !2
  %ln9pP = ptrtoint %Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i64
  store i64 %ln9pP, i64* %R3_Var
  %ln9pQ = ptrtoint %Main_sinx1_closure_struct* @Main_sinx1_closure$def to i64
  %ln9pR = add i64 %ln9pQ, 2
  store i64 %ln9pR, i64* %R2_Var
  %ln9pS = load i64*, i64** %Sp_Var
  %ln9pT = getelementptr inbounds i64, i64* %ln9pS, i32 -2
  %ln9pU = ptrtoint i64* %ln9pT to i64
  %ln9pV = inttoptr i64 %ln9pU to i64*
  store i64* %ln9pV, i64** %Sp_Var
  %ln9pW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pX = load i64*, i64** %Sp_Var
  %ln9pY = load i64, i64* %R1_Var
  %ln9pZ = load i64, i64* %R2_Var
  %ln9q0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pW( i64* %Base_Arg, i64* %ln9pX, i64* %Hp_Arg, i64 %ln9pY, i64 %ln9pZ, i64 %ln9q0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pp:
  %ln9q2 = load i64, i64* %R1_Var
  %ln9q3 = inttoptr i64 %ln9q2 to i64*
  %ln9q4 = load i64, i64* %ln9q3, !tbaa !4
  %ln9q5 = inttoptr i64 %ln9q4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9q6 = load i64*, i64** %Sp_Var
  %ln9q7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9q5( i64* %Base_Arg, i64* %ln9q6, i64* %Hp_Arg, i64 %ln9q7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pr:
  %ln9q8 = load i64, i64* %R1_Var
  store i64 %ln9q8, i64* %R1_Var
  %ln9q9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9qa = bitcast i64* %ln9q9 to i64*
  %ln9qb = load i64, i64* %ln9qa, !tbaa !5
  %ln9qc = inttoptr i64 %ln9qb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qd = load i64*, i64** %Sp_Var
  %ln9qe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qc( i64* %Base_Arg, i64* %ln9qd, i64* %Hp_Arg, i64 %ln9qe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwintegral_closure_struct = type <{i64}>
@Main_zdwintegral_closure$def = internal global %Main_zdwintegral_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to i64)}>
@Main_zdwintegral_closure = alias i8, bitcast (%Main_zdwintegral_closure_struct* @Main_zdwintegral_closure$def to i8*)
@s5fm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fm_info$def to i8*)
define internal ghccc void @s5fm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9rE:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9qn
c9qn:
  %ln9rF = load i64*, i64** %Sp_Var
  %ln9rG = getelementptr inbounds i64, i64* %ln9rF, i32 -2
  %ln9rH = ptrtoint i64* %ln9rG to i64
  %ln9rI = icmp ult i64 %ln9rH, %SpLim_Arg
  %ln9rJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9rI, i1 0 )
  br i1 %ln9rJ, label %c9qo, label %c9qp
c9qp:
  %ln9rL = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9rK = load i64*, i64** %Sp_Var
  %ln9rM = getelementptr inbounds i64, i64* %ln9rK, i32 -2
  store i64 %ln9rL, i64* %ln9rM, !tbaa !2
  %ln9rO = load i64, i64* %R1_Var
  %ln9rN = load i64*, i64** %Sp_Var
  %ln9rP = getelementptr inbounds i64, i64* %ln9rN, i32 -1
  store i64 %ln9rO, i64* %ln9rP, !tbaa !2
  %ln9rS = load i64, i64* %R1_Var
  %ln9rT = add i64 %ln9rS, 16
  %ln9rU = inttoptr i64 %ln9rT to i64*
  %ln9rV = load i64, i64* %ln9rU, !tbaa !4
  store i64 %ln9rV, i64* %R2_Var
  %ln9rW = load i64*, i64** %Sp_Var
  %ln9rX = getelementptr inbounds i64, i64* %ln9rW, i32 -2
  %ln9rY = ptrtoint i64* %ln9rX to i64
  %ln9rZ = inttoptr i64 %ln9rY to i64*
  store i64* %ln9rZ, i64** %Sp_Var
  %ln9s0 = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9s1 = load i64*, i64** %Sp_Var
  %ln9s2 = load i64, i64* %R1_Var
  %ln9s3 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9s0( i64* %Base_Arg, i64* %ln9s1, i64* %Hp_Arg, i64 %ln9s2, i64 %ln9s3, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9qo:
  %ln9s4 = load i64, i64* %R1_Var
  store i64 %ln9s4, i64* %R1_Var
  %ln9s5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9s6 = bitcast i64* %ln9s5 to i64*
  %ln9s7 = load i64, i64* %ln9s6, !tbaa !5
  %ln9s8 = inttoptr i64 %ln9s7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9s9 = load i64*, i64** %Sp_Var
  %ln9sa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9s8( i64* %Base_Arg, i64* %ln9s9, i64* %Hp_Arg, i64 %ln9sa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fo_info$def to i8*)
define internal ghccc void @s5fo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9sb:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9qy
c9qy:
  %ln9sc = load i64*, i64** %Sp_Var
  %ln9sd = getelementptr inbounds i64, i64* %ln9sc, i32 -4
  %ln9se = ptrtoint i64* %ln9sd to i64
  %ln9sf = icmp ult i64 %ln9se, %SpLim_Arg
  %ln9sg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9sf, i1 0 )
  br i1 %ln9sg, label %c9qz, label %c9qA
c9qA:
  %ln9si = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9sh = load i64*, i64** %Sp_Var
  %ln9sj = getelementptr inbounds i64, i64* %ln9sh, i32 -2
  store i64 %ln9si, i64* %ln9sj, !tbaa !2
  %ln9sl = load i64, i64* %R1_Var
  %ln9sk = load i64*, i64** %Sp_Var
  %ln9sm = getelementptr inbounds i64, i64* %ln9sk, i32 -1
  store i64 %ln9sl, i64* %ln9sm, !tbaa !2
  %ln9sp = load i64, i64* %R1_Var
  %ln9sq = add i64 %ln9sp, 16
  %ln9sr = inttoptr i64 %ln9sq to i64*
  %ln9ss = load i64, i64* %ln9sr, !tbaa !4
  store i64 %ln9ss, i64* %R2_Var
  %ln9su = ptrtoint i8* @stg_ap_p_info to i64
  %ln9st = load i64*, i64** %Sp_Var
  %ln9sv = getelementptr inbounds i64, i64* %ln9st, i32 -4
  store i64 %ln9su, i64* %ln9sv, !tbaa !2
  %ln9sx = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9sy = add i64 %ln9sx, 1
  %ln9sw = load i64*, i64** %Sp_Var
  %ln9sz = getelementptr inbounds i64, i64* %ln9sw, i32 -3
  store i64 %ln9sy, i64* %ln9sz, !tbaa !2
  %ln9sA = load i64*, i64** %Sp_Var
  %ln9sB = getelementptr inbounds i64, i64* %ln9sA, i32 -4
  %ln9sC = ptrtoint i64* %ln9sB to i64
  %ln9sD = inttoptr i64 %ln9sC to i64*
  store i64* %ln9sD, i64** %Sp_Var
  %ln9sE = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sF = load i64*, i64** %Sp_Var
  %ln9sG = load i64, i64* %R1_Var
  %ln9sH = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sE( i64* %Base_Arg, i64* %ln9sF, i64* %Hp_Arg, i64 %ln9sG, i64 %ln9sH, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9qz:
  %ln9sI = load i64, i64* %R1_Var
  store i64 %ln9sI, i64* %R1_Var
  %ln9sJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9sK = bitcast i64* %ln9sJ to i64*
  %ln9sL = load i64, i64* %ln9sK, !tbaa !5
  %ln9sM = inttoptr i64 %ln9sL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sN = load i64*, i64** %Sp_Var
  %ln9sO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sM( i64* %Base_Arg, i64* %ln9sN, i64* %Hp_Arg, i64 %ln9sO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fw_info$def to i8*)
define internal ghccc void @s5fw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9sP:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9qU
c9qU:
  %ln9sQ = load i64*, i64** %Sp_Var
  %ln9sR = getelementptr inbounds i64, i64* %ln9sQ, i32 -5
  %ln9sS = ptrtoint i64* %ln9sR to i64
  %ln9sT = icmp ult i64 %ln9sS, %SpLim_Arg
  %ln9sU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9sT, i1 0 )
  br i1 %ln9sU, label %c9qV, label %c9qW
c9qW:
  %ln9sW = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9sV = load i64*, i64** %Sp_Var
  %ln9sX = getelementptr inbounds i64, i64* %ln9sV, i32 -2
  store i64 %ln9sW, i64* %ln9sX, !tbaa !2
  %ln9sZ = load i64, i64* %R1_Var
  %ln9sY = load i64*, i64** %Sp_Var
  %ln9t0 = getelementptr inbounds i64, i64* %ln9sY, i32 -1
  store i64 %ln9sZ, i64* %ln9t0, !tbaa !2
  %ln9t3 = load i64, i64* %R1_Var
  %ln9t4 = add i64 %ln9t3, 16
  %ln9t5 = inttoptr i64 %ln9t4 to i64*
  %ln9t6 = load i64, i64* %ln9t5, !tbaa !4
  store i64 %ln9t6, i64* %R2_Var
  %ln9t8 = ptrtoint i8* @stg_ap_pp_info to i64
  %ln9t7 = load i64*, i64** %Sp_Var
  %ln9t9 = getelementptr inbounds i64, i64* %ln9t7, i32 -5
  store i64 %ln9t8, i64* %ln9t9, !tbaa !2
  %ln9td = load i64, i64* %R1_Var
  %ln9te = add i64 %ln9td, 24
  %ln9tf = inttoptr i64 %ln9te to i64*
  %ln9tg = load i64, i64* %ln9tf, !tbaa !4
  %ln9ta = load i64*, i64** %Sp_Var
  %ln9th = getelementptr inbounds i64, i64* %ln9ta, i32 -4
  store i64 %ln9tg, i64* %ln9th, !tbaa !2
  %ln9tl = load i64, i64* %R1_Var
  %ln9tm = add i64 %ln9tl, 32
  %ln9tn = inttoptr i64 %ln9tm to i64*
  %ln9to = load i64, i64* %ln9tn, !tbaa !4
  %ln9ti = load i64*, i64** %Sp_Var
  %ln9tp = getelementptr inbounds i64, i64* %ln9ti, i32 -3
  store i64 %ln9to, i64* %ln9tp, !tbaa !2
  %ln9tq = load i64*, i64** %Sp_Var
  %ln9tr = getelementptr inbounds i64, i64* %ln9tq, i32 -5
  %ln9ts = ptrtoint i64* %ln9tr to i64
  %ln9tt = inttoptr i64 %ln9ts to i64*
  store i64* %ln9tt, i64** %Sp_Var
  %ln9tu = bitcast i8* @base_GHCziNum_zp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tv = load i64*, i64** %Sp_Var
  %ln9tw = load i64, i64* %R1_Var
  %ln9tx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tu( i64* %Base_Arg, i64* %ln9tv, i64* %Hp_Arg, i64 %ln9tw, i64 %ln9tx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9qV:
  %ln9ty = load i64, i64* %R1_Var
  store i64 %ln9ty, i64* %R1_Var
  %ln9tz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9tA = bitcast i64* %ln9tz to i64*
  %ln9tB = load i64, i64* %ln9tA, !tbaa !5
  %ln9tC = inttoptr i64 %ln9tB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tD = load i64*, i64** %Sp_Var
  %ln9tE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tC( i64* %Base_Arg, i64* %ln9tD, i64* %Hp_Arg, i64 %ln9tE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fx_info$def to i8*)
define internal ghccc void @s5fx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
n9tF:
  %ls5fx = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5fm = alloca i64, i32 1
  %ls5fr = alloca i64, i32 1
  %ls5fo = alloca i64, i32 1
  %ls5fu = alloca i64, i32 1
  %ls5fp = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9qX
c9qX:
  %ln9tG = load i64, i64* %R1_Var
  store i64 %ln9tG, i64* %ls5fx
  %ln9tH = load i64*, i64** %Sp_Var
  %ln9tI = getelementptr inbounds i64, i64* %ln9tH, i32 -2
  %ln9tJ = ptrtoint i64* %ln9tI to i64
  %ln9tK = icmp ult i64 %ln9tJ, %SpLim_Arg
  %ln9tL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9tK, i1 0 )
  br i1 %ln9tL, label %c9qY, label %c9qZ
c9qZ:
  %ln9tM = load i64*, i64** %Hp_Var
  %ln9tN = getelementptr inbounds i64, i64* %ln9tM, i32 5
  %ln9tO = ptrtoint i64* %ln9tN to i64
  %ln9tP = inttoptr i64 %ln9tO to i64*
  store i64* %ln9tP, i64** %Hp_Var
  %ln9tQ = load i64*, i64** %Hp_Var
  %ln9tR = ptrtoint i64* %ln9tQ to i64
  %ln9tS = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9tT = bitcast i64* %ln9tS to i64*
  %ln9tU = load i64, i64* %ln9tT, !tbaa !5
  %ln9tV = icmp ugt i64 %ln9tR, %ln9tU
  %ln9tW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9tV, i1 0 )
  br i1 %ln9tW, label %c9r1, label %c9r0
c9r0:
  %ln9tY = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9tX = load i64*, i64** %Sp_Var
  %ln9tZ = getelementptr inbounds i64, i64* %ln9tX, i32 -2
  store i64 %ln9tY, i64* %ln9tZ, !tbaa !2
  %ln9u1 = load i64, i64* %ls5fx
  %ln9u0 = load i64*, i64** %Sp_Var
  %ln9u2 = getelementptr inbounds i64, i64* %ln9u0, i32 -1
  store i64 %ln9u1, i64* %ln9u2, !tbaa !2
  %ln9u3 = load i64, i64* %ls5fx
  %ln9u4 = add i64 %ln9u3, 16
  %ln9u5 = inttoptr i64 %ln9u4 to i64*
  %ln9u6 = load i64, i64* %ln9u5, !tbaa !1
  store i64 %ln9u6, i64* %ls5fm
  %ln9u7 = load i64, i64* %ls5fx
  %ln9u8 = add i64 %ln9u7, 24
  %ln9u9 = inttoptr i64 %ln9u8 to i64*
  %ln9ua = load i64, i64* %ln9u9, !tbaa !1
  store i64 %ln9ua, i64* %ls5fr
  %ln9ub = load i64, i64* %ls5fx
  %ln9uc = add i64 %ln9ub, 32
  %ln9ud = inttoptr i64 %ln9uc to i64*
  %ln9ue = load i64, i64* %ln9ud, !tbaa !1
  store i64 %ln9ue, i64* %ls5fo
  %ln9uf = load i64, i64* %ls5fx
  %ln9ug = add i64 %ln9uf, 40
  %ln9uh = inttoptr i64 %ln9ug to i64*
  %ln9ui = load i64, i64* %ln9uh, !tbaa !1
  store i64 %ln9ui, i64* %ls5fu
  %ln9uj = load i64, i64* %ls5fx
  %ln9uk = add i64 %ln9uj, 48
  %ln9ul = inttoptr i64 %ln9uk to i64*
  %ln9um = load i64, i64* %ln9ul, !tbaa !1
  store i64 %ln9um, i64* %ls5fp
  %ln9uo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fw_info$def to i64
  %ln9un = load i64*, i64** %Hp_Var
  %ln9up = getelementptr inbounds i64, i64* %ln9un, i32 -4
  store i64 %ln9uo, i64* %ln9up, !tbaa !3
  %ln9ur = load i64, i64* %ls5fm
  %ln9uq = load i64*, i64** %Hp_Var
  %ln9us = getelementptr inbounds i64, i64* %ln9uq, i32 -2
  store i64 %ln9ur, i64* %ln9us, !tbaa !3
  %ln9uu = load i64, i64* %ls5fr
  %ln9ut = load i64*, i64** %Hp_Var
  %ln9uv = getelementptr inbounds i64, i64* %ln9ut, i32 -1
  store i64 %ln9uu, i64* %ln9uv, !tbaa !3
  %ln9ux = load i64, i64* %ls5fo
  %ln9uw = load i64*, i64** %Hp_Var
  %ln9uy = getelementptr inbounds i64, i64* %ln9uw, i32 0
  store i64 %ln9ux, i64* %ln9uy, !tbaa !3
  %ln9uz = load i64*, i64** %Hp_Var
  %ln9uA = getelementptr inbounds i64, i64* %ln9uz, i32 -4
  %ln9uB = ptrtoint i64* %ln9uA to i64
  store i64 %ln9uB, i64* %R3_Var
  %ln9uC = load i64, i64* %ls5fu
  store i64 %ln9uC, i64* %R2_Var
  %ln9uD = load i64, i64* %ls5fp
  store i64 %ln9uD, i64* %R1_Var
  %ln9uE = load i64*, i64** %Sp_Var
  %ln9uF = getelementptr inbounds i64, i64* %ln9uE, i32 -2
  %ln9uG = ptrtoint i64* %ln9uF to i64
  %ln9uH = inttoptr i64 %ln9uG to i64*
  store i64* %ln9uH, i64** %Sp_Var
  %ln9uI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uJ = load i64*, i64** %Sp_Var
  %ln9uK = load i64*, i64** %Hp_Var
  %ln9uL = load i64, i64* %R1_Var
  %ln9uM = load i64, i64* %R2_Var
  %ln9uN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uI( i64* %Base_Arg, i64* %ln9uJ, i64* %ln9uK, i64 %ln9uL, i64 %ln9uM, i64 %ln9uN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9r1:
  %ln9uO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln9uO, !tbaa !5
  br label %c9qY
c9qY:
  %ln9uP = load i64, i64* %ls5fx
  store i64 %ln9uP, i64* %R1_Var
  %ln9uQ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9uR = bitcast i64* %ln9uQ to i64*
  %ln9uS = load i64, i64* %ln9uR, !tbaa !5
  %ln9uT = inttoptr i64 %ln9uS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uU = load i64*, i64** %Sp_Var
  %ln9uV = load i64*, i64** %Hp_Var
  %ln9uW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uT( i64* %Base_Arg, i64* %ln9uU, i64* %ln9uV, i64 %ln9uW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fv_info$def to i8*)
define internal ghccc void @s5fv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9uX:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9r6
c9r6:
  %ln9uY = load i64*, i64** %Sp_Var
  %ln9uZ = getelementptr inbounds i64, i64* %ln9uY, i32 -5
  %ln9v0 = ptrtoint i64* %ln9uZ to i64
  %ln9v1 = icmp ult i64 %ln9v0, %SpLim_Arg
  %ln9v2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9v1, i1 0 )
  br i1 %ln9v2, label %c9r7, label %c9r8
c9r8:
  %ln9v4 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9v3 = load i64*, i64** %Sp_Var
  %ln9v5 = getelementptr inbounds i64, i64* %ln9v3, i32 -2
  store i64 %ln9v4, i64* %ln9v5, !tbaa !2
  %ln9v7 = load i64, i64* %R1_Var
  %ln9v6 = load i64*, i64** %Sp_Var
  %ln9v8 = getelementptr inbounds i64, i64* %ln9v6, i32 -1
  store i64 %ln9v7, i64* %ln9v8, !tbaa !2
  %ln9vb = load i64, i64* %R1_Var
  %ln9vc = add i64 %ln9vb, 16
  %ln9vd = inttoptr i64 %ln9vc to i64*
  %ln9ve = load i64, i64* %ln9vd, !tbaa !4
  store i64 %ln9ve, i64* %R2_Var
  %ln9vg = ptrtoint i8* @stg_ap_pp_info to i64
  %ln9vf = load i64*, i64** %Sp_Var
  %ln9vh = getelementptr inbounds i64, i64* %ln9vf, i32 -5
  store i64 %ln9vg, i64* %ln9vh, !tbaa !2
  %ln9vl = load i64, i64* %R1_Var
  %ln9vm = add i64 %ln9vl, 24
  %ln9vn = inttoptr i64 %ln9vm to i64*
  %ln9vo = load i64, i64* %ln9vn, !tbaa !4
  %ln9vi = load i64*, i64** %Sp_Var
  %ln9vp = getelementptr inbounds i64, i64* %ln9vi, i32 -4
  store i64 %ln9vo, i64* %ln9vp, !tbaa !2
  %ln9vt = load i64, i64* %R1_Var
  %ln9vu = add i64 %ln9vt, 32
  %ln9vv = inttoptr i64 %ln9vu to i64*
  %ln9vw = load i64, i64* %ln9vv, !tbaa !4
  %ln9vq = load i64*, i64** %Sp_Var
  %ln9vx = getelementptr inbounds i64, i64* %ln9vq, i32 -3
  store i64 %ln9vw, i64* %ln9vx, !tbaa !2
  %ln9vy = load i64*, i64** %Sp_Var
  %ln9vz = getelementptr inbounds i64, i64* %ln9vy, i32 -5
  %ln9vA = ptrtoint i64* %ln9vz to i64
  %ln9vB = inttoptr i64 %ln9vA to i64*
  store i64* %ln9vB, i64** %Sp_Var
  %ln9vC = bitcast i8* @base_GHCziReal_zs_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9vD = load i64*, i64** %Sp_Var
  %ln9vE = load i64, i64* %R1_Var
  %ln9vF = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9vC( i64* %Base_Arg, i64* %ln9vD, i64* %Hp_Arg, i64 %ln9vE, i64 %ln9vF, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9r7:
  %ln9vG = load i64, i64* %R1_Var
  store i64 %ln9vG, i64* %R1_Var
  %ln9vH = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9vI = bitcast i64* %ln9vH to i64*
  %ln9vJ = load i64, i64* %ln9vI, !tbaa !5
  %ln9vK = inttoptr i64 %ln9vJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9vL = load i64*, i64** %Sp_Var
  %ln9vM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9vK( i64* %Base_Arg, i64* %ln9vL, i64* %Hp_Arg, i64 %ln9vM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fp_info$def to i8*)
define internal ghccc void @s5fp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 3, i32 8, i32 0}>
{
n9vN:
  %ls5fp = alloca i64, i32 1
  %ls5fm = alloca i64, i32 1
  %ls5fo = alloca i64, i32 1
  %ls5fk = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9rd
c9rd:
  %ln9vO = load i64*, i64** %Sp_Var
  %ln9vP = getelementptr inbounds i64, i64* %ln9vO, i32 -6
  %ln9vQ = ptrtoint i64* %ln9vP to i64
  %ln9vR = icmp ult i64 %ln9vQ, %SpLim_Arg
  %ln9vS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9vR, i1 0 )
  br i1 %ln9vS, label %c9re, label %c9rf
c9rf:
  %ln9vU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9qG_info$def to i64
  %ln9vT = load i64*, i64** %Sp_Var
  %ln9vV = getelementptr inbounds i64, i64* %ln9vT, i32 -6
  store i64 %ln9vU, i64* %ln9vV, !tbaa !2
  %ln9vW = load i64, i64* %R1_Var
  store i64 %ln9vW, i64* %ls5fp
  %ln9vZ = load i64, i64* %R1_Var
  %ln9w0 = add i64 %ln9vZ, 6
  %ln9w1 = inttoptr i64 %ln9w0 to i64*
  %ln9w2 = load i64, i64* %ln9w1, !tbaa !4
  store i64 %ln9w2, i64* %ls5fm
  %ln9w5 = load i64, i64* %R1_Var
  %ln9w6 = add i64 %ln9w5, 14
  %ln9w7 = inttoptr i64 %ln9w6 to i64*
  %ln9w8 = load i64, i64* %ln9w7, !tbaa !4
  store i64 %ln9w8, i64* %ls5fo
  %ln9wb = load i64, i64* %R1_Var
  %ln9wc = add i64 %ln9wb, 22
  %ln9wd = inttoptr i64 %ln9wc to i64*
  %ln9we = load i64, i64* %ln9wd, !tbaa !4
  store i64 %ln9we, i64* %ls5fk
  %ln9wf = load i64, i64* %R2_Var
  store i64 %ln9wf, i64* %R1_Var
  %ln9wh = load i64, i64* %ls5fk
  %ln9wg = load i64*, i64** %Sp_Var
  %ln9wi = getelementptr inbounds i64, i64* %ln9wg, i32 -5
  store i64 %ln9wh, i64* %ln9wi, !tbaa !2
  %ln9wk = load i64, i64* %ls5fm
  %ln9wj = load i64*, i64** %Sp_Var
  %ln9wl = getelementptr inbounds i64, i64* %ln9wj, i32 -4
  store i64 %ln9wk, i64* %ln9wl, !tbaa !2
  %ln9wn = load i64, i64* %ls5fo
  %ln9wm = load i64*, i64** %Sp_Var
  %ln9wo = getelementptr inbounds i64, i64* %ln9wm, i32 -3
  store i64 %ln9wn, i64* %ln9wo, !tbaa !2
  %ln9wq = load i64, i64* %ls5fp
  %ln9wp = load i64*, i64** %Sp_Var
  %ln9wr = getelementptr inbounds i64, i64* %ln9wp, i32 -2
  store i64 %ln9wq, i64* %ln9wr, !tbaa !2
  %ln9wt = load i64, i64* %R3_Var
  %ln9ws = load i64*, i64** %Sp_Var
  %ln9wu = getelementptr inbounds i64, i64* %ln9ws, i32 -1
  store i64 %ln9wt, i64* %ln9wu, !tbaa !2
  %ln9wv = load i64*, i64** %Sp_Var
  %ln9ww = getelementptr inbounds i64, i64* %ln9wv, i32 -6
  %ln9wx = ptrtoint i64* %ln9ww to i64
  %ln9wy = inttoptr i64 %ln9wx to i64*
  store i64* %ln9wy, i64** %Sp_Var
  %ln9wz = load i64, i64* %R1_Var
  %ln9wA = and i64 %ln9wz, 7
  %ln9wB = icmp ne i64 %ln9wA, 0
  br i1 %ln9wB, label %u9rm, label %c9qH
c9qH:
  %ln9wD = load i64, i64* %R1_Var
  %ln9wE = inttoptr i64 %ln9wD to i64*
  %ln9wF = load i64, i64* %ln9wE, !tbaa !4
  %ln9wG = inttoptr i64 %ln9wF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wH = load i64*, i64** %Sp_Var
  %ln9wI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wG( i64* %Base_Arg, i64* %ln9wH, i64* %Hp_Arg, i64 %ln9wI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9rm:
  %ln9wJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9qG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wK = load i64*, i64** %Sp_Var
  %ln9wL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wJ( i64* %Base_Arg, i64* %ln9wK, i64* %Hp_Arg, i64 %ln9wL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9re:
  %ln9wM = load i64, i64* %R3_Var
  store i64 %ln9wM, i64* %R3_Var
  %ln9wN = load i64, i64* %R2_Var
  store i64 %ln9wN, i64* %R2_Var
  %ln9wO = load i64, i64* %R1_Var
  store i64 %ln9wO, i64* %R1_Var
  %ln9wP = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9wQ = bitcast i64* %ln9wP to i64*
  %ln9wR = load i64, i64* %ln9wQ, !tbaa !5
  %ln9wS = inttoptr i64 %ln9wR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wT = load i64*, i64** %Sp_Var
  %ln9wU = load i64, i64* %R1_Var
  %ln9wV = load i64, i64* %R2_Var
  %ln9wW = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wS( i64* %Base_Arg, i64* %ln9wT, i64* %Hp_Arg, i64 %ln9wU, i64 %ln9wV, i64 %ln9wW, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9qG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9qG_info$def to i8*)
define internal ghccc void @c9qG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
n9wX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5ft = alloca i64, i32 1
  %ls5fu = alloca i64, i32 1
  %ls5fr = alloca i64, i32 1
  br label %c9qG
c9qG:
  %ln9wY = load i64, i64* %R1_Var
  %ln9wZ = and i64 %ln9wY, 7
  switch i64 %ln9wZ, label %c9ra [i64 1, label %c9ra
i64 2, label %c9rb]
c9ra:
  %ln9x0 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9x1 = add i64 %ln9x0, 1
  store i64 %ln9x1, i64* %R1_Var
  %ln9x2 = load i64*, i64** %Sp_Var
  %ln9x3 = getelementptr inbounds i64, i64* %ln9x2, i32 6
  %ln9x4 = ptrtoint i64* %ln9x3 to i64
  %ln9x5 = inttoptr i64 %ln9x4 to i64*
  store i64* %ln9x5, i64** %Sp_Var
  %ln9x6 = load i64*, i64** %Sp_Var
  %ln9x7 = getelementptr inbounds i64, i64* %ln9x6, i32 0
  %ln9x8 = bitcast i64* %ln9x7 to i64*
  %ln9x9 = load i64, i64* %ln9x8, !tbaa !2
  %ln9xa = inttoptr i64 %ln9x9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xb = load i64*, i64** %Sp_Var
  %ln9xc = load i64*, i64** %Hp_Var
  %ln9xd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xa( i64* %Base_Arg, i64* %ln9xb, i64* %ln9xc, i64 %ln9xd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9rb:
  %ln9xe = load i64*, i64** %Hp_Var
  %ln9xf = getelementptr inbounds i64, i64* %ln9xe, i32 15
  %ln9xg = ptrtoint i64* %ln9xf to i64
  %ln9xh = inttoptr i64 %ln9xg to i64*
  store i64* %ln9xh, i64** %Hp_Var
  %ln9xi = load i64*, i64** %Hp_Var
  %ln9xj = ptrtoint i64* %ln9xi to i64
  %ln9xk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9xl = bitcast i64* %ln9xk to i64*
  %ln9xm = load i64, i64* %ln9xl, !tbaa !5
  %ln9xn = icmp ugt i64 %ln9xj, %ln9xm
  %ln9xo = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9xn, i1 0 )
  br i1 %ln9xo, label %c9rl, label %c9rk
c9rk:
  %ln9xr = load i64, i64* %R1_Var
  %ln9xs = add i64 %ln9xr, 6
  %ln9xt = inttoptr i64 %ln9xs to i64*
  %ln9xu = load i64, i64* %ln9xt, !tbaa !4
  store i64 %ln9xu, i64* %ls5ft
  %ln9xx = load i64, i64* %R1_Var
  %ln9xy = add i64 %ln9xx, 14
  %ln9xz = inttoptr i64 %ln9xy to i64*
  %ln9xA = load i64, i64* %ln9xz, !tbaa !4
  store i64 %ln9xA, i64* %ls5fu
  %ln9xC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fx_info$def to i64
  %ln9xB = load i64*, i64** %Hp_Var
  %ln9xD = getelementptr inbounds i64, i64* %ln9xB, i32 -14
  store i64 %ln9xC, i64* %ln9xD, !tbaa !3
  %ln9xF = load i64*, i64** %Sp_Var
  %ln9xG = getelementptr inbounds i64, i64* %ln9xF, i32 2
  %ln9xH = bitcast i64* %ln9xG to i64*
  %ln9xI = load i64, i64* %ln9xH, !tbaa !2
  %ln9xE = load i64*, i64** %Hp_Var
  %ln9xJ = getelementptr inbounds i64, i64* %ln9xE, i32 -12
  store i64 %ln9xI, i64* %ln9xJ, !tbaa !3
  %ln9xK = load i64*, i64** %Sp_Var
  %ln9xL = getelementptr inbounds i64, i64* %ln9xK, i32 5
  %ln9xM = bitcast i64* %ln9xL to i64*
  %ln9xN = load i64, i64* %ln9xM, !tbaa !2
  store i64 %ln9xN, i64* %ls5fr
  %ln9xP = load i64, i64* %ls5fr
  %ln9xO = load i64*, i64** %Hp_Var
  %ln9xQ = getelementptr inbounds i64, i64* %ln9xO, i32 -11
  store i64 %ln9xP, i64* %ln9xQ, !tbaa !3
  %ln9xS = load i64*, i64** %Sp_Var
  %ln9xT = getelementptr inbounds i64, i64* %ln9xS, i32 3
  %ln9xU = bitcast i64* %ln9xT to i64*
  %ln9xV = load i64, i64* %ln9xU, !tbaa !2
  %ln9xR = load i64*, i64** %Hp_Var
  %ln9xW = getelementptr inbounds i64, i64* %ln9xR, i32 -10
  store i64 %ln9xV, i64* %ln9xW, !tbaa !3
  %ln9xY = load i64, i64* %ls5fu
  %ln9xX = load i64*, i64** %Hp_Var
  %ln9xZ = getelementptr inbounds i64, i64* %ln9xX, i32 -9
  store i64 %ln9xY, i64* %ln9xZ, !tbaa !3
  %ln9y1 = load i64*, i64** %Sp_Var
  %ln9y2 = getelementptr inbounds i64, i64* %ln9y1, i32 4
  %ln9y3 = bitcast i64* %ln9y2 to i64*
  %ln9y4 = load i64, i64* %ln9y3, !tbaa !2
  %ln9y0 = load i64*, i64** %Hp_Var
  %ln9y5 = getelementptr inbounds i64, i64* %ln9y0, i32 -8
  store i64 %ln9y4, i64* %ln9y5, !tbaa !3
  %ln9y7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fv_info$def to i64
  %ln9y6 = load i64*, i64** %Hp_Var
  %ln9y8 = getelementptr inbounds i64, i64* %ln9y6, i32 -7
  store i64 %ln9y7, i64* %ln9y8, !tbaa !3
  %ln9ya = load i64*, i64** %Sp_Var
  %ln9yb = getelementptr inbounds i64, i64* %ln9ya, i32 1
  %ln9yc = bitcast i64* %ln9yb to i64*
  %ln9yd = load i64, i64* %ln9yc, !tbaa !2
  %ln9y9 = load i64*, i64** %Hp_Var
  %ln9ye = getelementptr inbounds i64, i64* %ln9y9, i32 -5
  store i64 %ln9yd, i64* %ln9ye, !tbaa !3
  %ln9yg = load i64, i64* %ls5ft
  %ln9yf = load i64*, i64** %Hp_Var
  %ln9yh = getelementptr inbounds i64, i64* %ln9yf, i32 -4
  store i64 %ln9yg, i64* %ln9yh, !tbaa !3
  %ln9yj = load i64, i64* %ls5fr
  %ln9yi = load i64*, i64** %Hp_Var
  %ln9yk = getelementptr inbounds i64, i64* %ln9yi, i32 -3
  store i64 %ln9yj, i64* %ln9yk, !tbaa !3
  %ln9ym = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9yl = load i64*, i64** %Hp_Var
  %ln9yn = getelementptr inbounds i64, i64* %ln9yl, i32 -2
  store i64 %ln9ym, i64* %ln9yn, !tbaa !3
  %ln9yp = load i64*, i64** %Hp_Var
  %ln9yq = getelementptr inbounds i64, i64* %ln9yp, i32 -7
  %ln9yr = ptrtoint i64* %ln9yq to i64
  %ln9yo = load i64*, i64** %Hp_Var
  %ln9ys = getelementptr inbounds i64, i64* %ln9yo, i32 -1
  store i64 %ln9yr, i64* %ln9ys, !tbaa !3
  %ln9yu = load i64*, i64** %Hp_Var
  %ln9yv = getelementptr inbounds i64, i64* %ln9yu, i32 -14
  %ln9yw = ptrtoint i64* %ln9yv to i64
  %ln9yt = load i64*, i64** %Hp_Var
  %ln9yx = getelementptr inbounds i64, i64* %ln9yt, i32 0
  store i64 %ln9yw, i64* %ln9yx, !tbaa !3
  %ln9yz = load i64*, i64** %Hp_Var
  %ln9yA = ptrtoint i64* %ln9yz to i64
  %ln9yB = add i64 %ln9yA, -14
  store i64 %ln9yB, i64* %R1_Var
  %ln9yC = load i64*, i64** %Sp_Var
  %ln9yD = getelementptr inbounds i64, i64* %ln9yC, i32 6
  %ln9yE = ptrtoint i64* %ln9yD to i64
  %ln9yF = inttoptr i64 %ln9yE to i64*
  store i64* %ln9yF, i64** %Sp_Var
  %ln9yG = load i64*, i64** %Sp_Var
  %ln9yH = getelementptr inbounds i64, i64* %ln9yG, i32 0
  %ln9yI = bitcast i64* %ln9yH to i64*
  %ln9yJ = load i64, i64* %ln9yI, !tbaa !2
  %ln9yK = inttoptr i64 %ln9yJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yL = load i64*, i64** %Sp_Var
  %ln9yM = load i64*, i64** %Hp_Var
  %ln9yN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yK( i64* %Base_Arg, i64* %ln9yL, i64* %ln9yM, i64 %ln9yN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9rl:
  %ln9yO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %ln9yO, !tbaa !5
  %ln9yP = load i64, i64* %R1_Var
  store i64 %ln9yP, i64* %R1_Var
  %ln9yQ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yR = load i64*, i64** %Sp_Var
  %ln9yS = load i64*, i64** %Hp_Var
  %ln9yT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yQ( i64* %Base_Arg, i64* %ln9yR, i64* %ln9yS, i64 %ln9yT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fy_info$def to i8*)
define internal ghccc void @s5fy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9yU:
  %ls5fy = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5fm = alloca i64, i32 1
  %ls5fk = alloca i64, i32 1
  %ls5fl = alloca i64, i32 1
  %lc9qu = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9rn
c9rn:
  %ln9yV = load i64, i64* %R1_Var
  store i64 %ln9yV, i64* %ls5fy
  %ln9yW = load i64*, i64** %Sp_Var
  %ln9yX = getelementptr inbounds i64, i64* %ln9yW, i32 -2
  %ln9yY = ptrtoint i64* %ln9yX to i64
  %ln9yZ = icmp ult i64 %ln9yY, %SpLim_Arg
  %ln9z0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9yZ, i1 0 )
  br i1 %ln9z0, label %c9ro, label %c9rp
c9rp:
  %ln9z1 = load i64*, i64** %Hp_Var
  %ln9z2 = getelementptr inbounds i64, i64* %ln9z1, i32 7
  %ln9z3 = ptrtoint i64* %ln9z2 to i64
  %ln9z4 = inttoptr i64 %ln9z3 to i64*
  store i64* %ln9z4, i64** %Hp_Var
  %ln9z5 = load i64*, i64** %Hp_Var
  %ln9z6 = ptrtoint i64* %ln9z5 to i64
  %ln9z7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9z8 = bitcast i64* %ln9z7 to i64*
  %ln9z9 = load i64, i64* %ln9z8, !tbaa !5
  %ln9za = icmp ugt i64 %ln9z6, %ln9z9
  %ln9zb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9za, i1 0 )
  br i1 %ln9zb, label %c9rr, label %c9rq
c9rq:
  %ln9zd = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9zc = load i64*, i64** %Sp_Var
  %ln9ze = getelementptr inbounds i64, i64* %ln9zc, i32 -2
  store i64 %ln9zd, i64* %ln9ze, !tbaa !2
  %ln9zg = load i64, i64* %ls5fy
  %ln9zf = load i64*, i64** %Sp_Var
  %ln9zh = getelementptr inbounds i64, i64* %ln9zf, i32 -1
  store i64 %ln9zg, i64* %ln9zh, !tbaa !2
  %ln9zi = load i64, i64* %ls5fy
  %ln9zj = add i64 %ln9zi, 16
  %ln9zk = inttoptr i64 %ln9zj to i64*
  %ln9zl = load i64, i64* %ln9zk, !tbaa !1
  store i64 %ln9zl, i64* %ls5fm
  %ln9zm = load i64, i64* %ls5fy
  %ln9zn = add i64 %ln9zm, 24
  %ln9zo = inttoptr i64 %ln9zn to i64*
  %ln9zp = load i64, i64* %ln9zo, !tbaa !1
  store i64 %ln9zp, i64* %ls5fk
  %ln9zq = load i64, i64* %ls5fy
  %ln9zr = add i64 %ln9zq, 32
  %ln9zs = inttoptr i64 %ln9zr to i64*
  %ln9zt = load i64, i64* %ln9zs, !tbaa !1
  store i64 %ln9zt, i64* %ls5fl
  %ln9zv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fo_info$def to i64
  %ln9zu = load i64*, i64** %Hp_Var
  %ln9zw = getelementptr inbounds i64, i64* %ln9zu, i32 -6
  store i64 %ln9zv, i64* %ln9zw, !tbaa !3
  %ln9zy = load i64, i64* %ls5fm
  %ln9zx = load i64*, i64** %Hp_Var
  %ln9zz = getelementptr inbounds i64, i64* %ln9zx, i32 -4
  store i64 %ln9zy, i64* %ln9zz, !tbaa !3
  %ln9zB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fp_info$def to i64
  %ln9zA = load i64*, i64** %Hp_Var
  %ln9zC = getelementptr inbounds i64, i64* %ln9zA, i32 -3
  store i64 %ln9zB, i64* %ln9zC, !tbaa !3
  %ln9zE = load i64, i64* %ls5fm
  %ln9zD = load i64*, i64** %Hp_Var
  %ln9zF = getelementptr inbounds i64, i64* %ln9zD, i32 -2
  store i64 %ln9zE, i64* %ln9zF, !tbaa !3
  %ln9zG = load i64*, i64** %Hp_Var
  %ln9zH = getelementptr inbounds i64, i64* %ln9zG, i32 -6
  %ln9zI = ptrtoint i64* %ln9zH to i64
  store i64 %ln9zI, i64* %lc9qu
  %ln9zK = load i64, i64* %lc9qu
  %ln9zJ = load i64*, i64** %Hp_Var
  %ln9zL = getelementptr inbounds i64, i64* %ln9zJ, i32 -1
  store i64 %ln9zK, i64* %ln9zL, !tbaa !3
  %ln9zN = load i64, i64* %ls5fk
  %ln9zM = load i64*, i64** %Hp_Var
  %ln9zO = getelementptr inbounds i64, i64* %ln9zM, i32 0
  store i64 %ln9zN, i64* %ln9zO, !tbaa !3
  %ln9zP = load i64, i64* %lc9qu
  store i64 %ln9zP, i64* %R3_Var
  %ln9zQ = load i64, i64* %ls5fl
  store i64 %ln9zQ, i64* %R2_Var
  %ln9zS = load i64*, i64** %Hp_Var
  %ln9zT = ptrtoint i64* %ln9zS to i64
  %ln9zU = add i64 %ln9zT, -22
  store i64 %ln9zU, i64* %R1_Var
  %ln9zV = load i64*, i64** %Sp_Var
  %ln9zW = getelementptr inbounds i64, i64* %ln9zV, i32 -2
  %ln9zX = ptrtoint i64* %ln9zW to i64
  %ln9zY = inttoptr i64 %ln9zX to i64*
  store i64* %ln9zY, i64** %Sp_Var
  %ln9zZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9A0 = load i64*, i64** %Sp_Var
  %ln9A1 = load i64*, i64** %Hp_Var
  %ln9A2 = load i64, i64* %R1_Var
  %ln9A3 = load i64, i64* %R2_Var
  %ln9A4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zZ( i64* %Base_Arg, i64* %ln9A0, i64* %ln9A1, i64 %ln9A2, i64 %ln9A3, i64 %ln9A4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9rr:
  %ln9A5 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln9A5, !tbaa !5
  br label %c9ro
c9ro:
  %ln9A6 = load i64, i64* %ls5fy
  store i64 %ln9A6, i64* %R1_Var
  %ln9A7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9A8 = bitcast i64* %ln9A7 to i64*
  %ln9A9 = load i64, i64* %ln9A8, !tbaa !5
  %ln9Aa = inttoptr i64 %ln9A9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ab = load i64*, i64** %Sp_Var
  %ln9Ac = load i64*, i64** %Hp_Var
  %ln9Ad = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Aa( i64* %Base_Arg, i64* %ln9Ab, i64* %ln9Ac, i64 %ln9Ad, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fn_info$def to i8*)
define internal ghccc void @s5fn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Ae:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9rw
c9rw:
  %ln9Af = load i64*, i64** %Sp_Var
  %ln9Ag = getelementptr inbounds i64, i64* %ln9Af, i32 -4
  %ln9Ah = ptrtoint i64* %ln9Ag to i64
  %ln9Ai = icmp ult i64 %ln9Ah, %SpLim_Arg
  %ln9Aj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Ai, i1 0 )
  br i1 %ln9Aj, label %c9rx, label %c9ry
c9ry:
  %ln9Al = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9Ak = load i64*, i64** %Sp_Var
  %ln9Am = getelementptr inbounds i64, i64* %ln9Ak, i32 -2
  store i64 %ln9Al, i64* %ln9Am, !tbaa !2
  %ln9Ao = load i64, i64* %R1_Var
  %ln9An = load i64*, i64** %Sp_Var
  %ln9Ap = getelementptr inbounds i64, i64* %ln9An, i32 -1
  store i64 %ln9Ao, i64* %ln9Ap, !tbaa !2
  %ln9As = load i64, i64* %R1_Var
  %ln9At = add i64 %ln9As, 16
  %ln9Au = inttoptr i64 %ln9At to i64*
  %ln9Av = load i64, i64* %ln9Au, !tbaa !4
  store i64 %ln9Av, i64* %R2_Var
  %ln9Ax = ptrtoint i8* @stg_ap_p_info to i64
  %ln9Aw = load i64*, i64** %Sp_Var
  %ln9Ay = getelementptr inbounds i64, i64* %ln9Aw, i32 -4
  store i64 %ln9Ax, i64* %ln9Ay, !tbaa !2
  %ln9AA = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln9AB = add i64 %ln9AA, 1
  %ln9Az = load i64*, i64** %Sp_Var
  %ln9AC = getelementptr inbounds i64, i64* %ln9Az, i32 -3
  store i64 %ln9AB, i64* %ln9AC, !tbaa !2
  %ln9AD = load i64*, i64** %Sp_Var
  %ln9AE = getelementptr inbounds i64, i64* %ln9AD, i32 -4
  %ln9AF = ptrtoint i64* %ln9AE to i64
  %ln9AG = inttoptr i64 %ln9AF to i64*
  store i64* %ln9AG, i64** %Sp_Var
  %ln9AH = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9AI = load i64*, i64** %Sp_Var
  %ln9AJ = load i64, i64* %R1_Var
  %ln9AK = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9AH( i64* %Base_Arg, i64* %ln9AI, i64* %Hp_Arg, i64 %ln9AJ, i64 %ln9AK, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9rx:
  %ln9AL = load i64, i64* %R1_Var
  store i64 %ln9AL, i64* %R1_Var
  %ln9AM = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9AN = bitcast i64* %ln9AM to i64*
  %ln9AO = load i64, i64* %ln9AN, !tbaa !5
  %ln9AP = inttoptr i64 %ln9AO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9AQ = load i64*, i64** %Sp_Var
  %ln9AR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9AP( i64* %Base_Arg, i64* %ln9AQ, i64* %Hp_Arg, i64 %ln9AR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwintegral_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to i8*)
define ghccc void @Main_zdwintegral_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n9AS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc9qj = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  br label %c9rz
c9rz:
  %ln9AT = load i64*, i64** %Hp_Var
  %ln9AU = getelementptr inbounds i64, i64* %ln9AT, i32 11
  %ln9AV = ptrtoint i64* %ln9AU to i64
  %ln9AW = inttoptr i64 %ln9AV to i64*
  store i64* %ln9AW, i64** %Hp_Var
  %ln9AX = load i64*, i64** %Hp_Var
  %ln9AY = ptrtoint i64* %ln9AX to i64
  %ln9AZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9B0 = bitcast i64* %ln9AZ to i64*
  %ln9B1 = load i64, i64* %ln9B0, !tbaa !5
  %ln9B2 = icmp ugt i64 %ln9AY, %ln9B1
  %ln9B3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9B2, i1 0 )
  br i1 %ln9B3, label %c9rD, label %c9rC
c9rC:
  %ln9B5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fm_info$def to i64
  %ln9B4 = load i64*, i64** %Hp_Var
  %ln9B6 = getelementptr inbounds i64, i64* %ln9B4, i32 -10
  store i64 %ln9B5, i64* %ln9B6, !tbaa !3
  %ln9B8 = load i64, i64* %R2_Var
  %ln9B7 = load i64*, i64** %Hp_Var
  %ln9B9 = getelementptr inbounds i64, i64* %ln9B7, i32 -8
  store i64 %ln9B8, i64* %ln9B9, !tbaa !3
  %ln9Bb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fy_info$def to i64
  %ln9Ba = load i64*, i64** %Hp_Var
  %ln9Bc = getelementptr inbounds i64, i64* %ln9Ba, i32 -7
  store i64 %ln9Bb, i64* %ln9Bc, !tbaa !3
  %ln9Bd = load i64*, i64** %Hp_Var
  %ln9Be = getelementptr inbounds i64, i64* %ln9Bd, i32 -10
  %ln9Bf = ptrtoint i64* %ln9Be to i64
  store i64 %ln9Bf, i64* %lc9qj
  %ln9Bh = load i64, i64* %lc9qj
  %ln9Bg = load i64*, i64** %Hp_Var
  %ln9Bi = getelementptr inbounds i64, i64* %ln9Bg, i32 -5
  store i64 %ln9Bh, i64* %ln9Bi, !tbaa !3
  %ln9Bk = load i64, i64* %R2_Var
  %ln9Bj = load i64*, i64** %Hp_Var
  %ln9Bl = getelementptr inbounds i64, i64* %ln9Bj, i32 -4
  store i64 %ln9Bk, i64* %ln9Bl, !tbaa !3
  %ln9Bn = load i64, i64* %R3_Var
  %ln9Bm = load i64*, i64** %Hp_Var
  %ln9Bo = getelementptr inbounds i64, i64* %ln9Bm, i32 -3
  store i64 %ln9Bn, i64* %ln9Bo, !tbaa !3
  %ln9Bq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fn_info$def to i64
  %ln9Bp = load i64*, i64** %Hp_Var
  %ln9Br = getelementptr inbounds i64, i64* %ln9Bp, i32 -2
  store i64 %ln9Bq, i64* %ln9Br, !tbaa !3
  %ln9Bt = load i64, i64* %lc9qj
  %ln9Bs = load i64*, i64** %Hp_Var
  %ln9Bu = getelementptr inbounds i64, i64* %ln9Bs, i32 0
  store i64 %ln9Bt, i64* %ln9Bu, !tbaa !3
  %ln9Bv = load i64*, i64** %Hp_Var
  %ln9Bw = getelementptr inbounds i64, i64* %ln9Bv, i32 -7
  %ln9Bx = ptrtoint i64* %ln9Bw to i64
  store i64 %ln9Bx, i64* %R2_Var
  %ln9By = load i64*, i64** %Hp_Var
  %ln9Bz = getelementptr inbounds i64, i64* %ln9By, i32 -2
  %ln9BA = ptrtoint i64* %ln9Bz to i64
  store i64 %ln9BA, i64* %R1_Var
  %ln9BB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln9BC = bitcast i64* %ln9BB to i64*
  %ln9BD = load i64, i64* %ln9BC, !tbaa !2
  %ln9BE = inttoptr i64 %ln9BD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BF = load i64*, i64** %Hp_Var
  %ln9BG = load i64, i64* %R1_Var
  %ln9BH = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BE( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9BF, i64 %ln9BG, i64 %ln9BH, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9rD:
  %ln9BI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln9BI, !tbaa !5
  %ln9BJ = load i64, i64* %R3_Var
  store i64 %ln9BJ, i64* %R3_Var
  %ln9BK = load i64, i64* %R2_Var
  store i64 %ln9BK, i64* %R2_Var
  %ln9BL = ptrtoint %Main_zdwintegral_closure_struct* @Main_zdwintegral_closure$def to i64
  store i64 %ln9BL, i64* %R1_Var
  %ln9BM = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9BN = bitcast i64* %ln9BM to i64*
  %ln9BO = load i64, i64* %ln9BN, !tbaa !5
  %ln9BP = inttoptr i64 %ln9BO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BQ = load i64*, i64** %Hp_Var
  %ln9BR = load i64, i64* %R1_Var
  %ln9BS = load i64, i64* %R2_Var
  %ln9BT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BP( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9BQ, i64 %ln9BR, i64 %ln9BS, i64 %ln9BT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_integral_closure_struct = type <{i64}>
@Main_integral_closure$def = internal global %Main_integral_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integral_info$def to i64)}>
@Main_integral_closure = alias i8, bitcast (%Main_integral_closure_struct* @Main_integral_closure$def to i8*)
@Main_integral_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integral_info$def to i8*)
define ghccc void @Main_integral_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n9C7:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9C1
c9C1:
  %ln9C8 = load i64*, i64** %Sp_Var
  %ln9C9 = getelementptr inbounds i64, i64* %ln9C8, i32 -1
  %ln9Ca = ptrtoint i64* %ln9C9 to i64
  %ln9Cb = icmp ult i64 %ln9Ca, %SpLim_Arg
  %ln9Cc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Cb, i1 0 )
  br i1 %ln9Cc, label %c9C2, label %c9C3
c9C3:
  %ln9Ce = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9BY_info$def to i64
  %ln9Cd = load i64*, i64** %Sp_Var
  %ln9Cf = getelementptr inbounds i64, i64* %ln9Cd, i32 -1
  store i64 %ln9Ce, i64* %ln9Cf, !tbaa !2
  %ln9Cg = load i64, i64* %R3_Var
  store i64 %ln9Cg, i64* %R3_Var
  %ln9Ch = load i64, i64* %R2_Var
  store i64 %ln9Ch, i64* %R2_Var
  %ln9Ci = load i64*, i64** %Sp_Var
  %ln9Cj = getelementptr inbounds i64, i64* %ln9Ci, i32 -1
  %ln9Ck = ptrtoint i64* %ln9Cj to i64
  %ln9Cl = inttoptr i64 %ln9Ck to i64*
  store i64* %ln9Cl, i64** %Sp_Var
  %ln9Cm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Cn = load i64*, i64** %Sp_Var
  %ln9Co = load i64, i64* %R1_Var
  %ln9Cp = load i64, i64* %R2_Var
  %ln9Cq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Cm( i64* %Base_Arg, i64* %ln9Cn, i64* %Hp_Arg, i64 %ln9Co, i64 %ln9Cp, i64 %ln9Cq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9C2:
  %ln9Cr = load i64, i64* %R3_Var
  store i64 %ln9Cr, i64* %R3_Var
  %ln9Cs = load i64, i64* %R2_Var
  store i64 %ln9Cs, i64* %R2_Var
  %ln9Ct = ptrtoint %Main_integral_closure_struct* @Main_integral_closure$def to i64
  store i64 %ln9Ct, i64* %R1_Var
  %ln9Cu = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9Cv = bitcast i64* %ln9Cu to i64*
  %ln9Cw = load i64, i64* %ln9Cv, !tbaa !5
  %ln9Cx = inttoptr i64 %ln9Cw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Cy = load i64*, i64** %Sp_Var
  %ln9Cz = load i64, i64* %R1_Var
  %ln9CA = load i64, i64* %R2_Var
  %ln9CB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Cx( i64* %Base_Arg, i64* %ln9Cy, i64* %Hp_Arg, i64 %ln9Cz, i64 %ln9CA, i64 %ln9CB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9BY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9BY_info$def to i8*)
define internal ghccc void @c9BY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9CC:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9BY
c9BY:
  %ln9CD = load i64*, i64** %Hp_Var
  %ln9CE = getelementptr inbounds i64, i64* %ln9CD, i32 3
  %ln9CF = ptrtoint i64* %ln9CE to i64
  %ln9CG = inttoptr i64 %ln9CF to i64*
  store i64* %ln9CG, i64** %Hp_Var
  %ln9CH = load i64*, i64** %Hp_Var
  %ln9CI = ptrtoint i64* %ln9CH to i64
  %ln9CJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9CK = bitcast i64* %ln9CJ to i64*
  %ln9CL = load i64, i64* %ln9CK, !tbaa !5
  %ln9CM = icmp ugt i64 %ln9CI, %ln9CL
  %ln9CN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9CM, i1 0 )
  br i1 %ln9CN, label %c9C6, label %c9C5
c9C5:
  %ln9CP = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9CO = load i64*, i64** %Hp_Var
  %ln9CQ = getelementptr inbounds i64, i64* %ln9CO, i32 -2
  store i64 %ln9CP, i64* %ln9CQ, !tbaa !3
  %ln9CS = load i64, i64* %R1_Var
  %ln9CR = load i64*, i64** %Hp_Var
  %ln9CT = getelementptr inbounds i64, i64* %ln9CR, i32 -1
  store i64 %ln9CS, i64* %ln9CT, !tbaa !3
  %ln9CV = load i64, i64* %R2_Var
  %ln9CU = load i64*, i64** %Hp_Var
  %ln9CW = getelementptr inbounds i64, i64* %ln9CU, i32 0
  store i64 %ln9CV, i64* %ln9CW, !tbaa !3
  %ln9CY = load i64*, i64** %Hp_Var
  %ln9CZ = ptrtoint i64* %ln9CY to i64
  %ln9D0 = add i64 %ln9CZ, -14
  store i64 %ln9D0, i64* %R1_Var
  %ln9D1 = load i64*, i64** %Sp_Var
  %ln9D2 = getelementptr inbounds i64, i64* %ln9D1, i32 1
  %ln9D3 = ptrtoint i64* %ln9D2 to i64
  %ln9D4 = inttoptr i64 %ln9D3 to i64*
  store i64* %ln9D4, i64** %Sp_Var
  %ln9D5 = load i64*, i64** %Sp_Var
  %ln9D6 = getelementptr inbounds i64, i64* %ln9D5, i32 0
  %ln9D7 = bitcast i64* %ln9D6 to i64*
  %ln9D8 = load i64, i64* %ln9D7, !tbaa !2
  %ln9D9 = inttoptr i64 %ln9D8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Da = load i64*, i64** %Sp_Var
  %ln9Db = load i64*, i64** %Hp_Var
  %ln9Dc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9D9( i64* %Base_Arg, i64* %ln9Da, i64* %ln9Db, i64 %ln9Dc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9C6:
  %ln9Dd = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9Dd, !tbaa !5
  %ln9De = load i64, i64* %R2_Var
  store i64 %ln9De, i64* %R2_Var
  %ln9Df = load i64, i64* %R1_Var
  store i64 %ln9Df, i64* %R1_Var
  %ln9Dg = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Dh = load i64*, i64** %Sp_Var
  %ln9Di = load i64*, i64** %Hp_Var
  %ln9Dj = load i64, i64* %R1_Var
  %ln9Dk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Dg( i64* %Base_Arg, i64* %ln9Dh, i64* %ln9Di, i64 %ln9Dj, i64 %ln9Dk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_expx_closure_struct = type <{i64}>
@Main_expx_closure$def = internal global %Main_expx_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_expx_info$def to i64)}>
@Main_expx_closure = alias i8, bitcast (%Main_expx_closure_struct* @Main_expx_closure$def to i8*)
@s5fF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fF_info$def to i8*)
define internal ghccc void @s5fF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9DW:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Dt
c9Dt:
  %ln9DX = add i64 %R1_Arg, 16
  %ln9DY = inttoptr i64 %ln9DX to i64*
  %ln9DZ = load i64, i64* %ln9DY, !tbaa !4
  store i64 %ln9DZ, i64* %R2_Var
  %ln9E0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_expx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9E1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9E0( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9E1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fJ_info$def to i8*)
define internal ghccc void @s5fJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9E2:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9DC
c9DC:
  %ln9E3 = load i64*, i64** %Sp_Var
  %ln9E4 = getelementptr inbounds i64, i64* %ln9E3, i32 -2
  %ln9E5 = ptrtoint i64* %ln9E4 to i64
  %ln9E6 = icmp ult i64 %ln9E5, %SpLim_Arg
  %ln9E7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9E6, i1 0 )
  br i1 %ln9E7, label %c9DD, label %c9DE
c9DE:
  %ln9E9 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9E8 = load i64*, i64** %Sp_Var
  %ln9Ea = getelementptr inbounds i64, i64* %ln9E8, i32 -2
  store i64 %ln9E9, i64* %ln9Ea, !tbaa !2
  %ln9Ec = load i64, i64* %R1_Var
  %ln9Eb = load i64*, i64** %Sp_Var
  %ln9Ed = getelementptr inbounds i64, i64* %ln9Eb, i32 -1
  store i64 %ln9Ec, i64* %ln9Ed, !tbaa !2
  %ln9Eg = load i64, i64* %R1_Var
  %ln9Eh = add i64 %ln9Eg, 16
  %ln9Ei = inttoptr i64 %ln9Eh to i64*
  %ln9Ej = load i64, i64* %ln9Ei, !tbaa !4
  store i64 %ln9Ej, i64* %R2_Var
  %ln9Ek = load i64*, i64** %Sp_Var
  %ln9El = getelementptr inbounds i64, i64* %ln9Ek, i32 -2
  %ln9Em = ptrtoint i64* %ln9El to i64
  %ln9En = inttoptr i64 %ln9Em to i64*
  store i64* %ln9En, i64** %Sp_Var
  %ln9Eo = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ep = load i64*, i64** %Sp_Var
  %ln9Eq = load i64, i64* %R1_Var
  %ln9Er = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Eo( i64* %Base_Arg, i64* %ln9Ep, i64* %Hp_Arg, i64 %ln9Eq, i64 %ln9Er, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9DD:
  %ln9Es = load i64, i64* %R1_Var
  store i64 %ln9Es, i64* %R1_Var
  %ln9Et = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Eu = bitcast i64* %ln9Et to i64*
  %ln9Ev = load i64, i64* %ln9Eu, !tbaa !5
  %ln9Ew = inttoptr i64 %ln9Ev to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ex = load i64*, i64** %Sp_Var
  %ln9Ey = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ew( i64* %Base_Arg, i64* %ln9Ex, i64* %Hp_Arg, i64 %ln9Ey, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fK_info$def to i8*)
define internal ghccc void @s5fK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Ez:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9DK
c9DK:
  %ln9EA = load i64*, i64** %Sp_Var
  %ln9EB = getelementptr inbounds i64, i64* %ln9EA, i32 -4
  %ln9EC = ptrtoint i64* %ln9EB to i64
  %ln9ED = icmp ult i64 %ln9EC, %SpLim_Arg
  %ln9EE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ED, i1 0 )
  br i1 %ln9EE, label %c9DL, label %c9DM
c9DM:
  %ln9EG = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9EF = load i64*, i64** %Sp_Var
  %ln9EH = getelementptr inbounds i64, i64* %ln9EF, i32 -2
  store i64 %ln9EG, i64* %ln9EH, !tbaa !2
  %ln9EJ = load i64, i64* %R1_Var
  %ln9EI = load i64*, i64** %Sp_Var
  %ln9EK = getelementptr inbounds i64, i64* %ln9EI, i32 -1
  store i64 %ln9EJ, i64* %ln9EK, !tbaa !2
  %ln9EN = load i64, i64* %R1_Var
  %ln9EO = add i64 %ln9EN, 16
  %ln9EP = inttoptr i64 %ln9EO to i64*
  %ln9EQ = load i64, i64* %ln9EP, !tbaa !4
  store i64 %ln9EQ, i64* %R2_Var
  %ln9ES = ptrtoint i8* @stg_ap_p_info to i64
  %ln9ER = load i64*, i64** %Sp_Var
  %ln9ET = getelementptr inbounds i64, i64* %ln9ER, i32 -4
  store i64 %ln9ES, i64* %ln9ET, !tbaa !2
  %ln9EV = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9EW = add i64 %ln9EV, 1
  %ln9EU = load i64*, i64** %Sp_Var
  %ln9EX = getelementptr inbounds i64, i64* %ln9EU, i32 -3
  store i64 %ln9EW, i64* %ln9EX, !tbaa !2
  %ln9EY = load i64*, i64** %Sp_Var
  %ln9EZ = getelementptr inbounds i64, i64* %ln9EY, i32 -4
  %ln9F0 = ptrtoint i64* %ln9EZ to i64
  %ln9F1 = inttoptr i64 %ln9F0 to i64*
  store i64* %ln9F1, i64** %Sp_Var
  %ln9F2 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9F3 = load i64*, i64** %Sp_Var
  %ln9F4 = load i64, i64* %R1_Var
  %ln9F5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9F2( i64* %Base_Arg, i64* %ln9F3, i64* %Hp_Arg, i64 %ln9F4, i64 %ln9F5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9DL:
  %ln9F6 = load i64, i64* %R1_Var
  store i64 %ln9F6, i64* %R1_Var
  %ln9F7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9F8 = bitcast i64* %ln9F7 to i64*
  %ln9F9 = load i64, i64* %ln9F8, !tbaa !5
  %ln9Fa = inttoptr i64 %ln9F9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Fb = load i64*, i64** %Sp_Var
  %ln9Fc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Fa( i64* %Base_Arg, i64* %ln9Fb, i64* %Hp_Arg, i64 %ln9Fc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_expx_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_expx_info$def to i8*)
define ghccc void @Main_expx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n9Fd:
  %ls5fE = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9DO
c9DO:
  %ln9Fe = load i64, i64* %R2_Var
  store i64 %ln9Fe, i64* %ls5fE
  %ln9Ff = load i64*, i64** %Sp_Var
  %ln9Fg = getelementptr inbounds i64, i64* %ln9Ff, i32 -2
  %ln9Fh = ptrtoint i64* %ln9Fg to i64
  %ln9Fi = icmp ult i64 %ln9Fh, %SpLim_Arg
  %ln9Fj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Fi, i1 0 )
  br i1 %ln9Fj, label %c9DP, label %c9DQ
c9DQ:
  %ln9Fk = load i64*, i64** %Hp_Var
  %ln9Fl = getelementptr inbounds i64, i64* %ln9Fk, i32 3
  %ln9Fm = ptrtoint i64* %ln9Fl to i64
  %ln9Fn = inttoptr i64 %ln9Fm to i64*
  store i64* %ln9Fn, i64** %Hp_Var
  %ln9Fo = load i64*, i64** %Hp_Var
  %ln9Fp = ptrtoint i64* %ln9Fo to i64
  %ln9Fq = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Fr = bitcast i64* %ln9Fq to i64*
  %ln9Fs = load i64, i64* %ln9Fr, !tbaa !5
  %ln9Ft = icmp ugt i64 %ln9Fp, %ln9Fs
  %ln9Fu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Ft, i1 0 )
  br i1 %ln9Fu, label %c9DS, label %c9DR
c9DR:
  %ln9Fw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fF_info$def to i64
  %ln9Fv = load i64*, i64** %Hp_Var
  %ln9Fx = getelementptr inbounds i64, i64* %ln9Fv, i32 -2
  store i64 %ln9Fw, i64* %ln9Fx, !tbaa !3
  %ln9Fz = load i64, i64* %ls5fE
  %ln9Fy = load i64*, i64** %Hp_Var
  %ln9FA = getelementptr inbounds i64, i64* %ln9Fy, i32 0
  store i64 %ln9Fz, i64* %ln9FA, !tbaa !3
  %ln9FC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Dw_info$def to i64
  %ln9FB = load i64*, i64** %Sp_Var
  %ln9FD = getelementptr inbounds i64, i64* %ln9FB, i32 -2
  store i64 %ln9FC, i64* %ln9FD, !tbaa !2
  %ln9FE = load i64*, i64** %Hp_Var
  %ln9FF = getelementptr inbounds i64, i64* %ln9FE, i32 -2
  %ln9FG = ptrtoint i64* %ln9FF to i64
  store i64 %ln9FG, i64* %R3_Var
  %ln9FH = load i64, i64* %ls5fE
  store i64 %ln9FH, i64* %R2_Var
  %ln9FJ = load i64, i64* %ls5fE
  %ln9FI = load i64*, i64** %Sp_Var
  %ln9FK = getelementptr inbounds i64, i64* %ln9FI, i32 -1
  store i64 %ln9FJ, i64* %ln9FK, !tbaa !2
  %ln9FL = load i64*, i64** %Sp_Var
  %ln9FM = getelementptr inbounds i64, i64* %ln9FL, i32 -2
  %ln9FN = ptrtoint i64* %ln9FM to i64
  %ln9FO = inttoptr i64 %ln9FN to i64*
  store i64* %ln9FO, i64** %Sp_Var
  %ln9FP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FQ = load i64*, i64** %Sp_Var
  %ln9FR = load i64*, i64** %Hp_Var
  %ln9FS = load i64, i64* %R1_Var
  %ln9FT = load i64, i64* %R2_Var
  %ln9FU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FP( i64* %Base_Arg, i64* %ln9FQ, i64* %ln9FR, i64 %ln9FS, i64 %ln9FT, i64 %ln9FU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9DS:
  %ln9FV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9FV, !tbaa !5
  br label %c9DP
c9DP:
  %ln9FW = load i64, i64* %ls5fE
  store i64 %ln9FW, i64* %R2_Var
  %ln9FX = ptrtoint %Main_expx_closure_struct* @Main_expx_closure$def to i64
  store i64 %ln9FX, i64* %R1_Var
  %ln9FY = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9FZ = bitcast i64* %ln9FY to i64*
  %ln9G0 = load i64, i64* %ln9FZ, !tbaa !5
  %ln9G1 = inttoptr i64 %ln9G0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9G2 = load i64*, i64** %Sp_Var
  %ln9G3 = load i64*, i64** %Hp_Var
  %ln9G4 = load i64, i64* %R1_Var
  %ln9G5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9G1( i64* %Base_Arg, i64* %ln9G2, i64* %ln9G3, i64 %ln9G4, i64 %ln9G5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Dw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Dw_info$def to i8*)
define internal ghccc void @c9Dw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9G6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc9Dy = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9Dw
c9Dw:
  %ln9G7 = load i64*, i64** %Hp_Var
  %ln9G8 = getelementptr inbounds i64, i64* %ln9G7, i32 12
  %ln9G9 = ptrtoint i64* %ln9G8 to i64
  %ln9Ga = inttoptr i64 %ln9G9 to i64*
  store i64* %ln9Ga, i64** %Hp_Var
  %ln9Gb = load i64*, i64** %Hp_Var
  %ln9Gc = ptrtoint i64* %ln9Gb to i64
  %ln9Gd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Ge = bitcast i64* %ln9Gd to i64*
  %ln9Gf = load i64, i64* %ln9Ge, !tbaa !5
  %ln9Gg = icmp ugt i64 %ln9Gc, %ln9Gf
  %ln9Gh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Gg, i1 0 )
  br i1 %ln9Gh, label %c9DV, label %c9DU
c9DU:
  %ln9Gj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fJ_info$def to i64
  %ln9Gi = load i64*, i64** %Hp_Var
  %ln9Gk = getelementptr inbounds i64, i64* %ln9Gi, i32 -11
  store i64 %ln9Gj, i64* %ln9Gk, !tbaa !3
  %ln9Gm = load i64*, i64** %Sp_Var
  %ln9Gn = getelementptr inbounds i64, i64* %ln9Gm, i32 1
  %ln9Go = bitcast i64* %ln9Gn to i64*
  %ln9Gp = load i64, i64* %ln9Go, !tbaa !2
  %ln9Gl = load i64*, i64** %Hp_Var
  %ln9Gq = getelementptr inbounds i64, i64* %ln9Gl, i32 -9
  store i64 %ln9Gp, i64* %ln9Gq, !tbaa !3
  %ln9Gs = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9Gr = load i64*, i64** %Hp_Var
  %ln9Gt = getelementptr inbounds i64, i64* %ln9Gr, i32 -8
  store i64 %ln9Gs, i64* %ln9Gt, !tbaa !3
  %ln9Gv = load i64, i64* %R1_Var
  %ln9Gu = load i64*, i64** %Hp_Var
  %ln9Gw = getelementptr inbounds i64, i64* %ln9Gu, i32 -7
  store i64 %ln9Gv, i64* %ln9Gw, !tbaa !3
  %ln9Gy = load i64, i64* %R2_Var
  %ln9Gx = load i64*, i64** %Hp_Var
  %ln9Gz = getelementptr inbounds i64, i64* %ln9Gx, i32 -6
  store i64 %ln9Gy, i64* %ln9Gz, !tbaa !3
  %ln9GB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fK_info$def to i64
  %ln9GA = load i64*, i64** %Hp_Var
  %ln9GC = getelementptr inbounds i64, i64* %ln9GA, i32 -5
  store i64 %ln9GB, i64* %ln9GC, !tbaa !3
  %ln9GD = load i64*, i64** %Hp_Var
  %ln9GE = getelementptr inbounds i64, i64* %ln9GD, i32 -11
  %ln9GF = ptrtoint i64* %ln9GE to i64
  store i64 %ln9GF, i64* %lc9Dy
  %ln9GH = load i64, i64* %lc9Dy
  %ln9GG = load i64*, i64** %Hp_Var
  %ln9GI = getelementptr inbounds i64, i64* %ln9GG, i32 -3
  store i64 %ln9GH, i64* %ln9GI, !tbaa !3
  %ln9GK = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9GJ = load i64*, i64** %Hp_Var
  %ln9GL = getelementptr inbounds i64, i64* %ln9GJ, i32 -2
  store i64 %ln9GK, i64* %ln9GL, !tbaa !3
  %ln9GN = load i64*, i64** %Hp_Var
  %ln9GO = getelementptr inbounds i64, i64* %ln9GN, i32 -5
  %ln9GP = ptrtoint i64* %ln9GO to i64
  %ln9GM = load i64*, i64** %Hp_Var
  %ln9GQ = getelementptr inbounds i64, i64* %ln9GM, i32 -1
  store i64 %ln9GP, i64* %ln9GQ, !tbaa !3
  %ln9GS = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9GT = add i64 %ln9GS, 1
  %ln9GR = load i64*, i64** %Hp_Var
  %ln9GU = getelementptr inbounds i64, i64* %ln9GR, i32 0
  store i64 %ln9GT, i64* %ln9GU, !tbaa !3
  %ln9GW = load i64*, i64** %Hp_Var
  %ln9GX = ptrtoint i64* %ln9GW to i64
  %ln9GY = add i64 %ln9GX, -62
  store i64 %ln9GY, i64* %R4_Var
  %ln9H0 = load i64*, i64** %Hp_Var
  %ln9H1 = ptrtoint i64* %ln9H0 to i64
  %ln9H2 = add i64 %ln9H1, -14
  store i64 %ln9H2, i64* %R3_Var
  %ln9H3 = load i64, i64* %lc9Dy
  store i64 %ln9H3, i64* %R2_Var
  %ln9H4 = load i64*, i64** %Sp_Var
  %ln9H5 = getelementptr inbounds i64, i64* %ln9H4, i32 2
  %ln9H6 = ptrtoint i64* %ln9H5 to i64
  %ln9H7 = inttoptr i64 %ln9H6 to i64*
  store i64* %ln9H7, i64** %Sp_Var
  %ln9H8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9H9 = load i64*, i64** %Sp_Var
  %ln9Ha = load i64*, i64** %Hp_Var
  %ln9Hb = load i64, i64* %R1_Var
  %ln9Hc = load i64, i64* %R2_Var
  %ln9Hd = load i64, i64* %R3_Var
  %ln9He = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9H8( i64* %Base_Arg, i64* %ln9H9, i64* %ln9Ha, i64 %ln9Hb, i64 %ln9Hc, i64 %ln9Hd, i64 %ln9He, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9DV:
  %ln9Hf = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln9Hf, !tbaa !5
  %ln9Hg = load i64, i64* %R2_Var
  store i64 %ln9Hg, i64* %R2_Var
  %ln9Hh = load i64, i64* %R1_Var
  store i64 %ln9Hh, i64* %R1_Var
  %ln9Hi = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Hj = load i64*, i64** %Sp_Var
  %ln9Hk = load i64*, i64** %Hp_Var
  %ln9Hl = load i64, i64* %R1_Var
  %ln9Hm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hi( i64* %Base_Arg, i64* %ln9Hj, i64* %ln9Hk, i64 %ln9Hl, i64 %ln9Hm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_cosx_closure_struct = type <{i64}>
@Main_cosx_closure$def = internal global %Main_cosx_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosx_info$def to i64)}>
@Main_cosx_closure = alias i8, bitcast (%Main_cosx_closure_struct* @Main_cosx_closure$def to i8*)
@s5fP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fP_info$def to i8*)
define internal ghccc void @s5fP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Ik:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Hz
c9Hz:
  %ln9Il = add i64 %R1_Arg, 16
  %ln9Im = inttoptr i64 %ln9Il to i64*
  %ln9In = load i64, i64* %ln9Im, !tbaa !4
  store i64 %ln9In, i64* %R2_Var
  %ln9Io = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ip = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Io( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Ip, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fT_info$def to i8*)
define internal ghccc void @s5fT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Iq:
  %ls5fT = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5fO = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9HF
c9HF:
  %ln9Ir = load i64, i64* %R1_Var
  store i64 %ln9Ir, i64* %ls5fT
  %ln9Is = load i64*, i64** %Sp_Var
  %ln9It = getelementptr inbounds i64, i64* %ln9Is, i32 -1
  %ln9Iu = ptrtoint i64* %ln9It to i64
  %ln9Iv = icmp ult i64 %ln9Iu, %SpLim_Arg
  %ln9Iw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Iv, i1 0 )
  br i1 %ln9Iw, label %c9HG, label %c9HH
c9HH:
  %ln9Ix = load i64*, i64** %Hp_Var
  %ln9Iy = getelementptr inbounds i64, i64* %ln9Ix, i32 3
  %ln9Iz = ptrtoint i64* %ln9Iy to i64
  %ln9IA = inttoptr i64 %ln9Iz to i64*
  store i64* %ln9IA, i64** %Hp_Var
  %ln9IB = load i64*, i64** %Hp_Var
  %ln9IC = ptrtoint i64* %ln9IB to i64
  %ln9ID = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9IE = bitcast i64* %ln9ID to i64*
  %ln9IF = load i64, i64* %ln9IE, !tbaa !5
  %ln9IG = icmp ugt i64 %ln9IC, %ln9IF
  %ln9IH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9IG, i1 0 )
  br i1 %ln9IH, label %c9HJ, label %c9HI
c9HI:
  %ln9II = load i64, i64* %ls5fT
  %ln9IJ = add i64 %ln9II, 16
  %ln9IK = inttoptr i64 %ln9IJ to i64*
  %ln9IL = load i64, i64* %ln9IK, !tbaa !1
  store i64 %ln9IL, i64* %ls5fO
  %ln9IN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fP_info$def to i64
  %ln9IM = load i64*, i64** %Hp_Var
  %ln9IO = getelementptr inbounds i64, i64* %ln9IM, i32 -2
  store i64 %ln9IN, i64* %ln9IO, !tbaa !3
  %ln9IQ = load i64, i64* %ls5fO
  %ln9IP = load i64*, i64** %Hp_Var
  %ln9IR = getelementptr inbounds i64, i64* %ln9IP, i32 0
  store i64 %ln9IQ, i64* %ln9IR, !tbaa !3
  %ln9IT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HC_info$def to i64
  %ln9IS = load i64*, i64** %Sp_Var
  %ln9IU = getelementptr inbounds i64, i64* %ln9IS, i32 -1
  store i64 %ln9IT, i64* %ln9IU, !tbaa !2
  %ln9IV = load i64*, i64** %Hp_Var
  %ln9IW = getelementptr inbounds i64, i64* %ln9IV, i32 -2
  %ln9IX = ptrtoint i64* %ln9IW to i64
  store i64 %ln9IX, i64* %R3_Var
  %ln9IY = load i64, i64* %ls5fO
  store i64 %ln9IY, i64* %R2_Var
  %ln9IZ = load i64*, i64** %Sp_Var
  %ln9J0 = getelementptr inbounds i64, i64* %ln9IZ, i32 -1
  %ln9J1 = ptrtoint i64* %ln9J0 to i64
  %ln9J2 = inttoptr i64 %ln9J1 to i64*
  store i64* %ln9J2, i64** %Sp_Var
  %ln9J3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9J4 = load i64*, i64** %Sp_Var
  %ln9J5 = load i64*, i64** %Hp_Var
  %ln9J6 = load i64, i64* %R1_Var
  %ln9J7 = load i64, i64* %R2_Var
  %ln9J8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9J3( i64* %Base_Arg, i64* %ln9J4, i64* %ln9J5, i64 %ln9J6, i64 %ln9J7, i64 %ln9J8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9HJ:
  %ln9J9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9J9, !tbaa !5
  br label %c9HG
c9HG:
  %ln9Ja = load i64, i64* %ls5fT
  store i64 %ln9Ja, i64* %R1_Var
  %ln9Jb = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Jc = bitcast i64* %ln9Jb to i64*
  %ln9Jd = load i64, i64* %ln9Jc, !tbaa !5
  %ln9Je = inttoptr i64 %ln9Jd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Jf = load i64*, i64** %Sp_Var
  %ln9Jg = load i64*, i64** %Hp_Var
  %ln9Jh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Je( i64* %Base_Arg, i64* %ln9Jf, i64* %ln9Jg, i64 %ln9Jh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9HC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HC_info$def to i8*)
define internal ghccc void @c9HC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9Ji:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9HC
c9HC:
  %ln9Jj = load i64*, i64** %Hp_Var
  %ln9Jk = getelementptr inbounds i64, i64* %ln9Jj, i32 3
  %ln9Jl = ptrtoint i64* %ln9Jk to i64
  %ln9Jm = inttoptr i64 %ln9Jl to i64*
  store i64* %ln9Jm, i64** %Hp_Var
  %ln9Jn = load i64*, i64** %Hp_Var
  %ln9Jo = ptrtoint i64* %ln9Jn to i64
  %ln9Jp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Jq = bitcast i64* %ln9Jp to i64*
  %ln9Jr = load i64, i64* %ln9Jq, !tbaa !5
  %ln9Js = icmp ugt i64 %ln9Jo, %ln9Jr
  %ln9Jt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Js, i1 0 )
  br i1 %ln9Jt, label %c9HM, label %c9HL
c9HL:
  %ln9Jv = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9Ju = load i64*, i64** %Hp_Var
  %ln9Jw = getelementptr inbounds i64, i64* %ln9Ju, i32 -2
  store i64 %ln9Jv, i64* %ln9Jw, !tbaa !3
  %ln9Jy = load i64, i64* %R1_Var
  %ln9Jx = load i64*, i64** %Hp_Var
  %ln9Jz = getelementptr inbounds i64, i64* %ln9Jx, i32 -1
  store i64 %ln9Jy, i64* %ln9Jz, !tbaa !3
  %ln9JB = load i64, i64* %R2_Var
  %ln9JA = load i64*, i64** %Hp_Var
  %ln9JC = getelementptr inbounds i64, i64* %ln9JA, i32 0
  store i64 %ln9JB, i64* %ln9JC, !tbaa !3
  %ln9JE = load i64*, i64** %Hp_Var
  %ln9JF = ptrtoint i64* %ln9JE to i64
  %ln9JG = add i64 %ln9JF, -14
  store i64 %ln9JG, i64* %R1_Var
  %ln9JH = load i64*, i64** %Sp_Var
  %ln9JI = getelementptr inbounds i64, i64* %ln9JH, i32 1
  %ln9JJ = ptrtoint i64* %ln9JI to i64
  %ln9JK = inttoptr i64 %ln9JJ to i64*
  store i64* %ln9JK, i64** %Sp_Var
  %ln9JL = load i64*, i64** %Sp_Var
  %ln9JM = getelementptr inbounds i64, i64* %ln9JL, i32 0
  %ln9JN = bitcast i64* %ln9JM to i64*
  %ln9JO = load i64, i64* %ln9JN, !tbaa !2
  %ln9JP = inttoptr i64 %ln9JO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JQ = load i64*, i64** %Sp_Var
  %ln9JR = load i64*, i64** %Hp_Var
  %ln9JS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JP( i64* %Base_Arg, i64* %ln9JQ, i64* %ln9JR, i64 %ln9JS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9HM:
  %ln9JT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9JT, !tbaa !5
  %ln9JU = load i64, i64* %R2_Var
  store i64 %ln9JU, i64* %R2_Var
  %ln9JV = load i64, i64* %R1_Var
  store i64 %ln9JV, i64* %R1_Var
  %ln9JW = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JX = load i64*, i64** %Sp_Var
  %ln9JY = load i64*, i64** %Hp_Var
  %ln9JZ = load i64, i64* %R1_Var
  %ln9K0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JW( i64* %Base_Arg, i64* %ln9JX, i64* %ln9JY, i64 %ln9JZ, i64 %ln9K0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fX_info$def to i8*)
define internal ghccc void @s5fX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9K1:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9HT
c9HT:
  %ln9K2 = load i64*, i64** %Sp_Var
  %ln9K3 = getelementptr inbounds i64, i64* %ln9K2, i32 -2
  %ln9K4 = ptrtoint i64* %ln9K3 to i64
  %ln9K5 = icmp ult i64 %ln9K4, %SpLim_Arg
  %ln9K6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9K5, i1 0 )
  br i1 %ln9K6, label %c9HU, label %c9HV
c9HV:
  %ln9K8 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9K7 = load i64*, i64** %Sp_Var
  %ln9K9 = getelementptr inbounds i64, i64* %ln9K7, i32 -2
  store i64 %ln9K8, i64* %ln9K9, !tbaa !2
  %ln9Kb = load i64, i64* %R1_Var
  %ln9Ka = load i64*, i64** %Sp_Var
  %ln9Kc = getelementptr inbounds i64, i64* %ln9Ka, i32 -1
  store i64 %ln9Kb, i64* %ln9Kc, !tbaa !2
  %ln9Kf = load i64, i64* %R1_Var
  %ln9Kg = add i64 %ln9Kf, 16
  %ln9Kh = inttoptr i64 %ln9Kg to i64*
  %ln9Ki = load i64, i64* %ln9Kh, !tbaa !4
  store i64 %ln9Ki, i64* %R2_Var
  %ln9Kj = load i64*, i64** %Sp_Var
  %ln9Kk = getelementptr inbounds i64, i64* %ln9Kj, i32 -2
  %ln9Kl = ptrtoint i64* %ln9Kk to i64
  %ln9Km = inttoptr i64 %ln9Kl to i64*
  store i64* %ln9Km, i64** %Sp_Var
  %ln9Kn = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ko = load i64*, i64** %Sp_Var
  %ln9Kp = load i64, i64* %R1_Var
  %ln9Kq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Kn( i64* %Base_Arg, i64* %ln9Ko, i64* %Hp_Arg, i64 %ln9Kp, i64 %ln9Kq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9HU:
  %ln9Kr = load i64, i64* %R1_Var
  store i64 %ln9Kr, i64* %R1_Var
  %ln9Ks = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Kt = bitcast i64* %ln9Ks to i64*
  %ln9Ku = load i64, i64* %ln9Kt, !tbaa !5
  %ln9Kv = inttoptr i64 %ln9Ku to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kw = load i64*, i64** %Sp_Var
  %ln9Kx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Kv( i64* %Base_Arg, i64* %ln9Kw, i64* %Hp_Arg, i64 %ln9Kx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5fY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fY_info$def to i8*)
define internal ghccc void @s5fY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Ky:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9I5
c9I5:
  %ln9Kz = load i64*, i64** %Sp_Var
  %ln9KA = getelementptr inbounds i64, i64* %ln9Kz, i32 -4
  %ln9KB = ptrtoint i64* %ln9KA to i64
  %ln9KC = icmp ult i64 %ln9KB, %SpLim_Arg
  %ln9KD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9KC, i1 0 )
  br i1 %ln9KD, label %c9I6, label %c9I7
c9I7:
  %ln9KF = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9KE = load i64*, i64** %Sp_Var
  %ln9KG = getelementptr inbounds i64, i64* %ln9KE, i32 -2
  store i64 %ln9KF, i64* %ln9KG, !tbaa !2
  %ln9KI = load i64, i64* %R1_Var
  %ln9KH = load i64*, i64** %Sp_Var
  %ln9KJ = getelementptr inbounds i64, i64* %ln9KH, i32 -1
  store i64 %ln9KI, i64* %ln9KJ, !tbaa !2
  %ln9KM = load i64, i64* %R1_Var
  %ln9KN = add i64 %ln9KM, 16
  %ln9KO = inttoptr i64 %ln9KN to i64*
  %ln9KP = load i64, i64* %ln9KO, !tbaa !4
  store i64 %ln9KP, i64* %R2_Var
  %ln9KR = ptrtoint i8* @stg_ap_p_info to i64
  %ln9KQ = load i64*, i64** %Sp_Var
  %ln9KS = getelementptr inbounds i64, i64* %ln9KQ, i32 -4
  store i64 %ln9KR, i64* %ln9KS, !tbaa !2
  %ln9KU = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9KV = add i64 %ln9KU, 1
  %ln9KT = load i64*, i64** %Sp_Var
  %ln9KW = getelementptr inbounds i64, i64* %ln9KT, i32 -3
  store i64 %ln9KV, i64* %ln9KW, !tbaa !2
  %ln9KX = load i64*, i64** %Sp_Var
  %ln9KY = getelementptr inbounds i64, i64* %ln9KX, i32 -4
  %ln9KZ = ptrtoint i64* %ln9KY to i64
  %ln9L0 = inttoptr i64 %ln9KZ to i64*
  store i64* %ln9L0, i64** %Sp_Var
  %ln9L1 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9L2 = load i64*, i64** %Sp_Var
  %ln9L3 = load i64, i64* %R1_Var
  %ln9L4 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9L1( i64* %Base_Arg, i64* %ln9L2, i64* %Hp_Arg, i64 %ln9L3, i64 %ln9L4, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9I6:
  %ln9L5 = load i64, i64* %R1_Var
  store i64 %ln9L5, i64* %R1_Var
  %ln9L6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9L7 = bitcast i64* %ln9L6 to i64*
  %ln9L8 = load i64, i64* %ln9L7, !tbaa !5
  %ln9L9 = inttoptr i64 %ln9L8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9La = load i64*, i64** %Sp_Var
  %ln9Lb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9L9( i64* %Base_Arg, i64* %ln9La, i64* %Hp_Arg, i64 %ln9Lb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_cosx_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosx_info$def to i8*)
define ghccc void @Main_cosx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n9Lc:
  %ls5fO = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9I8
c9I8:
  %ln9Ld = load i64, i64* %R2_Var
  store i64 %ln9Ld, i64* %ls5fO
  %ln9Le = load i64*, i64** %Sp_Var
  %ln9Lf = getelementptr inbounds i64, i64* %ln9Le, i32 -2
  %ln9Lg = ptrtoint i64* %ln9Lf to i64
  %ln9Lh = icmp ult i64 %ln9Lg, %SpLim_Arg
  %ln9Li = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Lh, i1 0 )
  br i1 %ln9Li, label %c9Ia, label %c9Ib
c9Ib:
  %ln9Lj = load i64*, i64** %Hp_Var
  %ln9Lk = getelementptr inbounds i64, i64* %ln9Lj, i32 3
  %ln9Ll = ptrtoint i64* %ln9Lk to i64
  %ln9Lm = inttoptr i64 %ln9Ll to i64*
  store i64* %ln9Lm, i64** %Hp_Var
  %ln9Ln = load i64*, i64** %Hp_Var
  %ln9Lo = ptrtoint i64* %ln9Ln to i64
  %ln9Lp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Lq = bitcast i64* %ln9Lp to i64*
  %ln9Lr = load i64, i64* %ln9Lq, !tbaa !5
  %ln9Ls = icmp ugt i64 %ln9Lo, %ln9Lr
  %ln9Lt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Ls, i1 0 )
  br i1 %ln9Lt, label %c9Id, label %c9Ic
c9Ic:
  %ln9Lv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fT_info$def to i64
  %ln9Lu = load i64*, i64** %Hp_Var
  %ln9Lw = getelementptr inbounds i64, i64* %ln9Lu, i32 -2
  store i64 %ln9Lv, i64* %ln9Lw, !tbaa !3
  %ln9Ly = load i64, i64* %ls5fO
  %ln9Lx = load i64*, i64** %Hp_Var
  %ln9Lz = getelementptr inbounds i64, i64* %ln9Lx, i32 0
  store i64 %ln9Ly, i64* %ln9Lz, !tbaa !3
  %ln9LB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HN_info$def to i64
  %ln9LA = load i64*, i64** %Sp_Var
  %ln9LC = getelementptr inbounds i64, i64* %ln9LA, i32 -2
  store i64 %ln9LB, i64* %ln9LC, !tbaa !2
  %ln9LD = load i64*, i64** %Hp_Var
  %ln9LE = getelementptr inbounds i64, i64* %ln9LD, i32 -2
  %ln9LF = ptrtoint i64* %ln9LE to i64
  store i64 %ln9LF, i64* %R3_Var
  %ln9LG = load i64, i64* %ls5fO
  store i64 %ln9LG, i64* %R2_Var
  %ln9LI = load i64, i64* %ls5fO
  %ln9LH = load i64*, i64** %Sp_Var
  %ln9LJ = getelementptr inbounds i64, i64* %ln9LH, i32 -1
  store i64 %ln9LI, i64* %ln9LJ, !tbaa !2
  %ln9LK = load i64*, i64** %Sp_Var
  %ln9LL = getelementptr inbounds i64, i64* %ln9LK, i32 -2
  %ln9LM = ptrtoint i64* %ln9LL to i64
  %ln9LN = inttoptr i64 %ln9LM to i64*
  store i64* %ln9LN, i64** %Sp_Var
  %ln9LO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9LP = load i64*, i64** %Sp_Var
  %ln9LQ = load i64*, i64** %Hp_Var
  %ln9LR = load i64, i64* %R1_Var
  %ln9LS = load i64, i64* %R2_Var
  %ln9LT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9LO( i64* %Base_Arg, i64* %ln9LP, i64* %ln9LQ, i64 %ln9LR, i64 %ln9LS, i64 %ln9LT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Id:
  %ln9LU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9LU, !tbaa !5
  br label %c9Ia
c9Ia:
  %ln9LV = load i64, i64* %ls5fO
  store i64 %ln9LV, i64* %R2_Var
  %ln9LW = ptrtoint %Main_cosx_closure_struct* @Main_cosx_closure$def to i64
  store i64 %ln9LW, i64* %R1_Var
  %ln9LX = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9LY = bitcast i64* %ln9LX to i64*
  %ln9LZ = load i64, i64* %ln9LY, !tbaa !5
  %ln9M0 = inttoptr i64 %ln9LZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9M1 = load i64*, i64** %Sp_Var
  %ln9M2 = load i64*, i64** %Hp_Var
  %ln9M3 = load i64, i64* %R1_Var
  %ln9M4 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9M0( i64* %Base_Arg, i64* %ln9M1, i64* %ln9M2, i64 %ln9M3, i64 %ln9M4, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9HN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HN_info$def to i8*)
define internal ghccc void @c9HN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9M5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %lc9HP = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9HN
c9HN:
  %ln9M6 = load i64*, i64** %Hp_Var
  %ln9M7 = getelementptr inbounds i64, i64* %ln9M6, i32 6
  %ln9M8 = ptrtoint i64* %ln9M7 to i64
  %ln9M9 = inttoptr i64 %ln9M8 to i64*
  store i64* %ln9M9, i64** %Hp_Var
  %ln9Ma = load i64*, i64** %Hp_Var
  %ln9Mb = ptrtoint i64* %ln9Ma to i64
  %ln9Mc = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Md = bitcast i64* %ln9Mc to i64*
  %ln9Me = load i64, i64* %ln9Md, !tbaa !5
  %ln9Mf = icmp ugt i64 %ln9Mb, %ln9Me
  %ln9Mg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Mf, i1 0 )
  br i1 %ln9Mg, label %c9Ig, label %c9If
c9If:
  %ln9Mi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fX_info$def to i64
  %ln9Mh = load i64*, i64** %Hp_Var
  %ln9Mj = getelementptr inbounds i64, i64* %ln9Mh, i32 -5
  store i64 %ln9Mi, i64* %ln9Mj, !tbaa !3
  %ln9Ml = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9Mm = bitcast i64* %ln9Ml to i64*
  %ln9Mn = load i64, i64* %ln9Mm, !tbaa !2
  %ln9Mk = load i64*, i64** %Hp_Var
  %ln9Mo = getelementptr inbounds i64, i64* %ln9Mk, i32 -3
  store i64 %ln9Mn, i64* %ln9Mo, !tbaa !3
  %ln9Mq = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9Mp = load i64*, i64** %Hp_Var
  %ln9Mr = getelementptr inbounds i64, i64* %ln9Mp, i32 -2
  store i64 %ln9Mq, i64* %ln9Mr, !tbaa !3
  %ln9Mt = load i64, i64* %R1_Var
  %ln9Ms = load i64*, i64** %Hp_Var
  %ln9Mu = getelementptr inbounds i64, i64* %ln9Ms, i32 -1
  store i64 %ln9Mt, i64* %ln9Mu, !tbaa !3
  %ln9Mw = load i64, i64* %R2_Var
  %ln9Mv = load i64*, i64** %Hp_Var
  %ln9Mx = getelementptr inbounds i64, i64* %ln9Mv, i32 0
  store i64 %ln9Mw, i64* %ln9Mx, !tbaa !3
  %ln9My = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HX_info$def to i64
  %ln9Mz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9My, i64* %ln9Mz, !tbaa !2
  %ln9MB = load i64*, i64** %Hp_Var
  %ln9MC = ptrtoint i64* %ln9MB to i64
  %ln9MD = add i64 %ln9MC, -14
  store i64 %ln9MD, i64* %R3_Var
  %ln9ME = load i64*, i64** %Hp_Var
  %ln9MF = getelementptr inbounds i64, i64* %ln9ME, i32 -5
  %ln9MG = ptrtoint i64* %ln9MF to i64
  store i64 %ln9MG, i64* %lc9HP
  %ln9MH = load i64, i64* %lc9HP
  store i64 %ln9MH, i64* %R2_Var
  %ln9MI = load i64, i64* %lc9HP
  %ln9MJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9MI, i64* %ln9MJ, !tbaa !2
  %ln9MK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ML = load i64*, i64** %Hp_Var
  %ln9MM = load i64, i64* %R1_Var
  %ln9MN = load i64, i64* %R2_Var
  %ln9MO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MK( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9ML, i64 %ln9MM, i64 %ln9MN, i64 %ln9MO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Ig:
  %ln9MP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln9MP, !tbaa !5
  %ln9MQ = load i64, i64* %R2_Var
  store i64 %ln9MQ, i64* %R2_Var
  %ln9MR = load i64, i64* %R1_Var
  store i64 %ln9MR, i64* %R1_Var
  %ln9MS = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MT = load i64*, i64** %Hp_Var
  %ln9MU = load i64, i64* %R1_Var
  %ln9MV = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MS( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9MT, i64 %ln9MU, i64 %ln9MV, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9HX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9HX_info$def to i8*)
define internal ghccc void @c9HX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9MW:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc9HP = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9HX
c9HX:
  %ln9MX = load i64*, i64** %Hp_Var
  %ln9MY = getelementptr inbounds i64, i64* %ln9MX, i32 6
  %ln9MZ = ptrtoint i64* %ln9MY to i64
  %ln9N0 = inttoptr i64 %ln9MZ to i64*
  store i64* %ln9N0, i64** %Hp_Var
  %ln9N1 = load i64*, i64** %Hp_Var
  %ln9N2 = ptrtoint i64* %ln9N1 to i64
  %ln9N3 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9N4 = bitcast i64* %ln9N3 to i64*
  %ln9N5 = load i64, i64* %ln9N4, !tbaa !5
  %ln9N6 = icmp ugt i64 %ln9N2, %ln9N5
  %ln9N7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9N6, i1 0 )
  br i1 %ln9N7, label %c9Ij, label %c9Ii
c9Ii:
  %ln9N9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5fY_info$def to i64
  %ln9N8 = load i64*, i64** %Hp_Var
  %ln9Na = getelementptr inbounds i64, i64* %ln9N8, i32 -5
  store i64 %ln9N9, i64* %ln9Na, !tbaa !3
  %ln9Nb = load i64*, i64** %Sp_Var
  %ln9Nc = getelementptr inbounds i64, i64* %ln9Nb, i32 1
  %ln9Nd = bitcast i64* %ln9Nc to i64*
  %ln9Ne = load i64, i64* %ln9Nd, !tbaa !2
  store i64 %ln9Ne, i64* %lc9HP
  %ln9Ng = load i64, i64* %lc9HP
  %ln9Nf = load i64*, i64** %Hp_Var
  %ln9Nh = getelementptr inbounds i64, i64* %ln9Nf, i32 -3
  store i64 %ln9Ng, i64* %ln9Nh, !tbaa !3
  %ln9Nj = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9Ni = load i64*, i64** %Hp_Var
  %ln9Nk = getelementptr inbounds i64, i64* %ln9Ni, i32 -2
  store i64 %ln9Nj, i64* %ln9Nk, !tbaa !3
  %ln9Nm = load i64*, i64** %Hp_Var
  %ln9Nn = getelementptr inbounds i64, i64* %ln9Nm, i32 -5
  %ln9No = ptrtoint i64* %ln9Nn to i64
  %ln9Nl = load i64*, i64** %Hp_Var
  %ln9Np = getelementptr inbounds i64, i64* %ln9Nl, i32 -1
  store i64 %ln9No, i64* %ln9Np, !tbaa !3
  %ln9Nr = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %ln9Ns = add i64 %ln9Nr, 1
  %ln9Nq = load i64*, i64** %Hp_Var
  %ln9Nt = getelementptr inbounds i64, i64* %ln9Nq, i32 0
  store i64 %ln9Ns, i64* %ln9Nt, !tbaa !3
  %ln9Nu = load i64, i64* %R1_Var
  store i64 %ln9Nu, i64* %R4_Var
  %ln9Nw = load i64*, i64** %Hp_Var
  %ln9Nx = ptrtoint i64* %ln9Nw to i64
  %ln9Ny = add i64 %ln9Nx, -14
  store i64 %ln9Ny, i64* %R3_Var
  %ln9Nz = load i64, i64* %lc9HP
  store i64 %ln9Nz, i64* %R2_Var
  %ln9NA = load i64*, i64** %Sp_Var
  %ln9NB = getelementptr inbounds i64, i64* %ln9NA, i32 2
  %ln9NC = ptrtoint i64* %ln9NB to i64
  %ln9ND = inttoptr i64 %ln9NC to i64*
  store i64* %ln9ND, i64** %Sp_Var
  %ln9NE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NF = load i64*, i64** %Sp_Var
  %ln9NG = load i64*, i64** %Hp_Var
  %ln9NH = load i64, i64* %R1_Var
  %ln9NI = load i64, i64* %R2_Var
  %ln9NJ = load i64, i64* %R3_Var
  %ln9NK = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NE( i64* %Base_Arg, i64* %ln9NF, i64* %ln9NG, i64 %ln9NH, i64 %ln9NI, i64 %ln9NJ, i64 %ln9NK, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Ij:
  %ln9NL = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln9NL, !tbaa !5
  %ln9NM = load i64, i64* %R1_Var
  store i64 %ln9NM, i64* %R1_Var
  %ln9NN = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NO = load i64*, i64** %Sp_Var
  %ln9NP = load i64*, i64** %Hp_Var
  %ln9NQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NN( i64* %Base_Arg, i64* %ln9NO, i64* %ln9NP, i64 %ln9NQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_sinx_closure_struct = type <{i64}>
@Main_sinx_closure$def = internal global %Main_sinx_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sinx_info$def to i64)}>
@Main_sinx_closure = alias i8, bitcast (%Main_sinx_closure_struct* @Main_sinx_closure$def to i8*)
@s5g3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5g3_info$def to i8*)
define internal ghccc void @s5g3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9Od:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9NZ
c9NZ:
  %ln9Oe = add i64 %R1_Arg, 16
  %ln9Of = inttoptr i64 %ln9Oe to i64*
  %ln9Og = load i64, i64* %ln9Of, !tbaa !4
  store i64 %ln9Og, i64* %R2_Var
  %ln9Oh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_cosx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Oi = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Oh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Oi, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_sinx_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sinx_info$def to i8*)
define ghccc void @Main_sinx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n9Oj:
  %ls5g2 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9O5
c9O5:
  %ln9Ok = load i64, i64* %R2_Var
  store i64 %ln9Ok, i64* %ls5g2
  %ln9Ol = load i64*, i64** %Sp_Var
  %ln9Om = getelementptr inbounds i64, i64* %ln9Ol, i32 -1
  %ln9On = ptrtoint i64* %ln9Om to i64
  %ln9Oo = icmp ult i64 %ln9On, %SpLim_Arg
  %ln9Op = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Oo, i1 0 )
  br i1 %ln9Op, label %c9O6, label %c9O7
c9O7:
  %ln9Oq = load i64*, i64** %Hp_Var
  %ln9Or = getelementptr inbounds i64, i64* %ln9Oq, i32 3
  %ln9Os = ptrtoint i64* %ln9Or to i64
  %ln9Ot = inttoptr i64 %ln9Os to i64*
  store i64* %ln9Ot, i64** %Hp_Var
  %ln9Ou = load i64*, i64** %Hp_Var
  %ln9Ov = ptrtoint i64* %ln9Ou to i64
  %ln9Ow = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Ox = bitcast i64* %ln9Ow to i64*
  %ln9Oy = load i64, i64* %ln9Ox, !tbaa !5
  %ln9Oz = icmp ugt i64 %ln9Ov, %ln9Oy
  %ln9OA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Oz, i1 0 )
  br i1 %ln9OA, label %c9O9, label %c9O8
c9O8:
  %ln9OC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5g3_info$def to i64
  %ln9OB = load i64*, i64** %Hp_Var
  %ln9OD = getelementptr inbounds i64, i64* %ln9OB, i32 -2
  store i64 %ln9OC, i64* %ln9OD, !tbaa !3
  %ln9OF = load i64, i64* %ls5g2
  %ln9OE = load i64*, i64** %Hp_Var
  %ln9OG = getelementptr inbounds i64, i64* %ln9OE, i32 0
  store i64 %ln9OF, i64* %ln9OG, !tbaa !3
  %ln9OI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9O2_info$def to i64
  %ln9OH = load i64*, i64** %Sp_Var
  %ln9OJ = getelementptr inbounds i64, i64* %ln9OH, i32 -1
  store i64 %ln9OI, i64* %ln9OJ, !tbaa !2
  %ln9OK = load i64*, i64** %Hp_Var
  %ln9OL = getelementptr inbounds i64, i64* %ln9OK, i32 -2
  %ln9OM = ptrtoint i64* %ln9OL to i64
  store i64 %ln9OM, i64* %R3_Var
  %ln9ON = load i64, i64* %ls5g2
  store i64 %ln9ON, i64* %R2_Var
  %ln9OO = load i64*, i64** %Sp_Var
  %ln9OP = getelementptr inbounds i64, i64* %ln9OO, i32 -1
  %ln9OQ = ptrtoint i64* %ln9OP to i64
  %ln9OR = inttoptr i64 %ln9OQ to i64*
  store i64* %ln9OR, i64** %Sp_Var
  %ln9OS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9OT = load i64*, i64** %Sp_Var
  %ln9OU = load i64*, i64** %Hp_Var
  %ln9OV = load i64, i64* %R1_Var
  %ln9OW = load i64, i64* %R2_Var
  %ln9OX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9OS( i64* %Base_Arg, i64* %ln9OT, i64* %ln9OU, i64 %ln9OV, i64 %ln9OW, i64 %ln9OX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9O9:
  %ln9OY = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9OY, !tbaa !5
  br label %c9O6
c9O6:
  %ln9OZ = load i64, i64* %ls5g2
  store i64 %ln9OZ, i64* %R2_Var
  %ln9P0 = ptrtoint %Main_sinx_closure_struct* @Main_sinx_closure$def to i64
  store i64 %ln9P0, i64* %R1_Var
  %ln9P1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9P2 = bitcast i64* %ln9P1 to i64*
  %ln9P3 = load i64, i64* %ln9P2, !tbaa !5
  %ln9P4 = inttoptr i64 %ln9P3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9P5 = load i64*, i64** %Sp_Var
  %ln9P6 = load i64*, i64** %Hp_Var
  %ln9P7 = load i64, i64* %R1_Var
  %ln9P8 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9P4( i64* %Base_Arg, i64* %ln9P5, i64* %ln9P6, i64 %ln9P7, i64 %ln9P8, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9O2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9O2_info$def to i8*)
define internal ghccc void @c9O2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9P9:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9O2
c9O2:
  %ln9Pa = load i64*, i64** %Hp_Var
  %ln9Pb = getelementptr inbounds i64, i64* %ln9Pa, i32 3
  %ln9Pc = ptrtoint i64* %ln9Pb to i64
  %ln9Pd = inttoptr i64 %ln9Pc to i64*
  store i64* %ln9Pd, i64** %Hp_Var
  %ln9Pe = load i64*, i64** %Hp_Var
  %ln9Pf = ptrtoint i64* %ln9Pe to i64
  %ln9Pg = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Ph = bitcast i64* %ln9Pg to i64*
  %ln9Pi = load i64, i64* %ln9Ph, !tbaa !5
  %ln9Pj = icmp ugt i64 %ln9Pf, %ln9Pi
  %ln9Pk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Pj, i1 0 )
  br i1 %ln9Pk, label %c9Oc, label %c9Ob
c9Ob:
  %ln9Pm = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %ln9Pl = load i64*, i64** %Hp_Var
  %ln9Pn = getelementptr inbounds i64, i64* %ln9Pl, i32 -2
  store i64 %ln9Pm, i64* %ln9Pn, !tbaa !3
  %ln9Pp = load i64, i64* %R1_Var
  %ln9Po = load i64*, i64** %Hp_Var
  %ln9Pq = getelementptr inbounds i64, i64* %ln9Po, i32 -1
  store i64 %ln9Pp, i64* %ln9Pq, !tbaa !3
  %ln9Ps = load i64, i64* %R2_Var
  %ln9Pr = load i64*, i64** %Hp_Var
  %ln9Pt = getelementptr inbounds i64, i64* %ln9Pr, i32 0
  store i64 %ln9Ps, i64* %ln9Pt, !tbaa !3
  %ln9Pv = load i64*, i64** %Hp_Var
  %ln9Pw = ptrtoint i64* %ln9Pv to i64
  %ln9Px = add i64 %ln9Pw, -14
  store i64 %ln9Px, i64* %R1_Var
  %ln9Py = load i64*, i64** %Sp_Var
  %ln9Pz = getelementptr inbounds i64, i64* %ln9Py, i32 1
  %ln9PA = ptrtoint i64* %ln9Pz to i64
  %ln9PB = inttoptr i64 %ln9PA to i64*
  store i64* %ln9PB, i64** %Sp_Var
  %ln9PC = load i64*, i64** %Sp_Var
  %ln9PD = getelementptr inbounds i64, i64* %ln9PC, i32 0
  %ln9PE = bitcast i64* %ln9PD to i64*
  %ln9PF = load i64, i64* %ln9PE, !tbaa !2
  %ln9PG = inttoptr i64 %ln9PF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9PH = load i64*, i64** %Sp_Var
  %ln9PI = load i64*, i64** %Hp_Var
  %ln9PJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9PG( i64* %Base_Arg, i64* %ln9PH, i64* %ln9PI, i64 %ln9PJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Oc:
  %ln9PK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9PK, !tbaa !5
  %ln9PL = load i64, i64* %R2_Var
  store i64 %ln9PL, i64* %R2_Var
  %ln9PM = load i64, i64* %R1_Var
  store i64 %ln9PM, i64* %R1_Var
  %ln9PN = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9PO = load i64*, i64** %Sp_Var
  %ln9PP = load i64*, i64** %Hp_Var
  %ln9PQ = load i64, i64* %R1_Var
  %ln9PR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9PN( i64* %Base_Arg, i64* %ln9PO, i64* %ln9PP, i64 %ln9PQ, i64 %ln9PR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdseven1_closure_struct = type <{i64, i64}>
@Main_zdseven1_closure$def = internal global %Main_zdseven1_closure_struct<{i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_IS_con_info to i64), i64 2}>
@Main_zdseven1_closure = alias i8, bitcast (%Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i8*)
%_u9QZ_srt_struct = type <{i64, i64, i64, i64, i64}>
%r55h_closure_struct = type <{i64, i64}>
@_u9QZ_srt$def = internal global %_u9QZ_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerQuot_closure to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerRem_closure to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64), i64 0}>
@_u9QZ_srt = internal alias i8, bitcast (%_u9QZ_srt_struct* @_u9QZ_srt$def to i8*)
@r55h_closure$def = internal global %r55h_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55h_info$def to i64), i64 0}>
@r55h_closure = internal alias i8, bitcast (%r55h_closure_struct* @r55h_closure$def to i8*)
@s59N_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59N_info$def to i8*)
define internal ghccc void @s59N_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59N_info$def to i64)) to i32),i32 0)}>
{
n9R0:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Qc
c9Qc:
  %ln9R1 = add i64 %R1_Arg, 24
  %ln9R2 = inttoptr i64 %ln9R1 to i64*
  %ln9R3 = load i64, i64* %ln9R2, !tbaa !4
  store i64 %ln9R3, i64* %R3_Var
  %ln9R4 = add i64 %R1_Arg, 16
  %ln9R5 = inttoptr i64 %ln9R4 to i64*
  %ln9R6 = load i64, i64* %ln9R5, !tbaa !4
  store i64 %ln9R6, i64* %R2_Var
  %ln9R7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9R8 = load i64, i64* %R2_Var
  %ln9R9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9R7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9R8, i64 %ln9R9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@r55h_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55h_info$def to i8*)
define internal ghccc void @r55h_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55h_info$def to i64)) to i32),i32 0)}>
{
n9Ra:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9Qf
c9Qf:
  %ln9Rb = load i64*, i64** %Sp_Var
  %ln9Rc = getelementptr inbounds i64, i64* %ln9Rb, i32 -4
  %ln9Rd = ptrtoint i64* %ln9Rc to i64
  %ln9Re = icmp ult i64 %ln9Rd, %SpLim_Arg
  %ln9Rf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Re, i1 0 )
  br i1 %ln9Rf, label %c9Qg, label %u9QT
u9QT:
  %ln9Rh = load i64, i64* %R2_Var
  %ln9Rg = load i64*, i64** %Sp_Var
  %ln9Ri = getelementptr inbounds i64, i64* %ln9Rg, i32 -3
  store i64 %ln9Rh, i64* %ln9Ri, !tbaa !2
  %ln9Rk = load i64, i64* %R3_Var
  %ln9Rj = load i64*, i64** %Sp_Var
  %ln9Rl = getelementptr inbounds i64, i64* %ln9Rj, i32 -2
  store i64 %ln9Rk, i64* %ln9Rl, !tbaa !2
  %ln9Rn = load i64, i64* %R4_Var
  %ln9Rm = load i64*, i64** %Sp_Var
  %ln9Ro = getelementptr inbounds i64, i64* %ln9Rm, i32 -1
  store i64 %ln9Rn, i64* %ln9Ro, !tbaa !2
  %ln9Rp = load i64*, i64** %Sp_Var
  %ln9Rq = getelementptr inbounds i64, i64* %ln9Rp, i32 -3
  %ln9Rr = ptrtoint i64* %ln9Rq to i64
  %ln9Rs = inttoptr i64 %ln9Rr to i64*
  store i64* %ln9Rs, i64** %Sp_Var
  %ln9Rt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9PT$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ru = load i64*, i64** %Sp_Var
  %ln9Rv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Rt( i64* %Base_Arg, i64* %ln9Ru, i64* %Hp_Arg, i64 %ln9Rv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Qg:
  %ln9Rw = load i64, i64* %R4_Var
  store i64 %ln9Rw, i64* %R4_Var
  %ln9Rx = load i64, i64* %R3_Var
  store i64 %ln9Rx, i64* %R3_Var
  %ln9Ry = load i64, i64* %R2_Var
  store i64 %ln9Ry, i64* %R2_Var
  %ln9Rz = ptrtoint %r55h_closure_struct* @r55h_closure$def to i64
  store i64 %ln9Rz, i64* %R1_Var
  %ln9RA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9RB = bitcast i64* %ln9RA to i64*
  %ln9RC = load i64, i64* %ln9RB, !tbaa !5
  %ln9RD = inttoptr i64 %ln9RC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9RE = load i64*, i64** %Sp_Var
  %ln9RF = load i64, i64* %R1_Var
  %ln9RG = load i64, i64* %R2_Var
  %ln9RH = load i64, i64* %R3_Var
  %ln9RI = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9RD( i64* %Base_Arg, i64* %ln9RE, i64* %Hp_Arg, i64 %ln9RF, i64 %ln9RG, i64 %ln9RH, i64 %ln9RI, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c9PT = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9PT$def to i8*)
define internal ghccc void @_c9PT$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n9RJ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9PT
c9PT:
  %ln9RL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9PW_info$def to i64
  %ln9RK = load i64*, i64** %Sp_Var
  %ln9RM = getelementptr inbounds i64, i64* %ln9RK, i32 -1
  store i64 %ln9RL, i64* %ln9RM, !tbaa !2
  %ln9RN = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9RO = add i64 %ln9RN, 1
  store i64 %ln9RO, i64* %R3_Var
  %ln9RP = load i64*, i64** %Sp_Var
  %ln9RQ = getelementptr inbounds i64, i64* %ln9RP, i32 1
  %ln9RR = bitcast i64* %ln9RQ to i64*
  %ln9RS = load i64, i64* %ln9RR, !tbaa !2
  store i64 %ln9RS, i64* %R2_Var
  %ln9RT = load i64*, i64** %Sp_Var
  %ln9RU = getelementptr inbounds i64, i64* %ln9RT, i32 -1
  %ln9RV = ptrtoint i64* %ln9RU to i64
  %ln9RW = inttoptr i64 %ln9RV to i64*
  store i64* %ln9RW, i64** %Sp_Var
  %ln9RX = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerRem_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9RY = load i64*, i64** %Sp_Var
  %ln9RZ = load i64, i64* %R2_Var
  %ln9S0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9RX( i64* %Base_Arg, i64* %ln9RY, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9RZ, i64 %ln9S0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9PW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9PW_info$def to i8*)
define internal ghccc void @c9PW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9PW_info$def to i64)) to i32),i32 0)}>
{
n9S1:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9PW
c9PW:
  %ln9S2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q0_info$def to i64
  %ln9S3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9S2, i64* %ln9S3, !tbaa !2
  %ln9S4 = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln9S5 = add i64 %ln9S4, 1
  store i64 %ln9S5, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9S6 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9S7 = load i64, i64* %R2_Var
  %ln9S8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9S6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9S7, i64 %ln9S8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Q0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q0_info$def to i8*)
define internal ghccc void @c9Q0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q0_info$def to i64)) to i32),i32 0)}>
{
n9S9:
  %ls59G = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Q0
c9Q0:
  %ln9Sa = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Sb = bitcast i64* %ln9Sa to i64*
  %ln9Sc = load i64, i64* %ln9Sb, !tbaa !2
  store i64 %ln9Sc, i64* %ls59G
  switch i64 %R1_Arg, label %c9Ql [i64 1, label %c9QN]
c9Ql:
  %ln9Sd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q4_info$def to i64
  %ln9Se = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Sd, i64* %ln9Se, !tbaa !2
  %ln9Sf = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9Sg = add i64 %ln9Sf, 1
  store i64 %ln9Sg, i64* %R3_Var
  %ln9Sh = load i64, i64* %ls59G
  store i64 %ln9Sh, i64* %R2_Var
  %ln9Si = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Sj = load i64, i64* %R2_Var
  %ln9Sk = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Si( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Sj, i64 %ln9Sk, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9QN:
  %ln9Sl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QH_info$def to i64
  %ln9Sm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Sl, i64* %ln9Sm, !tbaa !2
  %ln9Sn = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9So = add i64 %ln9Sn, 1
  store i64 %ln9So, i64* %R3_Var
  %ln9Sp = load i64, i64* %ls59G
  store i64 %ln9Sp, i64* %R2_Var
  %ln9Sq = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerQuot_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Sr = load i64, i64* %R2_Var
  %ln9Ss = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Sq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Sr, i64 %ln9Ss, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9QH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QH_info$def to i8*)
define internal ghccc void @c9QH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QH_info$def to i64)) to i32),i32 0)}>
{
n9St:
  %ls59F = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9QH
c9QH:
  %ln9Su = load i64*, i64** %Sp_Var
  %ln9Sv = getelementptr inbounds i64, i64* %ln9Su, i32 1
  %ln9Sw = bitcast i64* %ln9Sv to i64*
  %ln9Sx = load i64, i64* %ln9Sw, !tbaa !2
  store i64 %ln9Sx, i64* %ls59F
  %ln9Sz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QL_info$def to i64
  %ln9Sy = load i64*, i64** %Sp_Var
  %ln9SA = getelementptr inbounds i64, i64* %ln9Sy, i32 1
  store i64 %ln9Sz, i64* %ln9SA, !tbaa !2
  %ln9SB = load i64, i64* %ls59F
  store i64 %ln9SB, i64* %R3_Var
  %ln9SC = load i64, i64* %ls59F
  store i64 %ln9SC, i64* %R2_Var
  %ln9SD = load i64*, i64** %Sp_Var
  %ln9SE = getelementptr inbounds i64, i64* %ln9SD, i32 2
  store i64 %R1_Arg, i64* %ln9SE, !tbaa !2
  %ln9SF = load i64*, i64** %Sp_Var
  %ln9SG = getelementptr inbounds i64, i64* %ln9SF, i32 1
  %ln9SH = ptrtoint i64* %ln9SG to i64
  %ln9SI = inttoptr i64 %ln9SH to i64*
  store i64* %ln9SI, i64** %Sp_Var
  %ln9SJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9SK = load i64*, i64** %Sp_Var
  %ln9SL = load i64, i64* %R2_Var
  %ln9SM = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9SJ( i64* %Base_Arg, i64* %ln9SK, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9SL, i64 %ln9SM, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9QL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QL_info$def to i8*)
define internal ghccc void @c9QL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9QL_info$def to i64)) to i32),i32 0)}>
{
n9SN:
  br label %c9QL
c9QL:
  %ln9SO = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln9SO, !tbaa !2
  %ln9SP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9SQ = bitcast i64* %ln9SP to i64*
  %ln9SR = load i64, i64* %ln9SQ, !tbaa !2
  %ln9SS = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9SR, i64* %ln9SS, !tbaa !2
  %ln9ST = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9SU = bitcast i64* %ln9ST to i64*
  %ln9SV = load i64, i64* %ln9SU, !tbaa !2
  %ln9SW = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %ln9SV, i64* %ln9SW, !tbaa !2
  %ln9SX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9PT$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9SX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Q4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q4_info$def to i8*)
define internal ghccc void @c9Q4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Q4_info$def to i64)) to i32),i32 0)}>
{
n9SY:
  %ls59F = alloca i64, i32 1
  %ls59H = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9Q4
c9Q4:
  %ln9SZ = load i64*, i64** %Sp_Var
  %ln9T0 = getelementptr inbounds i64, i64* %ln9SZ, i32 1
  %ln9T1 = bitcast i64* %ln9T0 to i64*
  %ln9T2 = load i64, i64* %ln9T1, !tbaa !2
  store i64 %ln9T2, i64* %ls59F
  %ln9T3 = load i64*, i64** %Sp_Var
  %ln9T4 = getelementptr inbounds i64, i64* %ln9T3, i32 3
  %ln9T5 = bitcast i64* %ln9T4 to i64*
  %ln9T6 = load i64, i64* %ln9T5, !tbaa !2
  store i64 %ln9T6, i64* %ls59H
  %ln9T7 = load i64, i64* %R1_Var
  switch i64 %ln9T7, label %c9Qs [i64 1, label %c9QE]
c9Qs:
  %ln9T8 = load i64*, i64** %Hp_Var
  %ln9T9 = getelementptr inbounds i64, i64* %ln9T8, i32 4
  %ln9Ta = ptrtoint i64* %ln9T9 to i64
  %ln9Tb = inttoptr i64 %ln9Ta to i64*
  store i64* %ln9Tb, i64** %Hp_Var
  %ln9Tc = load i64*, i64** %Hp_Var
  %ln9Td = ptrtoint i64* %ln9Tc to i64
  %ln9Te = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Tf = bitcast i64* %ln9Te to i64*
  %ln9Tg = load i64, i64* %ln9Tf, !tbaa !5
  %ln9Th = icmp ugt i64 %ln9Td, %ln9Tg
  %ln9Ti = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Th, i1 0 )
  br i1 %ln9Ti, label %c9Qv, label %c9Qu
c9Qu:
  %ln9Tk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s59N_info$def to i64
  %ln9Tj = load i64*, i64** %Hp_Var
  %ln9Tl = getelementptr inbounds i64, i64* %ln9Tj, i32 -3
  store i64 %ln9Tk, i64* %ln9Tl, !tbaa !3
  %ln9Tn = load i64, i64* %ls59F
  %ln9Tm = load i64*, i64** %Hp_Var
  %ln9To = getelementptr inbounds i64, i64* %ln9Tm, i32 -1
  store i64 %ln9Tn, i64* %ln9To, !tbaa !3
  %ln9Tq = load i64, i64* %ls59H
  %ln9Tp = load i64*, i64** %Hp_Var
  %ln9Tr = getelementptr inbounds i64, i64* %ln9Tp, i32 0
  store i64 %ln9Tq, i64* %ln9Tr, !tbaa !3
  %ln9Tt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qm_info$def to i64
  %ln9Ts = load i64*, i64** %Sp_Var
  %ln9Tu = getelementptr inbounds i64, i64* %ln9Ts, i32 0
  store i64 %ln9Tt, i64* %ln9Tu, !tbaa !2
  %ln9Tv = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9Tw = add i64 %ln9Tv, 1
  store i64 %ln9Tw, i64* %R3_Var
  %ln9Tx = load i64*, i64** %Sp_Var
  %ln9Ty = getelementptr inbounds i64, i64* %ln9Tx, i32 2
  %ln9Tz = bitcast i64* %ln9Ty to i64*
  %ln9TA = load i64, i64* %ln9Tz, !tbaa !2
  store i64 %ln9TA, i64* %R2_Var
  %ln9TC = load i64*, i64** %Hp_Var
  %ln9TD = getelementptr inbounds i64, i64* %ln9TC, i32 -3
  %ln9TE = ptrtoint i64* %ln9TD to i64
  %ln9TB = load i64*, i64** %Sp_Var
  %ln9TF = getelementptr inbounds i64, i64* %ln9TB, i32 3
  store i64 %ln9TE, i64* %ln9TF, !tbaa !2
  %ln9TG = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerQuot_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TH = load i64*, i64** %Sp_Var
  %ln9TI = load i64*, i64** %Hp_Var
  %ln9TJ = load i64, i64* %R1_Var
  %ln9TK = load i64, i64* %R2_Var
  %ln9TL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TG( i64* %Base_Arg, i64* %ln9TH, i64* %ln9TI, i64 %ln9TJ, i64 %ln9TK, i64 %ln9TL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Qv:
  %ln9TM = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9TM, !tbaa !5
  %ln9TN = load i64, i64* %R1_Var
  store i64 %ln9TN, i64* %R1_Var
  %ln9TO = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TP = load i64*, i64** %Sp_Var
  %ln9TQ = load i64*, i64** %Hp_Var
  %ln9TR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TO( i64* %Base_Arg, i64* %ln9TP, i64* %ln9TQ, i64 %ln9TR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9QE:
  %ln9TS = load i64, i64* %ls59H
  store i64 %ln9TS, i64* %R3_Var
  %ln9TT = load i64, i64* %ls59F
  store i64 %ln9TT, i64* %R2_Var
  %ln9TU = load i64*, i64** %Sp_Var
  %ln9TV = getelementptr inbounds i64, i64* %ln9TU, i32 4
  %ln9TW = ptrtoint i64* %ln9TV to i64
  %ln9TX = inttoptr i64 %ln9TW to i64*
  store i64* %ln9TX, i64** %Sp_Var
  %ln9TY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TZ = load i64*, i64** %Sp_Var
  %ln9U0 = load i64*, i64** %Hp_Var
  %ln9U1 = load i64, i64* %R1_Var
  %ln9U2 = load i64, i64* %R2_Var
  %ln9U3 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TY( i64* %Base_Arg, i64* %ln9TZ, i64* %ln9U0, i64 %ln9U1, i64 %ln9U2, i64 %ln9U3, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Qm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qm_info$def to i8*)
define internal ghccc void @c9Qm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qm_info$def to i64)) to i32),i32 0)}>
{
n9U4:
  %ls59F = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9Qm
c9Qm:
  %ln9U5 = load i64*, i64** %Sp_Var
  %ln9U6 = getelementptr inbounds i64, i64* %ln9U5, i32 1
  %ln9U7 = bitcast i64* %ln9U6 to i64*
  %ln9U8 = load i64, i64* %ln9U7, !tbaa !2
  store i64 %ln9U8, i64* %ls59F
  %ln9Ua = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qq_info$def to i64
  %ln9U9 = load i64*, i64** %Sp_Var
  %ln9Ub = getelementptr inbounds i64, i64* %ln9U9, i32 1
  store i64 %ln9Ua, i64* %ln9Ub, !tbaa !2
  %ln9Uc = load i64, i64* %ls59F
  store i64 %ln9Uc, i64* %R3_Var
  %ln9Ud = load i64, i64* %ls59F
  store i64 %ln9Ud, i64* %R2_Var
  %ln9Ue = load i64*, i64** %Sp_Var
  %ln9Uf = getelementptr inbounds i64, i64* %ln9Ue, i32 2
  store i64 %R1_Arg, i64* %ln9Uf, !tbaa !2
  %ln9Ug = load i64*, i64** %Sp_Var
  %ln9Uh = getelementptr inbounds i64, i64* %ln9Ug, i32 1
  %ln9Ui = ptrtoint i64* %ln9Uh to i64
  %ln9Uj = inttoptr i64 %ln9Ui to i64*
  store i64* %ln9Uj, i64** %Sp_Var
  %ln9Uk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ul = load i64*, i64** %Sp_Var
  %ln9Um = load i64, i64* %R2_Var
  %ln9Un = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Uk( i64* %Base_Arg, i64* %ln9Ul, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Um, i64 %ln9Un, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Qq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qq_info$def to i8*)
define internal ghccc void @c9Qq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9QZ_srt_struct* @_u9QZ_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Qq_info$def to i64)) to i32),i32 0)}>
{
n9Uo:
  br label %c9Qq
c9Qq:
  %ln9Up = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln9Up, !tbaa !2
  %ln9Uq = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9Ur = bitcast i64* %ln9Uq to i64*
  %ln9Us = load i64, i64* %ln9Ur, !tbaa !2
  %ln9Ut = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9Us, i64* %ln9Ut, !tbaa !2
  %ln9Uu = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Uv = bitcast i64* %ln9Uu to i64*
  %ln9Uw = load i64, i64* %ln9Uv, !tbaa !2
  %ln9Ux = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %ln9Uw, i64* %ln9Ux, !tbaa !2
  %ln9Uy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9PT$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Uy( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u9Vv_srt_struct = type <{i64, i64, i64, i64}>
%_u9Vw_srt_struct = type <{i64, i64, i64, i64}>
%_u9Vx_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdszczuf_closure_struct = type <{i64, i64}>
@_u9Vv_srt$def = internal global %_u9Vv_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i64), i64 ptrtoint (%r55h_closure_struct* @r55h_closure$def to i64), i64 0}>
@_u9Vv_srt = internal alias i8, bitcast (%_u9Vv_srt_struct* @_u9Vv_srt$def to i8*)
@_u9Vw_srt$def = internal global %_u9Vw_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerQuot_closure to i64), i64 ptrtoint (i8* @_u9Vv_srt to i64), i64 0}>
@_u9Vw_srt = internal alias i8, bitcast (%_u9Vw_srt_struct* @_u9Vw_srt$def to i8*)
@_u9Vx_srt$def = internal global %_u9Vx_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerRem_closure to i64), i64 ptrtoint (i8* @_u9Vw_srt to i64), i64 0}>
@_u9Vx_srt = internal alias i8, bitcast (%_u9Vx_srt_struct* @_u9Vx_srt$def to i8*)
@Main_zdszczuf_closure$def = internal global %Main_zdszczuf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszczuf_info$def to i64), i64 0}>
@Main_zdszczuf_closure = alias i8, bitcast (%Main_zdszczuf_closure_struct* @Main_zdszczuf_closure$def to i8*)
@Main_zdszczuf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszczuf_info$def to i8*)
define ghccc void @Main_zdszczuf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vx_srt_struct* @_u9Vx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszczuf_info$def to i64)) to i32),i32 0)}>
{
n9Vy:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9UF
c9UF:
  %ln9Vz = load i64*, i64** %Sp_Var
  %ln9VA = getelementptr inbounds i64, i64* %ln9Vz, i32 -3
  %ln9VB = ptrtoint i64* %ln9VA to i64
  %ln9VC = icmp ult i64 %ln9VB, %SpLim_Arg
  %ln9VD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9VC, i1 0 )
  br i1 %ln9VD, label %c9UG, label %u9Vr
u9Vr:
  %ln9VF = load i64, i64* %R2_Var
  %ln9VE = load i64*, i64** %Sp_Var
  %ln9VG = getelementptr inbounds i64, i64* %ln9VE, i32 -2
  store i64 %ln9VF, i64* %ln9VG, !tbaa !2
  %ln9VI = load i64, i64* %R3_Var
  %ln9VH = load i64*, i64** %Sp_Var
  %ln9VJ = getelementptr inbounds i64, i64* %ln9VH, i32 -1
  store i64 %ln9VI, i64* %ln9VJ, !tbaa !2
  %ln9VK = load i64*, i64** %Sp_Var
  %ln9VL = getelementptr inbounds i64, i64* %ln9VK, i32 -2
  %ln9VM = ptrtoint i64* %ln9VL to i64
  %ln9VN = inttoptr i64 %ln9VM to i64*
  store i64* %ln9VN, i64** %Sp_Var
  %ln9VO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VP = load i64*, i64** %Sp_Var
  %ln9VQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VO( i64* %Base_Arg, i64* %ln9VP, i64* %Hp_Arg, i64 %ln9VQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9UG:
  %ln9VR = load i64, i64* %R3_Var
  store i64 %ln9VR, i64* %R3_Var
  %ln9VS = load i64, i64* %R2_Var
  store i64 %ln9VS, i64* %R2_Var
  %ln9VT = ptrtoint %Main_zdszczuf_closure_struct* @Main_zdszczuf_closure$def to i64
  store i64 %ln9VT, i64* %R1_Var
  %ln9VU = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9VV = bitcast i64* %ln9VU to i64*
  %ln9VW = load i64, i64* %ln9VV, !tbaa !5
  %ln9VX = inttoptr i64 %ln9VW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VY = load i64*, i64** %Sp_Var
  %ln9VZ = load i64, i64* %R1_Var
  %ln9W0 = load i64, i64* %R2_Var
  %ln9W1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VX( i64* %Base_Arg, i64* %ln9VY, i64* %Hp_Arg, i64 %ln9VZ, i64 %ln9W0, i64 %ln9W1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_c9UA = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UA$def to i8*)
define internal ghccc void @_c9UA$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
n9W2:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9UA
c9UA:
  %ln9W4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i64
  %ln9W3 = load i64*, i64** %Sp_Var
  %ln9W5 = getelementptr inbounds i64, i64* %ln9W3, i32 -1
  store i64 %ln9W4, i64* %ln9W5, !tbaa !2
  %ln9W6 = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9W7 = add i64 %ln9W6, 1
  store i64 %ln9W7, i64* %R3_Var
  %ln9W8 = load i64*, i64** %Sp_Var
  %ln9W9 = getelementptr inbounds i64, i64* %ln9W8, i32 1
  %ln9Wa = bitcast i64* %ln9W9 to i64*
  %ln9Wb = load i64, i64* %ln9Wa, !tbaa !2
  store i64 %ln9Wb, i64* %R2_Var
  %ln9Wc = load i64*, i64** %Sp_Var
  %ln9Wd = getelementptr inbounds i64, i64* %ln9Wc, i32 -1
  %ln9We = ptrtoint i64* %ln9Wd to i64
  %ln9Wf = inttoptr i64 %ln9We to i64*
  store i64* %ln9Wf, i64** %Sp_Var
  %ln9Wg = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerRem_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Wh = load i64*, i64** %Sp_Var
  %ln9Wi = load i64, i64* %R2_Var
  %ln9Wj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Wg( i64* %Base_Arg, i64* %ln9Wh, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Wi, i64 %ln9Wj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9UD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i8*)
define internal ghccc void @c9UD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vx_srt_struct* @_u9Vx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i64)) to i32),i32 0)}>
{
n9Wk:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9UD
c9UD:
  %ln9Wl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UK_info$def to i64
  %ln9Wm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Wl, i64* %ln9Wm, !tbaa !2
  %ln9Wn = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %ln9Wo = add i64 %ln9Wn, 1
  store i64 %ln9Wo, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9Wp = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Wq = load i64, i64* %R2_Var
  %ln9Wr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Wp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Wq, i64 %ln9Wr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9UK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UK_info$def to i8*)
define internal ghccc void @c9UK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vx_srt_struct* @_u9Vx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UK_info$def to i64)) to i32),i32 0)}>
{
n9Ws:
  %ls59R = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9UK
c9UK:
  %ln9Wt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Wu = bitcast i64* %ln9Wt to i64*
  %ln9Wv = load i64, i64* %ln9Wu, !tbaa !2
  store i64 %ln9Wv, i64* %ls59R
  switch i64 %R1_Arg, label %c9US [i64 1, label %c9Vl]
c9US:
  %ln9Ww = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i64
  %ln9Wx = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Ww, i64* %ln9Wx, !tbaa !2
  %ln9Wy = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %ln9Wz = add i64 %ln9Wy, 1
  store i64 %ln9Wz, i64* %R3_Var
  %ln9WA = load i64, i64* %ls59R
  store i64 %ln9WA, i64* %R2_Var
  %ln9WB = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WC = load i64, i64* %R2_Var
  %ln9WD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9WC, i64 %ln9WD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Vl:
  %ln9WE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vf_info$def to i64
  %ln9WF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9WE, i64* %ln9WF, !tbaa !2
  %ln9WG = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9WH = add i64 %ln9WG, 1
  store i64 %ln9WH, i64* %R3_Var
  %ln9WI = load i64, i64* %ls59R
  store i64 %ln9WI, i64* %R2_Var
  %ln9WJ = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerQuot_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WK = load i64, i64* %R2_Var
  %ln9WL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9WK, i64 %ln9WL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Vf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vf_info$def to i8*)
define internal ghccc void @c9Vf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vx_srt_struct* @_u9Vx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vf_info$def to i64)) to i32),i32 0)}>
{
n9WM:
  %ls59Q = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9Vf
c9Vf:
  %ln9WN = load i64*, i64** %Sp_Var
  %ln9WO = getelementptr inbounds i64, i64* %ln9WN, i32 1
  %ln9WP = bitcast i64* %ln9WO to i64*
  %ln9WQ = load i64, i64* %ln9WP, !tbaa !2
  store i64 %ln9WQ, i64* %ls59Q
  %ln9WS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vj_info$def to i64
  %ln9WR = load i64*, i64** %Sp_Var
  %ln9WT = getelementptr inbounds i64, i64* %ln9WR, i32 1
  store i64 %ln9WS, i64* %ln9WT, !tbaa !2
  %ln9WU = load i64, i64* %ls59Q
  store i64 %ln9WU, i64* %R3_Var
  %ln9WV = load i64, i64* %ls59Q
  store i64 %ln9WV, i64* %R2_Var
  %ln9WW = load i64*, i64** %Sp_Var
  %ln9WX = getelementptr inbounds i64, i64* %ln9WW, i32 2
  store i64 %R1_Arg, i64* %ln9WX, !tbaa !2
  %ln9WY = load i64*, i64** %Sp_Var
  %ln9WZ = getelementptr inbounds i64, i64* %ln9WY, i32 1
  %ln9X0 = ptrtoint i64* %ln9WZ to i64
  %ln9X1 = inttoptr i64 %ln9X0 to i64*
  store i64* %ln9X1, i64** %Sp_Var
  %ln9X2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9X3 = load i64*, i64** %Sp_Var
  %ln9X4 = load i64, i64* %R2_Var
  %ln9X5 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9X2( i64* %Base_Arg, i64* %ln9X3, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9X4, i64 %ln9X5, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Vj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vj_info$def to i8*)
define internal ghccc void @c9Vj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vx_srt_struct* @_u9Vx_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Vj_info$def to i64)) to i32),i32 0)}>
{
n9X6:
  br label %c9Vj
c9Vj:
  %ln9X7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln9X7, !tbaa !2
  %ln9X8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9X9 = bitcast i64* %ln9X8 to i64*
  %ln9Xa = load i64, i64* %ln9X9, !tbaa !2
  %ln9Xb = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln9Xa, i64* %ln9Xb, !tbaa !2
  %ln9Xc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Xc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9UP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i8*)
define internal ghccc void @c9UP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vw_srt_struct* @_u9Vw_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i64)) to i32),i32 0)}>
{
n9Xd:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9UP
c9UP:
  %ln9Xe = load i64, i64* %R1_Var
  switch i64 %ln9Xe, label %c9V3 [i64 1, label %c9Vc]
c9V3:
  %ln9Xg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UW_info$def to i64
  %ln9Xf = load i64*, i64** %Sp_Var
  %ln9Xh = getelementptr inbounds i64, i64* %ln9Xf, i32 0
  store i64 %ln9Xg, i64* %ln9Xh, !tbaa !2
  %ln9Xi = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %ln9Xj = add i64 %ln9Xi, 1
  store i64 %ln9Xj, i64* %R3_Var
  %ln9Xk = load i64*, i64** %Sp_Var
  %ln9Xl = getelementptr inbounds i64, i64* %ln9Xk, i32 2
  %ln9Xm = bitcast i64* %ln9Xl to i64*
  %ln9Xn = load i64, i64* %ln9Xm, !tbaa !2
  store i64 %ln9Xn, i64* %R2_Var
  %ln9Xo = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerQuot_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Xp = load i64*, i64** %Sp_Var
  %ln9Xq = load i64, i64* %R1_Var
  %ln9Xr = load i64, i64* %R2_Var
  %ln9Xs = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Xo( i64* %Base_Arg, i64* %ln9Xp, i64* %Hp_Arg, i64 %ln9Xq, i64 %ln9Xr, i64 %ln9Xs, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Vc:
  %ln9Xt = load i64*, i64** %Sp_Var
  %ln9Xu = getelementptr inbounds i64, i64* %ln9Xt, i32 1
  %ln9Xv = bitcast i64* %ln9Xu to i64*
  %ln9Xw = load i64, i64* %ln9Xv, !tbaa !2
  %ln9Xx = and i64 %ln9Xw, -8
  store i64 %ln9Xx, i64* %R1_Var
  %ln9Xy = load i64*, i64** %Sp_Var
  %ln9Xz = getelementptr inbounds i64, i64* %ln9Xy, i32 3
  %ln9XA = ptrtoint i64* %ln9Xz to i64
  %ln9XB = inttoptr i64 %ln9XA to i64*
  store i64* %ln9XB, i64** %Sp_Var
  %ln9XD = load i64, i64* %R1_Var
  %ln9XE = inttoptr i64 %ln9XD to i64*
  %ln9XF = load i64, i64* %ln9XE, !tbaa !4
  %ln9XG = inttoptr i64 %ln9XF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9XH = load i64*, i64** %Sp_Var
  %ln9XI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9XG( i64* %Base_Arg, i64* %ln9XH, i64* %Hp_Arg, i64 %ln9XI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9UW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UW_info$def to i8*)
define internal ghccc void @c9UW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u9Vv_srt_struct* @_u9Vv_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UW_info$def to i64)) to i32),i32 0)}>
{
n9XJ:
  %ls59Q = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9UW
c9UW:
  %ln9XK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i64
  %ln9XL = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9XK, i64* %ln9XL, !tbaa !2
  %ln9XM = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9XN = bitcast i64* %ln9XM to i64*
  %ln9XO = load i64, i64* %ln9XN, !tbaa !2
  store i64 %ln9XO, i64* %ls59Q
  %ln9XP = load i64, i64* %ls59Q
  store i64 %ln9XP, i64* %R3_Var
  %ln9XQ = load i64, i64* %ls59Q
  store i64 %ln9XQ, i64* %R2_Var
  %ln9XR = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %R1_Arg, i64* %ln9XR, !tbaa !2
  %ln9XS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9XT = load i64, i64* %R2_Var
  %ln9XU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9XS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9XT, i64 %ln9XU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9V0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i8*)
define internal ghccc void @c9V0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r55h_closure_struct* @r55h_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i64)) to i32),i32 0)}>
{
n9XV:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9V0
c9V0:
  %ln9XW = load i64*, i64** %Sp_Var
  %ln9XX = getelementptr inbounds i64, i64* %ln9XW, i32 1
  %ln9XY = bitcast i64* %ln9XX to i64*
  %ln9XZ = load i64, i64* %ln9XY, !tbaa !2
  store i64 %ln9XZ, i64* %R4_Var
  %ln9Y0 = load i64*, i64** %Sp_Var
  %ln9Y1 = getelementptr inbounds i64, i64* %ln9Y0, i32 2
  %ln9Y2 = bitcast i64* %ln9Y1 to i64*
  %ln9Y3 = load i64, i64* %ln9Y2, !tbaa !2
  store i64 %ln9Y3, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9Y4 = load i64*, i64** %Sp_Var
  %ln9Y5 = getelementptr inbounds i64, i64* %ln9Y4, i32 3
  %ln9Y6 = ptrtoint i64* %ln9Y5 to i64
  %ln9Y7 = inttoptr i64 %ln9Y6 to i64*
  store i64* %ln9Y7, i64** %Sp_Var
  %ln9Y8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55h_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Y9 = load i64*, i64** %Sp_Var
  %ln9Ya = load i64, i64* %R2_Var
  %ln9Yb = load i64, i64* %R3_Var
  %ln9Yc = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Y8( i64* %Base_Arg, i64* %ln9Y9, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Ya, i64 %ln9Yb, i64 %ln9Yc, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55G_closure_struct = type <{i64, i64, i64, i64}>
@r55G_closure$def = internal global %r55G_closure_struct<{i64 ptrtoint (i8* @base_GHCziReal_ZCzv_con_info to i64), i64 add (i64 ptrtoint (%Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziReal_zdfEnumRatio1_closure to i64),i64 1), i64 3}>
@r55G_closure = internal alias i8, bitcast (%r55G_closure_struct* @r55G_closure$def to i8*)
%_ua16_srt_struct = type <{i64, i64, i64, i64}>
%_ua17_srt_struct = type <{i64, i64, i64, i64}>
%_ua18_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdfFloatingPszuzdszdcsqrt_closure_struct = type <{i64, i64}>
@_ua16_srt$def = internal global %_ua16_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i64), i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64), i64 0}>
@_ua16_srt = internal alias i8, bitcast (%_ua16_srt_struct* @_ua16_srt$def to i8*)
@_ua17_srt$def = internal global %_ua17_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i64), i64 ptrtoint (i8* @_ua16_srt to i64), i64 0}>
@_ua17_srt = internal alias i8, bitcast (%_ua17_srt_struct* @_ua17_srt$def to i8*)
@_ua18_srt$def = internal global %_ua18_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r55H_closure_struct* @r55H_closure$def to i64), i64 ptrtoint (i8* @_ua17_srt to i64), i64 0}>
@_ua18_srt = internal alias i8, bitcast (%_ua18_srt_struct* @_ua18_srt$def to i8*)
@Main_zdfFloatingPszuzdszdcsqrt_closure$def = internal global %Main_zdfFloatingPszuzdszdcsqrt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdcsqrt_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdszdcsqrt_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i8*)
@s5gm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gm_info$def to i8*)
define internal ghccc void @s5gm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua17_srt_struct* @_ua17_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gm_info$def to i64)) to i32),i32 0)}>
{
na19:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9YR
c9YR:
  %lna1a = load i64*, i64** %Sp_Var
  %lna1b = getelementptr inbounds i64, i64* %lna1a, i32 -4
  %lna1c = ptrtoint i64* %lna1b to i64
  %lna1d = icmp ult i64 %lna1c, %SpLim_Arg
  %lna1e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna1d, i1 0 )
  br i1 %lna1e, label %c9YZ, label %c9Z0
c9Z0:
  %lna1g = ptrtoint i8* @stg_upd_frame_info to i64
  %lna1f = load i64*, i64** %Sp_Var
  %lna1h = getelementptr inbounds i64, i64* %lna1f, i32 -2
  store i64 %lna1g, i64* %lna1h, !tbaa !2
  %lna1j = load i64, i64* %R1_Var
  %lna1i = load i64*, i64** %Sp_Var
  %lna1k = getelementptr inbounds i64, i64* %lna1i, i32 -1
  store i64 %lna1j, i64* %lna1k, !tbaa !2
  %lna1m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YP_info$def to i64
  %lna1l = load i64*, i64** %Sp_Var
  %lna1n = getelementptr inbounds i64, i64* %lna1l, i32 -4
  store i64 %lna1m, i64* %lna1n, !tbaa !2
  %lna1q = load i64, i64* %R1_Var
  %lna1r = add i64 %lna1q, 24
  %lna1s = inttoptr i64 %lna1r to i64*
  %lna1t = load i64, i64* %lna1s, !tbaa !4
  store i64 %lna1t, i64* %R3_Var
  %lna1u = ptrtoint %r55G_closure_struct* @r55G_closure$def to i64
  %lna1v = add i64 %lna1u, 1
  store i64 %lna1v, i64* %R2_Var
  %lna1z = load i64, i64* %R1_Var
  %lna1A = add i64 %lna1z, 16
  %lna1B = inttoptr i64 %lna1A to i64*
  %lna1C = load i64, i64* %lna1B, !tbaa !4
  %lna1w = load i64*, i64** %Sp_Var
  %lna1D = getelementptr inbounds i64, i64* %lna1w, i32 -3
  store i64 %lna1C, i64* %lna1D, !tbaa !2
  %lna1E = load i64*, i64** %Sp_Var
  %lna1F = getelementptr inbounds i64, i64* %lna1E, i32 -4
  %lna1G = ptrtoint i64* %lna1F to i64
  %lna1H = inttoptr i64 %lna1G to i64*
  store i64* %lna1H, i64** %Sp_Var
  %lna1I = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ziztzuzdszizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1J = load i64*, i64** %Sp_Var
  %lna1K = load i64, i64* %R1_Var
  %lna1L = load i64, i64* %R2_Var
  %lna1M = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1I( i64* %Base_Arg, i64* %lna1J, i64* %Hp_Arg, i64 %lna1K, i64 %lna1L, i64 %lna1M, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9YZ:
  %lna1N = load i64, i64* %R1_Var
  store i64 %lna1N, i64* %R1_Var
  %lna1O = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna1P = bitcast i64* %lna1O to i64*
  %lna1Q = load i64, i64* %lna1P, !tbaa !5
  %lna1R = inttoptr i64 %lna1Q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1S = load i64*, i64** %Sp_Var
  %lna1T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1R( i64* %Base_Arg, i64* %lna1S, i64* %Hp_Arg, i64 %lna1T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9YP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YP_info$def to i8*)
define internal ghccc void @c9YP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua17_srt_struct* @_ua17_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YP_info$def to i64)) to i32),i32 0)}>
{
na1U:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9YP
c9YP:
  %lna1V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YU_info$def to i64
  %lna1W = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna1V, i64* %lna1W, !tbaa !2
  %lna1X = ptrtoint %Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64
  %lna1Y = add i64 %lna1X, 1
  store i64 %lna1Y, i64* %R3_Var
  %lna1Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lna20 = bitcast i64* %lna1Z to i64*
  %lna21 = load i64, i64* %lna20, !tbaa !2
  store i64 %lna21, i64* %R2_Var
  %lna22 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %R1_Arg, i64* %lna22, !tbaa !2
  %lna23 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_derivzuderiv1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna24 = load i64, i64* %R2_Var
  %lna25 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna23( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna24, i64 %lna25, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9YU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YU_info$def to i8*)
define internal ghccc void @c9YU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua16_srt_struct* @_ua16_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YU_info$def to i64)) to i32),i32 0)}>
{
na26:
  %ls5gk = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9YU
c9YU:
  %lna27 = load i64*, i64** %Sp_Var
  %lna28 = getelementptr inbounds i64, i64* %lna27, i32 1
  %lna29 = bitcast i64* %lna28 to i64*
  %lna2a = load i64, i64* %lna29, !tbaa !2
  store i64 %lna2a, i64* %ls5gk
  %lna2c = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YY_info$def to i64
  %lna2b = load i64*, i64** %Sp_Var
  %lna2d = getelementptr inbounds i64, i64* %lna2b, i32 1
  store i64 %lna2c, i64* %lna2d, !tbaa !2
  %lna2e = load i64, i64* %ls5gk
  store i64 %lna2e, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lna2f = load i64*, i64** %Sp_Var
  %lna2g = getelementptr inbounds i64, i64* %lna2f, i32 1
  %lna2h = ptrtoint i64* %lna2g to i64
  %lna2i = inttoptr i64 %lna2h to i64*
  store i64* %lna2i, i64** %Sp_Var
  %lna2j = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2k = load i64*, i64** %Sp_Var
  %lna2l = load i64, i64* %R2_Var
  %lna2m = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2j( i64* %Base_Arg, i64* %lna2k, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna2l, i64 %lna2m, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9YY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YY_info$def to i8*)
define internal ghccc void @c9YY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YY_info$def to i64)) to i32),i32 0)}>
{
na2n:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9YY
c9YY:
  %lna2o = ptrtoint %Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64
  %lna2p = add i64 %lna2o, 1
  store i64 %lna2p, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lna2q = load i64*, i64** %Sp_Var
  %lna2r = getelementptr inbounds i64, i64* %lna2q, i32 1
  %lna2s = ptrtoint i64* %lna2r to i64
  %lna2t = inttoptr i64 %lna2s to i64*
  store i64* %lna2t, i64** %Sp_Var
  %lna2u = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2v = load i64*, i64** %Sp_Var
  %lna2w = load i64, i64* %R2_Var
  %lna2x = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2u( i64* %Base_Arg, i64* %lna2v, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna2w, i64 %lna2x, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gi_info$def to i8*)
define internal ghccc void @s5gi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua17_srt_struct* @_ua17_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gi_info$def to i64)) to i32),i32 0)}>
{
na2y:
  %ls5gi = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5ga = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9Z8
c9Z8:
  %lna2z = load i64, i64* %R1_Var
  store i64 %lna2z, i64* %ls5gi
  %lna2A = load i64*, i64** %Sp_Var
  %lna2B = getelementptr inbounds i64, i64* %lna2A, i32 -2
  %lna2C = ptrtoint i64* %lna2B to i64
  %lna2D = icmp ult i64 %lna2C, %SpLim_Arg
  %lna2E = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna2D, i1 0 )
  br i1 %lna2E, label %c9Z9, label %c9Za
c9Za:
  %lna2F = load i64*, i64** %Hp_Var
  %lna2G = getelementptr inbounds i64, i64* %lna2F, i32 7
  %lna2H = ptrtoint i64* %lna2G to i64
  %lna2I = inttoptr i64 %lna2H to i64*
  store i64* %lna2I, i64** %Hp_Var
  %lna2J = load i64*, i64** %Hp_Var
  %lna2K = ptrtoint i64* %lna2J to i64
  %lna2L = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna2M = bitcast i64* %lna2L to i64*
  %lna2N = load i64, i64* %lna2M, !tbaa !5
  %lna2O = icmp ugt i64 %lna2K, %lna2N
  %lna2P = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna2O, i1 0 )
  br i1 %lna2P, label %c9Zc, label %c9Zb
c9Zb:
  %lna2R = ptrtoint i8* @stg_upd_frame_info to i64
  %lna2Q = load i64*, i64** %Sp_Var
  %lna2S = getelementptr inbounds i64, i64* %lna2Q, i32 -2
  store i64 %lna2R, i64* %lna2S, !tbaa !2
  %lna2U = load i64, i64* %ls5gi
  %lna2T = load i64*, i64** %Sp_Var
  %lna2V = getelementptr inbounds i64, i64* %lna2T, i32 -1
  store i64 %lna2U, i64* %lna2V, !tbaa !2
  %lna2W = load i64, i64* %ls5gi
  %lna2X = add i64 %lna2W, 16
  %lna2Y = inttoptr i64 %lna2X to i64*
  %lna2Z = load i64, i64* %lna2Y, !tbaa !1
  store i64 %lna2Z, i64* %ls5ga
  %lna31 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gm_info$def to i64
  %lna30 = load i64*, i64** %Hp_Var
  %lna32 = getelementptr inbounds i64, i64* %lna30, i32 -6
  store i64 %lna31, i64* %lna32, !tbaa !3
  %lna34 = load i64, i64* %ls5ga
  %lna33 = load i64*, i64** %Hp_Var
  %lna35 = getelementptr inbounds i64, i64* %lna33, i32 -4
  store i64 %lna34, i64* %lna35, !tbaa !3
  %lna37 = load i64, i64* %ls5gi
  %lna36 = load i64*, i64** %Hp_Var
  %lna38 = getelementptr inbounds i64, i64* %lna36, i32 -3
  store i64 %lna37, i64* %lna38, !tbaa !3
  %lna3a = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lna39 = load i64*, i64** %Hp_Var
  %lna3b = getelementptr inbounds i64, i64* %lna39, i32 -2
  store i64 %lna3a, i64* %lna3b, !tbaa !3
  %lna3d = ptrtoint %Main_integral1_closure_struct* @Main_integral1_closure$def to i64
  %lna3e = add i64 %lna3d, 1
  %lna3c = load i64*, i64** %Hp_Var
  %lna3f = getelementptr inbounds i64, i64* %lna3c, i32 -1
  store i64 %lna3e, i64* %lna3f, !tbaa !3
  %lna3h = load i64*, i64** %Hp_Var
  %lna3i = getelementptr inbounds i64, i64* %lna3h, i32 -6
  %lna3j = ptrtoint i64* %lna3i to i64
  %lna3g = load i64*, i64** %Hp_Var
  %lna3k = getelementptr inbounds i64, i64* %lna3g, i32 0
  store i64 %lna3j, i64* %lna3k, !tbaa !3
  %lna3m = load i64*, i64** %Hp_Var
  %lna3n = ptrtoint i64* %lna3m to i64
  %lna3o = add i64 %lna3n, -14
  store i64 %lna3o, i64* %R3_Var
  %lna3p = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %lna3q = add i64 %lna3p, 2
  store i64 %lna3q, i64* %R2_Var
  %lna3r = load i64*, i64** %Sp_Var
  %lna3s = getelementptr inbounds i64, i64* %lna3r, i32 -2
  %lna3t = ptrtoint i64* %lna3s to i64
  %lna3u = inttoptr i64 %lna3t to i64*
  store i64* %lna3u, i64** %Sp_Var
  %lna3v = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3w = load i64*, i64** %Sp_Var
  %lna3x = load i64*, i64** %Hp_Var
  %lna3y = load i64, i64* %R1_Var
  %lna3z = load i64, i64* %R2_Var
  %lna3A = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3v( i64* %Base_Arg, i64* %lna3w, i64* %lna3x, i64 %lna3y, i64 %lna3z, i64 %lna3A, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Zc:
  %lna3B = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lna3B, !tbaa !5
  br label %c9Z9
c9Z9:
  %lna3C = load i64, i64* %ls5gi
  store i64 %lna3C, i64* %R1_Var
  %lna3D = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna3E = bitcast i64* %lna3D to i64*
  %lna3F = load i64, i64* %lna3E, !tbaa !5
  %lna3G = inttoptr i64 %lna3F to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3H = load i64*, i64** %Sp_Var
  %lna3I = load i64*, i64** %Hp_Var
  %lna3J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3G( i64* %Base_Arg, i64* %lna3H, i64* %lna3I, i64 %lna3J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gy_info$def to i8*)
define internal ghccc void @s5gy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gy_info$def to i64)) to i32),i32 0)}>
{
na3K:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9ZM
c9ZM:
  %lna3L = load i64*, i64** %Sp_Var
  %lna3M = getelementptr inbounds i64, i64* %lna3L, i32 -2
  %lna3N = ptrtoint i64* %lna3M to i64
  %lna3O = icmp ult i64 %lna3N, %SpLim_Arg
  %lna3P = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna3O, i1 0 )
  br i1 %lna3P, label %c9ZN, label %c9ZO
c9ZO:
  %lna3R = ptrtoint i8* @stg_upd_frame_info to i64
  %lna3Q = load i64*, i64** %Sp_Var
  %lna3S = getelementptr inbounds i64, i64* %lna3Q, i32 -2
  store i64 %lna3R, i64* %lna3S, !tbaa !2
  %lna3U = load i64, i64* %R1_Var
  %lna3T = load i64*, i64** %Sp_Var
  %lna3V = getelementptr inbounds i64, i64* %lna3T, i32 -1
  store i64 %lna3U, i64* %lna3V, !tbaa !2
  %lna3Y = load i64, i64* %R1_Var
  %lna3Z = add i64 %lna3Y, 16
  %lna40 = inttoptr i64 %lna3Z to i64*
  %lna41 = load i64, i64* %lna40, !tbaa !4
  store i64 %lna41, i64* %R2_Var
  %lna42 = load i64*, i64** %Sp_Var
  %lna43 = getelementptr inbounds i64, i64* %lna42, i32 -2
  %lna44 = ptrtoint i64* %lna43 to i64
  %lna45 = inttoptr i64 %lna44 to i64*
  store i64* %lna45, i64** %Sp_Var
  %lna46 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdcsqrt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna47 = load i64*, i64** %Sp_Var
  %lna48 = load i64, i64* %R1_Var
  %lna49 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna46( i64* %Base_Arg, i64* %lna47, i64* %Hp_Arg, i64 %lna48, i64 %lna49, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ZN:
  %lna4a = load i64, i64* %R1_Var
  store i64 %lna4a, i64* %R1_Var
  %lna4b = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna4c = bitcast i64* %lna4b to i64*
  %lna4d = load i64, i64* %lna4c, !tbaa !5
  %lna4e = inttoptr i64 %lna4d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4f = load i64*, i64** %Sp_Var
  %lna4g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4e( i64* %Base_Arg, i64* %lna4f, i64* %Hp_Arg, i64 %lna4g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFloatingPszuzdszdcsqrt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdcsqrt_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdszdcsqrt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua18_srt_struct* @_ua18_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdcsqrt_info$def to i64)) to i32),i32 0)}>
{
na4h:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c9ZT
c9ZT:
  %lna4i = load i64*, i64** %Sp_Var
  %lna4j = getelementptr inbounds i64, i64* %lna4i, i32 -6
  %lna4k = ptrtoint i64* %lna4j to i64
  %lna4l = icmp ult i64 %lna4k, %SpLim_Arg
  %lna4m = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna4l, i1 0 )
  br i1 %lna4m, label %c9ZU, label %c9ZV
c9ZV:
  %lna4o = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yh_info$def to i64
  %lna4n = load i64*, i64** %Sp_Var
  %lna4p = getelementptr inbounds i64, i64* %lna4n, i32 -1
  store i64 %lna4o, i64* %lna4p, !tbaa !2
  %lna4q = load i64, i64* %R2_Var
  store i64 %lna4q, i64* %R1_Var
  %lna4r = load i64*, i64** %Sp_Var
  %lna4s = getelementptr inbounds i64, i64* %lna4r, i32 -1
  %lna4t = ptrtoint i64* %lna4s to i64
  %lna4u = inttoptr i64 %lna4t to i64*
  store i64* %lna4u, i64** %Sp_Var
  %lna4v = load i64, i64* %R1_Var
  %lna4w = and i64 %lna4v, 7
  %lna4x = icmp ne i64 %lna4w, 0
  br i1 %lna4x, label %ua15, label %c9Yi
c9Yi:
  %lna4z = load i64, i64* %R1_Var
  %lna4A = inttoptr i64 %lna4z to i64*
  %lna4B = load i64, i64* %lna4A, !tbaa !4
  %lna4C = inttoptr i64 %lna4B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4D = load i64*, i64** %Sp_Var
  %lna4E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4C( i64* %Base_Arg, i64* %lna4D, i64* %Hp_Arg, i64 %lna4E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua15:
  %lna4F = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4G = load i64*, i64** %Sp_Var
  %lna4H = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4F( i64* %Base_Arg, i64* %lna4G, i64* %Hp_Arg, i64 %lna4H, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ZU:
  %lna4I = load i64, i64* %R2_Var
  store i64 %lna4I, i64* %R2_Var
  %lna4J = ptrtoint %Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64
  store i64 %lna4J, i64* %R1_Var
  %lna4K = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lna4L = bitcast i64* %lna4K to i64*
  %lna4M = load i64, i64* %lna4L, !tbaa !5
  %lna4N = inttoptr i64 %lna4M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4O = load i64*, i64** %Sp_Var
  %lna4P = load i64, i64* %R1_Var
  %lna4Q = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4N( i64* %Base_Arg, i64* %lna4O, i64* %Hp_Arg, i64 %lna4P, i64 %lna4Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Yh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yh_info$def to i8*)
define internal ghccc void @c9Yh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yh_info$def to i64)) to i32),i32 0)}>
{
na4R:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5ga = alloca i64, i32 1
  br label %c9Yh
c9Yh:
  %lna4S = load i64, i64* %R1_Var
  %lna4T = and i64 %lna4S, 7
  switch i64 %lna4T, label %c9ZQ [i64 1, label %c9ZQ
i64 2, label %c9ZR]
c9ZQ:
  %lna4U = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %lna4V = add i64 %lna4U, 1
  store i64 %lna4V, i64* %R1_Var
  %lna4W = load i64*, i64** %Sp_Var
  %lna4X = getelementptr inbounds i64, i64* %lna4W, i32 1
  %lna4Y = ptrtoint i64* %lna4X to i64
  %lna4Z = inttoptr i64 %lna4Y to i64*
  store i64* %lna4Z, i64** %Sp_Var
  %lna50 = load i64*, i64** %Sp_Var
  %lna51 = getelementptr inbounds i64, i64* %lna50, i32 0
  %lna52 = bitcast i64* %lna51 to i64*
  %lna53 = load i64, i64* %lna52, !tbaa !2
  %lna54 = inttoptr i64 %lna53 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna55 = load i64*, i64** %Sp_Var
  %lna56 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna54( i64* %Base_Arg, i64* %lna55, i64* %Hp_Arg, i64 %lna56, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ZR:
  %lna58 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yn_info$def to i64
  %lna57 = load i64*, i64** %Sp_Var
  %lna59 = getelementptr inbounds i64, i64* %lna57, i32 -1
  store i64 %lna58, i64* %lna59, !tbaa !2
  %lna5c = load i64, i64* %R1_Var
  %lna5d = add i64 %lna5c, 14
  %lna5e = inttoptr i64 %lna5d to i64*
  %lna5f = load i64, i64* %lna5e, !tbaa !4
  store i64 %lna5f, i64* %ls5ga
  %lna5i = load i64, i64* %R1_Var
  %lna5j = add i64 %lna5i, 6
  %lna5k = inttoptr i64 %lna5j to i64*
  %lna5l = load i64, i64* %lna5k, !tbaa !4
  store i64 %lna5l, i64* %R1_Var
  %lna5n = load i64, i64* %ls5ga
  %lna5m = load i64*, i64** %Sp_Var
  %lna5o = getelementptr inbounds i64, i64* %lna5m, i32 0
  store i64 %lna5n, i64* %lna5o, !tbaa !2
  %lna5p = load i64*, i64** %Sp_Var
  %lna5q = getelementptr inbounds i64, i64* %lna5p, i32 -1
  %lna5r = ptrtoint i64* %lna5q to i64
  %lna5s = inttoptr i64 %lna5r to i64*
  store i64* %lna5s, i64** %Sp_Var
  %lna5t = load i64, i64* %R1_Var
  %lna5u = and i64 %lna5t, 7
  %lna5v = icmp ne i64 %lna5u, 0
  br i1 %lna5v, label %ua0V, label %c9Yo
c9Yo:
  %lna5x = load i64, i64* %R1_Var
  %lna5y = inttoptr i64 %lna5x to i64*
  %lna5z = load i64, i64* %lna5y, !tbaa !4
  %lna5A = inttoptr i64 %lna5z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5B = load i64*, i64** %Sp_Var
  %lna5C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5A( i64* %Base_Arg, i64* %lna5B, i64* %Hp_Arg, i64 %lna5C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua0V:
  %lna5D = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5E = load i64*, i64** %Sp_Var
  %lna5F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5D( i64* %Base_Arg, i64* %lna5E, i64* %Hp_Arg, i64 %lna5F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Yn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yn_info$def to i8*)
define internal ghccc void @c9Yn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yn_info$def to i64)) to i32),i32 0)}>
{
na5G:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %ls5gc = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9Yn
c9Yn:
  %lna5I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zd_info$def to i64
  %lna5H = load i64*, i64** %Sp_Var
  %lna5J = getelementptr inbounds i64, i64* %lna5H, i32 -2
  store i64 %lna5I, i64* %lna5J, !tbaa !2
  %lna5K = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lna5L = add i64 %lna5K, 1
  store i64 %lna5L, i64* %R3_Var
  %lna5M = add i64 %R1_Arg, 7
  %lna5N = inttoptr i64 %lna5M to i64*
  %lna5O = load i64, i64* %lna5N, !tbaa !4
  store i64 %lna5O, i64* %ls5gc
  %lna5P = load i64, i64* %ls5gc
  store i64 %lna5P, i64* %R2_Var
  %lna5R = add i64 %R1_Arg, 15
  %lna5S = inttoptr i64 %lna5R to i64*
  %lna5T = load i64, i64* %lna5S, !tbaa !4
  %lna5Q = load i64*, i64** %Sp_Var
  %lna5U = getelementptr inbounds i64, i64* %lna5Q, i32 -1
  store i64 %lna5T, i64* %lna5U, !tbaa !2
  %lna5W = load i64, i64* %ls5gc
  %lna5V = load i64*, i64** %Sp_Var
  %lna5X = getelementptr inbounds i64, i64* %lna5V, i32 0
  store i64 %lna5W, i64* %lna5X, !tbaa !2
  %lna5Y = load i64*, i64** %Sp_Var
  %lna5Z = getelementptr inbounds i64, i64* %lna5Y, i32 -2
  %lna60 = ptrtoint i64* %lna5Z to i64
  %lna61 = inttoptr i64 %lna60 to i64*
  store i64* %lna61, i64** %Sp_Var
  %lna62 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna63 = load i64*, i64** %Sp_Var
  %lna64 = load i64, i64* %R2_Var
  %lna65 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna62( i64* %Base_Arg, i64* %lna63, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna64, i64 %lna65, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Zd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zd_info$def to i8*)
define internal ghccc void @c9Zd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zd_info$def to i64)) to i32),i32 0)}>
{
na66:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Zd
c9Zd:
  switch i64 %R1_Arg, label %ua0O [i64 1, label %ca0k]
ua0O:
  %lna67 = load i64*, i64** %Sp_Var
  %lna68 = getelementptr inbounds i64, i64* %lna67, i32 1
  %lna69 = ptrtoint i64* %lna68 to i64
  %lna6a = inttoptr i64 %lna69 to i64*
  store i64* %lna6a, i64** %Sp_Var
  %lna6b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6c = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6b( i64* %Base_Arg, i64* %lna6c, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0k:
  %lna6e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zi_info$def to i64
  %lna6d = load i64*, i64** %Sp_Var
  %lna6f = getelementptr inbounds i64, i64* %lna6d, i32 0
  store i64 %lna6e, i64* %lna6f, !tbaa !2
  %lna6g = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %lna6h = add i64 %lna6g, 1
  store i64 %lna6h, i64* %R3_Var
  %lna6i = load i64*, i64** %Sp_Var
  %lna6j = getelementptr inbounds i64, i64* %lna6i, i32 1
  %lna6k = bitcast i64* %lna6j to i64*
  %lna6l = load i64, i64* %lna6k, !tbaa !2
  store i64 %lna6l, i64* %R2_Var
  %lna6m = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6n = load i64*, i64** %Sp_Var
  %lna6o = load i64, i64* %R2_Var
  %lna6p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6m( i64* %Base_Arg, i64* %lna6n, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna6o, i64 %lna6p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Zi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zi_info$def to i8*)
define internal ghccc void @c9Zi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zi_info$def to i64)) to i32),i32 0)}>
{
na6q:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9Zi
c9Zi:
  %lna6r = load i64, i64* %R1_Var
  switch i64 %lna6r, label %ua0P [i64 1, label %ca0q]
ua0P:
  %lna6s = load i64*, i64** %Sp_Var
  %lna6t = getelementptr inbounds i64, i64* %lna6s, i32 1
  %lna6u = ptrtoint i64* %lna6t to i64
  %lna6v = inttoptr i64 %lna6u to i64*
  store i64* %lna6v, i64** %Sp_Var
  %lna6w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6x = load i64*, i64** %Sp_Var
  %lna6y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6w( i64* %Base_Arg, i64* %lna6x, i64* %Hp_Arg, i64 %lna6y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0q:
  %lna6A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zn_info$def to i64
  %lna6z = load i64*, i64** %Sp_Var
  %lna6B = getelementptr inbounds i64, i64* %lna6z, i32 0
  store i64 %lna6A, i64* %lna6B, !tbaa !2
  %lna6C = load i64*, i64** %Sp_Var
  %lna6D = getelementptr inbounds i64, i64* %lna6C, i32 3
  %lna6E = bitcast i64* %lna6D to i64*
  %lna6F = load i64, i64* %lna6E, !tbaa !2
  store i64 %lna6F, i64* %R1_Var
  %lna6G = load i64, i64* %R1_Var
  %lna6H = and i64 %lna6G, 7
  %lna6I = icmp ne i64 %lna6H, 0
  br i1 %lna6I, label %ua0Z, label %c9Zo
c9Zo:
  %lna6K = load i64, i64* %R1_Var
  %lna6L = inttoptr i64 %lna6K to i64*
  %lna6M = load i64, i64* %lna6L, !tbaa !4
  %lna6N = inttoptr i64 %lna6M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6O = load i64*, i64** %Sp_Var
  %lna6P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6N( i64* %Base_Arg, i64* %lna6O, i64* %Hp_Arg, i64 %lna6P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua0Z:
  %lna6Q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6R = load i64*, i64** %Sp_Var
  %lna6S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6Q( i64* %Base_Arg, i64* %lna6R, i64* %Hp_Arg, i64 %lna6S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Zn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zn_info$def to i8*)
define internal ghccc void @c9Zn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zn_info$def to i64)) to i32),i32 0)}>
{
na6T:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5gs = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9Zn
c9Zn:
  %lna6U = load i64, i64* %R1_Var
  %lna6V = and i64 %lna6U, 7
  switch i64 %lna6V, label %ua0Q [i64 1, label %ua0Q
i64 2, label %ca0w]
ua0Q:
  %lna6W = load i64*, i64** %Sp_Var
  %lna6X = getelementptr inbounds i64, i64* %lna6W, i32 1
  %lna6Y = ptrtoint i64* %lna6X to i64
  %lna6Z = inttoptr i64 %lna6Y to i64*
  store i64* %lna6Z, i64** %Sp_Var
  %lna70 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna71 = load i64*, i64** %Sp_Var
  %lna72 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna70( i64* %Base_Arg, i64* %lna71, i64* %Hp_Arg, i64 %lna72, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0w:
  %lna74 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zt_info$def to i64
  %lna73 = load i64*, i64** %Sp_Var
  %lna75 = getelementptr inbounds i64, i64* %lna73, i32 -1
  store i64 %lna74, i64* %lna75, !tbaa !2
  %lna78 = load i64, i64* %R1_Var
  %lna79 = add i64 %lna78, 14
  %lna7a = inttoptr i64 %lna79 to i64*
  %lna7b = load i64, i64* %lna7a, !tbaa !4
  store i64 %lna7b, i64* %ls5gs
  %lna7e = load i64, i64* %R1_Var
  %lna7f = add i64 %lna7e, 6
  %lna7g = inttoptr i64 %lna7f to i64*
  %lna7h = load i64, i64* %lna7g, !tbaa !4
  store i64 %lna7h, i64* %R1_Var
  %lna7j = load i64, i64* %ls5gs
  %lna7i = load i64*, i64** %Sp_Var
  %lna7k = getelementptr inbounds i64, i64* %lna7i, i32 0
  store i64 %lna7j, i64* %lna7k, !tbaa !2
  %lna7l = load i64*, i64** %Sp_Var
  %lna7m = getelementptr inbounds i64, i64* %lna7l, i32 -1
  %lna7n = ptrtoint i64* %lna7m to i64
  %lna7o = inttoptr i64 %lna7n to i64*
  store i64* %lna7o, i64** %Sp_Var
  %lna7p = load i64, i64* %R1_Var
  %lna7q = and i64 %lna7p, 7
  %lna7r = icmp ne i64 %lna7q, 0
  br i1 %lna7r, label %ua11, label %c9Zu
c9Zu:
  %lna7t = load i64, i64* %R1_Var
  %lna7u = inttoptr i64 %lna7t to i64*
  %lna7v = load i64, i64* %lna7u, !tbaa !4
  %lna7w = inttoptr i64 %lna7v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7x = load i64*, i64** %Sp_Var
  %lna7y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7w( i64* %Base_Arg, i64* %lna7x, i64* %Hp_Arg, i64 %lna7y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua11:
  %lna7z = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7A = load i64*, i64** %Sp_Var
  %lna7B = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7z( i64* %Base_Arg, i64* %lna7A, i64* %Hp_Arg, i64 %lna7B, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Zt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zt_info$def to i8*)
define internal ghccc void @c9Zt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zt_info$def to i64)) to i32),i32 0)}>
{
na7C:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c9Zt
c9Zt:
  %lna7E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zy_info$def to i64
  %lna7D = load i64*, i64** %Sp_Var
  %lna7F = getelementptr inbounds i64, i64* %lna7D, i32 -1
  store i64 %lna7E, i64* %lna7F, !tbaa !2
  %lna7G = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lna7H = add i64 %lna7G, 1
  store i64 %lna7H, i64* %R3_Var
  %lna7I = add i64 %R1_Arg, 7
  %lna7J = inttoptr i64 %lna7I to i64*
  %lna7K = load i64, i64* %lna7J, !tbaa !4
  store i64 %lna7K, i64* %R2_Var
  %lna7M = add i64 %R1_Arg, 15
  %lna7N = inttoptr i64 %lna7M to i64*
  %lna7O = load i64, i64* %lna7N, !tbaa !4
  %lna7L = load i64*, i64** %Sp_Var
  %lna7P = getelementptr inbounds i64, i64* %lna7L, i32 0
  store i64 %lna7O, i64* %lna7P, !tbaa !2
  %lna7Q = load i64*, i64** %Sp_Var
  %lna7R = getelementptr inbounds i64, i64* %lna7Q, i32 -1
  %lna7S = ptrtoint i64* %lna7R to i64
  %lna7T = inttoptr i64 %lna7S to i64*
  store i64* %lna7T, i64** %Sp_Var
  %lna7U = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7V = load i64*, i64** %Sp_Var
  %lna7W = load i64, i64* %R2_Var
  %lna7X = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7U( i64* %Base_Arg, i64* %lna7V, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna7W, i64 %lna7X, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Zy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zy_info$def to i8*)
define internal ghccc void @c9Zy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Zy_info$def to i64)) to i32),i32 0)}>
{
na7Y:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5gv = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Zy
c9Zy:
  switch i64 %R1_Arg, label %ua0R [i64 1, label %ca0D]
ua0R:
  %lna7Z = load i64*, i64** %Sp_Var
  %lna80 = getelementptr inbounds i64, i64* %lna7Z, i32 3
  %lna81 = ptrtoint i64* %lna80 to i64
  %lna82 = inttoptr i64 %lna81 to i64*
  store i64* %lna82, i64** %Sp_Var
  %lna83 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna84 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna83( i64* %Base_Arg, i64* %lna84, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0D:
  %lna85 = load i64*, i64** %Sp_Var
  %lna86 = getelementptr inbounds i64, i64* %lna85, i32 1
  %lna87 = bitcast i64* %lna86 to i64*
  %lna88 = load i64, i64* %lna87, !tbaa !2
  store i64 %lna88, i64* %ls5gv
  %lna8a = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ZD_info$def to i64
  %lna89 = load i64*, i64** %Sp_Var
  %lna8b = getelementptr inbounds i64, i64* %lna89, i32 1
  store i64 %lna8a, i64* %lna8b, !tbaa !2
  %lna8c = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %lna8d = add i64 %lna8c, 1
  store i64 %lna8d, i64* %R3_Var
  %lna8e = load i64, i64* %ls5gv
  store i64 %lna8e, i64* %R2_Var
  %lna8f = load i64*, i64** %Sp_Var
  %lna8g = getelementptr inbounds i64, i64* %lna8f, i32 1
  %lna8h = ptrtoint i64* %lna8g to i64
  %lna8i = inttoptr i64 %lna8h to i64*
  store i64* %lna8i, i64** %Sp_Var
  %lna8j = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8k = load i64*, i64** %Sp_Var
  %lna8l = load i64, i64* %R2_Var
  %lna8m = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8j( i64* %Base_Arg, i64* %lna8k, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna8l, i64 %lna8m, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9ZD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ZD_info$def to i8*)
define internal ghccc void @c9ZD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ZD_info$def to i64)) to i32),i32 0)}>
{
na8n:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9ZD
c9ZD:
  %lna8o = load i64, i64* %R1_Var
  switch i64 %lna8o, label %ua0S [i64 1, label %ca0J]
ua0S:
  %lna8p = load i64*, i64** %Sp_Var
  %lna8q = getelementptr inbounds i64, i64* %lna8p, i32 2
  %lna8r = ptrtoint i64* %lna8q to i64
  %lna8s = inttoptr i64 %lna8r to i64*
  store i64* %lna8s, i64** %Sp_Var
  %lna8t = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8u = load i64*, i64** %Sp_Var
  %lna8v = load i64*, i64** %Hp_Var
  %lna8w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8t( i64* %Base_Arg, i64* %lna8u, i64* %lna8v, i64 %lna8w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0J:
  %lna8x = load i64*, i64** %Hp_Var
  %lna8y = getelementptr inbounds i64, i64* %lna8x, i32 6
  %lna8z = ptrtoint i64* %lna8y to i64
  %lna8A = inttoptr i64 %lna8z to i64*
  store i64* %lna8A, i64** %Hp_Var
  %lna8B = load i64*, i64** %Hp_Var
  %lna8C = ptrtoint i64* %lna8B to i64
  %lna8D = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna8E = bitcast i64* %lna8D to i64*
  %lna8F = load i64, i64* %lna8E, !tbaa !5
  %lna8G = icmp ugt i64 %lna8C, %lna8F
  %lna8H = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna8G, i1 0 )
  br i1 %lna8H, label %ca0M, label %ca0L
ca0L:
  %lna8J = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gy_info$def to i64
  %lna8I = load i64*, i64** %Hp_Var
  %lna8K = getelementptr inbounds i64, i64* %lna8I, i32 -5
  store i64 %lna8J, i64* %lna8K, !tbaa !3
  %lna8M = load i64*, i64** %Sp_Var
  %lna8N = getelementptr inbounds i64, i64* %lna8M, i32 1
  %lna8O = bitcast i64* %lna8N to i64*
  %lna8P = load i64, i64* %lna8O, !tbaa !2
  %lna8L = load i64*, i64** %Hp_Var
  %lna8Q = getelementptr inbounds i64, i64* %lna8L, i32 -3
  store i64 %lna8P, i64* %lna8Q, !tbaa !3
  %lna8S = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lna8R = load i64*, i64** %Hp_Var
  %lna8T = getelementptr inbounds i64, i64* %lna8R, i32 -2
  store i64 %lna8S, i64* %lna8T, !tbaa !3
  %lna8V = ptrtoint %Main_integral1_closure_struct* @Main_integral1_closure$def to i64
  %lna8W = add i64 %lna8V, 1
  %lna8U = load i64*, i64** %Hp_Var
  %lna8X = getelementptr inbounds i64, i64* %lna8U, i32 -1
  store i64 %lna8W, i64* %lna8X, !tbaa !3
  %lna8Z = load i64*, i64** %Hp_Var
  %lna90 = getelementptr inbounds i64, i64* %lna8Z, i32 -5
  %lna91 = ptrtoint i64* %lna90 to i64
  %lna8Y = load i64*, i64** %Hp_Var
  %lna92 = getelementptr inbounds i64, i64* %lna8Y, i32 0
  store i64 %lna91, i64* %lna92, !tbaa !3
  %lna94 = load i64*, i64** %Hp_Var
  %lna95 = ptrtoint i64* %lna94 to i64
  %lna96 = add i64 %lna95, -14
  store i64 %lna96, i64* %R1_Var
  %lna97 = load i64*, i64** %Sp_Var
  %lna98 = getelementptr inbounds i64, i64* %lna97, i32 5
  %lna99 = ptrtoint i64* %lna98 to i64
  %lna9a = inttoptr i64 %lna99 to i64*
  store i64* %lna9a, i64** %Sp_Var
  %lna9b = load i64*, i64** %Sp_Var
  %lna9c = getelementptr inbounds i64, i64* %lna9b, i32 0
  %lna9d = bitcast i64* %lna9c to i64*
  %lna9e = load i64, i64* %lna9d, !tbaa !2
  %lna9f = inttoptr i64 %lna9e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9g = load i64*, i64** %Sp_Var
  %lna9h = load i64*, i64** %Hp_Var
  %lna9i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9f( i64* %Base_Arg, i64* %lna9g, i64* %lna9h, i64 %lna9i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0M:
  %lna9j = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lna9j, !tbaa !5
  %lna9k = load i64, i64* %R1_Var
  store i64 %lna9k, i64* %R1_Var
  %lna9l = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9m = load i64*, i64** %Sp_Var
  %lna9n = load i64*, i64** %Hp_Var
  %lna9o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9l( i64* %Base_Arg, i64* %lna9m, i64* %lna9n, i64 %lna9o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s5ge = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s5ge$def to i8*)
define internal ghccc void @_s5ge$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
na9p:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s5ge
s5ge:
  %lna9r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yx_info$def to i64
  %lna9q = load i64*, i64** %Sp_Var
  %lna9s = getelementptr inbounds i64, i64* %lna9q, i32 -1
  store i64 %lna9r, i64* %lna9s, !tbaa !2
  %lna9t = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %lna9u = add i64 %lna9t, 1
  store i64 %lna9u, i64* %R3_Var
  %lna9v = load i64*, i64** %Sp_Var
  %lna9w = getelementptr inbounds i64, i64* %lna9v, i32 1
  %lna9x = bitcast i64* %lna9w to i64*
  %lna9y = load i64, i64* %lna9x, !tbaa !2
  store i64 %lna9y, i64* %R2_Var
  %lna9z = load i64*, i64** %Sp_Var
  %lna9A = getelementptr inbounds i64, i64* %lna9z, i32 -1
  %lna9B = ptrtoint i64* %lna9A to i64
  %lna9C = inttoptr i64 %lna9B to i64*
  store i64* %lna9C, i64** %Sp_Var
  %lna9D = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9E = load i64*, i64** %Sp_Var
  %lna9F = load i64, i64* %R2_Var
  %lna9G = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9D( i64* %Base_Arg, i64* %lna9E, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna9F, i64 %lna9G, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Yx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yx_info$def to i8*)
define internal ghccc void @c9Yx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua18_srt_struct* @_ua18_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Yx_info$def to i64)) to i32),i32 0)}>
{
na9H:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c9Yx
c9Yx:
  switch i64 %R1_Arg, label %ua0T [i64 1, label %ca06]
ua0T:
  %lna9I = load i64*, i64** %Sp_Var
  %lna9J = getelementptr inbounds i64, i64* %lna9I, i32 4
  %lna9K = ptrtoint i64* %lna9J to i64
  %lna9L = inttoptr i64 %lna9K to i64*
  store i64* %lna9L, i64** %Sp_Var
  %lna9M = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ca04$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9N = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9M( i64* %Base_Arg, i64* %lna9N, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca06:
  %lna9P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YC_info$def to i64
  %lna9O = load i64*, i64** %Sp_Var
  %lna9Q = getelementptr inbounds i64, i64* %lna9O, i32 2
  store i64 %lna9P, i64* %lna9Q, !tbaa !2
  %lna9R = ptrtoint i8* @base_GHCziReal_zdfEnumRatio1_closure to i64
  %lna9S = add i64 %lna9R, 1
  store i64 %lna9S, i64* %R3_Var
  %lna9T = load i64*, i64** %Sp_Var
  %lna9U = getelementptr inbounds i64, i64* %lna9T, i32 1
  %lna9V = bitcast i64* %lna9U to i64*
  %lna9W = load i64, i64* %lna9V, !tbaa !2
  store i64 %lna9W, i64* %R2_Var
  %lna9X = load i64*, i64** %Sp_Var
  %lna9Y = getelementptr inbounds i64, i64* %lna9X, i32 2
  %lna9Z = ptrtoint i64* %lna9Y to i64
  %lnaa0 = inttoptr i64 %lna9Z to i64*
  store i64* %lnaa0, i64** %Sp_Var
  %lnaa1 = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaa2 = load i64*, i64** %Sp_Var
  %lnaa3 = load i64, i64* %R2_Var
  %lnaa4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaa1( i64* %Base_Arg, i64* %lnaa2, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaa3, i64 %lnaa4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9YC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YC_info$def to i8*)
define internal ghccc void @c9YC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua18_srt_struct* @_ua18_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9YC_info$def to i64)) to i32),i32 0)}>
{
naa5:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c9YC
c9YC:
  %lnaa6 = load i64, i64* %R1_Var
  switch i64 %lnaa6, label %ua0U [i64 1, label %ca0b]
ua0U:
  %lnaa7 = load i64*, i64** %Sp_Var
  %lnaa8 = getelementptr inbounds i64, i64* %lnaa7, i32 2
  %lnaa9 = ptrtoint i64* %lnaa8 to i64
  %lnaaa = inttoptr i64 %lnaa9 to i64*
  store i64* %lnaaa, i64** %Sp_Var
  %lnaab = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ca04$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaac = load i64*, i64** %Sp_Var
  %lnaad = load i64*, i64** %Hp_Var
  %lnaae = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaab( i64* %Base_Arg, i64* %lnaac, i64* %lnaad, i64 %lnaae, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0b:
  %lnaaf = load i64*, i64** %Hp_Var
  %lnaag = getelementptr inbounds i64, i64* %lnaaf, i32 3
  %lnaah = ptrtoint i64* %lnaag to i64
  %lnaai = inttoptr i64 %lnaah to i64*
  store i64* %lnaai, i64** %Hp_Var
  %lnaaj = load i64*, i64** %Hp_Var
  %lnaak = ptrtoint i64* %lnaaj to i64
  %lnaal = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaam = bitcast i64* %lnaal to i64*
  %lnaan = load i64, i64* %lnaam, !tbaa !5
  %lnaao = icmp ugt i64 %lnaak, %lnaan
  %lnaap = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaao, i1 0 )
  br i1 %lnaap, label %ca0e, label %ca0d
ca0d:
  %lnaar = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gi_info$def to i64
  %lnaaq = load i64*, i64** %Hp_Var
  %lnaas = getelementptr inbounds i64, i64* %lnaaq, i32 -2
  store i64 %lnaar, i64* %lnaas, !tbaa !3
  %lnaau = load i64*, i64** %Sp_Var
  %lnaav = getelementptr inbounds i64, i64* %lnaau, i32 1
  %lnaaw = bitcast i64* %lnaav to i64*
  %lnaax = load i64, i64* %lnaaw, !tbaa !2
  %lnaat = load i64*, i64** %Hp_Var
  %lnaay = getelementptr inbounds i64, i64* %lnaat, i32 0
  store i64 %lnaax, i64* %lnaay, !tbaa !3
  %lnaaz = load i64*, i64** %Hp_Var
  %lnaaA = getelementptr inbounds i64, i64* %lnaaz, i32 -2
  %lnaaB = ptrtoint i64* %lnaaA to i64
  %lnaaC = and i64 %lnaaB, -8
  store i64 %lnaaC, i64* %R1_Var
  %lnaaD = load i64*, i64** %Sp_Var
  %lnaaE = getelementptr inbounds i64, i64* %lnaaD, i32 2
  %lnaaF = ptrtoint i64* %lnaaE to i64
  %lnaaG = inttoptr i64 %lnaaF to i64*
  store i64* %lnaaG, i64** %Sp_Var
  %lnaaI = load i64, i64* %R1_Var
  %lnaaJ = inttoptr i64 %lnaaI to i64*
  %lnaaK = load i64, i64* %lnaaJ, !tbaa !4
  %lnaaL = inttoptr i64 %lnaaK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaM = load i64*, i64** %Sp_Var
  %lnaaN = load i64*, i64** %Hp_Var
  %lnaaO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaL( i64* %Base_Arg, i64* %lnaaM, i64* %lnaaN, i64 %lnaaO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0e:
  %lnaaP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnaaP, !tbaa !5
  %lnaaQ = load i64, i64* %R1_Var
  store i64 %lnaaQ, i64* %R1_Var
  %lnaaR = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaS = load i64*, i64** %Sp_Var
  %lnaaT = load i64*, i64** %Hp_Var
  %lnaaU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaR( i64* %Base_Arg, i64* %lnaaS, i64* %lnaaT, i64 %lnaaU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_ca04 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ca04$def to i8*)
define internal ghccc void @_ca04$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
naaV:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ca04
ca04:
  %lnaaW = ptrtoint %r55H_closure_struct* @r55H_closure$def to i64
  store i64 %lnaaW, i64* %R1_Var
  %lnaaY = load i64, i64* %R1_Var
  %lnaaZ = inttoptr i64 %lnaaY to i64*
  %lnab0 = load i64, i64* %lnaaZ, !tbaa !4
  %lnab1 = inttoptr i64 %lnab0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnab2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnab1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnab2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_uaeg_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdfFloatingPszuzdcsqrt_closure_struct = type <{i64, i64}>
@_uaeg_srt$def = internal global %_uaeg_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64), i64 ptrtoint (%r55F_closure_struct* @r55F_closure$def to i64), i64 0}>
@_uaeg_srt = internal alias i8, bitcast (%_uaeg_srt_struct* @_uaeg_srt$def to i8*)
@Main_zdfFloatingPszuzdcsqrt_closure$def = internal global %Main_zdfFloatingPszuzdcsqrt_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcsqrt_info$def to i64), i64 0}>
@Main_zdfFloatingPszuzdcsqrt_closure = alias i8, bitcast (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i8*)
@s5gF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gF_info$def to i8*)
define internal ghccc void @s5gF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
naeh:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cabh
cabh:
  %lnaei = load i64*, i64** %Sp_Var
  %lnaej = getelementptr inbounds i64, i64* %lnaei, i32 -2
  %lnaek = ptrtoint i64* %lnaej to i64
  %lnael = icmp ult i64 %lnaek, %SpLim_Arg
  %lnaem = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnael, i1 0 )
  br i1 %lnaem, label %cabi, label %cabj
cabj:
  %lnaeo = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaen = load i64*, i64** %Sp_Var
  %lnaep = getelementptr inbounds i64, i64* %lnaen, i32 -2
  store i64 %lnaeo, i64* %lnaep, !tbaa !2
  %lnaer = load i64, i64* %R1_Var
  %lnaeq = load i64*, i64** %Sp_Var
  %lnaes = getelementptr inbounds i64, i64* %lnaeq, i32 -1
  store i64 %lnaer, i64* %lnaes, !tbaa !2
  %lnaev = load i64, i64* %R1_Var
  %lnaew = add i64 %lnaev, 16
  %lnaex = inttoptr i64 %lnaew to i64*
  %lnaey = load i64, i64* %lnaex, !tbaa !4
  store i64 %lnaey, i64* %R2_Var
  %lnaez = load i64*, i64** %Sp_Var
  %lnaeA = getelementptr inbounds i64, i64* %lnaez, i32 -2
  %lnaeB = ptrtoint i64* %lnaeA to i64
  %lnaeC = inttoptr i64 %lnaeB to i64*
  store i64* %lnaeC, i64** %Sp_Var
  %lnaeD = bitcast i8* @base_GHCziReal_zdp1Fractional_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaeE = load i64*, i64** %Sp_Var
  %lnaeF = load i64, i64* %R1_Var
  %lnaeG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaeD( i64* %Base_Arg, i64* %lnaeE, i64* %Hp_Arg, i64 %lnaeF, i64 %lnaeG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabi:
  %lnaeH = load i64, i64* %R1_Var
  store i64 %lnaeH, i64* %R1_Var
  %lnaeI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaeJ = bitcast i64* %lnaeI to i64*
  %lnaeK = load i64, i64* %lnaeJ, !tbaa !5
  %lnaeL = inttoptr i64 %lnaeK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaeM = load i64*, i64** %Sp_Var
  %lnaeN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaeL( i64* %Base_Arg, i64* %lnaeM, i64* %Hp_Arg, i64 %lnaeN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gX_info$def to i8*)
define internal ghccc void @s5gX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
naeO:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cabo
cabo:
  %lnaeP = load i64*, i64** %Sp_Var
  %lnaeQ = getelementptr inbounds i64, i64* %lnaeP, i32 -4
  %lnaeR = ptrtoint i64* %lnaeQ to i64
  %lnaeS = icmp ult i64 %lnaeR, %SpLim_Arg
  %lnaeT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaeS, i1 0 )
  br i1 %lnaeT, label %cabp, label %cabq
cabq:
  %lnaeV = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaeU = load i64*, i64** %Sp_Var
  %lnaeW = getelementptr inbounds i64, i64* %lnaeU, i32 -2
  store i64 %lnaeV, i64* %lnaeW, !tbaa !2
  %lnaeY = load i64, i64* %R1_Var
  %lnaeX = load i64*, i64** %Sp_Var
  %lnaeZ = getelementptr inbounds i64, i64* %lnaeX, i32 -1
  store i64 %lnaeY, i64* %lnaeZ, !tbaa !2
  %lnaf2 = load i64, i64* %R1_Var
  %lnaf3 = add i64 %lnaf2, 16
  %lnaf4 = inttoptr i64 %lnaf3 to i64*
  %lnaf5 = load i64, i64* %lnaf4, !tbaa !4
  store i64 %lnaf5, i64* %R2_Var
  %lnaf7 = ptrtoint i8* @stg_ap_p_info to i64
  %lnaf6 = load i64*, i64** %Sp_Var
  %lnaf8 = getelementptr inbounds i64, i64* %lnaf6, i32 -4
  store i64 %lnaf7, i64* %lnaf8, !tbaa !2
  %lnafa = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lnafb = add i64 %lnafa, 1
  %lnaf9 = load i64*, i64** %Sp_Var
  %lnafc = getelementptr inbounds i64, i64* %lnaf9, i32 -3
  store i64 %lnafb, i64* %lnafc, !tbaa !2
  %lnafd = load i64*, i64** %Sp_Var
  %lnafe = getelementptr inbounds i64, i64* %lnafd, i32 -4
  %lnaff = ptrtoint i64* %lnafe to i64
  %lnafg = inttoptr i64 %lnaff to i64*
  store i64* %lnafg, i64** %Sp_Var
  %lnafh = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafi = load i64*, i64** %Sp_Var
  %lnafj = load i64, i64* %R1_Var
  %lnafk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafh( i64* %Base_Arg, i64* %lnafi, i64* %Hp_Arg, i64 %lnafj, i64 %lnafk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabp:
  %lnafl = load i64, i64* %R1_Var
  store i64 %lnafl, i64* %R1_Var
  %lnafm = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnafn = bitcast i64* %lnafm to i64*
  %lnafo = load i64, i64* %lnafn, !tbaa !5
  %lnafp = inttoptr i64 %lnafo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafq = load i64*, i64** %Sp_Var
  %lnafr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafp( i64* %Base_Arg, i64* %lnafq, i64* %Hp_Arg, i64 %lnafr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gI_info$def to i8*)
define internal ghccc void @s5gI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
nafs:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cabA
cabA:
  %lnaft = load i64*, i64** %Sp_Var
  %lnafu = getelementptr inbounds i64, i64* %lnaft, i32 -4
  %lnafv = ptrtoint i64* %lnafu to i64
  %lnafw = icmp ult i64 %lnafv, %SpLim_Arg
  %lnafx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnafw, i1 0 )
  br i1 %lnafx, label %cabB, label %cabC
cabC:
  %lnafz = ptrtoint i8* @stg_upd_frame_info to i64
  %lnafy = load i64*, i64** %Sp_Var
  %lnafA = getelementptr inbounds i64, i64* %lnafy, i32 -2
  store i64 %lnafz, i64* %lnafA, !tbaa !2
  %lnafC = load i64, i64* %R1_Var
  %lnafB = load i64*, i64** %Sp_Var
  %lnafD = getelementptr inbounds i64, i64* %lnafB, i32 -1
  store i64 %lnafC, i64* %lnafD, !tbaa !2
  %lnafG = load i64, i64* %R1_Var
  %lnafH = add i64 %lnafG, 16
  %lnafI = inttoptr i64 %lnafH to i64*
  %lnafJ = load i64, i64* %lnafI, !tbaa !4
  store i64 %lnafJ, i64* %R2_Var
  %lnafL = ptrtoint i8* @stg_ap_p_info to i64
  %lnafK = load i64*, i64** %Sp_Var
  %lnafM = getelementptr inbounds i64, i64* %lnafK, i32 -4
  store i64 %lnafL, i64* %lnafM, !tbaa !2
  %lnafO = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %lnafP = add i64 %lnafO, 1
  %lnafN = load i64*, i64** %Sp_Var
  %lnafQ = getelementptr inbounds i64, i64* %lnafN, i32 -3
  store i64 %lnafP, i64* %lnafQ, !tbaa !2
  %lnafR = load i64*, i64** %Sp_Var
  %lnafS = getelementptr inbounds i64, i64* %lnafR, i32 -4
  %lnafT = ptrtoint i64* %lnafS to i64
  %lnafU = inttoptr i64 %lnafT to i64*
  store i64* %lnafU, i64** %Sp_Var
  %lnafV = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafW = load i64*, i64** %Sp_Var
  %lnafX = load i64, i64* %R1_Var
  %lnafY = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafV( i64* %Base_Arg, i64* %lnafW, i64* %Hp_Arg, i64 %lnafX, i64 %lnafY, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabB:
  %lnafZ = load i64, i64* %R1_Var
  store i64 %lnafZ, i64* %R1_Var
  %lnag0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnag1 = bitcast i64* %lnag0 to i64*
  %lnag2 = load i64, i64* %lnag1, !tbaa !5
  %lnag3 = inttoptr i64 %lnag2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnag4 = load i64*, i64** %Sp_Var
  %lnag5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnag3( i64* %Base_Arg, i64* %lnag4, i64* %Hp_Arg, i64 %lnag5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gO_info$def to i8*)
define internal ghccc void @s5gO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
nag6:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cabY
cabY:
  %lnag7 = load i64*, i64** %Sp_Var
  %lnag8 = getelementptr inbounds i64, i64* %lnag7, i32 -4
  %lnag9 = ptrtoint i64* %lnag8 to i64
  %lnaga = icmp ult i64 %lnag9, %SpLim_Arg
  %lnagb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaga, i1 0 )
  br i1 %lnagb, label %cabZ, label %cac0
cac0:
  %lnagd = ptrtoint i8* @stg_upd_frame_info to i64
  %lnagc = load i64*, i64** %Sp_Var
  %lnage = getelementptr inbounds i64, i64* %lnagc, i32 -2
  store i64 %lnagd, i64* %lnage, !tbaa !2
  %lnagg = load i64, i64* %R1_Var
  %lnagf = load i64*, i64** %Sp_Var
  %lnagh = getelementptr inbounds i64, i64* %lnagf, i32 -1
  store i64 %lnagg, i64* %lnagh, !tbaa !2
  %lnagk = load i64, i64* %R1_Var
  %lnagl = add i64 %lnagk, 16
  %lnagm = inttoptr i64 %lnagl to i64*
  %lnagn = load i64, i64* %lnagm, !tbaa !4
  store i64 %lnagn, i64* %R2_Var
  %lnagp = ptrtoint i8* @stg_ap_p_info to i64
  %lnago = load i64*, i64** %Sp_Var
  %lnagq = getelementptr inbounds i64, i64* %lnago, i32 -4
  store i64 %lnagp, i64* %lnagq, !tbaa !2
  %lnags = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %lnagt = add i64 %lnags, 1
  %lnagr = load i64*, i64** %Sp_Var
  %lnagu = getelementptr inbounds i64, i64* %lnagr, i32 -3
  store i64 %lnagt, i64* %lnagu, !tbaa !2
  %lnagv = load i64*, i64** %Sp_Var
  %lnagw = getelementptr inbounds i64, i64* %lnagv, i32 -4
  %lnagx = ptrtoint i64* %lnagw to i64
  %lnagy = inttoptr i64 %lnagx to i64*
  store i64* %lnagy, i64** %Sp_Var
  %lnagz = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagA = load i64*, i64** %Sp_Var
  %lnagB = load i64, i64* %R1_Var
  %lnagC = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagz( i64* %Base_Arg, i64* %lnagA, i64* %Hp_Arg, i64 %lnagB, i64 %lnagC, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabZ:
  %lnagD = load i64, i64* %R1_Var
  store i64 %lnagD, i64* %R1_Var
  %lnagE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnagF = bitcast i64* %lnagE to i64*
  %lnagG = load i64, i64* %lnagF, !tbaa !5
  %lnagH = inttoptr i64 %lnagG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagI = load i64*, i64** %Sp_Var
  %lnagJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagH( i64* %Base_Arg, i64* %lnagI, i64* %Hp_Arg, i64 %lnagJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gP_info$def to i8*)
define internal ghccc void @s5gP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nagK:
  %ls5gP = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gF = alloca i64, i32 1
  %ls5gK = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cac1
cac1:
  %lnagL = load i64, i64* %R1_Var
  store i64 %lnagL, i64* %ls5gP
  %lnagM = load i64*, i64** %Sp_Var
  %lnagN = getelementptr inbounds i64, i64* %lnagM, i32 -2
  %lnagO = ptrtoint i64* %lnagN to i64
  %lnagP = icmp ult i64 %lnagO, %SpLim_Arg
  %lnagQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnagP, i1 0 )
  br i1 %lnagQ, label %cac2, label %cac3
cac3:
  %lnagR = load i64*, i64** %Hp_Var
  %lnagS = getelementptr inbounds i64, i64* %lnagR, i32 3
  %lnagT = ptrtoint i64* %lnagS to i64
  %lnagU = inttoptr i64 %lnagT to i64*
  store i64* %lnagU, i64** %Hp_Var
  %lnagV = load i64*, i64** %Hp_Var
  %lnagW = ptrtoint i64* %lnagV to i64
  %lnagX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnagY = bitcast i64* %lnagX to i64*
  %lnagZ = load i64, i64* %lnagY, !tbaa !5
  %lnah0 = icmp ugt i64 %lnagW, %lnagZ
  %lnah1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnah0, i1 0 )
  br i1 %lnah1, label %cac5, label %cac4
cac4:
  %lnah3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnah2 = load i64*, i64** %Sp_Var
  %lnah4 = getelementptr inbounds i64, i64* %lnah2, i32 -2
  store i64 %lnah3, i64* %lnah4, !tbaa !2
  %lnah6 = load i64, i64* %ls5gP
  %lnah5 = load i64*, i64** %Sp_Var
  %lnah7 = getelementptr inbounds i64, i64* %lnah5, i32 -1
  store i64 %lnah6, i64* %lnah7, !tbaa !2
  %lnah8 = load i64, i64* %ls5gP
  %lnah9 = add i64 %lnah8, 16
  %lnaha = inttoptr i64 %lnah9 to i64*
  %lnahb = load i64, i64* %lnaha, !tbaa !1
  store i64 %lnahb, i64* %ls5gF
  %lnahc = load i64, i64* %ls5gP
  %lnahd = add i64 %lnahc, 24
  %lnahe = inttoptr i64 %lnahd to i64*
  %lnahf = load i64, i64* %lnahe, !tbaa !1
  store i64 %lnahf, i64* %ls5gK
  %lnahh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gO_info$def to i64
  %lnahg = load i64*, i64** %Hp_Var
  %lnahi = getelementptr inbounds i64, i64* %lnahg, i32 -2
  store i64 %lnahh, i64* %lnahi, !tbaa !3
  %lnahk = load i64, i64* %ls5gF
  %lnahj = load i64*, i64** %Hp_Var
  %lnahl = getelementptr inbounds i64, i64* %lnahj, i32 0
  store i64 %lnahk, i64* %lnahl, !tbaa !3
  %lnahm = load i64, i64* %ls5gK
  store i64 %lnahm, i64* %R4_Var
  %lnahn = load i64*, i64** %Hp_Var
  %lnaho = getelementptr inbounds i64, i64* %lnahn, i32 -2
  %lnahp = ptrtoint i64* %lnaho to i64
  store i64 %lnahp, i64* %R3_Var
  %lnahq = load i64, i64* %ls5gF
  store i64 %lnahq, i64* %R2_Var
  %lnahr = load i64*, i64** %Sp_Var
  %lnahs = getelementptr inbounds i64, i64* %lnahr, i32 -2
  %lnaht = ptrtoint i64* %lnahs to i64
  %lnahu = inttoptr i64 %lnaht to i64*
  store i64* %lnahu, i64** %Sp_Var
  %lnahv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zizt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahw = load i64*, i64** %Sp_Var
  %lnahx = load i64*, i64** %Hp_Var
  %lnahy = load i64, i64* %R1_Var
  %lnahz = load i64, i64* %R2_Var
  %lnahA = load i64, i64* %R3_Var
  %lnahB = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahv( i64* %Base_Arg, i64* %lnahw, i64* %lnahx, i64 %lnahy, i64 %lnahz, i64 %lnahA, i64 %lnahB, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cac5:
  %lnahC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnahC, !tbaa !5
  br label %cac2
cac2:
  %lnahD = load i64, i64* %ls5gP
  store i64 %lnahD, i64* %R1_Var
  %lnahE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnahF = bitcast i64* %lnahE to i64*
  %lnahG = load i64, i64* %lnahF, !tbaa !5
  %lnahH = inttoptr i64 %lnahG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahI = load i64*, i64** %Sp_Var
  %lnahJ = load i64*, i64** %Hp_Var
  %lnahK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahH( i64* %Base_Arg, i64* %lnahI, i64* %lnahJ, i64 %lnahK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gL_info$def to i8*)
define internal ghccc void @s5gL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
nahL:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cace
cace:
  %lnahM = load i64*, i64** %Sp_Var
  %lnahN = getelementptr inbounds i64, i64* %lnahM, i32 -4
  %lnahO = ptrtoint i64* %lnahN to i64
  %lnahP = icmp ult i64 %lnahO, %SpLim_Arg
  %lnahQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnahP, i1 0 )
  br i1 %lnahQ, label %cacf, label %cacg
cacg:
  %lnahS = ptrtoint i8* @stg_upd_frame_info to i64
  %lnahR = load i64*, i64** %Sp_Var
  %lnahT = getelementptr inbounds i64, i64* %lnahR, i32 -2
  store i64 %lnahS, i64* %lnahT, !tbaa !2
  %lnahV = load i64, i64* %R1_Var
  %lnahU = load i64*, i64** %Sp_Var
  %lnahW = getelementptr inbounds i64, i64* %lnahU, i32 -1
  store i64 %lnahV, i64* %lnahW, !tbaa !2
  %lnahZ = load i64, i64* %R1_Var
  %lnai0 = add i64 %lnahZ, 16
  %lnai1 = inttoptr i64 %lnai0 to i64*
  %lnai2 = load i64, i64* %lnai1, !tbaa !4
  store i64 %lnai2, i64* %R2_Var
  %lnai4 = ptrtoint i8* @stg_ap_p_info to i64
  %lnai3 = load i64*, i64** %Sp_Var
  %lnai5 = getelementptr inbounds i64, i64* %lnai3, i32 -4
  store i64 %lnai4, i64* %lnai5, !tbaa !2
  %lnai7 = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %lnai8 = add i64 %lnai7, 1
  %lnai6 = load i64*, i64** %Sp_Var
  %lnai9 = getelementptr inbounds i64, i64* %lnai6, i32 -3
  store i64 %lnai8, i64* %lnai9, !tbaa !2
  %lnaia = load i64*, i64** %Sp_Var
  %lnaib = getelementptr inbounds i64, i64* %lnaia, i32 -4
  %lnaic = ptrtoint i64* %lnaib to i64
  %lnaid = inttoptr i64 %lnaic to i64*
  store i64* %lnaid, i64** %Sp_Var
  %lnaie = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaif = load i64*, i64** %Sp_Var
  %lnaig = load i64, i64* %R1_Var
  %lnaih = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaie( i64* %Base_Arg, i64* %lnaif, i64* %Hp_Arg, i64 %lnaig, i64 %lnaih, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacf:
  %lnaii = load i64, i64* %R1_Var
  store i64 %lnaii, i64* %R1_Var
  %lnaij = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaik = bitcast i64* %lnaij to i64*
  %lnail = load i64, i64* %lnaik, !tbaa !5
  %lnaim = inttoptr i64 %lnail to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnain = load i64*, i64** %Sp_Var
  %lnaio = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaim( i64* %Base_Arg, i64* %lnain, i64* %Hp_Arg, i64 %lnaio, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gN_info$def to i8*)
define internal ghccc void @s5gN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naip:
  %ls5gN = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gE = alloca i64, i32 1
  %ls5gF = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caci
caci:
  %lnaiq = load i64, i64* %R1_Var
  store i64 %lnaiq, i64* %ls5gN
  %lnair = load i64*, i64** %Sp_Var
  %lnais = getelementptr inbounds i64, i64* %lnair, i32 -2
  %lnait = ptrtoint i64* %lnais to i64
  %lnaiu = icmp ult i64 %lnait, %SpLim_Arg
  %lnaiv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaiu, i1 0 )
  br i1 %lnaiv, label %cacj, label %cack
cack:
  %lnaiw = load i64*, i64** %Hp_Var
  %lnaix = getelementptr inbounds i64, i64* %lnaiw, i32 6
  %lnaiy = ptrtoint i64* %lnaix to i64
  %lnaiz = inttoptr i64 %lnaiy to i64*
  store i64* %lnaiz, i64** %Hp_Var
  %lnaiA = load i64*, i64** %Hp_Var
  %lnaiB = ptrtoint i64* %lnaiA to i64
  %lnaiC = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaiD = bitcast i64* %lnaiC to i64*
  %lnaiE = load i64, i64* %lnaiD, !tbaa !5
  %lnaiF = icmp ugt i64 %lnaiB, %lnaiE
  %lnaiG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaiF, i1 0 )
  br i1 %lnaiG, label %cacm, label %cacl
cacl:
  %lnaiI = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaiH = load i64*, i64** %Sp_Var
  %lnaiJ = getelementptr inbounds i64, i64* %lnaiH, i32 -2
  store i64 %lnaiI, i64* %lnaiJ, !tbaa !2
  %lnaiL = load i64, i64* %ls5gN
  %lnaiK = load i64*, i64** %Sp_Var
  %lnaiM = getelementptr inbounds i64, i64* %lnaiK, i32 -1
  store i64 %lnaiL, i64* %lnaiM, !tbaa !2
  %lnaiN = load i64, i64* %ls5gN
  %lnaiO = add i64 %lnaiN, 16
  %lnaiP = inttoptr i64 %lnaiO to i64*
  %lnaiQ = load i64, i64* %lnaiP, !tbaa !1
  store i64 %lnaiQ, i64* %ls5gE
  %lnaiR = load i64, i64* %ls5gN
  %lnaiS = add i64 %lnaiR, 24
  %lnaiT = inttoptr i64 %lnaiS to i64*
  %lnaiU = load i64, i64* %lnaiT, !tbaa !1
  store i64 %lnaiU, i64* %ls5gF
  %lnaiW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gL_info$def to i64
  %lnaiV = load i64*, i64** %Hp_Var
  %lnaiX = getelementptr inbounds i64, i64* %lnaiV, i32 -5
  store i64 %lnaiW, i64* %lnaiX, !tbaa !3
  %lnaiZ = load i64, i64* %ls5gF
  %lnaiY = load i64*, i64** %Hp_Var
  %lnaj0 = getelementptr inbounds i64, i64* %lnaiY, i32 -3
  store i64 %lnaiZ, i64* %lnaj0, !tbaa !3
  %lnaj2 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lnaj1 = load i64*, i64** %Hp_Var
  %lnaj3 = getelementptr inbounds i64, i64* %lnaj1, i32 -2
  store i64 %lnaj2, i64* %lnaj3, !tbaa !3
  %lnaj5 = load i64*, i64** %Hp_Var
  %lnaj6 = getelementptr inbounds i64, i64* %lnaj5, i32 -5
  %lnaj7 = ptrtoint i64* %lnaj6 to i64
  %lnaj4 = load i64*, i64** %Hp_Var
  %lnaj8 = getelementptr inbounds i64, i64* %lnaj4, i32 -1
  store i64 %lnaj7, i64* %lnaj8, !tbaa !3
  %lnaja = load i64, i64* %ls5gE
  %lnaj9 = load i64*, i64** %Hp_Var
  %lnajb = getelementptr inbounds i64, i64* %lnaj9, i32 0
  store i64 %lnaja, i64* %lnajb, !tbaa !3
  %lnajd = load i64*, i64** %Hp_Var
  %lnaje = ptrtoint i64* %lnajd to i64
  %lnajf = add i64 %lnaje, -14
  store i64 %lnajf, i64* %R3_Var
  %lnajg = load i64, i64* %ls5gF
  store i64 %lnajg, i64* %R2_Var
  %lnajh = load i64*, i64** %Sp_Var
  %lnaji = getelementptr inbounds i64, i64* %lnajh, i32 -2
  %lnajj = ptrtoint i64* %lnaji to i64
  %lnajk = inttoptr i64 %lnajj to i64*
  store i64* %lnajk, i64** %Sp_Var
  %lnajl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_deriv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajm = load i64*, i64** %Sp_Var
  %lnajn = load i64*, i64** %Hp_Var
  %lnajo = load i64, i64* %R1_Var
  %lnajp = load i64, i64* %R2_Var
  %lnajq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajl( i64* %Base_Arg, i64* %lnajm, i64* %lnajn, i64 %lnajo, i64 %lnajp, i64 %lnajq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacm:
  %lnajr = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnajr, !tbaa !5
  br label %cacj
cacj:
  %lnajs = load i64, i64* %ls5gN
  store i64 %lnajs, i64* %R1_Var
  %lnajt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaju = bitcast i64* %lnajt to i64*
  %lnajv = load i64, i64* %lnaju, !tbaa !5
  %lnajw = inttoptr i64 %lnajv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajx = load i64*, i64** %Sp_Var
  %lnajy = load i64*, i64** %Hp_Var
  %lnajz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajw( i64* %Base_Arg, i64* %lnajx, i64* %lnajy, i64 %lnajz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gQ_info$def to i8*)
define internal ghccc void @s5gQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gQ_info$def to i64)) to i32),i32 0)}>
{
najA:
  %ls5gQ = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gE = alloca i64, i32 1
  %ls5gF = alloca i64, i32 1
  %ls5gz = alloca i64, i32 1
  %ls5gA = alloca i64, i32 1
  %ls5gK = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacn
cacn:
  %lnajB = load i64, i64* %R1_Var
  store i64 %lnajB, i64* %ls5gQ
  %lnajC = load i64*, i64** %Sp_Var
  %lnajD = getelementptr inbounds i64, i64* %lnajC, i32 -3
  %lnajE = ptrtoint i64* %lnajD to i64
  %lnajF = icmp ult i64 %lnajE, %SpLim_Arg
  %lnajG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnajF, i1 0 )
  br i1 %lnajG, label %caco, label %cacp
cacp:
  %lnajH = load i64*, i64** %Hp_Var
  %lnajI = getelementptr inbounds i64, i64* %lnajH, i32 8
  %lnajJ = ptrtoint i64* %lnajI to i64
  %lnajK = inttoptr i64 %lnajJ to i64*
  store i64* %lnajK, i64** %Hp_Var
  %lnajL = load i64*, i64** %Hp_Var
  %lnajM = ptrtoint i64* %lnajL to i64
  %lnajN = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnajO = bitcast i64* %lnajN to i64*
  %lnajP = load i64, i64* %lnajO, !tbaa !5
  %lnajQ = icmp ugt i64 %lnajM, %lnajP
  %lnajR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnajQ, i1 0 )
  br i1 %lnajR, label %cacr, label %cacq
cacq:
  %lnajS = load i64, i64* %ls5gQ
  %lnajT = add i64 %lnajS, 16
  %lnajU = inttoptr i64 %lnajT to i64*
  %lnajV = load i64, i64* %lnajU, !tbaa !1
  store i64 %lnajV, i64* %ls5gE
  %lnajW = load i64, i64* %ls5gQ
  %lnajX = add i64 %lnajW, 24
  %lnajY = inttoptr i64 %lnajX to i64*
  %lnajZ = load i64, i64* %lnajY, !tbaa !1
  store i64 %lnajZ, i64* %ls5gF
  %lnak0 = load i64, i64* %ls5gQ
  %lnak1 = add i64 %lnak0, 32
  %lnak2 = inttoptr i64 %lnak1 to i64*
  %lnak3 = load i64, i64* %lnak2, !tbaa !1
  store i64 %lnak3, i64* %ls5gz
  %lnak4 = load i64, i64* %ls5gQ
  %lnak5 = add i64 %lnak4, 40
  %lnak6 = inttoptr i64 %lnak5 to i64*
  %lnak7 = load i64, i64* %lnak6, !tbaa !1
  store i64 %lnak7, i64* %ls5gA
  %lnak8 = load i64, i64* %ls5gQ
  %lnak9 = add i64 %lnak8, 48
  %lnaka = inttoptr i64 %lnak9 to i64*
  %lnakb = load i64, i64* %lnaka, !tbaa !1
  store i64 %lnakb, i64* %ls5gK
  %lnakd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gP_info$def to i64
  %lnakc = load i64*, i64** %Hp_Var
  %lnake = getelementptr inbounds i64, i64* %lnakc, i32 -7
  store i64 %lnakd, i64* %lnake, !tbaa !3
  %lnakg = load i64, i64* %ls5gF
  %lnakf = load i64*, i64** %Hp_Var
  %lnakh = getelementptr inbounds i64, i64* %lnakf, i32 -5
  store i64 %lnakg, i64* %lnakh, !tbaa !3
  %lnakj = load i64, i64* %ls5gK
  %lnaki = load i64*, i64** %Hp_Var
  %lnakk = getelementptr inbounds i64, i64* %lnaki, i32 -4
  store i64 %lnakj, i64* %lnakk, !tbaa !3
  %lnakm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gN_info$def to i64
  %lnakl = load i64*, i64** %Hp_Var
  %lnakn = getelementptr inbounds i64, i64* %lnakl, i32 -3
  store i64 %lnakm, i64* %lnakn, !tbaa !3
  %lnakp = load i64, i64* %ls5gE
  %lnako = load i64*, i64** %Hp_Var
  %lnakq = getelementptr inbounds i64, i64* %lnako, i32 -1
  store i64 %lnakp, i64* %lnakq, !tbaa !3
  %lnaks = load i64, i64* %ls5gF
  %lnakr = load i64*, i64** %Hp_Var
  %lnakt = getelementptr inbounds i64, i64* %lnakr, i32 0
  store i64 %lnaks, i64* %lnakt, !tbaa !3
  %lnaku = load i64, i64* %ls5gA
  store i64 %lnaku, i64* %R3_Var
  %lnakv = load i64, i64* %ls5gz
  store i64 %lnakv, i64* %R2_Var
  %lnakx = ptrtoint i8* @stg_ap_pp_info to i64
  %lnakw = load i64*, i64** %Sp_Var
  %lnaky = getelementptr inbounds i64, i64* %lnakw, i32 -3
  store i64 %lnakx, i64* %lnaky, !tbaa !2
  %lnakA = load i64*, i64** %Hp_Var
  %lnakB = getelementptr inbounds i64, i64* %lnakA, i32 -3
  %lnakC = ptrtoint i64* %lnakB to i64
  %lnakz = load i64*, i64** %Sp_Var
  %lnakD = getelementptr inbounds i64, i64* %lnakz, i32 -2
  store i64 %lnakC, i64* %lnakD, !tbaa !2
  %lnakF = load i64*, i64** %Hp_Var
  %lnakG = getelementptr inbounds i64, i64* %lnakF, i32 -7
  %lnakH = ptrtoint i64* %lnakG to i64
  %lnakE = load i64*, i64** %Sp_Var
  %lnakI = getelementptr inbounds i64, i64* %lnakE, i32 -1
  store i64 %lnakH, i64* %lnakI, !tbaa !2
  %lnakJ = load i64*, i64** %Sp_Var
  %lnakK = getelementptr inbounds i64, i64* %lnakJ, i32 -3
  %lnakL = ptrtoint i64* %lnakK to i64
  %lnakM = inttoptr i64 %lnakL to i64*
  store i64* %lnakM, i64** %Sp_Var
  %lnakN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakO = load i64*, i64** %Sp_Var
  %lnakP = load i64*, i64** %Hp_Var
  %lnakQ = load i64, i64* %R1_Var
  %lnakR = load i64, i64* %R2_Var
  %lnakS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakN( i64* %Base_Arg, i64* %lnakO, i64* %lnakP, i64 %lnakQ, i64 %lnakR, i64 %lnakS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacr:
  %lnakT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %lnakT, !tbaa !5
  br label %caco
caco:
  %lnakU = load i64, i64* %ls5gQ
  store i64 %lnakU, i64* %R1_Var
  %lnakV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnakW = bitcast i64* %lnakV to i64*
  %lnakX = load i64, i64* %lnakW, !tbaa !5
  %lnakY = inttoptr i64 %lnakX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakZ = load i64*, i64** %Sp_Var
  %lnal0 = load i64*, i64** %Hp_Var
  %lnal1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakY( i64* %Base_Arg, i64* %lnakZ, i64* %lnal0, i64 %lnal1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gU_info$def to i8*)
define internal ghccc void @s5gU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
nal2:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacz
cacz:
  %lnal3 = load i64*, i64** %Sp_Var
  %lnal4 = getelementptr inbounds i64, i64* %lnal3, i32 -4
  %lnal5 = ptrtoint i64* %lnal4 to i64
  %lnal6 = icmp ult i64 %lnal5, %SpLim_Arg
  %lnal7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnal6, i1 0 )
  br i1 %lnal7, label %cacA, label %cacB
cacB:
  %lnal9 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnal8 = load i64*, i64** %Sp_Var
  %lnala = getelementptr inbounds i64, i64* %lnal8, i32 -2
  store i64 %lnal9, i64* %lnala, !tbaa !2
  %lnalc = load i64, i64* %R1_Var
  %lnalb = load i64*, i64** %Sp_Var
  %lnald = getelementptr inbounds i64, i64* %lnalb, i32 -1
  store i64 %lnalc, i64* %lnald, !tbaa !2
  %lnalg = load i64, i64* %R1_Var
  %lnalh = add i64 %lnalg, 16
  %lnali = inttoptr i64 %lnalh to i64*
  %lnalj = load i64, i64* %lnali, !tbaa !4
  store i64 %lnalj, i64* %R2_Var
  %lnall = ptrtoint i8* @stg_ap_p_info to i64
  %lnalk = load i64*, i64** %Sp_Var
  %lnalm = getelementptr inbounds i64, i64* %lnalk, i32 -4
  store i64 %lnall, i64* %lnalm, !tbaa !2
  %lnalo = ptrtoint %Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i64
  %lnalp = add i64 %lnalo, 1
  %lnaln = load i64*, i64** %Sp_Var
  %lnalq = getelementptr inbounds i64, i64* %lnaln, i32 -3
  store i64 %lnalp, i64* %lnalq, !tbaa !2
  %lnalr = load i64*, i64** %Sp_Var
  %lnals = getelementptr inbounds i64, i64* %lnalr, i32 -4
  %lnalt = ptrtoint i64* %lnals to i64
  %lnalu = inttoptr i64 %lnalt to i64*
  store i64* %lnalu, i64** %Sp_Var
  %lnalv = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalw = load i64*, i64** %Sp_Var
  %lnalx = load i64, i64* %R1_Var
  %lnaly = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnalv( i64* %Base_Arg, i64* %lnalw, i64* %Hp_Arg, i64 %lnalx, i64 %lnaly, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacA:
  %lnalz = load i64, i64* %R1_Var
  store i64 %lnalz, i64* %R1_Var
  %lnalA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnalB = bitcast i64* %lnalA to i64*
  %lnalC = load i64, i64* %lnalB, !tbaa !5
  %lnalD = inttoptr i64 %lnalC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalE = load i64*, i64** %Sp_Var
  %lnalF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnalD( i64* %Base_Arg, i64* %lnalE, i64* %Hp_Arg, i64 %lnalF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5gK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gK_info$def to i8*)
define internal ghccc void @s5gK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gK_info$def to i64)) to i32),i32 0)}>
{
nalG:
  %ls5gK = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gE = alloca i64, i32 1
  %ls5gF = alloca i64, i32 1
  %ls5gz = alloca i64, i32 1
  %ls5gA = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacD
cacD:
  %lnalH = load i64, i64* %R1_Var
  store i64 %lnalH, i64* %ls5gK
  %lnalI = load i64*, i64** %Sp_Var
  %lnalJ = getelementptr inbounds i64, i64* %lnalI, i32 -4
  %lnalK = ptrtoint i64* %lnalJ to i64
  %lnalL = icmp ult i64 %lnalK, %SpLim_Arg
  %lnalM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnalL, i1 0 )
  br i1 %lnalM, label %cacE, label %cacF
cacF:
  %lnalN = load i64*, i64** %Hp_Var
  %lnalO = getelementptr inbounds i64, i64* %lnalN, i32 7
  %lnalP = ptrtoint i64* %lnalO to i64
  %lnalQ = inttoptr i64 %lnalP to i64*
  store i64* %lnalQ, i64** %Hp_Var
  %lnalR = load i64*, i64** %Hp_Var
  %lnalS = ptrtoint i64* %lnalR to i64
  %lnalT = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnalU = bitcast i64* %lnalT to i64*
  %lnalV = load i64, i64* %lnalU, !tbaa !5
  %lnalW = icmp ugt i64 %lnalS, %lnalV
  %lnalX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnalW, i1 0 )
  br i1 %lnalX, label %cacH, label %cacG
cacG:
  %lnalZ = ptrtoint i8* @stg_upd_frame_info to i64
  %lnalY = load i64*, i64** %Sp_Var
  %lnam0 = getelementptr inbounds i64, i64* %lnalY, i32 -2
  store i64 %lnalZ, i64* %lnam0, !tbaa !2
  %lnam2 = load i64, i64* %ls5gK
  %lnam1 = load i64*, i64** %Sp_Var
  %lnam3 = getelementptr inbounds i64, i64* %lnam1, i32 -1
  store i64 %lnam2, i64* %lnam3, !tbaa !2
  %lnam4 = load i64, i64* %ls5gK
  %lnam5 = add i64 %lnam4, 16
  %lnam6 = inttoptr i64 %lnam5 to i64*
  %lnam7 = load i64, i64* %lnam6, !tbaa !1
  store i64 %lnam7, i64* %ls5gE
  %lnam8 = load i64, i64* %ls5gK
  %lnam9 = add i64 %lnam8, 24
  %lnama = inttoptr i64 %lnam9 to i64*
  %lnamb = load i64, i64* %lnama, !tbaa !1
  store i64 %lnamb, i64* %ls5gF
  %lnamc = load i64, i64* %ls5gK
  %lnamd = add i64 %lnamc, 32
  %lname = inttoptr i64 %lnamd to i64*
  %lnamf = load i64, i64* %lname, !tbaa !1
  store i64 %lnamf, i64* %ls5gz
  %lnamg = load i64, i64* %ls5gK
  %lnamh = add i64 %lnamg, 40
  %lnami = inttoptr i64 %lnamh to i64*
  %lnamj = load i64, i64* %lnami, !tbaa !1
  store i64 %lnamj, i64* %ls5gA
  %lnaml = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gQ_info$def to i64
  %lnamk = load i64*, i64** %Hp_Var
  %lnamm = getelementptr inbounds i64, i64* %lnamk, i32 -6
  store i64 %lnaml, i64* %lnamm, !tbaa !3
  %lnamo = load i64, i64* %ls5gE
  %lnamn = load i64*, i64** %Hp_Var
  %lnamp = getelementptr inbounds i64, i64* %lnamn, i32 -4
  store i64 %lnamo, i64* %lnamp, !tbaa !3
  %lnamr = load i64, i64* %ls5gF
  %lnamq = load i64*, i64** %Hp_Var
  %lnams = getelementptr inbounds i64, i64* %lnamq, i32 -3
  store i64 %lnamr, i64* %lnams, !tbaa !3
  %lnamu = load i64, i64* %ls5gz
  %lnamt = load i64*, i64** %Hp_Var
  %lnamv = getelementptr inbounds i64, i64* %lnamt, i32 -2
  store i64 %lnamu, i64* %lnamv, !tbaa !3
  %lnamx = load i64, i64* %ls5gA
  %lnamw = load i64*, i64** %Hp_Var
  %lnamy = getelementptr inbounds i64, i64* %lnamw, i32 -1
  store i64 %lnamx, i64* %lnamy, !tbaa !3
  %lnamA = load i64, i64* %ls5gK
  %lnamz = load i64*, i64** %Hp_Var
  %lnamB = getelementptr inbounds i64, i64* %lnamz, i32 0
  store i64 %lnamA, i64* %lnamB, !tbaa !3
  %lnamD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacs_info$def to i64
  %lnamC = load i64*, i64** %Sp_Var
  %lnamE = getelementptr inbounds i64, i64* %lnamC, i32 -4
  store i64 %lnamD, i64* %lnamE, !tbaa !2
  %lnamF = load i64*, i64** %Hp_Var
  %lnamG = getelementptr inbounds i64, i64* %lnamF, i32 -6
  %lnamH = ptrtoint i64* %lnamG to i64
  store i64 %lnamH, i64* %R3_Var
  %lnamI = load i64, i64* %ls5gA
  store i64 %lnamI, i64* %R2_Var
  %lnamK = load i64, i64* %ls5gF
  %lnamJ = load i64*, i64** %Sp_Var
  %lnamL = getelementptr inbounds i64, i64* %lnamJ, i32 -3
  store i64 %lnamK, i64* %lnamL, !tbaa !2
  %lnamM = load i64*, i64** %Sp_Var
  %lnamN = getelementptr inbounds i64, i64* %lnamM, i32 -4
  %lnamO = ptrtoint i64* %lnamN to i64
  %lnamP = inttoptr i64 %lnamO to i64*
  store i64* %lnamP, i64** %Sp_Var
  %lnamQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwintegral_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnamR = load i64*, i64** %Sp_Var
  %lnamS = load i64*, i64** %Hp_Var
  %lnamT = load i64, i64* %R1_Var
  %lnamU = load i64, i64* %R2_Var
  %lnamV = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnamQ( i64* %Base_Arg, i64* %lnamR, i64* %lnamS, i64 %lnamT, i64 %lnamU, i64 %lnamV, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacH:
  %lnamW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lnamW, !tbaa !5
  br label %cacE
cacE:
  %lnamX = load i64, i64* %ls5gK
  store i64 %lnamX, i64* %R1_Var
  %lnamY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnamZ = bitcast i64* %lnamY to i64*
  %lnan0 = load i64, i64* %lnamZ, !tbaa !5
  %lnan1 = inttoptr i64 %lnan0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnan2 = load i64*, i64** %Sp_Var
  %lnan3 = load i64*, i64** %Hp_Var
  %lnan4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnan1( i64* %Base_Arg, i64* %lnan2, i64* %lnan3, i64 %lnan4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cacs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacs_info$def to i8*)
define internal ghccc void @cacs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nan5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gF = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacs
cacs:
  %lnan6 = load i64*, i64** %Hp_Var
  %lnan7 = getelementptr inbounds i64, i64* %lnan6, i32 9
  %lnan8 = ptrtoint i64* %lnan7 to i64
  %lnan9 = inttoptr i64 %lnan8 to i64*
  store i64* %lnan9, i64** %Hp_Var
  %lnana = load i64*, i64** %Hp_Var
  %lnanb = ptrtoint i64* %lnana to i64
  %lnanc = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnand = bitcast i64* %lnanc to i64*
  %lnane = load i64, i64* %lnand, !tbaa !5
  %lnanf = icmp ugt i64 %lnanb, %lnane
  %lnang = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnanf, i1 0 )
  br i1 %lnang, label %cacK, label %cacJ
cacJ:
  %lnani = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lnanh = load i64*, i64** %Hp_Var
  %lnanj = getelementptr inbounds i64, i64* %lnanh, i32 -8
  store i64 %lnani, i64* %lnanj, !tbaa !3
  %lnanl = load i64, i64* %R1_Var
  %lnank = load i64*, i64** %Hp_Var
  %lnanm = getelementptr inbounds i64, i64* %lnank, i32 -7
  store i64 %lnanl, i64* %lnanm, !tbaa !3
  %lnano = load i64, i64* %R2_Var
  %lnann = load i64*, i64** %Hp_Var
  %lnanp = getelementptr inbounds i64, i64* %lnann, i32 -6
  store i64 %lnano, i64* %lnanp, !tbaa !3
  %lnanr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gU_info$def to i64
  %lnanq = load i64*, i64** %Hp_Var
  %lnans = getelementptr inbounds i64, i64* %lnanq, i32 -5
  store i64 %lnanr, i64* %lnans, !tbaa !3
  %lnant = load i64*, i64** %Sp_Var
  %lnanu = getelementptr inbounds i64, i64* %lnant, i32 1
  %lnanv = bitcast i64* %lnanu to i64*
  %lnanw = load i64, i64* %lnanv, !tbaa !2
  store i64 %lnanw, i64* %ls5gF
  %lnany = load i64, i64* %ls5gF
  %lnanx = load i64*, i64** %Hp_Var
  %lnanz = getelementptr inbounds i64, i64* %lnanx, i32 -3
  store i64 %lnany, i64* %lnanz, !tbaa !3
  %lnanB = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lnanA = load i64*, i64** %Hp_Var
  %lnanC = getelementptr inbounds i64, i64* %lnanA, i32 -2
  store i64 %lnanB, i64* %lnanC, !tbaa !3
  %lnanE = load i64*, i64** %Hp_Var
  %lnanF = getelementptr inbounds i64, i64* %lnanE, i32 -5
  %lnanG = ptrtoint i64* %lnanF to i64
  %lnanD = load i64*, i64** %Hp_Var
  %lnanH = getelementptr inbounds i64, i64* %lnanD, i32 -1
  store i64 %lnanG, i64* %lnanH, !tbaa !3
  %lnanJ = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %lnanK = add i64 %lnanJ, 1
  %lnanI = load i64*, i64** %Hp_Var
  %lnanL = getelementptr inbounds i64, i64* %lnanI, i32 0
  store i64 %lnanK, i64* %lnanL, !tbaa !3
  %lnanN = load i64*, i64** %Hp_Var
  %lnanO = ptrtoint i64* %lnanN to i64
  %lnanP = add i64 %lnanO, -62
  store i64 %lnanP, i64* %R4_Var
  %lnanR = load i64*, i64** %Hp_Var
  %lnanS = ptrtoint i64* %lnanR to i64
  %lnanT = add i64 %lnanS, -14
  store i64 %lnanT, i64* %R3_Var
  %lnanU = load i64, i64* %ls5gF
  store i64 %lnanU, i64* %R2_Var
  %lnanV = load i64*, i64** %Sp_Var
  %lnanW = getelementptr inbounds i64, i64* %lnanV, i32 2
  %lnanX = ptrtoint i64* %lnanW to i64
  %lnanY = inttoptr i64 %lnanX to i64*
  store i64* %lnanY, i64** %Sp_Var
  %lnanZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnao0 = load i64*, i64** %Sp_Var
  %lnao1 = load i64*, i64** %Hp_Var
  %lnao2 = load i64, i64* %R1_Var
  %lnao3 = load i64, i64* %R2_Var
  %lnao4 = load i64, i64* %R3_Var
  %lnao5 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnanZ( i64* %Base_Arg, i64* %lnao0, i64* %lnao1, i64 %lnao2, i64 %lnao3, i64 %lnao4, i64 %lnao5, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacK:
  %lnao6 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %lnao6, !tbaa !5
  %lnao7 = load i64, i64* %R2_Var
  store i64 %lnao7, i64* %R2_Var
  %lnao8 = load i64, i64* %R1_Var
  store i64 %lnao8, i64* %R1_Var
  %lnao9 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoa = load i64*, i64** %Sp_Var
  %lnaob = load i64*, i64** %Hp_Var
  %lnaoc = load i64, i64* %R1_Var
  %lnaod = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnao9( i64* %Base_Arg, i64* %lnaoa, i64* %lnaob, i64 %lnaoc, i64 %lnaod, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5h2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h2_info$def to i8*)
define internal ghccc void @s5h2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
naoe:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cad0
cad0:
  %lnaof = load i64*, i64** %Sp_Var
  %lnaog = getelementptr inbounds i64, i64* %lnaof, i32 -4
  %lnaoh = ptrtoint i64* %lnaog to i64
  %lnaoi = icmp ult i64 %lnaoh, %SpLim_Arg
  %lnaoj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaoi, i1 0 )
  br i1 %lnaoj, label %cad1, label %cad2
cad2:
  %lnaol = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaok = load i64*, i64** %Sp_Var
  %lnaom = getelementptr inbounds i64, i64* %lnaok, i32 -2
  store i64 %lnaol, i64* %lnaom, !tbaa !2
  %lnaoo = load i64, i64* %R1_Var
  %lnaon = load i64*, i64** %Sp_Var
  %lnaop = getelementptr inbounds i64, i64* %lnaon, i32 -1
  store i64 %lnaoo, i64* %lnaop, !tbaa !2
  %lnaos = load i64, i64* %R1_Var
  %lnaot = add i64 %lnaos, 16
  %lnaou = inttoptr i64 %lnaot to i64*
  %lnaov = load i64, i64* %lnaou, !tbaa !4
  store i64 %lnaov, i64* %R2_Var
  %lnaox = ptrtoint i8* @stg_ap_p_info to i64
  %lnaow = load i64*, i64** %Sp_Var
  %lnaoy = getelementptr inbounds i64, i64* %lnaow, i32 -4
  store i64 %lnaox, i64* %lnaoy, !tbaa !2
  %lnaoA = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lnaoB = add i64 %lnaoA, 1
  %lnaoz = load i64*, i64** %Sp_Var
  %lnaoC = getelementptr inbounds i64, i64* %lnaoz, i32 -3
  store i64 %lnaoB, i64* %lnaoC, !tbaa !2
  %lnaoD = load i64*, i64** %Sp_Var
  %lnaoE = getelementptr inbounds i64, i64* %lnaoD, i32 -4
  %lnaoF = ptrtoint i64* %lnaoE to i64
  %lnaoG = inttoptr i64 %lnaoF to i64*
  store i64* %lnaoG, i64** %Sp_Var
  %lnaoH = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoI = load i64*, i64** %Sp_Var
  %lnaoJ = load i64, i64* %R1_Var
  %lnaoK = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaoH( i64* %Base_Arg, i64* %lnaoI, i64* %Hp_Arg, i64 %lnaoJ, i64 %lnaoK, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cad1:
  %lnaoL = load i64, i64* %R1_Var
  store i64 %lnaoL, i64* %R1_Var
  %lnaoM = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaoN = bitcast i64* %lnaoM to i64*
  %lnaoO = load i64, i64* %lnaoN, !tbaa !5
  %lnaoP = inttoptr i64 %lnaoO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoQ = load i64*, i64** %Sp_Var
  %lnaoR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaoP( i64* %Base_Arg, i64* %lnaoQ, i64* %Hp_Arg, i64 %lnaoR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5h5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h5_info$def to i8*)
define internal ghccc void @s5h5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h5_info$def to i64)) to i32),i32 0)}>
{
naoS:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cadc
cadc:
  %lnaoT = load i64*, i64** %Sp_Var
  %lnaoU = getelementptr inbounds i64, i64* %lnaoT, i32 -2
  %lnaoV = ptrtoint i64* %lnaoU to i64
  %lnaoW = icmp ult i64 %lnaoV, %SpLim_Arg
  %lnaoX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaoW, i1 0 )
  br i1 %lnaoX, label %cadd, label %cade
cade:
  %lnaoZ = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaoY = load i64*, i64** %Sp_Var
  %lnap0 = getelementptr inbounds i64, i64* %lnaoY, i32 -2
  store i64 %lnaoZ, i64* %lnap0, !tbaa !2
  %lnap2 = load i64, i64* %R1_Var
  %lnap1 = load i64*, i64** %Sp_Var
  %lnap3 = getelementptr inbounds i64, i64* %lnap1, i32 -1
  store i64 %lnap2, i64* %lnap3, !tbaa !2
  %lnap6 = load i64, i64* %R1_Var
  %lnap7 = add i64 %lnap6, 32
  %lnap8 = inttoptr i64 %lnap7 to i64*
  %lnap9 = load i64, i64* %lnap8, !tbaa !4
  store i64 %lnap9, i64* %R4_Var
  %lnapc = load i64, i64* %R1_Var
  %lnapd = add i64 %lnapc, 24
  %lnape = inttoptr i64 %lnapd to i64*
  %lnapf = load i64, i64* %lnape, !tbaa !4
  store i64 %lnapf, i64* %R3_Var
  %lnapi = load i64, i64* %R1_Var
  %lnapj = add i64 %lnapi, 16
  %lnapk = inttoptr i64 %lnapj to i64*
  %lnapl = load i64, i64* %lnapk, !tbaa !4
  store i64 %lnapl, i64* %R2_Var
  %lnapm = load i64*, i64** %Sp_Var
  %lnapn = getelementptr inbounds i64, i64* %lnapm, i32 -2
  %lnapo = ptrtoint i64* %lnapn to i64
  %lnapp = inttoptr i64 %lnapo to i64*
  store i64* %lnapp, i64** %Sp_Var
  %lnapq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcsqrt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapr = load i64*, i64** %Sp_Var
  %lnaps = load i64, i64* %R1_Var
  %lnapt = load i64, i64* %R2_Var
  %lnapu = load i64, i64* %R3_Var
  %lnapv = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapq( i64* %Base_Arg, i64* %lnapr, i64* %Hp_Arg, i64 %lnaps, i64 %lnapt, i64 %lnapu, i64 %lnapv, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadd:
  %lnapw = load i64, i64* %R1_Var
  store i64 %lnapw, i64* %R1_Var
  %lnapx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnapy = bitcast i64* %lnapx to i64*
  %lnapz = load i64, i64* %lnapy, !tbaa !5
  %lnapA = inttoptr i64 %lnapz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapB = load i64*, i64** %Sp_Var
  %lnapC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapA( i64* %Base_Arg, i64* %lnapB, i64* %Hp_Arg, i64 %lnapC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5h4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h4_info$def to i8*)
define internal ghccc void @s5h4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
napD:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cadj
cadj:
  %lnapE = load i64*, i64** %Sp_Var
  %lnapF = getelementptr inbounds i64, i64* %lnapE, i32 -4
  %lnapG = ptrtoint i64* %lnapF to i64
  %lnapH = icmp ult i64 %lnapG, %SpLim_Arg
  %lnapI = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnapH, i1 0 )
  br i1 %lnapI, label %cadk, label %cadl
cadl:
  %lnapK = ptrtoint i8* @stg_upd_frame_info to i64
  %lnapJ = load i64*, i64** %Sp_Var
  %lnapL = getelementptr inbounds i64, i64* %lnapJ, i32 -2
  store i64 %lnapK, i64* %lnapL, !tbaa !2
  %lnapN = load i64, i64* %R1_Var
  %lnapM = load i64*, i64** %Sp_Var
  %lnapO = getelementptr inbounds i64, i64* %lnapM, i32 -1
  store i64 %lnapN, i64* %lnapO, !tbaa !2
  %lnapR = load i64, i64* %R1_Var
  %lnapS = add i64 %lnapR, 16
  %lnapT = inttoptr i64 %lnapS to i64*
  %lnapU = load i64, i64* %lnapT, !tbaa !4
  store i64 %lnapU, i64* %R2_Var
  %lnapW = ptrtoint i8* @stg_ap_p_info to i64
  %lnapV = load i64*, i64** %Sp_Var
  %lnapX = getelementptr inbounds i64, i64* %lnapV, i32 -4
  store i64 %lnapW, i64* %lnapX, !tbaa !2
  %lnapZ = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lnaq0 = add i64 %lnapZ, 1
  %lnapY = load i64*, i64** %Sp_Var
  %lnaq1 = getelementptr inbounds i64, i64* %lnapY, i32 -3
  store i64 %lnaq0, i64* %lnaq1, !tbaa !2
  %lnaq2 = load i64*, i64** %Sp_Var
  %lnaq3 = getelementptr inbounds i64, i64* %lnaq2, i32 -4
  %lnaq4 = ptrtoint i64* %lnaq3 to i64
  %lnaq5 = inttoptr i64 %lnaq4 to i64*
  store i64* %lnaq5, i64** %Sp_Var
  %lnaq6 = bitcast i8* @base_GHCziNum_fromInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaq7 = load i64*, i64** %Sp_Var
  %lnaq8 = load i64, i64* %R1_Var
  %lnaq9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaq6( i64* %Base_Arg, i64* %lnaq7, i64* %Hp_Arg, i64 %lnaq8, i64 %lnaq9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadk:
  %lnaqa = load i64, i64* %R1_Var
  store i64 %lnaqa, i64* %R1_Var
  %lnaqb = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaqc = bitcast i64* %lnaqb to i64*
  %lnaqd = load i64, i64* %lnaqc, !tbaa !5
  %lnaqe = inttoptr i64 %lnaqd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqf = load i64*, i64** %Sp_Var
  %lnaqg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqe( i64* %Base_Arg, i64* %lnaqf, i64* %Hp_Arg, i64 %lnaqg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFloatingPszuzdcsqrt_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcsqrt_info$def to i8*)
define ghccc void @Main_zdfFloatingPszuzdcsqrt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaeg_srt_struct* @_uaeg_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcsqrt_info$def to i64)) to i32),i32 0)}>
{
naqh:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cadq
cadq:
  %lnaqi = load i64*, i64** %Sp_Var
  %lnaqj = getelementptr inbounds i64, i64* %lnaqi, i32 -10
  %lnaqk = ptrtoint i64* %lnaqj to i64
  %lnaql = icmp ult i64 %lnaqk, %SpLim_Arg
  %lnaqm = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaql, i1 0 )
  br i1 %lnaqm, label %cadr, label %cads
cads:
  %lnaqo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab7_info$def to i64
  %lnaqn = load i64*, i64** %Sp_Var
  %lnaqp = getelementptr inbounds i64, i64* %lnaqn, i32 -3
  store i64 %lnaqo, i64* %lnaqp, !tbaa !2
  %lnaqq = load i64, i64* %R4_Var
  store i64 %lnaqq, i64* %R1_Var
  %lnaqs = load i64, i64* %R2_Var
  %lnaqr = load i64*, i64** %Sp_Var
  %lnaqt = getelementptr inbounds i64, i64* %lnaqr, i32 -2
  store i64 %lnaqs, i64* %lnaqt, !tbaa !2
  %lnaqv = load i64, i64* %R3_Var
  %lnaqu = load i64*, i64** %Sp_Var
  %lnaqw = getelementptr inbounds i64, i64* %lnaqu, i32 -1
  store i64 %lnaqv, i64* %lnaqw, !tbaa !2
  %lnaqx = load i64*, i64** %Sp_Var
  %lnaqy = getelementptr inbounds i64, i64* %lnaqx, i32 -3
  %lnaqz = ptrtoint i64* %lnaqy to i64
  %lnaqA = inttoptr i64 %lnaqz to i64*
  store i64* %lnaqA, i64** %Sp_Var
  %lnaqB = load i64, i64* %R1_Var
  %lnaqC = and i64 %lnaqB, 7
  %lnaqD = icmp ne i64 %lnaqC, 0
  br i1 %lnaqD, label %uaef, label %cab8
cab8:
  %lnaqF = load i64, i64* %R1_Var
  %lnaqG = inttoptr i64 %lnaqF to i64*
  %lnaqH = load i64, i64* %lnaqG, !tbaa !4
  %lnaqI = inttoptr i64 %lnaqH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqJ = load i64*, i64** %Sp_Var
  %lnaqK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqI( i64* %Base_Arg, i64* %lnaqJ, i64* %Hp_Arg, i64 %lnaqK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaef:
  %lnaqL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqM = load i64*, i64** %Sp_Var
  %lnaqN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqL( i64* %Base_Arg, i64* %lnaqM, i64* %Hp_Arg, i64 %lnaqN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadr:
  %lnaqO = load i64, i64* %R4_Var
  store i64 %lnaqO, i64* %R4_Var
  %lnaqP = load i64, i64* %R3_Var
  store i64 %lnaqP, i64* %R3_Var
  %lnaqQ = load i64, i64* %R2_Var
  store i64 %lnaqQ, i64* %R2_Var
  %lnaqR = ptrtoint %Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64
  store i64 %lnaqR, i64* %R1_Var
  %lnaqS = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaqT = bitcast i64* %lnaqS to i64*
  %lnaqU = load i64, i64* %lnaqT, !tbaa !5
  %lnaqV = inttoptr i64 %lnaqU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqW = load i64*, i64** %Sp_Var
  %lnaqX = load i64, i64* %R1_Var
  %lnaqY = load i64, i64* %R2_Var
  %lnaqZ = load i64, i64* %R3_Var
  %lnar0 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqV( i64* %Base_Arg, i64* %lnaqW, i64* %Hp_Arg, i64 %lnaqX, i64 %lnaqY, i64 %lnaqZ, i64 %lnar0, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cab7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab7_info$def to i8*)
define internal ghccc void @cab7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab7_info$def to i64)) to i32),i32 0)}>
{
nar1:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gD = alloca i64, i32 1
  %ls5gE = alloca i64, i32 1
  %lcabd = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cab7
cab7:
  %lnar2 = load i64, i64* %R1_Var
  %lnar3 = and i64 %lnar2, 7
  switch i64 %lnar3, label %cadn [i64 1, label %cadn
i64 2, label %cado]
cadn:
  %lnar4 = ptrtoint %Main_Pzz_closure_struct* @Main_Pzz_closure$def to i64
  %lnar5 = add i64 %lnar4, 1
  store i64 %lnar5, i64* %R1_Var
  %lnar6 = load i64*, i64** %Sp_Var
  %lnar7 = getelementptr inbounds i64, i64* %lnar6, i32 3
  %lnar8 = ptrtoint i64* %lnar7 to i64
  %lnar9 = inttoptr i64 %lnar8 to i64*
  store i64* %lnar9, i64** %Sp_Var
  %lnara = load i64*, i64** %Sp_Var
  %lnarb = getelementptr inbounds i64, i64* %lnara, i32 0
  %lnarc = bitcast i64* %lnarb to i64*
  %lnard = load i64, i64* %lnarc, !tbaa !2
  %lnare = inttoptr i64 %lnard to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarf = load i64*, i64** %Sp_Var
  %lnarg = load i64*, i64** %Hp_Var
  %lnarh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnare( i64* %Base_Arg, i64* %lnarf, i64* %lnarg, i64 %lnarh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cado:
  %lnari = load i64*, i64** %Hp_Var
  %lnarj = getelementptr inbounds i64, i64* %lnari, i32 6
  %lnark = ptrtoint i64* %lnarj to i64
  %lnarl = inttoptr i64 %lnark to i64*
  store i64* %lnarl, i64** %Hp_Var
  %lnarm = load i64*, i64** %Hp_Var
  %lnarn = ptrtoint i64* %lnarm to i64
  %lnaro = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnarp = bitcast i64* %lnaro to i64*
  %lnarq = load i64, i64* %lnarp, !tbaa !5
  %lnarr = icmp ugt i64 %lnarn, %lnarq
  %lnars = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnarr, i1 0 )
  br i1 %lnars, label %cadx, label %cadw
cadw:
  %lnarv = load i64, i64* %R1_Var
  %lnarw = add i64 %lnarv, 6
  %lnarx = inttoptr i64 %lnarw to i64*
  %lnary = load i64, i64* %lnarx, !tbaa !4
  store i64 %lnary, i64* %ls5gD
  %lnarB = load i64, i64* %R1_Var
  %lnarC = add i64 %lnarB, 14
  %lnarD = inttoptr i64 %lnarC to i64*
  %lnarE = load i64, i64* %lnarD, !tbaa !4
  store i64 %lnarE, i64* %ls5gE
  %lnarG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gF_info$def to i64
  %lnarF = load i64*, i64** %Hp_Var
  %lnarH = getelementptr inbounds i64, i64* %lnarF, i32 -5
  store i64 %lnarG, i64* %lnarH, !tbaa !3
  %lnarJ = load i64*, i64** %Sp_Var
  %lnarK = getelementptr inbounds i64, i64* %lnarJ, i32 2
  %lnarL = bitcast i64* %lnarK to i64*
  %lnarM = load i64, i64* %lnarL, !tbaa !2
  %lnarI = load i64*, i64** %Hp_Var
  %lnarN = getelementptr inbounds i64, i64* %lnarI, i32 -3
  store i64 %lnarM, i64* %lnarN, !tbaa !3
  %lnarP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gX_info$def to i64
  %lnarO = load i64*, i64** %Hp_Var
  %lnarQ = getelementptr inbounds i64, i64* %lnarO, i32 -2
  store i64 %lnarP, i64* %lnarQ, !tbaa !3
  %lnarR = load i64*, i64** %Hp_Var
  %lnarS = getelementptr inbounds i64, i64* %lnarR, i32 -5
  %lnarT = ptrtoint i64* %lnarS to i64
  store i64 %lnarT, i64* %lcabd
  %lnarV = load i64, i64* %lcabd
  %lnarU = load i64*, i64** %Hp_Var
  %lnarW = getelementptr inbounds i64, i64* %lnarU, i32 0
  store i64 %lnarV, i64* %lnarW, !tbaa !3
  %lnarY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacL_info$def to i64
  %lnarX = load i64*, i64** %Sp_Var
  %lnarZ = getelementptr inbounds i64, i64* %lnarX, i32 -3
  store i64 %lnarY, i64* %lnarZ, !tbaa !2
  %lnas0 = load i64*, i64** %Sp_Var
  %lnas1 = getelementptr inbounds i64, i64* %lnas0, i32 1
  %lnas2 = bitcast i64* %lnas1 to i64*
  %lnas3 = load i64, i64* %lnas2, !tbaa !2
  store i64 %lnas3, i64* %R2_Var
  %lnas5 = ptrtoint i8* @stg_ap_pp_info to i64
  %lnas4 = load i64*, i64** %Sp_Var
  %lnas6 = getelementptr inbounds i64, i64* %lnas4, i32 -6
  store i64 %lnas5, i64* %lnas6, !tbaa !2
  %lnas8 = load i64, i64* %ls5gD
  %lnas7 = load i64*, i64** %Sp_Var
  %lnas9 = getelementptr inbounds i64, i64* %lnas7, i32 -5
  store i64 %lnas8, i64* %lnas9, !tbaa !2
  %lnasb = load i64*, i64** %Hp_Var
  %lnasc = getelementptr inbounds i64, i64* %lnasb, i32 -2
  %lnasd = ptrtoint i64* %lnasc to i64
  %lnasa = load i64*, i64** %Sp_Var
  %lnase = getelementptr inbounds i64, i64* %lnasa, i32 -4
  store i64 %lnasd, i64* %lnase, !tbaa !2
  %lnasg = load i64, i64* %ls5gD
  %lnasf = load i64*, i64** %Sp_Var
  %lnash = getelementptr inbounds i64, i64* %lnasf, i32 -2
  store i64 %lnasg, i64* %lnash, !tbaa !2
  %lnasj = load i64, i64* %ls5gE
  %lnasi = load i64*, i64** %Sp_Var
  %lnask = getelementptr inbounds i64, i64* %lnasi, i32 -1
  store i64 %lnasj, i64* %lnask, !tbaa !2
  %lnasm = load i64, i64* %lcabd
  %lnasl = load i64*, i64** %Sp_Var
  %lnasn = getelementptr inbounds i64, i64* %lnasl, i32 0
  store i64 %lnasm, i64* %lnasn, !tbaa !2
  %lnaso = load i64*, i64** %Sp_Var
  %lnasp = getelementptr inbounds i64, i64* %lnaso, i32 -6
  %lnasq = ptrtoint i64* %lnasp to i64
  %lnasr = inttoptr i64 %lnasq to i64*
  store i64* %lnasr, i64** %Sp_Var
  %lnass = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnast = load i64*, i64** %Sp_Var
  %lnasu = load i64*, i64** %Hp_Var
  %lnasv = load i64, i64* %R1_Var
  %lnasw = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnass( i64* %Base_Arg, i64* %lnast, i64* %lnasu, i64 %lnasv, i64 %lnasw, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadx:
  %lnasx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnasx, !tbaa !5
  %lnasy = load i64, i64* %R1_Var
  store i64 %lnasy, i64* %R1_Var
  %lnasz = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasA = load i64*, i64** %Sp_Var
  %lnasB = load i64*, i64** %Hp_Var
  %lnasC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasz( i64* %Base_Arg, i64* %lnasA, i64* %lnasB, i64 %lnasC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cacL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacL_info$def to i8*)
define internal ghccc void @cacL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacL_info$def to i64)) to i32),i32 0)}>
{
nasD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacL
cacL:
  %lnasE = load i64, i64* %R1_Var
  %lnasF = and i64 %lnasE, 7
  switch i64 %lnasF, label %uaeb [i64 1, label %uaeb
i64 2, label %cadO]
uaeb:
  %lnasG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnasH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadO:
  %lnasI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacQ_info$def to i64
  %lnasJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnasI, i64* %lnasJ, !tbaa !2
  %lnasK = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnasL = bitcast i64* %lnasK to i64*
  %lnasM = load i64, i64* %lnasL, !tbaa !2
  store i64 %lnasM, i64* %R1_Var
  %lnasN = load i64, i64* %R1_Var
  %lnasO = and i64 %lnasN, 7
  %lnasP = icmp ne i64 %lnasO, 0
  br i1 %lnasP, label %uaec, label %cacR
cacR:
  %lnasR = load i64, i64* %R1_Var
  %lnasS = inttoptr i64 %lnasR to i64*
  %lnasT = load i64, i64* %lnasS, !tbaa !4
  %lnasU = inttoptr i64 %lnasT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnasV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaec:
  %lnasW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnasX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cacQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacQ_info$def to i8*)
define internal ghccc void @cacQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacQ_info$def to i64)) to i32),i32 0)}>
{
nasY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5h0 = alloca i64, i32 1
  %ls5h1 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cacQ
cacQ:
  %lnasZ = load i64, i64* %R1_Var
  %lnat0 = and i64 %lnasZ, 7
  switch i64 %lnat0, label %uaed [i64 1, label %uaed
i64 2, label %cadT]
uaed:
  %lnat1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnat2 = load i64*, i64** %Sp_Var
  %lnat3 = load i64*, i64** %Hp_Var
  %lnat4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnat1( i64* %Base_Arg, i64* %lnat2, i64* %lnat3, i64 %lnat4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadT:
  %lnat5 = load i64*, i64** %Hp_Var
  %lnat6 = getelementptr inbounds i64, i64* %lnat5, i32 3
  %lnat7 = ptrtoint i64* %lnat6 to i64
  %lnat8 = inttoptr i64 %lnat7 to i64*
  store i64* %lnat8, i64** %Hp_Var
  %lnat9 = load i64*, i64** %Hp_Var
  %lnata = ptrtoint i64* %lnat9 to i64
  %lnatb = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnatc = bitcast i64* %lnatb to i64*
  %lnatd = load i64, i64* %lnatc, !tbaa !5
  %lnate = icmp ugt i64 %lnata, %lnatd
  %lnatf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnate, i1 0 )
  br i1 %lnatf, label %cadW, label %cadV
cadV:
  %lnati = load i64, i64* %R1_Var
  %lnatj = add i64 %lnati, 6
  %lnatk = inttoptr i64 %lnatj to i64*
  %lnatl = load i64, i64* %lnatk, !tbaa !4
  store i64 %lnatl, i64* %ls5h0
  %lnato = load i64, i64* %R1_Var
  %lnatp = add i64 %lnato, 14
  %lnatq = inttoptr i64 %lnatp to i64*
  %lnatr = load i64, i64* %lnatq, !tbaa !4
  store i64 %lnatr, i64* %ls5h1
  %lnatt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h2_info$def to i64
  %lnats = load i64*, i64** %Hp_Var
  %lnatu = getelementptr inbounds i64, i64* %lnats, i32 -2
  store i64 %lnatt, i64* %lnatu, !tbaa !3
  %lnatw = load i64*, i64** %Sp_Var
  %lnatx = getelementptr inbounds i64, i64* %lnatw, i32 3
  %lnaty = bitcast i64* %lnatx to i64*
  %lnatz = load i64, i64* %lnaty, !tbaa !2
  %lnatv = load i64*, i64** %Hp_Var
  %lnatA = getelementptr inbounds i64, i64* %lnatv, i32 0
  store i64 %lnatz, i64* %lnatA, !tbaa !3
  %lnatC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad3_info$def to i64
  %lnatB = load i64*, i64** %Sp_Var
  %lnatD = getelementptr inbounds i64, i64* %lnatB, i32 -1
  store i64 %lnatC, i64* %lnatD, !tbaa !2
  %lnatE = load i64*, i64** %Sp_Var
  %lnatF = getelementptr inbounds i64, i64* %lnatE, i32 4
  %lnatG = bitcast i64* %lnatF to i64*
  %lnatH = load i64, i64* %lnatG, !tbaa !2
  store i64 %lnatH, i64* %R2_Var
  %lnatJ = ptrtoint i8* @stg_ap_pp_info to i64
  %lnatI = load i64*, i64** %Sp_Var
  %lnatK = getelementptr inbounds i64, i64* %lnatI, i32 -4
  store i64 %lnatJ, i64* %lnatK, !tbaa !2
  %lnatM = load i64, i64* %ls5h0
  %lnatL = load i64*, i64** %Sp_Var
  %lnatN = getelementptr inbounds i64, i64* %lnatL, i32 -3
  store i64 %lnatM, i64* %lnatN, !tbaa !2
  %lnatP = load i64*, i64** %Hp_Var
  %lnatQ = getelementptr inbounds i64, i64* %lnatP, i32 -2
  %lnatR = ptrtoint i64* %lnatQ to i64
  %lnatO = load i64*, i64** %Sp_Var
  %lnatS = getelementptr inbounds i64, i64* %lnatO, i32 -2
  store i64 %lnatR, i64* %lnatS, !tbaa !2
  %lnatU = load i64, i64* %ls5h1
  %lnatT = load i64*, i64** %Sp_Var
  %lnatV = getelementptr inbounds i64, i64* %lnatT, i32 0
  store i64 %lnatU, i64* %lnatV, !tbaa !2
  %lnatW = load i64*, i64** %Sp_Var
  %lnatX = getelementptr inbounds i64, i64* %lnatW, i32 -4
  %lnatY = ptrtoint i64* %lnatX to i64
  %lnatZ = inttoptr i64 %lnatY to i64*
  store i64* %lnatZ, i64** %Sp_Var
  %lnau0 = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnau1 = load i64*, i64** %Sp_Var
  %lnau2 = load i64*, i64** %Hp_Var
  %lnau3 = load i64, i64* %R1_Var
  %lnau4 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnau0( i64* %Base_Arg, i64* %lnau1, i64* %lnau2, i64 %lnau3, i64 %lnau4, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadW:
  %lnau5 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnau5, !tbaa !5
  %lnau6 = load i64, i64* %R1_Var
  store i64 %lnau6, i64* %R1_Var
  %lnau7 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnau8 = load i64*, i64** %Sp_Var
  %lnau9 = load i64*, i64** %Hp_Var
  %lnaua = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnau7( i64* %Base_Arg, i64* %lnau8, i64* %lnau9, i64 %lnaua, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cad3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad3_info$def to i8*)
define internal ghccc void @cad3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad3_info$def to i64)) to i32),i32 0)}>
{
naub:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cad3
cad3:
  %lnauc = load i64, i64* %R1_Var
  %lnaud = and i64 %lnauc, 7
  switch i64 %lnaud, label %uaea [i64 1, label %uaea
i64 2, label %cae2]
uaea:
  %lnaue = load i64*, i64** %Sp_Var
  %lnauf = getelementptr inbounds i64, i64* %lnaue, i32 1
  %lnaug = ptrtoint i64* %lnauf to i64
  %lnauh = inttoptr i64 %lnaug to i64*
  store i64* %lnauh, i64** %Sp_Var
  %lnaui = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnauj = load i64*, i64** %Sp_Var
  %lnauk = load i64*, i64** %Hp_Var
  %lnaul = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaui( i64* %Base_Arg, i64* %lnauj, i64* %lnauk, i64 %lnaul, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cae2:
  %lnaum = load i64*, i64** %Hp_Var
  %lnaun = getelementptr inbounds i64, i64* %lnaum, i32 11
  %lnauo = ptrtoint i64* %lnaun to i64
  %lnaup = inttoptr i64 %lnauo to i64*
  store i64* %lnaup, i64** %Hp_Var
  %lnauq = load i64*, i64** %Hp_Var
  %lnaur = ptrtoint i64* %lnauq to i64
  %lnaus = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaut = bitcast i64* %lnaus to i64*
  %lnauu = load i64, i64* %lnaut, !tbaa !5
  %lnauv = icmp ugt i64 %lnaur, %lnauu
  %lnauw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnauv, i1 0 )
  br i1 %lnauw, label %cae5, label %cae4
cae4:
  %lnauy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h5_info$def to i64
  %lnaux = load i64*, i64** %Hp_Var
  %lnauz = getelementptr inbounds i64, i64* %lnaux, i32 -10
  store i64 %lnauy, i64* %lnauz, !tbaa !3
  %lnauB = load i64*, i64** %Sp_Var
  %lnauC = getelementptr inbounds i64, i64* %lnauB, i32 5
  %lnauD = bitcast i64* %lnauC to i64*
  %lnauE = load i64, i64* %lnauD, !tbaa !2
  %lnauA = load i64*, i64** %Hp_Var
  %lnauF = getelementptr inbounds i64, i64* %lnauA, i32 -8
  store i64 %lnauE, i64* %lnauF, !tbaa !3
  %lnauH = load i64*, i64** %Sp_Var
  %lnauI = getelementptr inbounds i64, i64* %lnauH, i32 6
  %lnauJ = bitcast i64* %lnauI to i64*
  %lnauK = load i64, i64* %lnauJ, !tbaa !2
  %lnauG = load i64*, i64** %Hp_Var
  %lnauL = getelementptr inbounds i64, i64* %lnauG, i32 -7
  store i64 %lnauK, i64* %lnauL, !tbaa !3
  %lnauN = load i64*, i64** %Sp_Var
  %lnauO = getelementptr inbounds i64, i64* %lnauN, i32 1
  %lnauP = bitcast i64* %lnauO to i64*
  %lnauQ = load i64, i64* %lnauP, !tbaa !2
  %lnauM = load i64*, i64** %Hp_Var
  %lnauR = getelementptr inbounds i64, i64* %lnauM, i32 -6
  store i64 %lnauQ, i64* %lnauR, !tbaa !3
  %lnauT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5h4_info$def to i64
  %lnauS = load i64*, i64** %Hp_Var
  %lnauU = getelementptr inbounds i64, i64* %lnauS, i32 -5
  store i64 %lnauT, i64* %lnauU, !tbaa !3
  %lnauW = load i64*, i64** %Sp_Var
  %lnauX = getelementptr inbounds i64, i64* %lnauW, i32 4
  %lnauY = bitcast i64* %lnauX to i64*
  %lnauZ = load i64, i64* %lnauY, !tbaa !2
  %lnauV = load i64*, i64** %Hp_Var
  %lnav0 = getelementptr inbounds i64, i64* %lnauV, i32 -3
  store i64 %lnauZ, i64* %lnav0, !tbaa !3
  %lnav2 = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lnav1 = load i64*, i64** %Hp_Var
  %lnav3 = getelementptr inbounds i64, i64* %lnav1, i32 -2
  store i64 %lnav2, i64* %lnav3, !tbaa !3
  %lnav5 = load i64*, i64** %Hp_Var
  %lnav6 = getelementptr inbounds i64, i64* %lnav5, i32 -5
  %lnav7 = ptrtoint i64* %lnav6 to i64
  %lnav4 = load i64*, i64** %Hp_Var
  %lnav8 = getelementptr inbounds i64, i64* %lnav4, i32 -1
  store i64 %lnav7, i64* %lnav8, !tbaa !3
  %lnava = load i64*, i64** %Hp_Var
  %lnavb = getelementptr inbounds i64, i64* %lnava, i32 -10
  %lnavc = ptrtoint i64* %lnavb to i64
  %lnav9 = load i64*, i64** %Hp_Var
  %lnavd = getelementptr inbounds i64, i64* %lnav9, i32 0
  store i64 %lnavc, i64* %lnavd, !tbaa !3
  %lnavf = load i64*, i64** %Hp_Var
  %lnavg = ptrtoint i64* %lnavf to i64
  %lnavh = add i64 %lnavg, -14
  store i64 %lnavh, i64* %R1_Var
  %lnavi = load i64*, i64** %Sp_Var
  %lnavj = getelementptr inbounds i64, i64* %lnavi, i32 7
  %lnavk = ptrtoint i64* %lnavj to i64
  %lnavl = inttoptr i64 %lnavk to i64*
  store i64* %lnavl, i64** %Sp_Var
  %lnavm = load i64*, i64** %Sp_Var
  %lnavn = getelementptr inbounds i64, i64* %lnavm, i32 0
  %lnavo = bitcast i64* %lnavn to i64*
  %lnavp = load i64, i64* %lnavo, !tbaa !2
  %lnavq = inttoptr i64 %lnavp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnavr = load i64*, i64** %Sp_Var
  %lnavs = load i64*, i64** %Hp_Var
  %lnavt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnavq( i64* %Base_Arg, i64* %lnavr, i64* %lnavs, i64 %lnavt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cae5:
  %lnavu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %lnavu, !tbaa !5
  %lnavv = load i64, i64* %R1_Var
  store i64 %lnavv, i64* %R1_Var
  %lnavw = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnavx = load i64*, i64** %Sp_Var
  %lnavy = load i64*, i64** %Hp_Var
  %lnavz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnavw( i64* %Base_Arg, i64* %lnavx, i64* %lnavy, i64 %lnavz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to i8*)
define internal ghccc void @cabu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaeg_srt_struct* @_uaeg_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to i64)) to i32),i32 0)}>
{
navA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5gD = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cabu
cabu:
  %lnavB = load i64*, i64** %Hp_Var
  %lnavC = getelementptr inbounds i64, i64* %lnavB, i32 3
  %lnavD = ptrtoint i64* %lnavC to i64
  %lnavE = inttoptr i64 %lnavD to i64*
  store i64* %lnavE, i64** %Hp_Var
  %lnavF = load i64*, i64** %Hp_Var
  %lnavG = ptrtoint i64* %lnavF to i64
  %lnavH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnavI = bitcast i64* %lnavH to i64*
  %lnavJ = load i64, i64* %lnavI, !tbaa !5
  %lnavK = icmp ugt i64 %lnavG, %lnavJ
  %lnavL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnavK, i1 0 )
  br i1 %lnavL, label %cadA, label %cadz
cadz:
  %lnavN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gI_info$def to i64
  %lnavM = load i64*, i64** %Hp_Var
  %lnavO = getelementptr inbounds i64, i64* %lnavM, i32 -2
  store i64 %lnavN, i64* %lnavO, !tbaa !3
  %lnavQ = load i64*, i64** %Sp_Var
  %lnavR = getelementptr inbounds i64, i64* %lnavQ, i32 3
  %lnavS = bitcast i64* %lnavR to i64*
  %lnavT = load i64, i64* %lnavS, !tbaa !2
  %lnavP = load i64*, i64** %Hp_Var
  %lnavU = getelementptr inbounds i64, i64* %lnavP, i32 0
  store i64 %lnavT, i64* %lnavU, !tbaa !3
  %lnavV = load i64*, i64** %Sp_Var
  %lnavW = getelementptr inbounds i64, i64* %lnavV, i32 1
  %lnavX = bitcast i64* %lnavW to i64*
  %lnavY = load i64, i64* %lnavX, !tbaa !2
  store i64 %lnavY, i64* %ls5gD
  %lnaw0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabD_info$def to i64
  %lnavZ = load i64*, i64** %Sp_Var
  %lnaw1 = getelementptr inbounds i64, i64* %lnavZ, i32 1
  store i64 %lnaw0, i64* %lnaw1, !tbaa !2
  %lnaw2 = load i64*, i64** %Sp_Var
  %lnaw3 = getelementptr inbounds i64, i64* %lnaw2, i32 4
  %lnaw4 = bitcast i64* %lnaw3 to i64*
  %lnaw5 = load i64, i64* %lnaw4, !tbaa !2
  store i64 %lnaw5, i64* %R2_Var
  %lnaw7 = ptrtoint i8* @stg_ap_pp_info to i64
  %lnaw6 = load i64*, i64** %Sp_Var
  %lnaw8 = getelementptr inbounds i64, i64* %lnaw6, i32 -2
  store i64 %lnaw7, i64* %lnaw8, !tbaa !2
  %lnawa = load i64, i64* %ls5gD
  %lnaw9 = load i64*, i64** %Sp_Var
  %lnawb = getelementptr inbounds i64, i64* %lnaw9, i32 -1
  store i64 %lnawa, i64* %lnawb, !tbaa !2
  %lnawd = load i64*, i64** %Hp_Var
  %lnawe = getelementptr inbounds i64, i64* %lnawd, i32 -2
  %lnawf = ptrtoint i64* %lnawe to i64
  %lnawc = load i64*, i64** %Sp_Var
  %lnawg = getelementptr inbounds i64, i64* %lnawc, i32 0
  store i64 %lnawf, i64* %lnawg, !tbaa !2
  %lnawh = load i64*, i64** %Sp_Var
  %lnawi = getelementptr inbounds i64, i64* %lnawh, i32 -2
  %lnawj = ptrtoint i64* %lnawi to i64
  %lnawk = inttoptr i64 %lnawj to i64*
  store i64* %lnawk, i64** %Sp_Var
  %lnawl = bitcast i8* @ghczmprim_GHCziClasses_zeze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawm = load i64*, i64** %Sp_Var
  %lnawn = load i64*, i64** %Hp_Var
  %lnawo = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawl( i64* %Base_Arg, i64* %lnawm, i64* %lnawn, i64 %R1_Arg, i64 %lnawo, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadA:
  %lnawp = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnawp, !tbaa !5
  %lnawr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabu_info$def to i64
  %lnawq = load i64*, i64** %Sp_Var
  %lnaws = getelementptr inbounds i64, i64* %lnawq, i32 0
  store i64 %lnawr, i64* %lnaws, !tbaa !2
  %lnawt = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawu = load i64*, i64** %Sp_Var
  %lnawv = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawt( i64* %Base_Arg, i64* %lnawu, i64* %lnawv, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabD_info$def to i8*)
define internal ghccc void @cabD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaeg_srt_struct* @_uaeg_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabD_info$def to i64)) to i32),i32 0)}>
{
naww:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  br label %cabD
cabD:
  %lnawx = load i64, i64* %R1_Var
  %lnawy = and i64 %lnawx, 7
  switch i64 %lnawy, label %cadE [i64 1, label %cadE
i64 2, label %cadF]
cadE:
  %lnawz = ptrtoint %r55F_closure_struct* @r55F_closure$def to i64
  store i64 %lnawz, i64* %R1_Var
  %lnawA = load i64*, i64** %Sp_Var
  %lnawB = getelementptr inbounds i64, i64* %lnawA, i32 5
  %lnawC = ptrtoint i64* %lnawB to i64
  %lnawD = inttoptr i64 %lnawC to i64*
  store i64* %lnawD, i64** %Sp_Var
  %lnawF = load i64, i64* %R1_Var
  %lnawG = inttoptr i64 %lnawF to i64*
  %lnawH = load i64, i64* %lnawG, !tbaa !4
  %lnawI = inttoptr i64 %lnawH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawJ = load i64*, i64** %Sp_Var
  %lnawK = load i64*, i64** %Hp_Var
  %lnawL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawI( i64* %Base_Arg, i64* %lnawJ, i64* %lnawK, i64 %lnawL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadF:
  %lnawM = load i64*, i64** %Hp_Var
  %lnawN = getelementptr inbounds i64, i64* %lnawM, i32 6
  %lnawO = ptrtoint i64* %lnawN to i64
  %lnawP = inttoptr i64 %lnawO to i64*
  store i64* %lnawP, i64** %Hp_Var
  %lnawQ = load i64*, i64** %Hp_Var
  %lnawR = ptrtoint i64* %lnawQ to i64
  %lnawS = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnawT = bitcast i64* %lnawS to i64*
  %lnawU = load i64, i64* %lnawT, !tbaa !5
  %lnawV = icmp ugt i64 %lnawR, %lnawU
  %lnawW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnawV, i1 0 )
  br i1 %lnawW, label %cadI, label %cadH
cadH:
  %lnawY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5gK_info$def to i64
  %lnawX = load i64*, i64** %Hp_Var
  %lnawZ = getelementptr inbounds i64, i64* %lnawX, i32 -5
  store i64 %lnawY, i64* %lnawZ, !tbaa !3
  %lnax1 = load i64*, i64** %Sp_Var
  %lnax2 = getelementptr inbounds i64, i64* %lnax1, i32 1
  %lnax3 = bitcast i64* %lnax2 to i64*
  %lnax4 = load i64, i64* %lnax3, !tbaa !2
  %lnax0 = load i64*, i64** %Hp_Var
  %lnax5 = getelementptr inbounds i64, i64* %lnax0, i32 -3
  store i64 %lnax4, i64* %lnax5, !tbaa !3
  %lnax7 = load i64*, i64** %Sp_Var
  %lnax8 = getelementptr inbounds i64, i64* %lnax7, i32 2
  %lnax9 = bitcast i64* %lnax8 to i64*
  %lnaxa = load i64, i64* %lnax9, !tbaa !2
  %lnax6 = load i64*, i64** %Hp_Var
  %lnaxb = getelementptr inbounds i64, i64* %lnax6, i32 -2
  store i64 %lnaxa, i64* %lnaxb, !tbaa !3
  %lnaxd = load i64*, i64** %Sp_Var
  %lnaxe = getelementptr inbounds i64, i64* %lnaxd, i32 3
  %lnaxf = bitcast i64* %lnaxe to i64*
  %lnaxg = load i64, i64* %lnaxf, !tbaa !2
  %lnaxc = load i64*, i64** %Hp_Var
  %lnaxh = getelementptr inbounds i64, i64* %lnaxc, i32 -1
  store i64 %lnaxg, i64* %lnaxh, !tbaa !3
  %lnaxj = load i64*, i64** %Sp_Var
  %lnaxk = getelementptr inbounds i64, i64* %lnaxj, i32 4
  %lnaxl = bitcast i64* %lnaxk to i64*
  %lnaxm = load i64, i64* %lnaxl, !tbaa !2
  %lnaxi = load i64*, i64** %Hp_Var
  %lnaxn = getelementptr inbounds i64, i64* %lnaxi, i32 0
  store i64 %lnaxm, i64* %lnaxn, !tbaa !3
  %lnaxo = load i64*, i64** %Hp_Var
  %lnaxp = getelementptr inbounds i64, i64* %lnaxo, i32 -5
  %lnaxq = ptrtoint i64* %lnaxp to i64
  %lnaxr = and i64 %lnaxq, -8
  store i64 %lnaxr, i64* %R1_Var
  %lnaxs = load i64*, i64** %Sp_Var
  %lnaxt = getelementptr inbounds i64, i64* %lnaxs, i32 5
  %lnaxu = ptrtoint i64* %lnaxt to i64
  %lnaxv = inttoptr i64 %lnaxu to i64*
  store i64* %lnaxv, i64** %Sp_Var
  %lnaxx = load i64, i64* %R1_Var
  %lnaxy = inttoptr i64 %lnaxx to i64*
  %lnaxz = load i64, i64* %lnaxy, !tbaa !4
  %lnaxA = inttoptr i64 %lnaxz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaxB = load i64*, i64** %Sp_Var
  %lnaxC = load i64*, i64** %Hp_Var
  %lnaxD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaxA( i64* %Base_Arg, i64* %lnaxB, i64* %lnaxC, i64 %lnaxD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadI:
  %lnaxE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnaxE, !tbaa !5
  %lnaxF = load i64, i64* %R1_Var
  store i64 %lnaxF, i64* %R1_Var
  %lnaxG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaxH = load i64*, i64** %Sp_Var
  %lnaxI = load i64*, i64** %Hp_Var
  %lnaxJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaxG( i64* %Base_Arg, i64* %lnaxH, i64* %lnaxI, i64 %lnaxJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdfFloatingPs_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdfFloatingPs_closure$def = internal global %Main_zdfFloatingPs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPs_info$def to i64), i64 ptrtoint (%Main_zdfFractionalPs_closure_struct* @Main_zdfFractionalPs_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdclog1mexp_closure_struct* @Main_zdfFloatingPszuzdclog1mexp_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdclog1pexp_closure_struct* @Main_zdfFloatingPszuzdclog1pexp_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdcexpm1_closure_struct* @Main_zdfFloatingPszuzdcexpm1_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdclog1p_closure_struct* @Main_zdfFloatingPszuzdclog1p_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdctanh_closure_struct* @Main_zdfFloatingPszuzdctanh_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdctan_closure_struct* @Main_zdfFloatingPszuzdctan_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdclogBase_closure_struct* @Main_zdfFloatingPszuzdclogBase_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdcztzt_closure_struct* @Main_zdfFloatingPszuzdcztzt_closure$def to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64), i64 ptrtoint (%r55I_closure_struct* @r55I_closure$def to i64), i64 ptrtoint (%r55O_closure_struct* @r55O_closure$def to i64), i64 ptrtoint (%r55P_closure_struct* @r55P_closure$def to i64), i64 ptrtoint (%r55Q_closure_struct* @r55Q_closure$def to i64), i64 ptrtoint (%r55R_closure_struct* @r55R_closure$def to i64), i64 ptrtoint (%r55S_closure_struct* @r55S_closure$def to i64), i64 ptrtoint (%r55T_closure_struct* @r55T_closure$def to i64), i64 ptrtoint (%r55U_closure_struct* @r55U_closure$def to i64), i64 0}>
@Main_zdfFloatingPs_closure = alias i8, bitcast (%Main_zdfFloatingPs_closure_struct* @Main_zdfFloatingPs_closure$def to i8*)
@s5i0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5i0_info$def to i8*)
define internal ghccc void @s5i0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdclog1mexp_closure_struct* @Main_zdfFloatingPszuzdclog1mexp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5i0_info$def to i64)) to i32),i32 0)}>
{
nazb:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caxT
caxT:
  %lnazc = load i64, i64* %R2_Var
  store i64 %lnazc, i64* %R4_Var
  %lnazd = add i64 %R1_Arg, 15
  %lnaze = inttoptr i64 %lnazd to i64*
  %lnazf = load i64, i64* %lnaze, !tbaa !4
  store i64 %lnazf, i64* %R3_Var
  %lnazg = add i64 %R1_Arg, 7
  %lnazh = inttoptr i64 %lnazg to i64*
  %lnazi = load i64, i64* %lnazh, !tbaa !4
  store i64 %lnazi, i64* %R2_Var
  %lnazj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1mexp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazk = load i64, i64* %R2_Var
  %lnazl = load i64, i64* %R3_Var
  %lnazm = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnazk, i64 %lnazl, i64 %lnazm, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hZ_info$def to i8*)
define internal ghccc void @s5hZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdclog1pexp_closure_struct* @Main_zdfFloatingPszuzdclog1pexp_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hZ_info$def to i64)) to i32),i32 0)}>
{
nazn:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cay1
cay1:
  %lnazo = load i64, i64* %R2_Var
  store i64 %lnazo, i64* %R4_Var
  %lnazp = add i64 %R1_Arg, 15
  %lnazq = inttoptr i64 %lnazp to i64*
  %lnazr = load i64, i64* %lnazq, !tbaa !4
  store i64 %lnazr, i64* %R3_Var
  %lnazs = add i64 %R1_Arg, 7
  %lnazt = inttoptr i64 %lnazs to i64*
  %lnazu = load i64, i64* %lnazt, !tbaa !4
  store i64 %lnazu, i64* %R2_Var
  %lnazv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1pexp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazw = load i64, i64* %R2_Var
  %lnazx = load i64, i64* %R3_Var
  %lnazy = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnazw, i64 %lnazx, i64 %lnazy, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hY_info$def to i8*)
define internal ghccc void @s5hY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcexpm1_closure_struct* @Main_zdfFloatingPszuzdcexpm1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hY_info$def to i64)) to i32),i32 0)}>
{
nazz:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cay9
cay9:
  %lnazA = load i64, i64* %R2_Var
  store i64 %lnazA, i64* %R4_Var
  %lnazB = add i64 %R1_Arg, 15
  %lnazC = inttoptr i64 %lnazB to i64*
  %lnazD = load i64, i64* %lnazC, !tbaa !4
  store i64 %lnazD, i64* %R3_Var
  %lnazE = add i64 %R1_Arg, 7
  %lnazF = inttoptr i64 %lnazE to i64*
  %lnazG = load i64, i64* %lnazF, !tbaa !4
  store i64 %lnazG, i64* %R2_Var
  %lnazH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcexpm1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazI = load i64, i64* %R2_Var
  %lnazJ = load i64, i64* %R3_Var
  %lnazK = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnazI, i64 %lnazJ, i64 %lnazK, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hX_info$def to i8*)
define internal ghccc void @s5hX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdclog1p_closure_struct* @Main_zdfFloatingPszuzdclog1p_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hX_info$def to i64)) to i32),i32 0)}>
{
nazL:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayh
cayh:
  %lnazM = load i64, i64* %R2_Var
  store i64 %lnazM, i64* %R4_Var
  %lnazN = add i64 %R1_Arg, 15
  %lnazO = inttoptr i64 %lnazN to i64*
  %lnazP = load i64, i64* %lnazO, !tbaa !4
  store i64 %lnazP, i64* %R3_Var
  %lnazQ = add i64 %R1_Arg, 7
  %lnazR = inttoptr i64 %lnazQ to i64*
  %lnazS = load i64, i64* %lnazR, !tbaa !4
  store i64 %lnazS, i64* %R2_Var
  %lnazT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclog1p_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazU = load i64, i64* %R2_Var
  %lnazV = load i64, i64* %R3_Var
  %lnazW = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnazU, i64 %lnazV, i64 %lnazW, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hW_info$def to i8*)
define internal ghccc void @s5hW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdctanh_closure_struct* @Main_zdfFloatingPszuzdctanh_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hW_info$def to i64)) to i32),i32 0)}>
{
nazX:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayp
cayp:
  %lnazY = load i64, i64* %R2_Var
  store i64 %lnazY, i64* %R4_Var
  %lnazZ = add i64 %R1_Arg, 15
  %lnaA0 = inttoptr i64 %lnazZ to i64*
  %lnaA1 = load i64, i64* %lnaA0, !tbaa !4
  store i64 %lnaA1, i64* %R3_Var
  %lnaA2 = add i64 %R1_Arg, 7
  %lnaA3 = inttoptr i64 %lnaA2 to i64*
  %lnaA4 = load i64, i64* %lnaA3, !tbaa !4
  store i64 %lnaA4, i64* %R2_Var
  %lnaA5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctanh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaA6 = load i64, i64* %R2_Var
  %lnaA7 = load i64, i64* %R3_Var
  %lnaA8 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaA5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaA6, i64 %lnaA7, i64 %lnaA8, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hV_info$def to i8*)
define internal ghccc void @s5hV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdctan_closure_struct* @Main_zdfFloatingPszuzdctan_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hV_info$def to i64)) to i32),i32 0)}>
{
naA9:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayx
cayx:
  %lnaAa = load i64, i64* %R2_Var
  store i64 %lnaAa, i64* %R4_Var
  %lnaAb = add i64 %R1_Arg, 15
  %lnaAc = inttoptr i64 %lnaAb to i64*
  %lnaAd = load i64, i64* %lnaAc, !tbaa !4
  store i64 %lnaAd, i64* %R3_Var
  %lnaAe = add i64 %R1_Arg, 7
  %lnaAf = inttoptr i64 %lnaAe to i64*
  %lnaAg = load i64, i64* %lnaAf, !tbaa !4
  store i64 %lnaAg, i64* %R2_Var
  %lnaAh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdctan_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAi = load i64, i64* %R2_Var
  %lnaAj = load i64, i64* %R3_Var
  %lnaAk = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaAi, i64 %lnaAj, i64 %lnaAk, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hU_info$def to i8*)
define internal ghccc void @s5hU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdclogBase_closure_struct* @Main_zdfFloatingPszuzdclogBase_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hU_info$def to i64)) to i32),i32 0)}>
{
naAl:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayF
cayF:
  %lnaAm = load i64, i64* %R3_Var
  store i64 %lnaAm, i64* %R5_Var
  %lnaAn = load i64, i64* %R2_Var
  store i64 %lnaAn, i64* %R4_Var
  %lnaAo = add i64 %R1_Arg, 14
  %lnaAp = inttoptr i64 %lnaAo to i64*
  %lnaAq = load i64, i64* %lnaAp, !tbaa !4
  store i64 %lnaAq, i64* %R3_Var
  %lnaAr = add i64 %R1_Arg, 6
  %lnaAs = inttoptr i64 %lnaAr to i64*
  %lnaAt = load i64, i64* %lnaAs, !tbaa !4
  store i64 %lnaAt, i64* %R2_Var
  %lnaAu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdclogBase_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAv = load i64, i64* %R2_Var
  %lnaAw = load i64, i64* %R3_Var
  %lnaAx = load i64, i64* %R4_Var
  %lnaAy = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaAv, i64 %lnaAw, i64 %lnaAx, i64 %lnaAy, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hT_info$def to i8*)
define internal ghccc void @s5hT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcztzt_closure_struct* @Main_zdfFloatingPszuzdcztzt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hT_info$def to i64)) to i32),i32 0)}>
{
naAz:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayN
cayN:
  %lnaAA = load i64, i64* %R3_Var
  store i64 %lnaAA, i64* %R5_Var
  %lnaAB = load i64, i64* %R2_Var
  store i64 %lnaAB, i64* %R4_Var
  %lnaAC = add i64 %R1_Arg, 14
  %lnaAD = inttoptr i64 %lnaAC to i64*
  %lnaAE = load i64, i64* %lnaAD, !tbaa !4
  store i64 %lnaAE, i64* %R3_Var
  %lnaAF = add i64 %R1_Arg, 6
  %lnaAG = inttoptr i64 %lnaAF to i64*
  %lnaAH = load i64, i64* %lnaAG, !tbaa !4
  store i64 %lnaAH, i64* %R2_Var
  %lnaAI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcztzt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAJ = load i64, i64* %R2_Var
  %lnaAK = load i64, i64* %R3_Var
  %lnaAL = load i64, i64* %R4_Var
  %lnaAM = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaAJ, i64 %lnaAK, i64 %lnaAL, i64 %lnaAM, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hS_info$def to i8*)
define internal ghccc void @s5hS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hS_info$def to i64)) to i32),i32 0)}>
{
naAN:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cayV
cayV:
  %lnaAO = load i64, i64* %R2_Var
  store i64 %lnaAO, i64* %R4_Var
  %lnaAP = add i64 %R1_Arg, 15
  %lnaAQ = inttoptr i64 %lnaAP to i64*
  %lnaAR = load i64, i64* %lnaAQ, !tbaa !4
  store i64 %lnaAR, i64* %R3_Var
  %lnaAS = add i64 %R1_Arg, 7
  %lnaAT = inttoptr i64 %lnaAS to i64*
  %lnaAU = load i64, i64* %lnaAT, !tbaa !4
  store i64 %lnaAU, i64* %R2_Var
  %lnaAV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdcsqrt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAW = load i64, i64* %R2_Var
  %lnaAX = load i64, i64* %R3_Var
  %lnaAY = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaAW, i64 %lnaAX, i64 %lnaAY, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5hR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hR_info$def to i8*)
define internal ghccc void @s5hR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdfFractionalPs_closure_struct* @Main_zdfFractionalPs_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hR_info$def to i64)) to i32),i32 0)}>
{
naAZ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caz2
caz2:
  %lnaB0 = load i64*, i64** %Sp_Var
  %lnaB1 = getelementptr inbounds i64, i64* %lnaB0, i32 -2
  %lnaB2 = ptrtoint i64* %lnaB1 to i64
  %lnaB3 = icmp ult i64 %lnaB2, %SpLim_Arg
  %lnaB4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaB3, i1 0 )
  br i1 %lnaB4, label %caz3, label %caz4
caz4:
  %lnaB6 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaB5 = load i64*, i64** %Sp_Var
  %lnaB7 = getelementptr inbounds i64, i64* %lnaB5, i32 -2
  store i64 %lnaB6, i64* %lnaB7, !tbaa !2
  %lnaB9 = load i64, i64* %R1_Var
  %lnaB8 = load i64*, i64** %Sp_Var
  %lnaBa = getelementptr inbounds i64, i64* %lnaB8, i32 -1
  store i64 %lnaB9, i64* %lnaBa, !tbaa !2
  %lnaBd = load i64, i64* %R1_Var
  %lnaBe = add i64 %lnaBd, 24
  %lnaBf = inttoptr i64 %lnaBe to i64*
  %lnaBg = load i64, i64* %lnaBf, !tbaa !4
  store i64 %lnaBg, i64* %R3_Var
  %lnaBj = load i64, i64* %R1_Var
  %lnaBk = add i64 %lnaBj, 16
  %lnaBl = inttoptr i64 %lnaBk to i64*
  %lnaBm = load i64, i64* %lnaBl, !tbaa !4
  store i64 %lnaBm, i64* %R2_Var
  %lnaBn = load i64*, i64** %Sp_Var
  %lnaBo = getelementptr inbounds i64, i64* %lnaBn, i32 -2
  %lnaBp = ptrtoint i64* %lnaBo to i64
  %lnaBq = inttoptr i64 %lnaBp to i64*
  store i64* %lnaBq, i64** %Sp_Var
  %lnaBr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFractionalPs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaBs = load i64*, i64** %Sp_Var
  %lnaBt = load i64, i64* %R1_Var
  %lnaBu = load i64, i64* %R2_Var
  %lnaBv = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaBr( i64* %Base_Arg, i64* %lnaBs, i64* %Hp_Arg, i64 %lnaBt, i64 %lnaBu, i64 %lnaBv, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caz3:
  %lnaBw = load i64, i64* %R1_Var
  store i64 %lnaBw, i64* %R1_Var
  %lnaBx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaBy = bitcast i64* %lnaBx to i64*
  %lnaBz = load i64, i64* %lnaBy, !tbaa !5
  %lnaBA = inttoptr i64 %lnaBz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaBB = load i64*, i64** %Sp_Var
  %lnaBC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaBA( i64* %Base_Arg, i64* %lnaBB, i64* %Hp_Arg, i64 %lnaBC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdfFloatingPs_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPs_info$def to i8*)
define ghccc void @Main_zdfFloatingPs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 18, i32 14, i32 0}>
{
naBD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caz6
caz6:
  %lnaBE = load i64*, i64** %Hp_Var
  %lnaBF = getelementptr inbounds i64, i64* %lnaBE, i32 55
  %lnaBG = ptrtoint i64* %lnaBF to i64
  %lnaBH = inttoptr i64 %lnaBG to i64*
  store i64* %lnaBH, i64** %Hp_Var
  %lnaBI = load i64*, i64** %Hp_Var
  %lnaBJ = ptrtoint i64* %lnaBI to i64
  %lnaBK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaBL = bitcast i64* %lnaBK to i64*
  %lnaBM = load i64, i64* %lnaBL, !tbaa !5
  %lnaBN = icmp ugt i64 %lnaBJ, %lnaBM
  %lnaBO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaBN, i1 0 )
  br i1 %lnaBO, label %caza, label %caz9
caz9:
  %lnaBQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5i0_info$def to i64
  %lnaBP = load i64*, i64** %Hp_Var
  %lnaBR = getelementptr inbounds i64, i64* %lnaBP, i32 -54
  store i64 %lnaBQ, i64* %lnaBR, !tbaa !3
  %lnaBT = load i64, i64* %R2_Var
  %lnaBS = load i64*, i64** %Hp_Var
  %lnaBU = getelementptr inbounds i64, i64* %lnaBS, i32 -53
  store i64 %lnaBT, i64* %lnaBU, !tbaa !3
  %lnaBW = load i64, i64* %R3_Var
  %lnaBV = load i64*, i64** %Hp_Var
  %lnaBX = getelementptr inbounds i64, i64* %lnaBV, i32 -52
  store i64 %lnaBW, i64* %lnaBX, !tbaa !3
  %lnaBZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hZ_info$def to i64
  %lnaBY = load i64*, i64** %Hp_Var
  %lnaC0 = getelementptr inbounds i64, i64* %lnaBY, i32 -51
  store i64 %lnaBZ, i64* %lnaC0, !tbaa !3
  %lnaC2 = load i64, i64* %R2_Var
  %lnaC1 = load i64*, i64** %Hp_Var
  %lnaC3 = getelementptr inbounds i64, i64* %lnaC1, i32 -50
  store i64 %lnaC2, i64* %lnaC3, !tbaa !3
  %lnaC5 = load i64, i64* %R3_Var
  %lnaC4 = load i64*, i64** %Hp_Var
  %lnaC6 = getelementptr inbounds i64, i64* %lnaC4, i32 -49
  store i64 %lnaC5, i64* %lnaC6, !tbaa !3
  %lnaC8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hY_info$def to i64
  %lnaC7 = load i64*, i64** %Hp_Var
  %lnaC9 = getelementptr inbounds i64, i64* %lnaC7, i32 -48
  store i64 %lnaC8, i64* %lnaC9, !tbaa !3
  %lnaCb = load i64, i64* %R2_Var
  %lnaCa = load i64*, i64** %Hp_Var
  %lnaCc = getelementptr inbounds i64, i64* %lnaCa, i32 -47
  store i64 %lnaCb, i64* %lnaCc, !tbaa !3
  %lnaCe = load i64, i64* %R3_Var
  %lnaCd = load i64*, i64** %Hp_Var
  %lnaCf = getelementptr inbounds i64, i64* %lnaCd, i32 -46
  store i64 %lnaCe, i64* %lnaCf, !tbaa !3
  %lnaCh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hX_info$def to i64
  %lnaCg = load i64*, i64** %Hp_Var
  %lnaCi = getelementptr inbounds i64, i64* %lnaCg, i32 -45
  store i64 %lnaCh, i64* %lnaCi, !tbaa !3
  %lnaCk = load i64, i64* %R2_Var
  %lnaCj = load i64*, i64** %Hp_Var
  %lnaCl = getelementptr inbounds i64, i64* %lnaCj, i32 -44
  store i64 %lnaCk, i64* %lnaCl, !tbaa !3
  %lnaCn = load i64, i64* %R3_Var
  %lnaCm = load i64*, i64** %Hp_Var
  %lnaCo = getelementptr inbounds i64, i64* %lnaCm, i32 -43
  store i64 %lnaCn, i64* %lnaCo, !tbaa !3
  %lnaCq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hW_info$def to i64
  %lnaCp = load i64*, i64** %Hp_Var
  %lnaCr = getelementptr inbounds i64, i64* %lnaCp, i32 -42
  store i64 %lnaCq, i64* %lnaCr, !tbaa !3
  %lnaCt = load i64, i64* %R2_Var
  %lnaCs = load i64*, i64** %Hp_Var
  %lnaCu = getelementptr inbounds i64, i64* %lnaCs, i32 -41
  store i64 %lnaCt, i64* %lnaCu, !tbaa !3
  %lnaCw = load i64, i64* %R3_Var
  %lnaCv = load i64*, i64** %Hp_Var
  %lnaCx = getelementptr inbounds i64, i64* %lnaCv, i32 -40
  store i64 %lnaCw, i64* %lnaCx, !tbaa !3
  %lnaCz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hV_info$def to i64
  %lnaCy = load i64*, i64** %Hp_Var
  %lnaCA = getelementptr inbounds i64, i64* %lnaCy, i32 -39
  store i64 %lnaCz, i64* %lnaCA, !tbaa !3
  %lnaCC = load i64, i64* %R2_Var
  %lnaCB = load i64*, i64** %Hp_Var
  %lnaCD = getelementptr inbounds i64, i64* %lnaCB, i32 -38
  store i64 %lnaCC, i64* %lnaCD, !tbaa !3
  %lnaCF = load i64, i64* %R3_Var
  %lnaCE = load i64*, i64** %Hp_Var
  %lnaCG = getelementptr inbounds i64, i64* %lnaCE, i32 -37
  store i64 %lnaCF, i64* %lnaCG, !tbaa !3
  %lnaCI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hU_info$def to i64
  %lnaCH = load i64*, i64** %Hp_Var
  %lnaCJ = getelementptr inbounds i64, i64* %lnaCH, i32 -36
  store i64 %lnaCI, i64* %lnaCJ, !tbaa !3
  %lnaCL = load i64, i64* %R2_Var
  %lnaCK = load i64*, i64** %Hp_Var
  %lnaCM = getelementptr inbounds i64, i64* %lnaCK, i32 -35
  store i64 %lnaCL, i64* %lnaCM, !tbaa !3
  %lnaCO = load i64, i64* %R3_Var
  %lnaCN = load i64*, i64** %Hp_Var
  %lnaCP = getelementptr inbounds i64, i64* %lnaCN, i32 -34
  store i64 %lnaCO, i64* %lnaCP, !tbaa !3
  %lnaCR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hT_info$def to i64
  %lnaCQ = load i64*, i64** %Hp_Var
  %lnaCS = getelementptr inbounds i64, i64* %lnaCQ, i32 -33
  store i64 %lnaCR, i64* %lnaCS, !tbaa !3
  %lnaCU = load i64, i64* %R2_Var
  %lnaCT = load i64*, i64** %Hp_Var
  %lnaCV = getelementptr inbounds i64, i64* %lnaCT, i32 -32
  store i64 %lnaCU, i64* %lnaCV, !tbaa !3
  %lnaCX = load i64, i64* %R3_Var
  %lnaCW = load i64*, i64** %Hp_Var
  %lnaCY = getelementptr inbounds i64, i64* %lnaCW, i32 -31
  store i64 %lnaCX, i64* %lnaCY, !tbaa !3
  %lnaD0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hS_info$def to i64
  %lnaCZ = load i64*, i64** %Hp_Var
  %lnaD1 = getelementptr inbounds i64, i64* %lnaCZ, i32 -30
  store i64 %lnaD0, i64* %lnaD1, !tbaa !3
  %lnaD3 = load i64, i64* %R2_Var
  %lnaD2 = load i64*, i64** %Hp_Var
  %lnaD4 = getelementptr inbounds i64, i64* %lnaD2, i32 -29
  store i64 %lnaD3, i64* %lnaD4, !tbaa !3
  %lnaD6 = load i64, i64* %R3_Var
  %lnaD5 = load i64*, i64** %Hp_Var
  %lnaD7 = getelementptr inbounds i64, i64* %lnaD5, i32 -28
  store i64 %lnaD6, i64* %lnaD7, !tbaa !3
  %lnaD9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5hR_info$def to i64
  %lnaD8 = load i64*, i64** %Hp_Var
  %lnaDa = getelementptr inbounds i64, i64* %lnaD8, i32 -27
  store i64 %lnaD9, i64* %lnaDa, !tbaa !3
  %lnaDc = load i64, i64* %R2_Var
  %lnaDb = load i64*, i64** %Hp_Var
  %lnaDd = getelementptr inbounds i64, i64* %lnaDb, i32 -25
  store i64 %lnaDc, i64* %lnaDd, !tbaa !3
  %lnaDf = load i64, i64* %R3_Var
  %lnaDe = load i64*, i64** %Hp_Var
  %lnaDg = getelementptr inbounds i64, i64* %lnaDe, i32 -24
  store i64 %lnaDf, i64* %lnaDg, !tbaa !3
  %lnaDi = ptrtoint i8* @base_GHCziFloat_CZCFloating_con_info to i64
  %lnaDh = load i64*, i64** %Hp_Var
  %lnaDj = getelementptr inbounds i64, i64* %lnaDh, i32 -23
  store i64 %lnaDi, i64* %lnaDj, !tbaa !3
  %lnaDl = load i64*, i64** %Hp_Var
  %lnaDm = getelementptr inbounds i64, i64* %lnaDl, i32 -27
  %lnaDn = ptrtoint i64* %lnaDm to i64
  %lnaDk = load i64*, i64** %Hp_Var
  %lnaDo = getelementptr inbounds i64, i64* %lnaDk, i32 -22
  store i64 %lnaDn, i64* %lnaDo, !tbaa !3
  %lnaDq = ptrtoint %r55O_closure_struct* @r55O_closure$def to i64
  %lnaDp = load i64*, i64** %Hp_Var
  %lnaDr = getelementptr inbounds i64, i64* %lnaDp, i32 -21
  store i64 %lnaDq, i64* %lnaDr, !tbaa !3
  %lnaDt = ptrtoint %r55I_closure_struct* @r55I_closure$def to i64
  %lnaDs = load i64*, i64** %Hp_Var
  %lnaDu = getelementptr inbounds i64, i64* %lnaDs, i32 -20
  store i64 %lnaDt, i64* %lnaDu, !tbaa !3
  %lnaDw = ptrtoint %r55J_closure_struct* @r55J_closure$def to i64
  %lnaDv = load i64*, i64** %Hp_Var
  %lnaDx = getelementptr inbounds i64, i64* %lnaDv, i32 -19
  store i64 %lnaDw, i64* %lnaDx, !tbaa !3
  %lnaDA = load i64*, i64** %Hp_Var
  %lnaDB = ptrtoint i64* %lnaDA to i64
  %lnaDC = add i64 %lnaDB, -239
  %lnaDy = load i64*, i64** %Hp_Var
  %lnaDD = getelementptr inbounds i64, i64* %lnaDy, i32 -18
  store i64 %lnaDC, i64* %lnaDD, !tbaa !3
  %lnaDG = load i64*, i64** %Hp_Var
  %lnaDH = ptrtoint i64* %lnaDG to i64
  %lnaDI = add i64 %lnaDH, -262
  %lnaDE = load i64*, i64** %Hp_Var
  %lnaDJ = getelementptr inbounds i64, i64* %lnaDE, i32 -17
  store i64 %lnaDI, i64* %lnaDJ, !tbaa !3
  %lnaDM = load i64*, i64** %Hp_Var
  %lnaDN = ptrtoint i64* %lnaDM to i64
  %lnaDO = add i64 %lnaDN, -286
  %lnaDK = load i64*, i64** %Hp_Var
  %lnaDP = getelementptr inbounds i64, i64* %lnaDK, i32 -16
  store i64 %lnaDO, i64* %lnaDP, !tbaa !3
  %lnaDR = ptrtoint %r55M_closure_struct* @r55M_closure$def to i64
  %lnaDQ = load i64*, i64** %Hp_Var
  %lnaDS = getelementptr inbounds i64, i64* %lnaDQ, i32 -15
  store i64 %lnaDR, i64* %lnaDS, !tbaa !3
  %lnaDU = ptrtoint %r55N_closure_struct* @r55N_closure$def to i64
  %lnaDT = load i64*, i64** %Hp_Var
  %lnaDV = getelementptr inbounds i64, i64* %lnaDT, i32 -14
  store i64 %lnaDU, i64* %lnaDV, !tbaa !3
  %lnaDY = load i64*, i64** %Hp_Var
  %lnaDZ = ptrtoint i64* %lnaDY to i64
  %lnaE0 = add i64 %lnaDZ, -311
  %lnaDW = load i64*, i64** %Hp_Var
  %lnaE1 = getelementptr inbounds i64, i64* %lnaDW, i32 -13
  store i64 %lnaE0, i64* %lnaE1, !tbaa !3
  %lnaE3 = ptrtoint %r55P_closure_struct* @r55P_closure$def to i64
  %lnaE2 = load i64*, i64** %Hp_Var
  %lnaE4 = getelementptr inbounds i64, i64* %lnaE2, i32 -12
  store i64 %lnaE3, i64* %lnaE4, !tbaa !3
  %lnaE6 = ptrtoint %r55Q_closure_struct* @r55Q_closure$def to i64
  %lnaE5 = load i64*, i64** %Hp_Var
  %lnaE7 = getelementptr inbounds i64, i64* %lnaE5, i32 -11
  store i64 %lnaE6, i64* %lnaE7, !tbaa !3
  %lnaE9 = ptrtoint %r55R_closure_struct* @r55R_closure$def to i64
  %lnaE8 = load i64*, i64** %Hp_Var
  %lnaEa = getelementptr inbounds i64, i64* %lnaE8, i32 -10
  store i64 %lnaE9, i64* %lnaEa, !tbaa !3
  %lnaEc = ptrtoint %r55K_closure_struct* @r55K_closure$def to i64
  %lnaEb = load i64*, i64** %Hp_Var
  %lnaEd = getelementptr inbounds i64, i64* %lnaEb, i32 -9
  store i64 %lnaEc, i64* %lnaEd, !tbaa !3
  %lnaEf = ptrtoint %r55L_closure_struct* @r55L_closure$def to i64
  %lnaEe = load i64*, i64** %Hp_Var
  %lnaEg = getelementptr inbounds i64, i64* %lnaEe, i32 -8
  store i64 %lnaEf, i64* %lnaEg, !tbaa !3
  %lnaEj = load i64*, i64** %Hp_Var
  %lnaEk = ptrtoint i64* %lnaEj to i64
  %lnaEl = add i64 %lnaEk, -335
  %lnaEh = load i64*, i64** %Hp_Var
  %lnaEm = getelementptr inbounds i64, i64* %lnaEh, i32 -7
  store i64 %lnaEl, i64* %lnaEm, !tbaa !3
  %lnaEo = ptrtoint %r55S_closure_struct* @r55S_closure$def to i64
  %lnaEn = load i64*, i64** %Hp_Var
  %lnaEp = getelementptr inbounds i64, i64* %lnaEn, i32 -6
  store i64 %lnaEo, i64* %lnaEp, !tbaa !3
  %lnaEr = ptrtoint %r55T_closure_struct* @r55T_closure$def to i64
  %lnaEq = load i64*, i64** %Hp_Var
  %lnaEs = getelementptr inbounds i64, i64* %lnaEq, i32 -5
  store i64 %lnaEr, i64* %lnaEs, !tbaa !3
  %lnaEu = ptrtoint %r55U_closure_struct* @r55U_closure$def to i64
  %lnaEt = load i64*, i64** %Hp_Var
  %lnaEv = getelementptr inbounds i64, i64* %lnaEt, i32 -4
  store i64 %lnaEu, i64* %lnaEv, !tbaa !3
  %lnaEy = load i64*, i64** %Hp_Var
  %lnaEz = ptrtoint i64* %lnaEy to i64
  %lnaEA = add i64 %lnaEz, -359
  %lnaEw = load i64*, i64** %Hp_Var
  %lnaEB = getelementptr inbounds i64, i64* %lnaEw, i32 -3
  store i64 %lnaEA, i64* %lnaEB, !tbaa !3
  %lnaEE = load i64*, i64** %Hp_Var
  %lnaEF = ptrtoint i64* %lnaEE to i64
  %lnaEG = add i64 %lnaEF, -383
  %lnaEC = load i64*, i64** %Hp_Var
  %lnaEH = getelementptr inbounds i64, i64* %lnaEC, i32 -2
  store i64 %lnaEG, i64* %lnaEH, !tbaa !3
  %lnaEK = load i64*, i64** %Hp_Var
  %lnaEL = ptrtoint i64* %lnaEK to i64
  %lnaEM = add i64 %lnaEL, -407
  %lnaEI = load i64*, i64** %Hp_Var
  %lnaEN = getelementptr inbounds i64, i64* %lnaEI, i32 -1
  store i64 %lnaEM, i64* %lnaEN, !tbaa !3
  %lnaEQ = load i64*, i64** %Hp_Var
  %lnaER = ptrtoint i64* %lnaEQ to i64
  %lnaES = add i64 %lnaER, -431
  %lnaEO = load i64*, i64** %Hp_Var
  %lnaET = getelementptr inbounds i64, i64* %lnaEO, i32 0
  store i64 %lnaES, i64* %lnaET, !tbaa !3
  %lnaEV = load i64*, i64** %Hp_Var
  %lnaEW = ptrtoint i64* %lnaEV to i64
  %lnaEX = add i64 %lnaEW, -183
  store i64 %lnaEX, i64* %R1_Var
  %lnaEY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnaEZ = bitcast i64* %lnaEY to i64*
  %lnaF0 = load i64, i64* %lnaEZ, !tbaa !2
  %lnaF1 = inttoptr i64 %lnaF0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaF2 = load i64*, i64** %Hp_Var
  %lnaF3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaF1( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnaF2, i64 %lnaF3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caza:
  %lnaF4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 440, i64* %lnaF4, !tbaa !5
  %lnaF5 = load i64, i64* %R3_Var
  store i64 %lnaF5, i64* %R3_Var
  %lnaF6 = load i64, i64* %R2_Var
  store i64 %lnaF6, i64* %R2_Var
  %lnaF7 = ptrtoint %Main_zdfFloatingPs_closure_struct* @Main_zdfFloatingPs_closure$def to i64
  store i64 %lnaF7, i64* %R1_Var
  %lnaF8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaF9 = bitcast i64* %lnaF8 to i64*
  %lnaFa = load i64, i64* %lnaF9, !tbaa !5
  %lnaFb = inttoptr i64 %lnaFa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFc = load i64*, i64** %Hp_Var
  %lnaFd = load i64, i64* %R1_Var
  %lnaFe = load i64, i64* %R2_Var
  %lnaFf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFb( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnaFc, i64 %lnaFd, i64 %lnaFe, i64 %lnaFf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r55c_bytes_struct = type <{[18 x i8]}>
@r55c_bytes$def = internal constant %r55c_bytes_struct<{[18 x i8] [i8 78, i8 101, i8 103, i8 97, i8 116, i8 105, i8 118, i8 101, i8 32, i8 101, i8 120, i8 112, i8 111, i8 110, i8 101, i8 110, i8 116, i8 0]}>, align 1
@r55c_bytes = internal alias i8, bitcast (%r55c_bytes_struct* @r55c_bytes$def to i8*)
%Main_zdszc1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdszc1_closure$def = internal global %Main_zdszc1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_zdszc1_closure = alias i8, bitcast (%Main_zdszc1_closure_struct* @Main_zdszc1_closure$def to i8*)
@Main_zdszc1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc1_info$def to i8*)
define ghccc void @Main_zdszc1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc1_info$def to i64)) to i32),i32 0)}>
{
naFu:
  %lcaFj = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caFo
caFo:
  %lnaFv = load i64*, i64** %Sp_Var
  %lnaFw = getelementptr inbounds i64, i64* %lnaFv, i32 -3
  %lnaFx = ptrtoint i64* %lnaFw to i64
  %lnaFy = icmp ult i64 %lnaFx, %SpLim_Arg
  %lnaFz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaFy, i1 0 )
  br i1 %lnaFz, label %caFp, label %caFq
caFq:
  %lnaFA = ptrtoint i64* %Base_Arg to i64
  %lnaFB = inttoptr i64 %lnaFA to i8*
  %lnaFC = load i64, i64* %R1_Var
  %lnaFD = inttoptr i64 %lnaFC to i8*
  %lnaFE = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %lnaFF = call ccc i8* (i8*, i8*) %lnaFE( i8* %lnaFB, i8* %lnaFD ) nounwind
  %lnaFG = ptrtoint i8* %lnaFF to i64
  store i64 %lnaFG, i64* %lcaFj
  %lnaFH = load i64, i64* %lcaFj
  %lnaFI = icmp eq i64 %lnaFH, 0
  br i1 %lnaFI, label %caFl, label %caFk
caFk:
  %lnaFK = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnaFJ = load i64*, i64** %Sp_Var
  %lnaFL = getelementptr inbounds i64, i64* %lnaFJ, i32 -2
  store i64 %lnaFK, i64* %lnaFL, !tbaa !2
  %lnaFN = load i64, i64* %lcaFj
  %lnaFM = load i64*, i64** %Sp_Var
  %lnaFO = getelementptr inbounds i64, i64* %lnaFM, i32 -1
  store i64 %lnaFN, i64* %lnaFO, !tbaa !2
  %lnaFQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFm_info$def to i64
  %lnaFP = load i64*, i64** %Sp_Var
  %lnaFR = getelementptr inbounds i64, i64* %lnaFP, i32 -3
  store i64 %lnaFQ, i64* %lnaFR, !tbaa !2
  %lnaFS = ptrtoint %r55c_bytes_struct* @r55c_bytes$def to i64
  store i64 %lnaFS, i64* %R2_Var
  %lnaFT = load i64*, i64** %Sp_Var
  %lnaFU = getelementptr inbounds i64, i64* %lnaFT, i32 -3
  %lnaFV = ptrtoint i64* %lnaFU to i64
  %lnaFW = inttoptr i64 %lnaFV to i64*
  store i64* %lnaFW, i64** %Sp_Var
  %lnaFX = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFY = load i64*, i64** %Sp_Var
  %lnaFZ = load i64, i64* %R1_Var
  %lnaG0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFX( i64* %Base_Arg, i64* %lnaFY, i64* %Hp_Arg, i64 %lnaFZ, i64 %lnaG0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caFl:
  %lnaG2 = load i64, i64* %R1_Var
  %lnaG3 = inttoptr i64 %lnaG2 to i64*
  %lnaG4 = load i64, i64* %lnaG3, !tbaa !4
  %lnaG5 = inttoptr i64 %lnaG4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaG6 = load i64*, i64** %Sp_Var
  %lnaG7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaG5( i64* %Base_Arg, i64* %lnaG6, i64* %Hp_Arg, i64 %lnaG7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caFp:
  %lnaG8 = load i64, i64* %R1_Var
  store i64 %lnaG8, i64* %R1_Var
  %lnaG9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaGa = bitcast i64* %lnaG9 to i64*
  %lnaGb = load i64, i64* %lnaGa, !tbaa !5
  %lnaGc = inttoptr i64 %lnaGb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGd = load i64*, i64** %Sp_Var
  %lnaGe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGc( i64* %Base_Arg, i64* %lnaGd, i64* %Hp_Arg, i64 %lnaGe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caFm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFm_info$def to i8*)
define internal ghccc void @caFm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFm_info$def to i64)) to i32),i32 0)}>
{
naGf:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caFm
caFm:
  store i64 %R1_Arg, i64* %R2_Var
  %lnaGg = load i64*, i64** %Sp_Var
  %lnaGh = getelementptr inbounds i64, i64* %lnaGg, i32 1
  %lnaGi = ptrtoint i64* %lnaGh to i64
  %lnaGj = inttoptr i64 %lnaGi to i64*
  store i64* %lnaGj, i64** %Sp_Var
  %lnaGk = bitcast i8* @base_GHCziErr_errorWithoutStackTrace_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGl = load i64*, i64** %Sp_Var
  %lnaGm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGk( i64* %Base_Arg, i64* %lnaGl, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaGm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_uaGR_srt_struct = type <{i64, i64, i64, i64}>
%Main_zdszc_closure_struct = type <{i64, i64}>
@_uaGR_srt$def = internal global %_uaGR_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdszc1_closure_struct* @Main_zdszc1_closure$def to i64), i64 ptrtoint (%Main_zdszczuf_closure_struct* @Main_zdszczuf_closure$def to i64), i64 0}>
@_uaGR_srt = internal alias i8, bitcast (%_uaGR_srt_struct* @_uaGR_srt$def to i8*)
@Main_zdszc_closure$def = internal global %Main_zdszc_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc_info$def to i64), i64 0}>
@Main_zdszc_closure = alias i8, bitcast (%Main_zdszc_closure_struct* @Main_zdszc_closure$def to i8*)
@Main_zdszc_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc_info$def to i8*)
define ghccc void @Main_zdszc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaGR_srt_struct* @_uaGR_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc_info$def to i64)) to i32),i32 0)}>
{
naGS:
  %ls5a0 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls59Z = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caGx
caGx:
  %lnaGT = load i64*, i64** %Sp_Var
  %lnaGU = getelementptr inbounds i64, i64* %lnaGT, i32 -3
  %lnaGV = ptrtoint i64* %lnaGU to i64
  %lnaGW = icmp ult i64 %lnaGV, %SpLim_Arg
  %lnaGX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaGW, i1 0 )
  br i1 %lnaGX, label %caGy, label %caGz
caGz:
  %lnaGZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGr_info$def to i64
  %lnaGY = load i64*, i64** %Sp_Var
  %lnaH0 = getelementptr inbounds i64, i64* %lnaGY, i32 -3
  store i64 %lnaGZ, i64* %lnaH0, !tbaa !2
  %lnaH1 = load i64, i64* %R3_Var
  store i64 %lnaH1, i64* %ls5a0
  %lnaH2 = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lnaH3 = add i64 %lnaH2, 1
  store i64 %lnaH3, i64* %R3_Var
  %lnaH4 = load i64, i64* %R2_Var
  store i64 %lnaH4, i64* %ls59Z
  %lnaH5 = load i64, i64* %ls5a0
  store i64 %lnaH5, i64* %R2_Var
  %lnaH7 = load i64, i64* %ls59Z
  %lnaH6 = load i64*, i64** %Sp_Var
  %lnaH8 = getelementptr inbounds i64, i64* %lnaH6, i32 -2
  store i64 %lnaH7, i64* %lnaH8, !tbaa !2
  %lnaHa = load i64, i64* %ls5a0
  %lnaH9 = load i64*, i64** %Sp_Var
  %lnaHb = getelementptr inbounds i64, i64* %lnaH9, i32 -1
  store i64 %lnaHa, i64* %lnaHb, !tbaa !2
  %lnaHc = load i64*, i64** %Sp_Var
  %lnaHd = getelementptr inbounds i64, i64* %lnaHc, i32 -3
  %lnaHe = ptrtoint i64* %lnaHd to i64
  %lnaHf = inttoptr i64 %lnaHe to i64*
  store i64* %lnaHf, i64** %Sp_Var
  %lnaHg = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerCompare_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHh = load i64*, i64** %Sp_Var
  %lnaHi = load i64, i64* %R1_Var
  %lnaHj = load i64, i64* %R2_Var
  %lnaHk = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHg( i64* %Base_Arg, i64* %lnaHh, i64* %Hp_Arg, i64 %lnaHi, i64 %lnaHj, i64 %lnaHk, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGy:
  %lnaHl = load i64, i64* %R3_Var
  store i64 %lnaHl, i64* %R3_Var
  %lnaHm = load i64, i64* %R2_Var
  store i64 %lnaHm, i64* %R2_Var
  %lnaHn = ptrtoint %Main_zdszc_closure_struct* @Main_zdszc_closure$def to i64
  store i64 %lnaHn, i64* %R1_Var
  %lnaHo = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaHp = bitcast i64* %lnaHo to i64*
  %lnaHq = load i64, i64* %lnaHp, !tbaa !5
  %lnaHr = inttoptr i64 %lnaHq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHs = load i64*, i64** %Sp_Var
  %lnaHt = load i64, i64* %R1_Var
  %lnaHu = load i64, i64* %R2_Var
  %lnaHv = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHr( i64* %Base_Arg, i64* %lnaHs, i64* %Hp_Arg, i64 %lnaHt, i64 %lnaHu, i64 %lnaHv, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caGr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGr_info$def to i8*)
define internal ghccc void @caGr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaGR_srt_struct* @_uaGR_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGr_info$def to i64)) to i32),i32 0)}>
{
naHw:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caGr
caGr:
  %lnaHx = load i64, i64* %R1_Var
  %lnaHy = and i64 %lnaHx, 7
  switch i64 %lnaHy, label %caGu [i64 1, label %caGv]
caGu:
  %lnaHA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGC_info$def to i64
  %lnaHz = load i64*, i64** %Sp_Var
  %lnaHB = getelementptr inbounds i64, i64* %lnaHz, i32 0
  store i64 %lnaHA, i64* %lnaHB, !tbaa !2
  %lnaHC = ptrtoint %Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i64
  %lnaHD = add i64 %lnaHC, 1
  store i64 %lnaHD, i64* %R3_Var
  %lnaHE = load i64*, i64** %Sp_Var
  %lnaHF = getelementptr inbounds i64, i64* %lnaHE, i32 2
  %lnaHG = bitcast i64* %lnaHF to i64*
  %lnaHH = load i64, i64* %lnaHG, !tbaa !2
  store i64 %lnaHH, i64* %R2_Var
  %lnaHI = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerEqzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHJ = load i64*, i64** %Sp_Var
  %lnaHK = load i64, i64* %R1_Var
  %lnaHL = load i64, i64* %R2_Var
  %lnaHM = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHI( i64* %Base_Arg, i64* %lnaHJ, i64* %Hp_Arg, i64 %lnaHK, i64 %lnaHL, i64 %lnaHM, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGv:
  %lnaHN = ptrtoint %Main_zdszc1_closure_struct* @Main_zdszc1_closure$def to i64
  store i64 %lnaHN, i64* %R1_Var
  %lnaHO = load i64*, i64** %Sp_Var
  %lnaHP = getelementptr inbounds i64, i64* %lnaHO, i32 3
  %lnaHQ = ptrtoint i64* %lnaHP to i64
  %lnaHR = inttoptr i64 %lnaHQ to i64*
  store i64* %lnaHR, i64** %Sp_Var
  %lnaHT = load i64, i64* %R1_Var
  %lnaHU = inttoptr i64 %lnaHT to i64*
  %lnaHV = load i64, i64* %lnaHU, !tbaa !4
  %lnaHW = inttoptr i64 %lnaHV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHX = load i64*, i64** %Sp_Var
  %lnaHY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHW( i64* %Base_Arg, i64* %lnaHX, i64* %Hp_Arg, i64 %lnaHY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caGC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGC_info$def to i8*)
define internal ghccc void @caGC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdszczuf_closure_struct* @Main_zdszczuf_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGC_info$def to i64)) to i32),i32 0)}>
{
naHZ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caGC
caGC:
  %lnaI0 = load i64, i64* %R1_Var
  switch i64 %lnaI0, label %caGJ [i64 1, label %caGN]
caGJ:
  %lnaI1 = load i64*, i64** %Sp_Var
  %lnaI2 = getelementptr inbounds i64, i64* %lnaI1, i32 2
  %lnaI3 = bitcast i64* %lnaI2 to i64*
  %lnaI4 = load i64, i64* %lnaI3, !tbaa !2
  store i64 %lnaI4, i64* %R3_Var
  %lnaI5 = load i64*, i64** %Sp_Var
  %lnaI6 = getelementptr inbounds i64, i64* %lnaI5, i32 1
  %lnaI7 = bitcast i64* %lnaI6 to i64*
  %lnaI8 = load i64, i64* %lnaI7, !tbaa !2
  store i64 %lnaI8, i64* %R2_Var
  %lnaI9 = load i64*, i64** %Sp_Var
  %lnaIa = getelementptr inbounds i64, i64* %lnaI9, i32 3
  %lnaIb = ptrtoint i64* %lnaIa to i64
  %lnaIc = inttoptr i64 %lnaIb to i64*
  store i64* %lnaIc, i64** %Sp_Var
  %lnaId = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszczuf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIe = load i64*, i64** %Sp_Var
  %lnaIf = load i64, i64* %R1_Var
  %lnaIg = load i64, i64* %R2_Var
  %lnaIh = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaId( i64* %Base_Arg, i64* %lnaIe, i64* %Hp_Arg, i64 %lnaIf, i64 %lnaIg, i64 %lnaIh, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGN:
  %lnaIi = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %lnaIj = add i64 %lnaIi, 2
  store i64 %lnaIj, i64* %R1_Var
  %lnaIk = load i64*, i64** %Sp_Var
  %lnaIl = getelementptr inbounds i64, i64* %lnaIk, i32 3
  %lnaIm = ptrtoint i64* %lnaIl to i64
  %lnaIn = inttoptr i64 %lnaIm to i64*
  store i64* %lnaIn, i64** %Sp_Var
  %lnaIo = load i64*, i64** %Sp_Var
  %lnaIp = getelementptr inbounds i64, i64* %lnaIo, i32 0
  %lnaIq = bitcast i64* %lnaIp to i64*
  %lnaIr = load i64, i64* %lnaIq, !tbaa !2
  %lnaIs = inttoptr i64 %lnaIr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIt = load i64*, i64** %Sp_Var
  %lnaIu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaIs( i64* %Base_Arg, i64* %lnaIt, i64* %Hp_Arg, i64 %lnaIu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_uaIE_srt_struct = type <{i64, i64, i64, i64}>
%r55b_closure_struct = type <{i64, i64, i64, i64}>
@_uaIE_srt$def = internal global %_uaIE_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziRead_zdfReadIntzuzdsreadNumber_closure to i64), i64 ptrtoint (i8* @base_GHCziRead_zdfReadInt2_closure to i64), i64 0}>
@_uaIE_srt = internal alias i8, bitcast (%_uaIE_srt_struct* @_uaIE_srt$def to i8*)
@r55b_closure$def = internal global %r55b_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55b_info$def to i64), i64 0, i64 0, i64 0}>
@r55b_closure = internal alias i8, bitcast (%r55b_closure_struct* @r55b_closure$def to i8*)
@r55b_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55b_info$def to i8*)
define internal ghccc void @r55b_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaIE_srt_struct* @_uaIE_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r55b_info$def to i64)) to i32),i32 0)}>
{
naIF:
  %lcaIy = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caIB
caIB:
  %lnaIG = load i64*, i64** %Sp_Var
  %lnaIH = getelementptr inbounds i64, i64* %lnaIG, i32 -2
  %lnaII = ptrtoint i64* %lnaIH to i64
  %lnaIJ = icmp ult i64 %lnaII, %SpLim_Arg
  %lnaIK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaIJ, i1 0 )
  br i1 %lnaIK, label %caIC, label %caID
caID:
  %lnaIL = ptrtoint i64* %Base_Arg to i64
  %lnaIM = inttoptr i64 %lnaIL to i8*
  %lnaIN = load i64, i64* %R1_Var
  %lnaIO = inttoptr i64 %lnaIN to i8*
  %lnaIP = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %lnaIQ = call ccc i8* (i8*, i8*) %lnaIP( i8* %lnaIM, i8* %lnaIO ) nounwind
  %lnaIR = ptrtoint i8* %lnaIQ to i64
  store i64 %lnaIR, i64* %lcaIy
  %lnaIS = load i64, i64* %lcaIy
  %lnaIT = icmp eq i64 %lnaIS, 0
  br i1 %lnaIT, label %caIA, label %caIz
caIz:
  %lnaIV = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnaIU = load i64*, i64** %Sp_Var
  %lnaIW = getelementptr inbounds i64, i64* %lnaIU, i32 -2
  store i64 %lnaIV, i64* %lnaIW, !tbaa !2
  %lnaIY = load i64, i64* %lcaIy
  %lnaIX = load i64*, i64** %Sp_Var
  %lnaIZ = getelementptr inbounds i64, i64* %lnaIX, i32 -1
  store i64 %lnaIY, i64* %lnaIZ, !tbaa !2
  %lnaJ0 = ptrtoint i8* @base_TextziRead_readEither7_closure to i64
  %lnaJ1 = add i64 %lnaJ0, 1
  store i64 %lnaJ1, i64* %R4_Var
  %lnaJ2 = ptrtoint i8* @base_TextziParserCombinatorsziReadPrec_minPrec_closure to i64
  %lnaJ3 = add i64 %lnaJ2, 1
  store i64 %lnaJ3, i64* %R3_Var
  %lnaJ4 = ptrtoint i8* @base_GHCziRead_zdfReadInt2_closure to i64
  %lnaJ5 = add i64 %lnaJ4, 1
  store i64 %lnaJ5, i64* %R2_Var
  %lnaJ6 = load i64*, i64** %Sp_Var
  %lnaJ7 = getelementptr inbounds i64, i64* %lnaJ6, i32 -2
  %lnaJ8 = ptrtoint i64* %lnaJ7 to i64
  %lnaJ9 = inttoptr i64 %lnaJ8 to i64*
  store i64* %lnaJ9, i64** %Sp_Var
  %lnaJa = bitcast i8* @base_GHCziRead_zdfReadIntzuzdsreadNumber_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJb = load i64*, i64** %Sp_Var
  %lnaJc = load i64, i64* %R1_Var
  %lnaJd = load i64, i64* %R2_Var
  %lnaJe = load i64, i64* %R3_Var
  %lnaJf = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJa( i64* %Base_Arg, i64* %lnaJb, i64* %Hp_Arg, i64 %lnaJc, i64 %lnaJd, i64 %lnaJe, i64 %lnaJf, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIA:
  %lnaJh = load i64, i64* %R1_Var
  %lnaJi = inttoptr i64 %lnaJh to i64*
  %lnaJj = load i64, i64* %lnaJi, !tbaa !4
  %lnaJk = inttoptr i64 %lnaJj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJl = load i64*, i64** %Sp_Var
  %lnaJm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJk( i64* %Base_Arg, i64* %lnaJl, i64* %Hp_Arg, i64 %lnaJm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIC:
  %lnaJn = load i64, i64* %R1_Var
  store i64 %lnaJn, i64* %R1_Var
  %lnaJo = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaJp = bitcast i64* %lnaJo to i64*
  %lnaJq = load i64, i64* %lnaJp, !tbaa !5
  %lnaJr = inttoptr i64 %lnaJq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJs = load i64*, i64** %Sp_Var
  %lnaJt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJr( i64* %Base_Arg, i64* %lnaJs, i64* %Hp_Arg, i64 %lnaJt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_uaP4_srt_struct = type <{i64, i64, i64, i64}>
%_uaP5_srt_struct = type <{i64, i64, i64, i64}>
%_uaP6_srt_struct = type <{i64, i64, i64, i64}>
%_uaP7_srt_struct = type <{i64, i64, i64, i64}>
%_uaP8_srt_struct = type <{i64, i64, i64, i64, i64}>
%_uaP9_srt_struct = type <{i64, i64, i64, i64}>
%_uaPa_srt_struct = type <{i64, i64, i64, i64}>
%_uaPb_srt_struct = type <{i64, i64, i64, i64}>
%_uaPc_srt_struct = type <{i64, i64, i64, i64, i64}>
%_uaPd_srt_struct = type <{i64, i64, i64, i64}>
%_uaPe_srt_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64}>
%Main_zdwloop_closure_struct = type <{i64, i64}>
@_uaP4_srt$def = internal global %_uaP4_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64), i64 ptrtoint (%r55Z_closure_struct* @r55Z_closure$def to i64), i64 0}>
@_uaP4_srt = internal alias i8, bitcast (%_uaP4_srt_struct* @_uaP4_srt$def to i8*)
@_uaP5_srt$def = internal global %_uaP5_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64), i64 ptrtoint (i8* @_uaP4_srt to i64), i64 0}>
@_uaP5_srt = internal alias i8, bitcast (%_uaP5_srt_struct* @_uaP5_srt$def to i8*)
@_uaP6_srt$def = internal global %_uaP6_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdszc_closure_struct* @Main_zdszc_closure$def to i64), i64 ptrtoint (%_ua16_srt_struct* @_ua16_srt$def to i64), i64 0}>
@_uaP6_srt = internal alias i8, bitcast (%_uaP6_srt_struct* @_uaP6_srt$def to i8*)
@_uaP7_srt$def = internal global %_uaP7_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerAdd_closure to i64), i64 ptrtoint (i8* @_uaP6_srt to i64), i64 0}>
@_uaP7_srt = internal alias i8, bitcast (%_uaP7_srt_struct* @_uaP7_srt$def to i8*)
@_uaP8_srt$def = internal global %_uaP8_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (%Main_revertzuzdsrevert_closure_struct* @Main_revertzuzdsrevert_closure$def to i64), i64 ptrtoint (i8* @_uaP5_srt to i64), i64 ptrtoint (i8* @_uaP7_srt to i64), i64 0}>
@_uaP8_srt = internal alias i8, bitcast (%_uaP8_srt_struct* @_uaP8_srt$def to i8*)
@_uaP9_srt$def = internal global %_uaP9_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i64), i64 ptrtoint (%Main_sinx1_closure_struct* @Main_sinx1_closure$def to i64), i64 0}>
@_uaP9_srt = internal alias i8, bitcast (%_uaP9_srt_struct* @_uaP9_srt$def to i8*)
@_uaPa_srt$def = internal global %_uaPa_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i64), i64 ptrtoint (i8* @_uaP9_srt to i64), i64 0}>
@_uaPa_srt = internal alias i8, bitcast (%_uaPa_srt_struct* @_uaPa_srt$def to i8*)
@_uaPb_srt$def = internal global %_uaPb_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i64), i64 ptrtoint (i8* @_uaPa_srt to i64), i64 0}>
@_uaPb_srt = internal alias i8, bitcast (%_uaPb_srt_struct* @_uaPb_srt$def to i8*)
@_uaPc_srt$def = internal global %_uaPc_srt_struct<{i64 ptrtoint (i8* @stg_SRT_3_info to i64), i64 ptrtoint (%Main_zdszc_closure_struct* @Main_zdszc_closure$def to i64), i64 ptrtoint (%Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i64), i64 ptrtoint (i8* @_uaPb_srt to i64), i64 0}>
@_uaPc_srt = internal alias i8, bitcast (%_uaPc_srt_struct* @_uaPc_srt$def to i8*)
@_uaPd_srt$def = internal global %_uaPd_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @ghczmbignum_GHCziNumziInteger_integerAdd_closure to i64), i64 ptrtoint (i8* @_uaPc_srt to i64), i64 0}>
@_uaPd_srt = internal alias i8, bitcast (%_uaPd_srt_struct* @_uaPd_srt$def to i8*)
@_uaPe_srt$def = internal global %_uaPe_srt_struct<{i64 ptrtoint (i8* @stg_SRT_9_info to i64), i64 ptrtoint (i8* @base_SystemziEnvironment_getArgs2_closure to i64), i64 ptrtoint (%Main_tree_closure_struct* @Main_tree_closure$def to i64), i64 ptrtoint (%Main_ts_closure_struct* @Main_ts_closure$def to i64), i64 ptrtoint (%r55b_closure_struct* @r55b_closure$def to i64), i64 ptrtoint (%r562_closure_struct* @r562_closure$def to i64), i64 ptrtoint (%r563_closure_struct* @r563_closure$def to i64), i64 ptrtoint (%r565_closure_struct* @r565_closure$def to i64), i64 ptrtoint (i8* @_uaP8_srt to i64), i64 ptrtoint (i8* @_uaPd_srt to i64), i64 0}>
@_uaPe_srt = internal alias i8, bitcast (%_uaPe_srt_struct* @_uaPe_srt$def to i8*)
@Main_zdwloop_closure$def = internal global %Main_zdwloop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64), i64 0}>
@Main_zdwloop_closure = alias i8, bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*)
@s5iq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5iq_info$def to i8*)
define internal ghccc void @s5iq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967296, i32 17, i32 0}>
{
naPf:
  %ls5iq = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5ip = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caKb
caKb:
  %lnaPg = load i64, i64* %R1_Var
  store i64 %lnaPg, i64* %ls5iq
  %lnaPh = load i64*, i64** %Sp_Var
  %lnaPi = getelementptr inbounds i64, i64* %lnaPh, i32 -2
  %lnaPj = ptrtoint i64* %lnaPi to i64
  %lnaPk = icmp ult i64 %lnaPj, %SpLim_Arg
  %lnaPl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaPk, i1 0 )
  br i1 %lnaPl, label %caKc, label %caKd
caKd:
  %lnaPm = load i64*, i64** %Hp_Var
  %lnaPn = getelementptr inbounds i64, i64* %lnaPm, i32 2
  %lnaPo = ptrtoint i64* %lnaPn to i64
  %lnaPp = inttoptr i64 %lnaPo to i64*
  store i64* %lnaPp, i64** %Hp_Var
  %lnaPq = load i64*, i64** %Hp_Var
  %lnaPr = ptrtoint i64* %lnaPq to i64
  %lnaPs = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaPt = bitcast i64* %lnaPs to i64*
  %lnaPu = load i64, i64* %lnaPt, !tbaa !5
  %lnaPv = icmp ugt i64 %lnaPr, %lnaPu
  %lnaPw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaPv, i1 0 )
  br i1 %lnaPw, label %caKf, label %caKe
caKe:
  %lnaPy = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaPx = load i64*, i64** %Sp_Var
  %lnaPz = getelementptr inbounds i64, i64* %lnaPx, i32 -2
  store i64 %lnaPy, i64* %lnaPz, !tbaa !2
  %lnaPB = load i64, i64* %ls5iq
  %lnaPA = load i64*, i64** %Sp_Var
  %lnaPC = getelementptr inbounds i64, i64* %lnaPA, i32 -1
  store i64 %lnaPB, i64* %lnaPC, !tbaa !2
  %lnaPD = load i64, i64* %ls5iq
  %lnaPE = add i64 %lnaPD, 16
  %lnaPF = inttoptr i64 %lnaPE to i64*
  %lnaPG = load i64, i64* %lnaPF, !tbaa !1
  store i64 %lnaPG, i64* %ls5ip
  %lnaPH = load i64, i64* %ls5ip
  %lnaPI = icmp sle i64 0, %lnaPH
  %lnaPJ = zext i1 %lnaPI to i64
  switch i64 %lnaPJ, label %caK9 [i64 1, label %caKa]
caK9:
  %lnaPL = ptrtoint i8* @ghczmbignum_GHCziNumziInteger_IS_con_info to i64
  %lnaPK = load i64*, i64** %Hp_Var
  %lnaPM = getelementptr inbounds i64, i64* %lnaPK, i32 -1
  store i64 %lnaPL, i64* %lnaPM, !tbaa !3
  %lnaPO = load i64, i64* %ls5ip
  %lnaPN = load i64*, i64** %Hp_Var
  %lnaPP = getelementptr inbounds i64, i64* %lnaPN, i32 0
  store i64 %lnaPO, i64* %lnaPP, !tbaa !3
  %lnaPR = load i64*, i64** %Hp_Var
  %lnaPS = ptrtoint i64* %lnaPR to i64
  %lnaPT = add i64 %lnaPS, -7
  store i64 %lnaPT, i64* %R1_Var
  %lnaPU = load i64*, i64** %Sp_Var
  %lnaPV = getelementptr inbounds i64, i64* %lnaPU, i32 -2
  %lnaPW = ptrtoint i64* %lnaPV to i64
  %lnaPX = inttoptr i64 %lnaPW to i64*
  store i64* %lnaPX, i64** %Sp_Var
  %lnaPY = load i64*, i64** %Sp_Var
  %lnaPZ = getelementptr inbounds i64, i64* %lnaPY, i32 0
  %lnaQ0 = bitcast i64* %lnaPZ to i64*
  %lnaQ1 = load i64, i64* %lnaQ0, !tbaa !2
  %lnaQ2 = inttoptr i64 %lnaQ1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQ3 = load i64*, i64** %Sp_Var
  %lnaQ4 = load i64*, i64** %Hp_Var
  %lnaQ5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQ2( i64* %Base_Arg, i64* %lnaQ3, i64* %lnaQ4, i64 %lnaQ5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKa:
  %lnaQ6 = load i64*, i64** %Hp_Var
  %lnaQ7 = getelementptr inbounds i64, i64* %lnaQ6, i32 -2
  %lnaQ8 = ptrtoint i64* %lnaQ7 to i64
  %lnaQ9 = inttoptr i64 %lnaQ8 to i64*
  store i64* %lnaQ9, i64** %Hp_Var
  %lnaQa = ptrtoint %r564_closure_struct* @r564_closure$def to i64
  %lnaQb = add i64 %lnaQa, 1
  store i64 %lnaQb, i64* %R1_Var
  %lnaQc = load i64*, i64** %Sp_Var
  %lnaQd = getelementptr inbounds i64, i64* %lnaQc, i32 -2
  %lnaQe = ptrtoint i64* %lnaQd to i64
  %lnaQf = inttoptr i64 %lnaQe to i64*
  store i64* %lnaQf, i64** %Sp_Var
  %lnaQg = load i64*, i64** %Sp_Var
  %lnaQh = getelementptr inbounds i64, i64* %lnaQg, i32 0
  %lnaQi = bitcast i64* %lnaQh to i64*
  %lnaQj = load i64, i64* %lnaQi, !tbaa !2
  %lnaQk = inttoptr i64 %lnaQj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQl = load i64*, i64** %Sp_Var
  %lnaQm = load i64*, i64** %Hp_Var
  %lnaQn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQk( i64* %Base_Arg, i64* %lnaQl, i64* %lnaQm, i64 %lnaQn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKf:
  %lnaQo = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnaQo, !tbaa !5
  br label %caKc
caKc:
  %lnaQp = load i64, i64* %ls5iq
  store i64 %lnaQp, i64* %R1_Var
  %lnaQq = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaQr = bitcast i64* %lnaQq to i64*
  %lnaQs = load i64, i64* %lnaQr, !tbaa !5
  %lnaQt = inttoptr i64 %lnaQs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQu = load i64*, i64** %Sp_Var
  %lnaQv = load i64*, i64** %Hp_Var
  %lnaQw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQt( i64* %Base_Arg, i64* %lnaQu, i64* %lnaQv, i64 %lnaQw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5jl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5jl_info$def to i8*)
define internal ghccc void @s5jl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPd_srt_struct* @_uaPd_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5jl_info$def to i64)) to i32),i32 0)}>
{
naQx:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caKo
caKo:
  %lnaQy = load i64*, i64** %Sp_Var
  %lnaQz = getelementptr inbounds i64, i64* %lnaQy, i32 -1
  %lnaQA = ptrtoint i64* %lnaQz to i64
  %lnaQB = icmp ult i64 %lnaQA, %SpLim_Arg
  %lnaQC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaQB, i1 0 )
  br i1 %lnaQC, label %caKI, label %caKJ
caKJ:
  %lnaQE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKm_info$def to i64
  %lnaQD = load i64*, i64** %Sp_Var
  %lnaQF = getelementptr inbounds i64, i64* %lnaQD, i32 -1
  store i64 %lnaQE, i64* %lnaQF, !tbaa !2
  %lnaQI = load i64, i64* %R1_Var
  %lnaQJ = add i64 %lnaQI, 16
  %lnaQK = inttoptr i64 %lnaQJ to i64*
  %lnaQL = load i64, i64* %lnaQK, !tbaa !4
  store i64 %lnaQL, i64* %R3_Var
  %lnaQM = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %lnaQN = add i64 %lnaQM, 1
  store i64 %lnaQN, i64* %R2_Var
  %lnaQO = load i64*, i64** %Sp_Var
  %lnaQP = getelementptr inbounds i64, i64* %lnaQO, i32 -1
  %lnaQQ = ptrtoint i64* %lnaQP to i64
  %lnaQR = inttoptr i64 %lnaQQ to i64*
  store i64* %lnaQR, i64** %Sp_Var
  %lnaQS = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerAdd_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQT = load i64*, i64** %Sp_Var
  %lnaQU = load i64, i64* %R1_Var
  %lnaQV = load i64, i64* %R2_Var
  %lnaQW = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQS( i64* %Base_Arg, i64* %lnaQT, i64* %Hp_Arg, i64 %lnaQU, i64 %lnaQV, i64 %lnaQW, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKI:
  %lnaQX = load i64, i64* %R1_Var
  store i64 %lnaQX, i64* %R1_Var
  %lnaQY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaQZ = bitcast i64* %lnaQY to i64*
  %lnaR0 = load i64, i64* %lnaQZ, !tbaa !5
  %lnaR1 = inttoptr i64 %lnaR0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaR2 = load i64*, i64** %Sp_Var
  %lnaR3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaR1( i64* %Base_Arg, i64* %lnaR2, i64* %Hp_Arg, i64 %lnaR3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKm_info$def to i8*)
define internal ghccc void @caKm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPc_srt_struct* @_uaPc_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKm_info$def to i64)) to i32),i32 0)}>
{
naR4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caKm
caKm:
  %lnaR5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKr_info$def to i64
  %lnaR6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaR5, i64* %lnaR6, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %lnaR7 = ptrtoint %Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i64
  store i64 %lnaR7, i64* %R2_Var
  %lnaR8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaR9 = load i64, i64* %R2_Var
  %lnaRa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaR8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaR9, i64 %lnaRa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKr_info$def to i8*)
define internal ghccc void @caKr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPb_srt_struct* @_uaPb_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKr_info$def to i64)) to i32),i32 0)}>
{
naRb:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caKr
caKr:
  %lnaRc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKv_info$def to i64
  %lnaRd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaRc, i64* %lnaRd, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnaRe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaRf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKv_info$def to i8*)
define internal ghccc void @caKv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPb_srt_struct* @_uaPb_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKv_info$def to i64)) to i32),i32 0)}>
{
naRg:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caKv
caKv:
  %lnaRh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKz_info$def to i64
  %lnaRi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaRh, i64* %lnaRi, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %lnaRj = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %lnaRk = add i64 %lnaRj, 2
  store i64 %lnaRk, i64* %R2_Var
  %lnaRl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRm = load i64, i64* %R2_Var
  %lnaRn = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaRm, i64 %lnaRn, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKz_info$def to i8*)
define internal ghccc void @caKz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPb_srt_struct* @_uaPb_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKz_info$def to i64)) to i32),i32 0)}>
{
naRo:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caKz
caKz:
  %lnaRp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKD_info$def to i64
  %lnaRq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaRp, i64* %lnaRq, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnaRr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdcsqrt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRs = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaRs, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKD_info$def to i8*)
define internal ghccc void @caKD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPa_srt_struct* @_uaPa_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKD_info$def to i64)) to i32),i32 0)}>
{
naRt:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caKD
caKD:
  %lnaRu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKH_info$def to i64
  %lnaRv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaRu, i64* %lnaRv, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnaRw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaRx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKH_info$def to i8*)
define internal ghccc void @caKH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP9_srt_struct* @_uaP9_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKH_info$def to i64)) to i32),i32 0)}>
{
naRy:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caKH
caKH:
  store i64 %R1_Arg, i64* %R3_Var
  %lnaRz = ptrtoint %Main_sinx1_closure_struct* @Main_sinx1_closure$def to i64
  %lnaRA = add i64 %lnaRz, 2
  store i64 %lnaRA, i64* %R2_Var
  %lnaRB = load i64*, i64** %Sp_Var
  %lnaRC = getelementptr inbounds i64, i64* %lnaRB, i32 1
  %lnaRD = ptrtoint i64* %lnaRC to i64
  %lnaRE = inttoptr i64 %lnaRD to i64*
  store i64* %lnaRE, i64** %Sp_Var
  %lnaRF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRG = load i64*, i64** %Sp_Var
  %lnaRH = load i64, i64* %R2_Var
  %lnaRI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRF( i64* %Base_Arg, i64* %lnaRG, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaRH, i64 %lnaRI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5j1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j1_info$def to i8*)
define internal ghccc void @s5j1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP7_srt_struct* @_uaP7_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j1_info$def to i64)) to i32),i32 0)}>
{
naRJ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caLc
caLc:
  %lnaRK = load i64*, i64** %Sp_Var
  %lnaRL = getelementptr inbounds i64, i64* %lnaRK, i32 -3
  %lnaRM = ptrtoint i64* %lnaRL to i64
  %lnaRN = icmp ult i64 %lnaRM, %SpLim_Arg
  %lnaRO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaRN, i1 0 )
  br i1 %lnaRO, label %caLo, label %caLp
caLp:
  %lnaRQ = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaRP = load i64*, i64** %Sp_Var
  %lnaRR = getelementptr inbounds i64, i64* %lnaRP, i32 -2
  store i64 %lnaRQ, i64* %lnaRR, !tbaa !2
  %lnaRT = load i64, i64* %R1_Var
  %lnaRS = load i64*, i64** %Sp_Var
  %lnaRU = getelementptr inbounds i64, i64* %lnaRS, i32 -1
  store i64 %lnaRT, i64* %lnaRU, !tbaa !2
  %lnaRW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLa_info$def to i64
  %lnaRV = load i64*, i64** %Sp_Var
  %lnaRX = getelementptr inbounds i64, i64* %lnaRV, i32 -3
  store i64 %lnaRW, i64* %lnaRX, !tbaa !2
  %lnaS0 = load i64, i64* %R1_Var
  %lnaS1 = add i64 %lnaS0, 16
  %lnaS2 = inttoptr i64 %lnaS1 to i64*
  %lnaS3 = load i64, i64* %lnaS2, !tbaa !4
  store i64 %lnaS3, i64* %R3_Var
  %lnaS4 = ptrtoint %Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i64
  %lnaS5 = add i64 %lnaS4, 1
  store i64 %lnaS5, i64* %R2_Var
  %lnaS6 = load i64*, i64** %Sp_Var
  %lnaS7 = getelementptr inbounds i64, i64* %lnaS6, i32 -3
  %lnaS8 = ptrtoint i64* %lnaS7 to i64
  %lnaS9 = inttoptr i64 %lnaS8 to i64*
  store i64* %lnaS9, i64** %Sp_Var
  %lnaSa = bitcast i8* @ghczmbignum_GHCziNumziInteger_integerAdd_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSb = load i64*, i64** %Sp_Var
  %lnaSc = load i64, i64* %R1_Var
  %lnaSd = load i64, i64* %R2_Var
  %lnaSe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSa( i64* %Base_Arg, i64* %lnaSb, i64* %Hp_Arg, i64 %lnaSc, i64 %lnaSd, i64 %lnaSe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLo:
  %lnaSf = load i64, i64* %R1_Var
  store i64 %lnaSf, i64* %R1_Var
  %lnaSg = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaSh = bitcast i64* %lnaSg to i64*
  %lnaSi = load i64, i64* %lnaSh, !tbaa !5
  %lnaSj = inttoptr i64 %lnaSi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSk = load i64*, i64** %Sp_Var
  %lnaSl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSj( i64* %Base_Arg, i64* %lnaSk, i64* %Hp_Arg, i64 %lnaSl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLa_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLa_info$def to i8*)
define internal ghccc void @caLa_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP6_srt_struct* @_uaP6_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLa_info$def to i64)) to i32),i32 0)}>
{
naSm:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caLa
caLa:
  %lnaSn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLf_info$def to i64
  %lnaSo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaSn, i64* %lnaSo, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %lnaSp = ptrtoint %Main_xzuzdsx_closure_struct* @Main_xzuzdsx_closure$def to i64
  %lnaSq = add i64 %lnaSp, 2
  store i64 %lnaSq, i64* %R2_Var
  %lnaSr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdszc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSs = load i64, i64* %R2_Var
  %lnaSt = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaSs, i64 %lnaSt, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLf_info$def to i8*)
define internal ghccc void @caLf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua16_srt_struct* @_ua16_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLf_info$def to i64)) to i32),i32 0)}>
{
naSu:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caLf
caLf:
  %lnaSv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLj_info$def to i64
  %lnaSw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaSv, i64* %lnaSw, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %lnaSx = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %lnaSy = add i64 %lnaSx, 2
  store i64 %lnaSy, i64* %R2_Var
  %lnaSz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSA = load i64, i64* %R2_Var
  %lnaSB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaSA, i64 %lnaSB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLj_info$def to i8*)
define internal ghccc void @caLj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ua16_srt_struct* @_ua16_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLj_info$def to i64)) to i32),i32 0)}>
{
naSC:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caLj
caLj:
  %lnaSD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLn_info$def to i64
  %lnaSE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaSD, i64* %lnaSE, !tbaa !2
  store i64 %R1_Arg, i64* %R3_Var
  %lnaSF = ptrtoint %Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i64
  %lnaSG = add i64 %lnaSF, 2
  store i64 %lnaSG, i64* %R2_Var
  %lnaSH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfFloatingPszuzdszdczs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSI = load i64, i64* %R2_Var
  %lnaSJ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaSI, i64 %lnaSJ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLn_info$def to i8*)
define internal ghccc void @caLn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLn_info$def to i64)) to i32),i32 0)}>
{
naSK:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caLn
caLn:
  %lnaSL = ptrtoint %Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i64
  %lnaSM = add i64 %lnaSL, 1
  store i64 %lnaSM, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnaSN = load i64*, i64** %Sp_Var
  %lnaSO = getelementptr inbounds i64, i64* %lnaSN, i32 1
  %lnaSP = ptrtoint i64* %lnaSO to i64
  %lnaSQ = inttoptr i64 %lnaSP to i64*
  store i64* %lnaSQ, i64** %Sp_Var
  %lnaSR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_integralzuint1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSS = load i64*, i64** %Sp_Var
  %lnaST = load i64, i64* %R2_Var
  %lnaSU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSR( i64* %Base_Arg, i64* %lnaSS, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaST, i64 %lnaSU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s5j5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j5_info$def to i8*)
define internal ghccc void @s5j5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP8_srt_struct* @_uaP8_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j5_info$def to i64)) to i32),i32 0)}>
{
naSV:
  %ls5j5 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5iq = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caLA
caLA:
  %lnaSW = load i64, i64* %R1_Var
  store i64 %lnaSW, i64* %ls5j5
  %lnaSX = load i64*, i64** %Sp_Var
  %lnaSY = getelementptr inbounds i64, i64* %lnaSX, i32 -1
  %lnaSZ = ptrtoint i64* %lnaSY to i64
  %lnaT0 = icmp ult i64 %lnaSZ, %SpLim_Arg
  %lnaT1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaT0, i1 0 )
  br i1 %lnaT1, label %caLE, label %caLF
caLF:
  %lnaT2 = load i64*, i64** %Hp_Var
  %lnaT3 = getelementptr inbounds i64, i64* %lnaT2, i32 6
  %lnaT4 = ptrtoint i64* %lnaT3 to i64
  %lnaT5 = inttoptr i64 %lnaT4 to i64*
  store i64* %lnaT5, i64** %Hp_Var
  %lnaT6 = load i64*, i64** %Hp_Var
  %lnaT7 = ptrtoint i64* %lnaT6 to i64
  %lnaT8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaT9 = bitcast i64* %lnaT8 to i64*
  %lnaTa = load i64, i64* %lnaT9, !tbaa !5
  %lnaTb = icmp ugt i64 %lnaT7, %lnaTa
  %lnaTc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaTb, i1 0 )
  br i1 %lnaTc, label %caLH, label %caLG
caLG:
  %lnaTd = load i64, i64* %ls5j5
  %lnaTe = add i64 %lnaTd, 16
  %lnaTf = inttoptr i64 %lnaTe to i64*
  %lnaTg = load i64, i64* %lnaTf, !tbaa !1
  store i64 %lnaTg, i64* %ls5iq
  %lnaTi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j1_info$def to i64
  %lnaTh = load i64*, i64** %Hp_Var
  %lnaTj = getelementptr inbounds i64, i64* %lnaTh, i32 -5
  store i64 %lnaTi, i64* %lnaTj, !tbaa !3
  %lnaTl = load i64, i64* %ls5iq
  %lnaTk = load i64*, i64** %Hp_Var
  %lnaTm = getelementptr inbounds i64, i64* %lnaTk, i32 -3
  store i64 %lnaTl, i64* %lnaTm, !tbaa !3
  %lnaTo = ptrtoint i8* @Main_ZCzpZC_con_info to i64
  %lnaTn = load i64*, i64** %Hp_Var
  %lnaTp = getelementptr inbounds i64, i64* %lnaTn, i32 -2
  store i64 %lnaTo, i64* %lnaTp, !tbaa !3
  %lnaTr = ptrtoint %Main_integral1_closure_struct* @Main_integral1_closure$def to i64
  %lnaTs = add i64 %lnaTr, 1
  %lnaTq = load i64*, i64** %Hp_Var
  %lnaTt = getelementptr inbounds i64, i64* %lnaTq, i32 -1
  store i64 %lnaTs, i64* %lnaTt, !tbaa !3
  %lnaTv = load i64*, i64** %Hp_Var
  %lnaTw = getelementptr inbounds i64, i64* %lnaTv, i32 -5
  %lnaTx = ptrtoint i64* %lnaTw to i64
  %lnaTu = load i64*, i64** %Hp_Var
  %lnaTy = getelementptr inbounds i64, i64* %lnaTu, i32 0
  store i64 %lnaTx, i64* %lnaTy, !tbaa !3
  %lnaTA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLy_info$def to i64
  %lnaTz = load i64*, i64** %Sp_Var
  %lnaTB = getelementptr inbounds i64, i64* %lnaTz, i32 -1
  store i64 %lnaTA, i64* %lnaTB, !tbaa !2
  %lnaTD = load i64*, i64** %Hp_Var
  %lnaTE = ptrtoint i64* %lnaTD to i64
  %lnaTF = add i64 %lnaTE, -14
  store i64 %lnaTF, i64* %R2_Var
  %lnaTG = load i64*, i64** %Sp_Var
  %lnaTH = getelementptr inbounds i64, i64* %lnaTG, i32 -1
  %lnaTI = ptrtoint i64* %lnaTH to i64
  %lnaTJ = inttoptr i64 %lnaTI to i64*
  store i64* %lnaTJ, i64** %Sp_Var
  %lnaTK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_revertzuzdsrevert_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTL = load i64*, i64** %Sp_Var
  %lnaTM = load i64*, i64** %Hp_Var
  %lnaTN = load i64, i64* %R1_Var
  %lnaTO = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTK( i64* %Base_Arg, i64* %lnaTL, i64* %lnaTM, i64 %lnaTN, i64 %lnaTO, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLH:
  %lnaTP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnaTP, !tbaa !5
  br label %caLE
caLE:
  %lnaTQ = load i64, i64* %ls5j5
  store i64 %lnaTQ, i64* %R1_Var
  %lnaTR = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaTS = bitcast i64* %lnaTR to i64*
  %lnaTT = load i64, i64* %lnaTS, !tbaa !5
  %lnaTU = inttoptr i64 %lnaTT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTV = load i64*, i64** %Sp_Var
  %lnaTW = load i64*, i64** %Hp_Var
  %lnaTX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTU( i64* %Base_Arg, i64* %lnaTV, i64* %lnaTW, i64 %lnaTX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLy_info$def to i8*)
define internal ghccc void @caLy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP5_srt_struct* @_uaP5_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLy_info$def to i64)) to i32),i32 0)}>
{
naTY:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caLy
caLy:
  %lnaTZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLD_info$def to i64
  %lnaU0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaTZ, i64* %lnaU0, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnaU1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdcnegate_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaU2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaU1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaU2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caLD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLD_info$def to i8*)
define internal ghccc void @caLD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaP4_srt_struct* @_uaP4_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLD_info$def to i64)) to i32),i32 0)}>
{
naU3:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caLD
caLD:
  store i64 %R1_Arg, i64* %R3_Var
  %lnaU4 = ptrtoint %r55Z_closure_struct* @r55Z_closure$def to i64
  store i64 %lnaU4, i64* %R2_Var
  %lnaU5 = load i64*, i64** %Sp_Var
  %lnaU6 = getelementptr inbounds i64, i64* %lnaU5, i32 1
  %lnaU7 = ptrtoint i64* %lnaU6 to i64
  %lnaU8 = inttoptr i64 %lnaU7 to i64*
  store i64* %lnaU8, i64** %Sp_Var
  %lnaU9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdfNumPszuzdszdczp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUa = load i64*, i64** %Sp_Var
  %lnaUb = load i64, i64* %R2_Var
  %lnaUc = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaU9( i64* %Base_Arg, i64* %lnaUa, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaUb, i64 %lnaUc, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwloop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i8*)
define ghccc void @Main_zdwloop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934596, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64)) to i32),i32 0)}>
{
naUd:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caLQ
caLQ:
  %lnaUe = load i64*, i64** %Sp_Var
  %lnaUf = getelementptr inbounds i64, i64* %lnaUe, i32 -5
  %lnaUg = ptrtoint i64* %lnaUf to i64
  %lnaUh = icmp ult i64 %lnaUg, %SpLim_Arg
  %lnaUi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaUh, i1 0 )
  br i1 %lnaUi, label %caLR, label %uaOy
uaOy:
  %lnaUk = load i64, i64* %R2_Var
  %lnaUj = load i64*, i64** %Sp_Var
  %lnaUl = getelementptr inbounds i64, i64* %lnaUj, i32 -1
  store i64 %lnaUk, i64* %lnaUl, !tbaa !2
  %lnaUm = load i64*, i64** %Sp_Var
  %lnaUn = getelementptr inbounds i64, i64* %lnaUm, i32 -1
  %lnaUo = ptrtoint i64* %lnaUn to i64
  %lnaUp = inttoptr i64 %lnaUo to i64*
  store i64* %lnaUp, i64** %Sp_Var
  %lnaUq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caJv$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUr = load i64*, i64** %Sp_Var
  %lnaUs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUq( i64* %Base_Arg, i64* %lnaUr, i64* %Hp_Arg, i64 %lnaUs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLR:
  %lnaUt = load i64, i64* %R2_Var
  store i64 %lnaUt, i64* %R2_Var
  %lnaUu = ptrtoint %Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64
  store i64 %lnaUu, i64* %R1_Var
  %lnaUv = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaUw = bitcast i64* %lnaUv to i64*
  %lnaUx = load i64, i64* %lnaUw, !tbaa !5
  %lnaUy = inttoptr i64 %lnaUx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUz = load i64*, i64** %Sp_Var
  %lnaUA = load i64, i64* %R1_Var
  %lnaUB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUy( i64* %Base_Arg, i64* %lnaUz, i64* %Hp_Arg, i64 %lnaUA, i64 %lnaUB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_caJv = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caJv$def to i8*)
define internal ghccc void @_caJv$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
naUC:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caJv
caJv:
  %lnaUD = load i64*, i64** %Sp_Var
  %lnaUE = getelementptr inbounds i64, i64* %lnaUD, i32 0
  %lnaUF = bitcast i64* %lnaUE to i64*
  %lnaUG = load i64, i64* %lnaUF, !tbaa !2
  %lnaUH = icmp sle i64 %lnaUG, 0
  %lnaUI = zext i1 %lnaUH to i64
  switch i64 %lnaUI, label %caLO [i64 1, label %caLP]
caLO:
  %lnaUK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJB_info$def to i64
  %lnaUJ = load i64*, i64** %Sp_Var
  %lnaUL = getelementptr inbounds i64, i64* %lnaUJ, i32 -1
  store i64 %lnaUK, i64* %lnaUL, !tbaa !2
  %lnaUM = ptrtoint i8* @base_SystemziEnvironment_getArgs2_closure to i64
  %lnaUN = add i64 %lnaUM, 2
  store i64 %lnaUN, i64* %R4_Var
  store i64 4, i64* %R3_Var
  store i64 4, i64* %R2_Var
  %lnaUO = load i64*, i64** %Sp_Var
  %lnaUP = getelementptr inbounds i64, i64* %lnaUO, i32 -1
  %lnaUQ = ptrtoint i64* %lnaUP to i64
  %lnaUR = inttoptr i64 %lnaUQ to i64*
  store i64* %lnaUR, i64** %Sp_Var
  %lnaUS = bitcast i8* @base_ForeignziMarshalziAlloc_zdwallocaBytesAligned_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUT = load i64*, i64** %Sp_Var
  %lnaUU = load i64, i64* %R1_Var
  %lnaUV = load i64, i64* %R2_Var
  %lnaUW = load i64, i64* %R3_Var
  %lnaUX = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUS( i64* %Base_Arg, i64* %lnaUT, i64* %Hp_Arg, i64 %lnaUU, i64 %lnaUV, i64 %lnaUW, i64 %lnaUX, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLP:
  %lnaUY = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %lnaUZ = add i64 %lnaUY, 1
  store i64 %lnaUZ, i64* %R1_Var
  %lnaV0 = load i64*, i64** %Sp_Var
  %lnaV1 = getelementptr inbounds i64, i64* %lnaV0, i32 1
  %lnaV2 = ptrtoint i64* %lnaV1 to i64
  %lnaV3 = inttoptr i64 %lnaV2 to i64*
  store i64* %lnaV3, i64** %Sp_Var
  %lnaV4 = load i64*, i64** %Sp_Var
  %lnaV5 = getelementptr inbounds i64, i64* %lnaV4, i32 0
  %lnaV6 = bitcast i64* %lnaV5 to i64*
  %lnaV7 = load i64, i64* %lnaV6, !tbaa !2
  %lnaV8 = inttoptr i64 %lnaV7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaV9 = load i64*, i64** %Sp_Var
  %lnaVa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaV8( i64* %Base_Arg, i64* %lnaV9, i64* %Hp_Arg, i64 %lnaVa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJB_info$def to i8*)
define internal ghccc void @caJB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJB_info$def to i64)) to i32),i32 0)}>
{
naVb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caJB
caJB:
  %lnaVc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJD_info$def to i64
  %lnaVd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaVc, i64* %lnaVd, !tbaa !2
  %lnaVe = load i64, i64* %R1_Var
  store i64 %lnaVe, i64* %R1_Var
  %lnaVf = load i64, i64* %R1_Var
  %lnaVg = and i64 %lnaVf, 7
  %lnaVh = icmp ne i64 %lnaVg, 0
  br i1 %lnaVh, label %uaOI, label %caJE
caJE:
  %lnaVj = load i64, i64* %R1_Var
  %lnaVk = inttoptr i64 %lnaVj to i64*
  %lnaVl = load i64, i64* %lnaVk, !tbaa !4
  %lnaVm = inttoptr i64 %lnaVl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaVn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOI:
  %lnaVo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVo( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaVp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJD_info$def to i8*)
define internal ghccc void @caJD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJD_info$def to i64)) to i32),i32 0)}>
{
naVq:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caJD
caJD:
  %lnaVr = load i64, i64* %R1_Var
  %lnaVs = and i64 %lnaVr, 7
  switch i64 %lnaVs, label %caLX [i64 1, label %caLX
i64 2, label %caLZ]
caLX:
  %lnaVt = ptrtoint %r562_closure_struct* @r562_closure$def to i64
  store i64 %lnaVt, i64* %R1_Var
  %lnaVu = load i64*, i64** %Sp_Var
  %lnaVv = getelementptr inbounds i64, i64* %lnaVu, i32 2
  %lnaVw = ptrtoint i64* %lnaVv to i64
  %lnaVx = inttoptr i64 %lnaVw to i64*
  store i64* %lnaVx, i64** %Sp_Var
  %lnaVy = bitcast i8* @stg_raiseIOzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVz = load i64*, i64** %Sp_Var
  %lnaVA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVy( i64* %Base_Arg, i64* %lnaVz, i64* %Hp_Arg, i64 %lnaVA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLZ:
  %lnaVC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJJ_info$def to i64
  %lnaVB = load i64*, i64** %Sp_Var
  %lnaVD = getelementptr inbounds i64, i64* %lnaVB, i32 0
  store i64 %lnaVC, i64* %lnaVD, !tbaa !2
  %lnaVG = load i64, i64* %R1_Var
  %lnaVH = add i64 %lnaVG, 6
  %lnaVI = inttoptr i64 %lnaVH to i64*
  %lnaVJ = load i64, i64* %lnaVI, !tbaa !4
  store i64 %lnaVJ, i64* %R3_Var
  %lnaVK = ptrtoint %r55b_closure_struct* @r55b_closure$def to i64
  store i64 %lnaVK, i64* %R2_Var
  %lnaVL = bitcast i8* @base_TextziParserCombinatorsziReadP_run_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVM = load i64*, i64** %Sp_Var
  %lnaVN = load i64, i64* %R1_Var
  %lnaVO = load i64, i64* %R2_Var
  %lnaVP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVL( i64* %Base_Arg, i64* %lnaVM, i64* %Hp_Arg, i64 %lnaVN, i64 %lnaVO, i64 %lnaVP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJJ_info$def to i8*)
define internal ghccc void @caJJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJJ_info$def to i64)) to i32),i32 0)}>
{
naVQ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caJJ
caJJ:
  %lnaVR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJN_info$def to i64
  %lnaVS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaVR, i64* %lnaVS, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnaVT = bitcast i8* @base_TextziRead_readEither8_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaVU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJN_info$def to i8*)
define internal ghccc void @caJN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJN_info$def to i64)) to i32),i32 0)}>
{
naVV:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5il = alloca i64, i32 1
  br label %caJN
caJN:
  %lnaVW = load i64, i64* %R1_Var
  %lnaVX = and i64 %lnaVW, 7
  switch i64 %lnaVX, label %caM4 [i64 1, label %caM4
i64 2, label %caM6]
caM4:
  %lnaVY = ptrtoint %r565_closure_struct* @r565_closure$def to i64
  store i64 %lnaVY, i64* %R1_Var
  %lnaVZ = load i64*, i64** %Sp_Var
  %lnaW0 = getelementptr inbounds i64, i64* %lnaVZ, i32 2
  %lnaW1 = ptrtoint i64* %lnaW0 to i64
  %lnaW2 = inttoptr i64 %lnaW1 to i64*
  store i64* %lnaW2, i64** %Sp_Var
  %lnaW4 = load i64, i64* %R1_Var
  %lnaW5 = inttoptr i64 %lnaW4 to i64*
  %lnaW6 = load i64, i64* %lnaW5, !tbaa !4
  %lnaW7 = inttoptr i64 %lnaW6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaW8 = load i64*, i64** %Sp_Var
  %lnaW9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaW7( i64* %Base_Arg, i64* %lnaW8, i64* %Hp_Arg, i64 %lnaW9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caM6:
  %lnaWb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJS_info$def to i64
  %lnaWa = load i64*, i64** %Sp_Var
  %lnaWc = getelementptr inbounds i64, i64* %lnaWa, i32 -1
  store i64 %lnaWb, i64* %lnaWc, !tbaa !2
  %lnaWf = load i64, i64* %R1_Var
  %lnaWg = add i64 %lnaWf, 6
  %lnaWh = inttoptr i64 %lnaWg to i64*
  %lnaWi = load i64, i64* %lnaWh, !tbaa !4
  store i64 %lnaWi, i64* %ls5il
  %lnaWl = load i64, i64* %R1_Var
  %lnaWm = add i64 %lnaWl, 14
  %lnaWn = inttoptr i64 %lnaWm to i64*
  %lnaWo = load i64, i64* %lnaWn, !tbaa !4
  store i64 %lnaWo, i64* %R1_Var
  %lnaWq = load i64, i64* %ls5il
  %lnaWp = load i64*, i64** %Sp_Var
  %lnaWr = getelementptr inbounds i64, i64* %lnaWp, i32 0
  store i64 %lnaWq, i64* %lnaWr, !tbaa !2
  %lnaWs = load i64*, i64** %Sp_Var
  %lnaWt = getelementptr inbounds i64, i64* %lnaWs, i32 -1
  %lnaWu = ptrtoint i64* %lnaWt to i64
  %lnaWv = inttoptr i64 %lnaWu to i64*
  store i64* %lnaWv, i64** %Sp_Var
  %lnaWw = load i64, i64* %R1_Var
  %lnaWx = and i64 %lnaWw, 7
  %lnaWy = icmp ne i64 %lnaWx, 0
  br i1 %lnaWy, label %uaOJ, label %caJT
caJT:
  %lnaWA = load i64, i64* %R1_Var
  %lnaWB = inttoptr i64 %lnaWA to i64*
  %lnaWC = load i64, i64* %lnaWB, !tbaa !4
  %lnaWD = inttoptr i64 %lnaWC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWE = load i64*, i64** %Sp_Var
  %lnaWF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWD( i64* %Base_Arg, i64* %lnaWE, i64* %Hp_Arg, i64 %lnaWF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOJ:
  %lnaWG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWH = load i64*, i64** %Sp_Var
  %lnaWI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWG( i64* %Base_Arg, i64* %lnaWH, i64* %Hp_Arg, i64 %lnaWI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJS_info$def to i8*)
define internal ghccc void @caJS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJS_info$def to i64)) to i32),i32 0)}>
{
naWJ:
  %ls5il = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caJS
caJS:
  %lnaWK = load i64, i64* %R1_Var
  %lnaWL = and i64 %lnaWK, 7
  switch i64 %lnaWL, label %caM9 [i64 1, label %caM9
i64 2, label %caOp]
caM9:
  %lnaWM = load i64*, i64** %Sp_Var
  %lnaWN = getelementptr inbounds i64, i64* %lnaWM, i32 1
  %lnaWO = bitcast i64* %lnaWN to i64*
  %lnaWP = load i64, i64* %lnaWO, !tbaa !2
  store i64 %lnaWP, i64* %ls5il
  %lnaWR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJX_info$def to i64
  %lnaWQ = load i64*, i64** %Sp_Var
  %lnaWS = getelementptr inbounds i64, i64* %lnaWQ, i32 1
  store i64 %lnaWR, i64* %lnaWS, !tbaa !2
  %lnaWT = load i64, i64* %ls5il
  store i64 %lnaWT, i64* %R1_Var
  %lnaWU = load i64*, i64** %Sp_Var
  %lnaWV = getelementptr inbounds i64, i64* %lnaWU, i32 1
  %lnaWW = ptrtoint i64* %lnaWV to i64
  %lnaWX = inttoptr i64 %lnaWW to i64*
  store i64* %lnaWX, i64** %Sp_Var
  %lnaWY = load i64, i64* %R1_Var
  %lnaWZ = and i64 %lnaWY, 7
  %lnaX0 = icmp ne i64 %lnaWZ, 0
  br i1 %lnaX0, label %uaOK, label %caJY
caJY:
  %lnaX2 = load i64, i64* %R1_Var
  %lnaX3 = inttoptr i64 %lnaX2 to i64*
  %lnaX4 = load i64, i64* %lnaX3, !tbaa !4
  %lnaX5 = inttoptr i64 %lnaX4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaX6 = load i64*, i64** %Sp_Var
  %lnaX7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaX5( i64* %Base_Arg, i64* %lnaX6, i64* %Hp_Arg, i64 %lnaX7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOK:
  %lnaX8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaX9 = load i64*, i64** %Sp_Var
  %lnaXa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaX8( i64* %Base_Arg, i64* %lnaX9, i64* %Hp_Arg, i64 %lnaXa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOp:
  %lnaXb = ptrtoint %r563_closure_struct* @r563_closure$def to i64
  store i64 %lnaXb, i64* %R1_Var
  %lnaXc = load i64*, i64** %Sp_Var
  %lnaXd = getelementptr inbounds i64, i64* %lnaXc, i32 3
  %lnaXe = ptrtoint i64* %lnaXd to i64
  %lnaXf = inttoptr i64 %lnaXe to i64*
  store i64* %lnaXf, i64** %Sp_Var
  %lnaXh = load i64, i64* %R1_Var
  %lnaXi = inttoptr i64 %lnaXh to i64*
  %lnaXj = load i64, i64* %lnaXi, !tbaa !4
  %lnaXk = inttoptr i64 %lnaXj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXl = load i64*, i64** %Sp_Var
  %lnaXm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXk( i64* %Base_Arg, i64* %lnaXl, i64* %Hp_Arg, i64 %lnaXm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caJX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJX_info$def to i8*)
define internal ghccc void @caJX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJX_info$def to i64)) to i32),i32 0)}>
{
naXn:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls5ip = alloca i64, i32 1
  %lcaK2 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caJX
caJX:
  %lnaXo = load i64*, i64** %Hp_Var
  %lnaXp = getelementptr inbounds i64, i64* %lnaXo, i32 6
  %lnaXq = ptrtoint i64* %lnaXp to i64
  %lnaXr = inttoptr i64 %lnaXq to i64*
  store i64* %lnaXr, i64** %Hp_Var
  %lnaXs = load i64*, i64** %Hp_Var
  %lnaXt = ptrtoint i64* %lnaXs to i64
  %lnaXu = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaXv = bitcast i64* %lnaXu to i64*
  %lnaXw = load i64, i64* %lnaXv, !tbaa !5
  %lnaXx = icmp ugt i64 %lnaXt, %lnaXw
  %lnaXy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaXx, i1 0 )
  br i1 %lnaXy, label %caMc, label %caMb
caMb:
  %lnaXB = load i64, i64* %R1_Var
  %lnaXC = add i64 %lnaXB, 7
  %lnaXD = inttoptr i64 %lnaXC to i64*
  %lnaXE = load i64, i64* %lnaXD, !tbaa !4
  store i64 %lnaXE, i64* %ls5ip
  %lnaXG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5iq_info$def to i64
  %lnaXF = load i64*, i64** %Hp_Var
  %lnaXH = getelementptr inbounds i64, i64* %lnaXF, i32 -5
  store i64 %lnaXG, i64* %lnaXH, !tbaa !3
  %lnaXJ = load i64, i64* %ls5ip
  %lnaXI = load i64*, i64** %Hp_Var
  %lnaXK = getelementptr inbounds i64, i64* %lnaXI, i32 -3
  store i64 %lnaXJ, i64* %lnaXK, !tbaa !3
  %lnaXM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5jl_info$def to i64
  %lnaXL = load i64*, i64** %Hp_Var
  %lnaXN = getelementptr inbounds i64, i64* %lnaXL, i32 -2
  store i64 %lnaXM, i64* %lnaXN, !tbaa !3
  %lnaXO = load i64*, i64** %Hp_Var
  %lnaXP = getelementptr inbounds i64, i64* %lnaXO, i32 -5
  %lnaXQ = ptrtoint i64* %lnaXP to i64
  store i64 %lnaXQ, i64* %lcaK2
  %lnaXS = load i64, i64* %lcaK2
  %lnaXR = load i64*, i64** %Hp_Var
  %lnaXT = getelementptr inbounds i64, i64* %lnaXR, i32 0
  store i64 %lnaXS, i64* %lnaXT, !tbaa !3
  %lnaXV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKT_info$def to i64
  %lnaXU = load i64*, i64** %Sp_Var
  %lnaXW = getelementptr inbounds i64, i64* %lnaXU, i32 -2
  store i64 %lnaXV, i64* %lnaXW, !tbaa !2
  %lnaXX = load i64*, i64** %Hp_Var
  %lnaXY = getelementptr inbounds i64, i64* %lnaXX, i32 -2
  %lnaXZ = ptrtoint i64* %lnaXY to i64
  store i64 %lnaXZ, i64* %R3_Var
  %lnaY0 = load i64, i64* %ls5ip
  store i64 %lnaY0, i64* %R2_Var
  %lnaY2 = load i64, i64* %ls5ip
  %lnaY1 = load i64*, i64** %Sp_Var
  %lnaY3 = getelementptr inbounds i64, i64* %lnaY1, i32 -1
  store i64 %lnaY2, i64* %lnaY3, !tbaa !2
  %lnaY5 = load i64, i64* %lcaK2
  %lnaY4 = load i64*, i64** %Sp_Var
  %lnaY6 = getelementptr inbounds i64, i64* %lnaY4, i32 0
  store i64 %lnaY5, i64* %lnaY6, !tbaa !2
  %lnaY7 = load i64*, i64** %Sp_Var
  %lnaY8 = getelementptr inbounds i64, i64* %lnaY7, i32 -2
  %lnaY9 = ptrtoint i64* %lnaY8 to i64
  %lnaYa = inttoptr i64 %lnaY9 to i64*
  store i64* %lnaYa, i64** %Sp_Var
  %lnaYb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYc = load i64*, i64** %Sp_Var
  %lnaYd = load i64*, i64** %Hp_Var
  %lnaYe = load i64, i64* %R1_Var
  %lnaYf = load i64, i64* %R2_Var
  %lnaYg = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYb( i64* %Base_Arg, i64* %lnaYc, i64* %lnaYd, i64 %lnaYe, i64 %lnaYf, i64 %lnaYg, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caMc:
  %lnaYh = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnaYh, !tbaa !5
  %lnaYi = load i64, i64* %R1_Var
  store i64 %lnaYi, i64* %R1_Var
  %lnaYj = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYk = load i64*, i64** %Sp_Var
  %lnaYl = load i64*, i64** %Hp_Var
  %lnaYm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYj( i64* %Base_Arg, i64* %lnaYk, i64* %lnaYl, i64 %lnaYm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caKT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKT_info$def to i8*)
define internal ghccc void @caKT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKT_info$def to i64)) to i32),i32 0)}>
{
naYn:
  br label %caKT
caKT:
  %lnaYo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnaYo, !tbaa !2
  %lnaYp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caO1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_caO1 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caO1$def to i8*)
define internal ghccc void @_caO1$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
naYq:
  %ls5j8 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caO1
caO1:
  %lnaYr = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnaYs = bitcast i64* %lnaYr to i64*
  %lnaYt = load i64, i64* %lnaYs, !tbaa !2
  store i64 %lnaYt, i64* %ls5j8
  %lnaYu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO3_info$def to i64
  %lnaYv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaYu, i64* %lnaYv, !tbaa !2
  %lnaYw = load i64, i64* %ls5j8
  store i64 %lnaYw, i64* %R1_Var
  %lnaYx = load i64, i64* %R1_Var
  %lnaYy = and i64 %lnaYx, 7
  %lnaYz = icmp ne i64 %lnaYy, 0
  br i1 %lnaYz, label %uaP0, label %caO5
caO5:
  %lnaYB = load i64, i64* %R1_Var
  %lnaYC = inttoptr i64 %lnaYB to i64*
  %lnaYD = load i64, i64* %lnaYC, !tbaa !4
  %lnaYE = inttoptr i64 %lnaYD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaP0:
  %lnaYG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caO3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO3_info$def to i8*)
define internal ghccc void @caO3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO3_info$def to i64)) to i32),i32 0)}>
{
naYI:
  %ls5jb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caO3
caO3:
  %lnaYJ = load i64, i64* %R1_Var
  %lnaYK = and i64 %lnaYJ, 7
  switch i64 %lnaYK, label %uaP1 [i64 1, label %uaP1
i64 2, label %caOg]
uaP1:
  %lnaYL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL0_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYM = load i64*, i64** %Sp_Var
  %lnaYN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYL( i64* %Base_Arg, i64* %lnaYM, i64* %Hp_Arg, i64 %lnaYN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOg:
  %lnaYP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOe_info$def to i64
  %lnaYO = load i64*, i64** %Sp_Var
  %lnaYQ = getelementptr inbounds i64, i64* %lnaYO, i32 -1
  store i64 %lnaYP, i64* %lnaYQ, !tbaa !2
  %lnaYT = load i64, i64* %R1_Var
  %lnaYU = add i64 %lnaYT, 14
  %lnaYV = inttoptr i64 %lnaYU to i64*
  %lnaYW = load i64, i64* %lnaYV, !tbaa !4
  store i64 %lnaYW, i64* %ls5jb
  %lnaYZ = load i64, i64* %R1_Var
  %lnaZ0 = add i64 %lnaYZ, 6
  %lnaZ1 = inttoptr i64 %lnaZ0 to i64*
  %lnaZ2 = load i64, i64* %lnaZ1, !tbaa !4
  store i64 %lnaZ2, i64* %R1_Var
  %lnaZ4 = load i64, i64* %ls5jb
  %lnaZ3 = load i64*, i64** %Sp_Var
  %lnaZ5 = getelementptr inbounds i64, i64* %lnaZ3, i32 0
  store i64 %lnaZ4, i64* %lnaZ5, !tbaa !2
  %lnaZ6 = load i64*, i64** %Sp_Var
  %lnaZ7 = getelementptr inbounds i64, i64* %lnaZ6, i32 -1
  %lnaZ8 = ptrtoint i64* %lnaZ7 to i64
  %lnaZ9 = inttoptr i64 %lnaZ8 to i64*
  store i64* %lnaZ9, i64** %Sp_Var
  %lnaZa = load i64, i64* %R1_Var
  %lnaZb = and i64 %lnaZa, 7
  %lnaZc = icmp ne i64 %lnaZb, 0
  br i1 %lnaZc, label %uaP2, label %caOh
caOh:
  %lnaZe = load i64, i64* %R1_Var
  %lnaZf = inttoptr i64 %lnaZe to i64*
  %lnaZg = load i64, i64* %lnaZf, !tbaa !4
  %lnaZh = inttoptr i64 %lnaZg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZi = load i64*, i64** %Sp_Var
  %lnaZj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZh( i64* %Base_Arg, i64* %lnaZi, i64* %Hp_Arg, i64 %lnaZj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaP2:
  %lnaZk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZl = load i64*, i64** %Sp_Var
  %lnaZm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZk( i64* %Base_Arg, i64* %lnaZl, i64* %Hp_Arg, i64 %lnaZm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caOe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOe_info$def to i8*)
define internal ghccc void @caOe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 644, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOe_info$def to i64)) to i32),i32 0)}>
{
naZn:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caOe
caOe:
  %lnaZp = load i64*, i64** %Sp_Var
  %lnaZq = getelementptr inbounds i64, i64* %lnaZp, i32 1
  %lnaZr = bitcast i64* %lnaZq to i64*
  %lnaZs = load i64, i64* %lnaZr, !tbaa !2
  %lnaZo = load i64*, i64** %Sp_Var
  %lnaZt = getelementptr inbounds i64, i64* %lnaZo, i32 1
  store i64 %lnaZs, i64* %lnaZt, !tbaa !2
  %lnaZu = load i64*, i64** %Sp_Var
  %lnaZv = getelementptr inbounds i64, i64* %lnaZu, i32 1
  %lnaZw = ptrtoint i64* %lnaZv to i64
  %lnaZx = inttoptr i64 %lnaZw to i64*
  store i64* %lnaZx, i64** %Sp_Var
  %lnaZy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caO1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZz = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZy( i64* %Base_Arg, i64* %lnaZz, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caL0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL0_info$def to i8*)
define internal ghccc void @caL0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL0_info$def to i64)) to i32),i32 0)}>
{
naZA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %caL0
caL0:
  %lnaZB = load i64*, i64** %Hp_Var
  %lnaZC = getelementptr inbounds i64, i64* %lnaZB, i32 3
  %lnaZD = ptrtoint i64* %lnaZC to i64
  %lnaZE = inttoptr i64 %lnaZD to i64*
  store i64* %lnaZE, i64** %Hp_Var
  %lnaZF = load i64*, i64** %Hp_Var
  %lnaZG = ptrtoint i64* %lnaZF to i64
  %lnaZH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaZI = bitcast i64* %lnaZH to i64*
  %lnaZJ = load i64, i64* %lnaZI, !tbaa !5
  %lnaZK = icmp ugt i64 %lnaZG, %lnaZJ
  %lnaZL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaZK, i1 0 )
  br i1 %lnaZL, label %caMh, label %caMg
caMg:
  %lnaZN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s5j5_info$def to i64
  %lnaZM = load i64*, i64** %Hp_Var
  %lnaZO = getelementptr inbounds i64, i64* %lnaZM, i32 -2
  store i64 %lnaZN, i64* %lnaZO, !tbaa !3
  %lnaZQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnaZR = bitcast i64* %lnaZQ to i64*
  %lnaZS = load i64, i64* %lnaZR, !tbaa !2
  %lnaZP = load i64*, i64** %Hp_Var
  %lnaZT = getelementptr inbounds i64, i64* %lnaZP, i32 0
  store i64 %lnaZS, i64* %lnaZT, !tbaa !3
  %lnaZU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMe_info$def to i64
  %lnaZV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaZU, i64* %lnaZV, !tbaa !2
  %lnaZW = load i64*, i64** %Hp_Var
  %lnaZX = getelementptr inbounds i64, i64* %lnaZW, i32 -2
  %lnaZY = ptrtoint i64* %lnaZX to i64
  store i64 %lnaZY, i64* %R3_Var
  %lnaZZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb00 = bitcast i64* %lnaZZ to i64*
  %lnb01 = load i64, i64* %lnb00, !tbaa !2
  store i64 %lnb01, i64* %R2_Var
  %lnb02 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb03 = load i64*, i64** %Hp_Var
  %lnb04 = load i64, i64* %R2_Var
  %lnb05 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb02( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnb03, i64 %R1_Arg, i64 %lnb04, i64 %lnb05, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caMh:
  %lnb06 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnb06, !tbaa !5
  %lnb07 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL0_info$def to i64
  %lnb08 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb07, i64* %lnb08, !tbaa !2
  %lnb09 = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0a = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb09( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnb0a, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caMe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMe_info$def to i8*)
define internal ghccc void @caMe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMe_info$def to i64)) to i32),i32 0)}>
{
nb0b:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caMe
caMe:
  %lnb0c = load i64*, i64** %Sp_Var
  %lnb0d = getelementptr inbounds i64, i64* %lnb0c, i32 2
  store i64 %R1_Arg, i64* %lnb0d, !tbaa !2
  %lnb0e = load i64*, i64** %Sp_Var
  %lnb0f = getelementptr inbounds i64, i64* %lnb0e, i32 1
  %lnb0g = ptrtoint i64* %lnb0f to i64
  %lnb0h = inttoptr i64 %lnb0g to i64*
  store i64* %lnb0h, i64** %Sp_Var
  %lnb0i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caND$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0j = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0i( i64* %Base_Arg, i64* %lnb0j, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_caND = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caND$def to i8*)
define internal ghccc void @_caND$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nb0k:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caND
caND:
  %lnb0m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNF_info$def to i64
  %lnb0l = load i64*, i64** %Sp_Var
  %lnb0n = getelementptr inbounds i64, i64* %lnb0l, i32 -1
  store i64 %lnb0m, i64* %lnb0n, !tbaa !2
  %lnb0o = load i64*, i64** %Sp_Var
  %lnb0p = getelementptr inbounds i64, i64* %lnb0o, i32 1
  %lnb0q = bitcast i64* %lnb0p to i64*
  %lnb0r = load i64, i64* %lnb0q, !tbaa !2
  store i64 %lnb0r, i64* %R1_Var
  %lnb0s = load i64*, i64** %Sp_Var
  %lnb0t = getelementptr inbounds i64, i64* %lnb0s, i32 -1
  %lnb0u = ptrtoint i64* %lnb0t to i64
  %lnb0v = inttoptr i64 %lnb0u to i64*
  store i64* %lnb0v, i64** %Sp_Var
  %lnb0w = load i64, i64* %R1_Var
  %lnb0x = and i64 %lnb0w, 7
  %lnb0y = icmp ne i64 %lnb0x, 0
  br i1 %lnb0y, label %uaOX, label %caNH
caNH:
  %lnb0A = load i64, i64* %R1_Var
  %lnb0B = inttoptr i64 %lnb0A to i64*
  %lnb0C = load i64, i64* %lnb0B, !tbaa !4
  %lnb0D = inttoptr i64 %lnb0C to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0E = load i64*, i64** %Sp_Var
  %lnb0F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0D( i64* %Base_Arg, i64* %lnb0E, i64* %Hp_Arg, i64 %lnb0F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOX:
  %lnb0G = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0H = load i64*, i64** %Sp_Var
  %lnb0I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0G( i64* %Base_Arg, i64* %lnb0H, i64* %Hp_Arg, i64 %lnb0I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNF_info$def to i8*)
define internal ghccc void @caNF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNF_info$def to i64)) to i32),i32 0)}>
{
nb0J:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ls5iT = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caNF
caNF:
  %lnb0K = load i64, i64* %R1_Var
  %lnb0L = and i64 %lnb0K, 7
  switch i64 %lnb0L, label %caNN [i64 1, label %caNN
i64 2, label %caNS]
caNN:
  %lnb0M = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMr_info$def to i64
  %lnb0N = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb0M, i64* %lnb0N, !tbaa !2
  %lnb0O = ptrtoint %Main_ts_closure_struct* @Main_ts_closure$def to i64
  %lnb0P = add i64 %lnb0O, 2
  store i64 %lnb0P, i64* %R3_Var
  %lnb0Q = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb0R = bitcast i64* %lnb0Q to i64*
  %lnb0S = load i64, i64* %lnb0R, !tbaa !2
  store i64 %lnb0S, i64* %R2_Var
  %lnb0T = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0U = load i64, i64* %R1_Var
  %lnb0V = load i64, i64* %R2_Var
  %lnb0W = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0T( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb0U, i64 %lnb0V, i64 %lnb0W, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNS:
  %lnb0X = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNQ_info$def to i64
  %lnb0Y = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb0X, i64* %lnb0Y, !tbaa !2
  %lnb11 = load i64, i64* %R1_Var
  %lnb12 = add i64 %lnb11, 14
  %lnb13 = inttoptr i64 %lnb12 to i64*
  %lnb14 = load i64, i64* %lnb13, !tbaa !4
  store i64 %lnb14, i64* %ls5iT
  %lnb17 = load i64, i64* %R1_Var
  %lnb18 = add i64 %lnb17, 6
  %lnb19 = inttoptr i64 %lnb18 to i64*
  %lnb1a = load i64, i64* %lnb19, !tbaa !4
  store i64 %lnb1a, i64* %R1_Var
  %lnb1b = load i64, i64* %ls5iT
  %lnb1c = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lnb1b, i64* %lnb1c, !tbaa !2
  %lnb1d = load i64, i64* %R1_Var
  %lnb1e = and i64 %lnb1d, 7
  %lnb1f = icmp ne i64 %lnb1e, 0
  br i1 %lnb1f, label %uaOY, label %caNT
caNT:
  %lnb1h = load i64, i64* %R1_Var
  %lnb1i = inttoptr i64 %lnb1h to i64*
  %lnb1j = load i64, i64* %lnb1i, !tbaa !4
  %lnb1k = inttoptr i64 %lnb1j to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1k( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb1l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOY:
  %lnb1m = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb1n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNQ_info$def to i8*)
define internal ghccc void @caNQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNQ_info$def to i64)) to i32),i32 0)}>
{
nb1o:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caNQ
caNQ:
  %lnb1q = load i64*, i64** %Sp_Var
  %lnb1r = getelementptr inbounds i64, i64* %lnb1q, i32 2
  %lnb1s = bitcast i64* %lnb1r to i64*
  %lnb1t = load i64, i64* %lnb1s, !tbaa !2
  %lnb1p = load i64*, i64** %Sp_Var
  %lnb1u = getelementptr inbounds i64, i64* %lnb1p, i32 2
  store i64 %lnb1t, i64* %lnb1u, !tbaa !2
  %lnb1v = load i64*, i64** %Sp_Var
  %lnb1w = getelementptr inbounds i64, i64* %lnb1v, i32 1
  %lnb1x = ptrtoint i64* %lnb1w to i64
  %lnb1y = inttoptr i64 %lnb1x to i64*
  store i64* %lnb1y, i64** %Sp_Var
  %lnb1z = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caND$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1A = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1z( i64* %Base_Arg, i64* %lnb1A, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caMr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMr_info$def to i8*)
define internal ghccc void @caMr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMr_info$def to i64)) to i32),i32 0)}>
{
nb1B:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caMr
caMr:
  %lnb1C = load i64*, i64** %Sp_Var
  %lnb1D = getelementptr inbounds i64, i64* %lnb1C, i32 2
  store i64 %R1_Arg, i64* %lnb1D, !tbaa !2
  %lnb1E = load i64*, i64** %Sp_Var
  %lnb1F = getelementptr inbounds i64, i64* %lnb1E, i32 1
  %lnb1G = ptrtoint i64* %lnb1F to i64
  %lnb1H = inttoptr i64 %lnb1G to i64*
  store i64* %lnb1H, i64** %Sp_Var
  %lnb1I = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caNf$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1J = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1I( i64* %Base_Arg, i64* %lnb1J, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_caNf = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caNf$def to i8*)
define internal ghccc void @_caNf$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nb1K:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caNf
caNf:
  %lnb1M = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNh_info$def to i64
  %lnb1L = load i64*, i64** %Sp_Var
  %lnb1N = getelementptr inbounds i64, i64* %lnb1L, i32 -1
  store i64 %lnb1M, i64* %lnb1N, !tbaa !2
  %lnb1O = load i64*, i64** %Sp_Var
  %lnb1P = getelementptr inbounds i64, i64* %lnb1O, i32 1
  %lnb1Q = bitcast i64* %lnb1P to i64*
  %lnb1R = load i64, i64* %lnb1Q, !tbaa !2
  store i64 %lnb1R, i64* %R1_Var
  %lnb1S = load i64*, i64** %Sp_Var
  %lnb1T = getelementptr inbounds i64, i64* %lnb1S, i32 -1
  %lnb1U = ptrtoint i64* %lnb1T to i64
  %lnb1V = inttoptr i64 %lnb1U to i64*
  store i64* %lnb1V, i64** %Sp_Var
  %lnb1W = load i64, i64* %R1_Var
  %lnb1X = and i64 %lnb1W, 7
  %lnb1Y = icmp ne i64 %lnb1X, 0
  br i1 %lnb1Y, label %uaOU, label %caNj
caNj:
  %lnb20 = load i64, i64* %R1_Var
  %lnb21 = inttoptr i64 %lnb20 to i64*
  %lnb22 = load i64, i64* %lnb21, !tbaa !4
  %lnb23 = inttoptr i64 %lnb22 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb24 = load i64*, i64** %Sp_Var
  %lnb25 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb23( i64* %Base_Arg, i64* %lnb24, i64* %Hp_Arg, i64 %lnb25, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOU:
  %lnb26 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb27 = load i64*, i64** %Sp_Var
  %lnb28 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb26( i64* %Base_Arg, i64* %lnb27, i64* %Hp_Arg, i64 %lnb28, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNh_info$def to i8*)
define internal ghccc void @caNh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNh_info$def to i64)) to i32),i32 0)}>
{
nb29:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5iK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caNh
caNh:
  %lnb2a = load i64, i64* %R1_Var
  %lnb2b = and i64 %lnb2a, 7
  switch i64 %lnb2b, label %caNp [i64 1, label %caNp
i64 2, label %caNu]
caNp:
  %lnb2d = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMC_info$def to i64
  %lnb2c = load i64*, i64** %Sp_Var
  %lnb2e = getelementptr inbounds i64, i64* %lnb2c, i32 2
  store i64 %lnb2d, i64* %lnb2e, !tbaa !2
  %lnb2f = ptrtoint %Main_tree_closure_struct* @Main_tree_closure$def to i64
  %lnb2g = add i64 %lnb2f, 2
  store i64 %lnb2g, i64* %R3_Var
  %lnb2h = load i64*, i64** %Sp_Var
  %lnb2i = getelementptr inbounds i64, i64* %lnb2h, i32 1
  %lnb2j = bitcast i64* %lnb2i to i64*
  %lnb2k = load i64, i64* %lnb2j, !tbaa !2
  store i64 %lnb2k, i64* %R2_Var
  %lnb2l = load i64*, i64** %Sp_Var
  %lnb2m = getelementptr inbounds i64, i64* %lnb2l, i32 2
  %lnb2n = ptrtoint i64* %lnb2m to i64
  %lnb2o = inttoptr i64 %lnb2n to i64*
  store i64* %lnb2o, i64** %Sp_Var
  %lnb2p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwextract_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2q = load i64*, i64** %Sp_Var
  %lnb2r = load i64, i64* %R1_Var
  %lnb2s = load i64, i64* %R2_Var
  %lnb2t = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2p( i64* %Base_Arg, i64* %lnb2q, i64* %Hp_Arg, i64 %lnb2r, i64 %lnb2s, i64 %lnb2t, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNu:
  %lnb2v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNs_info$def to i64
  %lnb2u = load i64*, i64** %Sp_Var
  %lnb2w = getelementptr inbounds i64, i64* %lnb2u, i32 0
  store i64 %lnb2v, i64* %lnb2w, !tbaa !2
  %lnb2z = load i64, i64* %R1_Var
  %lnb2A = add i64 %lnb2z, 14
  %lnb2B = inttoptr i64 %lnb2A to i64*
  %lnb2C = load i64, i64* %lnb2B, !tbaa !4
  store i64 %lnb2C, i64* %ls5iK
  %lnb2F = load i64, i64* %R1_Var
  %lnb2G = add i64 %lnb2F, 6
  %lnb2H = inttoptr i64 %lnb2G to i64*
  %lnb2I = load i64, i64* %lnb2H, !tbaa !4
  store i64 %lnb2I, i64* %R1_Var
  %lnb2K = load i64, i64* %ls5iK
  %lnb2J = load i64*, i64** %Sp_Var
  %lnb2L = getelementptr inbounds i64, i64* %lnb2J, i32 2
  store i64 %lnb2K, i64* %lnb2L, !tbaa !2
  %lnb2M = load i64, i64* %R1_Var
  %lnb2N = and i64 %lnb2M, 7
  %lnb2O = icmp ne i64 %lnb2N, 0
  br i1 %lnb2O, label %uaOV, label %caNv
caNv:
  %lnb2Q = load i64, i64* %R1_Var
  %lnb2R = inttoptr i64 %lnb2Q to i64*
  %lnb2S = load i64, i64* %lnb2R, !tbaa !4
  %lnb2T = inttoptr i64 %lnb2S to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2U = load i64*, i64** %Sp_Var
  %lnb2V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2T( i64* %Base_Arg, i64* %lnb2U, i64* %Hp_Arg, i64 %lnb2V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOV:
  %lnb2W = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2X = load i64*, i64** %Sp_Var
  %lnb2Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2W( i64* %Base_Arg, i64* %lnb2X, i64* %Hp_Arg, i64 %lnb2Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNs_info$def to i8*)
define internal ghccc void @caNs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNs_info$def to i64)) to i32),i32 0)}>
{
nb2Z:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caNs
caNs:
  %lnb31 = load i64*, i64** %Sp_Var
  %lnb32 = getelementptr inbounds i64, i64* %lnb31, i32 2
  %lnb33 = bitcast i64* %lnb32 to i64*
  %lnb34 = load i64, i64* %lnb33, !tbaa !2
  %lnb30 = load i64*, i64** %Sp_Var
  %lnb35 = getelementptr inbounds i64, i64* %lnb30, i32 2
  store i64 %lnb34, i64* %lnb35, !tbaa !2
  %lnb36 = load i64*, i64** %Sp_Var
  %lnb37 = getelementptr inbounds i64, i64* %lnb36, i32 1
  %lnb38 = ptrtoint i64* %lnb37 to i64
  %lnb39 = inttoptr i64 %lnb38 to i64*
  store i64* %lnb39, i64** %Sp_Var
  %lnb3a = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caNf$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3b = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3a( i64* %Base_Arg, i64* %lnb3b, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caMC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMC_info$def to i8*)
define internal ghccc void @caMC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMC_info$def to i64)) to i32),i32 0)}>
{
nb3c:
  br label %caMC
caMC:
  %lnb3d = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnb3d, !tbaa !2
  %lnb3e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caMR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3e( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_caMR = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caMR$def to i8*)
define internal ghccc void @_caMR$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nb3f:
  %ls5iy = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caMR
caMR:
  %lnb3g = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnb3h = bitcast i64* %lnb3g to i64*
  %lnb3i = load i64, i64* %lnb3h, !tbaa !2
  store i64 %lnb3i, i64* %ls5iy
  %lnb3j = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMT_info$def to i64
  %lnb3k = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb3j, i64* %lnb3k, !tbaa !2
  %lnb3l = load i64, i64* %ls5iy
  store i64 %lnb3l, i64* %R1_Var
  %lnb3m = load i64, i64* %R1_Var
  %lnb3n = and i64 %lnb3m, 7
  %lnb3o = icmp ne i64 %lnb3n, 0
  br i1 %lnb3o, label %uaOQ, label %caMV
caMV:
  %lnb3q = load i64, i64* %R1_Var
  %lnb3r = inttoptr i64 %lnb3q to i64*
  %lnb3s = load i64, i64* %lnb3r, !tbaa !4
  %lnb3t = inttoptr i64 %lnb3s to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3t( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOQ:
  %lnb3v = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3v( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caMT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMT_info$def to i8*)
define internal ghccc void @caMT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMT_info$def to i64)) to i32),i32 0)}>
{
nb3x:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls5iB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caMT
caMT:
  %lnb3y = load i64, i64* %R1_Var
  %lnb3z = and i64 %lnb3y, 7
  switch i64 %lnb3z, label %caN1 [i64 1, label %caN1
i64 2, label %caN6]
caN1:
  %lnb3B = load i64*, i64** %Sp_Var
  %lnb3C = getelementptr inbounds i64, i64* %lnb3B, i32 1
  %lnb3D = bitcast i64* %lnb3C to i64*
  %lnb3E = load i64, i64* %lnb3D, !tbaa !2
  %lnb3F = add i64 %lnb3E, -1
  %lnb3A = load i64*, i64** %Sp_Var
  %lnb3G = getelementptr inbounds i64, i64* %lnb3A, i32 1
  store i64 %lnb3F, i64* %lnb3G, !tbaa !2
  %lnb3H = load i64*, i64** %Sp_Var
  %lnb3I = getelementptr inbounds i64, i64* %lnb3H, i32 1
  %lnb3J = ptrtoint i64* %lnb3I to i64
  %lnb3K = inttoptr i64 %lnb3J to i64*
  store i64* %lnb3K, i64** %Sp_Var
  %lnb3L = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caJv$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3M = load i64*, i64** %Sp_Var
  %lnb3N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3L( i64* %Base_Arg, i64* %lnb3M, i64* %Hp_Arg, i64 %lnb3N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caN6:
  %lnb3P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN4_info$def to i64
  %lnb3O = load i64*, i64** %Sp_Var
  %lnb3Q = getelementptr inbounds i64, i64* %lnb3O, i32 -1
  store i64 %lnb3P, i64* %lnb3Q, !tbaa !2
  %lnb3T = load i64, i64* %R1_Var
  %lnb3U = add i64 %lnb3T, 14
  %lnb3V = inttoptr i64 %lnb3U to i64*
  %lnb3W = load i64, i64* %lnb3V, !tbaa !4
  store i64 %lnb3W, i64* %ls5iB
  %lnb3Z = load i64, i64* %R1_Var
  %lnb40 = add i64 %lnb3Z, 6
  %lnb41 = inttoptr i64 %lnb40 to i64*
  %lnb42 = load i64, i64* %lnb41, !tbaa !4
  store i64 %lnb42, i64* %R1_Var
  %lnb44 = load i64, i64* %ls5iB
  %lnb43 = load i64*, i64** %Sp_Var
  %lnb45 = getelementptr inbounds i64, i64* %lnb43, i32 0
  store i64 %lnb44, i64* %lnb45, !tbaa !2
  %lnb46 = load i64*, i64** %Sp_Var
  %lnb47 = getelementptr inbounds i64, i64* %lnb46, i32 -1
  %lnb48 = ptrtoint i64* %lnb47 to i64
  %lnb49 = inttoptr i64 %lnb48 to i64*
  store i64* %lnb49, i64** %Sp_Var
  %lnb4a = load i64, i64* %R1_Var
  %lnb4b = and i64 %lnb4a, 7
  %lnb4c = icmp ne i64 %lnb4b, 0
  br i1 %lnb4c, label %uaOR, label %caN7
caN7:
  %lnb4e = load i64, i64* %R1_Var
  %lnb4f = inttoptr i64 %lnb4e to i64*
  %lnb4g = load i64, i64* %lnb4f, !tbaa !4
  %lnb4h = inttoptr i64 %lnb4g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4i = load i64*, i64** %Sp_Var
  %lnb4j = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4h( i64* %Base_Arg, i64* %lnb4i, i64* %Hp_Arg, i64 %lnb4j, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOR:
  %lnb4k = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4l = load i64*, i64** %Sp_Var
  %lnb4m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4k( i64* %Base_Arg, i64* %lnb4l, i64* %Hp_Arg, i64 %lnb4m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caN4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN4_info$def to i8*)
define internal ghccc void @caN4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_uaPe_srt_struct* @_uaPe_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN4_info$def to i64)) to i32),i32 0)}>
{
nb4n:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caN4
caN4:
  %lnb4p = load i64*, i64** %Sp_Var
  %lnb4q = getelementptr inbounds i64, i64* %lnb4p, i32 1
  %lnb4r = bitcast i64* %lnb4q to i64*
  %lnb4s = load i64, i64* %lnb4r, !tbaa !2
  %lnb4o = load i64*, i64** %Sp_Var
  %lnb4t = getelementptr inbounds i64, i64* %lnb4o, i32 1
  store i64 %lnb4s, i64* %lnb4t, !tbaa !2
  %lnb4u = load i64*, i64** %Sp_Var
  %lnb4v = getelementptr inbounds i64, i64* %lnb4u, i32 1
  %lnb4w = ptrtoint i64* %lnb4v to i64
  %lnb4x = inttoptr i64 %lnb4w to i64*
  store i64* %lnb4x, i64** %Sp_Var
  %lnb4y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caMR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4z = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4y( i64* %Base_Arg, i64* %lnb4z, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_mainzuloop_closure_struct = type <{i64, i64}>
@Main_mainzuloop_closure$def = internal global %Main_mainzuloop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i64), i64 0}>
@Main_mainzuloop_closure = alias i8, bitcast (%Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i8*)
@Main_mainzuloop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i8*)
define ghccc void @Main_mainzuloop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934597, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i64)) to i32),i32 0)}>
{
nb4O:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cb4H
cb4H:
  %lnb4P = load i64*, i64** %Sp_Var
  %lnb4Q = getelementptr inbounds i64, i64* %lnb4P, i32 -1
  %lnb4R = ptrtoint i64* %lnb4Q to i64
  %lnb4S = icmp ult i64 %lnb4R, %SpLim_Arg
  %lnb4T = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb4S, i1 0 )
  br i1 %lnb4T, label %cb4I, label %cb4J
cb4J:
  %lnb4V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb4E_info$def to i64
  %lnb4U = load i64*, i64** %Sp_Var
  %lnb4W = getelementptr inbounds i64, i64* %lnb4U, i32 -1
  store i64 %lnb4V, i64* %lnb4W, !tbaa !2
  %lnb4X = load i64, i64* %R2_Var
  store i64 %lnb4X, i64* %R1_Var
  %lnb4Y = load i64*, i64** %Sp_Var
  %lnb4Z = getelementptr inbounds i64, i64* %lnb4Y, i32 -1
  %lnb50 = ptrtoint i64* %lnb4Z to i64
  %lnb51 = inttoptr i64 %lnb50 to i64*
  store i64* %lnb51, i64** %Sp_Var
  %lnb52 = load i64, i64* %R1_Var
  %lnb53 = and i64 %lnb52, 7
  %lnb54 = icmp ne i64 %lnb53, 0
  br i1 %lnb54, label %ub4N, label %cb4F
cb4F:
  %lnb56 = load i64, i64* %R1_Var
  %lnb57 = inttoptr i64 %lnb56 to i64*
  %lnb58 = load i64, i64* %lnb57, !tbaa !4
  %lnb59 = inttoptr i64 %lnb58 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5a = load i64*, i64** %Sp_Var
  %lnb5b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb59( i64* %Base_Arg, i64* %lnb5a, i64* %Hp_Arg, i64 %lnb5b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub4N:
  %lnb5c = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb4E_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5d = load i64*, i64** %Sp_Var
  %lnb5e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5c( i64* %Base_Arg, i64* %lnb5d, i64* %Hp_Arg, i64 %lnb5e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb4I:
  %lnb5f = load i64, i64* %R2_Var
  store i64 %lnb5f, i64* %R2_Var
  %lnb5g = ptrtoint %Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i64
  store i64 %lnb5g, i64* %R1_Var
  %lnb5h = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnb5i = bitcast i64* %lnb5h to i64*
  %lnb5j = load i64, i64* %lnb5i, !tbaa !5
  %lnb5k = inttoptr i64 %lnb5j to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5l = load i64*, i64** %Sp_Var
  %lnb5m = load i64, i64* %R1_Var
  %lnb5n = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5k( i64* %Base_Arg, i64* %lnb5l, i64* %Hp_Arg, i64 %lnb5m, i64 %lnb5n, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb4E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb4E_info$def to i8*)
define internal ghccc void @cb4E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb4E_info$def to i64)) to i32),i32 0)}>
{
nb5o:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb4E
cb4E:
  %lnb5p = add i64 %R1_Arg, 7
  %lnb5q = inttoptr i64 %lnb5p to i64*
  %lnb5r = load i64, i64* %lnb5q, !tbaa !4
  store i64 %lnb5r, i64* %R2_Var
  %lnb5s = load i64*, i64** %Sp_Var
  %lnb5t = getelementptr inbounds i64, i64* %lnb5s, i32 1
  %lnb5u = ptrtoint i64* %lnb5t to i64
  %lnb5v = inttoptr i64 %lnb5u to i64*
  store i64* %lnb5v, i64** %Sp_Var
  %lnb5w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5x = load i64*, i64** %Sp_Var
  %lnb5y = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5w( i64* %Base_Arg, i64* %lnb5x, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb5y, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)
@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)) to i32),i32 0)}>
{
nb5G:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cb5D
cb5D:
  store i64 200, i64* %R2_Var
  %lnb5H = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5I = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5H( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb5I, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)
@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)) to i32),i32 0)}>
{
nb5Q:
  br label %cb5N
cb5N:
  %lnb5R = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5R( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main2_closure_struct = type <{i64, i64, i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)
@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
nb5Z:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cb5W
cb5W:
  %lnb60 = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %lnb61 = add i64 %lnb60, 1
  store i64 %lnb61, i64* %R2_Var
  %lnb62 = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb63 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb62( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb63, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)
@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)) to i32),i32 0)}>
{
nb6b:
  br label %cb68
cb68:
  %lnb6c = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6c( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ib6e_str_struct = type <{[13 x i8]}>
@ib6e_str$def = internal constant %ib6e_str_struct<{[13 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 80, i8 122, i8 0]}>, align 1
@ib6e_str = internal alias i8, bitcast (%ib6e_str_struct* @ib6e_str$def to i8*)
@Main_Pzz_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Pzz_con_info$def to i8*)
define ghccc void @Main_Pzz_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ib6e_str_struct* @ib6e_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Pzz_con_info$def to i64)),i64 0), i64 4294967296, i32 3, i32 0}>
{
nb6f:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb6d
cb6d:
  %lnb6h = load i64, i64* %R1_Var
  %lnb6i = add i64 %lnb6h, 1
  store i64 %lnb6i, i64* %R1_Var
  %lnb6j = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnb6k = bitcast i64* %lnb6j to i64*
  %lnb6l = load i64, i64* %lnb6k, !tbaa !2
  %lnb6m = inttoptr i64 %lnb6l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb6n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ib6p_str_struct = type <{[14 x i8]}>
@ib6p_str$def = internal constant %ib6p_str_struct<{[14 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 58, i8 43, i8 58, i8 0]}>, align 1
@ib6p_str = internal alias i8, bitcast (%ib6p_str_struct* @ib6p_str$def to i8*)
@Main_ZCzpZC_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ZCzpZC_con_info$def to i8*)
define ghccc void @Main_ZCzpZC_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ib6p_str_struct* @ib6p_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ZCzpZC_con_info$def to i64)),i64 0), i64 2, i32 4, i32 1}>
{
nb6q:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb6o
cb6o:
  %lnb6s = load i64, i64* %R1_Var
  %lnb6t = add i64 %lnb6s, 2
  store i64 %lnb6t, i64* %R1_Var
  %lnb6u = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnb6v = bitcast i64* %lnb6u to i64*
  %lnb6w = load i64, i64* %lnb6v, !tbaa !2
  %lnb6x = inttoptr i64 %lnb6w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6x( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb6y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@stg_SRT_2_info = external global i8
@base_GHCziErr_errorWithoutStackTrace_closure = external global i8
@base_TextziRead_readEither5_closure = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziErr_errorWithoutStackTrace_info = external global i8
@ghczmbignum_GHCziNumziInteger_IS_con_info = external global i8
@base_TextziRead_readEither2_closure = external global i8
@ghczmprim_GHCziCString_unpackCStringzh_info = external global i8
@base_GHCziIO_mkUserError_closure = external global i8
@base_GHCziIO_mkUserError_info = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_KindRepVar_con_info = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@base_ControlziExceptionziBase_patError_info = external global i8
@base_ControlziExceptionziBase_patError_closure = external global i8
@base_ControlziExceptionziBase_absentError_info = external global i8
@base_ControlziExceptionziBase_absentError_closure = external global i8
@stg_upd_frame_info = external global i8
@stg_gc_unpt_r1 = external global i8
@base_GHCziList_zdwunsafeTake_info = external global i8
@base_GHCziStackziTypes_SrcLoc_con_info = external global i8
@stg_INTLIKE_closure = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@ghczmprim_GHCziTypes_TyCon_con_info = external global i8
@ghczmprim_GHCziTypes_krepzdztArrzt_closure = external global i8
@ghczmprim_GHCziTypes_KindRepTyConApp_con_info = external global i8
@ghczmprim_GHCziTypes_KindRepFun_con_info = external global i8
@base_GHCziStackziTypes_PushCallStack_con_info = external global i8
@base_GHCziStackziTypes_EmptyCallStack_closure = external global i8
@base_GHCziErr_error_closure = external global i8
@base_GHCziErr_error_info = external global i8
@base_ControlziExceptionziBase_noMethodBindingError_info = external global i8
@base_ControlziExceptionziBase_noMethodBindingError_closure = external global i8
@base_GHCziReal_zdp1Fractional_info = external global i8
@stg_ap_0_fast = external global i8
@stg_ap_pp_info = external global i8
@base_GHCziNum_zt_info = external global i8
@base_GHCziReal_zdfFractionalRatiozuzdszdczt_info = external global i8
@base_GHCziReal_zdfFractionalRatiozuzdszdczt_closure = external global i8
@stg_ap_p_info = external global i8
@base_GHCziNum_negate_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerNegate_closure = external global i8
@ghczmbignum_GHCziNumziInteger_integerNegate_info = external global i8
@base_GHCziReal_ZCzv_con_info = external global i8
@base_GHCziNum_zp_info = external global i8
@base_GHCziReal_zdfEnumRatiozuzdszdczp_info = external global i8
@base_GHCziReal_zdfEnumRatiozuzdszdczp_closure = external global i8
@base_GHCziNum_fromInteger_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerEqzh_info = external global i8
@stg_gc_unbx_r1 = external global i8
@base_GHCziReal_zdfEnumRatio1_closure = external global i8
@ghczmprim_GHCziClasses_zeze_info = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@ghczmprim_GHCziTypes_False_closure = external global i8
@ghczmprim_GHCziClasses_CZCEq_con_info = external global i8
@base_GHCziReal_zdwzdszdczs_closure = external global i8
@base_GHCziReal_zdwzdszdczs_info = external global i8
@stg_gc_pp = external global i8
@base_GHCziReal_zs_info = external global i8
@stg_ap_pp_fast = external global i8
@base_GHCziShow_zdfShowIntegerzuzdcshowList_info = external global i8
@base_GHCziShow_zdfShowIntegerzuzdcshowList_closure = external global i8
@base_GHCziShow_showList_info = external global i8
@base_GHCziShow_showListzuzu_info = external global i8
@base_GHCziShow_CZCShow_con_info = external global i8
@stg_gc_noregs = external global i8
@base_GHCziNum_CZCNum_con_info = external global i8
@base_GHCziReal_CZCFractional_con_info = external global i8
@base_GHCziReal_zdwzdszdczp_closure = external global i8
@base_GHCziReal_zdwzdszdczp_info = external global i8
@base_GHCziReal_zdfFractionalRatiozuzdszdczs_closure = external global i8
@base_GHCziReal_zdfFractionalRatiozuzdszdczs_info = external global i8
@stg_SRT_3_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerQuot_closure = external global i8
@ghczmbignum_GHCziNumziInteger_integerRem_closure = external global i8
@ghczmbignum_GHCziNumziInteger_integerRem_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerQuot_info = external global i8
@base_GHCziFloat_CZCFloating_con_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerCompare_info = external global i8
@base_GHCziRead_zdfReadIntzuzdsreadNumber_closure = external global i8
@base_GHCziRead_zdfReadInt2_closure = external global i8
@base_TextziRead_readEither7_closure = external global i8
@base_TextziParserCombinatorsziReadPrec_minPrec_closure = external global i8
@base_GHCziRead_zdfReadIntzuzdsreadNumber_info = external global i8
@ghczmbignum_GHCziNumziInteger_integerAdd_closure = external global i8
@stg_SRT_9_info = external global i8
@base_SystemziEnvironment_getArgs2_closure = external global i8
@ghczmbignum_GHCziNumziInteger_integerAdd_info = external global i8
@base_ForeignziMarshalziAlloc_zdwallocaBytesAligned_info = external global i8
@stg_raiseIOzh = external global i8
@base_TextziParserCombinatorsziReadP_run_info = external global i8
@base_TextziRead_readEither8_info = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@llvm.used = appending constant [211 x i8*] [i8* bitcast (%ib6p_str_struct* @ib6p_str$def to i8*), i8* bitcast (%ib6e_str_struct* @ib6e_str$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i8*), i8* bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*), i8* bitcast (%_uaPe_srt_struct* @_uaPe_srt$def to i8*), i8* bitcast (%_uaPd_srt_struct* @_uaPd_srt$def to i8*), i8* bitcast (%_uaPc_srt_struct* @_uaPc_srt$def to i8*), i8* bitcast (%_uaPb_srt_struct* @_uaPb_srt$def to i8*), i8* bitcast (%_uaPa_srt_struct* @_uaPa_srt$def to i8*), i8* bitcast (%_uaP9_srt_struct* @_uaP9_srt$def to i8*), i8* bitcast (%_uaP8_srt_struct* @_uaP8_srt$def to i8*), i8* bitcast (%_uaP7_srt_struct* @_uaP7_srt$def to i8*), i8* bitcast (%_uaP6_srt_struct* @_uaP6_srt$def to i8*), i8* bitcast (%_uaP5_srt_struct* @_uaP5_srt$def to i8*), i8* bitcast (%_uaP4_srt_struct* @_uaP4_srt$def to i8*), i8* bitcast (%r55b_closure_struct* @r55b_closure$def to i8*), i8* bitcast (%_uaIE_srt_struct* @_uaIE_srt$def to i8*), i8* bitcast (%Main_zdszc_closure_struct* @Main_zdszc_closure$def to i8*), i8* bitcast (%_uaGR_srt_struct* @_uaGR_srt$def to i8*), i8* bitcast (%Main_zdszc1_closure_struct* @Main_zdszc1_closure$def to i8*), i8* bitcast (%r55c_bytes_struct* @r55c_bytes$def to i8*), i8* bitcast (%Main_zdfFloatingPs_closure_struct* @Main_zdfFloatingPs_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdcsqrt_closure_struct* @Main_zdfFloatingPszuzdcsqrt_closure$def to i8*), i8* bitcast (%_uaeg_srt_struct* @_uaeg_srt$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdszdcsqrt_closure_struct* @Main_zdfFloatingPszuzdszdcsqrt_closure$def to i8*), i8* bitcast (%_ua18_srt_struct* @_ua18_srt$def to i8*), i8* bitcast (%_ua17_srt_struct* @_ua17_srt$def to i8*), i8* bitcast (%_ua16_srt_struct* @_ua16_srt$def to i8*), i8* bitcast (%r55G_closure_struct* @r55G_closure$def to i8*), i8* bitcast (%Main_zdszczuf_closure_struct* @Main_zdszczuf_closure$def to i8*), i8* bitcast (%_u9Vx_srt_struct* @_u9Vx_srt$def to i8*), i8* bitcast (%_u9Vw_srt_struct* @_u9Vw_srt$def to i8*), i8* bitcast (%_u9Vv_srt_struct* @_u9Vv_srt$def to i8*), i8* bitcast (%r55h_closure_struct* @r55h_closure$def to i8*), i8* bitcast (%_u9QZ_srt_struct* @_u9QZ_srt$def to i8*), i8* bitcast (%Main_zdseven1_closure_struct* @Main_zdseven1_closure$def to i8*), i8* bitcast (%Main_sinx_closure_struct* @Main_sinx_closure$def to i8*), i8* bitcast (%Main_cosx_closure_struct* @Main_cosx_closure$def to i8*), i8* bitcast (%Main_expx_closure_struct* @Main_expx_closure$def to i8*), i8* bitcast (%Main_integral_closure_struct* @Main_integral_closure$def to i8*), i8* bitcast (%Main_zdwintegral_closure_struct* @Main_zdwintegral_closure$def to i8*), i8* bitcast (%r55Z_closure_struct* @r55Z_closure$def to i8*), i8* bitcast (%_u9pt_srt_struct* @_u9pt_srt$def to i8*), i8* bitcast (%Main_cosxzuzdscosx_closure_struct* @Main_cosxzuzdscosx_closure$def to i8*), i8* bitcast (%r55C_closure_struct* @r55C_closure$def to i8*), i8* bitcast (%Main_sinx2_closure_struct* @Main_sinx2_closure$def to i8*), i8* bitcast (%r55D_closure_struct* @r55D_closure$def to i8*), i8* bitcast (%Main_sinx1_closure_struct* @Main_sinx1_closure$def to i8*), i8* bitcast (%_u9mP_srt_struct* @_u9mP_srt$def to i8*), i8* bitcast (%_u9mO_srt_struct* @_u9mO_srt$def to i8*), i8* bitcast (%_u9mN_srt_struct* @_u9mN_srt$def to i8*), i8* bitcast (%Main_integralzuint1_closure_struct* @Main_integralzuint1_closure$def to i8*), i8* bitcast (%Main_deriv_closure_struct* @Main_deriv_closure$def to i8*), i8* bitcast (%Main_derivzuderiv1_closure_struct* @Main_derivzuderiv1_closure$def to i8*), i8* bitcast (%Main_revert_closure_struct* @Main_revert_closure$def to i8*), i8* bitcast (%Main_zdwrevert_closure_struct* @Main_zdwrevert_closure$def to i8*), i8* bitcast (%_u8Gt_srt_struct* @_u8Gt_srt$def to i8*), i8* bitcast (%_u8Gs_srt_struct* @_u8Gs_srt$def to i8*), i8* bitcast (%Main_revertzuzdsrevert_closure_struct* @Main_revertzuzdsrevert_closure$def to i8*), i8* bitcast (%_u8ta_srt_struct* @_u8ta_srt$def to i8*), i8* bitcast (%_u8t9_srt_struct* @_u8t9_srt$def to i8*), i8* bitcast (%_u8t8_srt_struct* @_u8t8_srt$def to i8*), i8* bitcast (%_u8t7_srt_struct* @_u8t7_srt$def to i8*), i8* bitcast (%Main_zdfFractionalPs_closure_struct* @Main_zdfFractionalPs_closure$def to i8*), i8* bitcast (%Main_zdfFractionalPszuzdcrecip_closure_struct* @Main_zdfFractionalPszuzdcrecip_closure$def to i8*), i8* bitcast (%Main_compose_closure_struct* @Main_compose_closure$def to i8*), i8* bitcast (%Main_zdfFractionalPszuzdcp1Fractional_closure_struct* @Main_zdfFractionalPszuzdcp1Fractional_closure$def to i8*), i8* bitcast (%Main_zdfNumPs_closure_struct* @Main_zdfNumPs_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdczt_closure_struct* @Main_zdfNumPszuzdczt_closure$def to i8*), i8* bitcast (%Main_x_closure_struct* @Main_x_closure$def to i8*), i8* bitcast (%Main_ts1_closure_struct* @Main_ts1_closure$def to i8*), i8* bitcast (%Main_ts_closure_struct* @Main_ts_closure$def to i8*), i8* bitcast (%_u7PG_srt_struct* @_u7PG_srt$def to i8*), i8* bitcast (%Main_forest_closure_struct* @Main_forest_closure$def to i8*), i8* bitcast (%Main_tree_closure_struct* @Main_tree_closure$def to i8*), i8* bitcast (%_u7OK_srt_struct* @_u7OK_srt$def to i8*), i8* bitcast (%Main_list_closure_struct* @Main_list_closure$def to i8*), i8* bitcast (%Main_composezuzdscompose_closure_struct* @Main_composezuzdscompose_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdszdczt_closure_struct* @Main_zdfNumPszuzdszdczt_closure$def to i8*), i8* bitcast (%_u7y7_srt_struct* @_u7y7_srt$def to i8*), i8* bitcast (%Main_xzuzdsx_closure_struct* @Main_xzuzdsx_closure$def to i8*), i8* bitcast (%Main_zdszc2_closure_struct* @Main_zdszc2_closure$def to i8*), i8* bitcast (%Main_zdszc3_closure_struct* @Main_zdszc3_closure$def to i8*), i8* bitcast (%Main_zdfFractionalPs2_closure_struct* @Main_zdfFractionalPs2_closure$def to i8*), i8* bitcast (%Main_zdfShowPs_closure_struct* @Main_zdfShowPs_closure$def to i8*), i8* bitcast (%Main_zdfShowPszuzdcshow_closure_struct* @Main_zdfShowPszuzdcshow_closure$def to i8*), i8* bitcast (%r55A_closure_struct* @r55A_closure$def to i8*), i8* bitcast (%Main_zdfShowPszuzdcshowList_closure_struct* @Main_zdfShowPszuzdcshowList_closure$def to i8*), i8* bitcast (%Main_zdfShowPszuzdcshowsPrec_closure_struct* @Main_zdfShowPszuzdcshowsPrec_closure$def to i8*), i8* bitcast (%Main_zdfShowPs1_closure_struct* @Main_zdfShowPs1_closure$def to i8*), i8* bitcast (%Main_zdfShowPs2_closure_struct* @Main_zdfShowPs2_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdclogBase_closure_struct* @Main_zdfFloatingPszuzdclogBase_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdctan_closure_struct* @Main_zdfFloatingPszuzdctan_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdctanh_closure_struct* @Main_zdfFloatingPszuzdctanh_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdczs_closure_struct* @Main_zdfFloatingPszuzdczs_closure$def to i8*), i8* bitcast (%_u738_srt_struct* @_u738_srt$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdszdczs_closure_struct* @Main_zdfFloatingPszuzdszdczs_closure$def to i8*), i8* bitcast (%Main_zdfEqPs_closure_struct* @Main_zdfEqPs_closure$def to i8*), i8* bitcast (%Main_zdfEqPszuzdczsze_closure_struct* @Main_zdfEqPszuzdczsze_closure$def to i8*), i8* bitcast (%Main_zdfEqPszuzdczeze_closure_struct* @Main_zdfEqPszuzdczeze_closure$def to i8*), i8* bitcast (%Main_integral1_closure_struct* @Main_integral1_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdcfromInteger_closure_struct* @Main_zdfNumPszuzdcfromInteger_closure$def to i8*), i8* bitcast (%Main_zdfNumPs1_closure_struct* @Main_zdfNumPs1_closure$def to i8*), i8* bitcast (%r55g_closure_struct* @r55g_closure$def to i8*), i8* bitcast (%Main_zdfNumPs2_bytes_struct* @Main_zdfNumPs2_bytes$def to i8*), i8* bitcast (%r55f_closure_struct* @r55f_closure$def to i8*), i8* bitcast (%Main_zdfNumPs3_bytes_struct* @Main_zdfNumPs3_bytes$def to i8*), i8* bitcast (%Main_zdfNumPszuzdszdczp_closure_struct* @Main_zdfNumPszuzdszdczp_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdczm_closure_struct* @Main_zdfNumPszuzdczm_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdczp_closure_struct* @Main_zdfNumPszuzdczp_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdszdcnegate_closure_struct* @Main_zdfNumPszuzdszdcnegate_closure$def to i8*), i8* bitcast (%Main_zdfNumPszuzdcnegate_closure_struct* @Main_zdfNumPszuzdcnegate_closure$def to i8*), i8* bitcast (%Main_ziztzuzdszizt_closure_struct* @Main_ziztzuzdszizt_closure$def to i8*), i8* bitcast (%Main_zizt_closure_struct* @Main_zizt_closure$def to i8*), i8* bitcast (%r55z_closure_struct* @r55z_closure$def to i8*), i8* bitcast (%Main_zdfFractionalPs1_bytes_struct* @Main_zdfFractionalPs1_bytes$def to i8*), i8* bitcast (%r55U_closure_struct* @r55U_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs1_bytes_struct* @Main_zdfFloatingPs1_bytes$def to i8*), i8* bitcast (%r55T_closure_struct* @r55T_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs2_bytes_struct* @Main_zdfFloatingPs2_bytes$def to i8*), i8* bitcast (%r55S_closure_struct* @r55S_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs3_bytes_struct* @Main_zdfFloatingPs3_bytes$def to i8*), i8* bitcast (%r55L_closure_struct* @r55L_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs4_bytes_struct* @Main_zdfFloatingPs4_bytes$def to i8*), i8* bitcast (%r55K_closure_struct* @r55K_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs5_bytes_struct* @Main_zdfFloatingPs5_bytes$def to i8*), i8* bitcast (%r55R_closure_struct* @r55R_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs6_bytes_struct* @Main_zdfFloatingPs6_bytes$def to i8*), i8* bitcast (%r55Q_closure_struct* @r55Q_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs7_bytes_struct* @Main_zdfFloatingPs7_bytes$def to i8*), i8* bitcast (%r55P_closure_struct* @r55P_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs8_bytes_struct* @Main_zdfFloatingPs8_bytes$def to i8*), i8* bitcast (%r55N_closure_struct* @r55N_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs9_bytes_struct* @Main_zdfFloatingPs9_bytes$def to i8*), i8* bitcast (%r55M_closure_struct* @r55M_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs10_bytes_struct* @Main_zdfFloatingPs10_bytes$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdclog1mexp_closure_struct* @Main_zdfFloatingPszuzdclog1mexp_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdclog1pexp_closure_struct* @Main_zdfFloatingPszuzdclog1pexp_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdclog1p_closure_struct* @Main_zdfFloatingPszuzdclog1p_closure$def to i8*), i8* bitcast (%r55J_closure_struct* @r55J_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs11_bytes_struct* @Main_zdfFloatingPs11_bytes$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdcztzt_closure_struct* @Main_zdfFloatingPszuzdcztzt_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPszuzdcexpm1_closure_struct* @Main_zdfFloatingPszuzdcexpm1_closure$def to i8*), i8* bitcast (%r55I_closure_struct* @r55I_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs12_bytes_struct* @Main_zdfFloatingPs12_bytes$def to i8*), i8* bitcast (%r55O_closure_struct* @r55O_closure$def to i8*), i8* bitcast (%Main_zdfFloatingPs13_bytes_struct* @Main_zdfFloatingPs13_bytes$def to i8*), i8* bitcast (%Main_extract_closure_struct* @Main_extract_closure$def to i8*), i8* bitcast (%Main_zdwextract_closure_struct* @Main_zdwextract_closure$def to i8*), i8* bitcast (%r55x_closure_struct* @r55x_closure$def to i8*), i8* bitcast (%r55j_closure_struct* @r55j_closure$def to i8*), i8* bitcast (%r55i_bytes_struct* @r55i_bytes$def to i8*), i8* bitcast (%r55y_closure_struct* @r55y_closure$def to i8*), i8* bitcast (%r55w_closure_struct* @r55w_closure$def to i8*), i8* bitcast (%_u5D9_srt_struct* @_u5D9_srt$def to i8*), i8* bitcast (%r55u_closure_struct* @r55u_closure$def to i8*), i8* bitcast (%r55l_closure_struct* @r55l_closure$def to i8*), i8* bitcast (%r55k_bytes_struct* @r55k_bytes$def to i8*), i8* bitcast (%Main_zdtczqZCzpZC_closure_struct* @Main_zdtczqZCzpZC_closure$def to i8*), i8* bitcast (%Main_zdtczqPzz_closure_struct* @Main_zdtczqPzz_closure$def to i8*), i8* bitcast (%Main_zdtczqZCzpZC1_closure_struct* @Main_zdtczqZCzpZC1_closure$def to i8*), i8* bitcast (%r55X_closure_struct* @r55X_closure$def to i8*), i8* bitcast (%Main_zdtczqPzz1_closure_struct* @Main_zdtczqPzz1_closure$def to i8*), i8* bitcast (%Main_zdtcPs_closure_struct* @Main_zdtcPs_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%r55t_closure_struct* @r55t_closure$def to i8*), i8* bitcast (%r55m_closure_struct* @r55m_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%r55n_closure_struct* @r55n_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%r55p_closure_struct* @r55p_closure$def to i8*), i8* bitcast (%r55o_bytes_struct* @r55o_bytes$def to i8*), i8* bitcast (%r55v_bytes_struct* @r55v_bytes$def to i8*), i8* bitcast (%Main_takePs_closure_struct* @Main_takePs_closure$def to i8*), i8* bitcast (%Main_toList_closure_struct* @Main_toList_closure$def to i8*), i8* bitcast (%Main_zdwtoList_closure_struct* @Main_zdwtoList_closure$def to i8*), i8* bitcast (%Main_revert4_closure_struct* @Main_revert4_closure$def to i8*), i8* bitcast (%Main_revert1_closure_struct* @Main_revert1_closure$def to i8*), i8* bitcast (%r55B_bytes_struct* @r55B_bytes$def to i8*), i8* bitcast (%Main_revert2_closure_struct* @Main_revert2_closure$def to i8*), i8* bitcast (%Main_revert3_bytes_struct* @Main_revert3_bytes$def to i8*), i8* bitcast (%r55H_closure_struct* @r55H_closure$def to i8*), i8* bitcast (%r55F_closure_struct* @r55F_closure$def to i8*), i8* bitcast (%r55E_bytes_struct* @r55E_bytes$def to i8*), i8* bitcast (%r55W_closure_struct* @r55W_closure$def to i8*), i8* bitcast (%r55V_closure_struct* @r55V_closure$def to i8*), i8* bitcast (%Main_zdtcPs1_closure_struct* @Main_zdtcPs1_closure$def to i8*), i8* bitcast (%Main_zdtcPs2_bytes_struct* @Main_zdtcPs2_bytes$def to i8*), i8* bitcast (%Main_zdtczqPzz2_closure_struct* @Main_zdtczqPzz2_closure$def to i8*), i8* bitcast (%Main_zdtczqPzz3_bytes_struct* @Main_zdtczqPzz3_bytes$def to i8*), i8* bitcast (%Main_zdtczqZCzpZC2_closure_struct* @Main_zdtczqZCzpZC2_closure$def to i8*), i8* bitcast (%Main_zdtczqZCzpZC3_bytes_struct* @Main_zdtczqZCzpZC3_bytes$def to i8*), i8* bitcast (%Main_rnfListOfRational_closure_struct* @Main_rnfListOfRational_closure$def to i8*), i8* bitcast (%r55Y_closure_struct* @r55Y_closure$def to i8*), i8* bitcast (%r562_closure_struct* @r562_closure$def to i8*), i8* bitcast (%_u5n7_srt_struct* @_u5n7_srt$def to i8*), i8* bitcast (%r561_closure_struct* @r561_closure$def to i8*), i8* bitcast (%r560_bytes_struct* @r560_bytes$def to i8*), i8* bitcast (%r563_closure_struct* @r563_closure$def to i8*), i8* bitcast (%_u5lo_srt_struct* @_u5lo_srt$def to i8*), i8* bitcast (%r564_closure_struct* @r564_closure$def to i8*), i8* bitcast (%r565_closure_struct* @r565_closure$def to i8*), i8* bitcast (%_u5kw_srt_struct* @_u5kw_srt$def to i8*), i8* bitcast (%Main_Pzz_closure_struct* @Main_Pzz_closure$def to i8*), i8* bitcast (%Main_ZCzpZC_closure_struct* @Main_ZCzpZC_closure$def to i8*)], section "llvm.metadata"
