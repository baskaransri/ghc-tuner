target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"
declare ccc i8* @memcpy$def(i8*, i8*, i64)
declare ccc i8* @memmove$def(i8*, i8*, i64)
declare ccc i8* @memset$def(i8*, i64, i64)
declare ccc i64 @newSpark$def(i8*, i8*)
!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}

%Main_Point_closure_struct = type <{i64}>
@Main_Point_closure$def = internal global %Main_Point_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Point_info$def to i64)}>
@Main_Point_closure = alias i8, bitcast (%Main_Point_closure_struct* @Main_Point_closure$def to i8*)
@Main_Point_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Point_info$def to i8*)
define internal ghccc void @Main_Point_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n7Z8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7Z3
c7Z3:
  %ln7Z9 = load i64*, i64** %Hp_Var
  %ln7Za = getelementptr inbounds i64, i64* %ln7Z9, i32 3
  %ln7Zb = ptrtoint i64* %ln7Za to i64
  %ln7Zc = inttoptr i64 %ln7Zb to i64*
  store i64* %ln7Zc, i64** %Hp_Var
  %ln7Zd = load i64*, i64** %Hp_Var
  %ln7Ze = ptrtoint i64* %ln7Zd to i64
  %ln7Zf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln7Zg = bitcast i64* %ln7Zf to i64*
  %ln7Zh = load i64, i64* %ln7Zg, !tbaa !5
  %ln7Zi = icmp ugt i64 %ln7Ze, %ln7Zh
  %ln7Zk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln7Zi, i1 0 )
  br i1 %ln7Zk, label %c7Z7, label %c7Z6
c7Z6:
  %ln7Zm = ptrtoint i8* @Main_Point_con_info to i64
  %ln7Zl = load i64*, i64** %Hp_Var
  %ln7Zn = getelementptr inbounds i64, i64* %ln7Zl, i32 -2
  store i64 %ln7Zm, i64* %ln7Zn, !tbaa !3
  %ln7Zp = load i64, i64* %R2_Var
  %ln7Zo = load i64*, i64** %Hp_Var
  %ln7Zq = getelementptr inbounds i64, i64* %ln7Zo, i32 -1
  store i64 %ln7Zp, i64* %ln7Zq, !tbaa !3
  %ln7Zs = load i64, i64* %R3_Var
  %ln7Zr = load i64*, i64** %Hp_Var
  %ln7Zt = getelementptr inbounds i64, i64* %ln7Zr, i32 0
  store i64 %ln7Zs, i64* %ln7Zt, !tbaa !3
  %ln7Zv = load i64*, i64** %Hp_Var
  %ln7Zw = ptrtoint i64* %ln7Zv to i64
  %ln7Zx = add i64 %ln7Zw, -14
  store i64 %ln7Zx, i64* %R1_Var
  %ln7Zy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln7Zz = bitcast i64* %ln7Zy to i64*
  %ln7ZA = load i64, i64* %ln7Zz, !tbaa !2
  %ln7ZB = inttoptr i64 %ln7ZA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7ZC = load i64*, i64** %Hp_Var
  %ln7ZD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ZB( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7ZC, i64 %ln7ZD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7Z7:
  %ln7ZE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln7ZE, !tbaa !5
  %ln7ZF = load i64, i64* %R3_Var
  store i64 %ln7ZF, i64* %R3_Var
  %ln7ZG = load i64, i64* %R2_Var
  store i64 %ln7ZG, i64* %R2_Var
  %ln7ZH = ptrtoint %Main_Point_closure_struct* @Main_Point_closure$def to i64
  store i64 %ln7ZH, i64* %R1_Var
  %ln7ZI = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln7ZJ = bitcast i64* %ln7ZI to i64*
  %ln7ZK = load i64, i64* %ln7ZJ, !tbaa !5
  %ln7ZL = inttoptr i64 %ln7ZK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln7ZM = load i64*, i64** %Hp_Var
  %ln7ZN = load i64, i64* %R1_Var
  %ln7ZO = load i64, i64* %R2_Var
  %ln7ZP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln7ZL( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln7ZM, i64 %ln7ZN, i64 %ln7ZO, i64 %ln7ZP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)
%Main_Directional_closure_struct = type <{i64}>
@Main_Directional_closure$def = internal global %Main_Directional_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Directional_info$def to i64)}>
@Main_Directional_closure = alias i8, bitcast (%Main_Directional_closure_struct* @Main_Directional_closure$def to i8*)
@Main_Directional_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Directional_info$def to i8*)
define internal ghccc void @Main_Directional_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n800:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c7ZV
c7ZV:
  %ln801 = load i64*, i64** %Hp_Var
  %ln802 = getelementptr inbounds i64, i64* %ln801, i32 3
  %ln803 = ptrtoint i64* %ln802 to i64
  %ln804 = inttoptr i64 %ln803 to i64*
  store i64* %ln804, i64** %Hp_Var
  %ln805 = load i64*, i64** %Hp_Var
  %ln806 = ptrtoint i64* %ln805 to i64
  %ln807 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln808 = bitcast i64* %ln807 to i64*
  %ln809 = load i64, i64* %ln808, !tbaa !5
  %ln80a = icmp ugt i64 %ln806, %ln809
  %ln80b = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln80a, i1 0 )
  br i1 %ln80b, label %c7ZZ, label %c7ZY
c7ZY:
  %ln80d = ptrtoint i8* @Main_Directional_con_info to i64
  %ln80c = load i64*, i64** %Hp_Var
  %ln80e = getelementptr inbounds i64, i64* %ln80c, i32 -2
  store i64 %ln80d, i64* %ln80e, !tbaa !3
  %ln80g = load i64, i64* %R2_Var
  %ln80f = load i64*, i64** %Hp_Var
  %ln80h = getelementptr inbounds i64, i64* %ln80f, i32 -1
  store i64 %ln80g, i64* %ln80h, !tbaa !3
  %ln80j = load i64, i64* %R3_Var
  %ln80i = load i64*, i64** %Hp_Var
  %ln80k = getelementptr inbounds i64, i64* %ln80i, i32 0
  store i64 %ln80j, i64* %ln80k, !tbaa !3
  %ln80m = load i64*, i64** %Hp_Var
  %ln80n = ptrtoint i64* %ln80m to i64
  %ln80o = add i64 %ln80n, -15
  store i64 %ln80o, i64* %R1_Var
  %ln80p = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln80q = bitcast i64* %ln80p to i64*
  %ln80r = load i64, i64* %ln80q, !tbaa !2
  %ln80s = inttoptr i64 %ln80r to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80t = load i64*, i64** %Hp_Var
  %ln80u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80s( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln80t, i64 %ln80u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c7ZZ:
  %ln80v = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln80v, !tbaa !5
  %ln80w = load i64, i64* %R3_Var
  store i64 %ln80w, i64* %R3_Var
  %ln80x = load i64, i64* %R2_Var
  store i64 %ln80x, i64* %R2_Var
  %ln80y = ptrtoint %Main_Directional_closure_struct* @Main_Directional_closure$def to i64
  store i64 %ln80y, i64* %R1_Var
  %ln80z = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln80A = bitcast i64* %ln80z to i64*
  %ln80B = load i64, i64* %ln80A, !tbaa !5
  %ln80C = inttoptr i64 %ln80B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln80D = load i64*, i64** %Hp_Var
  %ln80E = load i64, i64* %R1_Var
  %ln80F = load i64, i64* %R2_Var
  %ln80G = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln80C( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln80D, i64 %ln80E, i64 %ln80F, i64 %ln80G, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Body_closure_struct = type <{i64}>
@Main_Body_closure$def = internal global %Main_Body_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Body_info$def to i64)}>
@Main_Body_closure = alias i8, bitcast (%Main_Body_closure_struct* @Main_Body_closure$def to i8*)
@Main_Body_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Body_info$def to i8*)
define internal ghccc void @Main_Body_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n80R:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c80M
c80M:
  %ln80S = load i64*, i64** %Hp_Var
  %ln80T = getelementptr inbounds i64, i64* %ln80S, i32 2
  %ln80U = ptrtoint i64* %ln80T to i64
  %ln80V = inttoptr i64 %ln80U to i64*
  store i64* %ln80V, i64** %Hp_Var
  %ln80W = load i64*, i64** %Hp_Var
  %ln80X = ptrtoint i64* %ln80W to i64
  %ln80Y = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln80Z = bitcast i64* %ln80Y to i64*
  %ln810 = load i64, i64* %ln80Z, !tbaa !5
  %ln811 = icmp ugt i64 %ln80X, %ln810
  %ln812 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln811, i1 0 )
  br i1 %ln812, label %c80Q, label %c80P
c80P:
  %ln814 = ptrtoint i8* @Main_Body_con_info to i64
  %ln813 = load i64*, i64** %Hp_Var
  %ln815 = getelementptr inbounds i64, i64* %ln813, i32 -1
  store i64 %ln814, i64* %ln815, !tbaa !3
  %ln817 = load i64, i64* %R2_Var
  %ln816 = load i64*, i64** %Hp_Var
  %ln818 = getelementptr inbounds i64, i64* %ln816, i32 0
  store i64 %ln817, i64* %ln818, !tbaa !3
  %ln81a = load i64*, i64** %Hp_Var
  %ln81b = ptrtoint i64* %ln81a to i64
  %ln81c = add i64 %ln81b, -1
  store i64 %ln81c, i64* %R1_Var
  %ln81d = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln81e = bitcast i64* %ln81d to i64*
  %ln81f = load i64, i64* %ln81e, !tbaa !2
  %ln81g = inttoptr i64 %ln81f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln81h = load i64*, i64** %Hp_Var
  %ln81i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln81g( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln81h, i64 %ln81i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c80Q:
  %ln81j = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln81j, !tbaa !5
  %ln81k = load i64, i64* %R2_Var
  store i64 %ln81k, i64* %R2_Var
  %ln81l = ptrtoint %Main_Body_closure_struct* @Main_Body_closure$def to i64
  store i64 %ln81l, i64* %R1_Var
  %ln81m = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln81n = bitcast i64* %ln81m to i64*
  %ln81o = load i64, i64* %ln81n, !tbaa !5
  %ln81p = inttoptr i64 %ln81o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln81q = load i64*, i64** %Hp_Var
  %ln81r = load i64, i64* %R1_Var
  %ln81s = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln81p( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln81q, i64 %ln81r, i64 %ln81s, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Refract_closure_struct = type <{i64}>
@Main_Refract_closure$def = internal global %Main_Refract_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Refract_info$def to i64)}>
@Main_Refract_closure = alias i8, bitcast (%Main_Refract_closure_struct* @Main_Refract_closure$def to i8*)
@Main_Refract_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Refract_info$def to i8*)
define internal ghccc void @Main_Refract_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n81D:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c81y
c81y:
  %ln81E = load i64*, i64** %Hp_Var
  %ln81F = getelementptr inbounds i64, i64* %ln81E, i32 2
  %ln81G = ptrtoint i64* %ln81F to i64
  %ln81H = inttoptr i64 %ln81G to i64*
  store i64* %ln81H, i64** %Hp_Var
  %ln81I = load i64*, i64** %Hp_Var
  %ln81J = ptrtoint i64* %ln81I to i64
  %ln81K = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln81L = bitcast i64* %ln81K to i64*
  %ln81M = load i64, i64* %ln81L, !tbaa !5
  %ln81N = icmp ugt i64 %ln81J, %ln81M
  %ln81O = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln81N, i1 0 )
  br i1 %ln81O, label %c81C, label %c81B
c81B:
  %ln81Q = ptrtoint i8* @Main_Refract_con_info to i64
  %ln81P = load i64*, i64** %Hp_Var
  %ln81R = getelementptr inbounds i64, i64* %ln81P, i32 -1
  store i64 %ln81Q, i64* %ln81R, !tbaa !3
  %ln81T = load i64, i64* %R2_Var
  %ln81S = load i64*, i64** %Hp_Var
  %ln81U = getelementptr inbounds i64, i64* %ln81S, i32 0
  store i64 %ln81T, i64* %ln81U, !tbaa !3
  %ln81W = load i64*, i64** %Hp_Var
  %ln81X = ptrtoint i64* %ln81W to i64
  %ln81Y = add i64 %ln81X, -1
  store i64 %ln81Y, i64* %R1_Var
  %ln81Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln820 = bitcast i64* %ln81Z to i64*
  %ln821 = load i64, i64* %ln820, !tbaa !2
  %ln822 = inttoptr i64 %ln821 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln823 = load i64*, i64** %Hp_Var
  %ln824 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln822( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln823, i64 %ln824, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c81C:
  %ln825 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln825, !tbaa !5
  %ln826 = load i64, i64* %R2_Var
  store i64 %ln826, i64* %R2_Var
  %ln827 = ptrtoint %Main_Refract_closure_struct* @Main_Refract_closure$def to i64
  store i64 %ln827, i64* %R1_Var
  %ln828 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln829 = bitcast i64* %ln828 to i64*
  %ln82a = load i64, i64* %ln829, !tbaa !5
  %ln82b = inttoptr i64 %ln82a to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln82c = load i64*, i64** %Hp_Var
  %ln82d = load i64, i64* %R1_Var
  %ln82e = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln82b( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln82c, i64 %ln82d, i64 %ln82e, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Transmit_closure_struct = type <{i64}>
@Main_Transmit_closure$def = internal global %Main_Transmit_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Transmit_info$def to i64)}>
@Main_Transmit_closure = alias i8, bitcast (%Main_Transmit_closure_struct* @Main_Transmit_closure$def to i8*)
@Main_Transmit_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Transmit_info$def to i8*)
define internal ghccc void @Main_Transmit_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n82p:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c82k
c82k:
  %ln82q = load i64*, i64** %Hp_Var
  %ln82r = getelementptr inbounds i64, i64* %ln82q, i32 2
  %ln82s = ptrtoint i64* %ln82r to i64
  %ln82t = inttoptr i64 %ln82s to i64*
  store i64* %ln82t, i64** %Hp_Var
  %ln82u = load i64*, i64** %Hp_Var
  %ln82v = ptrtoint i64* %ln82u to i64
  %ln82w = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln82x = bitcast i64* %ln82w to i64*
  %ln82y = load i64, i64* %ln82x, !tbaa !5
  %ln82z = icmp ugt i64 %ln82v, %ln82y
  %ln82A = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln82z, i1 0 )
  br i1 %ln82A, label %c82o, label %c82n
c82n:
  %ln82C = ptrtoint i8* @Main_Transmit_con_info to i64
  %ln82B = load i64*, i64** %Hp_Var
  %ln82D = getelementptr inbounds i64, i64* %ln82B, i32 -1
  store i64 %ln82C, i64* %ln82D, !tbaa !3
  %ln82F = load i64, i64* %R2_Var
  %ln82E = load i64*, i64** %Hp_Var
  %ln82G = getelementptr inbounds i64, i64* %ln82E, i32 0
  store i64 %ln82F, i64* %ln82G, !tbaa !3
  %ln82I = load i64*, i64** %Hp_Var
  %ln82J = ptrtoint i64* %ln82I to i64
  %ln82K = add i64 %ln82J, -2
  store i64 %ln82K, i64* %R1_Var
  %ln82L = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln82M = bitcast i64* %ln82L to i64*
  %ln82N = load i64, i64* %ln82M, !tbaa !2
  %ln82O = inttoptr i64 %ln82N to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln82P = load i64*, i64** %Hp_Var
  %ln82Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln82O( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln82P, i64 %ln82Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c82o:
  %ln82R = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln82R, !tbaa !5
  %ln82S = load i64, i64* %R2_Var
  store i64 %ln82S, i64* %R2_Var
  %ln82T = ptrtoint %Main_Transmit_closure_struct* @Main_Transmit_closure$def to i64
  store i64 %ln82T, i64* %R1_Var
  %ln82U = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln82V = bitcast i64* %ln82U to i64*
  %ln82W = load i64, i64* %ln82V, !tbaa !5
  %ln82X = inttoptr i64 %ln82W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln82Y = load i64*, i64** %Hp_Var
  %ln82Z = load i64, i64* %R1_Var
  %ln830 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln82X( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln82Y, i64 %ln82Z, i64 %ln830, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Reflect_closure_struct = type <{i64}>
@Main_Reflect_closure$def = internal global %Main_Reflect_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Reflect_info$def to i64)}>
@Main_Reflect_closure = alias i8, bitcast (%Main_Reflect_closure_struct* @Main_Reflect_closure$def to i8*)
@Main_Reflect_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Reflect_info$def to i8*)
define internal ghccc void @Main_Reflect_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n83b:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c836
c836:
  %ln83c = load i64*, i64** %Hp_Var
  %ln83d = getelementptr inbounds i64, i64* %ln83c, i32 2
  %ln83e = ptrtoint i64* %ln83d to i64
  %ln83f = inttoptr i64 %ln83e to i64*
  store i64* %ln83f, i64** %Hp_Var
  %ln83g = load i64*, i64** %Hp_Var
  %ln83h = ptrtoint i64* %ln83g to i64
  %ln83i = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln83j = bitcast i64* %ln83i to i64*
  %ln83k = load i64, i64* %ln83j, !tbaa !5
  %ln83l = icmp ugt i64 %ln83h, %ln83k
  %ln83m = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln83l, i1 0 )
  br i1 %ln83m, label %c83a, label %c839
c839:
  %ln83o = ptrtoint i8* @Main_Reflect_con_info to i64
  %ln83n = load i64*, i64** %Hp_Var
  %ln83p = getelementptr inbounds i64, i64* %ln83n, i32 -1
  store i64 %ln83o, i64* %ln83p, !tbaa !3
  %ln83r = load i64, i64* %R2_Var
  %ln83q = load i64*, i64** %Hp_Var
  %ln83s = getelementptr inbounds i64, i64* %ln83q, i32 0
  store i64 %ln83r, i64* %ln83s, !tbaa !3
  %ln83u = load i64*, i64** %Hp_Var
  %ln83v = ptrtoint i64* %ln83u to i64
  %ln83w = add i64 %ln83v, -3
  store i64 %ln83w, i64* %R1_Var
  %ln83x = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln83y = bitcast i64* %ln83x to i64*
  %ln83z = load i64, i64* %ln83y, !tbaa !2
  %ln83A = inttoptr i64 %ln83z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln83B = load i64*, i64** %Hp_Var
  %ln83C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln83A( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln83B, i64 %ln83C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c83a:
  %ln83D = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln83D, !tbaa !5
  %ln83E = load i64, i64* %R2_Var
  store i64 %ln83E, i64* %R2_Var
  %ln83F = ptrtoint %Main_Reflect_closure_struct* @Main_Reflect_closure$def to i64
  store i64 %ln83F, i64* %R1_Var
  %ln83G = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln83H = bitcast i64* %ln83G to i64*
  %ln83I = load i64, i64* %ln83H, !tbaa !5
  %ln83J = inttoptr i64 %ln83I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln83K = load i64*, i64** %Hp_Var
  %ln83L = load i64, i64* %R1_Var
  %ln83M = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln83J( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln83K, i64 %ln83L, i64 %ln83M, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Specpow_closure_struct = type <{i64}>
@Main_Specpow_closure$def = internal global %Main_Specpow_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specpow_info$def to i64)}>
@Main_Specpow_closure = alias i8, bitcast (%Main_Specpow_closure_struct* @Main_Specpow_closure$def to i8*)
@Main_Specpow_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specpow_info$def to i8*)
define internal ghccc void @Main_Specpow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n83X:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c83S
c83S:
  %ln83Y = load i64*, i64** %Hp_Var
  %ln83Z = getelementptr inbounds i64, i64* %ln83Y, i32 2
  %ln840 = ptrtoint i64* %ln83Z to i64
  %ln841 = inttoptr i64 %ln840 to i64*
  store i64* %ln841, i64** %Hp_Var
  %ln842 = load i64*, i64** %Hp_Var
  %ln843 = ptrtoint i64* %ln842 to i64
  %ln844 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln845 = bitcast i64* %ln844 to i64*
  %ln846 = load i64, i64* %ln845, !tbaa !5
  %ln847 = icmp ugt i64 %ln843, %ln846
  %ln848 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln847, i1 0 )
  br i1 %ln848, label %c83W, label %c83V
c83V:
  %ln84a = ptrtoint i8* @Main_Specpow_con_info to i64
  %ln849 = load i64*, i64** %Hp_Var
  %ln84b = getelementptr inbounds i64, i64* %ln849, i32 -1
  store i64 %ln84a, i64* %ln84b, !tbaa !3
  %ln84d = load i64, i64* %R2_Var
  %ln84c = load i64*, i64** %Hp_Var
  %ln84e = getelementptr inbounds i64, i64* %ln84c, i32 0
  store i64 %ln84d, i64* %ln84e, !tbaa !3
  %ln84g = load i64*, i64** %Hp_Var
  %ln84h = ptrtoint i64* %ln84g to i64
  %ln84i = add i64 %ln84h, -4
  store i64 %ln84i, i64* %R1_Var
  %ln84j = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln84k = bitcast i64* %ln84j to i64*
  %ln84l = load i64, i64* %ln84k, !tbaa !2
  %ln84m = inttoptr i64 %ln84l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln84n = load i64*, i64** %Hp_Var
  %ln84o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln84m( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln84n, i64 %ln84o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c83W:
  %ln84p = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln84p, !tbaa !5
  %ln84q = load i64, i64* %R2_Var
  store i64 %ln84q, i64* %R2_Var
  %ln84r = ptrtoint %Main_Specpow_closure_struct* @Main_Specpow_closure$def to i64
  store i64 %ln84r, i64* %R1_Var
  %ln84s = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln84t = bitcast i64* %ln84s to i64*
  %ln84u = load i64, i64* %ln84t, !tbaa !5
  %ln84v = inttoptr i64 %ln84u to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln84w = load i64*, i64** %Hp_Var
  %ln84x = load i64, i64* %R1_Var
  %ln84y = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln84v( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln84w, i64 %ln84x, i64 %ln84y, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Specular_closure_struct = type <{i64}>
@Main_Specular_closure$def = internal global %Main_Specular_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specular_info$def to i64)}>
@Main_Specular_closure = alias i8, bitcast (%Main_Specular_closure_struct* @Main_Specular_closure$def to i8*)
@Main_Specular_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specular_info$def to i8*)
define internal ghccc void @Main_Specular_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n84J:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c84E
c84E:
  %ln84K = load i64*, i64** %Hp_Var
  %ln84L = getelementptr inbounds i64, i64* %ln84K, i32 2
  %ln84M = ptrtoint i64* %ln84L to i64
  %ln84N = inttoptr i64 %ln84M to i64*
  store i64* %ln84N, i64** %Hp_Var
  %ln84O = load i64*, i64** %Hp_Var
  %ln84P = ptrtoint i64* %ln84O to i64
  %ln84Q = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln84R = bitcast i64* %ln84Q to i64*
  %ln84S = load i64, i64* %ln84R, !tbaa !5
  %ln84T = icmp ugt i64 %ln84P, %ln84S
  %ln84U = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln84T, i1 0 )
  br i1 %ln84U, label %c84I, label %c84H
c84H:
  %ln84W = ptrtoint i8* @Main_Specular_con_info to i64
  %ln84V = load i64*, i64** %Hp_Var
  %ln84X = getelementptr inbounds i64, i64* %ln84V, i32 -1
  store i64 %ln84W, i64* %ln84X, !tbaa !3
  %ln84Z = load i64, i64* %R2_Var
  %ln84Y = load i64*, i64** %Hp_Var
  %ln850 = getelementptr inbounds i64, i64* %ln84Y, i32 0
  store i64 %ln84Z, i64* %ln850, !tbaa !3
  %ln852 = load i64*, i64** %Hp_Var
  %ln853 = ptrtoint i64* %ln852 to i64
  %ln854 = add i64 %ln853, -5
  store i64 %ln854, i64* %R1_Var
  %ln855 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln856 = bitcast i64* %ln855 to i64*
  %ln857 = load i64, i64* %ln856, !tbaa !2
  %ln858 = inttoptr i64 %ln857 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln859 = load i64*, i64** %Hp_Var
  %ln85a = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln858( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln859, i64 %ln85a, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c84I:
  %ln85b = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln85b, !tbaa !5
  %ln85c = load i64, i64* %R2_Var
  store i64 %ln85c, i64* %R2_Var
  %ln85d = ptrtoint %Main_Specular_closure_struct* @Main_Specular_closure$def to i64
  store i64 %ln85d, i64* %R1_Var
  %ln85e = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln85f = bitcast i64* %ln85e to i64*
  %ln85g = load i64, i64* %ln85f, !tbaa !5
  %ln85h = inttoptr i64 %ln85g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln85i = load i64*, i64** %Hp_Var
  %ln85j = load i64, i64* %R1_Var
  %ln85k = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln85h( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln85i, i64 %ln85j, i64 %ln85k, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Diffuse_closure_struct = type <{i64}>
@Main_Diffuse_closure$def = internal global %Main_Diffuse_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Diffuse_info$def to i64)}>
@Main_Diffuse_closure = alias i8, bitcast (%Main_Diffuse_closure_struct* @Main_Diffuse_closure$def to i8*)
@Main_Diffuse_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Diffuse_info$def to i8*)
define internal ghccc void @Main_Diffuse_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n85v:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c85q
c85q:
  %ln85w = load i64*, i64** %Hp_Var
  %ln85x = getelementptr inbounds i64, i64* %ln85w, i32 2
  %ln85y = ptrtoint i64* %ln85x to i64
  %ln85z = inttoptr i64 %ln85y to i64*
  store i64* %ln85z, i64** %Hp_Var
  %ln85A = load i64*, i64** %Hp_Var
  %ln85B = ptrtoint i64* %ln85A to i64
  %ln85C = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln85D = bitcast i64* %ln85C to i64*
  %ln85E = load i64, i64* %ln85D, !tbaa !5
  %ln85F = icmp ugt i64 %ln85B, %ln85E
  %ln85G = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln85F, i1 0 )
  br i1 %ln85G, label %c85u, label %c85t
c85t:
  %ln85I = ptrtoint i8* @Main_Diffuse_con_info to i64
  %ln85H = load i64*, i64** %Hp_Var
  %ln85J = getelementptr inbounds i64, i64* %ln85H, i32 -1
  store i64 %ln85I, i64* %ln85J, !tbaa !3
  %ln85L = load i64, i64* %R2_Var
  %ln85K = load i64*, i64** %Hp_Var
  %ln85M = getelementptr inbounds i64, i64* %ln85K, i32 0
  store i64 %ln85L, i64* %ln85M, !tbaa !3
  %ln85O = load i64*, i64** %Hp_Var
  %ln85P = ptrtoint i64* %ln85O to i64
  %ln85Q = add i64 %ln85P, -6
  store i64 %ln85Q, i64* %R1_Var
  %ln85R = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln85S = bitcast i64* %ln85R to i64*
  %ln85T = load i64, i64* %ln85S, !tbaa !2
  %ln85U = inttoptr i64 %ln85T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln85V = load i64*, i64** %Hp_Var
  %ln85W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln85U( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln85V, i64 %ln85W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c85u:
  %ln85X = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln85X, !tbaa !5
  %ln85Y = load i64, i64* %R2_Var
  store i64 %ln85Y, i64* %R2_Var
  %ln85Z = ptrtoint %Main_Diffuse_closure_struct* @Main_Diffuse_closure$def to i64
  store i64 %ln85Z, i64* %R1_Var
  %ln860 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln861 = bitcast i64* %ln860 to i64*
  %ln862 = load i64, i64* %ln861, !tbaa !5
  %ln863 = inttoptr i64 %ln862 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln864 = load i64*, i64** %Hp_Var
  %ln865 = load i64, i64* %R1_Var
  %ln866 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln863( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln864, i64 %ln865, i64 %ln866, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Ambient_closure_struct = type <{i64}>
@Main_Ambient_closure$def = internal global %Main_Ambient_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Ambient_info$def to i64)}>
@Main_Ambient_closure = alias i8, bitcast (%Main_Ambient_closure_struct* @Main_Ambient_closure$def to i8*)
@Main_Ambient_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Ambient_info$def to i8*)
define internal ghccc void @Main_Ambient_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n86h:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c86c
c86c:
  %ln86i = load i64*, i64** %Hp_Var
  %ln86j = getelementptr inbounds i64, i64* %ln86i, i32 2
  %ln86k = ptrtoint i64* %ln86j to i64
  %ln86l = inttoptr i64 %ln86k to i64*
  store i64* %ln86l, i64** %Hp_Var
  %ln86m = load i64*, i64** %Hp_Var
  %ln86n = ptrtoint i64* %ln86m to i64
  %ln86o = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln86p = bitcast i64* %ln86o to i64*
  %ln86q = load i64, i64* %ln86p, !tbaa !5
  %ln86r = icmp ugt i64 %ln86n, %ln86q
  %ln86s = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln86r, i1 0 )
  br i1 %ln86s, label %c86g, label %c86f
c86f:
  %ln86u = ptrtoint i8* @Main_Ambient_con_info to i64
  %ln86t = load i64*, i64** %Hp_Var
  %ln86v = getelementptr inbounds i64, i64* %ln86t, i32 -1
  store i64 %ln86u, i64* %ln86v, !tbaa !3
  %ln86x = load i64, i64* %R2_Var
  %ln86w = load i64*, i64** %Hp_Var
  %ln86y = getelementptr inbounds i64, i64* %ln86w, i32 0
  store i64 %ln86x, i64* %ln86y, !tbaa !3
  %ln86A = load i64*, i64** %Hp_Var
  %ln86B = ptrtoint i64* %ln86A to i64
  %ln86C = add i64 %ln86B, -7
  store i64 %ln86C, i64* %R1_Var
  %ln86D = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln86E = bitcast i64* %ln86D to i64*
  %ln86F = load i64, i64* %ln86E, !tbaa !2
  %ln86G = inttoptr i64 %ln86F to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln86H = load i64*, i64** %Hp_Var
  %ln86I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln86G( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln86H, i64 %ln86I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c86g:
  %ln86J = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln86J, !tbaa !5
  %ln86K = load i64, i64* %R2_Var
  store i64 %ln86K, i64* %R2_Var
  %ln86L = ptrtoint %Main_Ambient_closure_struct* @Main_Ambient_closure$def to i64
  store i64 %ln86L, i64* %R1_Var
  %ln86M = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln86N = bitcast i64* %ln86M to i64*
  %ln86O = load i64, i64* %ln86N, !tbaa !5
  %ln86P = inttoptr i64 %ln86O to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln86Q = load i64*, i64** %Hp_Var
  %ln86R = load i64, i64* %R1_Var
  %ln86S = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln86P( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln86Q, i64 %ln86R, i64 %ln86S, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_Sphere_closure_struct = type <{i64}>
@Main_Sphere_closure$def = internal global %Main_Sphere_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Sphere_info$def to i64)}>
@Main_Sphere_closure = alias i8, bitcast (%Main_Sphere_closure_struct* @Main_Sphere_closure$def to i8*)
@Main_Sphere_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Sphere_info$def to i8*)
define internal ghccc void @Main_Sphere_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n873:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c86Y
c86Y:
  %ln874 = load i64*, i64** %Hp_Var
  %ln875 = getelementptr inbounds i64, i64* %ln874, i32 4
  %ln876 = ptrtoint i64* %ln875 to i64
  %ln877 = inttoptr i64 %ln876 to i64*
  store i64* %ln877, i64** %Hp_Var
  %ln878 = load i64*, i64** %Hp_Var
  %ln879 = ptrtoint i64* %ln878 to i64
  %ln87a = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln87b = bitcast i64* %ln87a to i64*
  %ln87c = load i64, i64* %ln87b, !tbaa !5
  %ln87d = icmp ugt i64 %ln879, %ln87c
  %ln87e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln87d, i1 0 )
  br i1 %ln87e, label %c872, label %c871
c871:
  %ln87g = ptrtoint i8* @Main_Sphere_con_info to i64
  %ln87f = load i64*, i64** %Hp_Var
  %ln87h = getelementptr inbounds i64, i64* %ln87f, i32 -3
  store i64 %ln87g, i64* %ln87h, !tbaa !3
  %ln87j = load i64, i64* %R2_Var
  %ln87i = load i64*, i64** %Hp_Var
  %ln87k = getelementptr inbounds i64, i64* %ln87i, i32 -2
  store i64 %ln87j, i64* %ln87k, !tbaa !3
  %ln87m = load i64, i64* %R3_Var
  %ln87l = load i64*, i64** %Hp_Var
  %ln87n = getelementptr inbounds i64, i64* %ln87l, i32 -1
  store i64 %ln87m, i64* %ln87n, !tbaa !3
  %ln87p = load i64, i64* %R4_Var
  %ln87o = load i64*, i64** %Hp_Var
  %ln87q = getelementptr inbounds i64, i64* %ln87o, i32 0
  store i64 %ln87p, i64* %ln87q, !tbaa !3
  %ln87s = load i64*, i64** %Hp_Var
  %ln87t = ptrtoint i64* %ln87s to i64
  %ln87u = add i64 %ln87t, -23
  store i64 %ln87u, i64* %R1_Var
  %ln87v = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln87w = bitcast i64* %ln87v to i64*
  %ln87x = load i64, i64* %ln87w, !tbaa !2
  %ln87y = inttoptr i64 %ln87x to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln87z = load i64*, i64** %Hp_Var
  %ln87A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln87y( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln87z, i64 %ln87A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c872:
  %ln87B = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln87B, !tbaa !5
  %ln87C = load i64, i64* %R4_Var
  store i64 %ln87C, i64* %R4_Var
  %ln87D = load i64, i64* %R3_Var
  store i64 %ln87D, i64* %R3_Var
  %ln87E = load i64, i64* %R2_Var
  store i64 %ln87E, i64* %R2_Var
  %ln87F = ptrtoint %Main_Sphere_closure_struct* @Main_Sphere_closure$def to i64
  store i64 %ln87F, i64* %R1_Var
  %ln87G = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln87H = bitcast i64* %ln87G to i64*
  %ln87I = load i64, i64* %ln87H, !tbaa !5
  %ln87J = inttoptr i64 %ln87I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln87K = load i64*, i64** %Hp_Var
  %ln87L = load i64, i64* %R1_Var
  %ln87M = load i64, i64* %R2_Var
  %ln87N = load i64, i64* %R3_Var
  %ln87O = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln87J( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln87K, i64 %ln87L, i64 %ln87M, i64 %ln87N, i64 %ln87O, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u87Y_srt_struct = type <{i64, i64, i64, i64}>
%r7mG_closure_struct = type <{i64, i64, i64, i64}>
@_u87Y_srt$def = internal global %_u87Y_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64), i64 ptrtoint (i8* @base_TextziRead_readEither5_closure to i64), i64 0}>
@_u87Y_srt = internal alias i8, bitcast (%_u87Y_srt_struct* @_u87Y_srt$def to i8*)
@r7mG_closure$def = internal global %r7mG_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mG_info$def to i64), i64 0, i64 0, i64 0}>
@r7mG_closure = internal alias i8, bitcast (%r7mG_closure_struct* @r7mG_closure$def to i8*)
@r7mG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mG_info$def to i8*)
define internal ghccc void @r7mG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u87Y_srt_struct* @_u87Y_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mG_info$def to i64)) to i32),i32 0)}>
{
n87Z:
  %lc87S = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c87V
c87V:
  %ln880 = load i64*, i64** %Sp_Var
  %ln881 = getelementptr inbounds i64, i64* %ln880, i32 -2
  %ln882 = ptrtoint i64* %ln881 to i64
  %ln883 = icmp ult i64 %ln882, %SpLim_Arg
  %ln884 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln883, i1 0 )
  br i1 %ln884, label %c87W, label %c87X
c87X:
  %ln885 = ptrtoint i64* %Base_Arg to i64
  %ln886 = inttoptr i64 %ln885 to i8*
  %ln887 = load i64, i64* %R1_Var
  %ln888 = inttoptr i64 %ln887 to i8*
  %ln889 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln88a = call ccc i8* (i8*, i8*) %ln889( i8* %ln886, i8* %ln888 ) nounwind
  %ln88b = ptrtoint i8* %ln88a to i64
  store i64 %ln88b, i64* %lc87S
  %ln88c = load i64, i64* %lc87S
  %ln88d = icmp eq i64 %ln88c, 0
  br i1 %ln88d, label %c87U, label %c87T
c87T:
  %ln88f = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln88e = load i64*, i64** %Sp_Var
  %ln88g = getelementptr inbounds i64, i64* %ln88e, i32 -2
  store i64 %ln88f, i64* %ln88g, !tbaa !2
  %ln88i = load i64, i64* %lc87S
  %ln88h = load i64*, i64** %Sp_Var
  %ln88j = getelementptr inbounds i64, i64* %ln88h, i32 -1
  store i64 %ln88i, i64* %ln88j, !tbaa !2
  %ln88k = ptrtoint i8* @base_TextziRead_readEither5_closure to i64
  store i64 %ln88k, i64* %R2_Var
  %ln88l = load i64*, i64** %Sp_Var
  %ln88m = getelementptr inbounds i64, i64* %ln88l, i32 -2
  %ln88n = ptrtoint i64* %ln88m to i64
  %ln88o = inttoptr i64 %ln88n to i64*
  store i64* %ln88o, i64** %Sp_Var
  %ln88p = bitcast i8* @base_GHCziErr_errorWithoutStackTrace_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln88q = load i64*, i64** %Sp_Var
  %ln88r = load i64, i64* %R1_Var
  %ln88s = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln88p( i64* %Base_Arg, i64* %ln88q, i64* %Hp_Arg, i64 %ln88r, i64 %ln88s, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c87U:
  %ln88u = load i64, i64* %R1_Var
  %ln88v = inttoptr i64 %ln88u to i64*
  %ln88w = load i64, i64* %ln88v, !tbaa !4
  %ln88x = inttoptr i64 %ln88w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln88y = load i64*, i64** %Sp_Var
  %ln88z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln88x( i64* %Base_Arg, i64* %ln88y, i64* %Hp_Arg, i64 %ln88z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c87W:
  %ln88A = load i64, i64* %R1_Var
  store i64 %ln88A, i64* %R1_Var
  %ln88B = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln88C = bitcast i64* %ln88B to i64*
  %ln88D = load i64, i64* %ln88C, !tbaa !5
  %ln88E = inttoptr i64 %ln88D to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln88F = load i64*, i64** %Sp_Var
  %ln88G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln88E( i64* %Base_Arg, i64* %ln88F, i64* %Hp_Arg, i64 %ln88G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_u88Q_srt_struct = type <{i64, i64, i64, i64}>
%r7mF_closure_struct = type <{i64, i64, i64, i64}>
@_u88Q_srt$def = internal global %_u88Q_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziErr_errorWithoutStackTrace_closure to i64), i64 ptrtoint (i8* @base_TextziRead_readEither2_closure to i64), i64 0}>
@_u88Q_srt = internal alias i8, bitcast (%_u88Q_srt_struct* @_u88Q_srt$def to i8*)
@r7mF_closure$def = internal global %r7mF_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mF_info$def to i64), i64 0, i64 0, i64 0}>
@r7mF_closure = internal alias i8, bitcast (%r7mF_closure_struct* @r7mF_closure$def to i8*)
@r7mF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mF_info$def to i8*)
define internal ghccc void @r7mF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u88Q_srt_struct* @_u88Q_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mF_info$def to i64)) to i32),i32 0)}>
{
n88R:
  %lc88K = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c88N
c88N:
  %ln88S = load i64*, i64** %Sp_Var
  %ln88T = getelementptr inbounds i64, i64* %ln88S, i32 -2
  %ln88U = ptrtoint i64* %ln88T to i64
  %ln88V = icmp ult i64 %ln88U, %SpLim_Arg
  %ln88W = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln88V, i1 0 )
  br i1 %ln88W, label %c88O, label %c88P
c88P:
  %ln88X = ptrtoint i64* %Base_Arg to i64
  %ln88Y = inttoptr i64 %ln88X to i8*
  %ln88Z = load i64, i64* %R1_Var
  %ln890 = inttoptr i64 %ln88Z to i8*
  %ln891 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln892 = call ccc i8* (i8*, i8*) %ln891( i8* %ln88Y, i8* %ln890 ) nounwind
  %ln893 = ptrtoint i8* %ln892 to i64
  store i64 %ln893, i64* %lc88K
  %ln894 = load i64, i64* %lc88K
  %ln895 = icmp eq i64 %ln894, 0
  br i1 %ln895, label %c88M, label %c88L
c88L:
  %ln897 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln896 = load i64*, i64** %Sp_Var
  %ln898 = getelementptr inbounds i64, i64* %ln896, i32 -2
  store i64 %ln897, i64* %ln898, !tbaa !2
  %ln89a = load i64, i64* %lc88K
  %ln899 = load i64*, i64** %Sp_Var
  %ln89b = getelementptr inbounds i64, i64* %ln899, i32 -1
  store i64 %ln89a, i64* %ln89b, !tbaa !2
  %ln89c = ptrtoint i8* @base_TextziRead_readEither2_closure to i64
  store i64 %ln89c, i64* %R2_Var
  %ln89d = load i64*, i64** %Sp_Var
  %ln89e = getelementptr inbounds i64, i64* %ln89d, i32 -2
  %ln89f = ptrtoint i64* %ln89e to i64
  %ln89g = inttoptr i64 %ln89f to i64*
  store i64* %ln89g, i64** %Sp_Var
  %ln89h = bitcast i8* @base_GHCziErr_errorWithoutStackTrace_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln89i = load i64*, i64** %Sp_Var
  %ln89j = load i64, i64* %R1_Var
  %ln89k = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln89h( i64* %Base_Arg, i64* %ln89i, i64* %Hp_Arg, i64 %ln89j, i64 %ln89k, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c88M:
  %ln89m = load i64, i64* %R1_Var
  %ln89n = inttoptr i64 %ln89m to i64*
  %ln89o = load i64, i64* %ln89n, !tbaa !4
  %ln89p = inttoptr i64 %ln89o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln89q = load i64*, i64** %Sp_Var
  %ln89r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln89p( i64* %Base_Arg, i64* %ln89q, i64* %Hp_Arg, i64 %ln89r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c88O:
  %ln89s = load i64, i64* %R1_Var
  store i64 %ln89s, i64* %R1_Var
  %ln89t = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln89u = bitcast i64* %ln89t to i64*
  %ln89v = load i64, i64* %ln89u, !tbaa !5
  %ln89w = inttoptr i64 %ln89v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln89x = load i64*, i64** %Sp_Var
  %ln89y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln89w( i64* %Base_Arg, i64* %ln89x, i64* %Hp_Arg, i64 %ln89y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mE_bytes_struct = type <{[34 x i8]}>
@r7mE_bytes$def = internal constant %r7mE_bytes_struct<{[34 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 108, i8 104, i8 115, i8 58, i8 40, i8 52, i8 52, i8 52, i8 44, i8 50, i8 50, i8 41, i8 45, i8 40, i8 52, i8 52, i8 53, i8 44, i8 51, i8 52, i8 41, i8 124, i8 108, i8 97, i8 109, i8 98, i8 100, i8 97, i8 0]}>, align 1
@r7mE_bytes = internal alias i8, bitcast (%r7mE_bytes_struct* @r7mE_bytes$def to i8*)
%r7mH_closure_struct = type <{i64, i64, i64, i64}>
@r7mH_closure$def = internal global %r7mH_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mH_info$def to i64), i64 0, i64 0, i64 0}>
@r7mH_closure = internal alias i8, bitcast (%r7mH_closure_struct* @r7mH_closure$def to i8*)
@r7mH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mH_info$def to i8*)
define internal ghccc void @r7mH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mH_info$def to i64)) to i32),i32 0)}>
{
n89I:
  %lc89C = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c89F
c89F:
  %ln89J = load i64*, i64** %Sp_Var
  %ln89K = getelementptr inbounds i64, i64* %ln89J, i32 -2
  %ln89L = ptrtoint i64* %ln89K to i64
  %ln89M = icmp ult i64 %ln89L, %SpLim_Arg
  %ln89N = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln89M, i1 0 )
  br i1 %ln89N, label %c89G, label %c89H
c89H:
  %ln89O = ptrtoint i64* %Base_Arg to i64
  %ln89P = inttoptr i64 %ln89O to i8*
  %ln89Q = load i64, i64* %R1_Var
  %ln89R = inttoptr i64 %ln89Q to i8*
  %ln89S = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln89T = call ccc i8* (i8*, i8*) %ln89S( i8* %ln89P, i8* %ln89R ) nounwind
  %ln89U = ptrtoint i8* %ln89T to i64
  store i64 %ln89U, i64* %lc89C
  %ln89V = load i64, i64* %lc89C
  %ln89W = icmp eq i64 %ln89V, 0
  br i1 %ln89W, label %c89E, label %c89D
c89D:
  %ln89Y = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln89X = load i64*, i64** %Sp_Var
  %ln89Z = getelementptr inbounds i64, i64* %ln89X, i32 -2
  store i64 %ln89Y, i64* %ln89Z, !tbaa !2
  %ln8a1 = load i64, i64* %lc89C
  %ln8a0 = load i64*, i64** %Sp_Var
  %ln8a2 = getelementptr inbounds i64, i64* %ln8a0, i32 -1
  store i64 %ln8a1, i64* %ln8a2, !tbaa !2
  %ln8a3 = ptrtoint %r7mE_bytes_struct* @r7mE_bytes$def to i64
  store i64 %ln8a3, i64* %R2_Var
  %ln8a4 = load i64*, i64** %Sp_Var
  %ln8a5 = getelementptr inbounds i64, i64* %ln8a4, i32 -2
  %ln8a6 = ptrtoint i64* %ln8a5 to i64
  %ln8a7 = inttoptr i64 %ln8a6 to i64*
  store i64* %ln8a7, i64** %Sp_Var
  %ln8a8 = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8a9 = load i64*, i64** %Sp_Var
  %ln8aa = load i64, i64* %R1_Var
  %ln8ab = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8a8( i64* %Base_Arg, i64* %ln8a9, i64* %Hp_Arg, i64 %ln8aa, i64 %ln8ab, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89E:
  %ln8ad = load i64, i64* %R1_Var
  %ln8ae = inttoptr i64 %ln8ad to i64*
  %ln8af = load i64, i64* %ln8ae, !tbaa !4
  %ln8ag = inttoptr i64 %ln8af to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ah = load i64*, i64** %Sp_Var
  %ln8ai = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ag( i64* %Base_Arg, i64* %ln8ah, i64* %Hp_Arg, i64 %ln8ai, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c89G:
  %ln8aj = load i64, i64* %R1_Var
  store i64 %ln8aj, i64* %R1_Var
  %ln8ak = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8al = bitcast i64* %ln8ak to i64*
  %ln8am = load i64, i64* %ln8al, !tbaa !5
  %ln8an = inttoptr i64 %ln8am to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ao = load i64*, i64** %Sp_Var
  %ln8ap = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8an( i64* %Base_Arg, i64* %ln8ao, i64* %Hp_Arg, i64 %ln8ap, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwgo2_closure_struct = type <{i64}>
@Main_zdwgo2_closure$def = internal global %Main_zdwgo2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo2_info$def to i64)}>
@Main_zdwgo2_closure = alias i8, bitcast (%Main_zdwgo2_closure_struct* @Main_zdwgo2_closure$def to i8*)
@Main_zdwgo2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo2_info$def to i8*)
define ghccc void @Main_zdwgo2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n8c3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8aB
c8aB:
  %ln8c4 = load i64*, i64** %Sp_Var
  %ln8c5 = getelementptr inbounds i64, i64* %ln8c4, i32 -4
  %ln8c6 = ptrtoint i64* %ln8c5 to i64
  %ln8c7 = icmp ult i64 %ln8c6, %SpLim_Arg
  %ln8c8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8c7, i1 0 )
  br i1 %ln8c8, label %c8aC, label %c8aD
c8aD:
  %ln8ca = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8au_info$def to i64
  %ln8c9 = load i64*, i64** %Sp_Var
  %ln8cb = getelementptr inbounds i64, i64* %ln8c9, i32 -1
  store i64 %ln8ca, i64* %ln8cb, !tbaa !2
  %ln8cc = load i64, i64* %R2_Var
  store i64 %ln8cc, i64* %R1_Var
  %ln8cd = load i64*, i64** %Sp_Var
  %ln8ce = getelementptr inbounds i64, i64* %ln8cd, i32 -1
  %ln8cf = ptrtoint i64* %ln8ce to i64
  %ln8cg = inttoptr i64 %ln8cf to i64*
  store i64* %ln8cg, i64** %Sp_Var
  %ln8ch = load i64, i64* %R1_Var
  %ln8ci = and i64 %ln8ch, 7
  %ln8cj = icmp ne i64 %ln8ci, 0
  br i1 %ln8cj, label %u8bY, label %c8av
c8av:
  %ln8cl = load i64, i64* %R1_Var
  %ln8cm = inttoptr i64 %ln8cl to i64*
  %ln8cn = load i64, i64* %ln8cm, !tbaa !4
  %ln8co = inttoptr i64 %ln8cn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cp = load i64*, i64** %Sp_Var
  %ln8cq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8co( i64* %Base_Arg, i64* %ln8cp, i64* %Hp_Arg, i64 %ln8cq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8bY:
  %ln8cr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8au_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cs = load i64*, i64** %Sp_Var
  %ln8ct = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8cr( i64* %Base_Arg, i64* %ln8cs, i64* %Hp_Arg, i64 %ln8ct, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8aC:
  %ln8cu = load i64, i64* %R2_Var
  store i64 %ln8cu, i64* %R2_Var
  %ln8cv = ptrtoint %Main_zdwgo2_closure_struct* @Main_zdwgo2_closure$def to i64
  store i64 %ln8cv, i64* %R1_Var
  %ln8cw = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8cx = bitcast i64* %ln8cw to i64*
  %ln8cy = load i64, i64* %ln8cx, !tbaa !5
  %ln8cz = inttoptr i64 %ln8cy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cA = load i64*, i64** %Sp_Var
  %ln8cB = load i64, i64* %R1_Var
  %ln8cC = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8cz( i64* %Base_Arg, i64* %ln8cA, i64* %Hp_Arg, i64 %ln8cB, i64 %ln8cC, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8au_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8au_info$def to i8*)
define internal ghccc void @c8au_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8cD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7XH = alloca i64, i32 1
  br label %c8au
c8au:
  %ln8cE = load i64, i64* %R1_Var
  %ln8cF = and i64 %ln8cE, 7
  switch i64 %ln8cF, label %c8ay [i64 1, label %c8ay
i64 2, label %c8az]
c8ay:
  store i64 0, i64* %R1_Var
  %ln8cG = load i64*, i64** %Sp_Var
  %ln8cH = getelementptr inbounds i64, i64* %ln8cG, i32 1
  %ln8cI = ptrtoint i64* %ln8cH to i64
  %ln8cJ = inttoptr i64 %ln8cI to i64*
  store i64* %ln8cJ, i64** %Sp_Var
  %ln8cK = load i64*, i64** %Sp_Var
  %ln8cL = getelementptr inbounds i64, i64* %ln8cK, i32 0
  %ln8cM = bitcast i64* %ln8cL to i64*
  %ln8cN = load i64, i64* %ln8cM, !tbaa !2
  %ln8cO = inttoptr i64 %ln8cN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8cP = load i64*, i64** %Sp_Var
  %ln8cQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8cO( i64* %Base_Arg, i64* %ln8cP, i64* %Hp_Arg, i64 %ln8cQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8az:
  %ln8cS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aJ_info$def to i64
  %ln8cR = load i64*, i64** %Sp_Var
  %ln8cT = getelementptr inbounds i64, i64* %ln8cR, i32 -1
  store i64 %ln8cS, i64* %ln8cT, !tbaa !2
  %ln8cW = load i64, i64* %R1_Var
  %ln8cX = add i64 %ln8cW, 14
  %ln8cY = inttoptr i64 %ln8cX to i64*
  %ln8cZ = load i64, i64* %ln8cY, !tbaa !4
  store i64 %ln8cZ, i64* %ls7XH
  %ln8d2 = load i64, i64* %R1_Var
  %ln8d3 = add i64 %ln8d2, 6
  %ln8d4 = inttoptr i64 %ln8d3 to i64*
  %ln8d5 = load i64, i64* %ln8d4, !tbaa !4
  store i64 %ln8d5, i64* %R1_Var
  %ln8d7 = load i64, i64* %ls7XH
  %ln8d6 = load i64*, i64** %Sp_Var
  %ln8d8 = getelementptr inbounds i64, i64* %ln8d6, i32 0
  store i64 %ln8d7, i64* %ln8d8, !tbaa !2
  %ln8d9 = load i64*, i64** %Sp_Var
  %ln8da = getelementptr inbounds i64, i64* %ln8d9, i32 -1
  %ln8db = ptrtoint i64* %ln8da to i64
  %ln8dc = inttoptr i64 %ln8db to i64*
  store i64* %ln8dc, i64** %Sp_Var
  %ln8dd = load i64, i64* %R1_Var
  %ln8de = and i64 %ln8dd, 7
  %ln8df = icmp ne i64 %ln8de, 0
  br i1 %ln8df, label %u8bX, label %c8aK
c8aK:
  %ln8dh = load i64, i64* %R1_Var
  %ln8di = inttoptr i64 %ln8dh to i64*
  %ln8dj = load i64, i64* %ln8di, !tbaa !4
  %ln8dk = inttoptr i64 %ln8dj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8dl = load i64*, i64** %Sp_Var
  %ln8dm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8dk( i64* %Base_Arg, i64* %ln8dl, i64* %Hp_Arg, i64 %ln8dm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8bX:
  %ln8dn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8do = load i64*, i64** %Sp_Var
  %ln8dp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8dn( i64* %Base_Arg, i64* %ln8do, i64* %Hp_Arg, i64 %ln8dp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8aJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aJ_info$def to i8*)
define internal ghccc void @c8aJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8dq:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8aJ
c8aJ:
  %ln8dr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aO_info$def to i64
  %ln8ds = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8dr, i64* %ln8ds, !tbaa !2
  %ln8dv = load i64, i64* %R1_Var
  %ln8dw = add i64 %ln8dv, 15
  %ln8dx = inttoptr i64 %ln8dw to i64*
  %ln8dy = load i64, i64* %ln8dx, !tbaa !4
  store i64 %ln8dy, i64* %R1_Var
  %ln8dz = load i64, i64* %R1_Var
  %ln8dA = and i64 %ln8dz, 7
  %ln8dB = icmp ne i64 %ln8dA, 0
  br i1 %ln8dB, label %u8bZ, label %c8aP
c8aP:
  %ln8dD = load i64, i64* %R1_Var
  %ln8dE = inttoptr i64 %ln8dD to i64*
  %ln8dF = load i64, i64* %ln8dE, !tbaa !4
  %ln8dG = inttoptr i64 %ln8dF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8dH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8dG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8dH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8bZ:
  %ln8dI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8dJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8dI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8dJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8aO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aO_info$def to i8*)
define internal ghccc void @c8aO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8dK:
  %ls7XN = alloca i64, i32 1
  %ls7XO = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8aO
c8aO:
  %ln8dM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aT_info$def to i64
  %ln8dL = load i64*, i64** %Sp_Var
  %ln8dN = getelementptr inbounds i64, i64* %ln8dL, i32 -2
  store i64 %ln8dM, i64* %ln8dN, !tbaa !2
  %ln8dQ = load i64, i64* %R1_Var
  %ln8dR = add i64 %ln8dQ, 15
  %ln8dS = inttoptr i64 %ln8dR to i64*
  %ln8dT = load i64, i64* %ln8dS, !tbaa !4
  store i64 %ln8dT, i64* %ls7XN
  %ln8dW = load i64, i64* %R1_Var
  %ln8dX = add i64 %ln8dW, 23
  %ln8dY = inttoptr i64 %ln8dX to i64*
  %ln8dZ = load i64, i64* %ln8dY, !tbaa !4
  store i64 %ln8dZ, i64* %ls7XO
  %ln8e2 = load i64, i64* %R1_Var
  %ln8e3 = add i64 %ln8e2, 7
  %ln8e4 = inttoptr i64 %ln8e3 to i64*
  %ln8e5 = load i64, i64* %ln8e4, !tbaa !4
  store i64 %ln8e5, i64* %R1_Var
  %ln8e7 = load i64, i64* %ls7XO
  %ln8e6 = load i64*, i64** %Sp_Var
  %ln8e8 = getelementptr inbounds i64, i64* %ln8e6, i32 -1
  store i64 %ln8e7, i64* %ln8e8, !tbaa !2
  %ln8ea = load i64, i64* %ls7XN
  %ln8e9 = load i64*, i64** %Sp_Var
  %ln8eb = getelementptr inbounds i64, i64* %ln8e9, i32 0
  store i64 %ln8ea, i64* %ln8eb, !tbaa !2
  %ln8ec = load i64*, i64** %Sp_Var
  %ln8ed = getelementptr inbounds i64, i64* %ln8ec, i32 -2
  %ln8ee = ptrtoint i64* %ln8ed to i64
  %ln8ef = inttoptr i64 %ln8ee to i64*
  store i64* %ln8ef, i64** %Sp_Var
  %ln8eg = load i64, i64* %R1_Var
  %ln8eh = and i64 %ln8eg, 7
  %ln8ei = icmp ne i64 %ln8eh, 0
  br i1 %ln8ei, label %u8c0, label %c8aU
c8aU:
  %ln8ek = load i64, i64* %R1_Var
  %ln8el = inttoptr i64 %ln8ek to i64*
  %ln8em = load i64, i64* %ln8el, !tbaa !4
  %ln8en = inttoptr i64 %ln8em to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eo = load i64*, i64** %Sp_Var
  %ln8ep = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8en( i64* %Base_Arg, i64* %ln8eo, i64* %Hp_Arg, i64 %ln8ep, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8c0:
  %ln8eq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8er = load i64*, i64** %Sp_Var
  %ln8es = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eq( i64* %Base_Arg, i64* %ln8er, i64* %Hp_Arg, i64 %ln8es, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8aT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aT_info$def to i8*)
define internal ghccc void @c8aT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n8et:
  %ls7XQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8aT
c8aT:
  %ln8eu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aY_info$def to i64
  %ln8ev = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8eu, i64* %ln8ev, !tbaa !2
  %ln8ey = load i64, i64* %R1_Var
  %ln8ez = add i64 %ln8ey, 7
  %ln8eA = inttoptr i64 %ln8ez to double*
  %ln8eB = load double, double* %ln8eA, !tbaa !4
  store double %ln8eB, double* %ls7XQ
  %ln8eC = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8eD = bitcast i64* %ln8eC to i64*
  %ln8eE = load i64, i64* %ln8eD, !tbaa !2
  store i64 %ln8eE, i64* %R1_Var
  %ln8eF = load double, double* %ls7XQ
  %ln8eG = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8eH = bitcast i64* %ln8eG to double*
  store double %ln8eF, double* %ln8eH, !tbaa !2
  %ln8eI = load i64, i64* %R1_Var
  %ln8eJ = and i64 %ln8eI, 7
  %ln8eK = icmp ne i64 %ln8eJ, 0
  br i1 %ln8eK, label %u8c1, label %c8aZ
c8aZ:
  %ln8eM = load i64, i64* %R1_Var
  %ln8eN = inttoptr i64 %ln8eM to i64*
  %ln8eO = load i64, i64* %ln8eN, !tbaa !4
  %ln8eP = inttoptr i64 %ln8eO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8eQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8c1:
  %ln8eR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8eS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8eR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8eS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8aY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8aY_info$def to i8*)
define internal ghccc void @c8aY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 0}>
{
n8eT:
  %ls7XS = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8aY
c8aY:
  %ln8eU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8b3_info$def to i64
  %ln8eV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8eU, i64* %ln8eV, !tbaa !2
  %ln8eY = load i64, i64* %R1_Var
  %ln8eZ = add i64 %ln8eY, 7
  %ln8f0 = inttoptr i64 %ln8eZ to double*
  %ln8f1 = load double, double* %ln8f0, !tbaa !4
  store double %ln8f1, double* %ls7XS
  %ln8f2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8f3 = bitcast i64* %ln8f2 to i64*
  %ln8f4 = load i64, i64* %ln8f3, !tbaa !2
  store i64 %ln8f4, i64* %R1_Var
  %ln8f5 = load double, double* %ls7XS
  %ln8f6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8f7 = bitcast i64* %ln8f6 to double*
  store double %ln8f5, double* %ln8f7, !tbaa !2
  %ln8f8 = load i64, i64* %R1_Var
  %ln8f9 = and i64 %ln8f8, 7
  %ln8fa = icmp ne i64 %ln8f9, 0
  br i1 %ln8fa, label %u8c2, label %c8b4
c8b4:
  %ln8fc = load i64, i64* %R1_Var
  %ln8fd = inttoptr i64 %ln8fc to i64*
  %ln8fe = load i64, i64* %ln8fd, !tbaa !4
  %ln8ff = inttoptr i64 %ln8fe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ff( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8fg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8c2:
  %ln8fh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8b3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8fh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8fi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8b3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8b3_info$def to i8*)
define internal ghccc void @c8b3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 195, i32 30, i32 0}>
{
n8fj:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8b3
c8b3:
  %ln8fk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8b8_info$def to i64
  %ln8fl = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8fk, i64* %ln8fl, !tbaa !2
  %ln8fm = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln8fn = bitcast i64* %ln8fm to i64*
  %ln8fo = load i64, i64* %ln8fn, !tbaa !2
  store i64 %ln8fo, i64* %R2_Var
  %ln8fp = add i64 %R1_Arg, 7
  %ln8fq = inttoptr i64 %ln8fp to double*
  %ln8fr = load double, double* %ln8fq, !tbaa !4
  %ln8fs = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln8ft = bitcast i64* %ln8fs to double*
  store double %ln8fr, double* %ln8ft, !tbaa !2
  %ln8fu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8fv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8fu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8fv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8b8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8b8_info$def to i8*)
define internal ghccc void @c8b8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n8fw:
  %ls7XS = alloca double, i32 1
  %ls7XU = alloca double, i32 1
  %ls7Y0 = alloca double, i32 1
  %ls7Y5 = alloca double, i32 1
  %ls7Ya = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8b8
c8b8:
  %ln8fx = load i64*, i64** %Sp_Var
  %ln8fy = getelementptr inbounds i64, i64* %ln8fx, i32 1
  %ln8fz = bitcast i64* %ln8fy to double*
  %ln8fA = load double, double* %ln8fz, !tbaa !2
  store double %ln8fA, double* %ls7XS
  %ln8fB = load i64*, i64** %Sp_Var
  %ln8fC = getelementptr inbounds i64, i64* %ln8fB, i32 3
  %ln8fD = bitcast i64* %ln8fC to double*
  %ln8fE = load double, double* %ln8fD, !tbaa !2
  store double %ln8fE, double* %ls7XU
  %ln8fF = load i64*, i64** %Sp_Var
  %ln8fG = getelementptr inbounds i64, i64* %ln8fF, i32 2
  %ln8fH = bitcast i64* %ln8fG to double*
  %ln8fI = load double, double* %ln8fH, !tbaa !2
  %ln8fJ = fmul double %ln8fI, 0x406FE00000000000
  %ln8fK = bitcast i8* @rintDouble to double (double)*
  %ln8fL = call ccc double (double) %ln8fK( double %ln8fJ ) nounwind
  store double %ln8fL, double* %ls7Y0
  %ln8fM = load double, double* %ls7XS
  %ln8fN = fmul double %ln8fM, 0x406FE00000000000
  %ln8fO = bitcast i8* @rintDouble to double (double)*
  %ln8fP = call ccc double (double) %ln8fO( double %ln8fN ) nounwind
  store double %ln8fP, double* %ls7Y5
  %ln8fQ = load double, double* %ls7XU
  %ln8fR = fmul double %ln8fQ, 0x406FE00000000000
  %ln8fS = bitcast i8* @rintDouble to double (double)*
  %ln8fT = call ccc double (double) %ln8fS( double %ln8fR ) nounwind
  store double %ln8fT, double* %ls7Ya
  %ln8fU = load double, double* %ls7Y0
  %ln8fV = fptosi double %ln8fU to i64
  %ln8fW = load double, double* %ls7Y5
  %ln8fX = fptosi double %ln8fW to i64
  %ln8fY = mul i64 %ln8fX, 7
  %ln8fZ = load double, double* %ls7Ya
  %ln8g0 = fptosi double %ln8fZ to i64
  %ln8g1 = mul i64 %ln8g0, 23
  %ln8g2 = load i64, i64* %R1_Var
  %ln8g3 = mul i64 %ln8g2, 61
  %ln8g4 = add i64 %ln8g1, %ln8g3
  %ln8g5 = add i64 %ln8fY, %ln8g4
  %ln8g6 = add i64 %ln8fV, %ln8g5
  store i64 %ln8g6, i64* %R1_Var
  %ln8g7 = load i64*, i64** %Sp_Var
  %ln8g8 = getelementptr inbounds i64, i64* %ln8g7, i32 4
  %ln8g9 = ptrtoint i64* %ln8g8 to i64
  %ln8ga = inttoptr i64 %ln8g9 to i64*
  store i64* %ln8ga, i64** %Sp_Var
  %ln8gb = load i64*, i64** %Sp_Var
  %ln8gc = getelementptr inbounds i64, i64* %ln8gb, i32 0
  %ln8gd = bitcast i64* %ln8gc to i64*
  %ln8ge = load i64, i64* %ln8gd, !tbaa !2
  %ln8gf = inttoptr i64 %ln8ge to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8gg = load i64*, i64** %Sp_Var
  %ln8gh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8gf( i64* %Base_Arg, i64* %ln8gg, i64* %Hp_Arg, i64 %ln8gh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwgo1_closure_struct = type <{i64}>
@Main_zdwgo1_closure$def = internal global %Main_zdwgo1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo1_info$def to i64)}>
@Main_zdwgo1_closure = alias i8, bitcast (%Main_zdwgo1_closure_struct* @Main_zdwgo1_closure$def to i8*)
@Main_zdwgo1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo1_info$def to i8*)
define ghccc void @Main_zdwgo1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n8hO:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8gt
c8gt:
  %ln8hP = load i64*, i64** %Sp_Var
  %ln8hQ = getelementptr inbounds i64, i64* %ln8hP, i32 -4
  %ln8hR = ptrtoint i64* %ln8hQ to i64
  %ln8hS = icmp ult i64 %ln8hR, %SpLim_Arg
  %ln8hT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8hS, i1 0 )
  br i1 %ln8hT, label %c8gu, label %c8gv
c8gv:
  %ln8hV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gm_info$def to i64
  %ln8hU = load i64*, i64** %Sp_Var
  %ln8hW = getelementptr inbounds i64, i64* %ln8hU, i32 -1
  store i64 %ln8hV, i64* %ln8hW, !tbaa !2
  %ln8hX = load i64, i64* %R2_Var
  store i64 %ln8hX, i64* %R1_Var
  %ln8hY = load i64*, i64** %Sp_Var
  %ln8hZ = getelementptr inbounds i64, i64* %ln8hY, i32 -1
  %ln8i0 = ptrtoint i64* %ln8hZ to i64
  %ln8i1 = inttoptr i64 %ln8i0 to i64*
  store i64* %ln8i1, i64** %Sp_Var
  %ln8i2 = load i64, i64* %R1_Var
  %ln8i3 = and i64 %ln8i2, 7
  %ln8i4 = icmp ne i64 %ln8i3, 0
  br i1 %ln8i4, label %u8hK, label %c8gn
c8gn:
  %ln8i6 = load i64, i64* %R1_Var
  %ln8i7 = inttoptr i64 %ln8i6 to i64*
  %ln8i8 = load i64, i64* %ln8i7, !tbaa !4
  %ln8i9 = inttoptr i64 %ln8i8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ia = load i64*, i64** %Sp_Var
  %ln8ib = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8i9( i64* %Base_Arg, i64* %ln8ia, i64* %Hp_Arg, i64 %ln8ib, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hK:
  %ln8ic = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8id = load i64*, i64** %Sp_Var
  %ln8ie = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ic( i64* %Base_Arg, i64* %ln8id, i64* %Hp_Arg, i64 %ln8ie, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8gu:
  %ln8if = load i64, i64* %R2_Var
  store i64 %ln8if, i64* %R2_Var
  %ln8ig = ptrtoint %Main_zdwgo1_closure_struct* @Main_zdwgo1_closure$def to i64
  store i64 %ln8ig, i64* %R1_Var
  %ln8ih = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8ii = bitcast i64* %ln8ih to i64*
  %ln8ij = load i64, i64* %ln8ii, !tbaa !5
  %ln8ik = inttoptr i64 %ln8ij to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8il = load i64*, i64** %Sp_Var
  %ln8im = load i64, i64* %R1_Var
  %ln8in = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ik( i64* %Base_Arg, i64* %ln8il, i64* %Hp_Arg, i64 %ln8im, i64 %ln8in, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gm_info$def to i8*)
define internal ghccc void @c8gm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8io:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7B5 = alloca i64, i32 1
  br label %c8gm
c8gm:
  %ln8ip = load i64, i64* %R1_Var
  %ln8iq = and i64 %ln8ip, 7
  switch i64 %ln8iq, label %c8gq [i64 1, label %c8gq
i64 2, label %c8gr]
c8gq:
  store i64 0, i64* %R1_Var
  %ln8ir = load i64*, i64** %Sp_Var
  %ln8is = getelementptr inbounds i64, i64* %ln8ir, i32 1
  %ln8it = ptrtoint i64* %ln8is to i64
  %ln8iu = inttoptr i64 %ln8it to i64*
  store i64* %ln8iu, i64** %Sp_Var
  %ln8iv = load i64*, i64** %Sp_Var
  %ln8iw = getelementptr inbounds i64, i64* %ln8iv, i32 0
  %ln8ix = bitcast i64* %ln8iw to i64*
  %ln8iy = load i64, i64* %ln8ix, !tbaa !2
  %ln8iz = inttoptr i64 %ln8iy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8iA = load i64*, i64** %Sp_Var
  %ln8iB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8iz( i64* %Base_Arg, i64* %ln8iA, i64* %Hp_Arg, i64 %ln8iB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8gr:
  %ln8iD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gB_info$def to i64
  %ln8iC = load i64*, i64** %Sp_Var
  %ln8iE = getelementptr inbounds i64, i64* %ln8iC, i32 -1
  store i64 %ln8iD, i64* %ln8iE, !tbaa !2
  %ln8iH = load i64, i64* %R1_Var
  %ln8iI = add i64 %ln8iH, 14
  %ln8iJ = inttoptr i64 %ln8iI to i64*
  %ln8iK = load i64, i64* %ln8iJ, !tbaa !4
  store i64 %ln8iK, i64* %ls7B5
  %ln8iN = load i64, i64* %R1_Var
  %ln8iO = add i64 %ln8iN, 6
  %ln8iP = inttoptr i64 %ln8iO to i64*
  %ln8iQ = load i64, i64* %ln8iP, !tbaa !4
  store i64 %ln8iQ, i64* %R1_Var
  %ln8iS = load i64, i64* %ls7B5
  %ln8iR = load i64*, i64** %Sp_Var
  %ln8iT = getelementptr inbounds i64, i64* %ln8iR, i32 0
  store i64 %ln8iS, i64* %ln8iT, !tbaa !2
  %ln8iU = load i64*, i64** %Sp_Var
  %ln8iV = getelementptr inbounds i64, i64* %ln8iU, i32 -1
  %ln8iW = ptrtoint i64* %ln8iV to i64
  %ln8iX = inttoptr i64 %ln8iW to i64*
  store i64* %ln8iX, i64** %Sp_Var
  %ln8iY = load i64, i64* %R1_Var
  %ln8iZ = and i64 %ln8iY, 7
  %ln8j0 = icmp ne i64 %ln8iZ, 0
  br i1 %ln8j0, label %u8hJ, label %c8gC
c8gC:
  %ln8j2 = load i64, i64* %R1_Var
  %ln8j3 = inttoptr i64 %ln8j2 to i64*
  %ln8j4 = load i64, i64* %ln8j3, !tbaa !4
  %ln8j5 = inttoptr i64 %ln8j4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8j6 = load i64*, i64** %Sp_Var
  %ln8j7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8j5( i64* %Base_Arg, i64* %ln8j6, i64* %Hp_Arg, i64 %ln8j7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hJ:
  %ln8j8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8j9 = load i64*, i64** %Sp_Var
  %ln8ja = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8j8( i64* %Base_Arg, i64* %ln8j9, i64* %Hp_Arg, i64 %ln8ja, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gB_info$def to i8*)
define internal ghccc void @c8gB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8jb:
  %ls7B8 = alloca i64, i32 1
  %ls7B9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8gB
c8gB:
  %ln8jd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gG_info$def to i64
  %ln8jc = load i64*, i64** %Sp_Var
  %ln8je = getelementptr inbounds i64, i64* %ln8jc, i32 -2
  store i64 %ln8jd, i64* %ln8je, !tbaa !2
  %ln8jh = load i64, i64* %R1_Var
  %ln8ji = add i64 %ln8jh, 15
  %ln8jj = inttoptr i64 %ln8ji to i64*
  %ln8jk = load i64, i64* %ln8jj, !tbaa !4
  store i64 %ln8jk, i64* %ls7B8
  %ln8jn = load i64, i64* %R1_Var
  %ln8jo = add i64 %ln8jn, 23
  %ln8jp = inttoptr i64 %ln8jo to i64*
  %ln8jq = load i64, i64* %ln8jp, !tbaa !4
  store i64 %ln8jq, i64* %ls7B9
  %ln8jt = load i64, i64* %R1_Var
  %ln8ju = add i64 %ln8jt, 7
  %ln8jv = inttoptr i64 %ln8ju to i64*
  %ln8jw = load i64, i64* %ln8jv, !tbaa !4
  store i64 %ln8jw, i64* %R1_Var
  %ln8jy = load i64, i64* %ls7B9
  %ln8jx = load i64*, i64** %Sp_Var
  %ln8jz = getelementptr inbounds i64, i64* %ln8jx, i32 -1
  store i64 %ln8jy, i64* %ln8jz, !tbaa !2
  %ln8jB = load i64, i64* %ls7B8
  %ln8jA = load i64*, i64** %Sp_Var
  %ln8jC = getelementptr inbounds i64, i64* %ln8jA, i32 0
  store i64 %ln8jB, i64* %ln8jC, !tbaa !2
  %ln8jD = load i64*, i64** %Sp_Var
  %ln8jE = getelementptr inbounds i64, i64* %ln8jD, i32 -2
  %ln8jF = ptrtoint i64* %ln8jE to i64
  %ln8jG = inttoptr i64 %ln8jF to i64*
  store i64* %ln8jG, i64** %Sp_Var
  %ln8jH = load i64, i64* %R1_Var
  %ln8jI = and i64 %ln8jH, 7
  %ln8jJ = icmp ne i64 %ln8jI, 0
  br i1 %ln8jJ, label %u8hL, label %c8gH
c8gH:
  %ln8jL = load i64, i64* %R1_Var
  %ln8jM = inttoptr i64 %ln8jL to i64*
  %ln8jN = load i64, i64* %ln8jM, !tbaa !4
  %ln8jO = inttoptr i64 %ln8jN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jP = load i64*, i64** %Sp_Var
  %ln8jQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jO( i64* %Base_Arg, i64* %ln8jP, i64* %Hp_Arg, i64 %ln8jQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hL:
  %ln8jR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jS = load i64*, i64** %Sp_Var
  %ln8jT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jR( i64* %Base_Arg, i64* %ln8jS, i64* %Hp_Arg, i64 %ln8jT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gG_info$def to i8*)
define internal ghccc void @c8gG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n8jU:
  %ls7Bb = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8gG
c8gG:
  %ln8jV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gL_info$def to i64
  %ln8jW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8jV, i64* %ln8jW, !tbaa !2
  %ln8jZ = load i64, i64* %R1_Var
  %ln8k0 = add i64 %ln8jZ, 7
  %ln8k1 = inttoptr i64 %ln8k0 to double*
  %ln8k2 = load double, double* %ln8k1, !tbaa !4
  store double %ln8k2, double* %ls7Bb
  %ln8k3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8k4 = bitcast i64* %ln8k3 to i64*
  %ln8k5 = load i64, i64* %ln8k4, !tbaa !2
  store i64 %ln8k5, i64* %R1_Var
  %ln8k6 = load double, double* %ls7Bb
  %ln8k7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8k8 = bitcast i64* %ln8k7 to double*
  store double %ln8k6, double* %ln8k8, !tbaa !2
  %ln8k9 = load i64, i64* %R1_Var
  %ln8ka = and i64 %ln8k9, 7
  %ln8kb = icmp ne i64 %ln8ka, 0
  br i1 %ln8kb, label %u8hM, label %c8gM
c8gM:
  %ln8kd = load i64, i64* %R1_Var
  %ln8ke = inttoptr i64 %ln8kd to i64*
  %ln8kf = load i64, i64* %ln8ke, !tbaa !4
  %ln8kg = inttoptr i64 %ln8kf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8kg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8kh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hM:
  %ln8ki = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ki( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8kj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gL_info$def to i8*)
define internal ghccc void @c8gL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 0}>
{
n8kk:
  %ls7Bd = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8gL
c8gL:
  %ln8kl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gQ_info$def to i64
  %ln8km = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8kl, i64* %ln8km, !tbaa !2
  %ln8kp = load i64, i64* %R1_Var
  %ln8kq = add i64 %ln8kp, 7
  %ln8kr = inttoptr i64 %ln8kq to double*
  %ln8ks = load double, double* %ln8kr, !tbaa !4
  store double %ln8ks, double* %ls7Bd
  %ln8kt = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8ku = bitcast i64* %ln8kt to i64*
  %ln8kv = load i64, i64* %ln8ku, !tbaa !2
  store i64 %ln8kv, i64* %R1_Var
  %ln8kw = load double, double* %ls7Bd
  %ln8kx = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8ky = bitcast i64* %ln8kx to double*
  store double %ln8kw, double* %ln8ky, !tbaa !2
  %ln8kz = load i64, i64* %R1_Var
  %ln8kA = and i64 %ln8kz, 7
  %ln8kB = icmp ne i64 %ln8kA, 0
  br i1 %ln8kB, label %u8hN, label %c8gR
c8gR:
  %ln8kD = load i64, i64* %R1_Var
  %ln8kE = inttoptr i64 %ln8kD to i64*
  %ln8kF = load i64, i64* %ln8kE, !tbaa !4
  %ln8kG = inttoptr i64 %ln8kF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8kG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8kH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hN:
  %ln8kI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8kI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8kJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gQ_info$def to i8*)
define internal ghccc void @c8gQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 195, i32 30, i32 0}>
{
n8kK:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8gQ
c8gQ:
  %ln8kL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gV_info$def to i64
  %ln8kM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8kL, i64* %ln8kM, !tbaa !2
  %ln8kN = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln8kO = bitcast i64* %ln8kN to i64*
  %ln8kP = load i64, i64* %ln8kO, !tbaa !2
  store i64 %ln8kP, i64* %R2_Var
  %ln8kQ = add i64 %R1_Arg, 7
  %ln8kR = inttoptr i64 %ln8kQ to double*
  %ln8kS = load double, double* %ln8kR, !tbaa !4
  %ln8kT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln8kU = bitcast i64* %ln8kT to double*
  store double %ln8kS, double* %ln8kU, !tbaa !2
  %ln8kV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8kW = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8kV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8kW, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gV_info$def to i8*)
define internal ghccc void @c8gV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n8kX:
  %ls7Bd = alloca double, i32 1
  %ls7Bf = alloca double, i32 1
  %ls7Bl = alloca double, i32 1
  %ls7Bq = alloca double, i32 1
  %ls7Bv = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8gV
c8gV:
  %ln8kY = load i64*, i64** %Sp_Var
  %ln8kZ = getelementptr inbounds i64, i64* %ln8kY, i32 1
  %ln8l0 = bitcast i64* %ln8kZ to double*
  %ln8l1 = load double, double* %ln8l0, !tbaa !2
  store double %ln8l1, double* %ls7Bd
  %ln8l2 = load i64*, i64** %Sp_Var
  %ln8l3 = getelementptr inbounds i64, i64* %ln8l2, i32 3
  %ln8l4 = bitcast i64* %ln8l3 to double*
  %ln8l5 = load double, double* %ln8l4, !tbaa !2
  store double %ln8l5, double* %ls7Bf
  %ln8l6 = load i64*, i64** %Sp_Var
  %ln8l7 = getelementptr inbounds i64, i64* %ln8l6, i32 2
  %ln8l8 = bitcast i64* %ln8l7 to double*
  %ln8l9 = load double, double* %ln8l8, !tbaa !2
  %ln8la = fmul double %ln8l9, 0x406FE00000000000
  %ln8lb = bitcast i8* @rintDouble to double (double)*
  %ln8lc = call ccc double (double) %ln8lb( double %ln8la ) nounwind
  store double %ln8lc, double* %ls7Bl
  %ln8ld = load double, double* %ls7Bd
  %ln8le = fmul double %ln8ld, 0x406FE00000000000
  %ln8lf = bitcast i8* @rintDouble to double (double)*
  %ln8lg = call ccc double (double) %ln8lf( double %ln8le ) nounwind
  store double %ln8lg, double* %ls7Bq
  %ln8lh = load double, double* %ls7Bf
  %ln8li = fmul double %ln8lh, 0x406FE00000000000
  %ln8lj = bitcast i8* @rintDouble to double (double)*
  %ln8lk = call ccc double (double) %ln8lj( double %ln8li ) nounwind
  store double %ln8lk, double* %ls7Bv
  %ln8ll = load double, double* %ls7Bl
  %ln8lm = fptosi double %ln8ll to i64
  %ln8ln = load double, double* %ls7Bq
  %ln8lo = fptosi double %ln8ln to i64
  %ln8lp = mul i64 %ln8lo, 7
  %ln8lq = load double, double* %ls7Bv
  %ln8lr = fptosi double %ln8lq to i64
  %ln8ls = mul i64 %ln8lr, 23
  %ln8lt = load i64, i64* %R1_Var
  %ln8lu = mul i64 %ln8lt, 61
  %ln8lv = add i64 %ln8ls, %ln8lu
  %ln8lw = add i64 %ln8lp, %ln8lv
  %ln8lx = add i64 %ln8lm, %ln8lw
  store i64 %ln8lx, i64* %R1_Var
  %ln8ly = load i64*, i64** %Sp_Var
  %ln8lz = getelementptr inbounds i64, i64* %ln8ly, i32 4
  %ln8lA = ptrtoint i64* %ln8lz to i64
  %ln8lB = inttoptr i64 %ln8lA to i64*
  store i64* %ln8lB, i64** %Sp_Var
  %ln8lC = load i64*, i64** %Sp_Var
  %ln8lD = getelementptr inbounds i64, i64* %ln8lC, i32 0
  %ln8lE = bitcast i64* %ln8lD to i64*
  %ln8lF = load i64, i64* %ln8lE, !tbaa !2
  %ln8lG = inttoptr i64 %ln8lF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lH = load i64*, i64** %Sp_Var
  %ln8lI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8lG( i64* %Base_Arg, i64* %ln8lH, i64* %Hp_Arg, i64 %ln8lI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_hash_closure_struct = type <{i64}>
@Main_hash_closure$def = internal global %Main_hash_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_hash_info$def to i64)}>
@Main_hash_closure = alias i8, bitcast (%Main_hash_closure_struct* @Main_hash_closure$def to i8*)
@Main_hash_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_hash_info$def to i8*)
define ghccc void @Main_hash_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n8lY:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8lP
c8lP:
  %ln8lZ = load i64*, i64** %Sp_Var
  %ln8m0 = getelementptr inbounds i64, i64* %ln8lZ, i32 -1
  %ln8m1 = ptrtoint i64* %ln8m0 to i64
  %ln8m2 = icmp ult i64 %ln8m1, %SpLim_Arg
  %ln8m3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8m2, i1 0 )
  br i1 %ln8m3, label %c8lT, label %c8lU
c8lU:
  %ln8m5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8lN_info$def to i64
  %ln8m4 = load i64*, i64** %Sp_Var
  %ln8m6 = getelementptr inbounds i64, i64* %ln8m4, i32 -1
  store i64 %ln8m5, i64* %ln8m6, !tbaa !2
  %ln8m7 = load i64, i64* %R2_Var
  store i64 %ln8m7, i64* %R2_Var
  %ln8m8 = load i64*, i64** %Sp_Var
  %ln8m9 = getelementptr inbounds i64, i64* %ln8m8, i32 -1
  %ln8ma = ptrtoint i64* %ln8m9 to i64
  %ln8mb = inttoptr i64 %ln8ma to i64*
  store i64* %ln8mb, i64** %Sp_Var
  %ln8mc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8md = load i64*, i64** %Sp_Var
  %ln8me = load i64, i64* %R1_Var
  %ln8mf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mc( i64* %Base_Arg, i64* %ln8md, i64* %Hp_Arg, i64 %ln8me, i64 %ln8mf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8lT:
  %ln8mg = load i64, i64* %R2_Var
  store i64 %ln8mg, i64* %R2_Var
  %ln8mh = ptrtoint %Main_hash_closure_struct* @Main_hash_closure$def to i64
  store i64 %ln8mh, i64* %R1_Var
  %ln8mi = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8mj = bitcast i64* %ln8mi to i64*
  %ln8mk = load i64, i64* %ln8mj, !tbaa !5
  %ln8ml = inttoptr i64 %ln8mk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mm = load i64*, i64** %Sp_Var
  %ln8mn = load i64, i64* %R1_Var
  %ln8mo = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ml( i64* %Base_Arg, i64* %ln8mm, i64* %Hp_Arg, i64 %ln8mn, i64 %ln8mo, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8lN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8lN_info$def to i8*)
define internal ghccc void @c8lN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8mp:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8lN
c8lN:
  %ln8mq = load i64*, i64** %Hp_Var
  %ln8mr = getelementptr inbounds i64, i64* %ln8mq, i32 2
  %ln8ms = ptrtoint i64* %ln8mr to i64
  %ln8mt = inttoptr i64 %ln8ms to i64*
  store i64* %ln8mt, i64** %Hp_Var
  %ln8mu = load i64*, i64** %Hp_Var
  %ln8mv = ptrtoint i64* %ln8mu to i64
  %ln8mw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8mx = bitcast i64* %ln8mw to i64*
  %ln8my = load i64, i64* %ln8mx, !tbaa !5
  %ln8mz = icmp ugt i64 %ln8mv, %ln8my
  %ln8mA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8mz, i1 0 )
  br i1 %ln8mA, label %c8lX, label %c8lW
c8lW:
  %ln8mC = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %ln8mB = load i64*, i64** %Hp_Var
  %ln8mD = getelementptr inbounds i64, i64* %ln8mB, i32 -1
  store i64 %ln8mC, i64* %ln8mD, !tbaa !3
  %ln8mF = load i64, i64* %R1_Var
  %ln8mE = load i64*, i64** %Hp_Var
  %ln8mG = getelementptr inbounds i64, i64* %ln8mE, i32 0
  store i64 %ln8mF, i64* %ln8mG, !tbaa !3
  %ln8mI = load i64*, i64** %Hp_Var
  %ln8mJ = ptrtoint i64* %ln8mI to i64
  %ln8mK = add i64 %ln8mJ, -7
  store i64 %ln8mK, i64* %R1_Var
  %ln8mL = load i64*, i64** %Sp_Var
  %ln8mM = getelementptr inbounds i64, i64* %ln8mL, i32 1
  %ln8mN = ptrtoint i64* %ln8mM to i64
  %ln8mO = inttoptr i64 %ln8mN to i64*
  store i64* %ln8mO, i64** %Sp_Var
  %ln8mP = load i64*, i64** %Sp_Var
  %ln8mQ = getelementptr inbounds i64, i64* %ln8mP, i32 0
  %ln8mR = bitcast i64* %ln8mQ to i64*
  %ln8mS = load i64, i64* %ln8mR, !tbaa !2
  %ln8mT = inttoptr i64 %ln8mS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mU = load i64*, i64** %Sp_Var
  %ln8mV = load i64*, i64** %Hp_Var
  %ln8mW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mT( i64* %Base_Arg, i64* %ln8mU, i64* %ln8mV, i64 %ln8mW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8lX:
  %ln8mX = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8mX, !tbaa !5
  %ln8mY = load i64, i64* %R1_Var
  store i64 %ln8mY, i64* %R1_Var
  %ln8mZ = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8n0 = load i64*, i64** %Sp_Var
  %ln8n1 = load i64*, i64** %Hp_Var
  %ln8n2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mZ( i64* %Base_Arg, i64* %ln8n0, i64* %ln8n1, i64 %ln8n2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_spherenormal_closure_struct = type <{i64}>
@Main_spherenormal_closure$def = internal global %Main_spherenormal_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_spherenormal_info$def to i64)}>
@Main_spherenormal_closure = alias i8, bitcast (%Main_spherenormal_closure_struct* @Main_spherenormal_closure$def to i8*)
@s7Ax_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ax_info$def to i8*)
define internal ghccc void @s7Ax_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n8pF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nt
c8nt:
  %ln8pG = load i64*, i64** %Sp_Var
  %ln8pH = getelementptr inbounds i64, i64* %ln8pG, i32 -3
  %ln8pI = ptrtoint i64* %ln8pH to i64
  %ln8pJ = icmp ult i64 %ln8pI, %SpLim_Arg
  %ln8pK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8pJ, i1 0 )
  br i1 %ln8pK, label %c8nA, label %c8nB
c8nB:
  %ln8pM = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8pL = load i64*, i64** %Sp_Var
  %ln8pN = getelementptr inbounds i64, i64* %ln8pL, i32 -2
  store i64 %ln8pM, i64* %ln8pN, !tbaa !2
  %ln8pP = load i64, i64* %R1_Var
  %ln8pO = load i64*, i64** %Sp_Var
  %ln8pQ = getelementptr inbounds i64, i64* %ln8pO, i32 -1
  store i64 %ln8pP, i64* %ln8pQ, !tbaa !2
  %ln8pS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nq_info$def to i64
  %ln8pR = load i64*, i64** %Sp_Var
  %ln8pT = getelementptr inbounds i64, i64* %ln8pR, i32 -3
  store i64 %ln8pS, i64* %ln8pT, !tbaa !2
  %ln8pW = load i64, i64* %R1_Var
  %ln8pX = add i64 %ln8pW, 16
  %ln8pY = inttoptr i64 %ln8pX to i64*
  %ln8pZ = load i64, i64* %ln8pY, !tbaa !4
  store i64 %ln8pZ, i64* %R1_Var
  %ln8q0 = load i64*, i64** %Sp_Var
  %ln8q1 = getelementptr inbounds i64, i64* %ln8q0, i32 -3
  %ln8q2 = ptrtoint i64* %ln8q1 to i64
  %ln8q3 = inttoptr i64 %ln8q2 to i64*
  store i64* %ln8q3, i64** %Sp_Var
  %ln8q4 = load i64, i64* %R1_Var
  %ln8q5 = and i64 %ln8q4, 7
  %ln8q6 = icmp ne i64 %ln8q5, 0
  br i1 %ln8q6, label %u8nF, label %c8nr
c8nr:
  %ln8q8 = load i64, i64* %R1_Var
  %ln8q9 = inttoptr i64 %ln8q8 to i64*
  %ln8qa = load i64, i64* %ln8q9, !tbaa !4
  %ln8qb = inttoptr i64 %ln8qa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qc = load i64*, i64** %Sp_Var
  %ln8qd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qb( i64* %Base_Arg, i64* %ln8qc, i64* %Hp_Arg, i64 %ln8qd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8nF:
  %ln8qe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qf = load i64*, i64** %Sp_Var
  %ln8qg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qe( i64* %Base_Arg, i64* %ln8qf, i64* %Hp_Arg, i64 %ln8qg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8nA:
  %ln8qh = load i64, i64* %R1_Var
  store i64 %ln8qh, i64* %R1_Var
  %ln8qi = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8qj = bitcast i64* %ln8qi to i64*
  %ln8qk = load i64, i64* %ln8qj, !tbaa !5
  %ln8ql = inttoptr i64 %ln8qk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qm = load i64*, i64** %Sp_Var
  %ln8qn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ql( i64* %Base_Arg, i64* %ln8qm, i64* %Hp_Arg, i64 %ln8qn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nq_info$def to i8*)
define internal ghccc void @c8nq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8qo:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7AA = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nq
c8nq:
  %ln8qp = load i64*, i64** %Hp_Var
  %ln8qq = getelementptr inbounds i64, i64* %ln8qp, i32 2
  %ln8qr = ptrtoint i64* %ln8qq to i64
  %ln8qs = inttoptr i64 %ln8qr to i64*
  store i64* %ln8qs, i64** %Hp_Var
  %ln8qt = load i64*, i64** %Hp_Var
  %ln8qu = ptrtoint i64* %ln8qt to i64
  %ln8qv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8qw = bitcast i64* %ln8qv to i64*
  %ln8qx = load i64, i64* %ln8qw, !tbaa !5
  %ln8qy = icmp ugt i64 %ln8qu, %ln8qx
  %ln8qz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8qy, i1 0 )
  br i1 %ln8qz, label %c8nE, label %c8nD
c8nD:
  %ln8qC = load i64, i64* %R1_Var
  %ln8qD = add i64 %ln8qC, 7
  %ln8qE = inttoptr i64 %ln8qD to double*
  %ln8qF = load double, double* %ln8qE, !tbaa !4
  %ln8qG = fdiv double 0x3FF0000000000000, %ln8qF
  store double %ln8qG, double* %ls7AA
  %ln8qI = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln8qH = load i64*, i64** %Hp_Var
  %ln8qJ = getelementptr inbounds i64, i64* %ln8qH, i32 -1
  store i64 %ln8qI, i64* %ln8qJ, !tbaa !3
  %ln8qL = load double, double* %ls7AA
  %ln8qK = load i64*, i64** %Hp_Var
  %ln8qM = getelementptr inbounds i64, i64* %ln8qK, i32 0
  %ln8qN = bitcast i64* %ln8qM to double*
  store double %ln8qL, double* %ln8qN, !tbaa !3
  %ln8qP = load i64*, i64** %Hp_Var
  %ln8qQ = ptrtoint i64* %ln8qP to i64
  %ln8qR = add i64 %ln8qQ, -7
  store i64 %ln8qR, i64* %R1_Var
  %ln8qS = load i64*, i64** %Sp_Var
  %ln8qT = getelementptr inbounds i64, i64* %ln8qS, i32 1
  %ln8qU = ptrtoint i64* %ln8qT to i64
  %ln8qV = inttoptr i64 %ln8qU to i64*
  store i64* %ln8qV, i64** %Sp_Var
  %ln8qW = load i64*, i64** %Sp_Var
  %ln8qX = getelementptr inbounds i64, i64* %ln8qW, i32 0
  %ln8qY = bitcast i64* %ln8qX to i64*
  %ln8qZ = load i64, i64* %ln8qY, !tbaa !2
  %ln8r0 = inttoptr i64 %ln8qZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8r1 = load i64*, i64** %Sp_Var
  %ln8r2 = load i64*, i64** %Hp_Var
  %ln8r3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8r0( i64* %Base_Arg, i64* %ln8r1, i64* %ln8r2, i64 %ln8r3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8nE:
  %ln8r4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8r4, !tbaa !5
  %ln8r5 = load i64, i64* %R1_Var
  store i64 %ln8r5, i64* %R1_Var
  %ln8r6 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8r7 = load i64*, i64** %Sp_Var
  %ln8r8 = load i64*, i64** %Hp_Var
  %ln8r9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8r6( i64* %Base_Arg, i64* %ln8r7, i64* %ln8r8, i64 %ln8r9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7B1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7B1_info$def to i8*)
define internal ghccc void @s7B1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8ra:
  %ls7Aw = alloca i64, i32 1
  %ls7Ao = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nN
c8nN:
  %ln8rb = load i64*, i64** %Sp_Var
  %ln8rc = getelementptr inbounds i64, i64* %ln8rb, i32 -5
  %ln8rd = ptrtoint i64* %ln8rc to i64
  %ln8re = icmp ult i64 %ln8rd, %SpLim_Arg
  %ln8rf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8re, i1 0 )
  br i1 %ln8rf, label %c8o7, label %c8o8
c8o8:
  %ln8rh = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8rg = load i64*, i64** %Sp_Var
  %ln8ri = getelementptr inbounds i64, i64* %ln8rg, i32 -2
  store i64 %ln8rh, i64* %ln8ri, !tbaa !2
  %ln8rk = load i64, i64* %R1_Var
  %ln8rj = load i64*, i64** %Sp_Var
  %ln8rl = getelementptr inbounds i64, i64* %ln8rj, i32 -1
  store i64 %ln8rk, i64* %ln8rl, !tbaa !2
  %ln8rn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nK_info$def to i64
  %ln8rm = load i64*, i64** %Sp_Var
  %ln8ro = getelementptr inbounds i64, i64* %ln8rm, i32 -5
  store i64 %ln8rn, i64* %ln8ro, !tbaa !2
  %ln8rr = load i64, i64* %R1_Var
  %ln8rs = add i64 %ln8rr, 16
  %ln8rt = inttoptr i64 %ln8rs to i64*
  %ln8ru = load i64, i64* %ln8rt, !tbaa !4
  store i64 %ln8ru, i64* %ls7Aw
  %ln8rx = load i64, i64* %R1_Var
  %ln8ry = add i64 %ln8rx, 24
  %ln8rz = inttoptr i64 %ln8ry to i64*
  %ln8rA = load i64, i64* %ln8rz, !tbaa !4
  store i64 %ln8rA, i64* %ls7Ao
  %ln8rD = load i64, i64* %R1_Var
  %ln8rE = add i64 %ln8rD, 32
  %ln8rF = inttoptr i64 %ln8rE to i64*
  %ln8rG = load i64, i64* %ln8rF, !tbaa !4
  store i64 %ln8rG, i64* %R1_Var
  %ln8rI = load i64, i64* %ls7Ao
  %ln8rH = load i64*, i64** %Sp_Var
  %ln8rJ = getelementptr inbounds i64, i64* %ln8rH, i32 -4
  store i64 %ln8rI, i64* %ln8rJ, !tbaa !2
  %ln8rL = load i64, i64* %ls7Aw
  %ln8rK = load i64*, i64** %Sp_Var
  %ln8rM = getelementptr inbounds i64, i64* %ln8rK, i32 -3
  store i64 %ln8rL, i64* %ln8rM, !tbaa !2
  %ln8rN = load i64*, i64** %Sp_Var
  %ln8rO = getelementptr inbounds i64, i64* %ln8rN, i32 -5
  %ln8rP = ptrtoint i64* %ln8rO to i64
  %ln8rQ = inttoptr i64 %ln8rP to i64*
  store i64* %ln8rQ, i64** %Sp_Var
  %ln8rR = load i64, i64* %R1_Var
  %ln8rS = and i64 %ln8rR, 7
  %ln8rT = icmp ne i64 %ln8rS, 0
  br i1 %ln8rT, label %u8of, label %c8nL
c8nL:
  %ln8rV = load i64, i64* %R1_Var
  %ln8rW = inttoptr i64 %ln8rV to i64*
  %ln8rX = load i64, i64* %ln8rW, !tbaa !4
  %ln8rY = inttoptr i64 %ln8rX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8rZ = load i64*, i64** %Sp_Var
  %ln8s0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8rY( i64* %Base_Arg, i64* %ln8rZ, i64* %Hp_Arg, i64 %ln8s0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8of:
  %ln8s1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8s2 = load i64*, i64** %Sp_Var
  %ln8s3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8s1( i64* %Base_Arg, i64* %ln8s2, i64* %Hp_Arg, i64 %ln8s3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8o7:
  %ln8s4 = load i64, i64* %R1_Var
  store i64 %ln8s4, i64* %R1_Var
  %ln8s5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8s6 = bitcast i64* %ln8s5 to i64*
  %ln8s7 = load i64, i64* %ln8s6, !tbaa !5
  %ln8s8 = inttoptr i64 %ln8s7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8s9 = load i64*, i64** %Sp_Var
  %ln8sa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8s8( i64* %Base_Arg, i64* %ln8s9, i64* %Hp_Arg, i64 %ln8sa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nK_info$def to i8*)
define internal ghccc void @c8nK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n8sb:
  %ls7AU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8nK
c8nK:
  %ln8sc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nQ_info$def to i64
  %ln8sd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8sc, i64* %ln8sd, !tbaa !2
  %ln8sg = load i64, i64* %R1_Var
  %ln8sh = add i64 %ln8sg, 7
  %ln8si = inttoptr i64 %ln8sh to double*
  %ln8sj = load double, double* %ln8si, !tbaa !4
  store double %ln8sj, double* %ls7AU
  %ln8sk = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8sl = bitcast i64* %ln8sk to i64*
  %ln8sm = load i64, i64* %ln8sl, !tbaa !2
  store i64 %ln8sm, i64* %R1_Var
  %ln8sn = load double, double* %ls7AU
  %ln8so = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8sp = bitcast i64* %ln8so to double*
  store double %ln8sn, double* %ln8sp, !tbaa !2
  %ln8sq = load i64, i64* %R1_Var
  %ln8sr = and i64 %ln8sq, 7
  %ln8ss = icmp ne i64 %ln8sr, 0
  br i1 %ln8ss, label %u8oe, label %c8nR
c8nR:
  %ln8su = load i64, i64* %R1_Var
  %ln8sv = inttoptr i64 %ln8su to i64*
  %ln8sw = load i64, i64* %ln8sv, !tbaa !4
  %ln8sx = inttoptr i64 %ln8sw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8sy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8sy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8oe:
  %ln8sz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8sA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8sA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nQ_info$def to i8*)
define internal ghccc void @c8nQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n8sB:
  %ls7AW = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8nQ
c8nQ:
  %ln8sC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nV_info$def to i64
  %ln8sD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8sC, i64* %ln8sD, !tbaa !2
  %ln8sG = load i64, i64* %R1_Var
  %ln8sH = add i64 %ln8sG, 7
  %ln8sI = inttoptr i64 %ln8sH to double*
  %ln8sJ = load double, double* %ln8sI, !tbaa !4
  store double %ln8sJ, double* %ls7AW
  %ln8sK = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8sL = bitcast i64* %ln8sK to i64*
  %ln8sM = load i64, i64* %ln8sL, !tbaa !2
  store i64 %ln8sM, i64* %R1_Var
  %ln8sN = load double, double* %ls7AW
  %ln8sO = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8sP = bitcast i64* %ln8sO to double*
  store double %ln8sN, double* %ln8sP, !tbaa !2
  %ln8sQ = load i64, i64* %R1_Var
  %ln8sR = and i64 %ln8sQ, 7
  %ln8sS = icmp ne i64 %ln8sR, 0
  br i1 %ln8sS, label %u8og, label %c8nW
c8nW:
  %ln8sU = load i64, i64* %R1_Var
  %ln8sV = inttoptr i64 %ln8sU to i64*
  %ln8sW = load i64, i64* %ln8sV, !tbaa !4
  %ln8sX = inttoptr i64 %ln8sW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8sY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8sY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8og:
  %ln8sZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8t0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8t0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nV_info$def to i8*)
define internal ghccc void @c8nV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n8t1:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7B0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nV
c8nV:
  %ln8t2 = load i64*, i64** %Hp_Var
  %ln8t3 = getelementptr inbounds i64, i64* %ln8t2, i32 2
  %ln8t4 = ptrtoint i64* %ln8t3 to i64
  %ln8t5 = inttoptr i64 %ln8t4 to i64*
  store i64* %ln8t5, i64** %Hp_Var
  %ln8t6 = load i64*, i64** %Hp_Var
  %ln8t7 = ptrtoint i64* %ln8t6 to i64
  %ln8t8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8t9 = bitcast i64* %ln8t8 to i64*
  %ln8ta = load i64, i64* %ln8t9, !tbaa !5
  %ln8tb = icmp ugt i64 %ln8t7, %ln8ta
  %ln8tc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8tb, i1 0 )
  br i1 %ln8tc, label %c8od, label %c8oc
c8oc:
  %ln8td = load i64*, i64** %Sp_Var
  %ln8te = getelementptr inbounds i64, i64* %ln8td, i32 1
  %ln8tf = bitcast i64* %ln8te to double*
  %ln8tg = load double, double* %ln8tf, !tbaa !2
  %ln8th = load i64*, i64** %Sp_Var
  %ln8ti = getelementptr inbounds i64, i64* %ln8th, i32 2
  %ln8tj = bitcast i64* %ln8ti to double*
  %ln8tk = load double, double* %ln8tj, !tbaa !2
  %ln8tn = load i64, i64* %R1_Var
  %ln8to = add i64 %ln8tn, 7
  %ln8tp = inttoptr i64 %ln8to to double*
  %ln8tq = load double, double* %ln8tp, !tbaa !4
  %ln8tr = fsub double %ln8tk, %ln8tq
  %ln8ts = fmul double %ln8tg, %ln8tr
  store double %ln8ts, double* %ls7B0
  %ln8tu = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln8tt = load i64*, i64** %Hp_Var
  %ln8tv = getelementptr inbounds i64, i64* %ln8tt, i32 -1
  store i64 %ln8tu, i64* %ln8tv, !tbaa !3
  %ln8tx = load double, double* %ls7B0
  %ln8tw = load i64*, i64** %Hp_Var
  %ln8ty = getelementptr inbounds i64, i64* %ln8tw, i32 0
  %ln8tz = bitcast i64* %ln8ty to double*
  store double %ln8tx, double* %ln8tz, !tbaa !3
  %ln8tB = load i64*, i64** %Hp_Var
  %ln8tC = ptrtoint i64* %ln8tB to i64
  %ln8tD = add i64 %ln8tC, -7
  store i64 %ln8tD, i64* %R1_Var
  %ln8tE = load i64*, i64** %Sp_Var
  %ln8tF = getelementptr inbounds i64, i64* %ln8tE, i32 3
  %ln8tG = ptrtoint i64* %ln8tF to i64
  %ln8tH = inttoptr i64 %ln8tG to i64*
  store i64* %ln8tH, i64** %Sp_Var
  %ln8tI = load i64*, i64** %Sp_Var
  %ln8tJ = getelementptr inbounds i64, i64* %ln8tI, i32 0
  %ln8tK = bitcast i64* %ln8tJ to i64*
  %ln8tL = load i64, i64* %ln8tK, !tbaa !2
  %ln8tM = inttoptr i64 %ln8tL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tN = load i64*, i64** %Sp_Var
  %ln8tO = load i64*, i64** %Hp_Var
  %ln8tP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tM( i64* %Base_Arg, i64* %ln8tN, i64* %ln8tO, i64 %ln8tP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8od:
  %ln8tQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8tQ, !tbaa !5
  %ln8tR = load i64, i64* %R1_Var
  store i64 %ln8tR, i64* %R1_Var
  %ln8tS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tT = load i64*, i64** %Sp_Var
  %ln8tU = load i64*, i64** %Hp_Var
  %ln8tV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tS( i64* %Base_Arg, i64* %ln8tT, i64* %ln8tU, i64 %ln8tV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7AS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7AS_info$def to i8*)
define internal ghccc void @s7AS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8tW:
  %ls7Av = alloca i64, i32 1
  %ls7An = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8oo
c8oo:
  %ln8tX = load i64*, i64** %Sp_Var
  %ln8tY = getelementptr inbounds i64, i64* %ln8tX, i32 -5
  %ln8tZ = ptrtoint i64* %ln8tY to i64
  %ln8u0 = icmp ult i64 %ln8tZ, %SpLim_Arg
  %ln8u1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8u0, i1 0 )
  br i1 %ln8u1, label %c8oI, label %c8oJ
c8oJ:
  %ln8u3 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8u2 = load i64*, i64** %Sp_Var
  %ln8u4 = getelementptr inbounds i64, i64* %ln8u2, i32 -2
  store i64 %ln8u3, i64* %ln8u4, !tbaa !2
  %ln8u6 = load i64, i64* %R1_Var
  %ln8u5 = load i64*, i64** %Sp_Var
  %ln8u7 = getelementptr inbounds i64, i64* %ln8u5, i32 -1
  store i64 %ln8u6, i64* %ln8u7, !tbaa !2
  %ln8u9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ol_info$def to i64
  %ln8u8 = load i64*, i64** %Sp_Var
  %ln8ua = getelementptr inbounds i64, i64* %ln8u8, i32 -5
  store i64 %ln8u9, i64* %ln8ua, !tbaa !2
  %ln8ud = load i64, i64* %R1_Var
  %ln8ue = add i64 %ln8ud, 16
  %ln8uf = inttoptr i64 %ln8ue to i64*
  %ln8ug = load i64, i64* %ln8uf, !tbaa !4
  store i64 %ln8ug, i64* %ls7Av
  %ln8uj = load i64, i64* %R1_Var
  %ln8uk = add i64 %ln8uj, 24
  %ln8ul = inttoptr i64 %ln8uk to i64*
  %ln8um = load i64, i64* %ln8ul, !tbaa !4
  store i64 %ln8um, i64* %ls7An
  %ln8up = load i64, i64* %R1_Var
  %ln8uq = add i64 %ln8up, 32
  %ln8ur = inttoptr i64 %ln8uq to i64*
  %ln8us = load i64, i64* %ln8ur, !tbaa !4
  store i64 %ln8us, i64* %R1_Var
  %ln8uu = load i64, i64* %ls7An
  %ln8ut = load i64*, i64** %Sp_Var
  %ln8uv = getelementptr inbounds i64, i64* %ln8ut, i32 -4
  store i64 %ln8uu, i64* %ln8uv, !tbaa !2
  %ln8ux = load i64, i64* %ls7Av
  %ln8uw = load i64*, i64** %Sp_Var
  %ln8uy = getelementptr inbounds i64, i64* %ln8uw, i32 -3
  store i64 %ln8ux, i64* %ln8uy, !tbaa !2
  %ln8uz = load i64*, i64** %Sp_Var
  %ln8uA = getelementptr inbounds i64, i64* %ln8uz, i32 -5
  %ln8uB = ptrtoint i64* %ln8uA to i64
  %ln8uC = inttoptr i64 %ln8uB to i64*
  store i64* %ln8uC, i64** %Sp_Var
  %ln8uD = load i64, i64* %R1_Var
  %ln8uE = and i64 %ln8uD, 7
  %ln8uF = icmp ne i64 %ln8uE, 0
  br i1 %ln8uF, label %u8oQ, label %c8om
c8om:
  %ln8uH = load i64, i64* %R1_Var
  %ln8uI = inttoptr i64 %ln8uH to i64*
  %ln8uJ = load i64, i64* %ln8uI, !tbaa !4
  %ln8uK = inttoptr i64 %ln8uJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uL = load i64*, i64** %Sp_Var
  %ln8uM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uK( i64* %Base_Arg, i64* %ln8uL, i64* %Hp_Arg, i64 %ln8uM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8oQ:
  %ln8uN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ol_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uO = load i64*, i64** %Sp_Var
  %ln8uP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uN( i64* %Base_Arg, i64* %ln8uO, i64* %Hp_Arg, i64 %ln8uP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8oI:
  %ln8uQ = load i64, i64* %R1_Var
  store i64 %ln8uQ, i64* %R1_Var
  %ln8uR = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8uS = bitcast i64* %ln8uR to i64*
  %ln8uT = load i64, i64* %ln8uS, !tbaa !5
  %ln8uU = inttoptr i64 %ln8uT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uV = load i64*, i64** %Sp_Var
  %ln8uW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uU( i64* %Base_Arg, i64* %ln8uV, i64* %Hp_Arg, i64 %ln8uW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ol_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ol_info$def to i8*)
define internal ghccc void @c8ol_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n8uX:
  %ls7AL = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ol
c8ol:
  %ln8uY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8or_info$def to i64
  %ln8uZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8uY, i64* %ln8uZ, !tbaa !2
  %ln8v2 = load i64, i64* %R1_Var
  %ln8v3 = add i64 %ln8v2, 7
  %ln8v4 = inttoptr i64 %ln8v3 to double*
  %ln8v5 = load double, double* %ln8v4, !tbaa !4
  store double %ln8v5, double* %ls7AL
  %ln8v6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8v7 = bitcast i64* %ln8v6 to i64*
  %ln8v8 = load i64, i64* %ln8v7, !tbaa !2
  store i64 %ln8v8, i64* %R1_Var
  %ln8v9 = load double, double* %ls7AL
  %ln8va = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8vb = bitcast i64* %ln8va to double*
  store double %ln8v9, double* %ln8vb, !tbaa !2
  %ln8vc = load i64, i64* %R1_Var
  %ln8vd = and i64 %ln8vc, 7
  %ln8ve = icmp ne i64 %ln8vd, 0
  br i1 %ln8ve, label %u8oP, label %c8os
c8os:
  %ln8vg = load i64, i64* %R1_Var
  %ln8vh = inttoptr i64 %ln8vg to i64*
  %ln8vi = load i64, i64* %ln8vh, !tbaa !4
  %ln8vj = inttoptr i64 %ln8vi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8vk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8oP:
  %ln8vl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8or_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8vm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8or_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8or_info$def to i8*)
define internal ghccc void @c8or_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n8vn:
  %ls7AN = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8or
c8or:
  %ln8vo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ow_info$def to i64
  %ln8vp = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8vo, i64* %ln8vp, !tbaa !2
  %ln8vs = load i64, i64* %R1_Var
  %ln8vt = add i64 %ln8vs, 7
  %ln8vu = inttoptr i64 %ln8vt to double*
  %ln8vv = load double, double* %ln8vu, !tbaa !4
  store double %ln8vv, double* %ls7AN
  %ln8vw = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8vx = bitcast i64* %ln8vw to i64*
  %ln8vy = load i64, i64* %ln8vx, !tbaa !2
  store i64 %ln8vy, i64* %R1_Var
  %ln8vz = load double, double* %ls7AN
  %ln8vA = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8vB = bitcast i64* %ln8vA to double*
  store double %ln8vz, double* %ln8vB, !tbaa !2
  %ln8vC = load i64, i64* %R1_Var
  %ln8vD = and i64 %ln8vC, 7
  %ln8vE = icmp ne i64 %ln8vD, 0
  br i1 %ln8vE, label %u8oR, label %c8ox
c8ox:
  %ln8vG = load i64, i64* %R1_Var
  %ln8vH = inttoptr i64 %ln8vG to i64*
  %ln8vI = load i64, i64* %ln8vH, !tbaa !4
  %ln8vJ = inttoptr i64 %ln8vI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8vK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8oR:
  %ln8vL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ow_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8vM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ow_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ow_info$def to i8*)
define internal ghccc void @c8ow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n8vN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7AR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8ow
c8ow:
  %ln8vO = load i64*, i64** %Hp_Var
  %ln8vP = getelementptr inbounds i64, i64* %ln8vO, i32 2
  %ln8vQ = ptrtoint i64* %ln8vP to i64
  %ln8vR = inttoptr i64 %ln8vQ to i64*
  store i64* %ln8vR, i64** %Hp_Var
  %ln8vS = load i64*, i64** %Hp_Var
  %ln8vT = ptrtoint i64* %ln8vS to i64
  %ln8vU = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8vV = bitcast i64* %ln8vU to i64*
  %ln8vW = load i64, i64* %ln8vV, !tbaa !5
  %ln8vX = icmp ugt i64 %ln8vT, %ln8vW
  %ln8vY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8vX, i1 0 )
  br i1 %ln8vY, label %c8oO, label %c8oN
c8oN:
  %ln8vZ = load i64*, i64** %Sp_Var
  %ln8w0 = getelementptr inbounds i64, i64* %ln8vZ, i32 1
  %ln8w1 = bitcast i64* %ln8w0 to double*
  %ln8w2 = load double, double* %ln8w1, !tbaa !2
  %ln8w3 = load i64*, i64** %Sp_Var
  %ln8w4 = getelementptr inbounds i64, i64* %ln8w3, i32 2
  %ln8w5 = bitcast i64* %ln8w4 to double*
  %ln8w6 = load double, double* %ln8w5, !tbaa !2
  %ln8w9 = load i64, i64* %R1_Var
  %ln8wa = add i64 %ln8w9, 7
  %ln8wb = inttoptr i64 %ln8wa to double*
  %ln8wc = load double, double* %ln8wb, !tbaa !4
  %ln8wd = fsub double %ln8w6, %ln8wc
  %ln8we = fmul double %ln8w2, %ln8wd
  store double %ln8we, double* %ls7AR
  %ln8wg = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln8wf = load i64*, i64** %Hp_Var
  %ln8wh = getelementptr inbounds i64, i64* %ln8wf, i32 -1
  store i64 %ln8wg, i64* %ln8wh, !tbaa !3
  %ln8wj = load double, double* %ls7AR
  %ln8wi = load i64*, i64** %Hp_Var
  %ln8wk = getelementptr inbounds i64, i64* %ln8wi, i32 0
  %ln8wl = bitcast i64* %ln8wk to double*
  store double %ln8wj, double* %ln8wl, !tbaa !3
  %ln8wn = load i64*, i64** %Hp_Var
  %ln8wo = ptrtoint i64* %ln8wn to i64
  %ln8wp = add i64 %ln8wo, -7
  store i64 %ln8wp, i64* %R1_Var
  %ln8wq = load i64*, i64** %Sp_Var
  %ln8wr = getelementptr inbounds i64, i64* %ln8wq, i32 3
  %ln8ws = ptrtoint i64* %ln8wr to i64
  %ln8wt = inttoptr i64 %ln8ws to i64*
  store i64* %ln8wt, i64** %Sp_Var
  %ln8wu = load i64*, i64** %Sp_Var
  %ln8wv = getelementptr inbounds i64, i64* %ln8wu, i32 0
  %ln8ww = bitcast i64* %ln8wv to i64*
  %ln8wx = load i64, i64* %ln8ww, !tbaa !2
  %ln8wy = inttoptr i64 %ln8wx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wz = load i64*, i64** %Sp_Var
  %ln8wA = load i64*, i64** %Hp_Var
  %ln8wB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wy( i64* %Base_Arg, i64* %ln8wz, i64* %ln8wA, i64 %ln8wB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8oO:
  %ln8wC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8wC, !tbaa !5
  %ln8wD = load i64, i64* %R1_Var
  store i64 %ln8wD, i64* %R1_Var
  %ln8wE = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wF = load i64*, i64** %Sp_Var
  %ln8wG = load i64*, i64** %Hp_Var
  %ln8wH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wE( i64* %Base_Arg, i64* %ln8wF, i64* %ln8wG, i64 %ln8wH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7AJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7AJ_info$def to i8*)
define internal ghccc void @s7AJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8wI:
  %ls7Au = alloca i64, i32 1
  %ls7Am = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8oZ
c8oZ:
  %ln8wJ = load i64*, i64** %Sp_Var
  %ln8wK = getelementptr inbounds i64, i64* %ln8wJ, i32 -5
  %ln8wL = ptrtoint i64* %ln8wK to i64
  %ln8wM = icmp ult i64 %ln8wL, %SpLim_Arg
  %ln8wN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8wM, i1 0 )
  br i1 %ln8wN, label %c8pj, label %c8pk
c8pk:
  %ln8wP = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8wO = load i64*, i64** %Sp_Var
  %ln8wQ = getelementptr inbounds i64, i64* %ln8wO, i32 -2
  store i64 %ln8wP, i64* %ln8wQ, !tbaa !2
  %ln8wS = load i64, i64* %R1_Var
  %ln8wR = load i64*, i64** %Sp_Var
  %ln8wT = getelementptr inbounds i64, i64* %ln8wR, i32 -1
  store i64 %ln8wS, i64* %ln8wT, !tbaa !2
  %ln8wV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oW_info$def to i64
  %ln8wU = load i64*, i64** %Sp_Var
  %ln8wW = getelementptr inbounds i64, i64* %ln8wU, i32 -5
  store i64 %ln8wV, i64* %ln8wW, !tbaa !2
  %ln8wZ = load i64, i64* %R1_Var
  %ln8x0 = add i64 %ln8wZ, 16
  %ln8x1 = inttoptr i64 %ln8x0 to i64*
  %ln8x2 = load i64, i64* %ln8x1, !tbaa !4
  store i64 %ln8x2, i64* %ls7Au
  %ln8x5 = load i64, i64* %R1_Var
  %ln8x6 = add i64 %ln8x5, 24
  %ln8x7 = inttoptr i64 %ln8x6 to i64*
  %ln8x8 = load i64, i64* %ln8x7, !tbaa !4
  store i64 %ln8x8, i64* %ls7Am
  %ln8xb = load i64, i64* %R1_Var
  %ln8xc = add i64 %ln8xb, 32
  %ln8xd = inttoptr i64 %ln8xc to i64*
  %ln8xe = load i64, i64* %ln8xd, !tbaa !4
  store i64 %ln8xe, i64* %R1_Var
  %ln8xg = load i64, i64* %ls7Am
  %ln8xf = load i64*, i64** %Sp_Var
  %ln8xh = getelementptr inbounds i64, i64* %ln8xf, i32 -4
  store i64 %ln8xg, i64* %ln8xh, !tbaa !2
  %ln8xj = load i64, i64* %ls7Au
  %ln8xi = load i64*, i64** %Sp_Var
  %ln8xk = getelementptr inbounds i64, i64* %ln8xi, i32 -3
  store i64 %ln8xj, i64* %ln8xk, !tbaa !2
  %ln8xl = load i64*, i64** %Sp_Var
  %ln8xm = getelementptr inbounds i64, i64* %ln8xl, i32 -5
  %ln8xn = ptrtoint i64* %ln8xm to i64
  %ln8xo = inttoptr i64 %ln8xn to i64*
  store i64* %ln8xo, i64** %Sp_Var
  %ln8xp = load i64, i64* %R1_Var
  %ln8xq = and i64 %ln8xp, 7
  %ln8xr = icmp ne i64 %ln8xq, 0
  br i1 %ln8xr, label %u8pr, label %c8oX
c8oX:
  %ln8xt = load i64, i64* %R1_Var
  %ln8xu = inttoptr i64 %ln8xt to i64*
  %ln8xv = load i64, i64* %ln8xu, !tbaa !4
  %ln8xw = inttoptr i64 %ln8xv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xx = load i64*, i64** %Sp_Var
  %ln8xy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xw( i64* %Base_Arg, i64* %ln8xx, i64* %Hp_Arg, i64 %ln8xy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8pr:
  %ln8xz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xA = load i64*, i64** %Sp_Var
  %ln8xB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xz( i64* %Base_Arg, i64* %ln8xA, i64* %Hp_Arg, i64 %ln8xB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8pj:
  %ln8xC = load i64, i64* %R1_Var
  store i64 %ln8xC, i64* %R1_Var
  %ln8xD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8xE = bitcast i64* %ln8xD to i64*
  %ln8xF = load i64, i64* %ln8xE, !tbaa !5
  %ln8xG = inttoptr i64 %ln8xF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xH = load i64*, i64** %Sp_Var
  %ln8xI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xG( i64* %Base_Arg, i64* %ln8xH, i64* %Hp_Arg, i64 %ln8xI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8oW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oW_info$def to i8*)
define internal ghccc void @c8oW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n8xJ:
  %ls7AC = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8oW
c8oW:
  %ln8xK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p2_info$def to i64
  %ln8xL = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8xK, i64* %ln8xL, !tbaa !2
  %ln8xO = load i64, i64* %R1_Var
  %ln8xP = add i64 %ln8xO, 7
  %ln8xQ = inttoptr i64 %ln8xP to double*
  %ln8xR = load double, double* %ln8xQ, !tbaa !4
  store double %ln8xR, double* %ls7AC
  %ln8xS = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8xT = bitcast i64* %ln8xS to i64*
  %ln8xU = load i64, i64* %ln8xT, !tbaa !2
  store i64 %ln8xU, i64* %R1_Var
  %ln8xV = load double, double* %ls7AC
  %ln8xW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8xX = bitcast i64* %ln8xW to double*
  store double %ln8xV, double* %ln8xX, !tbaa !2
  %ln8xY = load i64, i64* %R1_Var
  %ln8xZ = and i64 %ln8xY, 7
  %ln8y0 = icmp ne i64 %ln8xZ, 0
  br i1 %ln8y0, label %u8pq, label %c8p3
c8p3:
  %ln8y2 = load i64, i64* %R1_Var
  %ln8y3 = inttoptr i64 %ln8y2 to i64*
  %ln8y4 = load i64, i64* %ln8y3, !tbaa !4
  %ln8y5 = inttoptr i64 %ln8y4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8y6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8y5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8y6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8pq:
  %ln8y7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8y8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8y7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8y8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8p2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p2_info$def to i8*)
define internal ghccc void @c8p2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n8y9:
  %ls7AE = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8p2
c8p2:
  %ln8ya = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p7_info$def to i64
  %ln8yb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8ya, i64* %ln8yb, !tbaa !2
  %ln8ye = load i64, i64* %R1_Var
  %ln8yf = add i64 %ln8ye, 7
  %ln8yg = inttoptr i64 %ln8yf to double*
  %ln8yh = load double, double* %ln8yg, !tbaa !4
  store double %ln8yh, double* %ls7AE
  %ln8yi = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8yj = bitcast i64* %ln8yi to i64*
  %ln8yk = load i64, i64* %ln8yj, !tbaa !2
  store i64 %ln8yk, i64* %R1_Var
  %ln8yl = load double, double* %ls7AE
  %ln8ym = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8yn = bitcast i64* %ln8ym to double*
  store double %ln8yl, double* %ln8yn, !tbaa !2
  %ln8yo = load i64, i64* %R1_Var
  %ln8yp = and i64 %ln8yo, 7
  %ln8yq = icmp ne i64 %ln8yp, 0
  br i1 %ln8yq, label %u8ps, label %c8p8
c8p8:
  %ln8ys = load i64, i64* %R1_Var
  %ln8yt = inttoptr i64 %ln8ys to i64*
  %ln8yu = load i64, i64* %ln8yt, !tbaa !4
  %ln8yv = inttoptr i64 %ln8yu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8yw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8ps:
  %ln8yx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8yy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8p7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8p7_info$def to i8*)
define internal ghccc void @c8p7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n8yz:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7AI = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8p7
c8p7:
  %ln8yA = load i64*, i64** %Hp_Var
  %ln8yB = getelementptr inbounds i64, i64* %ln8yA, i32 2
  %ln8yC = ptrtoint i64* %ln8yB to i64
  %ln8yD = inttoptr i64 %ln8yC to i64*
  store i64* %ln8yD, i64** %Hp_Var
  %ln8yE = load i64*, i64** %Hp_Var
  %ln8yF = ptrtoint i64* %ln8yE to i64
  %ln8yG = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8yH = bitcast i64* %ln8yG to i64*
  %ln8yI = load i64, i64* %ln8yH, !tbaa !5
  %ln8yJ = icmp ugt i64 %ln8yF, %ln8yI
  %ln8yK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8yJ, i1 0 )
  br i1 %ln8yK, label %c8pp, label %c8po
c8po:
  %ln8yL = load i64*, i64** %Sp_Var
  %ln8yM = getelementptr inbounds i64, i64* %ln8yL, i32 1
  %ln8yN = bitcast i64* %ln8yM to double*
  %ln8yO = load double, double* %ln8yN, !tbaa !2
  %ln8yP = load i64*, i64** %Sp_Var
  %ln8yQ = getelementptr inbounds i64, i64* %ln8yP, i32 2
  %ln8yR = bitcast i64* %ln8yQ to double*
  %ln8yS = load double, double* %ln8yR, !tbaa !2
  %ln8yV = load i64, i64* %R1_Var
  %ln8yW = add i64 %ln8yV, 7
  %ln8yX = inttoptr i64 %ln8yW to double*
  %ln8yY = load double, double* %ln8yX, !tbaa !4
  %ln8yZ = fsub double %ln8yS, %ln8yY
  %ln8z0 = fmul double %ln8yO, %ln8yZ
  store double %ln8z0, double* %ls7AI
  %ln8z2 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln8z1 = load i64*, i64** %Hp_Var
  %ln8z3 = getelementptr inbounds i64, i64* %ln8z1, i32 -1
  store i64 %ln8z2, i64* %ln8z3, !tbaa !3
  %ln8z5 = load double, double* %ls7AI
  %ln8z4 = load i64*, i64** %Hp_Var
  %ln8z6 = getelementptr inbounds i64, i64* %ln8z4, i32 0
  %ln8z7 = bitcast i64* %ln8z6 to double*
  store double %ln8z5, double* %ln8z7, !tbaa !3
  %ln8z9 = load i64*, i64** %Hp_Var
  %ln8za = ptrtoint i64* %ln8z9 to i64
  %ln8zb = add i64 %ln8za, -7
  store i64 %ln8zb, i64* %R1_Var
  %ln8zc = load i64*, i64** %Sp_Var
  %ln8zd = getelementptr inbounds i64, i64* %ln8zc, i32 3
  %ln8ze = ptrtoint i64* %ln8zd to i64
  %ln8zf = inttoptr i64 %ln8ze to i64*
  store i64* %ln8zf, i64** %Sp_Var
  %ln8zg = load i64*, i64** %Sp_Var
  %ln8zh = getelementptr inbounds i64, i64* %ln8zg, i32 0
  %ln8zi = bitcast i64* %ln8zh to i64*
  %ln8zj = load i64, i64* %ln8zi, !tbaa !2
  %ln8zk = inttoptr i64 %ln8zj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zl = load i64*, i64** %Sp_Var
  %ln8zm = load i64*, i64** %Hp_Var
  %ln8zn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zk( i64* %Base_Arg, i64* %ln8zl, i64* %ln8zm, i64 %ln8zn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8pp:
  %ln8zo = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8zo, !tbaa !5
  %ln8zp = load i64, i64* %R1_Var
  store i64 %ln8zp, i64* %R1_Var
  %ln8zq = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zr = load i64*, i64** %Sp_Var
  %ln8zs = load i64*, i64** %Hp_Var
  %ln8zt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zq( i64* %Base_Arg, i64* %ln8zr, i64* %ln8zs, i64 %ln8zt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_spherenormal_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_spherenormal_info$def to i8*)
define ghccc void @Main_spherenormal_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
n8zu:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8pt
c8pt:
  %ln8zv = load i64*, i64** %Sp_Var
  %ln8zw = getelementptr inbounds i64, i64* %ln8zv, i32 -5
  %ln8zx = ptrtoint i64* %ln8zw to i64
  %ln8zy = icmp ult i64 %ln8zx, %SpLim_Arg
  %ln8zz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8zy, i1 0 )
  br i1 %ln8zz, label %c8pv, label %c8pw
c8pw:
  %ln8zB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8n7_info$def to i64
  %ln8zA = load i64*, i64** %Sp_Var
  %ln8zC = getelementptr inbounds i64, i64* %ln8zA, i32 -2
  store i64 %ln8zB, i64* %ln8zC, !tbaa !2
  %ln8zD = load i64, i64* %R2_Var
  store i64 %ln8zD, i64* %R1_Var
  %ln8zF = load i64, i64* %R3_Var
  %ln8zE = load i64*, i64** %Sp_Var
  %ln8zG = getelementptr inbounds i64, i64* %ln8zE, i32 -1
  store i64 %ln8zF, i64* %ln8zG, !tbaa !2
  %ln8zH = load i64*, i64** %Sp_Var
  %ln8zI = getelementptr inbounds i64, i64* %ln8zH, i32 -2
  %ln8zJ = ptrtoint i64* %ln8zI to i64
  %ln8zK = inttoptr i64 %ln8zJ to i64*
  store i64* %ln8zK, i64** %Sp_Var
  %ln8zL = load i64, i64* %R1_Var
  %ln8zM = and i64 %ln8zL, 7
  %ln8zN = icmp ne i64 %ln8zM, 0
  br i1 %ln8zN, label %u8pE, label %c8n8
c8n8:
  %ln8zP = load i64, i64* %R1_Var
  %ln8zQ = inttoptr i64 %ln8zP to i64*
  %ln8zR = load i64, i64* %ln8zQ, !tbaa !4
  %ln8zS = inttoptr i64 %ln8zR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zT = load i64*, i64** %Sp_Var
  %ln8zU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zS( i64* %Base_Arg, i64* %ln8zT, i64* %Hp_Arg, i64 %ln8zU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8pE:
  %ln8zV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8n7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zW = load i64*, i64** %Sp_Var
  %ln8zX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zV( i64* %Base_Arg, i64* %ln8zW, i64* %Hp_Arg, i64 %ln8zX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8pv:
  %ln8zY = load i64, i64* %R3_Var
  store i64 %ln8zY, i64* %R3_Var
  %ln8zZ = load i64, i64* %R2_Var
  store i64 %ln8zZ, i64* %R2_Var
  %ln8A0 = ptrtoint %Main_spherenormal_closure_struct* @Main_spherenormal_closure$def to i64
  store i64 %ln8A0, i64* %R1_Var
  %ln8A1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8A2 = bitcast i64* %ln8A1 to i64*
  %ln8A3 = load i64, i64* %ln8A2, !tbaa !5
  %ln8A4 = inttoptr i64 %ln8A3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8A5 = load i64*, i64** %Sp_Var
  %ln8A6 = load i64, i64* %R1_Var
  %ln8A7 = load i64, i64* %R2_Var
  %ln8A8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8A4( i64* %Base_Arg, i64* %ln8A5, i64* %Hp_Arg, i64 %ln8A6, i64 %ln8A7, i64 %ln8A8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8n7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8n7_info$def to i8*)
define internal ghccc void @c8n7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n8A9:
  %ls7Am = alloca i64, i32 1
  %ls7An = alloca i64, i32 1
  %ls7Ao = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8n7
c8n7:
  %ln8Ab = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nc_info$def to i64
  %ln8Aa = load i64*, i64** %Sp_Var
  %ln8Ac = getelementptr inbounds i64, i64* %ln8Aa, i32 -2
  store i64 %ln8Ab, i64* %ln8Ac, !tbaa !2
  %ln8Af = load i64, i64* %R1_Var
  %ln8Ag = add i64 %ln8Af, 7
  %ln8Ah = inttoptr i64 %ln8Ag to i64*
  %ln8Ai = load i64, i64* %ln8Ah, !tbaa !4
  store i64 %ln8Ai, i64* %ls7Am
  %ln8Al = load i64, i64* %R1_Var
  %ln8Am = add i64 %ln8Al, 15
  %ln8An = inttoptr i64 %ln8Am to i64*
  %ln8Ao = load i64, i64* %ln8An, !tbaa !4
  store i64 %ln8Ao, i64* %ls7An
  %ln8Ar = load i64, i64* %R1_Var
  %ln8As = add i64 %ln8Ar, 23
  %ln8At = inttoptr i64 %ln8As to i64*
  %ln8Au = load i64, i64* %ln8At, !tbaa !4
  store i64 %ln8Au, i64* %ls7Ao
  %ln8Av = load i64*, i64** %Sp_Var
  %ln8Aw = getelementptr inbounds i64, i64* %ln8Av, i32 1
  %ln8Ax = bitcast i64* %ln8Aw to i64*
  %ln8Ay = load i64, i64* %ln8Ax, !tbaa !2
  store i64 %ln8Ay, i64* %R1_Var
  %ln8AA = load i64, i64* %ls7Ao
  %ln8Az = load i64*, i64** %Sp_Var
  %ln8AB = getelementptr inbounds i64, i64* %ln8Az, i32 -1
  store i64 %ln8AA, i64* %ln8AB, !tbaa !2
  %ln8AD = load i64, i64* %ls7An
  %ln8AC = load i64*, i64** %Sp_Var
  %ln8AE = getelementptr inbounds i64, i64* %ln8AC, i32 0
  store i64 %ln8AD, i64* %ln8AE, !tbaa !2
  %ln8AG = load i64, i64* %ls7Am
  %ln8AF = load i64*, i64** %Sp_Var
  %ln8AH = getelementptr inbounds i64, i64* %ln8AF, i32 1
  store i64 %ln8AG, i64* %ln8AH, !tbaa !2
  %ln8AI = load i64*, i64** %Sp_Var
  %ln8AJ = getelementptr inbounds i64, i64* %ln8AI, i32 -2
  %ln8AK = ptrtoint i64* %ln8AJ to i64
  %ln8AL = inttoptr i64 %ln8AK to i64*
  store i64* %ln8AL, i64** %Sp_Var
  %ln8AM = load i64, i64* %R1_Var
  %ln8AN = and i64 %ln8AM, 7
  %ln8AO = icmp ne i64 %ln8AN, 0
  br i1 %ln8AO, label %u8pC, label %c8nd
c8nd:
  %ln8AQ = load i64, i64* %R1_Var
  %ln8AR = inttoptr i64 %ln8AQ to i64*
  %ln8AS = load i64, i64* %ln8AR, !tbaa !4
  %ln8AT = inttoptr i64 %ln8AS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8AU = load i64*, i64** %Sp_Var
  %ln8AV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8AT( i64* %Base_Arg, i64* %ln8AU, i64* %Hp_Arg, i64 %ln8AV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8pC:
  %ln8AW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8AX = load i64*, i64** %Sp_Var
  %ln8AY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8AW( i64* %Base_Arg, i64* %ln8AX, i64* %Hp_Arg, i64 %ln8AY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nc_info$def to i8*)
define internal ghccc void @c8nc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n8AZ:
  %ls7Ar = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nc
c8nc:
  %ln8B1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nh_info$def to i64
  %ln8B0 = load i64*, i64** %Sp_Var
  %ln8B2 = getelementptr inbounds i64, i64* %ln8B0, i32 -1
  store i64 %ln8B1, i64* %ln8B2, !tbaa !2
  %ln8B5 = load i64, i64* %R1_Var
  %ln8B6 = add i64 %ln8B5, 15
  %ln8B7 = inttoptr i64 %ln8B6 to i64*
  %ln8B8 = load i64, i64* %ln8B7, !tbaa !4
  store i64 %ln8B8, i64* %ls7Ar
  %ln8Bb = load i64, i64* %R1_Var
  %ln8Bc = add i64 %ln8Bb, 7
  %ln8Bd = inttoptr i64 %ln8Bc to i64*
  %ln8Be = load i64, i64* %ln8Bd, !tbaa !4
  store i64 %ln8Be, i64* %R1_Var
  %ln8Bg = load i64, i64* %ls7Ar
  %ln8Bf = load i64*, i64** %Sp_Var
  %ln8Bh = getelementptr inbounds i64, i64* %ln8Bf, i32 0
  store i64 %ln8Bg, i64* %ln8Bh, !tbaa !2
  %ln8Bi = load i64*, i64** %Sp_Var
  %ln8Bj = getelementptr inbounds i64, i64* %ln8Bi, i32 -1
  %ln8Bk = ptrtoint i64* %ln8Bj to i64
  %ln8Bl = inttoptr i64 %ln8Bk to i64*
  store i64* %ln8Bl, i64** %Sp_Var
  %ln8Bm = load i64, i64* %R1_Var
  %ln8Bn = and i64 %ln8Bm, 7
  %ln8Bo = icmp ne i64 %ln8Bn, 0
  br i1 %ln8Bo, label %u8pD, label %c8ni
c8ni:
  %ln8Bq = load i64, i64* %R1_Var
  %ln8Br = inttoptr i64 %ln8Bq to i64*
  %ln8Bs = load i64, i64* %ln8Br, !tbaa !4
  %ln8Bt = inttoptr i64 %ln8Bs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bu = load i64*, i64** %Sp_Var
  %ln8Bv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bt( i64* %Base_Arg, i64* %ln8Bu, i64* %Hp_Arg, i64 %ln8Bv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8pD:
  %ln8Bw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Bx = load i64*, i64** %Sp_Var
  %ln8By = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Bw( i64* %Base_Arg, i64* %ln8Bx, i64* %Hp_Arg, i64 %ln8By, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nh_info$def to i8*)
define internal ghccc void @c8nh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
n8Bz:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Au = alloca i64, i32 1
  %ls7Av = alloca i64, i32 1
  %ls7Aw = alloca i64, i32 1
  %lc8nm = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8nh
c8nh:
  %ln8BA = load i64*, i64** %Hp_Var
  %ln8BB = getelementptr inbounds i64, i64* %ln8BA, i32 22
  %ln8BC = ptrtoint i64* %ln8BB to i64
  %ln8BD = inttoptr i64 %ln8BC to i64*
  store i64* %ln8BD, i64** %Hp_Var
  %ln8BE = load i64*, i64** %Hp_Var
  %ln8BF = ptrtoint i64* %ln8BE to i64
  %ln8BG = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8BH = bitcast i64* %ln8BG to i64*
  %ln8BI = load i64, i64* %ln8BH, !tbaa !5
  %ln8BJ = icmp ugt i64 %ln8BF, %ln8BI
  %ln8BK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8BJ, i1 0 )
  br i1 %ln8BK, label %c8pB, label %c8pA
c8pA:
  %ln8BN = load i64, i64* %R1_Var
  %ln8BO = add i64 %ln8BN, 7
  %ln8BP = inttoptr i64 %ln8BO to i64*
  %ln8BQ = load i64, i64* %ln8BP, !tbaa !4
  store i64 %ln8BQ, i64* %ls7Au
  %ln8BT = load i64, i64* %R1_Var
  %ln8BU = add i64 %ln8BT, 15
  %ln8BV = inttoptr i64 %ln8BU to i64*
  %ln8BW = load i64, i64* %ln8BV, !tbaa !4
  store i64 %ln8BW, i64* %ls7Av
  %ln8BZ = load i64, i64* %R1_Var
  %ln8C0 = add i64 %ln8BZ, 23
  %ln8C1 = inttoptr i64 %ln8C0 to i64*
  %ln8C2 = load i64, i64* %ln8C1, !tbaa !4
  store i64 %ln8C2, i64* %ls7Aw
  %ln8C4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ax_info$def to i64
  %ln8C3 = load i64*, i64** %Hp_Var
  %ln8C5 = getelementptr inbounds i64, i64* %ln8C3, i32 -21
  store i64 %ln8C4, i64* %ln8C5, !tbaa !3
  %ln8C7 = load i64*, i64** %Sp_Var
  %ln8C8 = getelementptr inbounds i64, i64* %ln8C7, i32 1
  %ln8C9 = bitcast i64* %ln8C8 to i64*
  %ln8Ca = load i64, i64* %ln8C9, !tbaa !2
  %ln8C6 = load i64*, i64** %Hp_Var
  %ln8Cb = getelementptr inbounds i64, i64* %ln8C6, i32 -19
  store i64 %ln8Ca, i64* %ln8Cb, !tbaa !3
  %ln8Cd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7B1_info$def to i64
  %ln8Cc = load i64*, i64** %Hp_Var
  %ln8Ce = getelementptr inbounds i64, i64* %ln8Cc, i32 -18
  store i64 %ln8Cd, i64* %ln8Ce, !tbaa !3
  %ln8Cg = load i64, i64* %ls7Aw
  %ln8Cf = load i64*, i64** %Hp_Var
  %ln8Ch = getelementptr inbounds i64, i64* %ln8Cf, i32 -16
  store i64 %ln8Cg, i64* %ln8Ch, !tbaa !3
  %ln8Cj = load i64*, i64** %Sp_Var
  %ln8Ck = getelementptr inbounds i64, i64* %ln8Cj, i32 2
  %ln8Cl = bitcast i64* %ln8Ck to i64*
  %ln8Cm = load i64, i64* %ln8Cl, !tbaa !2
  %ln8Ci = load i64*, i64** %Hp_Var
  %ln8Cn = getelementptr inbounds i64, i64* %ln8Ci, i32 -15
  store i64 %ln8Cm, i64* %ln8Cn, !tbaa !3
  %ln8Co = load i64*, i64** %Hp_Var
  %ln8Cp = getelementptr inbounds i64, i64* %ln8Co, i32 -21
  %ln8Cq = ptrtoint i64* %ln8Cp to i64
  store i64 %ln8Cq, i64* %lc8nm
  %ln8Cs = load i64, i64* %lc8nm
  %ln8Cr = load i64*, i64** %Hp_Var
  %ln8Ct = getelementptr inbounds i64, i64* %ln8Cr, i32 -14
  store i64 %ln8Cs, i64* %ln8Ct, !tbaa !3
  %ln8Cv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7AS_info$def to i64
  %ln8Cu = load i64*, i64** %Hp_Var
  %ln8Cw = getelementptr inbounds i64, i64* %ln8Cu, i32 -13
  store i64 %ln8Cv, i64* %ln8Cw, !tbaa !3
  %ln8Cy = load i64, i64* %ls7Av
  %ln8Cx = load i64*, i64** %Hp_Var
  %ln8Cz = getelementptr inbounds i64, i64* %ln8Cx, i32 -11
  store i64 %ln8Cy, i64* %ln8Cz, !tbaa !3
  %ln8CB = load i64*, i64** %Sp_Var
  %ln8CC = getelementptr inbounds i64, i64* %ln8CB, i32 3
  %ln8CD = bitcast i64* %ln8CC to i64*
  %ln8CE = load i64, i64* %ln8CD, !tbaa !2
  %ln8CA = load i64*, i64** %Hp_Var
  %ln8CF = getelementptr inbounds i64, i64* %ln8CA, i32 -10
  store i64 %ln8CE, i64* %ln8CF, !tbaa !3
  %ln8CH = load i64, i64* %lc8nm
  %ln8CG = load i64*, i64** %Hp_Var
  %ln8CI = getelementptr inbounds i64, i64* %ln8CG, i32 -9
  store i64 %ln8CH, i64* %ln8CI, !tbaa !3
  %ln8CK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7AJ_info$def to i64
  %ln8CJ = load i64*, i64** %Hp_Var
  %ln8CL = getelementptr inbounds i64, i64* %ln8CJ, i32 -8
  store i64 %ln8CK, i64* %ln8CL, !tbaa !3
  %ln8CN = load i64, i64* %ls7Au
  %ln8CM = load i64*, i64** %Hp_Var
  %ln8CO = getelementptr inbounds i64, i64* %ln8CM, i32 -6
  store i64 %ln8CN, i64* %ln8CO, !tbaa !3
  %ln8CQ = load i64*, i64** %Sp_Var
  %ln8CR = getelementptr inbounds i64, i64* %ln8CQ, i32 4
  %ln8CS = bitcast i64* %ln8CR to i64*
  %ln8CT = load i64, i64* %ln8CS, !tbaa !2
  %ln8CP = load i64*, i64** %Hp_Var
  %ln8CU = getelementptr inbounds i64, i64* %ln8CP, i32 -5
  store i64 %ln8CT, i64* %ln8CU, !tbaa !3
  %ln8CW = load i64, i64* %lc8nm
  %ln8CV = load i64*, i64** %Hp_Var
  %ln8CX = getelementptr inbounds i64, i64* %ln8CV, i32 -4
  store i64 %ln8CW, i64* %ln8CX, !tbaa !3
  %ln8CZ = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %ln8CY = load i64*, i64** %Hp_Var
  %ln8D0 = getelementptr inbounds i64, i64* %ln8CY, i32 -3
  store i64 %ln8CZ, i64* %ln8D0, !tbaa !3
  %ln8D2 = load i64*, i64** %Hp_Var
  %ln8D3 = getelementptr inbounds i64, i64* %ln8D2, i32 -8
  %ln8D4 = ptrtoint i64* %ln8D3 to i64
  %ln8D1 = load i64*, i64** %Hp_Var
  %ln8D5 = getelementptr inbounds i64, i64* %ln8D1, i32 -2
  store i64 %ln8D4, i64* %ln8D5, !tbaa !3
  %ln8D7 = load i64*, i64** %Hp_Var
  %ln8D8 = getelementptr inbounds i64, i64* %ln8D7, i32 -13
  %ln8D9 = ptrtoint i64* %ln8D8 to i64
  %ln8D6 = load i64*, i64** %Hp_Var
  %ln8Da = getelementptr inbounds i64, i64* %ln8D6, i32 -1
  store i64 %ln8D9, i64* %ln8Da, !tbaa !3
  %ln8Dc = load i64*, i64** %Hp_Var
  %ln8Dd = getelementptr inbounds i64, i64* %ln8Dc, i32 -18
  %ln8De = ptrtoint i64* %ln8Dd to i64
  %ln8Db = load i64*, i64** %Hp_Var
  %ln8Df = getelementptr inbounds i64, i64* %ln8Db, i32 0
  store i64 %ln8De, i64* %ln8Df, !tbaa !3
  %ln8Dh = load i64*, i64** %Hp_Var
  %ln8Di = ptrtoint i64* %ln8Dh to i64
  %ln8Dj = add i64 %ln8Di, -23
  store i64 %ln8Dj, i64* %R1_Var
  %ln8Dk = load i64*, i64** %Sp_Var
  %ln8Dl = getelementptr inbounds i64, i64* %ln8Dk, i32 5
  %ln8Dm = ptrtoint i64* %ln8Dl to i64
  %ln8Dn = inttoptr i64 %ln8Dm to i64*
  store i64* %ln8Dn, i64** %Sp_Var
  %ln8Do = load i64*, i64** %Sp_Var
  %ln8Dp = getelementptr inbounds i64, i64* %ln8Do, i32 0
  %ln8Dq = bitcast i64* %ln8Dp to i64*
  %ln8Dr = load i64, i64* %ln8Dq, !tbaa !2
  %ln8Ds = inttoptr i64 %ln8Dr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dt = load i64*, i64** %Sp_Var
  %ln8Du = load i64*, i64** %Hp_Var
  %ln8Dv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ds( i64* %Base_Arg, i64* %ln8Dt, i64* %ln8Du, i64 %ln8Dv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8pB:
  %ln8Dw = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 176, i64* %ln8Dw, !tbaa !5
  %ln8Dx = load i64, i64* %R1_Var
  store i64 %ln8Dx, i64* %R1_Var
  %ln8Dy = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dz = load i64*, i64** %Sp_Var
  %ln8DA = load i64*, i64** %Hp_Var
  %ln8DB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Dy( i64* %Base_Arg, i64* %ln8Dz, i64* %ln8DA, i64 %ln8DB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mD_bytes_struct = type <{[35 x i8]}>
@r7mD_bytes$def = internal constant %r7mD_bytes_struct<{[35 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 108, i8 104, i8 115, i8 58, i8 56, i8 55, i8 58, i8 51, i8 45, i8 53, i8 50, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 108, i8 105, i8 103, i8 104, i8 116, i8 100, i8 105, i8 114, i8 0]}>, align 1
@r7mD_bytes = internal alias i8, bitcast (%r7mD_bytes_struct* @r7mD_bytes$def to i8*)
%Main_lightdir1_closure_struct = type <{i64, i64, i64, i64}>
@Main_lightdir1_closure$def = internal global %Main_lightdir1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_lightdir1_closure = alias i8, bitcast (%Main_lightdir1_closure_struct* @Main_lightdir1_closure$def to i8*)
@Main_lightdir1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir1_info$def to i8*)
define ghccc void @Main_lightdir1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir1_info$def to i64)) to i32),i32 0)}>
{
n8DL:
  %lc8DF = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8DI
c8DI:
  %ln8DM = load i64*, i64** %Sp_Var
  %ln8DN = getelementptr inbounds i64, i64* %ln8DM, i32 -2
  %ln8DO = ptrtoint i64* %ln8DN to i64
  %ln8DP = icmp ult i64 %ln8DO, %SpLim_Arg
  %ln8DQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8DP, i1 0 )
  br i1 %ln8DQ, label %c8DJ, label %c8DK
c8DK:
  %ln8DR = ptrtoint i64* %Base_Arg to i64
  %ln8DS = inttoptr i64 %ln8DR to i8*
  %ln8DT = load i64, i64* %R1_Var
  %ln8DU = inttoptr i64 %ln8DT to i8*
  %ln8DV = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %ln8DW = call ccc i8* (i8*, i8*) %ln8DV( i8* %ln8DS, i8* %ln8DU ) nounwind
  %ln8DX = ptrtoint i8* %ln8DW to i64
  store i64 %ln8DX, i64* %lc8DF
  %ln8DY = load i64, i64* %lc8DF
  %ln8DZ = icmp eq i64 %ln8DY, 0
  br i1 %ln8DZ, label %c8DH, label %c8DG
c8DG:
  %ln8E1 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8E0 = load i64*, i64** %Sp_Var
  %ln8E2 = getelementptr inbounds i64, i64* %ln8E0, i32 -2
  store i64 %ln8E1, i64* %ln8E2, !tbaa !2
  %ln8E4 = load i64, i64* %lc8DF
  %ln8E3 = load i64*, i64** %Sp_Var
  %ln8E5 = getelementptr inbounds i64, i64* %ln8E3, i32 -1
  store i64 %ln8E4, i64* %ln8E5, !tbaa !2
  %ln8E6 = ptrtoint %r7mD_bytes_struct* @r7mD_bytes$def to i64
  store i64 %ln8E6, i64* %R2_Var
  %ln8E7 = load i64*, i64** %Sp_Var
  %ln8E8 = getelementptr inbounds i64, i64* %ln8E7, i32 -2
  %ln8E9 = ptrtoint i64* %ln8E8 to i64
  %ln8Ea = inttoptr i64 %ln8E9 to i64*
  store i64* %ln8Ea, i64** %Sp_Var
  %ln8Eb = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ec = load i64*, i64** %Sp_Var
  %ln8Ed = load i64, i64* %R1_Var
  %ln8Ee = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Eb( i64* %Base_Arg, i64* %ln8Ec, i64* %Hp_Arg, i64 %ln8Ed, i64 %ln8Ee, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8DH:
  %ln8Eg = load i64, i64* %R1_Var
  %ln8Eh = inttoptr i64 %ln8Eg to i64*
  %ln8Ei = load i64, i64* %ln8Eh, !tbaa !4
  %ln8Ej = inttoptr i64 %ln8Ei to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ek = load i64*, i64** %Sp_Var
  %ln8El = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ej( i64* %Base_Arg, i64* %ln8Ek, i64* %Hp_Arg, i64 %ln8El, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8DJ:
  %ln8Em = load i64, i64* %R1_Var
  store i64 %ln8Em, i64* %R1_Var
  %ln8En = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Eo = bitcast i64* %ln8En to i64*
  %ln8Ep = load i64, i64* %ln8Eo, !tbaa !5
  %ln8Eq = inttoptr i64 %ln8Ep to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Er = load i64*, i64** %Sp_Var
  %ln8Es = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Eq( i64* %Base_Arg, i64* %ln8Er, i64* %Hp_Arg, i64 %ln8Es, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwvecnorm_closure_struct = type <{i64}>
@Main_zdwvecnorm_closure$def = internal global %Main_zdwvecnorm_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to i64)}>
@Main_zdwvecnorm_closure = alias i8, bitcast (%Main_zdwvecnorm_closure_struct* @Main_zdwvecnorm_closure$def to i8*)
@s7uq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uq_info$def to i8*)
define internal ghccc void @s7uq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n8FM:
  %ls7up = alloca i64, i32 1
  %ls7uo = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8EE
c8EE:
  %ln8FN = load i64*, i64** %Sp_Var
  %ln8FO = getelementptr inbounds i64, i64* %ln8FN, i32 -5
  %ln8FP = ptrtoint i64* %ln8FO to i64
  %ln8FQ = icmp ult i64 %ln8FP, %SpLim_Arg
  %ln8FR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8FQ, i1 0 )
  br i1 %ln8FR, label %c8Fb, label %c8Fc
c8Fc:
  %ln8FT = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8FS = load i64*, i64** %Sp_Var
  %ln8FU = getelementptr inbounds i64, i64* %ln8FS, i32 -2
  store i64 %ln8FT, i64* %ln8FU, !tbaa !2
  %ln8FW = load i64, i64* %R1_Var
  %ln8FV = load i64*, i64** %Sp_Var
  %ln8FX = getelementptr inbounds i64, i64* %ln8FV, i32 -1
  store i64 %ln8FW, i64* %ln8FX, !tbaa !2
  %ln8FZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EB_info$def to i64
  %ln8FY = load i64*, i64** %Sp_Var
  %ln8G0 = getelementptr inbounds i64, i64* %ln8FY, i32 -5
  store i64 %ln8FZ, i64* %ln8G0, !tbaa !2
  %ln8G3 = load i64, i64* %R1_Var
  %ln8G4 = add i64 %ln8G3, 16
  %ln8G5 = inttoptr i64 %ln8G4 to i64*
  %ln8G6 = load i64, i64* %ln8G5, !tbaa !4
  store i64 %ln8G6, i64* %ls7up
  %ln8G9 = load i64, i64* %R1_Var
  %ln8Ga = add i64 %ln8G9, 24
  %ln8Gb = inttoptr i64 %ln8Ga to i64*
  %ln8Gc = load i64, i64* %ln8Gb, !tbaa !4
  store i64 %ln8Gc, i64* %ls7uo
  %ln8Gf = load i64, i64* %R1_Var
  %ln8Gg = add i64 %ln8Gf, 32
  %ln8Gh = inttoptr i64 %ln8Gg to i64*
  %ln8Gi = load i64, i64* %ln8Gh, !tbaa !4
  store i64 %ln8Gi, i64* %R1_Var
  %ln8Gk = load i64, i64* %ls7uo
  %ln8Gj = load i64*, i64** %Sp_Var
  %ln8Gl = getelementptr inbounds i64, i64* %ln8Gj, i32 -4
  store i64 %ln8Gk, i64* %ln8Gl, !tbaa !2
  %ln8Gn = load i64, i64* %ls7up
  %ln8Gm = load i64*, i64** %Sp_Var
  %ln8Go = getelementptr inbounds i64, i64* %ln8Gm, i32 -3
  store i64 %ln8Gn, i64* %ln8Go, !tbaa !2
  %ln8Gp = load i64*, i64** %Sp_Var
  %ln8Gq = getelementptr inbounds i64, i64* %ln8Gp, i32 -5
  %ln8Gr = ptrtoint i64* %ln8Gq to i64
  %ln8Gs = inttoptr i64 %ln8Gr to i64*
  store i64* %ln8Gs, i64** %Sp_Var
  %ln8Gt = load i64, i64* %R1_Var
  %ln8Gu = and i64 %ln8Gt, 7
  %ln8Gv = icmp ne i64 %ln8Gu, 0
  br i1 %ln8Gv, label %u8Fj, label %c8EC
c8EC:
  %ln8Gx = load i64, i64* %R1_Var
  %ln8Gy = inttoptr i64 %ln8Gx to i64*
  %ln8Gz = load i64, i64* %ln8Gy, !tbaa !4
  %ln8GA = inttoptr i64 %ln8Gz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GB = load i64*, i64** %Sp_Var
  %ln8GC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GA( i64* %Base_Arg, i64* %ln8GB, i64* %Hp_Arg, i64 %ln8GC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Fj:
  %ln8GD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GE = load i64*, i64** %Sp_Var
  %ln8GF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GD( i64* %Base_Arg, i64* %ln8GE, i64* %Hp_Arg, i64 %ln8GF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fb:
  %ln8GG = load i64, i64* %R1_Var
  store i64 %ln8GG, i64* %R1_Var
  %ln8GH = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8GI = bitcast i64* %ln8GH to i64*
  %ln8GJ = load i64, i64* %ln8GI, !tbaa !5
  %ln8GK = inttoptr i64 %ln8GJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8GL = load i64*, i64** %Sp_Var
  %ln8GM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8GK( i64* %Base_Arg, i64* %ln8GL, i64* %Hp_Arg, i64 %ln8GM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8EB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EB_info$def to i8*)
define internal ghccc void @c8EB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n8GN:
  %ls7us = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8EB
c8EB:
  %ln8GO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EH_info$def to i64
  %ln8GP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8GO, i64* %ln8GP, !tbaa !2
  %ln8GS = load i64, i64* %R1_Var
  %ln8GT = add i64 %ln8GS, 7
  %ln8GU = inttoptr i64 %ln8GT to double*
  %ln8GV = load double, double* %ln8GU, !tbaa !4
  store double %ln8GV, double* %ls7us
  %ln8GW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8GX = bitcast i64* %ln8GW to i64*
  %ln8GY = load i64, i64* %ln8GX, !tbaa !2
  store i64 %ln8GY, i64* %R1_Var
  %ln8GZ = load double, double* %ls7us
  %ln8H0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8H1 = bitcast i64* %ln8H0 to double*
  store double %ln8GZ, double* %ln8H1, !tbaa !2
  %ln8H2 = load i64, i64* %R1_Var
  %ln8H3 = and i64 %ln8H2, 7
  %ln8H4 = icmp ne i64 %ln8H3, 0
  br i1 %ln8H4, label %u8Fi, label %c8EI
c8EI:
  %ln8H6 = load i64, i64* %R1_Var
  %ln8H7 = inttoptr i64 %ln8H6 to i64*
  %ln8H8 = load i64, i64* %ln8H7, !tbaa !4
  %ln8H9 = inttoptr i64 %ln8H8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ha = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8H9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Ha, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Fi:
  %ln8Hb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Hc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8EH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EH_info$def to i8*)
define internal ghccc void @c8EH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n8Hd:
  %ls7uu = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8EH
c8EH:
  %ln8He = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EM_info$def to i64
  %ln8Hf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8He, i64* %ln8Hf, !tbaa !2
  %ln8Hi = load i64, i64* %R1_Var
  %ln8Hj = add i64 %ln8Hi, 7
  %ln8Hk = inttoptr i64 %ln8Hj to double*
  %ln8Hl = load double, double* %ln8Hk, !tbaa !4
  store double %ln8Hl, double* %ls7uu
  %ln8Hm = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8Hn = bitcast i64* %ln8Hm to i64*
  %ln8Ho = load i64, i64* %ln8Hn, !tbaa !2
  store i64 %ln8Ho, i64* %R1_Var
  %ln8Hp = load double, double* %ls7uu
  %ln8Hq = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8Hr = bitcast i64* %ln8Hq to double*
  store double %ln8Hp, double* %ln8Hr, !tbaa !2
  %ln8Hs = load i64, i64* %R1_Var
  %ln8Ht = and i64 %ln8Hs, 7
  %ln8Hu = icmp ne i64 %ln8Ht, 0
  br i1 %ln8Hu, label %u8Fk, label %c8EN
c8EN:
  %ln8Hw = load i64, i64* %R1_Var
  %ln8Hx = inttoptr i64 %ln8Hw to i64*
  %ln8Hy = load i64, i64* %ln8Hx, !tbaa !4
  %ln8Hz = inttoptr i64 %ln8Hy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8HA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Hz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8HA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Fk:
  %ln8HB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8HC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8HB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8HC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8EM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8EM_info$def to i8*)
define internal ghccc void @c8EM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n8HD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7us = alloca double, i32 1
  %ls7uu = alloca double, i32 1
  %ls7uw = alloca double, i32 1
  %lc8F6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8EM
c8EM:
  %ln8HE = load i64*, i64** %Hp_Var
  %ln8HF = getelementptr inbounds i64, i64* %ln8HE, i32 2
  %ln8HG = ptrtoint i64* %ln8HF to i64
  %ln8HH = inttoptr i64 %ln8HG to i64*
  store i64* %ln8HH, i64** %Hp_Var
  %ln8HI = load i64*, i64** %Hp_Var
  %ln8HJ = ptrtoint i64* %ln8HI to i64
  %ln8HK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8HL = bitcast i64* %ln8HK to i64*
  %ln8HM = load i64, i64* %ln8HL, !tbaa !5
  %ln8HN = icmp ugt i64 %ln8HJ, %ln8HM
  %ln8HO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8HN, i1 0 )
  br i1 %ln8HO, label %c8Fh, label %c8Fg
c8Fg:
  %ln8HP = load i64*, i64** %Sp_Var
  %ln8HQ = getelementptr inbounds i64, i64* %ln8HP, i32 1
  %ln8HR = bitcast i64* %ln8HQ to double*
  %ln8HS = load double, double* %ln8HR, !tbaa !2
  store double %ln8HS, double* %ls7us
  %ln8HT = load i64*, i64** %Sp_Var
  %ln8HU = getelementptr inbounds i64, i64* %ln8HT, i32 2
  %ln8HV = bitcast i64* %ln8HU to double*
  %ln8HW = load double, double* %ln8HV, !tbaa !2
  store double %ln8HW, double* %ls7uu
  %ln8HZ = load i64, i64* %R1_Var
  %ln8I0 = add i64 %ln8HZ, 7
  %ln8I1 = inttoptr i64 %ln8I0 to double*
  %ln8I2 = load double, double* %ln8I1, !tbaa !4
  store double %ln8I2, double* %ls7uw
  %ln8I3 = load double, double* %ls7us
  %ln8I4 = load double, double* %ls7us
  %ln8I5 = fmul double %ln8I3, %ln8I4
  %ln8I6 = load double, double* %ls7uu
  %ln8I7 = load double, double* %ls7uu
  %ln8I8 = fmul double %ln8I6, %ln8I7
  %ln8I9 = fadd double %ln8I5, %ln8I8
  %ln8Ia = load double, double* %ls7uw
  %ln8Ib = load double, double* %ls7uw
  %ln8Ic = fmul double %ln8Ia, %ln8Ib
  %ln8Id = fadd double %ln8I9, %ln8Ic
  %ln8If = call ccc double (double) @llvm.sqrt.f64( double %ln8Id ) nounwind
  store double %ln8If, double* %lc8F6
  %ln8Ih = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln8Ig = load i64*, i64** %Hp_Var
  %ln8Ii = getelementptr inbounds i64, i64* %ln8Ig, i32 -1
  store i64 %ln8Ih, i64* %ln8Ii, !tbaa !3
  %ln8Ik = load double, double* %lc8F6
  %ln8Ij = load i64*, i64** %Hp_Var
  %ln8Il = getelementptr inbounds i64, i64* %ln8Ij, i32 0
  %ln8Im = bitcast i64* %ln8Il to double*
  store double %ln8Ik, double* %ln8Im, !tbaa !3
  %ln8Io = load i64*, i64** %Hp_Var
  %ln8Ip = ptrtoint i64* %ln8Io to i64
  %ln8Iq = add i64 %ln8Ip, -7
  store i64 %ln8Iq, i64* %R1_Var
  %ln8Ir = load i64*, i64** %Sp_Var
  %ln8Is = getelementptr inbounds i64, i64* %ln8Ir, i32 3
  %ln8It = ptrtoint i64* %ln8Is to i64
  %ln8Iu = inttoptr i64 %ln8It to i64*
  store i64* %ln8Iu, i64** %Sp_Var
  %ln8Iv = load i64*, i64** %Sp_Var
  %ln8Iw = getelementptr inbounds i64, i64* %ln8Iv, i32 0
  %ln8Ix = bitcast i64* %ln8Iw to i64*
  %ln8Iy = load i64, i64* %ln8Ix, !tbaa !2
  %ln8Iz = inttoptr i64 %ln8Iy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8IA = load i64*, i64** %Sp_Var
  %ln8IB = load i64*, i64** %Hp_Var
  %ln8IC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Iz( i64* %Base_Arg, i64* %ln8IA, i64* %ln8IB, i64 %ln8IC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fh:
  %ln8ID = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8ID, !tbaa !5
  %ln8IE = load i64, i64* %R1_Var
  store i64 %ln8IE, i64* %R1_Var
  %ln8IF = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8IG = load i64*, i64** %Sp_Var
  %ln8IH = load i64*, i64** %Hp_Var
  %ln8II = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8IF( i64* %Base_Arg, i64* %ln8IG, i64* %ln8IH, i64 %ln8II, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc double @llvm.sqrt.f64(double) align 8
@s7uF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uF_info$def to i8*)
define internal ghccc void @s7uF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n8IJ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Fp
c8Fp:
  %ln8IK = load i64*, i64** %Sp_Var
  %ln8IL = getelementptr inbounds i64, i64* %ln8IK, i32 -2
  %ln8IM = ptrtoint i64* %ln8IL to i64
  %ln8IN = icmp ult i64 %ln8IM, %SpLim_Arg
  %ln8IO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8IN, i1 0 )
  br i1 %ln8IO, label %c8Fq, label %c8Fr
c8Fr:
  %ln8IQ = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8IP = load i64*, i64** %Sp_Var
  %ln8IR = getelementptr inbounds i64, i64* %ln8IP, i32 -2
  store i64 %ln8IQ, i64* %ln8IR, !tbaa !2
  %ln8IT = load i64, i64* %R1_Var
  %ln8IS = load i64*, i64** %Sp_Var
  %ln8IU = getelementptr inbounds i64, i64* %ln8IS, i32 -1
  store i64 %ln8IT, i64* %ln8IU, !tbaa !2
  %ln8IX = load i64, i64* %R1_Var
  %ln8IY = add i64 %ln8IX, 24
  %ln8IZ = inttoptr i64 %ln8IY to i64*
  %ln8J0 = load i64, i64* %ln8IZ, !tbaa !4
  store i64 %ln8J0, i64* %R3_Var
  %ln8J3 = load i64, i64* %R1_Var
  %ln8J4 = add i64 %ln8J3, 16
  %ln8J5 = inttoptr i64 %ln8J4 to i64*
  %ln8J6 = load i64, i64* %ln8J5, !tbaa !4
  store i64 %ln8J6, i64* %R2_Var
  %ln8J7 = load i64*, i64** %Sp_Var
  %ln8J8 = getelementptr inbounds i64, i64* %ln8J7, i32 -2
  %ln8J9 = ptrtoint i64* %ln8J8 to i64
  %ln8Ja = inttoptr i64 %ln8J9 to i64*
  store i64* %ln8Ja, i64** %Sp_Var
  %ln8Jb = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jc = load i64*, i64** %Sp_Var
  %ln8Jd = load i64, i64* %R1_Var
  %ln8Je = load i64, i64* %R2_Var
  %ln8Jf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jb( i64* %Base_Arg, i64* %ln8Jc, i64* %Hp_Arg, i64 %ln8Jd, i64 %ln8Je, i64 %ln8Jf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fq:
  %ln8Jg = load i64, i64* %R1_Var
  store i64 %ln8Jg, i64* %R1_Var
  %ln8Jh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Ji = bitcast i64* %ln8Jh to i64*
  %ln8Jj = load i64, i64* %ln8Ji, !tbaa !5
  %ln8Jk = inttoptr i64 %ln8Jj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jl = load i64*, i64** %Sp_Var
  %ln8Jm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jk( i64* %Base_Arg, i64* %ln8Jl, i64* %Hp_Arg, i64 %ln8Jm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7uE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uE_info$def to i8*)
define internal ghccc void @s7uE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n8Jn:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Fw
c8Fw:
  %ln8Jo = load i64*, i64** %Sp_Var
  %ln8Jp = getelementptr inbounds i64, i64* %ln8Jo, i32 -2
  %ln8Jq = ptrtoint i64* %ln8Jp to i64
  %ln8Jr = icmp ult i64 %ln8Jq, %SpLim_Arg
  %ln8Js = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Jr, i1 0 )
  br i1 %ln8Js, label %c8Fx, label %c8Fy
c8Fy:
  %ln8Ju = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Jt = load i64*, i64** %Sp_Var
  %ln8Jv = getelementptr inbounds i64, i64* %ln8Jt, i32 -2
  store i64 %ln8Ju, i64* %ln8Jv, !tbaa !2
  %ln8Jx = load i64, i64* %R1_Var
  %ln8Jw = load i64*, i64** %Sp_Var
  %ln8Jy = getelementptr inbounds i64, i64* %ln8Jw, i32 -1
  store i64 %ln8Jx, i64* %ln8Jy, !tbaa !2
  %ln8JB = load i64, i64* %R1_Var
  %ln8JC = add i64 %ln8JB, 24
  %ln8JD = inttoptr i64 %ln8JC to i64*
  %ln8JE = load i64, i64* %ln8JD, !tbaa !4
  store i64 %ln8JE, i64* %R3_Var
  %ln8JH = load i64, i64* %R1_Var
  %ln8JI = add i64 %ln8JH, 16
  %ln8JJ = inttoptr i64 %ln8JI to i64*
  %ln8JK = load i64, i64* %ln8JJ, !tbaa !4
  store i64 %ln8JK, i64* %R2_Var
  %ln8JL = load i64*, i64** %Sp_Var
  %ln8JM = getelementptr inbounds i64, i64* %ln8JL, i32 -2
  %ln8JN = ptrtoint i64* %ln8JM to i64
  %ln8JO = inttoptr i64 %ln8JN to i64*
  store i64* %ln8JO, i64** %Sp_Var
  %ln8JP = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8JQ = load i64*, i64** %Sp_Var
  %ln8JR = load i64, i64* %R1_Var
  %ln8JS = load i64, i64* %R2_Var
  %ln8JT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8JP( i64* %Base_Arg, i64* %ln8JQ, i64* %Hp_Arg, i64 %ln8JR, i64 %ln8JS, i64 %ln8JT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Fx:
  %ln8JU = load i64, i64* %R1_Var
  store i64 %ln8JU, i64* %R1_Var
  %ln8JV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8JW = bitcast i64* %ln8JV to i64*
  %ln8JX = load i64, i64* %ln8JW, !tbaa !5
  %ln8JY = inttoptr i64 %ln8JX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8JZ = load i64*, i64** %Sp_Var
  %ln8K0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8JY( i64* %Base_Arg, i64* %ln8JZ, i64* %Hp_Arg, i64 %ln8K0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7uD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uD_info$def to i8*)
define internal ghccc void @s7uD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n8K1:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8FD
c8FD:
  %ln8K2 = load i64*, i64** %Sp_Var
  %ln8K3 = getelementptr inbounds i64, i64* %ln8K2, i32 -2
  %ln8K4 = ptrtoint i64* %ln8K3 to i64
  %ln8K5 = icmp ult i64 %ln8K4, %SpLim_Arg
  %ln8K6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8K5, i1 0 )
  br i1 %ln8K6, label %c8FE, label %c8FF
c8FF:
  %ln8K8 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8K7 = load i64*, i64** %Sp_Var
  %ln8K9 = getelementptr inbounds i64, i64* %ln8K7, i32 -2
  store i64 %ln8K8, i64* %ln8K9, !tbaa !2
  %ln8Kb = load i64, i64* %R1_Var
  %ln8Ka = load i64*, i64** %Sp_Var
  %ln8Kc = getelementptr inbounds i64, i64* %ln8Ka, i32 -1
  store i64 %ln8Kb, i64* %ln8Kc, !tbaa !2
  %ln8Kf = load i64, i64* %R1_Var
  %ln8Kg = add i64 %ln8Kf, 24
  %ln8Kh = inttoptr i64 %ln8Kg to i64*
  %ln8Ki = load i64, i64* %ln8Kh, !tbaa !4
  store i64 %ln8Ki, i64* %R3_Var
  %ln8Kl = load i64, i64* %R1_Var
  %ln8Km = add i64 %ln8Kl, 16
  %ln8Kn = inttoptr i64 %ln8Km to i64*
  %ln8Ko = load i64, i64* %ln8Kn, !tbaa !4
  store i64 %ln8Ko, i64* %R2_Var
  %ln8Kp = load i64*, i64** %Sp_Var
  %ln8Kq = getelementptr inbounds i64, i64* %ln8Kp, i32 -2
  %ln8Kr = ptrtoint i64* %ln8Kq to i64
  %ln8Ks = inttoptr i64 %ln8Kr to i64*
  store i64* %ln8Ks, i64** %Sp_Var
  %ln8Kt = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ku = load i64*, i64** %Sp_Var
  %ln8Kv = load i64, i64* %R1_Var
  %ln8Kw = load i64, i64* %R2_Var
  %ln8Kx = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Kt( i64* %Base_Arg, i64* %ln8Ku, i64* %Hp_Arg, i64 %ln8Kv, i64 %ln8Kw, i64 %ln8Kx, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FE:
  %ln8Ky = load i64, i64* %R1_Var
  store i64 %ln8Ky, i64* %R1_Var
  %ln8Kz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8KA = bitcast i64* %ln8Kz to i64*
  %ln8KB = load i64, i64* %ln8KA, !tbaa !5
  %ln8KC = inttoptr i64 %ln8KB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8KD = load i64*, i64** %Sp_Var
  %ln8KE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8KC( i64* %Base_Arg, i64* %ln8KD, i64* %Hp_Arg, i64 %ln8KE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwvecnorm_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to i8*)
define ghccc void @Main_zdwvecnorm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
n8KF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc8Ex = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  br label %c8FH
c8FH:
  %ln8KG = load i64*, i64** %Hp_Var
  %ln8KH = getelementptr inbounds i64, i64* %ln8KG, i32 21
  %ln8KI = ptrtoint i64* %ln8KH to i64
  %ln8KJ = inttoptr i64 %ln8KI to i64*
  store i64* %ln8KJ, i64** %Hp_Var
  %ln8KK = load i64*, i64** %Hp_Var
  %ln8KL = ptrtoint i64* %ln8KK to i64
  %ln8KM = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8KN = bitcast i64* %ln8KM to i64*
  %ln8KO = load i64, i64* %ln8KN, !tbaa !5
  %ln8KP = icmp ugt i64 %ln8KL, %ln8KO
  %ln8KQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8KP, i1 0 )
  br i1 %ln8KQ, label %c8FL, label %c8FK
c8FK:
  %ln8KS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uq_info$def to i64
  %ln8KR = load i64*, i64** %Hp_Var
  %ln8KT = getelementptr inbounds i64, i64* %ln8KR, i32 -20
  store i64 %ln8KS, i64* %ln8KT, !tbaa !3
  %ln8KV = load i64, i64* %R4_Var
  %ln8KU = load i64*, i64** %Hp_Var
  %ln8KW = getelementptr inbounds i64, i64* %ln8KU, i32 -18
  store i64 %ln8KV, i64* %ln8KW, !tbaa !3
  %ln8KY = load i64, i64* %R3_Var
  %ln8KX = load i64*, i64** %Hp_Var
  %ln8KZ = getelementptr inbounds i64, i64* %ln8KX, i32 -17
  store i64 %ln8KY, i64* %ln8KZ, !tbaa !3
  %ln8L1 = load i64, i64* %R2_Var
  %ln8L0 = load i64*, i64** %Hp_Var
  %ln8L2 = getelementptr inbounds i64, i64* %ln8L0, i32 -16
  store i64 %ln8L1, i64* %ln8L2, !tbaa !3
  %ln8L4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uF_info$def to i64
  %ln8L3 = load i64*, i64** %Hp_Var
  %ln8L5 = getelementptr inbounds i64, i64* %ln8L3, i32 -15
  store i64 %ln8L4, i64* %ln8L5, !tbaa !3
  %ln8L7 = load i64, i64* %R4_Var
  %ln8L6 = load i64*, i64** %Hp_Var
  %ln8L8 = getelementptr inbounds i64, i64* %ln8L6, i32 -13
  store i64 %ln8L7, i64* %ln8L8, !tbaa !3
  %ln8L9 = load i64*, i64** %Hp_Var
  %ln8La = getelementptr inbounds i64, i64* %ln8L9, i32 -20
  %ln8Lb = ptrtoint i64* %ln8La to i64
  store i64 %ln8Lb, i64* %lc8Ex
  %ln8Ld = load i64, i64* %lc8Ex
  %ln8Lc = load i64*, i64** %Hp_Var
  %ln8Le = getelementptr inbounds i64, i64* %ln8Lc, i32 -12
  store i64 %ln8Ld, i64* %ln8Le, !tbaa !3
  %ln8Lg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uE_info$def to i64
  %ln8Lf = load i64*, i64** %Hp_Var
  %ln8Lh = getelementptr inbounds i64, i64* %ln8Lf, i32 -11
  store i64 %ln8Lg, i64* %ln8Lh, !tbaa !3
  %ln8Lj = load i64, i64* %R3_Var
  %ln8Li = load i64*, i64** %Hp_Var
  %ln8Lk = getelementptr inbounds i64, i64* %ln8Li, i32 -9
  store i64 %ln8Lj, i64* %ln8Lk, !tbaa !3
  %ln8Lm = load i64, i64* %lc8Ex
  %ln8Ll = load i64*, i64** %Hp_Var
  %ln8Ln = getelementptr inbounds i64, i64* %ln8Ll, i32 -8
  store i64 %ln8Lm, i64* %ln8Ln, !tbaa !3
  %ln8Lp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7uD_info$def to i64
  %ln8Lo = load i64*, i64** %Hp_Var
  %ln8Lq = getelementptr inbounds i64, i64* %ln8Lo, i32 -7
  store i64 %ln8Lp, i64* %ln8Lq, !tbaa !3
  %ln8Ls = load i64, i64* %R2_Var
  %ln8Lr = load i64*, i64** %Hp_Var
  %ln8Lt = getelementptr inbounds i64, i64* %ln8Lr, i32 -5
  store i64 %ln8Ls, i64* %ln8Lt, !tbaa !3
  %ln8Lv = load i64, i64* %lc8Ex
  %ln8Lu = load i64*, i64** %Hp_Var
  %ln8Lw = getelementptr inbounds i64, i64* %ln8Lu, i32 -4
  store i64 %ln8Lv, i64* %ln8Lw, !tbaa !3
  %ln8Ly = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %ln8Lx = load i64*, i64** %Hp_Var
  %ln8Lz = getelementptr inbounds i64, i64* %ln8Lx, i32 -3
  store i64 %ln8Ly, i64* %ln8Lz, !tbaa !3
  %ln8LB = load i64*, i64** %Hp_Var
  %ln8LC = getelementptr inbounds i64, i64* %ln8LB, i32 -7
  %ln8LD = ptrtoint i64* %ln8LC to i64
  %ln8LA = load i64*, i64** %Hp_Var
  %ln8LE = getelementptr inbounds i64, i64* %ln8LA, i32 -2
  store i64 %ln8LD, i64* %ln8LE, !tbaa !3
  %ln8LG = load i64*, i64** %Hp_Var
  %ln8LH = getelementptr inbounds i64, i64* %ln8LG, i32 -11
  %ln8LI = ptrtoint i64* %ln8LH to i64
  %ln8LF = load i64*, i64** %Hp_Var
  %ln8LJ = getelementptr inbounds i64, i64* %ln8LF, i32 -1
  store i64 %ln8LI, i64* %ln8LJ, !tbaa !3
  %ln8LL = load i64*, i64** %Hp_Var
  %ln8LM = getelementptr inbounds i64, i64* %ln8LL, i32 -15
  %ln8LN = ptrtoint i64* %ln8LM to i64
  %ln8LK = load i64*, i64** %Hp_Var
  %ln8LO = getelementptr inbounds i64, i64* %ln8LK, i32 0
  store i64 %ln8LN, i64* %ln8LO, !tbaa !3
  %ln8LP = load i64, i64* %lc8Ex
  store i64 %ln8LP, i64* %R2_Var
  %ln8LR = load i64*, i64** %Hp_Var
  %ln8LS = ptrtoint i64* %ln8LR to i64
  %ln8LT = add i64 %ln8LS, -23
  store i64 %ln8LT, i64* %R1_Var
  %ln8LU = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln8LV = bitcast i64* %ln8LU to i64*
  %ln8LW = load i64, i64* %ln8LV, !tbaa !2
  %ln8LX = inttoptr i64 %ln8LW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8LY = load i64*, i64** %Hp_Var
  %ln8LZ = load i64, i64* %R1_Var
  %ln8M0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8LX( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8LY, i64 %ln8LZ, i64 %ln8M0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8FL:
  %ln8M1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 168, i64* %ln8M1, !tbaa !5
  %ln8M2 = load i64, i64* %R4_Var
  store i64 %ln8M2, i64* %R4_Var
  %ln8M3 = load i64, i64* %R3_Var
  store i64 %ln8M3, i64* %R3_Var
  %ln8M4 = load i64, i64* %R2_Var
  store i64 %ln8M4, i64* %R2_Var
  %ln8M5 = ptrtoint %Main_zdwvecnorm_closure_struct* @Main_zdwvecnorm_closure$def to i64
  store i64 %ln8M5, i64* %R1_Var
  %ln8M6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8M7 = bitcast i64* %ln8M6 to i64*
  %ln8M8 = load i64, i64* %ln8M7, !tbaa !5
  %ln8M9 = inttoptr i64 %ln8M8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ma = load i64*, i64** %Hp_Var
  %ln8Mb = load i64, i64* %R1_Var
  %ln8Mc = load i64, i64* %R2_Var
  %ln8Md = load i64, i64* %R3_Var
  %ln8Me = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8M9( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln8Ma, i64 %ln8Mb, i64 %ln8Mc, i64 %ln8Md, i64 %ln8Me, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecnorm_closure_struct = type <{i64}>
@Main_vecnorm_closure$def = internal global %Main_vecnorm_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecnorm_info$def to i64)}>
@Main_vecnorm_closure = alias i8, bitcast (%Main_vecnorm_closure_struct* @Main_vecnorm_closure$def to i8*)
@Main_vecnorm_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecnorm_info$def to i8*)
define ghccc void @Main_vecnorm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
n8Mz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Mm
c8Mm:
  %ln8MA = load i64*, i64** %Sp_Var
  %ln8MB = getelementptr inbounds i64, i64* %ln8MA, i32 -1
  %ln8MC = ptrtoint i64* %ln8MB to i64
  %ln8MD = icmp ult i64 %ln8MC, %SpLim_Arg
  %ln8ME = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8MD, i1 0 )
  br i1 %ln8ME, label %c8Ms, label %c8Mt
c8Mt:
  %ln8MG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Mj_info$def to i64
  %ln8MF = load i64*, i64** %Sp_Var
  %ln8MH = getelementptr inbounds i64, i64* %ln8MF, i32 -1
  store i64 %ln8MG, i64* %ln8MH, !tbaa !2
  %ln8MI = load i64, i64* %R2_Var
  store i64 %ln8MI, i64* %R1_Var
  %ln8MJ = load i64*, i64** %Sp_Var
  %ln8MK = getelementptr inbounds i64, i64* %ln8MJ, i32 -1
  %ln8ML = ptrtoint i64* %ln8MK to i64
  %ln8MM = inttoptr i64 %ln8ML to i64*
  store i64* %ln8MM, i64** %Sp_Var
  %ln8MN = load i64, i64* %R1_Var
  %ln8MO = and i64 %ln8MN, 7
  %ln8MP = icmp ne i64 %ln8MO, 0
  br i1 %ln8MP, label %u8My, label %c8Mk
c8Mk:
  %ln8MR = load i64, i64* %R1_Var
  %ln8MS = inttoptr i64 %ln8MR to i64*
  %ln8MT = load i64, i64* %ln8MS, !tbaa !4
  %ln8MU = inttoptr i64 %ln8MT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MV = load i64*, i64** %Sp_Var
  %ln8MW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MU( i64* %Base_Arg, i64* %ln8MV, i64* %Hp_Arg, i64 %ln8MW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8My:
  %ln8MX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Mj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8MY = load i64*, i64** %Sp_Var
  %ln8MZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8MX( i64* %Base_Arg, i64* %ln8MY, i64* %Hp_Arg, i64 %ln8MZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ms:
  %ln8N0 = load i64, i64* %R2_Var
  store i64 %ln8N0, i64* %R2_Var
  %ln8N1 = ptrtoint %Main_vecnorm_closure_struct* @Main_vecnorm_closure$def to i64
  store i64 %ln8N1, i64* %R1_Var
  %ln8N2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8N3 = bitcast i64* %ln8N2 to i64*
  %ln8N4 = load i64, i64* %ln8N3, !tbaa !5
  %ln8N5 = inttoptr i64 %ln8N4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8N6 = load i64*, i64** %Sp_Var
  %ln8N7 = load i64, i64* %R1_Var
  %ln8N8 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8N5( i64* %Base_Arg, i64* %ln8N6, i64* %Hp_Arg, i64 %ln8N7, i64 %ln8N8, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Mj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Mj_info$def to i8*)
define internal ghccc void @c8Mj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8N9:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8Mj
c8Mj:
  %ln8Na = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Mp_info$def to i64
  %ln8Nb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8Na, i64* %ln8Nb, !tbaa !2
  %ln8Nc = add i64 %R1_Arg, 23
  %ln8Nd = inttoptr i64 %ln8Nc to i64*
  %ln8Ne = load i64, i64* %ln8Nd, !tbaa !4
  store i64 %ln8Ne, i64* %R4_Var
  %ln8Nf = add i64 %R1_Arg, 15
  %ln8Ng = inttoptr i64 %ln8Nf to i64*
  %ln8Nh = load i64, i64* %ln8Ng, !tbaa !4
  store i64 %ln8Nh, i64* %R3_Var
  %ln8Ni = add i64 %R1_Arg, 7
  %ln8Nj = inttoptr i64 %ln8Ni to i64*
  %ln8Nk = load i64, i64* %ln8Nj, !tbaa !4
  store i64 %ln8Nk, i64* %R2_Var
  %ln8Nl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Nm = load i64, i64* %R2_Var
  %ln8Nn = load i64, i64* %R3_Var
  %ln8No = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Nm, i64 %ln8Nn, i64 %ln8No, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Mp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Mp_info$def to i8*)
define internal ghccc void @c8Mp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8Np:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Mp
c8Mp:
  %ln8Nq = load i64*, i64** %Hp_Var
  %ln8Nr = getelementptr inbounds i64, i64* %ln8Nq, i32 3
  %ln8Ns = ptrtoint i64* %ln8Nr to i64
  %ln8Nt = inttoptr i64 %ln8Ns to i64*
  store i64* %ln8Nt, i64** %Hp_Var
  %ln8Nu = load i64*, i64** %Hp_Var
  %ln8Nv = ptrtoint i64* %ln8Nu to i64
  %ln8Nw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Nx = bitcast i64* %ln8Nw to i64*
  %ln8Ny = load i64, i64* %ln8Nx, !tbaa !5
  %ln8Nz = icmp ugt i64 %ln8Nv, %ln8Ny
  %ln8NA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8Nz, i1 0 )
  br i1 %ln8NA, label %c8Mx, label %c8Mw
c8Mw:
  %ln8NC = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %ln8NB = load i64*, i64** %Hp_Var
  %ln8ND = getelementptr inbounds i64, i64* %ln8NB, i32 -2
  store i64 %ln8NC, i64* %ln8ND, !tbaa !3
  %ln8NF = load i64, i64* %R1_Var
  %ln8NE = load i64*, i64** %Hp_Var
  %ln8NG = getelementptr inbounds i64, i64* %ln8NE, i32 -1
  store i64 %ln8NF, i64* %ln8NG, !tbaa !3
  %ln8NI = load i64, i64* %R2_Var
  %ln8NH = load i64*, i64** %Hp_Var
  %ln8NJ = getelementptr inbounds i64, i64* %ln8NH, i32 0
  store i64 %ln8NI, i64* %ln8NJ, !tbaa !3
  %ln8NL = load i64*, i64** %Hp_Var
  %ln8NM = ptrtoint i64* %ln8NL to i64
  %ln8NN = add i64 %ln8NM, -15
  store i64 %ln8NN, i64* %R1_Var
  %ln8NO = load i64*, i64** %Sp_Var
  %ln8NP = getelementptr inbounds i64, i64* %ln8NO, i32 1
  %ln8NQ = ptrtoint i64* %ln8NP to i64
  %ln8NR = inttoptr i64 %ln8NQ to i64*
  store i64* %ln8NR, i64** %Sp_Var
  %ln8NS = load i64*, i64** %Sp_Var
  %ln8NT = getelementptr inbounds i64, i64* %ln8NS, i32 0
  %ln8NU = bitcast i64* %ln8NT to i64*
  %ln8NV = load i64, i64* %ln8NU, !tbaa !2
  %ln8NW = inttoptr i64 %ln8NV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8NX = load i64*, i64** %Sp_Var
  %ln8NY = load i64*, i64** %Hp_Var
  %ln8NZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NW( i64* %Base_Arg, i64* %ln8NX, i64* %ln8NY, i64 %ln8NZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Mx:
  %ln8O0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8O0, !tbaa !5
  %ln8O1 = load i64, i64* %R2_Var
  store i64 %ln8O1, i64* %R2_Var
  %ln8O2 = load i64, i64* %R1_Var
  store i64 %ln8O2, i64* %R1_Var
  %ln8O3 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8O4 = load i64*, i64** %Sp_Var
  %ln8O5 = load i64*, i64** %Hp_Var
  %ln8O6 = load i64, i64* %R1_Var
  %ln8O7 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8O3( i64* %Base_Arg, i64* %ln8O4, i64* %ln8O5, i64 %ln8O6, i64 %ln8O7, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lightdir_closure_struct = type <{i64, i64}>
@Main_lightdir_closure$def = internal global %Main_lightdir_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir_info$def to i64), i64 0}>
@Main_lightdir_closure = alias i8, bitcast (%Main_lightdir_closure_struct* @Main_lightdir_closure$def to i8*)
@Main_lightdir_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir_info$def to i8*)
define ghccc void @Main_lightdir_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_lightdir1_closure_struct* @Main_lightdir1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdir_info$def to i64)) to i32),i32 0)}>
{
n8OD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Oj
c8Oj:
  %ln8OE = load i64*, i64** %Sp_Var
  %ln8OF = getelementptr inbounds i64, i64* %ln8OE, i32 -1
  %ln8OG = ptrtoint i64* %ln8OF to i64
  %ln8OH = icmp ult i64 %ln8OG, %SpLim_Arg
  %ln8OI = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln8OH, i1 0 )
  br i1 %ln8OI, label %c8Ok, label %c8Ol
c8Ol:
  %ln8OK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oc_info$def to i64
  %ln8OJ = load i64*, i64** %Sp_Var
  %ln8OL = getelementptr inbounds i64, i64* %ln8OJ, i32 -1
  store i64 %ln8OK, i64* %ln8OL, !tbaa !2
  %ln8OM = load i64, i64* %R2_Var
  store i64 %ln8OM, i64* %R1_Var
  %ln8ON = load i64*, i64** %Sp_Var
  %ln8OO = getelementptr inbounds i64, i64* %ln8ON, i32 -1
  %ln8OP = ptrtoint i64* %ln8OO to i64
  %ln8OQ = inttoptr i64 %ln8OP to i64*
  store i64* %ln8OQ, i64** %Sp_Var
  %ln8OR = load i64, i64* %R1_Var
  %ln8OS = and i64 %ln8OR, 7
  %ln8OT = icmp ne i64 %ln8OS, 0
  br i1 %ln8OT, label %u8OC, label %c8Od
c8Od:
  %ln8OV = load i64, i64* %R1_Var
  %ln8OW = inttoptr i64 %ln8OV to i64*
  %ln8OX = load i64, i64* %ln8OW, !tbaa !4
  %ln8OY = inttoptr i64 %ln8OX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8OZ = load i64*, i64** %Sp_Var
  %ln8P0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OY( i64* %Base_Arg, i64* %ln8OZ, i64* %Hp_Arg, i64 %ln8P0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8OC:
  %ln8P1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8P2 = load i64*, i64** %Sp_Var
  %ln8P3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8P1( i64* %Base_Arg, i64* %ln8P2, i64* %Hp_Arg, i64 %ln8P3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ok:
  %ln8P4 = load i64, i64* %R2_Var
  store i64 %ln8P4, i64* %R2_Var
  %ln8P5 = ptrtoint %Main_lightdir_closure_struct* @Main_lightdir_closure$def to i64
  store i64 %ln8P5, i64* %R1_Var
  %ln8P6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8P7 = bitcast i64* %ln8P6 to i64*
  %ln8P8 = load i64, i64* %ln8P7, !tbaa !5
  %ln8P9 = inttoptr i64 %ln8P8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Pa = load i64*, i64** %Sp_Var
  %ln8Pb = load i64, i64* %R1_Var
  %ln8Pc = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8P9( i64* %Base_Arg, i64* %ln8Pa, i64* %Hp_Arg, i64 %ln8Pb, i64 %ln8Pc, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Oc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oc_info$def to i8*)
define internal ghccc void @c8Oc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_lightdir1_closure_struct* @Main_lightdir1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oc_info$def to i64)) to i32),i32 0)}>
{
n8Pd:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Oc
c8Oc:
  %ln8Pe = load i64, i64* %R1_Var
  %ln8Pf = and i64 %ln8Pe, 7
  switch i64 %ln8Pf, label %c8Og [i64 1, label %c8Og
i64 2, label %c8Oh]
c8Og:
  %ln8Ph = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oo_info$def to i64
  %ln8Pg = load i64*, i64** %Sp_Var
  %ln8Pi = getelementptr inbounds i64, i64* %ln8Pg, i32 0
  store i64 %ln8Ph, i64* %ln8Pi, !tbaa !2
  %ln8Pl = load i64, i64* %R1_Var
  %ln8Pm = add i64 %ln8Pl, 7
  %ln8Pn = inttoptr i64 %ln8Pm to i64*
  %ln8Po = load i64, i64* %ln8Pn, !tbaa !4
  store i64 %ln8Po, i64* %R1_Var
  %ln8Pp = load i64, i64* %R1_Var
  %ln8Pq = and i64 %ln8Pp, 7
  %ln8Pr = icmp ne i64 %ln8Pq, 0
  br i1 %ln8Pr, label %u8OB, label %c8Op
c8Op:
  %ln8Pt = load i64, i64* %R1_Var
  %ln8Pu = inttoptr i64 %ln8Pt to i64*
  %ln8Pv = load i64, i64* %ln8Pu, !tbaa !4
  %ln8Pw = inttoptr i64 %ln8Pv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Px = load i64*, i64** %Sp_Var
  %ln8Py = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Pw( i64* %Base_Arg, i64* %ln8Px, i64* %Hp_Arg, i64 %ln8Py, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8OB:
  %ln8Pz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8PA = load i64*, i64** %Sp_Var
  %ln8PB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Pz( i64* %Base_Arg, i64* %ln8PA, i64* %Hp_Arg, i64 %ln8PB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Oh:
  %ln8PC = ptrtoint %Main_lightdir1_closure_struct* @Main_lightdir1_closure$def to i64
  store i64 %ln8PC, i64* %R1_Var
  %ln8PD = load i64*, i64** %Sp_Var
  %ln8PE = getelementptr inbounds i64, i64* %ln8PD, i32 1
  %ln8PF = ptrtoint i64* %ln8PE to i64
  %ln8PG = inttoptr i64 %ln8PF to i64*
  store i64* %ln8PG, i64** %Sp_Var
  %ln8PI = load i64, i64* %R1_Var
  %ln8PJ = inttoptr i64 %ln8PI to i64*
  %ln8PK = load i64, i64* %ln8PJ, !tbaa !4
  %ln8PL = inttoptr i64 %ln8PK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8PM = load i64*, i64** %Sp_Var
  %ln8PN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8PL( i64* %Base_Arg, i64* %ln8PM, i64* %Hp_Arg, i64 %ln8PN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Oo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Oo_info$def to i8*)
define internal ghccc void @c8Oo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8PO:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8Oo
c8Oo:
  %ln8PP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ot_info$def to i64
  %ln8PQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8PP, i64* %ln8PQ, !tbaa !2
  %ln8PR = add i64 %R1_Arg, 23
  %ln8PS = inttoptr i64 %ln8PR to i64*
  %ln8PT = load i64, i64* %ln8PS, !tbaa !4
  store i64 %ln8PT, i64* %R4_Var
  %ln8PU = add i64 %R1_Arg, 15
  %ln8PV = inttoptr i64 %ln8PU to i64*
  %ln8PW = load i64, i64* %ln8PV, !tbaa !4
  store i64 %ln8PW, i64* %R3_Var
  %ln8PX = add i64 %R1_Arg, 7
  %ln8PY = inttoptr i64 %ln8PX to i64*
  %ln8PZ = load i64, i64* %ln8PY, !tbaa !4
  store i64 %ln8PZ, i64* %R2_Var
  %ln8Q0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Q1 = load i64, i64* %R2_Var
  %ln8Q2 = load i64, i64* %R3_Var
  %ln8Q3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Q0( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Q1, i64 %ln8Q2, i64 %ln8Q3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ot_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ot_info$def to i8*)
define internal ghccc void @c8Ot_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n8Q4:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Ot
c8Ot:
  %ln8Q5 = load i64, i64* %R1_Var
  %ln8Q6 = and i64 %ln8Q5, -8
  store i64 %ln8Q6, i64* %R1_Var
  %ln8Q7 = load i64*, i64** %Sp_Var
  %ln8Q8 = getelementptr inbounds i64, i64* %ln8Q7, i32 1
  %ln8Q9 = ptrtoint i64* %ln8Q8 to i64
  %ln8Qa = inttoptr i64 %ln8Q9 to i64*
  store i64* %ln8Qa, i64** %Sp_Var
  %ln8Qc = load i64, i64* %R1_Var
  %ln8Qd = inttoptr i64 %ln8Qc to i64*
  %ln8Qe = load i64, i64* %ln8Qd, !tbaa !4
  %ln8Qf = inttoptr i64 %ln8Qe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qg = load i64*, i64** %Sp_Var
  %ln8Qh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qf( i64* %Base_Arg, i64* %ln8Qg, i64* %Hp_Arg, i64 %ln8Qh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwcamparams_closure_struct = type <{i64}>
@Main_zdwcamparams_closure$def = internal global %Main_zdwcamparams_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwcamparams_info$def to i64)}>
@Main_zdwcamparams_closure = alias i8, bitcast (%Main_zdwcamparams_closure_struct* @Main_zdwcamparams_closure$def to i8*)
@s7vi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vi_info$def to i8*)
define internal ghccc void @s7vi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n96s:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8QE
c8QE:
  %ln96t = load i64*, i64** %Sp_Var
  %ln96u = getelementptr inbounds i64, i64* %ln96t, i32 -2
  %ln96v = ptrtoint i64* %ln96u to i64
  %ln96w = icmp ult i64 %ln96v, %SpLim_Arg
  %ln96x = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln96w, i1 0 )
  br i1 %ln96x, label %c8QF, label %c8QG
c8QG:
  %ln96z = ptrtoint i8* @stg_upd_frame_info to i64
  %ln96y = load i64*, i64** %Sp_Var
  %ln96A = getelementptr inbounds i64, i64* %ln96y, i32 -2
  store i64 %ln96z, i64* %ln96A, !tbaa !2
  %ln96C = load i64, i64* %R1_Var
  %ln96B = load i64*, i64** %Sp_Var
  %ln96D = getelementptr inbounds i64, i64* %ln96B, i32 -1
  store i64 %ln96C, i64* %ln96D, !tbaa !2
  %ln96G = load i64, i64* %R1_Var
  %ln96H = add i64 %ln96G, 24
  %ln96I = inttoptr i64 %ln96H to i64*
  %ln96J = load i64, i64* %ln96I, !tbaa !4
  store i64 %ln96J, i64* %R3_Var
  %ln96M = load i64, i64* %R1_Var
  %ln96N = add i64 %ln96M, 16
  %ln96O = inttoptr i64 %ln96N to i64*
  %ln96P = load i64, i64* %ln96O, !tbaa !4
  store i64 %ln96P, i64* %R2_Var
  %ln96Q = load i64*, i64** %Sp_Var
  %ln96R = getelementptr inbounds i64, i64* %ln96Q, i32 -2
  %ln96S = ptrtoint i64* %ln96R to i64
  %ln96T = inttoptr i64 %ln96S to i64*
  store i64* %ln96T, i64** %Sp_Var
  %ln96U = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96V = load i64*, i64** %Sp_Var
  %ln96W = load i64, i64* %R1_Var
  %ln96X = load i64, i64* %R2_Var
  %ln96Y = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96U( i64* %Base_Arg, i64* %ln96V, i64* %Hp_Arg, i64 %ln96W, i64 %ln96X, i64 %ln96Y, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8QF:
  %ln96Z = load i64, i64* %R1_Var
  store i64 %ln96Z, i64* %R1_Var
  %ln970 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln971 = bitcast i64* %ln970 to i64*
  %ln972 = load i64, i64* %ln971, !tbaa !5
  %ln973 = inttoptr i64 %ln972 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln974 = load i64*, i64** %Sp_Var
  %ln975 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln973( i64* %Base_Arg, i64* %ln974, i64* %Hp_Arg, i64 %ln975, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vh_info$def to i8*)
define internal ghccc void @s7vh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n976:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8QL
c8QL:
  %ln977 = load i64*, i64** %Sp_Var
  %ln978 = getelementptr inbounds i64, i64* %ln977, i32 -2
  %ln979 = ptrtoint i64* %ln978 to i64
  %ln97a = icmp ult i64 %ln979, %SpLim_Arg
  %ln97b = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97a, i1 0 )
  br i1 %ln97b, label %c8QM, label %c8QN
c8QN:
  %ln97d = ptrtoint i8* @stg_upd_frame_info to i64
  %ln97c = load i64*, i64** %Sp_Var
  %ln97e = getelementptr inbounds i64, i64* %ln97c, i32 -2
  store i64 %ln97d, i64* %ln97e, !tbaa !2
  %ln97g = load i64, i64* %R1_Var
  %ln97f = load i64*, i64** %Sp_Var
  %ln97h = getelementptr inbounds i64, i64* %ln97f, i32 -1
  store i64 %ln97g, i64* %ln97h, !tbaa !2
  %ln97k = load i64, i64* %R1_Var
  %ln97l = add i64 %ln97k, 24
  %ln97m = inttoptr i64 %ln97l to i64*
  %ln97n = load i64, i64* %ln97m, !tbaa !4
  store i64 %ln97n, i64* %R3_Var
  %ln97q = load i64, i64* %R1_Var
  %ln97r = add i64 %ln97q, 16
  %ln97s = inttoptr i64 %ln97r to i64*
  %ln97t = load i64, i64* %ln97s, !tbaa !4
  store i64 %ln97t, i64* %R2_Var
  %ln97u = load i64*, i64** %Sp_Var
  %ln97v = getelementptr inbounds i64, i64* %ln97u, i32 -2
  %ln97w = ptrtoint i64* %ln97v to i64
  %ln97x = inttoptr i64 %ln97w to i64*
  store i64* %ln97x, i64** %Sp_Var
  %ln97y = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97z = load i64*, i64** %Sp_Var
  %ln97A = load i64, i64* %R1_Var
  %ln97B = load i64, i64* %R2_Var
  %ln97C = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97y( i64* %Base_Arg, i64* %ln97z, i64* %Hp_Arg, i64 %ln97A, i64 %ln97B, i64 %ln97C, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8QM:
  %ln97D = load i64, i64* %R1_Var
  store i64 %ln97D, i64* %R1_Var
  %ln97E = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln97F = bitcast i64* %ln97E to i64*
  %ln97G = load i64, i64* %ln97F, !tbaa !5
  %ln97H = inttoptr i64 %ln97G to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln97I = load i64*, i64** %Sp_Var
  %ln97J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln97H( i64* %Base_Arg, i64* %ln97I, i64* %Hp_Arg, i64 %ln97J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vg_info$def to i8*)
define internal ghccc void @s7vg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n97K:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8QS
c8QS:
  %ln97L = load i64*, i64** %Sp_Var
  %ln97M = getelementptr inbounds i64, i64* %ln97L, i32 -2
  %ln97N = ptrtoint i64* %ln97M to i64
  %ln97O = icmp ult i64 %ln97N, %SpLim_Arg
  %ln97P = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln97O, i1 0 )
  br i1 %ln97P, label %c8QT, label %c8QU
c8QU:
  %ln97R = ptrtoint i8* @stg_upd_frame_info to i64
  %ln97Q = load i64*, i64** %Sp_Var
  %ln97S = getelementptr inbounds i64, i64* %ln97Q, i32 -2
  store i64 %ln97R, i64* %ln97S, !tbaa !2
  %ln97U = load i64, i64* %R1_Var
  %ln97T = load i64*, i64** %Sp_Var
  %ln97V = getelementptr inbounds i64, i64* %ln97T, i32 -1
  store i64 %ln97U, i64* %ln97V, !tbaa !2
  %ln97Y = load i64, i64* %R1_Var
  %ln97Z = add i64 %ln97Y, 24
  %ln980 = inttoptr i64 %ln97Z to i64*
  %ln981 = load i64, i64* %ln980, !tbaa !4
  store i64 %ln981, i64* %R3_Var
  %ln984 = load i64, i64* %R1_Var
  %ln985 = add i64 %ln984, 16
  %ln986 = inttoptr i64 %ln985 to i64*
  %ln987 = load i64, i64* %ln986, !tbaa !4
  store i64 %ln987, i64* %R2_Var
  %ln988 = load i64*, i64** %Sp_Var
  %ln989 = getelementptr inbounds i64, i64* %ln988, i32 -2
  %ln98a = ptrtoint i64* %ln989 to i64
  %ln98b = inttoptr i64 %ln98a to i64*
  store i64* %ln98b, i64** %Sp_Var
  %ln98c = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98d = load i64*, i64** %Sp_Var
  %ln98e = load i64, i64* %R1_Var
  %ln98f = load i64, i64* %R2_Var
  %ln98g = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98c( i64* %Base_Arg, i64* %ln98d, i64* %Hp_Arg, i64 %ln98e, i64 %ln98f, i64 %ln98g, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8QT:
  %ln98h = load i64, i64* %R1_Var
  store i64 %ln98h, i64* %R1_Var
  %ln98i = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln98j = bitcast i64* %ln98i to i64*
  %ln98k = load i64, i64* %ln98j, !tbaa !5
  %ln98l = inttoptr i64 %ln98k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln98m = load i64*, i64** %Sp_Var
  %ln98n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln98l( i64* %Base_Arg, i64* %ln98m, i64* %Hp_Arg, i64 %ln98n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7v7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7v7_info$def to i8*)
define internal ghccc void @s7v7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n98o:
  %ls7v2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8QV
c8QV:
  %ln98p = load i64*, i64** %Sp_Var
  %ln98q = getelementptr inbounds i64, i64* %ln98p, i32 -6
  %ln98r = ptrtoint i64* %ln98q to i64
  %ln98s = icmp ult i64 %ln98r, %SpLim_Arg
  %ln98t = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln98s, i1 0 )
  br i1 %ln98t, label %c8QX, label %c8QY
c8QY:
  %ln98v = ptrtoint i8* @stg_upd_frame_info to i64
  %ln98u = load i64*, i64** %Sp_Var
  %ln98w = getelementptr inbounds i64, i64* %ln98u, i32 -2
  store i64 %ln98v, i64* %ln98w, !tbaa !2
  %ln98y = load i64, i64* %R1_Var
  %ln98x = load i64*, i64** %Sp_Var
  %ln98z = getelementptr inbounds i64, i64* %ln98x, i32 -1
  store i64 %ln98y, i64* %ln98z, !tbaa !2
  %ln98B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qq_info$def to i64
  %ln98A = load i64*, i64** %Sp_Var
  %ln98C = getelementptr inbounds i64, i64* %ln98A, i32 -4
  store i64 %ln98B, i64* %ln98C, !tbaa !2
  %ln98F = load i64, i64* %R1_Var
  %ln98G = add i64 %ln98F, 16
  %ln98H = inttoptr i64 %ln98G to i64*
  %ln98I = load i64, i64* %ln98H, !tbaa !4
  store i64 %ln98I, i64* %ls7v2
  %ln98L = load i64, i64* %R1_Var
  %ln98M = add i64 %ln98L, 24
  %ln98N = inttoptr i64 %ln98M to i64*
  %ln98O = load i64, i64* %ln98N, !tbaa !4
  store i64 %ln98O, i64* %R1_Var
  %ln98Q = load i64, i64* %ls7v2
  %ln98P = load i64*, i64** %Sp_Var
  %ln98R = getelementptr inbounds i64, i64* %ln98P, i32 -3
  store i64 %ln98Q, i64* %ln98R, !tbaa !2
  %ln98S = load i64*, i64** %Sp_Var
  %ln98T = getelementptr inbounds i64, i64* %ln98S, i32 -4
  %ln98U = ptrtoint i64* %ln98T to i64
  %ln98V = inttoptr i64 %ln98U to i64*
  store i64* %ln98V, i64** %Sp_Var
  %ln98W = load i64, i64* %R1_Var
  %ln98X = and i64 %ln98W, 7
  %ln98Y = icmp ne i64 %ln98X, 0
  br i1 %ln98Y, label %u8R4, label %c8Qr
c8Qr:
  %ln990 = load i64, i64* %R1_Var
  %ln991 = inttoptr i64 %ln990 to i64*
  %ln992 = load i64, i64* %ln991, !tbaa !4
  %ln993 = inttoptr i64 %ln992 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln994 = load i64*, i64** %Sp_Var
  %ln995 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln993( i64* %Base_Arg, i64* %ln994, i64* %Hp_Arg, i64 %ln995, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8R4:
  %ln996 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln997 = load i64*, i64** %Sp_Var
  %ln998 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln996( i64* %Base_Arg, i64* %ln997, i64* %Hp_Arg, i64 %ln998, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8QX:
  %ln999 = load i64, i64* %R1_Var
  store i64 %ln999, i64* %R1_Var
  %ln99a = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln99b = bitcast i64* %ln99a to i64*
  %ln99c = load i64, i64* %ln99b, !tbaa !5
  %ln99d = inttoptr i64 %ln99c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99e = load i64*, i64** %Sp_Var
  %ln99f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99d( i64* %Base_Arg, i64* %ln99e, i64* %Hp_Arg, i64 %ln99f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Qq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qq_info$def to i8*)
define internal ghccc void @c8Qq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n99g:
  %ls7v9 = alloca i64, i32 1
  %ls7va = alloca i64, i32 1
  %ls7vb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Qq
c8Qq:
  %ln99i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qv_info$def to i64
  %ln99h = load i64*, i64** %Sp_Var
  %ln99j = getelementptr inbounds i64, i64* %ln99h, i32 -2
  store i64 %ln99i, i64* %ln99j, !tbaa !2
  %ln99m = load i64, i64* %R1_Var
  %ln99n = add i64 %ln99m, 7
  %ln99o = inttoptr i64 %ln99n to i64*
  %ln99p = load i64, i64* %ln99o, !tbaa !4
  store i64 %ln99p, i64* %ls7v9
  %ln99s = load i64, i64* %R1_Var
  %ln99t = add i64 %ln99s, 15
  %ln99u = inttoptr i64 %ln99t to i64*
  %ln99v = load i64, i64* %ln99u, !tbaa !4
  store i64 %ln99v, i64* %ls7va
  %ln99y = load i64, i64* %R1_Var
  %ln99z = add i64 %ln99y, 23
  %ln99A = inttoptr i64 %ln99z to i64*
  %ln99B = load i64, i64* %ln99A, !tbaa !4
  store i64 %ln99B, i64* %ls7vb
  %ln99C = load i64*, i64** %Sp_Var
  %ln99D = getelementptr inbounds i64, i64* %ln99C, i32 1
  %ln99E = bitcast i64* %ln99D to i64*
  %ln99F = load i64, i64* %ln99E, !tbaa !2
  store i64 %ln99F, i64* %R1_Var
  %ln99H = load i64, i64* %ls7vb
  %ln99G = load i64*, i64** %Sp_Var
  %ln99I = getelementptr inbounds i64, i64* %ln99G, i32 -1
  store i64 %ln99H, i64* %ln99I, !tbaa !2
  %ln99K = load i64, i64* %ls7va
  %ln99J = load i64*, i64** %Sp_Var
  %ln99L = getelementptr inbounds i64, i64* %ln99J, i32 0
  store i64 %ln99K, i64* %ln99L, !tbaa !2
  %ln99N = load i64, i64* %ls7v9
  %ln99M = load i64*, i64** %Sp_Var
  %ln99O = getelementptr inbounds i64, i64* %ln99M, i32 1
  store i64 %ln99N, i64* %ln99O, !tbaa !2
  %ln99P = load i64*, i64** %Sp_Var
  %ln99Q = getelementptr inbounds i64, i64* %ln99P, i32 -2
  %ln99R = ptrtoint i64* %ln99Q to i64
  %ln99S = inttoptr i64 %ln99R to i64*
  store i64* %ln99S, i64** %Sp_Var
  %ln99T = load i64, i64* %R1_Var
  %ln99U = and i64 %ln99T, 7
  %ln99V = icmp ne i64 %ln99U, 0
  br i1 %ln99V, label %u8R3, label %c8Qw
c8Qw:
  %ln99X = load i64, i64* %R1_Var
  %ln99Y = inttoptr i64 %ln99X to i64*
  %ln99Z = load i64, i64* %ln99Y, !tbaa !4
  %ln9a0 = inttoptr i64 %ln99Z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9a1 = load i64*, i64** %Sp_Var
  %ln9a2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9a0( i64* %Base_Arg, i64* %ln9a1, i64* %Hp_Arg, i64 %ln9a2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8R3:
  %ln9a3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9a4 = load i64*, i64** %Sp_Var
  %ln9a5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9a3( i64* %Base_Arg, i64* %ln9a4, i64* %Hp_Arg, i64 %ln9a5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Qv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Qv_info$def to i8*)
define internal ghccc void @c8Qv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9a6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7vd = alloca i64, i32 1
  %ls7ve = alloca i64, i32 1
  %ls7vf = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Qv
c8Qv:
  %ln9a7 = load i64*, i64** %Hp_Var
  %ln9a8 = getelementptr inbounds i64, i64* %ln9a7, i32 16
  %ln9a9 = ptrtoint i64* %ln9a8 to i64
  %ln9aa = inttoptr i64 %ln9a9 to i64*
  store i64* %ln9aa, i64** %Hp_Var
  %ln9ab = load i64*, i64** %Hp_Var
  %ln9ac = ptrtoint i64* %ln9ab to i64
  %ln9ad = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9ae = bitcast i64* %ln9ad to i64*
  %ln9af = load i64, i64* %ln9ae, !tbaa !5
  %ln9ag = icmp ugt i64 %ln9ac, %ln9af
  %ln9ah = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ag, i1 0 )
  br i1 %ln9ah, label %c8R2, label %c8R1
c8R1:
  %ln9ak = load i64, i64* %R1_Var
  %ln9al = add i64 %ln9ak, 7
  %ln9am = inttoptr i64 %ln9al to i64*
  %ln9an = load i64, i64* %ln9am, !tbaa !4
  store i64 %ln9an, i64* %ls7vd
  %ln9aq = load i64, i64* %R1_Var
  %ln9ar = add i64 %ln9aq, 15
  %ln9as = inttoptr i64 %ln9ar to i64*
  %ln9at = load i64, i64* %ln9as, !tbaa !4
  store i64 %ln9at, i64* %ls7ve
  %ln9aw = load i64, i64* %R1_Var
  %ln9ax = add i64 %ln9aw, 23
  %ln9ay = inttoptr i64 %ln9ax to i64*
  %ln9az = load i64, i64* %ln9ay, !tbaa !4
  store i64 %ln9az, i64* %ls7vf
  %ln9aB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vi_info$def to i64
  %ln9aA = load i64*, i64** %Hp_Var
  %ln9aC = getelementptr inbounds i64, i64* %ln9aA, i32 -15
  store i64 %ln9aB, i64* %ln9aC, !tbaa !3
  %ln9aE = load i64*, i64** %Sp_Var
  %ln9aF = getelementptr inbounds i64, i64* %ln9aE, i32 1
  %ln9aG = bitcast i64* %ln9aF to i64*
  %ln9aH = load i64, i64* %ln9aG, !tbaa !2
  %ln9aD = load i64*, i64** %Hp_Var
  %ln9aI = getelementptr inbounds i64, i64* %ln9aD, i32 -13
  store i64 %ln9aH, i64* %ln9aI, !tbaa !3
  %ln9aK = load i64, i64* %ls7vf
  %ln9aJ = load i64*, i64** %Hp_Var
  %ln9aL = getelementptr inbounds i64, i64* %ln9aJ, i32 -12
  store i64 %ln9aK, i64* %ln9aL, !tbaa !3
  %ln9aN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vh_info$def to i64
  %ln9aM = load i64*, i64** %Hp_Var
  %ln9aO = getelementptr inbounds i64, i64* %ln9aM, i32 -11
  store i64 %ln9aN, i64* %ln9aO, !tbaa !3
  %ln9aQ = load i64*, i64** %Sp_Var
  %ln9aR = getelementptr inbounds i64, i64* %ln9aQ, i32 2
  %ln9aS = bitcast i64* %ln9aR to i64*
  %ln9aT = load i64, i64* %ln9aS, !tbaa !2
  %ln9aP = load i64*, i64** %Hp_Var
  %ln9aU = getelementptr inbounds i64, i64* %ln9aP, i32 -9
  store i64 %ln9aT, i64* %ln9aU, !tbaa !3
  %ln9aW = load i64, i64* %ls7ve
  %ln9aV = load i64*, i64** %Hp_Var
  %ln9aX = getelementptr inbounds i64, i64* %ln9aV, i32 -8
  store i64 %ln9aW, i64* %ln9aX, !tbaa !3
  %ln9aZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vg_info$def to i64
  %ln9aY = load i64*, i64** %Hp_Var
  %ln9b0 = getelementptr inbounds i64, i64* %ln9aY, i32 -7
  store i64 %ln9aZ, i64* %ln9b0, !tbaa !3
  %ln9b2 = load i64*, i64** %Sp_Var
  %ln9b3 = getelementptr inbounds i64, i64* %ln9b2, i32 3
  %ln9b4 = bitcast i64* %ln9b3 to i64*
  %ln9b5 = load i64, i64* %ln9b4, !tbaa !2
  %ln9b1 = load i64*, i64** %Hp_Var
  %ln9b6 = getelementptr inbounds i64, i64* %ln9b1, i32 -5
  store i64 %ln9b5, i64* %ln9b6, !tbaa !3
  %ln9b8 = load i64, i64* %ls7vd
  %ln9b7 = load i64*, i64** %Hp_Var
  %ln9b9 = getelementptr inbounds i64, i64* %ln9b7, i32 -4
  store i64 %ln9b8, i64* %ln9b9, !tbaa !3
  %ln9bb = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %ln9ba = load i64*, i64** %Hp_Var
  %ln9bc = getelementptr inbounds i64, i64* %ln9ba, i32 -3
  store i64 %ln9bb, i64* %ln9bc, !tbaa !3
  %ln9be = load i64*, i64** %Hp_Var
  %ln9bf = getelementptr inbounds i64, i64* %ln9be, i32 -7
  %ln9bg = ptrtoint i64* %ln9bf to i64
  %ln9bd = load i64*, i64** %Hp_Var
  %ln9bh = getelementptr inbounds i64, i64* %ln9bd, i32 -2
  store i64 %ln9bg, i64* %ln9bh, !tbaa !3
  %ln9bj = load i64*, i64** %Hp_Var
  %ln9bk = getelementptr inbounds i64, i64* %ln9bj, i32 -11
  %ln9bl = ptrtoint i64* %ln9bk to i64
  %ln9bi = load i64*, i64** %Hp_Var
  %ln9bm = getelementptr inbounds i64, i64* %ln9bi, i32 -1
  store i64 %ln9bl, i64* %ln9bm, !tbaa !3
  %ln9bo = load i64*, i64** %Hp_Var
  %ln9bp = getelementptr inbounds i64, i64* %ln9bo, i32 -15
  %ln9bq = ptrtoint i64* %ln9bp to i64
  %ln9bn = load i64*, i64** %Hp_Var
  %ln9br = getelementptr inbounds i64, i64* %ln9bn, i32 0
  store i64 %ln9bq, i64* %ln9br, !tbaa !3
  %ln9bt = load i64*, i64** %Hp_Var
  %ln9bu = ptrtoint i64* %ln9bt to i64
  %ln9bv = add i64 %ln9bu, -23
  store i64 %ln9bv, i64* %R1_Var
  %ln9bw = load i64*, i64** %Sp_Var
  %ln9bx = getelementptr inbounds i64, i64* %ln9bw, i32 4
  %ln9by = ptrtoint i64* %ln9bx to i64
  %ln9bz = inttoptr i64 %ln9by to i64*
  store i64* %ln9bz, i64** %Sp_Var
  %ln9bA = load i64*, i64** %Sp_Var
  %ln9bB = getelementptr inbounds i64, i64* %ln9bA, i32 0
  %ln9bC = bitcast i64* %ln9bB to i64*
  %ln9bD = load i64, i64* %ln9bC, !tbaa !2
  %ln9bE = inttoptr i64 %ln9bD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bF = load i64*, i64** %Sp_Var
  %ln9bG = load i64*, i64** %Hp_Var
  %ln9bH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bE( i64* %Base_Arg, i64* %ln9bF, i64* %ln9bG, i64 %ln9bH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8R2:
  %ln9bI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %ln9bI, !tbaa !5
  %ln9bJ = load i64, i64* %R1_Var
  store i64 %ln9bJ, i64* %R1_Var
  %ln9bK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bL = load i64*, i64** %Sp_Var
  %ln9bM = load i64*, i64** %Hp_Var
  %ln9bN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bK( i64* %Base_Arg, i64* %ln9bL, i64* %ln9bM, i64 %ln9bN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vj_info$def to i8*)
define internal ghccc void @s7vj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
n9bO:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Rc
c8Rc:
  %ln9bP = load i64*, i64** %Sp_Var
  %ln9bQ = getelementptr inbounds i64, i64* %ln9bP, i32 -3
  %ln9bR = ptrtoint i64* %ln9bQ to i64
  %ln9bS = icmp ult i64 %ln9bR, %SpLim_Arg
  %ln9bT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9bS, i1 0 )
  br i1 %ln9bT, label %c8Ri, label %c8Rj
c8Rj:
  %ln9bV = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9bU = load i64*, i64** %Sp_Var
  %ln9bW = getelementptr inbounds i64, i64* %ln9bU, i32 -2
  store i64 %ln9bV, i64* %ln9bW, !tbaa !2
  %ln9bY = load i64, i64* %R1_Var
  %ln9bX = load i64*, i64** %Sp_Var
  %ln9bZ = getelementptr inbounds i64, i64* %ln9bX, i32 -1
  store i64 %ln9bY, i64* %ln9bZ, !tbaa !2
  %ln9c1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8R9_info$def to i64
  %ln9c0 = load i64*, i64** %Sp_Var
  %ln9c2 = getelementptr inbounds i64, i64* %ln9c0, i32 -3
  store i64 %ln9c1, i64* %ln9c2, !tbaa !2
  %ln9c5 = load i64, i64* %R1_Var
  %ln9c6 = add i64 %ln9c5, 16
  %ln9c7 = inttoptr i64 %ln9c6 to i64*
  %ln9c8 = load i64, i64* %ln9c7, !tbaa !4
  store i64 %ln9c8, i64* %R1_Var
  %ln9c9 = load i64*, i64** %Sp_Var
  %ln9ca = getelementptr inbounds i64, i64* %ln9c9, i32 -3
  %ln9cb = ptrtoint i64* %ln9ca to i64
  %ln9cc = inttoptr i64 %ln9cb to i64*
  store i64* %ln9cc, i64** %Sp_Var
  %ln9cd = load i64, i64* %R1_Var
  %ln9ce = and i64 %ln9cd, 7
  %ln9cf = icmp ne i64 %ln9ce, 0
  br i1 %ln9cf, label %u8Ro, label %c8Ra
c8Ra:
  %ln9ch = load i64, i64* %R1_Var
  %ln9ci = inttoptr i64 %ln9ch to i64*
  %ln9cj = load i64, i64* %ln9ci, !tbaa !4
  %ln9ck = inttoptr i64 %ln9cj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cl = load i64*, i64** %Sp_Var
  %ln9cm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ck( i64* %Base_Arg, i64* %ln9cl, i64* %Hp_Arg, i64 %ln9cm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ro:
  %ln9cn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8R9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9co = load i64*, i64** %Sp_Var
  %ln9cp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cn( i64* %Base_Arg, i64* %ln9co, i64* %Hp_Arg, i64 %ln9cp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ri:
  %ln9cq = load i64, i64* %R1_Var
  store i64 %ln9cq, i64* %R1_Var
  %ln9cr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9cs = bitcast i64* %ln9cr to i64*
  %ln9ct = load i64, i64* %ln9cs, !tbaa !5
  %ln9cu = inttoptr i64 %ln9ct to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cv = load i64*, i64** %Sp_Var
  %ln9cw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cu( i64* %Base_Arg, i64* %ln9cv, i64* %Hp_Arg, i64 %ln9cw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8R9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8R9_info$def to i8*)
define internal ghccc void @c8R9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9cx:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c8R9
c8R9:
  %ln9cy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rf_info$def to i64
  %ln9cz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9cy, i64* %ln9cz, !tbaa !2
  %ln9cA = add i64 %R1_Arg, 23
  %ln9cB = inttoptr i64 %ln9cA to i64*
  %ln9cC = load i64, i64* %ln9cB, !tbaa !4
  store i64 %ln9cC, i64* %R4_Var
  %ln9cD = add i64 %R1_Arg, 15
  %ln9cE = inttoptr i64 %ln9cD to i64*
  %ln9cF = load i64, i64* %ln9cE, !tbaa !4
  store i64 %ln9cF, i64* %R3_Var
  %ln9cG = add i64 %R1_Arg, 7
  %ln9cH = inttoptr i64 %ln9cG to i64*
  %ln9cI = load i64, i64* %ln9cH, !tbaa !4
  store i64 %ln9cI, i64* %R2_Var
  %ln9cJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cK = load i64, i64* %R2_Var
  %ln9cL = load i64, i64* %R3_Var
  %ln9cM = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9cK, i64 %ln9cL, i64 %ln9cM, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Rf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rf_info$def to i8*)
define internal ghccc void @c8Rf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n9cN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c8Rf
c8Rf:
  %ln9cO = load i64*, i64** %Hp_Var
  %ln9cP = getelementptr inbounds i64, i64* %ln9cO, i32 3
  %ln9cQ = ptrtoint i64* %ln9cP to i64
  %ln9cR = inttoptr i64 %ln9cQ to i64*
  store i64* %ln9cR, i64** %Hp_Var
  %ln9cS = load i64*, i64** %Hp_Var
  %ln9cT = ptrtoint i64* %ln9cS to i64
  %ln9cU = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9cV = bitcast i64* %ln9cU to i64*
  %ln9cW = load i64, i64* %ln9cV, !tbaa !5
  %ln9cX = icmp ugt i64 %ln9cT, %ln9cW
  %ln9cY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9cX, i1 0 )
  br i1 %ln9cY, label %c8Rn, label %c8Rm
c8Rm:
  %ln9d0 = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %ln9cZ = load i64*, i64** %Hp_Var
  %ln9d1 = getelementptr inbounds i64, i64* %ln9cZ, i32 -2
  store i64 %ln9d0, i64* %ln9d1, !tbaa !3
  %ln9d3 = load i64, i64* %R1_Var
  %ln9d2 = load i64*, i64** %Hp_Var
  %ln9d4 = getelementptr inbounds i64, i64* %ln9d2, i32 -1
  store i64 %ln9d3, i64* %ln9d4, !tbaa !3
  %ln9d6 = load i64, i64* %R2_Var
  %ln9d5 = load i64*, i64** %Hp_Var
  %ln9d7 = getelementptr inbounds i64, i64* %ln9d5, i32 0
  store i64 %ln9d6, i64* %ln9d7, !tbaa !3
  %ln9d9 = load i64*, i64** %Hp_Var
  %ln9da = ptrtoint i64* %ln9d9 to i64
  %ln9db = add i64 %ln9da, -15
  store i64 %ln9db, i64* %R1_Var
  %ln9dc = load i64*, i64** %Sp_Var
  %ln9dd = getelementptr inbounds i64, i64* %ln9dc, i32 1
  %ln9de = ptrtoint i64* %ln9dd to i64
  %ln9df = inttoptr i64 %ln9de to i64*
  store i64* %ln9df, i64** %Sp_Var
  %ln9dg = load i64*, i64** %Sp_Var
  %ln9dh = getelementptr inbounds i64, i64* %ln9dg, i32 0
  %ln9di = bitcast i64* %ln9dh to i64*
  %ln9dj = load i64, i64* %ln9di, !tbaa !2
  %ln9dk = inttoptr i64 %ln9dj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dl = load i64*, i64** %Sp_Var
  %ln9dm = load i64*, i64** %Hp_Var
  %ln9dn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dk( i64* %Base_Arg, i64* %ln9dl, i64* %ln9dm, i64 %ln9dn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Rn:
  %ln9do = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9do, !tbaa !5
  %ln9dp = load i64, i64* %R2_Var
  store i64 %ln9dp, i64* %R2_Var
  %ln9dq = load i64, i64* %R1_Var
  store i64 %ln9dq, i64* %R1_Var
  %ln9dr = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ds = load i64*, i64** %Sp_Var
  %ln9dt = load i64*, i64** %Hp_Var
  %ln9du = load i64, i64* %R1_Var
  %ln9dv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dr( i64* %Base_Arg, i64* %ln9ds, i64* %ln9dt, i64 %ln9du, i64 %ln9dv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vD_info$def to i8*)
define internal ghccc void @s7vD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9dw:
  %ls7vx = alloca i64, i32 1
  %ls7vA = alloca i64, i32 1
  %ls7vB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8RP
c8RP:
  %ln9dx = load i64*, i64** %Sp_Var
  %ln9dy = getelementptr inbounds i64, i64* %ln9dx, i32 -6
  %ln9dz = ptrtoint i64* %ln9dy to i64
  %ln9dA = icmp ult i64 %ln9dz, %SpLim_Arg
  %ln9dB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9dA, i1 0 )
  br i1 %ln9dB, label %c8Sh, label %c8Si
c8Si:
  %ln9dD = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9dC = load i64*, i64** %Sp_Var
  %ln9dE = getelementptr inbounds i64, i64* %ln9dC, i32 -2
  store i64 %ln9dD, i64* %ln9dE, !tbaa !2
  %ln9dG = load i64, i64* %R1_Var
  %ln9dF = load i64*, i64** %Sp_Var
  %ln9dH = getelementptr inbounds i64, i64* %ln9dF, i32 -1
  store i64 %ln9dG, i64* %ln9dH, !tbaa !2
  %ln9dJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RM_info$def to i64
  %ln9dI = load i64*, i64** %Sp_Var
  %ln9dK = getelementptr inbounds i64, i64* %ln9dI, i32 -6
  store i64 %ln9dJ, i64* %ln9dK, !tbaa !2
  %ln9dN = load i64, i64* %R1_Var
  %ln9dO = add i64 %ln9dN, 16
  %ln9dP = inttoptr i64 %ln9dO to i64*
  %ln9dQ = load i64, i64* %ln9dP, !tbaa !4
  store i64 %ln9dQ, i64* %ls7vx
  %ln9dT = load i64, i64* %R1_Var
  %ln9dU = add i64 %ln9dT, 24
  %ln9dV = inttoptr i64 %ln9dU to i64*
  %ln9dW = load i64, i64* %ln9dV, !tbaa !4
  store i64 %ln9dW, i64* %ls7vA
  %ln9dZ = load i64, i64* %R1_Var
  %ln9e0 = add i64 %ln9dZ, 32
  %ln9e1 = inttoptr i64 %ln9e0 to i64*
  %ln9e2 = load i64, i64* %ln9e1, !tbaa !4
  store i64 %ln9e2, i64* %ls7vB
  %ln9e5 = load i64, i64* %R1_Var
  %ln9e6 = add i64 %ln9e5, 40
  %ln9e7 = inttoptr i64 %ln9e6 to i64*
  %ln9e8 = load i64, i64* %ln9e7, !tbaa !4
  store i64 %ln9e8, i64* %R1_Var
  %ln9ea = load i64, i64* %ls7vx
  %ln9e9 = load i64*, i64** %Sp_Var
  %ln9eb = getelementptr inbounds i64, i64* %ln9e9, i32 -5
  store i64 %ln9ea, i64* %ln9eb, !tbaa !2
  %ln9ed = load i64, i64* %ls7vA
  %ln9ec = load i64*, i64** %Sp_Var
  %ln9ee = getelementptr inbounds i64, i64* %ln9ec, i32 -4
  store i64 %ln9ed, i64* %ln9ee, !tbaa !2
  %ln9eg = load i64, i64* %ls7vB
  %ln9ef = load i64*, i64** %Sp_Var
  %ln9eh = getelementptr inbounds i64, i64* %ln9ef, i32 -3
  store i64 %ln9eg, i64* %ln9eh, !tbaa !2
  %ln9ei = load i64*, i64** %Sp_Var
  %ln9ej = getelementptr inbounds i64, i64* %ln9ei, i32 -6
  %ln9ek = ptrtoint i64* %ln9ej to i64
  %ln9el = inttoptr i64 %ln9ek to i64*
  store i64* %ln9el, i64** %Sp_Var
  %ln9em = load i64, i64* %R1_Var
  %ln9en = and i64 %ln9em, 7
  %ln9eo = icmp ne i64 %ln9en, 0
  br i1 %ln9eo, label %u8Sq, label %c8RN
c8RN:
  %ln9eq = load i64, i64* %R1_Var
  %ln9er = inttoptr i64 %ln9eq to i64*
  %ln9es = load i64, i64* %ln9er, !tbaa !4
  %ln9et = inttoptr i64 %ln9es to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eu = load i64*, i64** %Sp_Var
  %ln9ev = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9et( i64* %Base_Arg, i64* %ln9eu, i64* %Hp_Arg, i64 %ln9ev, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Sq:
  %ln9ew = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ex = load i64*, i64** %Sp_Var
  %ln9ey = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ew( i64* %Base_Arg, i64* %ln9ex, i64* %Hp_Arg, i64 %ln9ey, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Sh:
  %ln9ez = load i64, i64* %R1_Var
  store i64 %ln9ez, i64* %R1_Var
  %ln9eA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9eB = bitcast i64* %ln9eA to i64*
  %ln9eC = load i64, i64* %ln9eB, !tbaa !5
  %ln9eD = inttoptr i64 %ln9eC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eE = load i64*, i64** %Sp_Var
  %ln9eF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eD( i64* %Base_Arg, i64* %ln9eE, i64* %Hp_Arg, i64 %ln9eF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8RM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RM_info$def to i8*)
define internal ghccc void @c8RM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9eG:
  %ls7vF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8RM
c8RM:
  %ln9eH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RS_info$def to i64
  %ln9eI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9eH, i64* %ln9eI, !tbaa !2
  %ln9eL = load i64, i64* %R1_Var
  %ln9eM = add i64 %ln9eL, 7
  %ln9eN = inttoptr i64 %ln9eM to double*
  %ln9eO = load double, double* %ln9eN, !tbaa !4
  store double %ln9eO, double* %ls7vF
  %ln9eP = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9eQ = bitcast i64* %ln9eP to i64*
  %ln9eR = load i64, i64* %ln9eQ, !tbaa !2
  store i64 %ln9eR, i64* %R1_Var
  %ln9eS = load double, double* %ls7vF
  %ln9eT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9eU = bitcast i64* %ln9eT to double*
  store double %ln9eS, double* %ln9eU, !tbaa !2
  %ln9eV = load i64, i64* %R1_Var
  %ln9eW = and i64 %ln9eV, 7
  %ln9eX = icmp ne i64 %ln9eW, 0
  br i1 %ln9eX, label %u8Sp, label %c8RT
c8RT:
  %ln9eZ = load i64, i64* %R1_Var
  %ln9f0 = inttoptr i64 %ln9eZ to i64*
  %ln9f1 = load i64, i64* %ln9f0, !tbaa !4
  %ln9f2 = inttoptr i64 %ln9f1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9f3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9f2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9f3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Sp:
  %ln9f4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9f5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9f4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9f5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8RS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RS_info$def to i8*)
define internal ghccc void @c8RS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
n9f6:
  %ls7vH = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8RS
c8RS:
  %ln9f7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RX_info$def to i64
  %ln9f8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9f7, i64* %ln9f8, !tbaa !2
  %ln9fb = load i64, i64* %R1_Var
  %ln9fc = add i64 %ln9fb, 7
  %ln9fd = inttoptr i64 %ln9fc to double*
  %ln9fe = load double, double* %ln9fd, !tbaa !4
  store double %ln9fe, double* %ls7vH
  %ln9ff = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9fg = bitcast i64* %ln9ff to i64*
  %ln9fh = load i64, i64* %ln9fg, !tbaa !2
  store i64 %ln9fh, i64* %R1_Var
  %ln9fi = load double, double* %ls7vH
  %ln9fj = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9fk = bitcast i64* %ln9fj to double*
  store double %ln9fi, double* %ln9fk, !tbaa !2
  %ln9fl = load i64, i64* %R1_Var
  %ln9fm = and i64 %ln9fl, 7
  %ln9fn = icmp ne i64 %ln9fm, 0
  br i1 %ln9fn, label %u8Sr, label %c8RY
c8RY:
  %ln9fp = load i64, i64* %R1_Var
  %ln9fq = inttoptr i64 %ln9fp to i64*
  %ln9fr = load i64, i64* %ln9fq, !tbaa !4
  %ln9fs = inttoptr i64 %ln9fr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ft = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fs( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9ft, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Sr:
  %ln9fu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9fv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8RX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RX_info$def to i8*)
define internal ghccc void @c8RX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9fw:
  %ls7vJ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8RX
c8RX:
  %ln9fx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8S2_info$def to i64
  %ln9fy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9fx, i64* %ln9fy, !tbaa !2
  %ln9fB = load i64, i64* %R1_Var
  %ln9fC = add i64 %ln9fB, 7
  %ln9fD = inttoptr i64 %ln9fC to double*
  %ln9fE = load double, double* %ln9fD, !tbaa !4
  store double %ln9fE, double* %ls7vJ
  %ln9fF = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9fG = bitcast i64* %ln9fF to i64*
  %ln9fH = load i64, i64* %ln9fG, !tbaa !2
  store i64 %ln9fH, i64* %R1_Var
  %ln9fI = load double, double* %ls7vJ
  %ln9fJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9fK = bitcast i64* %ln9fJ to double*
  store double %ln9fI, double* %ln9fK, !tbaa !2
  %ln9fL = load i64, i64* %R1_Var
  %ln9fM = and i64 %ln9fL, 7
  %ln9fN = icmp ne i64 %ln9fM, 0
  br i1 %ln9fN, label %u8Ss, label %c8S3
c8S3:
  %ln9fP = load i64, i64* %R1_Var
  %ln9fQ = inttoptr i64 %ln9fP to i64*
  %ln9fR = load i64, i64* %ln9fQ, !tbaa !4
  %ln9fS = inttoptr i64 %ln9fR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9fT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ss:
  %ln9fU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8S2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9fV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8S2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8S2_info$def to i8*)
define internal ghccc void @c8S2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9fW:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7vO = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8S2
c8S2:
  %ln9fX = load i64*, i64** %Hp_Var
  %ln9fY = getelementptr inbounds i64, i64* %ln9fX, i32 2
  %ln9fZ = ptrtoint i64* %ln9fY to i64
  %ln9g0 = inttoptr i64 %ln9fZ to i64*
  store i64* %ln9g0, i64** %Hp_Var
  %ln9g1 = load i64*, i64** %Hp_Var
  %ln9g2 = ptrtoint i64* %ln9g1 to i64
  %ln9g3 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9g4 = bitcast i64* %ln9g3 to i64*
  %ln9g5 = load i64, i64* %ln9g4, !tbaa !5
  %ln9g6 = icmp ugt i64 %ln9g2, %ln9g5
  %ln9g7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9g6, i1 0 )
  br i1 %ln9g7, label %c8So, label %c8Sn
c8Sn:
  %ln9g8 = load i64*, i64** %Sp_Var
  %ln9g9 = getelementptr inbounds i64, i64* %ln9g8, i32 3
  %ln9ga = bitcast i64* %ln9g9 to double*
  %ln9gb = load double, double* %ln9ga, !tbaa !2
  %ln9gc = load i64*, i64** %Sp_Var
  %ln9gd = getelementptr inbounds i64, i64* %ln9gc, i32 2
  %ln9ge = bitcast i64* %ln9gd to double*
  %ln9gf = load double, double* %ln9ge, !tbaa !2
  %ln9gg = fmul double %ln9gb, %ln9gf
  %ln9gh = load i64*, i64** %Sp_Var
  %ln9gi = getelementptr inbounds i64, i64* %ln9gh, i32 1
  %ln9gj = bitcast i64* %ln9gi to double*
  %ln9gk = load double, double* %ln9gj, !tbaa !2
  %ln9gn = load i64, i64* %R1_Var
  %ln9go = add i64 %ln9gn, 7
  %ln9gp = inttoptr i64 %ln9go to double*
  %ln9gq = load double, double* %ln9gp, !tbaa !4
  %ln9gr = fmul double %ln9gk, %ln9gq
  %ln9gs = fsub double %ln9gg, %ln9gr
  store double %ln9gs, double* %ls7vO
  %ln9gu = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9gt = load i64*, i64** %Hp_Var
  %ln9gv = getelementptr inbounds i64, i64* %ln9gt, i32 -1
  store i64 %ln9gu, i64* %ln9gv, !tbaa !3
  %ln9gx = load double, double* %ls7vO
  %ln9gw = load i64*, i64** %Hp_Var
  %ln9gy = getelementptr inbounds i64, i64* %ln9gw, i32 0
  %ln9gz = bitcast i64* %ln9gy to double*
  store double %ln9gx, double* %ln9gz, !tbaa !3
  %ln9gB = load i64*, i64** %Hp_Var
  %ln9gC = ptrtoint i64* %ln9gB to i64
  %ln9gD = add i64 %ln9gC, -7
  store i64 %ln9gD, i64* %R1_Var
  %ln9gE = load i64*, i64** %Sp_Var
  %ln9gF = getelementptr inbounds i64, i64* %ln9gE, i32 4
  %ln9gG = ptrtoint i64* %ln9gF to i64
  %ln9gH = inttoptr i64 %ln9gG to i64*
  store i64* %ln9gH, i64** %Sp_Var
  %ln9gI = load i64*, i64** %Sp_Var
  %ln9gJ = getelementptr inbounds i64, i64* %ln9gI, i32 0
  %ln9gK = bitcast i64* %ln9gJ to i64*
  %ln9gL = load i64, i64* %ln9gK, !tbaa !2
  %ln9gM = inttoptr i64 %ln9gL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gN = load i64*, i64** %Sp_Var
  %ln9gO = load i64*, i64** %Hp_Var
  %ln9gP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gM( i64* %Base_Arg, i64* %ln9gN, i64* %ln9gO, i64 %ln9gP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8So:
  %ln9gQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9gQ, !tbaa !5
  %ln9gR = load i64, i64* %R1_Var
  store i64 %ln9gR, i64* %R1_Var
  %ln9gS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gT = load i64*, i64** %Sp_Var
  %ln9gU = load i64*, i64** %Hp_Var
  %ln9gV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gS( i64* %Base_Arg, i64* %ln9gT, i64* %ln9gU, i64 %ln9gV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vP_info$def to i8*)
define internal ghccc void @s7vP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9gW:
  %ls7vw = alloca i64, i32 1
  %ls7vC = alloca i64, i32 1
  %ls7vA = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8SA
c8SA:
  %ln9gX = load i64*, i64** %Sp_Var
  %ln9gY = getelementptr inbounds i64, i64* %ln9gX, i32 -6
  %ln9gZ = ptrtoint i64* %ln9gY to i64
  %ln9h0 = icmp ult i64 %ln9gZ, %SpLim_Arg
  %ln9h1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9h0, i1 0 )
  br i1 %ln9h1, label %c8T2, label %c8T3
c8T3:
  %ln9h3 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9h2 = load i64*, i64** %Sp_Var
  %ln9h4 = getelementptr inbounds i64, i64* %ln9h2, i32 -2
  store i64 %ln9h3, i64* %ln9h4, !tbaa !2
  %ln9h6 = load i64, i64* %R1_Var
  %ln9h5 = load i64*, i64** %Sp_Var
  %ln9h7 = getelementptr inbounds i64, i64* %ln9h5, i32 -1
  store i64 %ln9h6, i64* %ln9h7, !tbaa !2
  %ln9h9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Sx_info$def to i64
  %ln9h8 = load i64*, i64** %Sp_Var
  %ln9ha = getelementptr inbounds i64, i64* %ln9h8, i32 -6
  store i64 %ln9h9, i64* %ln9ha, !tbaa !2
  %ln9hd = load i64, i64* %R1_Var
  %ln9he = add i64 %ln9hd, 16
  %ln9hf = inttoptr i64 %ln9he to i64*
  %ln9hg = load i64, i64* %ln9hf, !tbaa !4
  store i64 %ln9hg, i64* %ls7vw
  %ln9hj = load i64, i64* %R1_Var
  %ln9hk = add i64 %ln9hj, 24
  %ln9hl = inttoptr i64 %ln9hk to i64*
  %ln9hm = load i64, i64* %ln9hl, !tbaa !4
  store i64 %ln9hm, i64* %ls7vC
  %ln9hp = load i64, i64* %R1_Var
  %ln9hq = add i64 %ln9hp, 32
  %ln9hr = inttoptr i64 %ln9hq to i64*
  %ln9hs = load i64, i64* %ln9hr, !tbaa !4
  store i64 %ln9hs, i64* %ls7vA
  %ln9hv = load i64, i64* %R1_Var
  %ln9hw = add i64 %ln9hv, 40
  %ln9hx = inttoptr i64 %ln9hw to i64*
  %ln9hy = load i64, i64* %ln9hx, !tbaa !4
  store i64 %ln9hy, i64* %R1_Var
  %ln9hA = load i64, i64* %ls7vw
  %ln9hz = load i64*, i64** %Sp_Var
  %ln9hB = getelementptr inbounds i64, i64* %ln9hz, i32 -5
  store i64 %ln9hA, i64* %ln9hB, !tbaa !2
  %ln9hD = load i64, i64* %ls7vA
  %ln9hC = load i64*, i64** %Sp_Var
  %ln9hE = getelementptr inbounds i64, i64* %ln9hC, i32 -4
  store i64 %ln9hD, i64* %ln9hE, !tbaa !2
  %ln9hG = load i64, i64* %ls7vC
  %ln9hF = load i64*, i64** %Sp_Var
  %ln9hH = getelementptr inbounds i64, i64* %ln9hF, i32 -3
  store i64 %ln9hG, i64* %ln9hH, !tbaa !2
  %ln9hI = load i64*, i64** %Sp_Var
  %ln9hJ = getelementptr inbounds i64, i64* %ln9hI, i32 -6
  %ln9hK = ptrtoint i64* %ln9hJ to i64
  %ln9hL = inttoptr i64 %ln9hK to i64*
  store i64* %ln9hL, i64** %Sp_Var
  %ln9hM = load i64, i64* %R1_Var
  %ln9hN = and i64 %ln9hM, 7
  %ln9hO = icmp ne i64 %ln9hN, 0
  br i1 %ln9hO, label %u8Tb, label %c8Sy
c8Sy:
  %ln9hQ = load i64, i64* %R1_Var
  %ln9hR = inttoptr i64 %ln9hQ to i64*
  %ln9hS = load i64, i64* %ln9hR, !tbaa !4
  %ln9hT = inttoptr i64 %ln9hS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hU = load i64*, i64** %Sp_Var
  %ln9hV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hT( i64* %Base_Arg, i64* %ln9hU, i64* %Hp_Arg, i64 %ln9hV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Tb:
  %ln9hW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Sx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hX = load i64*, i64** %Sp_Var
  %ln9hY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hW( i64* %Base_Arg, i64* %ln9hX, i64* %Hp_Arg, i64 %ln9hY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8T2:
  %ln9hZ = load i64, i64* %R1_Var
  store i64 %ln9hZ, i64* %R1_Var
  %ln9i0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9i1 = bitcast i64* %ln9i0 to i64*
  %ln9i2 = load i64, i64* %ln9i1, !tbaa !5
  %ln9i3 = inttoptr i64 %ln9i2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9i4 = load i64*, i64** %Sp_Var
  %ln9i5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9i3( i64* %Base_Arg, i64* %ln9i4, i64* %Hp_Arg, i64 %ln9i5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Sx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Sx_info$def to i8*)
define internal ghccc void @c8Sx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9i6:
  %ls7vR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Sx
c8Sx:
  %ln9i7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SD_info$def to i64
  %ln9i8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9i7, i64* %ln9i8, !tbaa !2
  %ln9ib = load i64, i64* %R1_Var
  %ln9ic = add i64 %ln9ib, 7
  %ln9id = inttoptr i64 %ln9ic to double*
  %ln9ie = load double, double* %ln9id, !tbaa !4
  store double %ln9ie, double* %ls7vR
  %ln9if = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9ig = bitcast i64* %ln9if to i64*
  %ln9ih = load i64, i64* %ln9ig, !tbaa !2
  store i64 %ln9ih, i64* %R1_Var
  %ln9ii = load double, double* %ls7vR
  %ln9ij = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9ik = bitcast i64* %ln9ij to double*
  store double %ln9ii, double* %ln9ik, !tbaa !2
  %ln9il = load i64, i64* %R1_Var
  %ln9im = and i64 %ln9il, 7
  %ln9in = icmp ne i64 %ln9im, 0
  br i1 %ln9in, label %u8Ta, label %c8SE
c8SE:
  %ln9ip = load i64, i64* %R1_Var
  %ln9iq = inttoptr i64 %ln9ip to i64*
  %ln9ir = load i64, i64* %ln9iq, !tbaa !4
  %ln9is = inttoptr i64 %ln9ir to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9it = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9is( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9it, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ta:
  %ln9iu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9iv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9iu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9iv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8SD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SD_info$def to i8*)
define internal ghccc void @c8SD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 0}>
{
n9iw:
  %ls7vT = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8SD
c8SD:
  %ln9ix = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SI_info$def to i64
  %ln9iy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9ix, i64* %ln9iy, !tbaa !2
  %ln9iB = load i64, i64* %R1_Var
  %ln9iC = add i64 %ln9iB, 7
  %ln9iD = inttoptr i64 %ln9iC to double*
  %ln9iE = load double, double* %ln9iD, !tbaa !4
  store double %ln9iE, double* %ls7vT
  %ln9iF = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9iG = bitcast i64* %ln9iF to i64*
  %ln9iH = load i64, i64* %ln9iG, !tbaa !2
  store i64 %ln9iH, i64* %R1_Var
  %ln9iI = load double, double* %ls7vT
  %ln9iJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9iK = bitcast i64* %ln9iJ to double*
  store double %ln9iI, double* %ln9iK, !tbaa !2
  %ln9iL = load i64, i64* %R1_Var
  %ln9iM = and i64 %ln9iL, 7
  %ln9iN = icmp ne i64 %ln9iM, 0
  br i1 %ln9iN, label %u8Tc, label %c8SJ
c8SJ:
  %ln9iP = load i64, i64* %R1_Var
  %ln9iQ = inttoptr i64 %ln9iP to i64*
  %ln9iR = load i64, i64* %ln9iQ, !tbaa !4
  %ln9iS = inttoptr i64 %ln9iR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9iT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9iS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9iT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Tc:
  %ln9iU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9iV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9iU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9iV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8SI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SI_info$def to i8*)
define internal ghccc void @c8SI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9iW:
  %ls7vV = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8SI
c8SI:
  %ln9iX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SN_info$def to i64
  %ln9iY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9iX, i64* %ln9iY, !tbaa !2
  %ln9j1 = load i64, i64* %R1_Var
  %ln9j2 = add i64 %ln9j1, 7
  %ln9j3 = inttoptr i64 %ln9j2 to double*
  %ln9j4 = load double, double* %ln9j3, !tbaa !4
  store double %ln9j4, double* %ls7vV
  %ln9j5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9j6 = bitcast i64* %ln9j5 to i64*
  %ln9j7 = load i64, i64* %ln9j6, !tbaa !2
  store i64 %ln9j7, i64* %R1_Var
  %ln9j8 = load double, double* %ls7vV
  %ln9j9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9ja = bitcast i64* %ln9j9 to double*
  store double %ln9j8, double* %ln9ja, !tbaa !2
  %ln9jb = load i64, i64* %R1_Var
  %ln9jc = and i64 %ln9jb, 7
  %ln9jd = icmp ne i64 %ln9jc, 0
  br i1 %ln9jd, label %u8Td, label %c8SO
c8SO:
  %ln9jf = load i64, i64* %R1_Var
  %ln9jg = inttoptr i64 %ln9jf to i64*
  %ln9jh = load i64, i64* %ln9jg, !tbaa !4
  %ln9ji = inttoptr i64 %ln9jh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ji( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9jj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Td:
  %ln9jk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9jk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9jl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8SN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SN_info$def to i8*)
define internal ghccc void @c8SN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9jm:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7w0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8SN
c8SN:
  %ln9jn = load i64*, i64** %Hp_Var
  %ln9jo = getelementptr inbounds i64, i64* %ln9jn, i32 2
  %ln9jp = ptrtoint i64* %ln9jo to i64
  %ln9jq = inttoptr i64 %ln9jp to i64*
  store i64* %ln9jq, i64** %Hp_Var
  %ln9jr = load i64*, i64** %Hp_Var
  %ln9js = ptrtoint i64* %ln9jr to i64
  %ln9jt = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9ju = bitcast i64* %ln9jt to i64*
  %ln9jv = load i64, i64* %ln9ju, !tbaa !5
  %ln9jw = icmp ugt i64 %ln9js, %ln9jv
  %ln9jx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9jw, i1 0 )
  br i1 %ln9jx, label %c8T9, label %c8T8
c8T8:
  %ln9jy = load i64*, i64** %Sp_Var
  %ln9jz = getelementptr inbounds i64, i64* %ln9jy, i32 2
  %ln9jA = bitcast i64* %ln9jz to double*
  %ln9jB = load double, double* %ln9jA, !tbaa !2
  %ln9jC = load i64*, i64** %Sp_Var
  %ln9jD = getelementptr inbounds i64, i64* %ln9jC, i32 3
  %ln9jE = bitcast i64* %ln9jD to double*
  %ln9jF = load double, double* %ln9jE, !tbaa !2
  %ln9jG = fmul double %ln9jB, %ln9jF
  %ln9jH = load i64*, i64** %Sp_Var
  %ln9jI = getelementptr inbounds i64, i64* %ln9jH, i32 1
  %ln9jJ = bitcast i64* %ln9jI to double*
  %ln9jK = load double, double* %ln9jJ, !tbaa !2
  %ln9jN = load i64, i64* %R1_Var
  %ln9jO = add i64 %ln9jN, 7
  %ln9jP = inttoptr i64 %ln9jO to double*
  %ln9jQ = load double, double* %ln9jP, !tbaa !4
  %ln9jR = fmul double %ln9jK, %ln9jQ
  %ln9jS = fsub double %ln9jG, %ln9jR
  store double %ln9jS, double* %ls7w0
  %ln9jU = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9jT = load i64*, i64** %Hp_Var
  %ln9jV = getelementptr inbounds i64, i64* %ln9jT, i32 -1
  store i64 %ln9jU, i64* %ln9jV, !tbaa !3
  %ln9jX = load double, double* %ls7w0
  %ln9jW = load i64*, i64** %Hp_Var
  %ln9jY = getelementptr inbounds i64, i64* %ln9jW, i32 0
  %ln9jZ = bitcast i64* %ln9jY to double*
  store double %ln9jX, double* %ln9jZ, !tbaa !3
  %ln9k1 = load i64*, i64** %Hp_Var
  %ln9k2 = ptrtoint i64* %ln9k1 to i64
  %ln9k3 = add i64 %ln9k2, -7
  store i64 %ln9k3, i64* %R1_Var
  %ln9k4 = load i64*, i64** %Sp_Var
  %ln9k5 = getelementptr inbounds i64, i64* %ln9k4, i32 4
  %ln9k6 = ptrtoint i64* %ln9k5 to i64
  %ln9k7 = inttoptr i64 %ln9k6 to i64*
  store i64* %ln9k7, i64** %Sp_Var
  %ln9k8 = load i64*, i64** %Sp_Var
  %ln9k9 = getelementptr inbounds i64, i64* %ln9k8, i32 0
  %ln9ka = bitcast i64* %ln9k9 to i64*
  %ln9kb = load i64, i64* %ln9ka, !tbaa !2
  %ln9kc = inttoptr i64 %ln9kb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kd = load i64*, i64** %Sp_Var
  %ln9ke = load i64*, i64** %Hp_Var
  %ln9kf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kc( i64* %Base_Arg, i64* %ln9kd, i64* %ln9ke, i64 %ln9kf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8T9:
  %ln9kg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9kg, !tbaa !5
  %ln9kh = load i64, i64* %R1_Var
  store i64 %ln9kh, i64* %R1_Var
  %ln9ki = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kj = load i64*, i64** %Sp_Var
  %ln9kk = load i64*, i64** %Hp_Var
  %ln9kl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ki( i64* %Base_Arg, i64* %ln9kj, i64* %ln9kk, i64 %ln9kl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7w1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7w1_info$def to i8*)
define internal ghccc void @s7w1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9km:
  %ls7vy = alloca i64, i32 1
  %ls7vB = alloca i64, i32 1
  %ls7vC = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Tl
c8Tl:
  %ln9kn = load i64*, i64** %Sp_Var
  %ln9ko = getelementptr inbounds i64, i64* %ln9kn, i32 -6
  %ln9kp = ptrtoint i64* %ln9ko to i64
  %ln9kq = icmp ult i64 %ln9kp, %SpLim_Arg
  %ln9kr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9kq, i1 0 )
  br i1 %ln9kr, label %c8TN, label %c8TO
c8TO:
  %ln9kt = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9ks = load i64*, i64** %Sp_Var
  %ln9ku = getelementptr inbounds i64, i64* %ln9ks, i32 -2
  store i64 %ln9kt, i64* %ln9ku, !tbaa !2
  %ln9kw = load i64, i64* %R1_Var
  %ln9kv = load i64*, i64** %Sp_Var
  %ln9kx = getelementptr inbounds i64, i64* %ln9kv, i32 -1
  store i64 %ln9kw, i64* %ln9kx, !tbaa !2
  %ln9kz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ti_info$def to i64
  %ln9ky = load i64*, i64** %Sp_Var
  %ln9kA = getelementptr inbounds i64, i64* %ln9ky, i32 -6
  store i64 %ln9kz, i64* %ln9kA, !tbaa !2
  %ln9kD = load i64, i64* %R1_Var
  %ln9kE = add i64 %ln9kD, 16
  %ln9kF = inttoptr i64 %ln9kE to i64*
  %ln9kG = load i64, i64* %ln9kF, !tbaa !4
  store i64 %ln9kG, i64* %ls7vy
  %ln9kJ = load i64, i64* %R1_Var
  %ln9kK = add i64 %ln9kJ, 24
  %ln9kL = inttoptr i64 %ln9kK to i64*
  %ln9kM = load i64, i64* %ln9kL, !tbaa !4
  store i64 %ln9kM, i64* %ls7vB
  %ln9kP = load i64, i64* %R1_Var
  %ln9kQ = add i64 %ln9kP, 32
  %ln9kR = inttoptr i64 %ln9kQ to i64*
  %ln9kS = load i64, i64* %ln9kR, !tbaa !4
  store i64 %ln9kS, i64* %ls7vC
  %ln9kV = load i64, i64* %R1_Var
  %ln9kW = add i64 %ln9kV, 40
  %ln9kX = inttoptr i64 %ln9kW to i64*
  %ln9kY = load i64, i64* %ln9kX, !tbaa !4
  store i64 %ln9kY, i64* %R1_Var
  %ln9l0 = load i64, i64* %ls7vy
  %ln9kZ = load i64*, i64** %Sp_Var
  %ln9l1 = getelementptr inbounds i64, i64* %ln9kZ, i32 -5
  store i64 %ln9l0, i64* %ln9l1, !tbaa !2
  %ln9l3 = load i64, i64* %ls7vB
  %ln9l2 = load i64*, i64** %Sp_Var
  %ln9l4 = getelementptr inbounds i64, i64* %ln9l2, i32 -4
  store i64 %ln9l3, i64* %ln9l4, !tbaa !2
  %ln9l6 = load i64, i64* %ls7vC
  %ln9l5 = load i64*, i64** %Sp_Var
  %ln9l7 = getelementptr inbounds i64, i64* %ln9l5, i32 -3
  store i64 %ln9l6, i64* %ln9l7, !tbaa !2
  %ln9l8 = load i64*, i64** %Sp_Var
  %ln9l9 = getelementptr inbounds i64, i64* %ln9l8, i32 -6
  %ln9la = ptrtoint i64* %ln9l9 to i64
  %ln9lb = inttoptr i64 %ln9la to i64*
  store i64* %ln9lb, i64** %Sp_Var
  %ln9lc = load i64, i64* %R1_Var
  %ln9ld = and i64 %ln9lc, 7
  %ln9le = icmp ne i64 %ln9ld, 0
  br i1 %ln9le, label %u8TW, label %c8Tj
c8Tj:
  %ln9lg = load i64, i64* %R1_Var
  %ln9lh = inttoptr i64 %ln9lg to i64*
  %ln9li = load i64, i64* %ln9lh, !tbaa !4
  %ln9lj = inttoptr i64 %ln9li to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lk = load i64*, i64** %Sp_Var
  %ln9ll = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lj( i64* %Base_Arg, i64* %ln9lk, i64* %Hp_Arg, i64 %ln9ll, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8TW:
  %ln9lm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ti_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ln = load i64*, i64** %Sp_Var
  %ln9lo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lm( i64* %Base_Arg, i64* %ln9ln, i64* %Hp_Arg, i64 %ln9lo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8TN:
  %ln9lp = load i64, i64* %R1_Var
  store i64 %ln9lp, i64* %R1_Var
  %ln9lq = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9lr = bitcast i64* %ln9lq to i64*
  %ln9ls = load i64, i64* %ln9lr, !tbaa !5
  %ln9lt = inttoptr i64 %ln9ls to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lu = load i64*, i64** %Sp_Var
  %ln9lv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lt( i64* %Base_Arg, i64* %ln9lu, i64* %Hp_Arg, i64 %ln9lv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ti_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ti_info$def to i8*)
define internal ghccc void @c8Ti_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9lw:
  %ls7w3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Ti
c8Ti:
  %ln9lx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8To_info$def to i64
  %ln9ly = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9lx, i64* %ln9ly, !tbaa !2
  %ln9lB = load i64, i64* %R1_Var
  %ln9lC = add i64 %ln9lB, 7
  %ln9lD = inttoptr i64 %ln9lC to double*
  %ln9lE = load double, double* %ln9lD, !tbaa !4
  store double %ln9lE, double* %ls7w3
  %ln9lF = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9lG = bitcast i64* %ln9lF to i64*
  %ln9lH = load i64, i64* %ln9lG, !tbaa !2
  store i64 %ln9lH, i64* %R1_Var
  %ln9lI = load double, double* %ls7w3
  %ln9lJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9lK = bitcast i64* %ln9lJ to double*
  store double %ln9lI, double* %ln9lK, !tbaa !2
  %ln9lL = load i64, i64* %R1_Var
  %ln9lM = and i64 %ln9lL, 7
  %ln9lN = icmp ne i64 %ln9lM, 0
  br i1 %ln9lN, label %u8TV, label %c8Tp
c8Tp:
  %ln9lP = load i64, i64* %R1_Var
  %ln9lQ = inttoptr i64 %ln9lP to i64*
  %ln9lR = load i64, i64* %ln9lQ, !tbaa !4
  %ln9lS = inttoptr i64 %ln9lR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9lT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8TV:
  %ln9lU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8To_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9lV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8To_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8To_info$def to i8*)
define internal ghccc void @c8To_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
n9lW:
  %ls7w5 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8To
c8To:
  %ln9lX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Tt_info$def to i64
  %ln9lY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9lX, i64* %ln9lY, !tbaa !2
  %ln9m1 = load i64, i64* %R1_Var
  %ln9m2 = add i64 %ln9m1, 7
  %ln9m3 = inttoptr i64 %ln9m2 to double*
  %ln9m4 = load double, double* %ln9m3, !tbaa !4
  store double %ln9m4, double* %ls7w5
  %ln9m5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9m6 = bitcast i64* %ln9m5 to i64*
  %ln9m7 = load i64, i64* %ln9m6, !tbaa !2
  store i64 %ln9m7, i64* %R1_Var
  %ln9m8 = load double, double* %ls7w5
  %ln9m9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9ma = bitcast i64* %ln9m9 to double*
  store double %ln9m8, double* %ln9ma, !tbaa !2
  %ln9mb = load i64, i64* %R1_Var
  %ln9mc = and i64 %ln9mb, 7
  %ln9md = icmp ne i64 %ln9mc, 0
  br i1 %ln9md, label %u8TX, label %c8Tu
c8Tu:
  %ln9mf = load i64, i64* %R1_Var
  %ln9mg = inttoptr i64 %ln9mf to i64*
  %ln9mh = load i64, i64* %ln9mg, !tbaa !4
  %ln9mi = inttoptr i64 %ln9mh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9mj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8TX:
  %ln9mk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Tt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ml = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9ml, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Tt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Tt_info$def to i8*)
define internal ghccc void @c8Tt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9mm:
  %ls7w7 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Tt
c8Tt:
  %ln9mn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ty_info$def to i64
  %ln9mo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9mn, i64* %ln9mo, !tbaa !2
  %ln9mr = load i64, i64* %R1_Var
  %ln9ms = add i64 %ln9mr, 7
  %ln9mt = inttoptr i64 %ln9ms to double*
  %ln9mu = load double, double* %ln9mt, !tbaa !4
  store double %ln9mu, double* %ls7w7
  %ln9mv = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9mw = bitcast i64* %ln9mv to i64*
  %ln9mx = load i64, i64* %ln9mw, !tbaa !2
  store i64 %ln9mx, i64* %R1_Var
  %ln9my = load double, double* %ls7w7
  %ln9mz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9mA = bitcast i64* %ln9mz to double*
  store double %ln9my, double* %ln9mA, !tbaa !2
  %ln9mB = load i64, i64* %R1_Var
  %ln9mC = and i64 %ln9mB, 7
  %ln9mD = icmp ne i64 %ln9mC, 0
  br i1 %ln9mD, label %u8TY, label %c8Tz
c8Tz:
  %ln9mF = load i64, i64* %R1_Var
  %ln9mG = inttoptr i64 %ln9mF to i64*
  %ln9mH = load i64, i64* %ln9mG, !tbaa !4
  %ln9mI = inttoptr i64 %ln9mH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9mJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8TY:
  %ln9mK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ty_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mK( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9mL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ty_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ty_info$def to i8*)
define internal ghccc void @c8Ty_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9mM:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7wc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Ty
c8Ty:
  %ln9mN = load i64*, i64** %Hp_Var
  %ln9mO = getelementptr inbounds i64, i64* %ln9mN, i32 2
  %ln9mP = ptrtoint i64* %ln9mO to i64
  %ln9mQ = inttoptr i64 %ln9mP to i64*
  store i64* %ln9mQ, i64** %Hp_Var
  %ln9mR = load i64*, i64** %Hp_Var
  %ln9mS = ptrtoint i64* %ln9mR to i64
  %ln9mT = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9mU = bitcast i64* %ln9mT to i64*
  %ln9mV = load i64, i64* %ln9mU, !tbaa !5
  %ln9mW = icmp ugt i64 %ln9mS, %ln9mV
  %ln9mX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9mW, i1 0 )
  br i1 %ln9mX, label %c8TU, label %c8TT
c8TT:
  %ln9mY = load i64*, i64** %Sp_Var
  %ln9mZ = getelementptr inbounds i64, i64* %ln9mY, i32 3
  %ln9n0 = bitcast i64* %ln9mZ to double*
  %ln9n1 = load double, double* %ln9n0, !tbaa !2
  %ln9n2 = load i64*, i64** %Sp_Var
  %ln9n3 = getelementptr inbounds i64, i64* %ln9n2, i32 2
  %ln9n4 = bitcast i64* %ln9n3 to double*
  %ln9n5 = load double, double* %ln9n4, !tbaa !2
  %ln9n6 = fmul double %ln9n1, %ln9n5
  %ln9n7 = load i64*, i64** %Sp_Var
  %ln9n8 = getelementptr inbounds i64, i64* %ln9n7, i32 1
  %ln9n9 = bitcast i64* %ln9n8 to double*
  %ln9na = load double, double* %ln9n9, !tbaa !2
  %ln9nd = load i64, i64* %R1_Var
  %ln9ne = add i64 %ln9nd, 7
  %ln9nf = inttoptr i64 %ln9ne to double*
  %ln9ng = load double, double* %ln9nf, !tbaa !4
  %ln9nh = fmul double %ln9na, %ln9ng
  %ln9ni = fsub double %ln9n6, %ln9nh
  store double %ln9ni, double* %ls7wc
  %ln9nk = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9nj = load i64*, i64** %Hp_Var
  %ln9nl = getelementptr inbounds i64, i64* %ln9nj, i32 -1
  store i64 %ln9nk, i64* %ln9nl, !tbaa !3
  %ln9nn = load double, double* %ls7wc
  %ln9nm = load i64*, i64** %Hp_Var
  %ln9no = getelementptr inbounds i64, i64* %ln9nm, i32 0
  %ln9np = bitcast i64* %ln9no to double*
  store double %ln9nn, double* %ln9np, !tbaa !3
  %ln9nr = load i64*, i64** %Hp_Var
  %ln9ns = ptrtoint i64* %ln9nr to i64
  %ln9nt = add i64 %ln9ns, -7
  store i64 %ln9nt, i64* %R1_Var
  %ln9nu = load i64*, i64** %Sp_Var
  %ln9nv = getelementptr inbounds i64, i64* %ln9nu, i32 4
  %ln9nw = ptrtoint i64* %ln9nv to i64
  %ln9nx = inttoptr i64 %ln9nw to i64*
  store i64* %ln9nx, i64** %Sp_Var
  %ln9ny = load i64*, i64** %Sp_Var
  %ln9nz = getelementptr inbounds i64, i64* %ln9ny, i32 0
  %ln9nA = bitcast i64* %ln9nz to i64*
  %ln9nB = load i64, i64* %ln9nA, !tbaa !2
  %ln9nC = inttoptr i64 %ln9nB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nD = load i64*, i64** %Sp_Var
  %ln9nE = load i64*, i64** %Hp_Var
  %ln9nF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nC( i64* %Base_Arg, i64* %ln9nD, i64* %ln9nE, i64 %ln9nF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8TU:
  %ln9nG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9nG, !tbaa !5
  %ln9nH = load i64, i64* %R1_Var
  store i64 %ln9nH, i64* %R1_Var
  %ln9nI = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nJ = load i64*, i64** %Sp_Var
  %ln9nK = load i64*, i64** %Hp_Var
  %ln9nL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nI( i64* %Base_Arg, i64* %ln9nJ, i64* %ln9nK, i64 %ln9nL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wd_info$def to i8*)
define internal ghccc void @s7wd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9nM:
  %ls7vD = alloca i64, i32 1
  %ls7vP = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8U6
c8U6:
  %ln9nN = load i64*, i64** %Sp_Var
  %ln9nO = getelementptr inbounds i64, i64* %ln9nN, i32 -5
  %ln9nP = ptrtoint i64* %ln9nO to i64
  %ln9nQ = icmp ult i64 %ln9nP, %SpLim_Arg
  %ln9nR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9nQ, i1 0 )
  br i1 %ln9nR, label %c8UD, label %c8UE
c8UE:
  %ln9nT = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9nS = load i64*, i64** %Sp_Var
  %ln9nU = getelementptr inbounds i64, i64* %ln9nS, i32 -2
  store i64 %ln9nT, i64* %ln9nU, !tbaa !2
  %ln9nW = load i64, i64* %R1_Var
  %ln9nV = load i64*, i64** %Sp_Var
  %ln9nX = getelementptr inbounds i64, i64* %ln9nV, i32 -1
  store i64 %ln9nW, i64* %ln9nX, !tbaa !2
  %ln9nZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U3_info$def to i64
  %ln9nY = load i64*, i64** %Sp_Var
  %ln9o0 = getelementptr inbounds i64, i64* %ln9nY, i32 -5
  store i64 %ln9nZ, i64* %ln9o0, !tbaa !2
  %ln9o3 = load i64, i64* %R1_Var
  %ln9o4 = add i64 %ln9o3, 16
  %ln9o5 = inttoptr i64 %ln9o4 to i64*
  %ln9o6 = load i64, i64* %ln9o5, !tbaa !4
  store i64 %ln9o6, i64* %ls7vD
  %ln9o9 = load i64, i64* %R1_Var
  %ln9oa = add i64 %ln9o9, 24
  %ln9ob = inttoptr i64 %ln9oa to i64*
  %ln9oc = load i64, i64* %ln9ob, !tbaa !4
  store i64 %ln9oc, i64* %ls7vP
  %ln9of = load i64, i64* %R1_Var
  %ln9og = add i64 %ln9of, 32
  %ln9oh = inttoptr i64 %ln9og to i64*
  %ln9oi = load i64, i64* %ln9oh, !tbaa !4
  store i64 %ln9oi, i64* %R1_Var
  %ln9ok = load i64, i64* %ls7vD
  %ln9oj = load i64*, i64** %Sp_Var
  %ln9ol = getelementptr inbounds i64, i64* %ln9oj, i32 -4
  store i64 %ln9ok, i64* %ln9ol, !tbaa !2
  %ln9on = load i64, i64* %ls7vP
  %ln9om = load i64*, i64** %Sp_Var
  %ln9oo = getelementptr inbounds i64, i64* %ln9om, i32 -3
  store i64 %ln9on, i64* %ln9oo, !tbaa !2
  %ln9op = load i64*, i64** %Sp_Var
  %ln9oq = getelementptr inbounds i64, i64* %ln9op, i32 -5
  %ln9or = ptrtoint i64* %ln9oq to i64
  %ln9os = inttoptr i64 %ln9or to i64*
  store i64* %ln9os, i64** %Sp_Var
  %ln9ot = load i64, i64* %R1_Var
  %ln9ou = and i64 %ln9ot, 7
  %ln9ov = icmp ne i64 %ln9ou, 0
  br i1 %ln9ov, label %u8UL, label %c8U4
c8U4:
  %ln9ox = load i64, i64* %R1_Var
  %ln9oy = inttoptr i64 %ln9ox to i64*
  %ln9oz = load i64, i64* %ln9oy, !tbaa !4
  %ln9oA = inttoptr i64 %ln9oz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oB = load i64*, i64** %Sp_Var
  %ln9oC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oA( i64* %Base_Arg, i64* %ln9oB, i64* %Hp_Arg, i64 %ln9oC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8UL:
  %ln9oD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oE = load i64*, i64** %Sp_Var
  %ln9oF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oD( i64* %Base_Arg, i64* %ln9oE, i64* %Hp_Arg, i64 %ln9oF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8UD:
  %ln9oG = load i64, i64* %R1_Var
  store i64 %ln9oG, i64* %R1_Var
  %ln9oH = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9oI = bitcast i64* %ln9oH to i64*
  %ln9oJ = load i64, i64* %ln9oI, !tbaa !5
  %ln9oK = inttoptr i64 %ln9oJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oL = load i64*, i64** %Sp_Var
  %ln9oM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oK( i64* %Base_Arg, i64* %ln9oL, i64* %Hp_Arg, i64 %ln9oM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8U3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U3_info$def to i8*)
define internal ghccc void @c8U3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9oN:
  %ls7wf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8U3
c8U3:
  %ln9oO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U9_info$def to i64
  %ln9oP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9oO, i64* %ln9oP, !tbaa !2
  %ln9oS = load i64, i64* %R1_Var
  %ln9oT = add i64 %ln9oS, 7
  %ln9oU = inttoptr i64 %ln9oT to double*
  %ln9oV = load double, double* %ln9oU, !tbaa !4
  store double %ln9oV, double* %ls7wf
  %ln9oW = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9oX = bitcast i64* %ln9oW to i64*
  %ln9oY = load i64, i64* %ln9oX, !tbaa !2
  store i64 %ln9oY, i64* %R1_Var
  %ln9oZ = load double, double* %ls7wf
  %ln9p0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9p1 = bitcast i64* %ln9p0 to double*
  store double %ln9oZ, double* %ln9p1, !tbaa !2
  %ln9p2 = load i64, i64* %R1_Var
  %ln9p3 = and i64 %ln9p2, 7
  %ln9p4 = icmp ne i64 %ln9p3, 0
  br i1 %ln9p4, label %u8UK, label %c8Ua
c8Ua:
  %ln9p6 = load i64, i64* %R1_Var
  %ln9p7 = inttoptr i64 %ln9p6 to i64*
  %ln9p8 = load i64, i64* %ln9p7, !tbaa !4
  %ln9p9 = inttoptr i64 %ln9p8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9p9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9pa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8UK:
  %ln9pb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9pc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8U9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8U9_info$def to i8*)
define internal ghccc void @c8U9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
n9pd:
  %ls7wh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8U9
c8U9:
  %ln9pe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ue_info$def to i64
  %ln9pf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9pe, i64* %ln9pf, !tbaa !2
  %ln9pi = load i64, i64* %R1_Var
  %ln9pj = add i64 %ln9pi, 7
  %ln9pk = inttoptr i64 %ln9pj to double*
  %ln9pl = load double, double* %ln9pk, !tbaa !4
  store double %ln9pl, double* %ls7wh
  %ln9pm = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9pn = bitcast i64* %ln9pm to i64*
  %ln9po = load i64, i64* %ln9pn, !tbaa !2
  store i64 %ln9po, i64* %R1_Var
  %ln9pp = load double, double* %ls7wh
  %ln9pq = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9pr = bitcast i64* %ln9pq to double*
  store double %ln9pp, double* %ln9pr, !tbaa !2
  %ln9ps = load i64, i64* %R1_Var
  %ln9pt = and i64 %ln9ps, 7
  %ln9pu = icmp ne i64 %ln9pt, 0
  br i1 %ln9pu, label %u8UM, label %c8Uf
c8Uf:
  %ln9pw = load i64, i64* %R1_Var
  %ln9px = inttoptr i64 %ln9pw to i64*
  %ln9py = load i64, i64* %ln9px, !tbaa !4
  %ln9pz = inttoptr i64 %ln9py to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9pA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8UM:
  %ln9pB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ue_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9pC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ue_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ue_info$def to i8*)
define internal ghccc void @c8Ue_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n9pD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7wf = alloca double, i32 1
  %ls7wh = alloca double, i32 1
  %ls7wj = alloca double, i32 1
  %lc8Uy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Ue
c8Ue:
  %ln9pE = load i64*, i64** %Hp_Var
  %ln9pF = getelementptr inbounds i64, i64* %ln9pE, i32 2
  %ln9pG = ptrtoint i64* %ln9pF to i64
  %ln9pH = inttoptr i64 %ln9pG to i64*
  store i64* %ln9pH, i64** %Hp_Var
  %ln9pI = load i64*, i64** %Hp_Var
  %ln9pJ = ptrtoint i64* %ln9pI to i64
  %ln9pK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9pL = bitcast i64* %ln9pK to i64*
  %ln9pM = load i64, i64* %ln9pL, !tbaa !5
  %ln9pN = icmp ugt i64 %ln9pJ, %ln9pM
  %ln9pO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9pN, i1 0 )
  br i1 %ln9pO, label %c8UJ, label %c8UI
c8UI:
  %ln9pP = load i64*, i64** %Sp_Var
  %ln9pQ = getelementptr inbounds i64, i64* %ln9pP, i32 2
  %ln9pR = bitcast i64* %ln9pQ to double*
  %ln9pS = load double, double* %ln9pR, !tbaa !2
  store double %ln9pS, double* %ls7wf
  %ln9pT = load i64*, i64** %Sp_Var
  %ln9pU = getelementptr inbounds i64, i64* %ln9pT, i32 1
  %ln9pV = bitcast i64* %ln9pU to double*
  %ln9pW = load double, double* %ln9pV, !tbaa !2
  store double %ln9pW, double* %ls7wh
  %ln9pZ = load i64, i64* %R1_Var
  %ln9q0 = add i64 %ln9pZ, 7
  %ln9q1 = inttoptr i64 %ln9q0 to double*
  %ln9q2 = load double, double* %ln9q1, !tbaa !4
  store double %ln9q2, double* %ls7wj
  %ln9q3 = load double, double* %ls7wf
  %ln9q4 = load double, double* %ls7wf
  %ln9q5 = fmul double %ln9q3, %ln9q4
  %ln9q6 = load double, double* %ls7wh
  %ln9q7 = load double, double* %ls7wh
  %ln9q8 = fmul double %ln9q6, %ln9q7
  %ln9q9 = fadd double %ln9q5, %ln9q8
  %ln9qa = load double, double* %ls7wj
  %ln9qb = load double, double* %ls7wj
  %ln9qc = fmul double %ln9qa, %ln9qb
  %ln9qd = fadd double %ln9q9, %ln9qc
  %ln9qe = call ccc double (double) @llvm.sqrt.f64( double %ln9qd ) nounwind
  store double %ln9qe, double* %lc8Uy
  %ln9qg = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9qf = load i64*, i64** %Hp_Var
  %ln9qh = getelementptr inbounds i64, i64* %ln9qf, i32 -1
  store i64 %ln9qg, i64* %ln9qh, !tbaa !3
  %ln9qj = load double, double* %lc8Uy
  %ln9qi = load i64*, i64** %Hp_Var
  %ln9qk = getelementptr inbounds i64, i64* %ln9qi, i32 0
  %ln9ql = bitcast i64* %ln9qk to double*
  store double %ln9qj, double* %ln9ql, !tbaa !3
  %ln9qn = load i64*, i64** %Hp_Var
  %ln9qo = ptrtoint i64* %ln9qn to i64
  %ln9qp = add i64 %ln9qo, -7
  store i64 %ln9qp, i64* %R1_Var
  %ln9qq = load i64*, i64** %Sp_Var
  %ln9qr = getelementptr inbounds i64, i64* %ln9qq, i32 3
  %ln9qs = ptrtoint i64* %ln9qr to i64
  %ln9qt = inttoptr i64 %ln9qs to i64*
  store i64* %ln9qt, i64** %Sp_Var
  %ln9qu = load i64*, i64** %Sp_Var
  %ln9qv = getelementptr inbounds i64, i64* %ln9qu, i32 0
  %ln9qw = bitcast i64* %ln9qv to i64*
  %ln9qx = load i64, i64* %ln9qw, !tbaa !2
  %ln9qy = inttoptr i64 %ln9qx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qz = load i64*, i64** %Sp_Var
  %ln9qA = load i64*, i64** %Hp_Var
  %ln9qB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qy( i64* %Base_Arg, i64* %ln9qz, i64* %ln9qA, i64 %ln9qB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8UJ:
  %ln9qC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9qC, !tbaa !5
  %ln9qD = load i64, i64* %R1_Var
  store i64 %ln9qD, i64* %R1_Var
  %ln9qE = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qF = load i64*, i64** %Sp_Var
  %ln9qG = load i64*, i64** %Hp_Var
  %ln9qH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qE( i64* %Base_Arg, i64* %ln9qF, i64* %ln9qG, i64 %ln9qH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7ws_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7ws_info$def to i8*)
define internal ghccc void @s7ws_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9qI:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8UR
c8UR:
  %ln9qJ = load i64*, i64** %Sp_Var
  %ln9qK = getelementptr inbounds i64, i64* %ln9qJ, i32 -2
  %ln9qL = ptrtoint i64* %ln9qK to i64
  %ln9qM = icmp ult i64 %ln9qL, %SpLim_Arg
  %ln9qN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9qM, i1 0 )
  br i1 %ln9qN, label %c8US, label %c8UT
c8UT:
  %ln9qP = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9qO = load i64*, i64** %Sp_Var
  %ln9qQ = getelementptr inbounds i64, i64* %ln9qO, i32 -2
  store i64 %ln9qP, i64* %ln9qQ, !tbaa !2
  %ln9qS = load i64, i64* %R1_Var
  %ln9qR = load i64*, i64** %Sp_Var
  %ln9qT = getelementptr inbounds i64, i64* %ln9qR, i32 -1
  store i64 %ln9qS, i64* %ln9qT, !tbaa !2
  %ln9qW = load i64, i64* %R1_Var
  %ln9qX = add i64 %ln9qW, 24
  %ln9qY = inttoptr i64 %ln9qX to i64*
  %ln9qZ = load i64, i64* %ln9qY, !tbaa !4
  store i64 %ln9qZ, i64* %R3_Var
  %ln9r2 = load i64, i64* %R1_Var
  %ln9r3 = add i64 %ln9r2, 16
  %ln9r4 = inttoptr i64 %ln9r3 to i64*
  %ln9r5 = load i64, i64* %ln9r4, !tbaa !4
  store i64 %ln9r5, i64* %R2_Var
  %ln9r6 = load i64*, i64** %Sp_Var
  %ln9r7 = getelementptr inbounds i64, i64* %ln9r6, i32 -2
  %ln9r8 = ptrtoint i64* %ln9r7 to i64
  %ln9r9 = inttoptr i64 %ln9r8 to i64*
  store i64* %ln9r9, i64** %Sp_Var
  %ln9ra = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rb = load i64*, i64** %Sp_Var
  %ln9rc = load i64, i64* %R1_Var
  %ln9rd = load i64, i64* %R2_Var
  %ln9re = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ra( i64* %Base_Arg, i64* %ln9rb, i64* %Hp_Arg, i64 %ln9rc, i64 %ln9rd, i64 %ln9re, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8US:
  %ln9rf = load i64, i64* %R1_Var
  store i64 %ln9rf, i64* %R1_Var
  %ln9rg = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9rh = bitcast i64* %ln9rg to i64*
  %ln9ri = load i64, i64* %ln9rh, !tbaa !5
  %ln9rj = inttoptr i64 %ln9ri to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rk = load i64*, i64** %Sp_Var
  %ln9rl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rj( i64* %Base_Arg, i64* %ln9rk, i64* %Hp_Arg, i64 %ln9rl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wr_info$def to i8*)
define internal ghccc void @s7wr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9rm:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8UY
c8UY:
  %ln9rn = load i64*, i64** %Sp_Var
  %ln9ro = getelementptr inbounds i64, i64* %ln9rn, i32 -2
  %ln9rp = ptrtoint i64* %ln9ro to i64
  %ln9rq = icmp ult i64 %ln9rp, %SpLim_Arg
  %ln9rr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9rq, i1 0 )
  br i1 %ln9rr, label %c8UZ, label %c8V0
c8V0:
  %ln9rt = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9rs = load i64*, i64** %Sp_Var
  %ln9ru = getelementptr inbounds i64, i64* %ln9rs, i32 -2
  store i64 %ln9rt, i64* %ln9ru, !tbaa !2
  %ln9rw = load i64, i64* %R1_Var
  %ln9rv = load i64*, i64** %Sp_Var
  %ln9rx = getelementptr inbounds i64, i64* %ln9rv, i32 -1
  store i64 %ln9rw, i64* %ln9rx, !tbaa !2
  %ln9rA = load i64, i64* %R1_Var
  %ln9rB = add i64 %ln9rA, 24
  %ln9rC = inttoptr i64 %ln9rB to i64*
  %ln9rD = load i64, i64* %ln9rC, !tbaa !4
  store i64 %ln9rD, i64* %R3_Var
  %ln9rG = load i64, i64* %R1_Var
  %ln9rH = add i64 %ln9rG, 16
  %ln9rI = inttoptr i64 %ln9rH to i64*
  %ln9rJ = load i64, i64* %ln9rI, !tbaa !4
  store i64 %ln9rJ, i64* %R2_Var
  %ln9rK = load i64*, i64** %Sp_Var
  %ln9rL = getelementptr inbounds i64, i64* %ln9rK, i32 -2
  %ln9rM = ptrtoint i64* %ln9rL to i64
  %ln9rN = inttoptr i64 %ln9rM to i64*
  store i64* %ln9rN, i64** %Sp_Var
  %ln9rO = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rP = load i64*, i64** %Sp_Var
  %ln9rQ = load i64, i64* %R1_Var
  %ln9rR = load i64, i64* %R2_Var
  %ln9rS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rO( i64* %Base_Arg, i64* %ln9rP, i64* %Hp_Arg, i64 %ln9rQ, i64 %ln9rR, i64 %ln9rS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8UZ:
  %ln9rT = load i64, i64* %R1_Var
  store i64 %ln9rT, i64* %R1_Var
  %ln9rU = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9rV = bitcast i64* %ln9rU to i64*
  %ln9rW = load i64, i64* %ln9rV, !tbaa !5
  %ln9rX = inttoptr i64 %ln9rW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rY = load i64*, i64** %Sp_Var
  %ln9rZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rX( i64* %Base_Arg, i64* %ln9rY, i64* %Hp_Arg, i64 %ln9rZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wq_info$def to i8*)
define internal ghccc void @s7wq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9s0:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8V5
c8V5:
  %ln9s1 = load i64*, i64** %Sp_Var
  %ln9s2 = getelementptr inbounds i64, i64* %ln9s1, i32 -2
  %ln9s3 = ptrtoint i64* %ln9s2 to i64
  %ln9s4 = icmp ult i64 %ln9s3, %SpLim_Arg
  %ln9s5 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9s4, i1 0 )
  br i1 %ln9s5, label %c8V6, label %c8V7
c8V7:
  %ln9s7 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9s6 = load i64*, i64** %Sp_Var
  %ln9s8 = getelementptr inbounds i64, i64* %ln9s6, i32 -2
  store i64 %ln9s7, i64* %ln9s8, !tbaa !2
  %ln9sa = load i64, i64* %R1_Var
  %ln9s9 = load i64*, i64** %Sp_Var
  %ln9sb = getelementptr inbounds i64, i64* %ln9s9, i32 -1
  store i64 %ln9sa, i64* %ln9sb, !tbaa !2
  %ln9se = load i64, i64* %R1_Var
  %ln9sf = add i64 %ln9se, 24
  %ln9sg = inttoptr i64 %ln9sf to i64*
  %ln9sh = load i64, i64* %ln9sg, !tbaa !4
  store i64 %ln9sh, i64* %R3_Var
  %ln9sk = load i64, i64* %R1_Var
  %ln9sl = add i64 %ln9sk, 16
  %ln9sm = inttoptr i64 %ln9sl to i64*
  %ln9sn = load i64, i64* %ln9sm, !tbaa !4
  store i64 %ln9sn, i64* %R2_Var
  %ln9so = load i64*, i64** %Sp_Var
  %ln9sp = getelementptr inbounds i64, i64* %ln9so, i32 -2
  %ln9sq = ptrtoint i64* %ln9sp to i64
  %ln9sr = inttoptr i64 %ln9sq to i64*
  store i64* %ln9sr, i64** %Sp_Var
  %ln9ss = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9st = load i64*, i64** %Sp_Var
  %ln9su = load i64, i64* %R1_Var
  %ln9sv = load i64, i64* %R2_Var
  %ln9sw = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ss( i64* %Base_Arg, i64* %ln9st, i64* %Hp_Arg, i64 %ln9su, i64 %ln9sv, i64 %ln9sw, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8V6:
  %ln9sx = load i64, i64* %R1_Var
  store i64 %ln9sx, i64* %R1_Var
  %ln9sy = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9sz = bitcast i64* %ln9sy to i64*
  %ln9sA = load i64, i64* %ln9sz, !tbaa !5
  %ln9sB = inttoptr i64 %ln9sA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sC = load i64*, i64** %Sp_Var
  %ln9sD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sB( i64* %Base_Arg, i64* %ln9sC, i64* %Hp_Arg, i64 %ln9sD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7vr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vr_info$def to i8*)
define internal ghccc void @s7vr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9sE:
  %ls7v4 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8V8
c8V8:
  %ln9sF = load i64*, i64** %Sp_Var
  %ln9sG = getelementptr inbounds i64, i64* %ln9sF, i32 -6
  %ln9sH = ptrtoint i64* %ln9sG to i64
  %ln9sI = icmp ult i64 %ln9sH, %SpLim_Arg
  %ln9sJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9sI, i1 0 )
  br i1 %ln9sJ, label %c8Va, label %c8Vb
c8Vb:
  %ln9sL = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9sK = load i64*, i64** %Sp_Var
  %ln9sM = getelementptr inbounds i64, i64* %ln9sK, i32 -2
  store i64 %ln9sL, i64* %ln9sM, !tbaa !2
  %ln9sO = load i64, i64* %R1_Var
  %ln9sN = load i64*, i64** %Sp_Var
  %ln9sP = getelementptr inbounds i64, i64* %ln9sN, i32 -1
  store i64 %ln9sO, i64* %ln9sP, !tbaa !2
  %ln9sR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rt_info$def to i64
  %ln9sQ = load i64*, i64** %Sp_Var
  %ln9sS = getelementptr inbounds i64, i64* %ln9sQ, i32 -4
  store i64 %ln9sR, i64* %ln9sS, !tbaa !2
  %ln9sV = load i64, i64* %R1_Var
  %ln9sW = add i64 %ln9sV, 16
  %ln9sX = inttoptr i64 %ln9sW to i64*
  %ln9sY = load i64, i64* %ln9sX, !tbaa !4
  store i64 %ln9sY, i64* %ls7v4
  %ln9t1 = load i64, i64* %R1_Var
  %ln9t2 = add i64 %ln9t1, 24
  %ln9t3 = inttoptr i64 %ln9t2 to i64*
  %ln9t4 = load i64, i64* %ln9t3, !tbaa !4
  store i64 %ln9t4, i64* %R1_Var
  %ln9t6 = load i64, i64* %ls7v4
  %ln9t5 = load i64*, i64** %Sp_Var
  %ln9t7 = getelementptr inbounds i64, i64* %ln9t5, i32 -3
  store i64 %ln9t6, i64* %ln9t7, !tbaa !2
  %ln9t8 = load i64*, i64** %Sp_Var
  %ln9t9 = getelementptr inbounds i64, i64* %ln9t8, i32 -4
  %ln9ta = ptrtoint i64* %ln9t9 to i64
  %ln9tb = inttoptr i64 %ln9ta to i64*
  store i64* %ln9tb, i64** %Sp_Var
  %ln9tc = load i64, i64* %R1_Var
  %ln9td = and i64 %ln9tc, 7
  %ln9te = icmp ne i64 %ln9td, 0
  br i1 %ln9te, label %u8Vj, label %c8Ru
c8Ru:
  %ln9tg = load i64, i64* %R1_Var
  %ln9th = inttoptr i64 %ln9tg to i64*
  %ln9ti = load i64, i64* %ln9th, !tbaa !4
  %ln9tj = inttoptr i64 %ln9ti to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tk = load i64*, i64** %Sp_Var
  %ln9tl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tj( i64* %Base_Arg, i64* %ln9tk, i64* %Hp_Arg, i64 %ln9tl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Vj:
  %ln9tm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tn = load i64*, i64** %Sp_Var
  %ln9to = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tm( i64* %Base_Arg, i64* %ln9tn, i64* %Hp_Arg, i64 %ln9to, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Va:
  %ln9tp = load i64, i64* %R1_Var
  store i64 %ln9tp, i64* %R1_Var
  %ln9tq = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9tr = bitcast i64* %ln9tq to i64*
  %ln9ts = load i64, i64* %ln9tr, !tbaa !5
  %ln9tt = inttoptr i64 %ln9ts to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tu = load i64*, i64** %Sp_Var
  %ln9tv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tt( i64* %Base_Arg, i64* %ln9tu, i64* %Hp_Arg, i64 %ln9tv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Rt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Rt_info$def to i8*)
define internal ghccc void @c8Rt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9tw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Rt
c8Rt:
  %ln9tx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ry_info$def to i64
  %ln9ty = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9tx, i64* %ln9ty, !tbaa !2
  %ln9tB = load i64, i64* %R1_Var
  %ln9tC = add i64 %ln9tB, 7
  %ln9tD = inttoptr i64 %ln9tC to i64*
  %ln9tE = load i64, i64* %ln9tD, !tbaa !4
  store i64 %ln9tE, i64* %R1_Var
  %ln9tF = load i64, i64* %R1_Var
  %ln9tG = and i64 %ln9tF, 7
  %ln9tH = icmp ne i64 %ln9tG, 0
  br i1 %ln9tH, label %u8Vh, label %c8Rz
c8Rz:
  %ln9tJ = load i64, i64* %R1_Var
  %ln9tK = inttoptr i64 %ln9tJ to i64*
  %ln9tL = load i64, i64* %ln9tK, !tbaa !4
  %ln9tM = inttoptr i64 %ln9tL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9tN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Vh:
  %ln9tO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ry_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9tP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ry_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ry_info$def to i8*)
define internal ghccc void @c8Ry_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
n9tQ:
  %ls7vw = alloca i64, i32 1
  %ls7vx = alloca i64, i32 1
  %ls7vy = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Ry
c8Ry:
  %ln9tS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RD_info$def to i64
  %ln9tR = load i64*, i64** %Sp_Var
  %ln9tT = getelementptr inbounds i64, i64* %ln9tR, i32 -2
  store i64 %ln9tS, i64* %ln9tT, !tbaa !2
  %ln9tW = load i64, i64* %R1_Var
  %ln9tX = add i64 %ln9tW, 7
  %ln9tY = inttoptr i64 %ln9tX to i64*
  %ln9tZ = load i64, i64* %ln9tY, !tbaa !4
  store i64 %ln9tZ, i64* %ls7vw
  %ln9u2 = load i64, i64* %R1_Var
  %ln9u3 = add i64 %ln9u2, 15
  %ln9u4 = inttoptr i64 %ln9u3 to i64*
  %ln9u5 = load i64, i64* %ln9u4, !tbaa !4
  store i64 %ln9u5, i64* %ls7vx
  %ln9u8 = load i64, i64* %R1_Var
  %ln9u9 = add i64 %ln9u8, 23
  %ln9ua = inttoptr i64 %ln9u9 to i64*
  %ln9ub = load i64, i64* %ln9ua, !tbaa !4
  store i64 %ln9ub, i64* %ls7vy
  %ln9uc = load i64*, i64** %Sp_Var
  %ln9ud = getelementptr inbounds i64, i64* %ln9uc, i32 1
  %ln9ue = bitcast i64* %ln9ud to i64*
  %ln9uf = load i64, i64* %ln9ue, !tbaa !2
  store i64 %ln9uf, i64* %R1_Var
  %ln9uh = load i64, i64* %ls7vy
  %ln9ug = load i64*, i64** %Sp_Var
  %ln9ui = getelementptr inbounds i64, i64* %ln9ug, i32 -1
  store i64 %ln9uh, i64* %ln9ui, !tbaa !2
  %ln9uk = load i64, i64* %ls7vx
  %ln9uj = load i64*, i64** %Sp_Var
  %ln9ul = getelementptr inbounds i64, i64* %ln9uj, i32 0
  store i64 %ln9uk, i64* %ln9ul, !tbaa !2
  %ln9un = load i64, i64* %ls7vw
  %ln9um = load i64*, i64** %Sp_Var
  %ln9uo = getelementptr inbounds i64, i64* %ln9um, i32 1
  store i64 %ln9un, i64* %ln9uo, !tbaa !2
  %ln9up = load i64*, i64** %Sp_Var
  %ln9uq = getelementptr inbounds i64, i64* %ln9up, i32 -2
  %ln9ur = ptrtoint i64* %ln9uq to i64
  %ln9us = inttoptr i64 %ln9ur to i64*
  store i64* %ln9us, i64** %Sp_Var
  %ln9ut = load i64, i64* %R1_Var
  %ln9uu = and i64 %ln9ut, 7
  %ln9uv = icmp ne i64 %ln9uu, 0
  br i1 %ln9uv, label %u8Vi, label %c8RE
c8RE:
  %ln9ux = load i64, i64* %R1_Var
  %ln9uy = inttoptr i64 %ln9ux to i64*
  %ln9uz = load i64, i64* %ln9uy, !tbaa !4
  %ln9uA = inttoptr i64 %ln9uz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uB = load i64*, i64** %Sp_Var
  %ln9uC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uA( i64* %Base_Arg, i64* %ln9uB, i64* %Hp_Arg, i64 %ln9uC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Vi:
  %ln9uD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uE = load i64*, i64** %Sp_Var
  %ln9uF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uD( i64* %Base_Arg, i64* %ln9uE, i64* %Hp_Arg, i64 %ln9uF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8RD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8RD_info$def to i8*)
define internal ghccc void @c8RD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9uG:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7vA = alloca i64, i32 1
  %ls7vB = alloca i64, i32 1
  %ls7vC = alloca i64, i32 1
  %ls7vx = alloca i64, i32 1
  %ls7vw = alloca i64, i32 1
  %ls7vy = alloca i64, i32 1
  %lc8RI = alloca i64, i32 1
  %lc8St = alloca i64, i32 1
  %lc8Te = alloca i64, i32 1
  %lc8TZ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8RD
c8RD:
  %ln9uH = load i64*, i64** %Hp_Var
  %ln9uI = getelementptr inbounds i64, i64* %ln9uH, i32 39
  %ln9uJ = ptrtoint i64* %ln9uI to i64
  %ln9uK = inttoptr i64 %ln9uJ to i64*
  store i64* %ln9uK, i64** %Hp_Var
  %ln9uL = load i64*, i64** %Hp_Var
  %ln9uM = ptrtoint i64* %ln9uL to i64
  %ln9uN = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9uO = bitcast i64* %ln9uN to i64*
  %ln9uP = load i64, i64* %ln9uO, !tbaa !5
  %ln9uQ = icmp ugt i64 %ln9uM, %ln9uP
  %ln9uR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9uQ, i1 0 )
  br i1 %ln9uR, label %c8Vg, label %c8Vf
c8Vf:
  %ln9uU = load i64, i64* %R1_Var
  %ln9uV = add i64 %ln9uU, 7
  %ln9uW = inttoptr i64 %ln9uV to i64*
  %ln9uX = load i64, i64* %ln9uW, !tbaa !4
  store i64 %ln9uX, i64* %ls7vA
  %ln9v0 = load i64, i64* %R1_Var
  %ln9v1 = add i64 %ln9v0, 15
  %ln9v2 = inttoptr i64 %ln9v1 to i64*
  %ln9v3 = load i64, i64* %ln9v2, !tbaa !4
  store i64 %ln9v3, i64* %ls7vB
  %ln9v6 = load i64, i64* %R1_Var
  %ln9v7 = add i64 %ln9v6, 23
  %ln9v8 = inttoptr i64 %ln9v7 to i64*
  %ln9v9 = load i64, i64* %ln9v8, !tbaa !4
  store i64 %ln9v9, i64* %ls7vC
  %ln9vb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vD_info$def to i64
  %ln9va = load i64*, i64** %Hp_Var
  %ln9vc = getelementptr inbounds i64, i64* %ln9va, i32 -38
  store i64 %ln9vb, i64* %ln9vc, !tbaa !3
  %ln9vd = load i64*, i64** %Sp_Var
  %ln9ve = getelementptr inbounds i64, i64* %ln9vd, i32 2
  %ln9vf = bitcast i64* %ln9ve to i64*
  %ln9vg = load i64, i64* %ln9vf, !tbaa !2
  store i64 %ln9vg, i64* %ls7vx
  %ln9vi = load i64, i64* %ls7vx
  %ln9vh = load i64*, i64** %Hp_Var
  %ln9vj = getelementptr inbounds i64, i64* %ln9vh, i32 -36
  store i64 %ln9vi, i64* %ln9vj, !tbaa !3
  %ln9vl = load i64, i64* %ls7vA
  %ln9vk = load i64*, i64** %Hp_Var
  %ln9vm = getelementptr inbounds i64, i64* %ln9vk, i32 -35
  store i64 %ln9vl, i64* %ln9vm, !tbaa !3
  %ln9vo = load i64, i64* %ls7vB
  %ln9vn = load i64*, i64** %Hp_Var
  %ln9vp = getelementptr inbounds i64, i64* %ln9vn, i32 -34
  store i64 %ln9vo, i64* %ln9vp, !tbaa !3
  %ln9vq = load i64*, i64** %Sp_Var
  %ln9vr = getelementptr inbounds i64, i64* %ln9vq, i32 3
  %ln9vs = bitcast i64* %ln9vr to i64*
  %ln9vt = load i64, i64* %ln9vs, !tbaa !2
  store i64 %ln9vt, i64* %ls7vw
  %ln9vv = load i64, i64* %ls7vw
  %ln9vu = load i64*, i64** %Hp_Var
  %ln9vw = getelementptr inbounds i64, i64* %ln9vu, i32 -33
  store i64 %ln9vv, i64* %ln9vw, !tbaa !3
  %ln9vy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vP_info$def to i64
  %ln9vx = load i64*, i64** %Hp_Var
  %ln9vz = getelementptr inbounds i64, i64* %ln9vx, i32 -32
  store i64 %ln9vy, i64* %ln9vz, !tbaa !3
  %ln9vB = load i64, i64* %ls7vw
  %ln9vA = load i64*, i64** %Hp_Var
  %ln9vC = getelementptr inbounds i64, i64* %ln9vA, i32 -30
  store i64 %ln9vB, i64* %ln9vC, !tbaa !3
  %ln9vE = load i64, i64* %ls7vC
  %ln9vD = load i64*, i64** %Hp_Var
  %ln9vF = getelementptr inbounds i64, i64* %ln9vD, i32 -29
  store i64 %ln9vE, i64* %ln9vF, !tbaa !3
  %ln9vH = load i64, i64* %ls7vA
  %ln9vG = load i64*, i64** %Hp_Var
  %ln9vI = getelementptr inbounds i64, i64* %ln9vG, i32 -28
  store i64 %ln9vH, i64* %ln9vI, !tbaa !3
  %ln9vJ = load i64*, i64** %Sp_Var
  %ln9vK = getelementptr inbounds i64, i64* %ln9vJ, i32 1
  %ln9vL = bitcast i64* %ln9vK to i64*
  %ln9vM = load i64, i64* %ln9vL, !tbaa !2
  store i64 %ln9vM, i64* %ls7vy
  %ln9vO = load i64, i64* %ls7vy
  %ln9vN = load i64*, i64** %Hp_Var
  %ln9vP = getelementptr inbounds i64, i64* %ln9vN, i32 -27
  store i64 %ln9vO, i64* %ln9vP, !tbaa !3
  %ln9vR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7w1_info$def to i64
  %ln9vQ = load i64*, i64** %Hp_Var
  %ln9vS = getelementptr inbounds i64, i64* %ln9vQ, i32 -26
  store i64 %ln9vR, i64* %ln9vS, !tbaa !3
  %ln9vU = load i64, i64* %ls7vy
  %ln9vT = load i64*, i64** %Hp_Var
  %ln9vV = getelementptr inbounds i64, i64* %ln9vT, i32 -24
  store i64 %ln9vU, i64* %ln9vV, !tbaa !3
  %ln9vX = load i64, i64* %ls7vB
  %ln9vW = load i64*, i64** %Hp_Var
  %ln9vY = getelementptr inbounds i64, i64* %ln9vW, i32 -23
  store i64 %ln9vX, i64* %ln9vY, !tbaa !3
  %ln9w0 = load i64, i64* %ls7vC
  %ln9vZ = load i64*, i64** %Hp_Var
  %ln9w1 = getelementptr inbounds i64, i64* %ln9vZ, i32 -22
  store i64 %ln9w0, i64* %ln9w1, !tbaa !3
  %ln9w3 = load i64, i64* %ls7vx
  %ln9w2 = load i64*, i64** %Hp_Var
  %ln9w4 = getelementptr inbounds i64, i64* %ln9w2, i32 -21
  store i64 %ln9w3, i64* %ln9w4, !tbaa !3
  %ln9w6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wd_info$def to i64
  %ln9w5 = load i64*, i64** %Hp_Var
  %ln9w7 = getelementptr inbounds i64, i64* %ln9w5, i32 -20
  store i64 %ln9w6, i64* %ln9w7, !tbaa !3
  %ln9w8 = load i64*, i64** %Hp_Var
  %ln9w9 = getelementptr inbounds i64, i64* %ln9w8, i32 -38
  %ln9wa = ptrtoint i64* %ln9w9 to i64
  store i64 %ln9wa, i64* %lc8RI
  %ln9wc = load i64, i64* %lc8RI
  %ln9wb = load i64*, i64** %Hp_Var
  %ln9wd = getelementptr inbounds i64, i64* %ln9wb, i32 -18
  store i64 %ln9wc, i64* %ln9wd, !tbaa !3
  %ln9we = load i64*, i64** %Hp_Var
  %ln9wf = getelementptr inbounds i64, i64* %ln9we, i32 -32
  %ln9wg = ptrtoint i64* %ln9wf to i64
  store i64 %ln9wg, i64* %lc8St
  %ln9wi = load i64, i64* %lc8St
  %ln9wh = load i64*, i64** %Hp_Var
  %ln9wj = getelementptr inbounds i64, i64* %ln9wh, i32 -17
  store i64 %ln9wi, i64* %ln9wj, !tbaa !3
  %ln9wk = load i64*, i64** %Hp_Var
  %ln9wl = getelementptr inbounds i64, i64* %ln9wk, i32 -26
  %ln9wm = ptrtoint i64* %ln9wl to i64
  store i64 %ln9wm, i64* %lc8Te
  %ln9wo = load i64, i64* %lc8Te
  %ln9wn = load i64*, i64** %Hp_Var
  %ln9wp = getelementptr inbounds i64, i64* %ln9wn, i32 -16
  store i64 %ln9wo, i64* %ln9wp, !tbaa !3
  %ln9wr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7ws_info$def to i64
  %ln9wq = load i64*, i64** %Hp_Var
  %ln9ws = getelementptr inbounds i64, i64* %ln9wq, i32 -15
  store i64 %ln9wr, i64* %ln9ws, !tbaa !3
  %ln9wu = load i64, i64* %lc8RI
  %ln9wt = load i64*, i64** %Hp_Var
  %ln9wv = getelementptr inbounds i64, i64* %ln9wt, i32 -13
  store i64 %ln9wu, i64* %ln9wv, !tbaa !3
  %ln9ww = load i64*, i64** %Hp_Var
  %ln9wx = getelementptr inbounds i64, i64* %ln9ww, i32 -20
  %ln9wy = ptrtoint i64* %ln9wx to i64
  store i64 %ln9wy, i64* %lc8TZ
  %ln9wA = load i64, i64* %lc8TZ
  %ln9wz = load i64*, i64** %Hp_Var
  %ln9wB = getelementptr inbounds i64, i64* %ln9wz, i32 -12
  store i64 %ln9wA, i64* %ln9wB, !tbaa !3
  %ln9wD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wr_info$def to i64
  %ln9wC = load i64*, i64** %Hp_Var
  %ln9wE = getelementptr inbounds i64, i64* %ln9wC, i32 -11
  store i64 %ln9wD, i64* %ln9wE, !tbaa !3
  %ln9wG = load i64, i64* %lc8St
  %ln9wF = load i64*, i64** %Hp_Var
  %ln9wH = getelementptr inbounds i64, i64* %ln9wF, i32 -9
  store i64 %ln9wG, i64* %ln9wH, !tbaa !3
  %ln9wJ = load i64, i64* %lc8TZ
  %ln9wI = load i64*, i64** %Hp_Var
  %ln9wK = getelementptr inbounds i64, i64* %ln9wI, i32 -8
  store i64 %ln9wJ, i64* %ln9wK, !tbaa !3
  %ln9wM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wq_info$def to i64
  %ln9wL = load i64*, i64** %Hp_Var
  %ln9wN = getelementptr inbounds i64, i64* %ln9wL, i32 -7
  store i64 %ln9wM, i64* %ln9wN, !tbaa !3
  %ln9wP = load i64, i64* %lc8Te
  %ln9wO = load i64*, i64** %Hp_Var
  %ln9wQ = getelementptr inbounds i64, i64* %ln9wO, i32 -5
  store i64 %ln9wP, i64* %ln9wQ, !tbaa !3
  %ln9wS = load i64, i64* %lc8TZ
  %ln9wR = load i64*, i64** %Hp_Var
  %ln9wT = getelementptr inbounds i64, i64* %ln9wR, i32 -4
  store i64 %ln9wS, i64* %ln9wT, !tbaa !3
  %ln9wV = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %ln9wU = load i64*, i64** %Hp_Var
  %ln9wW = getelementptr inbounds i64, i64* %ln9wU, i32 -3
  store i64 %ln9wV, i64* %ln9wW, !tbaa !3
  %ln9wY = load i64*, i64** %Hp_Var
  %ln9wZ = getelementptr inbounds i64, i64* %ln9wY, i32 -7
  %ln9x0 = ptrtoint i64* %ln9wZ to i64
  %ln9wX = load i64*, i64** %Hp_Var
  %ln9x1 = getelementptr inbounds i64, i64* %ln9wX, i32 -2
  store i64 %ln9x0, i64* %ln9x1, !tbaa !3
  %ln9x3 = load i64*, i64** %Hp_Var
  %ln9x4 = getelementptr inbounds i64, i64* %ln9x3, i32 -11
  %ln9x5 = ptrtoint i64* %ln9x4 to i64
  %ln9x2 = load i64*, i64** %Hp_Var
  %ln9x6 = getelementptr inbounds i64, i64* %ln9x2, i32 -1
  store i64 %ln9x5, i64* %ln9x6, !tbaa !3
  %ln9x8 = load i64*, i64** %Hp_Var
  %ln9x9 = getelementptr inbounds i64, i64* %ln9x8, i32 -15
  %ln9xa = ptrtoint i64* %ln9x9 to i64
  %ln9x7 = load i64*, i64** %Hp_Var
  %ln9xb = getelementptr inbounds i64, i64* %ln9x7, i32 0
  store i64 %ln9xa, i64* %ln9xb, !tbaa !3
  %ln9xd = load i64*, i64** %Hp_Var
  %ln9xe = ptrtoint i64* %ln9xd to i64
  %ln9xf = add i64 %ln9xe, -23
  store i64 %ln9xf, i64* %R1_Var
  %ln9xg = load i64*, i64** %Sp_Var
  %ln9xh = getelementptr inbounds i64, i64* %ln9xg, i32 4
  %ln9xi = ptrtoint i64* %ln9xh to i64
  %ln9xj = inttoptr i64 %ln9xi to i64*
  store i64* %ln9xj, i64** %Sp_Var
  %ln9xk = load i64*, i64** %Sp_Var
  %ln9xl = getelementptr inbounds i64, i64* %ln9xk, i32 0
  %ln9xm = bitcast i64* %ln9xl to i64*
  %ln9xn = load i64, i64* %ln9xm, !tbaa !2
  %ln9xo = inttoptr i64 %ln9xn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xp = load i64*, i64** %Sp_Var
  %ln9xq = load i64*, i64** %Hp_Var
  %ln9xr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xo( i64* %Base_Arg, i64* %ln9xp, i64* %ln9xq, i64 %ln9xr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Vg:
  %ln9xs = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 312, i64* %ln9xs, !tbaa !5
  %ln9xt = load i64, i64* %R1_Var
  store i64 %ln9xt, i64* %R1_Var
  %ln9xu = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xv = load i64*, i64** %Sp_Var
  %ln9xw = load i64*, i64** %Hp_Var
  %ln9xx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xu( i64* %Base_Arg, i64* %ln9xv, i64* %ln9xw, i64 %ln9xx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wy_info$def to i8*)
define internal ghccc void @s7wy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9xy:
  %ls7v6 = alloca i64, i32 1
  %ls7v5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8VA
c8VA:
  %ln9xz = load i64*, i64** %Sp_Var
  %ln9xA = getelementptr inbounds i64, i64* %ln9xz, i32 -5
  %ln9xB = ptrtoint i64* %ln9xA to i64
  %ln9xC = icmp ult i64 %ln9xB, %SpLim_Arg
  %ln9xD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9xC, i1 0 )
  br i1 %ln9xD, label %c8Wf, label %c8Wg
c8Wg:
  %ln9xF = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9xE = load i64*, i64** %Sp_Var
  %ln9xG = getelementptr inbounds i64, i64* %ln9xE, i32 -2
  store i64 %ln9xF, i64* %ln9xG, !tbaa !2
  %ln9xI = load i64, i64* %R1_Var
  %ln9xH = load i64*, i64** %Sp_Var
  %ln9xJ = getelementptr inbounds i64, i64* %ln9xH, i32 -1
  store i64 %ln9xI, i64* %ln9xJ, !tbaa !2
  %ln9xL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vx_info$def to i64
  %ln9xK = load i64*, i64** %Sp_Var
  %ln9xM = getelementptr inbounds i64, i64* %ln9xK, i32 -5
  store i64 %ln9xL, i64* %ln9xM, !tbaa !2
  %ln9xP = load i64, i64* %R1_Var
  %ln9xQ = add i64 %ln9xP, 16
  %ln9xR = inttoptr i64 %ln9xQ to i64*
  %ln9xS = load i64, i64* %ln9xR, !tbaa !4
  store i64 %ln9xS, i64* %ls7v6
  %ln9xV = load i64, i64* %R1_Var
  %ln9xW = add i64 %ln9xV, 24
  %ln9xX = inttoptr i64 %ln9xW to i64*
  %ln9xY = load i64, i64* %ln9xX, !tbaa !4
  store i64 %ln9xY, i64* %ls7v5
  %ln9y1 = load i64, i64* %R1_Var
  %ln9y2 = add i64 %ln9y1, 32
  %ln9y3 = inttoptr i64 %ln9y2 to i64*
  %ln9y4 = load i64, i64* %ln9y3, !tbaa !4
  store i64 %ln9y4, i64* %R1_Var
  %ln9y6 = load i64, i64* %ls7v5
  %ln9y5 = load i64*, i64** %Sp_Var
  %ln9y7 = getelementptr inbounds i64, i64* %ln9y5, i32 -4
  store i64 %ln9y6, i64* %ln9y7, !tbaa !2
  %ln9y9 = load i64, i64* %ls7v6
  %ln9y8 = load i64*, i64** %Sp_Var
  %ln9ya = getelementptr inbounds i64, i64* %ln9y8, i32 -3
  store i64 %ln9y9, i64* %ln9ya, !tbaa !2
  %ln9yb = load i64*, i64** %Sp_Var
  %ln9yc = getelementptr inbounds i64, i64* %ln9yb, i32 -5
  %ln9yd = ptrtoint i64* %ln9yc to i64
  %ln9ye = inttoptr i64 %ln9yd to i64*
  store i64* %ln9ye, i64** %Sp_Var
  %ln9yf = load i64, i64* %R1_Var
  %ln9yg = and i64 %ln9yf, 7
  %ln9yh = icmp ne i64 %ln9yg, 0
  br i1 %ln9yh, label %u8Wo, label %c8Vy
c8Vy:
  %ln9yj = load i64, i64* %R1_Var
  %ln9yk = inttoptr i64 %ln9yj to i64*
  %ln9yl = load i64, i64* %ln9yk, !tbaa !4
  %ln9ym = inttoptr i64 %ln9yl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yn = load i64*, i64** %Sp_Var
  %ln9yo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ym( i64* %Base_Arg, i64* %ln9yn, i64* %Hp_Arg, i64 %ln9yo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Wo:
  %ln9yp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yq = load i64*, i64** %Sp_Var
  %ln9yr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yp( i64* %Base_Arg, i64* %ln9yq, i64* %Hp_Arg, i64 %ln9yr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Wf:
  %ln9ys = load i64, i64* %R1_Var
  store i64 %ln9ys, i64* %R1_Var
  %ln9yt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9yu = bitcast i64* %ln9yt to i64*
  %ln9yv = load i64, i64* %ln9yu, !tbaa !5
  %ln9yw = inttoptr i64 %ln9yv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yx = load i64*, i64** %Sp_Var
  %ln9yy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yw( i64* %Base_Arg, i64* %ln9yx, i64* %Hp_Arg, i64 %ln9yy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Vx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vx_info$def to i8*)
define internal ghccc void @c8Vx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9yz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Vx
c8Vx:
  %ln9yA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VD_info$def to i64
  %ln9yB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9yA, i64* %ln9yB, !tbaa !2
  %ln9yE = load i64, i64* %R1_Var
  %ln9yF = add i64 %ln9yE, 15
  %ln9yG = inttoptr i64 %ln9yF to i64*
  %ln9yH = load i64, i64* %ln9yG, !tbaa !4
  store i64 %ln9yH, i64* %R1_Var
  %ln9yI = load i64, i64* %R1_Var
  %ln9yJ = and i64 %ln9yI, 7
  %ln9yK = icmp ne i64 %ln9yJ, 0
  br i1 %ln9yK, label %u8Wn, label %c8VE
c8VE:
  %ln9yM = load i64, i64* %R1_Var
  %ln9yN = inttoptr i64 %ln9yM to i64*
  %ln9yO = load i64, i64* %ln9yN, !tbaa !4
  %ln9yP = inttoptr i64 %ln9yO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9yQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Wn:
  %ln9yR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9yS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8VD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VD_info$def to i8*)
define internal ghccc void @c8VD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9yT:
  %ls7wD = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8VD
c8VD:
  %ln9yU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VI_info$def to i64
  %ln9yV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9yU, i64* %ln9yV, !tbaa !2
  %ln9yY = load i64, i64* %R1_Var
  %ln9yZ = add i64 %ln9yY, 7
  %ln9z0 = inttoptr i64 %ln9yZ to double*
  %ln9z1 = load double, double* %ln9z0, !tbaa !4
  store double %ln9z1, double* %ls7wD
  %ln9z2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9z3 = bitcast i64* %ln9z2 to i64*
  %ln9z4 = load i64, i64* %ln9z3, !tbaa !2
  store i64 %ln9z4, i64* %R1_Var
  %ln9z5 = load double, double* %ls7wD
  %ln9z6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9z7 = bitcast i64* %ln9z6 to double*
  store double %ln9z5, double* %ln9z7, !tbaa !2
  %ln9z8 = load i64, i64* %R1_Var
  %ln9z9 = and i64 %ln9z8, 7
  %ln9za = icmp ne i64 %ln9z9, 0
  br i1 %ln9za, label %u8Wp, label %c8VJ
c8VJ:
  %ln9zc = load i64, i64* %R1_Var
  %ln9zd = inttoptr i64 %ln9zc to i64*
  %ln9ze = load i64, i64* %ln9zd, !tbaa !4
  %ln9zf = inttoptr i64 %ln9ze to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9zg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Wp:
  %ln9zh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9zi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8VI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VI_info$def to i8*)
define internal ghccc void @c8VI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n9zj:
  %ls7wF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8VI
c8VI:
  %ln9zk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VN_info$def to i64
  %ln9zl = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9zk, i64* %ln9zl, !tbaa !2
  %ln9zo = load i64, i64* %R1_Var
  %ln9zp = add i64 %ln9zo, 7
  %ln9zq = inttoptr i64 %ln9zp to double*
  %ln9zr = load double, double* %ln9zq, !tbaa !4
  store double %ln9zr, double* %ls7wF
  %ln9zs = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9zt = bitcast i64* %ln9zs to i64*
  %ln9zu = load i64, i64* %ln9zt, !tbaa !2
  store i64 %ln9zu, i64* %R1_Var
  %ln9zv = load double, double* %ls7wF
  %ln9zw = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9zx = bitcast i64* %ln9zw to double*
  store double %ln9zv, double* %ln9zx, !tbaa !2
  %ln9zy = load i64, i64* %R1_Var
  %ln9zz = and i64 %ln9zy, 7
  %ln9zA = icmp ne i64 %ln9zz, 0
  br i1 %ln9zA, label %u8Wq, label %c8VO
c8VO:
  %ln9zC = load i64, i64* %R1_Var
  %ln9zD = inttoptr i64 %ln9zC to i64*
  %ln9zE = load i64, i64* %ln9zD, !tbaa !4
  %ln9zF = inttoptr i64 %ln9zE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9zG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Wq:
  %ln9zH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9zI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8VN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8VN_info$def to i8*)
define internal ghccc void @c8VN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n9zJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7wD = alloca double, i32 1
  %ls7wH = alloca double, i32 1
  %lc8W1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8VN
c8VN:
  %ln9zK = load i64*, i64** %Hp_Var
  %ln9zL = getelementptr inbounds i64, i64* %ln9zK, i32 2
  %ln9zM = ptrtoint i64* %ln9zL to i64
  %ln9zN = inttoptr i64 %ln9zM to i64*
  store i64* %ln9zN, i64** %Hp_Var
  %ln9zO = load i64*, i64** %Hp_Var
  %ln9zP = ptrtoint i64* %ln9zO to i64
  %ln9zQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9zR = bitcast i64* %ln9zQ to i64*
  %ln9zS = load i64, i64* %ln9zR, !tbaa !5
  %ln9zT = icmp ugt i64 %ln9zP, %ln9zS
  %ln9zU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9zT, i1 0 )
  br i1 %ln9zU, label %c8Wm, label %c8Wl
c8Wl:
  %ln9zV = load i64*, i64** %Sp_Var
  %ln9zW = getelementptr inbounds i64, i64* %ln9zV, i32 1
  %ln9zX = bitcast i64* %ln9zW to double*
  %ln9zY = load double, double* %ln9zX, !tbaa !2
  store double %ln9zY, double* %ls7wD
  %ln9A1 = load i64, i64* %R1_Var
  %ln9A2 = add i64 %ln9A1, 7
  %ln9A3 = inttoptr i64 %ln9A2 to double*
  %ln9A4 = load double, double* %ln9A3, !tbaa !4
  store double %ln9A4, double* %ls7wH
  %ln9A5 = load i64*, i64** %Sp_Var
  %ln9A6 = getelementptr inbounds i64, i64* %ln9A5, i32 2
  %ln9A7 = bitcast i64* %ln9A6 to double*
  %ln9A8 = load double, double* %ln9A7, !tbaa !2
  %ln9A9 = fdiv double %ln9A8, 0x4000000000000000
  %ln9Aa = fmul double %ln9A9, 0x400921FB54442D18
  %ln9Ab = fdiv double %ln9Aa, 0x4066800000000000
  %ln9Ad = call ccc double (double) @tan( double %ln9Ab ) nounwind
  store double %ln9Ad, double* %lc8W1
  %ln9Af = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9Ae = load i64*, i64** %Hp_Var
  %ln9Ag = getelementptr inbounds i64, i64* %ln9Ae, i32 -1
  store i64 %ln9Af, i64* %ln9Ag, !tbaa !3
  %ln9Ai = load double, double* %ls7wD
  %ln9Aj = load double, double* %ls7wD
  %ln9Ak = fadd double %ln9Ai, %ln9Aj
  %ln9Al = load double, double* %lc8W1
  %ln9Am = fmul double %ln9Ak, %ln9Al
  %ln9An = load double, double* %ls7wH
  %ln9Ao = fdiv double %ln9Am, %ln9An
  %ln9Ah = load i64*, i64** %Hp_Var
  %ln9Ap = getelementptr inbounds i64, i64* %ln9Ah, i32 0
  %ln9Aq = bitcast i64* %ln9Ap to double*
  store double %ln9Ao, double* %ln9Aq, !tbaa !3
  %ln9As = load i64*, i64** %Hp_Var
  %ln9At = ptrtoint i64* %ln9As to i64
  %ln9Au = add i64 %ln9At, -7
  store i64 %ln9Au, i64* %R1_Var
  %ln9Av = load i64*, i64** %Sp_Var
  %ln9Aw = getelementptr inbounds i64, i64* %ln9Av, i32 3
  %ln9Ax = ptrtoint i64* %ln9Aw to i64
  %ln9Ay = inttoptr i64 %ln9Ax to i64*
  store i64* %ln9Ay, i64** %Sp_Var
  %ln9Az = load i64*, i64** %Sp_Var
  %ln9AA = getelementptr inbounds i64, i64* %ln9Az, i32 0
  %ln9AB = bitcast i64* %ln9AA to i64*
  %ln9AC = load i64, i64* %ln9AB, !tbaa !2
  %ln9AD = inttoptr i64 %ln9AC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9AE = load i64*, i64** %Sp_Var
  %ln9AF = load i64*, i64** %Hp_Var
  %ln9AG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9AD( i64* %Base_Arg, i64* %ln9AE, i64* %ln9AF, i64 %ln9AG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Wm:
  %ln9AH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9AH, !tbaa !5
  %ln9AI = load i64, i64* %R1_Var
  store i64 %ln9AI, i64* %R1_Var
  %ln9AJ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9AK = load i64*, i64** %Sp_Var
  %ln9AL = load i64*, i64** %Hp_Var
  %ln9AM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9AJ( i64* %Base_Arg, i64* %ln9AK, i64* %ln9AL, i64 %ln9AM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc double @tan(double) align 8
@s7wR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wR_info$def to i8*)
define internal ghccc void @s7wR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9AN:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Wv
c8Wv:
  %ln9AO = load i64*, i64** %Sp_Var
  %ln9AP = getelementptr inbounds i64, i64* %ln9AO, i32 -2
  %ln9AQ = ptrtoint i64* %ln9AP to i64
  %ln9AR = icmp ult i64 %ln9AQ, %SpLim_Arg
  %ln9AS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9AR, i1 0 )
  br i1 %ln9AS, label %c8Ww, label %c8Wx
c8Wx:
  %ln9AU = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9AT = load i64*, i64** %Sp_Var
  %ln9AV = getelementptr inbounds i64, i64* %ln9AT, i32 -2
  store i64 %ln9AU, i64* %ln9AV, !tbaa !2
  %ln9AX = load i64, i64* %R1_Var
  %ln9AW = load i64*, i64** %Sp_Var
  %ln9AY = getelementptr inbounds i64, i64* %ln9AW, i32 -1
  store i64 %ln9AX, i64* %ln9AY, !tbaa !2
  %ln9B1 = load i64, i64* %R1_Var
  %ln9B2 = add i64 %ln9B1, 24
  %ln9B3 = inttoptr i64 %ln9B2 to i64*
  %ln9B4 = load i64, i64* %ln9B3, !tbaa !4
  store i64 %ln9B4, i64* %R3_Var
  %ln9B7 = load i64, i64* %R1_Var
  %ln9B8 = add i64 %ln9B7, 16
  %ln9B9 = inttoptr i64 %ln9B8 to i64*
  %ln9Ba = load i64, i64* %ln9B9, !tbaa !4
  store i64 %ln9Ba, i64* %R2_Var
  %ln9Bb = load i64*, i64** %Sp_Var
  %ln9Bc = getelementptr inbounds i64, i64* %ln9Bb, i32 -2
  %ln9Bd = ptrtoint i64* %ln9Bc to i64
  %ln9Be = inttoptr i64 %ln9Bd to i64*
  store i64* %ln9Be, i64** %Sp_Var
  %ln9Bf = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bg = load i64*, i64** %Sp_Var
  %ln9Bh = load i64, i64* %R1_Var
  %ln9Bi = load i64, i64* %R2_Var
  %ln9Bj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Bf( i64* %Base_Arg, i64* %ln9Bg, i64* %Hp_Arg, i64 %ln9Bh, i64 %ln9Bi, i64 %ln9Bj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ww:
  %ln9Bk = load i64, i64* %R1_Var
  store i64 %ln9Bk, i64* %R1_Var
  %ln9Bl = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Bm = bitcast i64* %ln9Bl to i64*
  %ln9Bn = load i64, i64* %ln9Bm, !tbaa !5
  %ln9Bo = inttoptr i64 %ln9Bn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bp = load i64*, i64** %Sp_Var
  %ln9Bq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Bo( i64* %Base_Arg, i64* %ln9Bp, i64* %Hp_Arg, i64 %ln9Bq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wQ_info$def to i8*)
define internal ghccc void @s7wQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9Br:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8WC
c8WC:
  %ln9Bs = load i64*, i64** %Sp_Var
  %ln9Bt = getelementptr inbounds i64, i64* %ln9Bs, i32 -2
  %ln9Bu = ptrtoint i64* %ln9Bt to i64
  %ln9Bv = icmp ult i64 %ln9Bu, %SpLim_Arg
  %ln9Bw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Bv, i1 0 )
  br i1 %ln9Bw, label %c8WD, label %c8WE
c8WE:
  %ln9By = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9Bx = load i64*, i64** %Sp_Var
  %ln9Bz = getelementptr inbounds i64, i64* %ln9Bx, i32 -2
  store i64 %ln9By, i64* %ln9Bz, !tbaa !2
  %ln9BB = load i64, i64* %R1_Var
  %ln9BA = load i64*, i64** %Sp_Var
  %ln9BC = getelementptr inbounds i64, i64* %ln9BA, i32 -1
  store i64 %ln9BB, i64* %ln9BC, !tbaa !2
  %ln9BF = load i64, i64* %R1_Var
  %ln9BG = add i64 %ln9BF, 24
  %ln9BH = inttoptr i64 %ln9BG to i64*
  %ln9BI = load i64, i64* %ln9BH, !tbaa !4
  store i64 %ln9BI, i64* %R3_Var
  %ln9BL = load i64, i64* %R1_Var
  %ln9BM = add i64 %ln9BL, 16
  %ln9BN = inttoptr i64 %ln9BM to i64*
  %ln9BO = load i64, i64* %ln9BN, !tbaa !4
  store i64 %ln9BO, i64* %R2_Var
  %ln9BP = load i64*, i64** %Sp_Var
  %ln9BQ = getelementptr inbounds i64, i64* %ln9BP, i32 -2
  %ln9BR = ptrtoint i64* %ln9BQ to i64
  %ln9BS = inttoptr i64 %ln9BR to i64*
  store i64* %ln9BS, i64** %Sp_Var
  %ln9BT = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BU = load i64*, i64** %Sp_Var
  %ln9BV = load i64, i64* %R1_Var
  %ln9BW = load i64, i64* %R2_Var
  %ln9BX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BT( i64* %Base_Arg, i64* %ln9BU, i64* %Hp_Arg, i64 %ln9BV, i64 %ln9BW, i64 %ln9BX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8WD:
  %ln9BY = load i64, i64* %R1_Var
  store i64 %ln9BY, i64* %R1_Var
  %ln9BZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9C0 = bitcast i64* %ln9BZ to i64*
  %ln9C1 = load i64, i64* %ln9C0, !tbaa !5
  %ln9C2 = inttoptr i64 %ln9C1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9C3 = load i64*, i64** %Sp_Var
  %ln9C4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9C2( i64* %Base_Arg, i64* %ln9C3, i64* %Hp_Arg, i64 %ln9C4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wP_info$def to i8*)
define internal ghccc void @s7wP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
n9C5:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8WJ
c8WJ:
  %ln9C6 = load i64*, i64** %Sp_Var
  %ln9C7 = getelementptr inbounds i64, i64* %ln9C6, i32 -2
  %ln9C8 = ptrtoint i64* %ln9C7 to i64
  %ln9C9 = icmp ult i64 %ln9C8, %SpLim_Arg
  %ln9Ca = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9C9, i1 0 )
  br i1 %ln9Ca, label %c8WK, label %c8WL
c8WL:
  %ln9Cc = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9Cb = load i64*, i64** %Sp_Var
  %ln9Cd = getelementptr inbounds i64, i64* %ln9Cb, i32 -2
  store i64 %ln9Cc, i64* %ln9Cd, !tbaa !2
  %ln9Cf = load i64, i64* %R1_Var
  %ln9Ce = load i64*, i64** %Sp_Var
  %ln9Cg = getelementptr inbounds i64, i64* %ln9Ce, i32 -1
  store i64 %ln9Cf, i64* %ln9Cg, !tbaa !2
  %ln9Cj = load i64, i64* %R1_Var
  %ln9Ck = add i64 %ln9Cj, 24
  %ln9Cl = inttoptr i64 %ln9Ck to i64*
  %ln9Cm = load i64, i64* %ln9Cl, !tbaa !4
  store i64 %ln9Cm, i64* %R3_Var
  %ln9Cp = load i64, i64* %R1_Var
  %ln9Cq = add i64 %ln9Cp, 16
  %ln9Cr = inttoptr i64 %ln9Cq to i64*
  %ln9Cs = load i64, i64* %ln9Cr, !tbaa !4
  store i64 %ln9Cs, i64* %R2_Var
  %ln9Ct = load i64*, i64** %Sp_Var
  %ln9Cu = getelementptr inbounds i64, i64* %ln9Ct, i32 -2
  %ln9Cv = ptrtoint i64* %ln9Cu to i64
  %ln9Cw = inttoptr i64 %ln9Cv to i64*
  store i64* %ln9Cw, i64** %Sp_Var
  %ln9Cx = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Cy = load i64*, i64** %Sp_Var
  %ln9Cz = load i64, i64* %R1_Var
  %ln9CA = load i64, i64* %R2_Var
  %ln9CB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Cx( i64* %Base_Arg, i64* %ln9Cy, i64* %Hp_Arg, i64 %ln9Cz, i64 %ln9CA, i64 %ln9CB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8WK:
  %ln9CC = load i64, i64* %R1_Var
  store i64 %ln9CC, i64* %R1_Var
  %ln9CD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9CE = bitcast i64* %ln9CD to i64*
  %ln9CF = load i64, i64* %ln9CE, !tbaa !5
  %ln9CG = inttoptr i64 %ln9CF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9CH = load i64*, i64** %Sp_Var
  %ln9CI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9CG( i64* %Base_Arg, i64* %ln9CH, i64* %Hp_Arg, i64 %ln9CI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wt_info$def to i8*)
define internal ghccc void @s7wt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9CJ:
  %ls7v6 = alloca i64, i32 1
  %ls7v5 = alloca i64, i32 1
  %ls7vj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8WM
c8WM:
  %ln9CK = load i64*, i64** %Sp_Var
  %ln9CL = getelementptr inbounds i64, i64* %ln9CK, i32 -6
  %ln9CM = ptrtoint i64* %ln9CL to i64
  %ln9CN = icmp ult i64 %ln9CM, %SpLim_Arg
  %ln9CO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9CN, i1 0 )
  br i1 %ln9CO, label %c8WO, label %c8WP
c8WP:
  %ln9CQ = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9CP = load i64*, i64** %Sp_Var
  %ln9CR = getelementptr inbounds i64, i64* %ln9CP, i32 -2
  store i64 %ln9CQ, i64* %ln9CR, !tbaa !2
  %ln9CT = load i64, i64* %R1_Var
  %ln9CS = load i64*, i64** %Sp_Var
  %ln9CU = getelementptr inbounds i64, i64* %ln9CS, i32 -1
  store i64 %ln9CT, i64* %ln9CU, !tbaa !2
  %ln9CW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vo_info$def to i64
  %ln9CV = load i64*, i64** %Sp_Var
  %ln9CX = getelementptr inbounds i64, i64* %ln9CV, i32 -6
  store i64 %ln9CW, i64* %ln9CX, !tbaa !2
  %ln9D0 = load i64, i64* %R1_Var
  %ln9D1 = add i64 %ln9D0, 16
  %ln9D2 = inttoptr i64 %ln9D1 to i64*
  %ln9D3 = load i64, i64* %ln9D2, !tbaa !4
  store i64 %ln9D3, i64* %ls7v6
  %ln9D6 = load i64, i64* %R1_Var
  %ln9D7 = add i64 %ln9D6, 24
  %ln9D8 = inttoptr i64 %ln9D7 to i64*
  %ln9D9 = load i64, i64* %ln9D8, !tbaa !4
  store i64 %ln9D9, i64* %ls7v5
  %ln9Dc = load i64, i64* %R1_Var
  %ln9Dd = add i64 %ln9Dc, 32
  %ln9De = inttoptr i64 %ln9Dd to i64*
  %ln9Df = load i64, i64* %ln9De, !tbaa !4
  store i64 %ln9Df, i64* %ls7vj
  %ln9Di = load i64, i64* %R1_Var
  %ln9Dj = add i64 %ln9Di, 40
  %ln9Dk = inttoptr i64 %ln9Dj to i64*
  %ln9Dl = load i64, i64* %ln9Dk, !tbaa !4
  store i64 %ln9Dl, i64* %R1_Var
  %ln9Dn = load i64, i64* %ls7v5
  %ln9Dm = load i64*, i64** %Sp_Var
  %ln9Do = getelementptr inbounds i64, i64* %ln9Dm, i32 -5
  store i64 %ln9Dn, i64* %ln9Do, !tbaa !2
  %ln9Dq = load i64, i64* %ls7v6
  %ln9Dp = load i64*, i64** %Sp_Var
  %ln9Dr = getelementptr inbounds i64, i64* %ln9Dp, i32 -4
  store i64 %ln9Dq, i64* %ln9Dr, !tbaa !2
  %ln9Dt = load i64, i64* %ls7vj
  %ln9Ds = load i64*, i64** %Sp_Var
  %ln9Du = getelementptr inbounds i64, i64* %ln9Ds, i32 -3
  store i64 %ln9Dt, i64* %ln9Du, !tbaa !2
  %ln9Dv = load i64*, i64** %Sp_Var
  %ln9Dw = getelementptr inbounds i64, i64* %ln9Dv, i32 -6
  %ln9Dx = ptrtoint i64* %ln9Dw to i64
  %ln9Dy = inttoptr i64 %ln9Dx to i64*
  store i64* %ln9Dy, i64** %Sp_Var
  %ln9Dz = load i64, i64* %R1_Var
  %ln9DA = and i64 %ln9Dz, 7
  %ln9DB = icmp ne i64 %ln9DA, 0
  br i1 %ln9DB, label %u8WT, label %c8Vp
c8Vp:
  %ln9DD = load i64, i64* %R1_Var
  %ln9DE = inttoptr i64 %ln9DD to i64*
  %ln9DF = load i64, i64* %ln9DE, !tbaa !4
  %ln9DG = inttoptr i64 %ln9DF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9DH = load i64*, i64** %Sp_Var
  %ln9DI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9DG( i64* %Base_Arg, i64* %ln9DH, i64* %Hp_Arg, i64 %ln9DI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8WT:
  %ln9DJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9DK = load i64*, i64** %Sp_Var
  %ln9DL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9DJ( i64* %Base_Arg, i64* %ln9DK, i64* %Hp_Arg, i64 %ln9DL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8WO:
  %ln9DM = load i64, i64* %R1_Var
  store i64 %ln9DM, i64* %R1_Var
  %ln9DN = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9DO = bitcast i64* %ln9DN to i64*
  %ln9DP = load i64, i64* %ln9DO, !tbaa !5
  %ln9DQ = inttoptr i64 %ln9DP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9DR = load i64*, i64** %Sp_Var
  %ln9DS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9DQ( i64* %Base_Arg, i64* %ln9DR, i64* %Hp_Arg, i64 %ln9DS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Vo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Vo_info$def to i8*)
define internal ghccc void @c8Vo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9DT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7wv = alloca i64, i32 1
  %ls7ww = alloca i64, i32 1
  %ls7wx = alloca i64, i32 1
  %lc8Vt = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Vo
c8Vo:
  %ln9DU = load i64*, i64** %Hp_Var
  %ln9DV = getelementptr inbounds i64, i64* %ln9DU, i32 21
  %ln9DW = ptrtoint i64* %ln9DV to i64
  %ln9DX = inttoptr i64 %ln9DW to i64*
  store i64* %ln9DX, i64** %Hp_Var
  %ln9DY = load i64*, i64** %Hp_Var
  %ln9DZ = ptrtoint i64* %ln9DY to i64
  %ln9E0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9E1 = bitcast i64* %ln9E0 to i64*
  %ln9E2 = load i64, i64* %ln9E1, !tbaa !5
  %ln9E3 = icmp ugt i64 %ln9DZ, %ln9E2
  %ln9E4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9E3, i1 0 )
  br i1 %ln9E4, label %c8WS, label %c8WR
c8WR:
  %ln9E7 = load i64, i64* %R1_Var
  %ln9E8 = add i64 %ln9E7, 7
  %ln9E9 = inttoptr i64 %ln9E8 to i64*
  %ln9Ea = load i64, i64* %ln9E9, !tbaa !4
  store i64 %ln9Ea, i64* %ls7wv
  %ln9Ed = load i64, i64* %R1_Var
  %ln9Ee = add i64 %ln9Ed, 15
  %ln9Ef = inttoptr i64 %ln9Ee to i64*
  %ln9Eg = load i64, i64* %ln9Ef, !tbaa !4
  store i64 %ln9Eg, i64* %ls7ww
  %ln9Ej = load i64, i64* %R1_Var
  %ln9Ek = add i64 %ln9Ej, 23
  %ln9El = inttoptr i64 %ln9Ek to i64*
  %ln9Em = load i64, i64* %ln9El, !tbaa !4
  store i64 %ln9Em, i64* %ls7wx
  %ln9Eo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wy_info$def to i64
  %ln9En = load i64*, i64** %Hp_Var
  %ln9Ep = getelementptr inbounds i64, i64* %ln9En, i32 -20
  store i64 %ln9Eo, i64* %ln9Ep, !tbaa !3
  %ln9Er = load i64*, i64** %Sp_Var
  %ln9Es = getelementptr inbounds i64, i64* %ln9Er, i32 2
  %ln9Et = bitcast i64* %ln9Es to i64*
  %ln9Eu = load i64, i64* %ln9Et, !tbaa !2
  %ln9Eq = load i64*, i64** %Hp_Var
  %ln9Ev = getelementptr inbounds i64, i64* %ln9Eq, i32 -18
  store i64 %ln9Eu, i64* %ln9Ev, !tbaa !3
  %ln9Ex = load i64*, i64** %Sp_Var
  %ln9Ey = getelementptr inbounds i64, i64* %ln9Ex, i32 1
  %ln9Ez = bitcast i64* %ln9Ey to i64*
  %ln9EA = load i64, i64* %ln9Ez, !tbaa !2
  %ln9Ew = load i64*, i64** %Hp_Var
  %ln9EB = getelementptr inbounds i64, i64* %ln9Ew, i32 -17
  store i64 %ln9EA, i64* %ln9EB, !tbaa !3
  %ln9ED = load i64*, i64** %Sp_Var
  %ln9EE = getelementptr inbounds i64, i64* %ln9ED, i32 3
  %ln9EF = bitcast i64* %ln9EE to i64*
  %ln9EG = load i64, i64* %ln9EF, !tbaa !2
  %ln9EC = load i64*, i64** %Hp_Var
  %ln9EH = getelementptr inbounds i64, i64* %ln9EC, i32 -16
  store i64 %ln9EG, i64* %ln9EH, !tbaa !3
  %ln9EJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wR_info$def to i64
  %ln9EI = load i64*, i64** %Hp_Var
  %ln9EK = getelementptr inbounds i64, i64* %ln9EI, i32 -15
  store i64 %ln9EJ, i64* %ln9EK, !tbaa !3
  %ln9EL = load i64*, i64** %Hp_Var
  %ln9EM = getelementptr inbounds i64, i64* %ln9EL, i32 -20
  %ln9EN = ptrtoint i64* %ln9EM to i64
  store i64 %ln9EN, i64* %lc8Vt
  %ln9EP = load i64, i64* %lc8Vt
  %ln9EO = load i64*, i64** %Hp_Var
  %ln9EQ = getelementptr inbounds i64, i64* %ln9EO, i32 -13
  store i64 %ln9EP, i64* %ln9EQ, !tbaa !3
  %ln9ES = load i64, i64* %ls7wx
  %ln9ER = load i64*, i64** %Hp_Var
  %ln9ET = getelementptr inbounds i64, i64* %ln9ER, i32 -12
  store i64 %ln9ES, i64* %ln9ET, !tbaa !3
  %ln9EV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wQ_info$def to i64
  %ln9EU = load i64*, i64** %Hp_Var
  %ln9EW = getelementptr inbounds i64, i64* %ln9EU, i32 -11
  store i64 %ln9EV, i64* %ln9EW, !tbaa !3
  %ln9EY = load i64, i64* %lc8Vt
  %ln9EX = load i64*, i64** %Hp_Var
  %ln9EZ = getelementptr inbounds i64, i64* %ln9EX, i32 -9
  store i64 %ln9EY, i64* %ln9EZ, !tbaa !3
  %ln9F1 = load i64, i64* %ls7ww
  %ln9F0 = load i64*, i64** %Hp_Var
  %ln9F2 = getelementptr inbounds i64, i64* %ln9F0, i32 -8
  store i64 %ln9F1, i64* %ln9F2, !tbaa !3
  %ln9F4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wP_info$def to i64
  %ln9F3 = load i64*, i64** %Hp_Var
  %ln9F5 = getelementptr inbounds i64, i64* %ln9F3, i32 -7
  store i64 %ln9F4, i64* %ln9F5, !tbaa !3
  %ln9F7 = load i64, i64* %lc8Vt
  %ln9F6 = load i64*, i64** %Hp_Var
  %ln9F8 = getelementptr inbounds i64, i64* %ln9F6, i32 -5
  store i64 %ln9F7, i64* %ln9F8, !tbaa !3
  %ln9Fa = load i64, i64* %ls7wv
  %ln9F9 = load i64*, i64** %Hp_Var
  %ln9Fb = getelementptr inbounds i64, i64* %ln9F9, i32 -4
  store i64 %ln9Fa, i64* %ln9Fb, !tbaa !3
  %ln9Fd = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %ln9Fc = load i64*, i64** %Hp_Var
  %ln9Fe = getelementptr inbounds i64, i64* %ln9Fc, i32 -3
  store i64 %ln9Fd, i64* %ln9Fe, !tbaa !3
  %ln9Fg = load i64*, i64** %Hp_Var
  %ln9Fh = getelementptr inbounds i64, i64* %ln9Fg, i32 -7
  %ln9Fi = ptrtoint i64* %ln9Fh to i64
  %ln9Ff = load i64*, i64** %Hp_Var
  %ln9Fj = getelementptr inbounds i64, i64* %ln9Ff, i32 -2
  store i64 %ln9Fi, i64* %ln9Fj, !tbaa !3
  %ln9Fl = load i64*, i64** %Hp_Var
  %ln9Fm = getelementptr inbounds i64, i64* %ln9Fl, i32 -11
  %ln9Fn = ptrtoint i64* %ln9Fm to i64
  %ln9Fk = load i64*, i64** %Hp_Var
  %ln9Fo = getelementptr inbounds i64, i64* %ln9Fk, i32 -1
  store i64 %ln9Fn, i64* %ln9Fo, !tbaa !3
  %ln9Fq = load i64*, i64** %Hp_Var
  %ln9Fr = getelementptr inbounds i64, i64* %ln9Fq, i32 -15
  %ln9Fs = ptrtoint i64* %ln9Fr to i64
  %ln9Fp = load i64*, i64** %Hp_Var
  %ln9Ft = getelementptr inbounds i64, i64* %ln9Fp, i32 0
  store i64 %ln9Fs, i64* %ln9Ft, !tbaa !3
  %ln9Fv = load i64*, i64** %Hp_Var
  %ln9Fw = ptrtoint i64* %ln9Fv to i64
  %ln9Fx = add i64 %ln9Fw, -23
  store i64 %ln9Fx, i64* %R1_Var
  %ln9Fy = load i64*, i64** %Sp_Var
  %ln9Fz = getelementptr inbounds i64, i64* %ln9Fy, i32 4
  %ln9FA = ptrtoint i64* %ln9Fz to i64
  %ln9FB = inttoptr i64 %ln9FA to i64*
  store i64* %ln9FB, i64** %Sp_Var
  %ln9FC = load i64*, i64** %Sp_Var
  %ln9FD = getelementptr inbounds i64, i64* %ln9FC, i32 0
  %ln9FE = bitcast i64* %ln9FD to i64*
  %ln9FF = load i64, i64* %ln9FE, !tbaa !2
  %ln9FG = inttoptr i64 %ln9FF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FH = load i64*, i64** %Sp_Var
  %ln9FI = load i64*, i64** %Hp_Var
  %ln9FJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FG( i64* %Base_Arg, i64* %ln9FH, i64* %ln9FI, i64 %ln9FJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8WS:
  %ln9FK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 168, i64* %ln9FK, !tbaa !5
  %ln9FL = load i64, i64* %R1_Var
  store i64 %ln9FL, i64* %R1_Var
  %ln9FM = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FN = load i64*, i64** %Sp_Var
  %ln9FO = load i64*, i64** %Hp_Var
  %ln9FP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FM( i64* %Base_Arg, i64* %ln9FN, i64* %ln9FO, i64 %ln9FP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7x4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7x4_info$def to i8*)
define internal ghccc void @s7x4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9FQ:
  %ls7v6 = alloca i64, i32 1
  %ls7v5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Xk
c8Xk:
  %ln9FR = load i64*, i64** %Sp_Var
  %ln9FS = getelementptr inbounds i64, i64* %ln9FR, i32 -5
  %ln9FT = ptrtoint i64* %ln9FS to i64
  %ln9FU = icmp ult i64 %ln9FT, %SpLim_Arg
  %ln9FV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9FU, i1 0 )
  br i1 %ln9FV, label %c8XU, label %c8XV
c8XV:
  %ln9FX = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9FW = load i64*, i64** %Sp_Var
  %ln9FY = getelementptr inbounds i64, i64* %ln9FW, i32 -2
  store i64 %ln9FX, i64* %ln9FY, !tbaa !2
  %ln9G0 = load i64, i64* %R1_Var
  %ln9FZ = load i64*, i64** %Sp_Var
  %ln9G1 = getelementptr inbounds i64, i64* %ln9FZ, i32 -1
  store i64 %ln9G0, i64* %ln9G1, !tbaa !2
  %ln9G3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xh_info$def to i64
  %ln9G2 = load i64*, i64** %Sp_Var
  %ln9G4 = getelementptr inbounds i64, i64* %ln9G2, i32 -5
  store i64 %ln9G3, i64* %ln9G4, !tbaa !2
  %ln9G7 = load i64, i64* %R1_Var
  %ln9G8 = add i64 %ln9G7, 16
  %ln9G9 = inttoptr i64 %ln9G8 to i64*
  %ln9Ga = load i64, i64* %ln9G9, !tbaa !4
  store i64 %ln9Ga, i64* %ls7v6
  %ln9Gd = load i64, i64* %R1_Var
  %ln9Ge = add i64 %ln9Gd, 24
  %ln9Gf = inttoptr i64 %ln9Ge to i64*
  %ln9Gg = load i64, i64* %ln9Gf, !tbaa !4
  store i64 %ln9Gg, i64* %ls7v5
  %ln9Gj = load i64, i64* %R1_Var
  %ln9Gk = add i64 %ln9Gj, 32
  %ln9Gl = inttoptr i64 %ln9Gk to i64*
  %ln9Gm = load i64, i64* %ln9Gl, !tbaa !4
  store i64 %ln9Gm, i64* %R1_Var
  %ln9Go = load i64, i64* %ls7v5
  %ln9Gn = load i64*, i64** %Sp_Var
  %ln9Gp = getelementptr inbounds i64, i64* %ln9Gn, i32 -4
  store i64 %ln9Go, i64* %ln9Gp, !tbaa !2
  %ln9Gr = load i64, i64* %ls7v6
  %ln9Gq = load i64*, i64** %Sp_Var
  %ln9Gs = getelementptr inbounds i64, i64* %ln9Gq, i32 -3
  store i64 %ln9Gr, i64* %ln9Gs, !tbaa !2
  %ln9Gt = load i64*, i64** %Sp_Var
  %ln9Gu = getelementptr inbounds i64, i64* %ln9Gt, i32 -5
  %ln9Gv = ptrtoint i64* %ln9Gu to i64
  %ln9Gw = inttoptr i64 %ln9Gv to i64*
  store i64* %ln9Gw, i64** %Sp_Var
  %ln9Gx = load i64, i64* %R1_Var
  %ln9Gy = and i64 %ln9Gx, 7
  %ln9Gz = icmp ne i64 %ln9Gy, 0
  br i1 %ln9Gz, label %u8Y2, label %c8Xi
c8Xi:
  %ln9GB = load i64, i64* %R1_Var
  %ln9GC = inttoptr i64 %ln9GB to i64*
  %ln9GD = load i64, i64* %ln9GC, !tbaa !4
  %ln9GE = inttoptr i64 %ln9GD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GF = load i64*, i64** %Sp_Var
  %ln9GG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GE( i64* %Base_Arg, i64* %ln9GF, i64* %Hp_Arg, i64 %ln9GG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Y2:
  %ln9GH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GI = load i64*, i64** %Sp_Var
  %ln9GJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GH( i64* %Base_Arg, i64* %ln9GI, i64* %Hp_Arg, i64 %ln9GJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8XU:
  %ln9GK = load i64, i64* %R1_Var
  store i64 %ln9GK, i64* %R1_Var
  %ln9GL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9GM = bitcast i64* %ln9GL to i64*
  %ln9GN = load i64, i64* %ln9GM, !tbaa !5
  %ln9GO = inttoptr i64 %ln9GN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GP = load i64*, i64** %Sp_Var
  %ln9GQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GO( i64* %Base_Arg, i64* %ln9GP, i64* %Hp_Arg, i64 %ln9GQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Xh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xh_info$def to i8*)
define internal ghccc void @c8Xh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9GR:
  %ls7x6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Xh
c8Xh:
  %ln9GS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xn_info$def to i64
  %ln9GT = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9GS, i64* %ln9GT, !tbaa !2
  %ln9GW = load i64, i64* %R1_Var
  %ln9GX = add i64 %ln9GW, 7
  %ln9GY = inttoptr i64 %ln9GX to double*
  %ln9GZ = load double, double* %ln9GY, !tbaa !4
  store double %ln9GZ, double* %ls7x6
  %ln9H0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9H1 = bitcast i64* %ln9H0 to i64*
  %ln9H2 = load i64, i64* %ln9H1, !tbaa !2
  store i64 %ln9H2, i64* %R1_Var
  %ln9H3 = load double, double* %ls7x6
  %ln9H4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9H5 = bitcast i64* %ln9H4 to double*
  store double %ln9H3, double* %ln9H5, !tbaa !2
  %ln9H6 = load i64, i64* %R1_Var
  %ln9H7 = and i64 %ln9H6, 7
  %ln9H8 = icmp ne i64 %ln9H7, 0
  br i1 %ln9H8, label %u8Y1, label %c8Xo
c8Xo:
  %ln9Ha = load i64, i64* %R1_Var
  %ln9Hb = inttoptr i64 %ln9Ha to i64*
  %ln9Hc = load i64, i64* %ln9Hb, !tbaa !4
  %ln9Hd = inttoptr i64 %ln9Hc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9He = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9He, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Y1:
  %ln9Hf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Hg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Hg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Xn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xn_info$def to i8*)
define internal ghccc void @c8Xn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n9Hh:
  %ls7x8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Xn
c8Xn:
  %ln9Hi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xs_info$def to i64
  %ln9Hj = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Hi, i64* %ln9Hj, !tbaa !2
  %ln9Hm = load i64, i64* %R1_Var
  %ln9Hn = add i64 %ln9Hm, 7
  %ln9Ho = inttoptr i64 %ln9Hn to double*
  %ln9Hp = load double, double* %ln9Ho, !tbaa !4
  store double %ln9Hp, double* %ls7x8
  %ln9Hq = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Hr = bitcast i64* %ln9Hq to i64*
  %ln9Hs = load i64, i64* %ln9Hr, !tbaa !2
  store i64 %ln9Hs, i64* %R1_Var
  %ln9Ht = load double, double* %ls7x8
  %ln9Hu = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Hv = bitcast i64* %ln9Hu to double*
  store double %ln9Ht, double* %ln9Hv, !tbaa !2
  %ln9Hw = load i64, i64* %R1_Var
  %ln9Hx = and i64 %ln9Hw, 7
  %ln9Hy = icmp ne i64 %ln9Hx, 0
  br i1 %ln9Hy, label %u8Y3, label %c8Xt
c8Xt:
  %ln9HA = load i64, i64* %R1_Var
  %ln9HB = inttoptr i64 %ln9HA to i64*
  %ln9HC = load i64, i64* %ln9HB, !tbaa !4
  %ln9HD = inttoptr i64 %ln9HC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9HE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9HD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9HE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Y3:
  %ln9HF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9HG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9HF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9HG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Xs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Xs_info$def to i8*)
define internal ghccc void @c8Xs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n9HH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7x6 = alloca double, i32 1
  %ls7xa = alloca double, i32 1
  %lc8XG = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Xs
c8Xs:
  %ln9HI = load i64*, i64** %Hp_Var
  %ln9HJ = getelementptr inbounds i64, i64* %ln9HI, i32 2
  %ln9HK = ptrtoint i64* %ln9HJ to i64
  %ln9HL = inttoptr i64 %ln9HK to i64*
  store i64* %ln9HL, i64** %Hp_Var
  %ln9HM = load i64*, i64** %Hp_Var
  %ln9HN = ptrtoint i64* %ln9HM to i64
  %ln9HO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9HP = bitcast i64* %ln9HO to i64*
  %ln9HQ = load i64, i64* %ln9HP, !tbaa !5
  %ln9HR = icmp ugt i64 %ln9HN, %ln9HQ
  %ln9HS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9HR, i1 0 )
  br i1 %ln9HS, label %c8Y0, label %c8XZ
c8XZ:
  %ln9HT = load i64*, i64** %Sp_Var
  %ln9HU = getelementptr inbounds i64, i64* %ln9HT, i32 1
  %ln9HV = bitcast i64* %ln9HU to double*
  %ln9HW = load double, double* %ln9HV, !tbaa !2
  store double %ln9HW, double* %ls7x6
  %ln9HZ = load i64, i64* %R1_Var
  %ln9I0 = add i64 %ln9HZ, 7
  %ln9I1 = inttoptr i64 %ln9I0 to double*
  %ln9I2 = load double, double* %ln9I1, !tbaa !4
  store double %ln9I2, double* %ls7xa
  %ln9I3 = load i64*, i64** %Sp_Var
  %ln9I4 = getelementptr inbounds i64, i64* %ln9I3, i32 2
  %ln9I5 = bitcast i64* %ln9I4 to double*
  %ln9I6 = load double, double* %ln9I5, !tbaa !2
  %ln9I7 = fdiv double %ln9I6, 0x4000000000000000
  %ln9I8 = fmul double %ln9I7, 0x400921FB54442D18
  %ln9I9 = fdiv double %ln9I8, 0x4066800000000000
  %ln9Ia = call ccc double (double) @tan( double %ln9I9 ) nounwind
  store double %ln9Ia, double* %lc8XG
  %ln9Ic = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9Ib = load i64*, i64** %Hp_Var
  %ln9Id = getelementptr inbounds i64, i64* %ln9Ib, i32 -1
  store i64 %ln9Ic, i64* %ln9Id, !tbaa !3
  %ln9If = load double, double* %ls7x6
  %ln9Ig = load double, double* %ls7x6
  %ln9Ih = fadd double %ln9If, %ln9Ig
  %ln9Ii = load double, double* %lc8XG
  %ln9Ij = fmul double %ln9Ih, %ln9Ii
  %ln9Ik = load double, double* %ls7xa
  %ln9Il = fdiv double %ln9Ij, %ln9Ik
  %ln9Ie = load i64*, i64** %Hp_Var
  %ln9Im = getelementptr inbounds i64, i64* %ln9Ie, i32 0
  %ln9In = bitcast i64* %ln9Im to double*
  store double %ln9Il, double* %ln9In, !tbaa !3
  %ln9Ip = load i64*, i64** %Hp_Var
  %ln9Iq = ptrtoint i64* %ln9Ip to i64
  %ln9Ir = add i64 %ln9Iq, -7
  store i64 %ln9Ir, i64* %R1_Var
  %ln9Is = load i64*, i64** %Sp_Var
  %ln9It = getelementptr inbounds i64, i64* %ln9Is, i32 3
  %ln9Iu = ptrtoint i64* %ln9It to i64
  %ln9Iv = inttoptr i64 %ln9Iu to i64*
  store i64* %ln9Iv, i64** %Sp_Var
  %ln9Iw = load i64*, i64** %Sp_Var
  %ln9Ix = getelementptr inbounds i64, i64* %ln9Iw, i32 0
  %ln9Iy = bitcast i64* %ln9Ix to i64*
  %ln9Iz = load i64, i64* %ln9Iy, !tbaa !2
  %ln9IA = inttoptr i64 %ln9Iz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9IB = load i64*, i64** %Sp_Var
  %ln9IC = load i64*, i64** %Hp_Var
  %ln9ID = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9IA( i64* %Base_Arg, i64* %ln9IB, i64* %ln9IC, i64 %ln9ID, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Y0:
  %ln9IE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9IE, !tbaa !5
  %ln9IF = load i64, i64* %R1_Var
  store i64 %ln9IF, i64* %R1_Var
  %ln9IG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9IH = load i64*, i64** %Sp_Var
  %ln9II = load i64*, i64** %Hp_Var
  %ln9IJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9IG( i64* %Base_Arg, i64* %ln9IH, i64* %ln9II, i64 %ln9IJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7xi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xi_info$def to i8*)
define internal ghccc void @s7xi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9IK:
  %ls7wV = alloca i64, i32 1
  %ls7x1 = alloca i64, i32 1
  %ls7x2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Yb
c8Yb:
  %ln9IL = load i64*, i64** %Sp_Var
  %ln9IM = getelementptr inbounds i64, i64* %ln9IL, i32 -6
  %ln9IN = ptrtoint i64* %ln9IM to i64
  %ln9IO = icmp ult i64 %ln9IN, %SpLim_Arg
  %ln9IP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9IO, i1 0 )
  br i1 %ln9IP, label %c8YD, label %c8YE
c8YE:
  %ln9IR = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9IQ = load i64*, i64** %Sp_Var
  %ln9IS = getelementptr inbounds i64, i64* %ln9IQ, i32 -2
  store i64 %ln9IR, i64* %ln9IS, !tbaa !2
  %ln9IU = load i64, i64* %R1_Var
  %ln9IT = load i64*, i64** %Sp_Var
  %ln9IV = getelementptr inbounds i64, i64* %ln9IT, i32 -1
  store i64 %ln9IU, i64* %ln9IV, !tbaa !2
  %ln9IX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Y8_info$def to i64
  %ln9IW = load i64*, i64** %Sp_Var
  %ln9IY = getelementptr inbounds i64, i64* %ln9IW, i32 -6
  store i64 %ln9IX, i64* %ln9IY, !tbaa !2
  %ln9J1 = load i64, i64* %R1_Var
  %ln9J2 = add i64 %ln9J1, 16
  %ln9J3 = inttoptr i64 %ln9J2 to i64*
  %ln9J4 = load i64, i64* %ln9J3, !tbaa !4
  store i64 %ln9J4, i64* %ls7wV
  %ln9J7 = load i64, i64* %R1_Var
  %ln9J8 = add i64 %ln9J7, 24
  %ln9J9 = inttoptr i64 %ln9J8 to i64*
  %ln9Ja = load i64, i64* %ln9J9, !tbaa !4
  store i64 %ln9Ja, i64* %ls7x1
  %ln9Jd = load i64, i64* %R1_Var
  %ln9Je = add i64 %ln9Jd, 32
  %ln9Jf = inttoptr i64 %ln9Je to i64*
  %ln9Jg = load i64, i64* %ln9Jf, !tbaa !4
  store i64 %ln9Jg, i64* %ls7x2
  %ln9Jj = load i64, i64* %R1_Var
  %ln9Jk = add i64 %ln9Jj, 40
  %ln9Jl = inttoptr i64 %ln9Jk to i64*
  %ln9Jm = load i64, i64* %ln9Jl, !tbaa !4
  store i64 %ln9Jm, i64* %R1_Var
  %ln9Jo = load i64, i64* %ls7wV
  %ln9Jn = load i64*, i64** %Sp_Var
  %ln9Jp = getelementptr inbounds i64, i64* %ln9Jn, i32 -5
  store i64 %ln9Jo, i64* %ln9Jp, !tbaa !2
  %ln9Jr = load i64, i64* %ls7x1
  %ln9Jq = load i64*, i64** %Sp_Var
  %ln9Js = getelementptr inbounds i64, i64* %ln9Jq, i32 -4
  store i64 %ln9Jr, i64* %ln9Js, !tbaa !2
  %ln9Ju = load i64, i64* %ls7x2
  %ln9Jt = load i64*, i64** %Sp_Var
  %ln9Jv = getelementptr inbounds i64, i64* %ln9Jt, i32 -3
  store i64 %ln9Ju, i64* %ln9Jv, !tbaa !2
  %ln9Jw = load i64*, i64** %Sp_Var
  %ln9Jx = getelementptr inbounds i64, i64* %ln9Jw, i32 -6
  %ln9Jy = ptrtoint i64* %ln9Jx to i64
  %ln9Jz = inttoptr i64 %ln9Jy to i64*
  store i64* %ln9Jz, i64** %Sp_Var
  %ln9JA = load i64, i64* %R1_Var
  %ln9JB = and i64 %ln9JA, 7
  %ln9JC = icmp ne i64 %ln9JB, 0
  br i1 %ln9JC, label %u8YM, label %c8Y9
c8Y9:
  %ln9JE = load i64, i64* %R1_Var
  %ln9JF = inttoptr i64 %ln9JE to i64*
  %ln9JG = load i64, i64* %ln9JF, !tbaa !4
  %ln9JH = inttoptr i64 %ln9JG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JI = load i64*, i64** %Sp_Var
  %ln9JJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JH( i64* %Base_Arg, i64* %ln9JI, i64* %Hp_Arg, i64 %ln9JJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8YM:
  %ln9JK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Y8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JL = load i64*, i64** %Sp_Var
  %ln9JM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JK( i64* %Base_Arg, i64* %ln9JL, i64* %Hp_Arg, i64 %ln9JM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8YD:
  %ln9JN = load i64, i64* %R1_Var
  store i64 %ln9JN, i64* %R1_Var
  %ln9JO = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9JP = bitcast i64* %ln9JO to i64*
  %ln9JQ = load i64, i64* %ln9JP, !tbaa !5
  %ln9JR = inttoptr i64 %ln9JQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JS = load i64*, i64** %Sp_Var
  %ln9JT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JR( i64* %Base_Arg, i64* %ln9JS, i64* %Hp_Arg, i64 %ln9JT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Y8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Y8_info$def to i8*)
define internal ghccc void @c8Y8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9JU:
  %ls7xk = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Y8
c8Y8:
  %ln9JV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ye_info$def to i64
  %ln9JW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9JV, i64* %ln9JW, !tbaa !2
  %ln9JZ = load i64, i64* %R1_Var
  %ln9K0 = add i64 %ln9JZ, 7
  %ln9K1 = inttoptr i64 %ln9K0 to double*
  %ln9K2 = load double, double* %ln9K1, !tbaa !4
  store double %ln9K2, double* %ls7xk
  %ln9K3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9K4 = bitcast i64* %ln9K3 to i64*
  %ln9K5 = load i64, i64* %ln9K4, !tbaa !2
  store i64 %ln9K5, i64* %R1_Var
  %ln9K6 = load double, double* %ls7xk
  %ln9K7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9K8 = bitcast i64* %ln9K7 to double*
  store double %ln9K6, double* %ln9K8, !tbaa !2
  %ln9K9 = load i64, i64* %R1_Var
  %ln9Ka = and i64 %ln9K9, 7
  %ln9Kb = icmp ne i64 %ln9Ka, 0
  br i1 %ln9Kb, label %u8YL, label %c8Yf
c8Yf:
  %ln9Kd = load i64, i64* %R1_Var
  %ln9Ke = inttoptr i64 %ln9Kd to i64*
  %ln9Kf = load i64, i64* %ln9Ke, !tbaa !4
  %ln9Kg = inttoptr i64 %ln9Kf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Kg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Kh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8YL:
  %ln9Ki = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ye_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ki( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Kj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Ye_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Ye_info$def to i8*)
define internal ghccc void @c8Ye_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
n9Kk:
  %ls7xm = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Ye
c8Ye:
  %ln9Kl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yj_info$def to i64
  %ln9Km = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Kl, i64* %ln9Km, !tbaa !2
  %ln9Kp = load i64, i64* %R1_Var
  %ln9Kq = add i64 %ln9Kp, 7
  %ln9Kr = inttoptr i64 %ln9Kq to double*
  %ln9Ks = load double, double* %ln9Kr, !tbaa !4
  store double %ln9Ks, double* %ls7xm
  %ln9Kt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Ku = bitcast i64* %ln9Kt to i64*
  %ln9Kv = load i64, i64* %ln9Ku, !tbaa !2
  store i64 %ln9Kv, i64* %R1_Var
  %ln9Kw = load double, double* %ls7xm
  %ln9Kx = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Ky = bitcast i64* %ln9Kx to double*
  store double %ln9Kw, double* %ln9Ky, !tbaa !2
  %ln9Kz = load i64, i64* %R1_Var
  %ln9KA = and i64 %ln9Kz, 7
  %ln9KB = icmp ne i64 %ln9KA, 0
  br i1 %ln9KB, label %u8YN, label %c8Yk
c8Yk:
  %ln9KD = load i64, i64* %R1_Var
  %ln9KE = inttoptr i64 %ln9KD to i64*
  %ln9KF = load i64, i64* %ln9KE, !tbaa !4
  %ln9KG = inttoptr i64 %ln9KF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9KH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9KG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9KH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8YN:
  %ln9KI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9KJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9KI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9KJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Yj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yj_info$def to i8*)
define internal ghccc void @c8Yj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9KK:
  %ls7xo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Yj
c8Yj:
  %ln9KL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yo_info$def to i64
  %ln9KM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9KL, i64* %ln9KM, !tbaa !2
  %ln9KP = load i64, i64* %R1_Var
  %ln9KQ = add i64 %ln9KP, 7
  %ln9KR = inttoptr i64 %ln9KQ to double*
  %ln9KS = load double, double* %ln9KR, !tbaa !4
  store double %ln9KS, double* %ls7xo
  %ln9KT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9KU = bitcast i64* %ln9KT to i64*
  %ln9KV = load i64, i64* %ln9KU, !tbaa !2
  store i64 %ln9KV, i64* %R1_Var
  %ln9KW = load double, double* %ls7xo
  %ln9KX = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9KY = bitcast i64* %ln9KX to double*
  store double %ln9KW, double* %ln9KY, !tbaa !2
  %ln9KZ = load i64, i64* %R1_Var
  %ln9L0 = and i64 %ln9KZ, 7
  %ln9L1 = icmp ne i64 %ln9L0, 0
  br i1 %ln9L1, label %u8YO, label %c8Yp
c8Yp:
  %ln9L3 = load i64, i64* %R1_Var
  %ln9L4 = inttoptr i64 %ln9L3 to i64*
  %ln9L5 = load i64, i64* %ln9L4, !tbaa !4
  %ln9L6 = inttoptr i64 %ln9L5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9L7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9L6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9L7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8YO:
  %ln9L8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9L9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9L8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9L9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Yo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yo_info$def to i8*)
define internal ghccc void @c8Yo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9La:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7xt = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Yo
c8Yo:
  %ln9Lb = load i64*, i64** %Hp_Var
  %ln9Lc = getelementptr inbounds i64, i64* %ln9Lb, i32 2
  %ln9Ld = ptrtoint i64* %ln9Lc to i64
  %ln9Le = inttoptr i64 %ln9Ld to i64*
  store i64* %ln9Le, i64** %Hp_Var
  %ln9Lf = load i64*, i64** %Hp_Var
  %ln9Lg = ptrtoint i64* %ln9Lf to i64
  %ln9Lh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Li = bitcast i64* %ln9Lh to i64*
  %ln9Lj = load i64, i64* %ln9Li, !tbaa !5
  %ln9Lk = icmp ugt i64 %ln9Lg, %ln9Lj
  %ln9Ll = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Lk, i1 0 )
  br i1 %ln9Ll, label %c8YK, label %c8YJ
c8YJ:
  %ln9Lm = load i64*, i64** %Sp_Var
  %ln9Ln = getelementptr inbounds i64, i64* %ln9Lm, i32 3
  %ln9Lo = bitcast i64* %ln9Ln to double*
  %ln9Lp = load double, double* %ln9Lo, !tbaa !2
  %ln9Lq = load i64*, i64** %Sp_Var
  %ln9Lr = getelementptr inbounds i64, i64* %ln9Lq, i32 2
  %ln9Ls = bitcast i64* %ln9Lr to double*
  %ln9Lt = load double, double* %ln9Ls, !tbaa !2
  %ln9Lu = fmul double %ln9Lp, %ln9Lt
  %ln9Lv = load i64*, i64** %Sp_Var
  %ln9Lw = getelementptr inbounds i64, i64* %ln9Lv, i32 1
  %ln9Lx = bitcast i64* %ln9Lw to double*
  %ln9Ly = load double, double* %ln9Lx, !tbaa !2
  %ln9LB = load i64, i64* %R1_Var
  %ln9LC = add i64 %ln9LB, 7
  %ln9LD = inttoptr i64 %ln9LC to double*
  %ln9LE = load double, double* %ln9LD, !tbaa !4
  %ln9LF = fmul double %ln9Ly, %ln9LE
  %ln9LG = fsub double %ln9Lu, %ln9LF
  store double %ln9LG, double* %ls7xt
  %ln9LI = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9LH = load i64*, i64** %Hp_Var
  %ln9LJ = getelementptr inbounds i64, i64* %ln9LH, i32 -1
  store i64 %ln9LI, i64* %ln9LJ, !tbaa !3
  %ln9LL = load double, double* %ls7xt
  %ln9LK = load i64*, i64** %Hp_Var
  %ln9LM = getelementptr inbounds i64, i64* %ln9LK, i32 0
  %ln9LN = bitcast i64* %ln9LM to double*
  store double %ln9LL, double* %ln9LN, !tbaa !3
  %ln9LP = load i64*, i64** %Hp_Var
  %ln9LQ = ptrtoint i64* %ln9LP to i64
  %ln9LR = add i64 %ln9LQ, -7
  store i64 %ln9LR, i64* %R1_Var
  %ln9LS = load i64*, i64** %Sp_Var
  %ln9LT = getelementptr inbounds i64, i64* %ln9LS, i32 4
  %ln9LU = ptrtoint i64* %ln9LT to i64
  %ln9LV = inttoptr i64 %ln9LU to i64*
  store i64* %ln9LV, i64** %Sp_Var
  %ln9LW = load i64*, i64** %Sp_Var
  %ln9LX = getelementptr inbounds i64, i64* %ln9LW, i32 0
  %ln9LY = bitcast i64* %ln9LX to i64*
  %ln9LZ = load i64, i64* %ln9LY, !tbaa !2
  %ln9M0 = inttoptr i64 %ln9LZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9M1 = load i64*, i64** %Sp_Var
  %ln9M2 = load i64*, i64** %Hp_Var
  %ln9M3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9M0( i64* %Base_Arg, i64* %ln9M1, i64* %ln9M2, i64 %ln9M3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8YK:
  %ln9M4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9M4, !tbaa !5
  %ln9M5 = load i64, i64* %R1_Var
  store i64 %ln9M5, i64* %R1_Var
  %ln9M6 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9M7 = load i64*, i64** %Sp_Var
  %ln9M8 = load i64*, i64** %Hp_Var
  %ln9M9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9M6( i64* %Base_Arg, i64* %ln9M7, i64* %ln9M8, i64 %ln9M9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7xu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xu_info$def to i8*)
define internal ghccc void @s7xu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9Ma:
  %ls7wU = alloca i64, i32 1
  %ls7x3 = alloca i64, i32 1
  %ls7x1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8YW
c8YW:
  %ln9Mb = load i64*, i64** %Sp_Var
  %ln9Mc = getelementptr inbounds i64, i64* %ln9Mb, i32 -6
  %ln9Md = ptrtoint i64* %ln9Mc to i64
  %ln9Me = icmp ult i64 %ln9Md, %SpLim_Arg
  %ln9Mf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Me, i1 0 )
  br i1 %ln9Mf, label %c8Zo, label %c8Zp
c8Zp:
  %ln9Mh = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9Mg = load i64*, i64** %Sp_Var
  %ln9Mi = getelementptr inbounds i64, i64* %ln9Mg, i32 -2
  store i64 %ln9Mh, i64* %ln9Mi, !tbaa !2
  %ln9Mk = load i64, i64* %R1_Var
  %ln9Mj = load i64*, i64** %Sp_Var
  %ln9Ml = getelementptr inbounds i64, i64* %ln9Mj, i32 -1
  store i64 %ln9Mk, i64* %ln9Ml, !tbaa !2
  %ln9Mn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YT_info$def to i64
  %ln9Mm = load i64*, i64** %Sp_Var
  %ln9Mo = getelementptr inbounds i64, i64* %ln9Mm, i32 -6
  store i64 %ln9Mn, i64* %ln9Mo, !tbaa !2
  %ln9Mr = load i64, i64* %R1_Var
  %ln9Ms = add i64 %ln9Mr, 16
  %ln9Mt = inttoptr i64 %ln9Ms to i64*
  %ln9Mu = load i64, i64* %ln9Mt, !tbaa !4
  store i64 %ln9Mu, i64* %ls7wU
  %ln9Mx = load i64, i64* %R1_Var
  %ln9My = add i64 %ln9Mx, 24
  %ln9Mz = inttoptr i64 %ln9My to i64*
  %ln9MA = load i64, i64* %ln9Mz, !tbaa !4
  store i64 %ln9MA, i64* %ls7x3
  %ln9MD = load i64, i64* %R1_Var
  %ln9ME = add i64 %ln9MD, 32
  %ln9MF = inttoptr i64 %ln9ME to i64*
  %ln9MG = load i64, i64* %ln9MF, !tbaa !4
  store i64 %ln9MG, i64* %ls7x1
  %ln9MJ = load i64, i64* %R1_Var
  %ln9MK = add i64 %ln9MJ, 40
  %ln9ML = inttoptr i64 %ln9MK to i64*
  %ln9MM = load i64, i64* %ln9ML, !tbaa !4
  store i64 %ln9MM, i64* %R1_Var
  %ln9MO = load i64, i64* %ls7wU
  %ln9MN = load i64*, i64** %Sp_Var
  %ln9MP = getelementptr inbounds i64, i64* %ln9MN, i32 -5
  store i64 %ln9MO, i64* %ln9MP, !tbaa !2
  %ln9MR = load i64, i64* %ls7x1
  %ln9MQ = load i64*, i64** %Sp_Var
  %ln9MS = getelementptr inbounds i64, i64* %ln9MQ, i32 -4
  store i64 %ln9MR, i64* %ln9MS, !tbaa !2
  %ln9MU = load i64, i64* %ls7x3
  %ln9MT = load i64*, i64** %Sp_Var
  %ln9MV = getelementptr inbounds i64, i64* %ln9MT, i32 -3
  store i64 %ln9MU, i64* %ln9MV, !tbaa !2
  %ln9MW = load i64*, i64** %Sp_Var
  %ln9MX = getelementptr inbounds i64, i64* %ln9MW, i32 -6
  %ln9MY = ptrtoint i64* %ln9MX to i64
  %ln9MZ = inttoptr i64 %ln9MY to i64*
  store i64* %ln9MZ, i64** %Sp_Var
  %ln9N0 = load i64, i64* %R1_Var
  %ln9N1 = and i64 %ln9N0, 7
  %ln9N2 = icmp ne i64 %ln9N1, 0
  br i1 %ln9N2, label %u8Zx, label %c8YU
c8YU:
  %ln9N4 = load i64, i64* %R1_Var
  %ln9N5 = inttoptr i64 %ln9N4 to i64*
  %ln9N6 = load i64, i64* %ln9N5, !tbaa !4
  %ln9N7 = inttoptr i64 %ln9N6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9N8 = load i64*, i64** %Sp_Var
  %ln9N9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9N7( i64* %Base_Arg, i64* %ln9N8, i64* %Hp_Arg, i64 %ln9N9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zx:
  %ln9Na = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Nb = load i64*, i64** %Sp_Var
  %ln9Nc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Na( i64* %Base_Arg, i64* %ln9Nb, i64* %Hp_Arg, i64 %ln9Nc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Zo:
  %ln9Nd = load i64, i64* %R1_Var
  store i64 %ln9Nd, i64* %R1_Var
  %ln9Ne = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Nf = bitcast i64* %ln9Ne to i64*
  %ln9Ng = load i64, i64* %ln9Nf, !tbaa !5
  %ln9Nh = inttoptr i64 %ln9Ng to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ni = load i64*, i64** %Sp_Var
  %ln9Nj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Nh( i64* %Base_Arg, i64* %ln9Ni, i64* %Hp_Arg, i64 %ln9Nj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8YT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YT_info$def to i8*)
define internal ghccc void @c8YT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9Nk:
  %ls7xw = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8YT
c8YT:
  %ln9Nl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YZ_info$def to i64
  %ln9Nm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Nl, i64* %ln9Nm, !tbaa !2
  %ln9Np = load i64, i64* %R1_Var
  %ln9Nq = add i64 %ln9Np, 7
  %ln9Nr = inttoptr i64 %ln9Nq to double*
  %ln9Ns = load double, double* %ln9Nr, !tbaa !4
  store double %ln9Ns, double* %ls7xw
  %ln9Nt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Nu = bitcast i64* %ln9Nt to i64*
  %ln9Nv = load i64, i64* %ln9Nu, !tbaa !2
  store i64 %ln9Nv, i64* %R1_Var
  %ln9Nw = load double, double* %ls7xw
  %ln9Nx = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Ny = bitcast i64* %ln9Nx to double*
  store double %ln9Nw, double* %ln9Ny, !tbaa !2
  %ln9Nz = load i64, i64* %R1_Var
  %ln9NA = and i64 %ln9Nz, 7
  %ln9NB = icmp ne i64 %ln9NA, 0
  br i1 %ln9NB, label %u8Zw, label %c8Z0
c8Z0:
  %ln9ND = load i64, i64* %R1_Var
  %ln9NE = inttoptr i64 %ln9ND to i64*
  %ln9NF = load i64, i64* %ln9NE, !tbaa !4
  %ln9NG = inttoptr i64 %ln9NF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9NH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zw:
  %ln9NI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9NJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8YZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YZ_info$def to i8*)
define internal ghccc void @c8YZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 0}>
{
n9NK:
  %ls7xy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8YZ
c8YZ:
  %ln9NL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z4_info$def to i64
  %ln9NM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9NL, i64* %ln9NM, !tbaa !2
  %ln9NP = load i64, i64* %R1_Var
  %ln9NQ = add i64 %ln9NP, 7
  %ln9NR = inttoptr i64 %ln9NQ to double*
  %ln9NS = load double, double* %ln9NR, !tbaa !4
  store double %ln9NS, double* %ls7xy
  %ln9NT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9NU = bitcast i64* %ln9NT to i64*
  %ln9NV = load i64, i64* %ln9NU, !tbaa !2
  store i64 %ln9NV, i64* %R1_Var
  %ln9NW = load double, double* %ls7xy
  %ln9NX = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9NY = bitcast i64* %ln9NX to double*
  store double %ln9NW, double* %ln9NY, !tbaa !2
  %ln9NZ = load i64, i64* %R1_Var
  %ln9O0 = and i64 %ln9NZ, 7
  %ln9O1 = icmp ne i64 %ln9O0, 0
  br i1 %ln9O1, label %u8Zy, label %c8Z5
c8Z5:
  %ln9O3 = load i64, i64* %R1_Var
  %ln9O4 = inttoptr i64 %ln9O3 to i64*
  %ln9O5 = load i64, i64* %ln9O4, !tbaa !4
  %ln9O6 = inttoptr i64 %ln9O5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9O7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9O6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9O7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zy:
  %ln9O8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9O9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9O8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9O9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Z4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z4_info$def to i8*)
define internal ghccc void @c8Z4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9Oa:
  %ls7xA = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8Z4
c8Z4:
  %ln9Ob = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z9_info$def to i64
  %ln9Oc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Ob, i64* %ln9Oc, !tbaa !2
  %ln9Of = load i64, i64* %R1_Var
  %ln9Og = add i64 %ln9Of, 7
  %ln9Oh = inttoptr i64 %ln9Og to double*
  %ln9Oi = load double, double* %ln9Oh, !tbaa !4
  store double %ln9Oi, double* %ls7xA
  %ln9Oj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9Ok = bitcast i64* %ln9Oj to i64*
  %ln9Ol = load i64, i64* %ln9Ok, !tbaa !2
  store i64 %ln9Ol, i64* %R1_Var
  %ln9Om = load double, double* %ls7xA
  %ln9On = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9Oo = bitcast i64* %ln9On to double*
  store double %ln9Om, double* %ln9Oo, !tbaa !2
  %ln9Op = load i64, i64* %R1_Var
  %ln9Oq = and i64 %ln9Op, 7
  %ln9Or = icmp ne i64 %ln9Oq, 0
  br i1 %ln9Or, label %u8Zz, label %c8Za
c8Za:
  %ln9Ot = load i64, i64* %R1_Var
  %ln9Ou = inttoptr i64 %ln9Ot to i64*
  %ln9Ov = load i64, i64* %ln9Ou, !tbaa !4
  %ln9Ow = inttoptr i64 %ln9Ov to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ox = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ow( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Ox, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zz:
  %ln9Oy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Oz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Oy( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Oz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Z9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Z9_info$def to i8*)
define internal ghccc void @c8Z9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9OA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7xF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8Z9
c8Z9:
  %ln9OB = load i64*, i64** %Hp_Var
  %ln9OC = getelementptr inbounds i64, i64* %ln9OB, i32 2
  %ln9OD = ptrtoint i64* %ln9OC to i64
  %ln9OE = inttoptr i64 %ln9OD to i64*
  store i64* %ln9OE, i64** %Hp_Var
  %ln9OF = load i64*, i64** %Hp_Var
  %ln9OG = ptrtoint i64* %ln9OF to i64
  %ln9OH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9OI = bitcast i64* %ln9OH to i64*
  %ln9OJ = load i64, i64* %ln9OI, !tbaa !5
  %ln9OK = icmp ugt i64 %ln9OG, %ln9OJ
  %ln9OL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9OK, i1 0 )
  br i1 %ln9OL, label %c8Zv, label %c8Zu
c8Zu:
  %ln9OM = load i64*, i64** %Sp_Var
  %ln9ON = getelementptr inbounds i64, i64* %ln9OM, i32 2
  %ln9OO = bitcast i64* %ln9ON to double*
  %ln9OP = load double, double* %ln9OO, !tbaa !2
  %ln9OQ = load i64*, i64** %Sp_Var
  %ln9OR = getelementptr inbounds i64, i64* %ln9OQ, i32 3
  %ln9OS = bitcast i64* %ln9OR to double*
  %ln9OT = load double, double* %ln9OS, !tbaa !2
  %ln9OU = fmul double %ln9OP, %ln9OT
  %ln9OV = load i64*, i64** %Sp_Var
  %ln9OW = getelementptr inbounds i64, i64* %ln9OV, i32 1
  %ln9OX = bitcast i64* %ln9OW to double*
  %ln9OY = load double, double* %ln9OX, !tbaa !2
  %ln9P1 = load i64, i64* %R1_Var
  %ln9P2 = add i64 %ln9P1, 7
  %ln9P3 = inttoptr i64 %ln9P2 to double*
  %ln9P4 = load double, double* %ln9P3, !tbaa !4
  %ln9P5 = fmul double %ln9OY, %ln9P4
  %ln9P6 = fsub double %ln9OU, %ln9P5
  store double %ln9P6, double* %ls7xF
  %ln9P8 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9P7 = load i64*, i64** %Hp_Var
  %ln9P9 = getelementptr inbounds i64, i64* %ln9P7, i32 -1
  store i64 %ln9P8, i64* %ln9P9, !tbaa !3
  %ln9Pb = load double, double* %ls7xF
  %ln9Pa = load i64*, i64** %Hp_Var
  %ln9Pc = getelementptr inbounds i64, i64* %ln9Pa, i32 0
  %ln9Pd = bitcast i64* %ln9Pc to double*
  store double %ln9Pb, double* %ln9Pd, !tbaa !3
  %ln9Pf = load i64*, i64** %Hp_Var
  %ln9Pg = ptrtoint i64* %ln9Pf to i64
  %ln9Ph = add i64 %ln9Pg, -7
  store i64 %ln9Ph, i64* %R1_Var
  %ln9Pi = load i64*, i64** %Sp_Var
  %ln9Pj = getelementptr inbounds i64, i64* %ln9Pi, i32 4
  %ln9Pk = ptrtoint i64* %ln9Pj to i64
  %ln9Pl = inttoptr i64 %ln9Pk to i64*
  store i64* %ln9Pl, i64** %Sp_Var
  %ln9Pm = load i64*, i64** %Sp_Var
  %ln9Pn = getelementptr inbounds i64, i64* %ln9Pm, i32 0
  %ln9Po = bitcast i64* %ln9Pn to i64*
  %ln9Pp = load i64, i64* %ln9Po, !tbaa !2
  %ln9Pq = inttoptr i64 %ln9Pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Pr = load i64*, i64** %Sp_Var
  %ln9Ps = load i64*, i64** %Hp_Var
  %ln9Pt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Pq( i64* %Base_Arg, i64* %ln9Pr, i64* %ln9Ps, i64 %ln9Pt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Zv:
  %ln9Pu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9Pu, !tbaa !5
  %ln9Pv = load i64, i64* %R1_Var
  store i64 %ln9Pv, i64* %R1_Var
  %ln9Pw = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Px = load i64*, i64** %Sp_Var
  %ln9Py = load i64*, i64** %Hp_Var
  %ln9Pz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Pw( i64* %Base_Arg, i64* %ln9Px, i64* %ln9Py, i64 %ln9Pz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7xG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xG_info$def to i8*)
define internal ghccc void @s7xG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
n9PA:
  %ls7wW = alloca i64, i32 1
  %ls7x2 = alloca i64, i32 1
  %ls7x3 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8ZH
c8ZH:
  %ln9PB = load i64*, i64** %Sp_Var
  %ln9PC = getelementptr inbounds i64, i64* %ln9PB, i32 -6
  %ln9PD = ptrtoint i64* %ln9PC to i64
  %ln9PE = icmp ult i64 %ln9PD, %SpLim_Arg
  %ln9PF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9PE, i1 0 )
  br i1 %ln9PF, label %c909, label %c90a
c90a:
  %ln9PH = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9PG = load i64*, i64** %Sp_Var
  %ln9PI = getelementptr inbounds i64, i64* %ln9PG, i32 -2
  store i64 %ln9PH, i64* %ln9PI, !tbaa !2
  %ln9PK = load i64, i64* %R1_Var
  %ln9PJ = load i64*, i64** %Sp_Var
  %ln9PL = getelementptr inbounds i64, i64* %ln9PJ, i32 -1
  store i64 %ln9PK, i64* %ln9PL, !tbaa !2
  %ln9PN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZE_info$def to i64
  %ln9PM = load i64*, i64** %Sp_Var
  %ln9PO = getelementptr inbounds i64, i64* %ln9PM, i32 -6
  store i64 %ln9PN, i64* %ln9PO, !tbaa !2
  %ln9PR = load i64, i64* %R1_Var
  %ln9PS = add i64 %ln9PR, 16
  %ln9PT = inttoptr i64 %ln9PS to i64*
  %ln9PU = load i64, i64* %ln9PT, !tbaa !4
  store i64 %ln9PU, i64* %ls7wW
  %ln9PX = load i64, i64* %R1_Var
  %ln9PY = add i64 %ln9PX, 24
  %ln9PZ = inttoptr i64 %ln9PY to i64*
  %ln9Q0 = load i64, i64* %ln9PZ, !tbaa !4
  store i64 %ln9Q0, i64* %ls7x2
  %ln9Q3 = load i64, i64* %R1_Var
  %ln9Q4 = add i64 %ln9Q3, 32
  %ln9Q5 = inttoptr i64 %ln9Q4 to i64*
  %ln9Q6 = load i64, i64* %ln9Q5, !tbaa !4
  store i64 %ln9Q6, i64* %ls7x3
  %ln9Q9 = load i64, i64* %R1_Var
  %ln9Qa = add i64 %ln9Q9, 40
  %ln9Qb = inttoptr i64 %ln9Qa to i64*
  %ln9Qc = load i64, i64* %ln9Qb, !tbaa !4
  store i64 %ln9Qc, i64* %R1_Var
  %ln9Qe = load i64, i64* %ls7wW
  %ln9Qd = load i64*, i64** %Sp_Var
  %ln9Qf = getelementptr inbounds i64, i64* %ln9Qd, i32 -5
  store i64 %ln9Qe, i64* %ln9Qf, !tbaa !2
  %ln9Qh = load i64, i64* %ls7x2
  %ln9Qg = load i64*, i64** %Sp_Var
  %ln9Qi = getelementptr inbounds i64, i64* %ln9Qg, i32 -4
  store i64 %ln9Qh, i64* %ln9Qi, !tbaa !2
  %ln9Qk = load i64, i64* %ls7x3
  %ln9Qj = load i64*, i64** %Sp_Var
  %ln9Ql = getelementptr inbounds i64, i64* %ln9Qj, i32 -3
  store i64 %ln9Qk, i64* %ln9Ql, !tbaa !2
  %ln9Qm = load i64*, i64** %Sp_Var
  %ln9Qn = getelementptr inbounds i64, i64* %ln9Qm, i32 -6
  %ln9Qo = ptrtoint i64* %ln9Qn to i64
  %ln9Qp = inttoptr i64 %ln9Qo to i64*
  store i64* %ln9Qp, i64** %Sp_Var
  %ln9Qq = load i64, i64* %R1_Var
  %ln9Qr = and i64 %ln9Qq, 7
  %ln9Qs = icmp ne i64 %ln9Qr, 0
  br i1 %ln9Qs, label %u90i, label %c8ZF
c8ZF:
  %ln9Qu = load i64, i64* %R1_Var
  %ln9Qv = inttoptr i64 %ln9Qu to i64*
  %ln9Qw = load i64, i64* %ln9Qv, !tbaa !4
  %ln9Qx = inttoptr i64 %ln9Qw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Qy = load i64*, i64** %Sp_Var
  %ln9Qz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Qx( i64* %Base_Arg, i64* %ln9Qy, i64* %Hp_Arg, i64 %ln9Qz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u90i:
  %ln9QA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9QB = load i64*, i64** %Sp_Var
  %ln9QC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9QA( i64* %Base_Arg, i64* %ln9QB, i64* %Hp_Arg, i64 %ln9QC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c909:
  %ln9QD = load i64, i64* %R1_Var
  store i64 %ln9QD, i64* %R1_Var
  %ln9QE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9QF = bitcast i64* %ln9QE to i64*
  %ln9QG = load i64, i64* %ln9QF, !tbaa !5
  %ln9QH = inttoptr i64 %ln9QG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9QI = load i64*, i64** %Sp_Var
  %ln9QJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9QH( i64* %Base_Arg, i64* %ln9QI, i64* %Hp_Arg, i64 %ln9QJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZE_info$def to i8*)
define internal ghccc void @c8ZE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
n9QK:
  %ls7xI = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ZE
c8ZE:
  %ln9QL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZK_info$def to i64
  %ln9QM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9QL, i64* %ln9QM, !tbaa !2
  %ln9QP = load i64, i64* %R1_Var
  %ln9QQ = add i64 %ln9QP, 7
  %ln9QR = inttoptr i64 %ln9QQ to double*
  %ln9QS = load double, double* %ln9QR, !tbaa !4
  store double %ln9QS, double* %ls7xI
  %ln9QT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9QU = bitcast i64* %ln9QT to i64*
  %ln9QV = load i64, i64* %ln9QU, !tbaa !2
  store i64 %ln9QV, i64* %R1_Var
  %ln9QW = load double, double* %ls7xI
  %ln9QX = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %ln9QY = bitcast i64* %ln9QX to double*
  store double %ln9QW, double* %ln9QY, !tbaa !2
  %ln9QZ = load i64, i64* %R1_Var
  %ln9R0 = and i64 %ln9QZ, 7
  %ln9R1 = icmp ne i64 %ln9R0, 0
  br i1 %ln9R1, label %u90h, label %c8ZL
c8ZL:
  %ln9R3 = load i64, i64* %R1_Var
  %ln9R4 = inttoptr i64 %ln9R3 to i64*
  %ln9R5 = load i64, i64* %ln9R4, !tbaa !4
  %ln9R6 = inttoptr i64 %ln9R5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9R7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9R6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9R7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u90h:
  %ln9R8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9R9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9R8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9R9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZK_info$def to i8*)
define internal ghccc void @c8ZK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
n9Ra:
  %ls7xK = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ZK
c8ZK:
  %ln9Rb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZP_info$def to i64
  %ln9Rc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Rb, i64* %ln9Rc, !tbaa !2
  %ln9Rf = load i64, i64* %R1_Var
  %ln9Rg = add i64 %ln9Rf, 7
  %ln9Rh = inttoptr i64 %ln9Rg to double*
  %ln9Ri = load double, double* %ln9Rh, !tbaa !4
  store double %ln9Ri, double* %ls7xK
  %ln9Rj = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Rk = bitcast i64* %ln9Rj to i64*
  %ln9Rl = load i64, i64* %ln9Rk, !tbaa !2
  store i64 %ln9Rl, i64* %R1_Var
  %ln9Rm = load double, double* %ls7xK
  %ln9Rn = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Ro = bitcast i64* %ln9Rn to double*
  store double %ln9Rm, double* %ln9Ro, !tbaa !2
  %ln9Rp = load i64, i64* %R1_Var
  %ln9Rq = and i64 %ln9Rp, 7
  %ln9Rr = icmp ne i64 %ln9Rq, 0
  br i1 %ln9Rr, label %u90j, label %c8ZQ
c8ZQ:
  %ln9Rt = load i64, i64* %R1_Var
  %ln9Ru = inttoptr i64 %ln9Rt to i64*
  %ln9Rv = load i64, i64* %ln9Ru, !tbaa !4
  %ln9Rw = inttoptr i64 %ln9Rv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Rx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Rw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Rx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u90j:
  %ln9Ry = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Rz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ry( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Rz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZP_info$def to i8*)
define internal ghccc void @c8ZP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
n9RA:
  %ls7xM = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c8ZP
c8ZP:
  %ln9RB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZU_info$def to i64
  %ln9RC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9RB, i64* %ln9RC, !tbaa !2
  %ln9RF = load i64, i64* %R1_Var
  %ln9RG = add i64 %ln9RF, 7
  %ln9RH = inttoptr i64 %ln9RG to double*
  %ln9RI = load double, double* %ln9RH, !tbaa !4
  store double %ln9RI, double* %ls7xM
  %ln9RJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9RK = bitcast i64* %ln9RJ to i64*
  %ln9RL = load i64, i64* %ln9RK, !tbaa !2
  store i64 %ln9RL, i64* %R1_Var
  %ln9RM = load double, double* %ls7xM
  %ln9RN = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9RO = bitcast i64* %ln9RN to double*
  store double %ln9RM, double* %ln9RO, !tbaa !2
  %ln9RP = load i64, i64* %R1_Var
  %ln9RQ = and i64 %ln9RP, 7
  %ln9RR = icmp ne i64 %ln9RQ, 0
  br i1 %ln9RR, label %u90k, label %c8ZV
c8ZV:
  %ln9RT = load i64, i64* %R1_Var
  %ln9RU = inttoptr i64 %ln9RT to i64*
  %ln9RV = load i64, i64* %ln9RU, !tbaa !4
  %ln9RW = inttoptr i64 %ln9RV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9RX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9RW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9RX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u90k:
  %ln9RY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9RZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9RY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9RZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ZU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ZU_info$def to i8*)
define internal ghccc void @c8ZU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
n9S0:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7xR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8ZU
c8ZU:
  %ln9S1 = load i64*, i64** %Hp_Var
  %ln9S2 = getelementptr inbounds i64, i64* %ln9S1, i32 2
  %ln9S3 = ptrtoint i64* %ln9S2 to i64
  %ln9S4 = inttoptr i64 %ln9S3 to i64*
  store i64* %ln9S4, i64** %Hp_Var
  %ln9S5 = load i64*, i64** %Hp_Var
  %ln9S6 = ptrtoint i64* %ln9S5 to i64
  %ln9S7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9S8 = bitcast i64* %ln9S7 to i64*
  %ln9S9 = load i64, i64* %ln9S8, !tbaa !5
  %ln9Sa = icmp ugt i64 %ln9S6, %ln9S9
  %ln9Sb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Sa, i1 0 )
  br i1 %ln9Sb, label %c90g, label %c90f
c90f:
  %ln9Sc = load i64*, i64** %Sp_Var
  %ln9Sd = getelementptr inbounds i64, i64* %ln9Sc, i32 3
  %ln9Se = bitcast i64* %ln9Sd to double*
  %ln9Sf = load double, double* %ln9Se, !tbaa !2
  %ln9Sg = load i64*, i64** %Sp_Var
  %ln9Sh = getelementptr inbounds i64, i64* %ln9Sg, i32 2
  %ln9Si = bitcast i64* %ln9Sh to double*
  %ln9Sj = load double, double* %ln9Si, !tbaa !2
  %ln9Sk = fmul double %ln9Sf, %ln9Sj
  %ln9Sl = load i64*, i64** %Sp_Var
  %ln9Sm = getelementptr inbounds i64, i64* %ln9Sl, i32 1
  %ln9Sn = bitcast i64* %ln9Sm to double*
  %ln9So = load double, double* %ln9Sn, !tbaa !2
  %ln9Sr = load i64, i64* %R1_Var
  %ln9Ss = add i64 %ln9Sr, 7
  %ln9St = inttoptr i64 %ln9Ss to double*
  %ln9Su = load double, double* %ln9St, !tbaa !4
  %ln9Sv = fmul double %ln9So, %ln9Su
  %ln9Sw = fsub double %ln9Sk, %ln9Sv
  store double %ln9Sw, double* %ls7xR
  %ln9Sy = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9Sx = load i64*, i64** %Hp_Var
  %ln9Sz = getelementptr inbounds i64, i64* %ln9Sx, i32 -1
  store i64 %ln9Sy, i64* %ln9Sz, !tbaa !3
  %ln9SB = load double, double* %ls7xR
  %ln9SA = load i64*, i64** %Hp_Var
  %ln9SC = getelementptr inbounds i64, i64* %ln9SA, i32 0
  %ln9SD = bitcast i64* %ln9SC to double*
  store double %ln9SB, double* %ln9SD, !tbaa !3
  %ln9SF = load i64*, i64** %Hp_Var
  %ln9SG = ptrtoint i64* %ln9SF to i64
  %ln9SH = add i64 %ln9SG, -7
  store i64 %ln9SH, i64* %R1_Var
  %ln9SI = load i64*, i64** %Sp_Var
  %ln9SJ = getelementptr inbounds i64, i64* %ln9SI, i32 4
  %ln9SK = ptrtoint i64* %ln9SJ to i64
  %ln9SL = inttoptr i64 %ln9SK to i64*
  store i64* %ln9SL, i64** %Sp_Var
  %ln9SM = load i64*, i64** %Sp_Var
  %ln9SN = getelementptr inbounds i64, i64* %ln9SM, i32 0
  %ln9SO = bitcast i64* %ln9SN to i64*
  %ln9SP = load i64, i64* %ln9SO, !tbaa !2
  %ln9SQ = inttoptr i64 %ln9SP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9SR = load i64*, i64** %Sp_Var
  %ln9SS = load i64*, i64** %Hp_Var
  %ln9ST = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9SQ( i64* %Base_Arg, i64* %ln9SR, i64* %ln9SS, i64 %ln9ST, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90g:
  %ln9SU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9SU, !tbaa !5
  %ln9SV = load i64, i64* %R1_Var
  store i64 %ln9SV, i64* %R1_Var
  %ln9SW = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9SX = load i64*, i64** %Sp_Var
  %ln9SY = load i64*, i64** %Hp_Var
  %ln9SZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9SW( i64* %Base_Arg, i64* %ln9SX, i64* %ln9SY, i64 %ln9SZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7xS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xS_info$def to i8*)
define internal ghccc void @s7xS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9T0:
  %ls7xi = alloca i64, i32 1
  %ls7xu = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c90s
c90s:
  %ln9T1 = load i64*, i64** %Sp_Var
  %ln9T2 = getelementptr inbounds i64, i64* %ln9T1, i32 -5
  %ln9T3 = ptrtoint i64* %ln9T2 to i64
  %ln9T4 = icmp ult i64 %ln9T3, %SpLim_Arg
  %ln9T5 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9T4, i1 0 )
  br i1 %ln9T5, label %c90Z, label %c910
c910:
  %ln9T7 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9T6 = load i64*, i64** %Sp_Var
  %ln9T8 = getelementptr inbounds i64, i64* %ln9T6, i32 -2
  store i64 %ln9T7, i64* %ln9T8, !tbaa !2
  %ln9Ta = load i64, i64* %R1_Var
  %ln9T9 = load i64*, i64** %Sp_Var
  %ln9Tb = getelementptr inbounds i64, i64* %ln9T9, i32 -1
  store i64 %ln9Ta, i64* %ln9Tb, !tbaa !2
  %ln9Td = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90p_info$def to i64
  %ln9Tc = load i64*, i64** %Sp_Var
  %ln9Te = getelementptr inbounds i64, i64* %ln9Tc, i32 -5
  store i64 %ln9Td, i64* %ln9Te, !tbaa !2
  %ln9Th = load i64, i64* %R1_Var
  %ln9Ti = add i64 %ln9Th, 16
  %ln9Tj = inttoptr i64 %ln9Ti to i64*
  %ln9Tk = load i64, i64* %ln9Tj, !tbaa !4
  store i64 %ln9Tk, i64* %ls7xi
  %ln9Tn = load i64, i64* %R1_Var
  %ln9To = add i64 %ln9Tn, 24
  %ln9Tp = inttoptr i64 %ln9To to i64*
  %ln9Tq = load i64, i64* %ln9Tp, !tbaa !4
  store i64 %ln9Tq, i64* %ls7xu
  %ln9Tt = load i64, i64* %R1_Var
  %ln9Tu = add i64 %ln9Tt, 32
  %ln9Tv = inttoptr i64 %ln9Tu to i64*
  %ln9Tw = load i64, i64* %ln9Tv, !tbaa !4
  store i64 %ln9Tw, i64* %R1_Var
  %ln9Ty = load i64, i64* %ls7xi
  %ln9Tx = load i64*, i64** %Sp_Var
  %ln9Tz = getelementptr inbounds i64, i64* %ln9Tx, i32 -4
  store i64 %ln9Ty, i64* %ln9Tz, !tbaa !2
  %ln9TB = load i64, i64* %ls7xu
  %ln9TA = load i64*, i64** %Sp_Var
  %ln9TC = getelementptr inbounds i64, i64* %ln9TA, i32 -3
  store i64 %ln9TB, i64* %ln9TC, !tbaa !2
  %ln9TD = load i64*, i64** %Sp_Var
  %ln9TE = getelementptr inbounds i64, i64* %ln9TD, i32 -5
  %ln9TF = ptrtoint i64* %ln9TE to i64
  %ln9TG = inttoptr i64 %ln9TF to i64*
  store i64* %ln9TG, i64** %Sp_Var
  %ln9TH = load i64, i64* %R1_Var
  %ln9TI = and i64 %ln9TH, 7
  %ln9TJ = icmp ne i64 %ln9TI, 0
  br i1 %ln9TJ, label %u917, label %c90q
c90q:
  %ln9TL = load i64, i64* %R1_Var
  %ln9TM = inttoptr i64 %ln9TL to i64*
  %ln9TN = load i64, i64* %ln9TM, !tbaa !4
  %ln9TO = inttoptr i64 %ln9TN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TP = load i64*, i64** %Sp_Var
  %ln9TQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TO( i64* %Base_Arg, i64* %ln9TP, i64* %Hp_Arg, i64 %ln9TQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u917:
  %ln9TR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90p_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TS = load i64*, i64** %Sp_Var
  %ln9TT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TR( i64* %Base_Arg, i64* %ln9TS, i64* %Hp_Arg, i64 %ln9TT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c90Z:
  %ln9TU = load i64, i64* %R1_Var
  store i64 %ln9TU, i64* %R1_Var
  %ln9TV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9TW = bitcast i64* %ln9TV to i64*
  %ln9TX = load i64, i64* %ln9TW, !tbaa !5
  %ln9TY = inttoptr i64 %ln9TX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TZ = load i64*, i64** %Sp_Var
  %ln9U0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TY( i64* %Base_Arg, i64* %ln9TZ, i64* %Hp_Arg, i64 %ln9U0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c90p_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90p_info$def to i8*)
define internal ghccc void @c90p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9U1:
  %ls7xU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c90p
c90p:
  %ln9U2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to i64
  %ln9U3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9U2, i64* %ln9U3, !tbaa !2
  %ln9U6 = load i64, i64* %R1_Var
  %ln9U7 = add i64 %ln9U6, 7
  %ln9U8 = inttoptr i64 %ln9U7 to double*
  %ln9U9 = load double, double* %ln9U8, !tbaa !4
  store double %ln9U9, double* %ls7xU
  %ln9Ua = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Ub = bitcast i64* %ln9Ua to i64*
  %ln9Uc = load i64, i64* %ln9Ub, !tbaa !2
  store i64 %ln9Uc, i64* %R1_Var
  %ln9Ud = load double, double* %ls7xU
  %ln9Ue = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Uf = bitcast i64* %ln9Ue to double*
  store double %ln9Ud, double* %ln9Uf, !tbaa !2
  %ln9Ug = load i64, i64* %R1_Var
  %ln9Uh = and i64 %ln9Ug, 7
  %ln9Ui = icmp ne i64 %ln9Uh, 0
  br i1 %ln9Ui, label %u916, label %c90w
c90w:
  %ln9Uk = load i64, i64* %R1_Var
  %ln9Ul = inttoptr i64 %ln9Uk to i64*
  %ln9Um = load i64, i64* %ln9Ul, !tbaa !4
  %ln9Un = inttoptr i64 %ln9Um to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Uo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Un( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Uo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u916:
  %ln9Up = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Uq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Up( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Uq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c90v_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90v_info$def to i8*)
define internal ghccc void @c90v_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
n9Ur:
  %ls7xW = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c90v
c90v:
  %ln9Us = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90A_info$def to i64
  %ln9Ut = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Us, i64* %ln9Ut, !tbaa !2
  %ln9Uw = load i64, i64* %R1_Var
  %ln9Ux = add i64 %ln9Uw, 7
  %ln9Uy = inttoptr i64 %ln9Ux to double*
  %ln9Uz = load double, double* %ln9Uy, !tbaa !4
  store double %ln9Uz, double* %ls7xW
  %ln9UA = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9UB = bitcast i64* %ln9UA to i64*
  %ln9UC = load i64, i64* %ln9UB, !tbaa !2
  store i64 %ln9UC, i64* %R1_Var
  %ln9UD = load double, double* %ls7xW
  %ln9UE = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9UF = bitcast i64* %ln9UE to double*
  store double %ln9UD, double* %ln9UF, !tbaa !2
  %ln9UG = load i64, i64* %R1_Var
  %ln9UH = and i64 %ln9UG, 7
  %ln9UI = icmp ne i64 %ln9UH, 0
  br i1 %ln9UI, label %u918, label %c90B
c90B:
  %ln9UK = load i64, i64* %R1_Var
  %ln9UL = inttoptr i64 %ln9UK to i64*
  %ln9UM = load i64, i64* %ln9UL, !tbaa !4
  %ln9UN = inttoptr i64 %ln9UM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9UO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9UN( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9UO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u918:
  %ln9UP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90A_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9UQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9UP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9UQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c90A_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c90A_info$def to i8*)
define internal ghccc void @c90A_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n9UR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7xU = alloca double, i32 1
  %ls7xW = alloca double, i32 1
  %ls7xY = alloca double, i32 1
  %lc90U = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c90A
c90A:
  %ln9US = load i64*, i64** %Hp_Var
  %ln9UT = getelementptr inbounds i64, i64* %ln9US, i32 2
  %ln9UU = ptrtoint i64* %ln9UT to i64
  %ln9UV = inttoptr i64 %ln9UU to i64*
  store i64* %ln9UV, i64** %Hp_Var
  %ln9UW = load i64*, i64** %Hp_Var
  %ln9UX = ptrtoint i64* %ln9UW to i64
  %ln9UY = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9UZ = bitcast i64* %ln9UY to i64*
  %ln9V0 = load i64, i64* %ln9UZ, !tbaa !5
  %ln9V1 = icmp ugt i64 %ln9UX, %ln9V0
  %ln9V2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9V1, i1 0 )
  br i1 %ln9V2, label %c915, label %c914
c914:
  %ln9V3 = load i64*, i64** %Sp_Var
  %ln9V4 = getelementptr inbounds i64, i64* %ln9V3, i32 2
  %ln9V5 = bitcast i64* %ln9V4 to double*
  %ln9V6 = load double, double* %ln9V5, !tbaa !2
  store double %ln9V6, double* %ls7xU
  %ln9V7 = load i64*, i64** %Sp_Var
  %ln9V8 = getelementptr inbounds i64, i64* %ln9V7, i32 1
  %ln9V9 = bitcast i64* %ln9V8 to double*
  %ln9Va = load double, double* %ln9V9, !tbaa !2
  store double %ln9Va, double* %ls7xW
  %ln9Vd = load i64, i64* %R1_Var
  %ln9Ve = add i64 %ln9Vd, 7
  %ln9Vf = inttoptr i64 %ln9Ve to double*
  %ln9Vg = load double, double* %ln9Vf, !tbaa !4
  store double %ln9Vg, double* %ls7xY
  %ln9Vh = load double, double* %ls7xU
  %ln9Vi = load double, double* %ls7xU
  %ln9Vj = fmul double %ln9Vh, %ln9Vi
  %ln9Vk = load double, double* %ls7xW
  %ln9Vl = load double, double* %ls7xW
  %ln9Vm = fmul double %ln9Vk, %ln9Vl
  %ln9Vn = fadd double %ln9Vj, %ln9Vm
  %ln9Vo = load double, double* %ls7xY
  %ln9Vp = load double, double* %ls7xY
  %ln9Vq = fmul double %ln9Vo, %ln9Vp
  %ln9Vr = fadd double %ln9Vn, %ln9Vq
  %ln9Vs = call ccc double (double) @llvm.sqrt.f64( double %ln9Vr ) nounwind
  store double %ln9Vs, double* %lc90U
  %ln9Vu = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9Vt = load i64*, i64** %Hp_Var
  %ln9Vv = getelementptr inbounds i64, i64* %ln9Vt, i32 -1
  store i64 %ln9Vu, i64* %ln9Vv, !tbaa !3
  %ln9Vx = load double, double* %lc90U
  %ln9Vw = load i64*, i64** %Hp_Var
  %ln9Vy = getelementptr inbounds i64, i64* %ln9Vw, i32 0
  %ln9Vz = bitcast i64* %ln9Vy to double*
  store double %ln9Vx, double* %ln9Vz, !tbaa !3
  %ln9VB = load i64*, i64** %Hp_Var
  %ln9VC = ptrtoint i64* %ln9VB to i64
  %ln9VD = add i64 %ln9VC, -7
  store i64 %ln9VD, i64* %R1_Var
  %ln9VE = load i64*, i64** %Sp_Var
  %ln9VF = getelementptr inbounds i64, i64* %ln9VE, i32 3
  %ln9VG = ptrtoint i64* %ln9VF to i64
  %ln9VH = inttoptr i64 %ln9VG to i64*
  store i64* %ln9VH, i64** %Sp_Var
  %ln9VI = load i64*, i64** %Sp_Var
  %ln9VJ = getelementptr inbounds i64, i64* %ln9VI, i32 0
  %ln9VK = bitcast i64* %ln9VJ to i64*
  %ln9VL = load i64, i64* %ln9VK, !tbaa !2
  %ln9VM = inttoptr i64 %ln9VL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VN = load i64*, i64** %Sp_Var
  %ln9VO = load i64*, i64** %Hp_Var
  %ln9VP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VM( i64* %Base_Arg, i64* %ln9VN, i64* %ln9VO, i64 %ln9VP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c915:
  %ln9VQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9VQ, !tbaa !5
  %ln9VR = load i64, i64* %R1_Var
  store i64 %ln9VR, i64* %R1_Var
  %ln9VS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VT = load i64*, i64** %Sp_Var
  %ln9VU = load i64*, i64** %Hp_Var
  %ln9VV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VS( i64* %Base_Arg, i64* %ln9VT, i64* %ln9VU, i64 %ln9VV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7yv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yv_info$def to i8*)
define internal ghccc void @s7yv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9VW:
  %ls7xS = alloca i64, i32 1
  %ls7xi = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c91g
c91g:
  %ln9VX = load i64*, i64** %Sp_Var
  %ln9VY = getelementptr inbounds i64, i64* %ln9VX, i32 -5
  %ln9VZ = ptrtoint i64* %ln9VY to i64
  %ln9W0 = icmp ult i64 %ln9VZ, %SpLim_Arg
  %ln9W1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9W0, i1 0 )
  br i1 %ln9W1, label %c91A, label %c91B
c91B:
  %ln9W3 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9W2 = load i64*, i64** %Sp_Var
  %ln9W4 = getelementptr inbounds i64, i64* %ln9W2, i32 -2
  store i64 %ln9W3, i64* %ln9W4, !tbaa !2
  %ln9W6 = load i64, i64* %R1_Var
  %ln9W5 = load i64*, i64** %Sp_Var
  %ln9W7 = getelementptr inbounds i64, i64* %ln9W5, i32 -1
  store i64 %ln9W6, i64* %ln9W7, !tbaa !2
  %ln9W9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91d_info$def to i64
  %ln9W8 = load i64*, i64** %Sp_Var
  %ln9Wa = getelementptr inbounds i64, i64* %ln9W8, i32 -5
  store i64 %ln9W9, i64* %ln9Wa, !tbaa !2
  %ln9Wd = load i64, i64* %R1_Var
  %ln9We = add i64 %ln9Wd, 16
  %ln9Wf = inttoptr i64 %ln9We to i64*
  %ln9Wg = load i64, i64* %ln9Wf, !tbaa !4
  store i64 %ln9Wg, i64* %ls7xS
  %ln9Wj = load i64, i64* %R1_Var
  %ln9Wk = add i64 %ln9Wj, 24
  %ln9Wl = inttoptr i64 %ln9Wk to i64*
  %ln9Wm = load i64, i64* %ln9Wl, !tbaa !4
  store i64 %ln9Wm, i64* %ls7xi
  %ln9Wp = load i64, i64* %R1_Var
  %ln9Wq = add i64 %ln9Wp, 32
  %ln9Wr = inttoptr i64 %ln9Wq to i64*
  %ln9Ws = load i64, i64* %ln9Wr, !tbaa !4
  store i64 %ln9Ws, i64* %R1_Var
  %ln9Wu = load i64, i64* %ls7xi
  %ln9Wt = load i64*, i64** %Sp_Var
  %ln9Wv = getelementptr inbounds i64, i64* %ln9Wt, i32 -4
  store i64 %ln9Wu, i64* %ln9Wv, !tbaa !2
  %ln9Wx = load i64, i64* %ls7xS
  %ln9Ww = load i64*, i64** %Sp_Var
  %ln9Wy = getelementptr inbounds i64, i64* %ln9Ww, i32 -3
  store i64 %ln9Wx, i64* %ln9Wy, !tbaa !2
  %ln9Wz = load i64*, i64** %Sp_Var
  %ln9WA = getelementptr inbounds i64, i64* %ln9Wz, i32 -5
  %ln9WB = ptrtoint i64* %ln9WA to i64
  %ln9WC = inttoptr i64 %ln9WB to i64*
  store i64* %ln9WC, i64** %Sp_Var
  %ln9WD = load i64, i64* %R1_Var
  %ln9WE = and i64 %ln9WD, 7
  %ln9WF = icmp ne i64 %ln9WE, 0
  br i1 %ln9WF, label %u91I, label %c91e
c91e:
  %ln9WH = load i64, i64* %R1_Var
  %ln9WI = inttoptr i64 %ln9WH to i64*
  %ln9WJ = load i64, i64* %ln9WI, !tbaa !4
  %ln9WK = inttoptr i64 %ln9WJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WL = load i64*, i64** %Sp_Var
  %ln9WM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WK( i64* %Base_Arg, i64* %ln9WL, i64* %Hp_Arg, i64 %ln9WM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u91I:
  %ln9WN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91d_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WO = load i64*, i64** %Sp_Var
  %ln9WP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WN( i64* %Base_Arg, i64* %ln9WO, i64* %Hp_Arg, i64 %ln9WP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c91A:
  %ln9WQ = load i64, i64* %R1_Var
  store i64 %ln9WQ, i64* %R1_Var
  %ln9WR = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9WS = bitcast i64* %ln9WR to i64*
  %ln9WT = load i64, i64* %ln9WS, !tbaa !5
  %ln9WU = inttoptr i64 %ln9WT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WV = load i64*, i64** %Sp_Var
  %ln9WW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WU( i64* %Base_Arg, i64* %ln9WV, i64* %Hp_Arg, i64 %ln9WW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91d_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91d_info$def to i8*)
define internal ghccc void @c91d_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9WX:
  %ls7yo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c91d
c91d:
  %ln9WY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91j_info$def to i64
  %ln9WZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9WY, i64* %ln9WZ, !tbaa !2
  %ln9X2 = load i64, i64* %R1_Var
  %ln9X3 = add i64 %ln9X2, 7
  %ln9X4 = inttoptr i64 %ln9X3 to double*
  %ln9X5 = load double, double* %ln9X4, !tbaa !4
  store double %ln9X5, double* %ls7yo
  %ln9X6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9X7 = bitcast i64* %ln9X6 to i64*
  %ln9X8 = load i64, i64* %ln9X7, !tbaa !2
  store i64 %ln9X8, i64* %R1_Var
  %ln9X9 = load double, double* %ls7yo
  %ln9Xa = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9Xb = bitcast i64* %ln9Xa to double*
  store double %ln9X9, double* %ln9Xb, !tbaa !2
  %ln9Xc = load i64, i64* %R1_Var
  %ln9Xd = and i64 %ln9Xc, 7
  %ln9Xe = icmp ne i64 %ln9Xd, 0
  br i1 %ln9Xe, label %u91H, label %c91k
c91k:
  %ln9Xg = load i64, i64* %R1_Var
  %ln9Xh = inttoptr i64 %ln9Xg to i64*
  %ln9Xi = load i64, i64* %ln9Xh, !tbaa !4
  %ln9Xj = inttoptr i64 %ln9Xi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Xk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Xj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Xk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u91H:
  %ln9Xl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91j_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Xm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Xl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Xm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91j_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91j_info$def to i8*)
define internal ghccc void @c91j_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
n9Xn:
  %ls7yq = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c91j
c91j:
  %ln9Xo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91o_info$def to i64
  %ln9Xp = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Xo, i64* %ln9Xp, !tbaa !2
  %ln9Xs = load i64, i64* %R1_Var
  %ln9Xt = add i64 %ln9Xs, 7
  %ln9Xu = inttoptr i64 %ln9Xt to double*
  %ln9Xv = load double, double* %ln9Xu, !tbaa !4
  store double %ln9Xv, double* %ls7yq
  %ln9Xw = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9Xx = bitcast i64* %ln9Xw to i64*
  %ln9Xy = load i64, i64* %ln9Xx, !tbaa !2
  store i64 %ln9Xy, i64* %R1_Var
  %ln9Xz = load double, double* %ls7yq
  %ln9XA = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln9XB = bitcast i64* %ln9XA to double*
  store double %ln9Xz, double* %ln9XB, !tbaa !2
  %ln9XC = load i64, i64* %R1_Var
  %ln9XD = and i64 %ln9XC, 7
  %ln9XE = icmp ne i64 %ln9XD, 0
  br i1 %ln9XE, label %u91J, label %c91p
c91p:
  %ln9XG = load i64, i64* %R1_Var
  %ln9XH = inttoptr i64 %ln9XG to i64*
  %ln9XI = load i64, i64* %ln9XH, !tbaa !4
  %ln9XJ = inttoptr i64 %ln9XI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9XK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9XJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9XK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u91J:
  %ln9XL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91o_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9XM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9XL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9XM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91o_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91o_info$def to i8*)
define internal ghccc void @c91o_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
n9XN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yu = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c91o
c91o:
  %ln9XO = load i64*, i64** %Hp_Var
  %ln9XP = getelementptr inbounds i64, i64* %ln9XO, i32 2
  %ln9XQ = ptrtoint i64* %ln9XP to i64
  %ln9XR = inttoptr i64 %ln9XQ to i64*
  store i64* %ln9XR, i64** %Hp_Var
  %ln9XS = load i64*, i64** %Hp_Var
  %ln9XT = ptrtoint i64* %ln9XS to i64
  %ln9XU = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9XV = bitcast i64* %ln9XU to i64*
  %ln9XW = load i64, i64* %ln9XV, !tbaa !5
  %ln9XX = icmp ugt i64 %ln9XT, %ln9XW
  %ln9XY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9XX, i1 0 )
  br i1 %ln9XY, label %c91G, label %c91F
c91F:
  %ln9XZ = load i64*, i64** %Sp_Var
  %ln9Y0 = getelementptr inbounds i64, i64* %ln9XZ, i32 1
  %ln9Y1 = bitcast i64* %ln9Y0 to double*
  %ln9Y2 = load double, double* %ln9Y1, !tbaa !2
  %ln9Y3 = load i64*, i64** %Sp_Var
  %ln9Y4 = getelementptr inbounds i64, i64* %ln9Y3, i32 2
  %ln9Y5 = bitcast i64* %ln9Y4 to double*
  %ln9Y6 = load double, double* %ln9Y5, !tbaa !2
  %ln9Y9 = load i64, i64* %R1_Var
  %ln9Ya = add i64 %ln9Y9, 7
  %ln9Yb = inttoptr i64 %ln9Ya to double*
  %ln9Yc = load double, double* %ln9Yb, !tbaa !4
  %ln9Yd = fdiv double %ln9Y6, %ln9Yc
  %ln9Ye = fmul double %ln9Y2, %ln9Yd
  store double %ln9Ye, double* %ls7yu
  %ln9Yg = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %ln9Yf = load i64*, i64** %Hp_Var
  %ln9Yh = getelementptr inbounds i64, i64* %ln9Yf, i32 -1
  store i64 %ln9Yg, i64* %ln9Yh, !tbaa !3
  %ln9Yj = load double, double* %ls7yu
  %ln9Yi = load i64*, i64** %Hp_Var
  %ln9Yk = getelementptr inbounds i64, i64* %ln9Yi, i32 0
  %ln9Yl = bitcast i64* %ln9Yk to double*
  store double %ln9Yj, double* %ln9Yl, !tbaa !3
  %ln9Yn = load i64*, i64** %Hp_Var
  %ln9Yo = ptrtoint i64* %ln9Yn to i64
  %ln9Yp = add i64 %ln9Yo, -7
  store i64 %ln9Yp, i64* %R1_Var
  %ln9Yq = load i64*, i64** %Sp_Var
  %ln9Yr = getelementptr inbounds i64, i64* %ln9Yq, i32 3
  %ln9Ys = ptrtoint i64* %ln9Yr to i64
  %ln9Yt = inttoptr i64 %ln9Ys to i64*
  store i64* %ln9Yt, i64** %Sp_Var
  %ln9Yu = load i64*, i64** %Sp_Var
  %ln9Yv = getelementptr inbounds i64, i64* %ln9Yu, i32 0
  %ln9Yw = bitcast i64* %ln9Yv to i64*
  %ln9Yx = load i64, i64* %ln9Yw, !tbaa !2
  %ln9Yy = inttoptr i64 %ln9Yx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Yz = load i64*, i64** %Sp_Var
  %ln9YA = load i64*, i64** %Hp_Var
  %ln9YB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Yy( i64* %Base_Arg, i64* %ln9Yz, i64* %ln9YA, i64 %ln9YB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c91G:
  %ln9YC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9YC, !tbaa !5
  %ln9YD = load i64, i64* %R1_Var
  store i64 %ln9YD, i64* %R1_Var
  %ln9YE = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9YF = load i64*, i64** %Sp_Var
  %ln9YG = load i64*, i64** %Hp_Var
  %ln9YH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9YE( i64* %Base_Arg, i64* %ln9YF, i64* %ln9YG, i64 %ln9YH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7ym_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7ym_info$def to i8*)
define internal ghccc void @s7ym_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
n9YI:
  %ls7xS = alloca i64, i32 1
  %ls7xu = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c91R
c91R:
  %ln9YJ = load i64*, i64** %Sp_Var
  %ln9YK = getelementptr inbounds i64, i64* %ln9YJ, i32 -5
  %ln9YL = ptrtoint i64* %ln9YK to i64
  %ln9YM = icmp ult i64 %ln9YL, %SpLim_Arg
  %ln9YN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9YM, i1 0 )
  br i1 %ln9YN, label %c92b, label %c92c
c92c:
  %ln9YP = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9YO = load i64*, i64** %Sp_Var
  %ln9YQ = getelementptr inbounds i64, i64* %ln9YO, i32 -2
  store i64 %ln9YP, i64* %ln9YQ, !tbaa !2
  %ln9YS = load i64, i64* %R1_Var
  %ln9YR = load i64*, i64** %Sp_Var
  %ln9YT = getelementptr inbounds i64, i64* %ln9YR, i32 -1
  store i64 %ln9YS, i64* %ln9YT, !tbaa !2
  %ln9YV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91O_info$def to i64
  %ln9YU = load i64*, i64** %Sp_Var
  %ln9YW = getelementptr inbounds i64, i64* %ln9YU, i32 -5
  store i64 %ln9YV, i64* %ln9YW, !tbaa !2
  %ln9YZ = load i64, i64* %R1_Var
  %ln9Z0 = add i64 %ln9YZ, 16
  %ln9Z1 = inttoptr i64 %ln9Z0 to i64*
  %ln9Z2 = load i64, i64* %ln9Z1, !tbaa !4
  store i64 %ln9Z2, i64* %ls7xS
  %ln9Z5 = load i64, i64* %R1_Var
  %ln9Z6 = add i64 %ln9Z5, 24
  %ln9Z7 = inttoptr i64 %ln9Z6 to i64*
  %ln9Z8 = load i64, i64* %ln9Z7, !tbaa !4
  store i64 %ln9Z8, i64* %ls7xu
  %ln9Zb = load i64, i64* %R1_Var
  %ln9Zc = add i64 %ln9Zb, 32
  %ln9Zd = inttoptr i64 %ln9Zc to i64*
  %ln9Ze = load i64, i64* %ln9Zd, !tbaa !4
  store i64 %ln9Ze, i64* %R1_Var
  %ln9Zg = load i64, i64* %ls7xu
  %ln9Zf = load i64*, i64** %Sp_Var
  %ln9Zh = getelementptr inbounds i64, i64* %ln9Zf, i32 -4
  store i64 %ln9Zg, i64* %ln9Zh, !tbaa !2
  %ln9Zj = load i64, i64* %ls7xS
  %ln9Zi = load i64*, i64** %Sp_Var
  %ln9Zk = getelementptr inbounds i64, i64* %ln9Zi, i32 -3
  store i64 %ln9Zj, i64* %ln9Zk, !tbaa !2
  %ln9Zl = load i64*, i64** %Sp_Var
  %ln9Zm = getelementptr inbounds i64, i64* %ln9Zl, i32 -5
  %ln9Zn = ptrtoint i64* %ln9Zm to i64
  %ln9Zo = inttoptr i64 %ln9Zn to i64*
  store i64* %ln9Zo, i64** %Sp_Var
  %ln9Zp = load i64, i64* %R1_Var
  %ln9Zq = and i64 %ln9Zp, 7
  %ln9Zr = icmp ne i64 %ln9Zq, 0
  br i1 %ln9Zr, label %u92j, label %c91P
c91P:
  %ln9Zt = load i64, i64* %R1_Var
  %ln9Zu = inttoptr i64 %ln9Zt to i64*
  %ln9Zv = load i64, i64* %ln9Zu, !tbaa !4
  %ln9Zw = inttoptr i64 %ln9Zv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Zx = load i64*, i64** %Sp_Var
  %ln9Zy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Zw( i64* %Base_Arg, i64* %ln9Zx, i64* %Hp_Arg, i64 %ln9Zy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92j:
  %ln9Zz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91O_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ZA = load i64*, i64** %Sp_Var
  %ln9ZB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Zz( i64* %Base_Arg, i64* %ln9ZA, i64* %Hp_Arg, i64 %ln9ZB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92b:
  %ln9ZC = load i64, i64* %R1_Var
  store i64 %ln9ZC, i64* %R1_Var
  %ln9ZD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9ZE = bitcast i64* %ln9ZD to i64*
  %ln9ZF = load i64, i64* %ln9ZE, !tbaa !5
  %ln9ZG = inttoptr i64 %ln9ZF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ZH = load i64*, i64** %Sp_Var
  %ln9ZI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ZG( i64* %Base_Arg, i64* %ln9ZH, i64* %Hp_Arg, i64 %ln9ZI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91O_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91O_info$def to i8*)
define internal ghccc void @c91O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
n9ZJ:
  %ls7yf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c91O
c91O:
  %ln9ZK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91U_info$def to i64
  %ln9ZL = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9ZK, i64* %ln9ZL, !tbaa !2
  %ln9ZO = load i64, i64* %R1_Var
  %ln9ZP = add i64 %ln9ZO, 7
  %ln9ZQ = inttoptr i64 %ln9ZP to double*
  %ln9ZR = load double, double* %ln9ZQ, !tbaa !4
  store double %ln9ZR, double* %ls7yf
  %ln9ZS = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9ZT = bitcast i64* %ln9ZS to i64*
  %ln9ZU = load i64, i64* %ln9ZT, !tbaa !2
  store i64 %ln9ZU, i64* %R1_Var
  %ln9ZV = load double, double* %ls7yf
  %ln9ZW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln9ZX = bitcast i64* %ln9ZW to double*
  store double %ln9ZV, double* %ln9ZX, !tbaa !2
  %ln9ZY = load i64, i64* %R1_Var
  %ln9ZZ = and i64 %ln9ZY, 7
  %lna00 = icmp ne i64 %ln9ZZ, 0
  br i1 %lna00, label %u92i, label %c91V
c91V:
  %lna02 = load i64, i64* %R1_Var
  %lna03 = inttoptr i64 %lna02 to i64*
  %lna04 = load i64, i64* %lna03, !tbaa !4
  %lna05 = inttoptr i64 %lna04 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna06 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna05( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna06, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92i:
  %lna07 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91U_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna08 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna07( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna08, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91U_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91U_info$def to i8*)
define internal ghccc void @c91U_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
na09:
  %ls7yh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c91U
c91U:
  %lna0a = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91Z_info$def to i64
  %lna0b = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna0a, i64* %lna0b, !tbaa !2
  %lna0e = load i64, i64* %R1_Var
  %lna0f = add i64 %lna0e, 7
  %lna0g = inttoptr i64 %lna0f to double*
  %lna0h = load double, double* %lna0g, !tbaa !4
  store double %lna0h, double* %ls7yh
  %lna0i = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lna0j = bitcast i64* %lna0i to i64*
  %lna0k = load i64, i64* %lna0j, !tbaa !2
  store i64 %lna0k, i64* %R1_Var
  %lna0l = load double, double* %ls7yh
  %lna0m = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lna0n = bitcast i64* %lna0m to double*
  store double %lna0l, double* %lna0n, !tbaa !2
  %lna0o = load i64, i64* %R1_Var
  %lna0p = and i64 %lna0o, 7
  %lna0q = icmp ne i64 %lna0p, 0
  br i1 %lna0q, label %u92k, label %c920
c920:
  %lna0s = load i64, i64* %R1_Var
  %lna0t = inttoptr i64 %lna0s to i64*
  %lna0u = load i64, i64* %lna0t, !tbaa !4
  %lna0v = inttoptr i64 %lna0u to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0v( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna0w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92k:
  %lna0x = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91Z_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0x( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna0y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c91Z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c91Z_info$def to i8*)
define internal ghccc void @c91Z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
na0z:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yl = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c91Z
c91Z:
  %lna0A = load i64*, i64** %Hp_Var
  %lna0B = getelementptr inbounds i64, i64* %lna0A, i32 2
  %lna0C = ptrtoint i64* %lna0B to i64
  %lna0D = inttoptr i64 %lna0C to i64*
  store i64* %lna0D, i64** %Hp_Var
  %lna0E = load i64*, i64** %Hp_Var
  %lna0F = ptrtoint i64* %lna0E to i64
  %lna0G = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna0H = bitcast i64* %lna0G to i64*
  %lna0I = load i64, i64* %lna0H, !tbaa !5
  %lna0J = icmp ugt i64 %lna0F, %lna0I
  %lna0K = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna0J, i1 0 )
  br i1 %lna0K, label %c92h, label %c92g
c92g:
  %lna0L = load i64*, i64** %Sp_Var
  %lna0M = getelementptr inbounds i64, i64* %lna0L, i32 1
  %lna0N = bitcast i64* %lna0M to double*
  %lna0O = load double, double* %lna0N, !tbaa !2
  %lna0P = load i64*, i64** %Sp_Var
  %lna0Q = getelementptr inbounds i64, i64* %lna0P, i32 2
  %lna0R = bitcast i64* %lna0Q to double*
  %lna0S = load double, double* %lna0R, !tbaa !2
  %lna0V = load i64, i64* %R1_Var
  %lna0W = add i64 %lna0V, 7
  %lna0X = inttoptr i64 %lna0W to double*
  %lna0Y = load double, double* %lna0X, !tbaa !4
  %lna0Z = fdiv double %lna0S, %lna0Y
  %lna10 = fmul double %lna0O, %lna0Z
  store double %lna10, double* %ls7yl
  %lna12 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lna11 = load i64*, i64** %Hp_Var
  %lna13 = getelementptr inbounds i64, i64* %lna11, i32 -1
  store i64 %lna12, i64* %lna13, !tbaa !3
  %lna15 = load double, double* %ls7yl
  %lna14 = load i64*, i64** %Hp_Var
  %lna16 = getelementptr inbounds i64, i64* %lna14, i32 0
  %lna17 = bitcast i64* %lna16 to double*
  store double %lna15, double* %lna17, !tbaa !3
  %lna19 = load i64*, i64** %Hp_Var
  %lna1a = ptrtoint i64* %lna19 to i64
  %lna1b = add i64 %lna1a, -7
  store i64 %lna1b, i64* %R1_Var
  %lna1c = load i64*, i64** %Sp_Var
  %lna1d = getelementptr inbounds i64, i64* %lna1c, i32 3
  %lna1e = ptrtoint i64* %lna1d to i64
  %lna1f = inttoptr i64 %lna1e to i64*
  store i64* %lna1f, i64** %Sp_Var
  %lna1g = load i64*, i64** %Sp_Var
  %lna1h = getelementptr inbounds i64, i64* %lna1g, i32 0
  %lna1i = bitcast i64* %lna1h to i64*
  %lna1j = load i64, i64* %lna1i, !tbaa !2
  %lna1k = inttoptr i64 %lna1j to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1l = load i64*, i64** %Sp_Var
  %lna1m = load i64*, i64** %Hp_Var
  %lna1n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1k( i64* %Base_Arg, i64* %lna1l, i64* %lna1m, i64 %lna1n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92h:
  %lna1o = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lna1o, !tbaa !5
  %lna1p = load i64, i64* %R1_Var
  store i64 %lna1p, i64* %R1_Var
  %lna1q = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1r = load i64*, i64** %Sp_Var
  %lna1s = load i64*, i64** %Hp_Var
  %lna1t = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1q( i64* %Base_Arg, i64* %lna1r, i64* %lna1s, i64 %lna1t, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7yd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yd_info$def to i8*)
define internal ghccc void @s7yd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
na1u:
  %ls7xS = alloca i64, i32 1
  %ls7xG = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c92s
c92s:
  %lna1v = load i64*, i64** %Sp_Var
  %lna1w = getelementptr inbounds i64, i64* %lna1v, i32 -5
  %lna1x = ptrtoint i64* %lna1w to i64
  %lna1y = icmp ult i64 %lna1x, %SpLim_Arg
  %lna1z = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna1y, i1 0 )
  br i1 %lna1z, label %c92M, label %c92N
c92N:
  %lna1B = ptrtoint i8* @stg_upd_frame_info to i64
  %lna1A = load i64*, i64** %Sp_Var
  %lna1C = getelementptr inbounds i64, i64* %lna1A, i32 -2
  store i64 %lna1B, i64* %lna1C, !tbaa !2
  %lna1E = load i64, i64* %R1_Var
  %lna1D = load i64*, i64** %Sp_Var
  %lna1F = getelementptr inbounds i64, i64* %lna1D, i32 -1
  store i64 %lna1E, i64* %lna1F, !tbaa !2
  %lna1H = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92p_info$def to i64
  %lna1G = load i64*, i64** %Sp_Var
  %lna1I = getelementptr inbounds i64, i64* %lna1G, i32 -5
  store i64 %lna1H, i64* %lna1I, !tbaa !2
  %lna1L = load i64, i64* %R1_Var
  %lna1M = add i64 %lna1L, 16
  %lna1N = inttoptr i64 %lna1M to i64*
  %lna1O = load i64, i64* %lna1N, !tbaa !4
  store i64 %lna1O, i64* %ls7xS
  %lna1R = load i64, i64* %R1_Var
  %lna1S = add i64 %lna1R, 24
  %lna1T = inttoptr i64 %lna1S to i64*
  %lna1U = load i64, i64* %lna1T, !tbaa !4
  store i64 %lna1U, i64* %ls7xG
  %lna1X = load i64, i64* %R1_Var
  %lna1Y = add i64 %lna1X, 32
  %lna1Z = inttoptr i64 %lna1Y to i64*
  %lna20 = load i64, i64* %lna1Z, !tbaa !4
  store i64 %lna20, i64* %R1_Var
  %lna22 = load i64, i64* %ls7xG
  %lna21 = load i64*, i64** %Sp_Var
  %lna23 = getelementptr inbounds i64, i64* %lna21, i32 -4
  store i64 %lna22, i64* %lna23, !tbaa !2
  %lna25 = load i64, i64* %ls7xS
  %lna24 = load i64*, i64** %Sp_Var
  %lna26 = getelementptr inbounds i64, i64* %lna24, i32 -3
  store i64 %lna25, i64* %lna26, !tbaa !2
  %lna27 = load i64*, i64** %Sp_Var
  %lna28 = getelementptr inbounds i64, i64* %lna27, i32 -5
  %lna29 = ptrtoint i64* %lna28 to i64
  %lna2a = inttoptr i64 %lna29 to i64*
  store i64* %lna2a, i64** %Sp_Var
  %lna2b = load i64, i64* %R1_Var
  %lna2c = and i64 %lna2b, 7
  %lna2d = icmp ne i64 %lna2c, 0
  br i1 %lna2d, label %u92U, label %c92q
c92q:
  %lna2f = load i64, i64* %R1_Var
  %lna2g = inttoptr i64 %lna2f to i64*
  %lna2h = load i64, i64* %lna2g, !tbaa !4
  %lna2i = inttoptr i64 %lna2h to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2j = load i64*, i64** %Sp_Var
  %lna2k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2i( i64* %Base_Arg, i64* %lna2j, i64* %Hp_Arg, i64 %lna2k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92U:
  %lna2l = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92p_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2m = load i64*, i64** %Sp_Var
  %lna2n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2l( i64* %Base_Arg, i64* %lna2m, i64* %Hp_Arg, i64 %lna2n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92M:
  %lna2o = load i64, i64* %R1_Var
  store i64 %lna2o, i64* %R1_Var
  %lna2p = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna2q = bitcast i64* %lna2p to i64*
  %lna2r = load i64, i64* %lna2q, !tbaa !5
  %lna2s = inttoptr i64 %lna2r to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2t = load i64*, i64** %Sp_Var
  %lna2u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2s( i64* %Base_Arg, i64* %lna2t, i64* %Hp_Arg, i64 %lna2u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c92p_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92p_info$def to i8*)
define internal ghccc void @c92p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
na2v:
  %ls7y6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c92p
c92p:
  %lna2w = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92v_info$def to i64
  %lna2x = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna2w, i64* %lna2x, !tbaa !2
  %lna2A = load i64, i64* %R1_Var
  %lna2B = add i64 %lna2A, 7
  %lna2C = inttoptr i64 %lna2B to double*
  %lna2D = load double, double* %lna2C, !tbaa !4
  store double %lna2D, double* %ls7y6
  %lna2E = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lna2F = bitcast i64* %lna2E to i64*
  %lna2G = load i64, i64* %lna2F, !tbaa !2
  store i64 %lna2G, i64* %R1_Var
  %lna2H = load double, double* %ls7y6
  %lna2I = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lna2J = bitcast i64* %lna2I to double*
  store double %lna2H, double* %lna2J, !tbaa !2
  %lna2K = load i64, i64* %R1_Var
  %lna2L = and i64 %lna2K, 7
  %lna2M = icmp ne i64 %lna2L, 0
  br i1 %lna2M, label %u92T, label %c92w
c92w:
  %lna2O = load i64, i64* %R1_Var
  %lna2P = inttoptr i64 %lna2O to i64*
  %lna2Q = load i64, i64* %lna2P, !tbaa !4
  %lna2R = inttoptr i64 %lna2Q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2R( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna2S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92T:
  %lna2T = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92v_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2T( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna2U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c92v_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92v_info$def to i8*)
define internal ghccc void @c92v_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
na2V:
  %ls7y8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c92v
c92v:
  %lna2W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92A_info$def to i64
  %lna2X = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna2W, i64* %lna2X, !tbaa !2
  %lna30 = load i64, i64* %R1_Var
  %lna31 = add i64 %lna30, 7
  %lna32 = inttoptr i64 %lna31 to double*
  %lna33 = load double, double* %lna32, !tbaa !4
  store double %lna33, double* %ls7y8
  %lna34 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lna35 = bitcast i64* %lna34 to i64*
  %lna36 = load i64, i64* %lna35, !tbaa !2
  store i64 %lna36, i64* %R1_Var
  %lna37 = load double, double* %ls7y8
  %lna38 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lna39 = bitcast i64* %lna38 to double*
  store double %lna37, double* %lna39, !tbaa !2
  %lna3a = load i64, i64* %R1_Var
  %lna3b = and i64 %lna3a, 7
  %lna3c = icmp ne i64 %lna3b, 0
  br i1 %lna3c, label %u92V, label %c92B
c92B:
  %lna3e = load i64, i64* %R1_Var
  %lna3f = inttoptr i64 %lna3e to i64*
  %lna3g = load i64, i64* %lna3f, !tbaa !4
  %lna3h = inttoptr i64 %lna3g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3h( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna3i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u92V:
  %lna3j = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92A_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3j( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna3k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c92A_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c92A_info$def to i8*)
define internal ghccc void @c92A_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
na3l:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c92A
c92A:
  %lna3m = load i64*, i64** %Hp_Var
  %lna3n = getelementptr inbounds i64, i64* %lna3m, i32 2
  %lna3o = ptrtoint i64* %lna3n to i64
  %lna3p = inttoptr i64 %lna3o to i64*
  store i64* %lna3p, i64** %Hp_Var
  %lna3q = load i64*, i64** %Hp_Var
  %lna3r = ptrtoint i64* %lna3q to i64
  %lna3s = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna3t = bitcast i64* %lna3s to i64*
  %lna3u = load i64, i64* %lna3t, !tbaa !5
  %lna3v = icmp ugt i64 %lna3r, %lna3u
  %lna3w = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna3v, i1 0 )
  br i1 %lna3w, label %c92S, label %c92R
c92R:
  %lna3x = load i64*, i64** %Sp_Var
  %lna3y = getelementptr inbounds i64, i64* %lna3x, i32 1
  %lna3z = bitcast i64* %lna3y to double*
  %lna3A = load double, double* %lna3z, !tbaa !2
  %lna3B = load i64*, i64** %Sp_Var
  %lna3C = getelementptr inbounds i64, i64* %lna3B, i32 2
  %lna3D = bitcast i64* %lna3C to double*
  %lna3E = load double, double* %lna3D, !tbaa !2
  %lna3H = load i64, i64* %R1_Var
  %lna3I = add i64 %lna3H, 7
  %lna3J = inttoptr i64 %lna3I to double*
  %lna3K = load double, double* %lna3J, !tbaa !4
  %lna3L = fdiv double %lna3E, %lna3K
  %lna3M = fmul double %lna3A, %lna3L
  store double %lna3M, double* %ls7yc
  %lna3O = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lna3N = load i64*, i64** %Hp_Var
  %lna3P = getelementptr inbounds i64, i64* %lna3N, i32 -1
  store i64 %lna3O, i64* %lna3P, !tbaa !3
  %lna3R = load double, double* %ls7yc
  %lna3Q = load i64*, i64** %Hp_Var
  %lna3S = getelementptr inbounds i64, i64* %lna3Q, i32 0
  %lna3T = bitcast i64* %lna3S to double*
  store double %lna3R, double* %lna3T, !tbaa !3
  %lna3V = load i64*, i64** %Hp_Var
  %lna3W = ptrtoint i64* %lna3V to i64
  %lna3X = add i64 %lna3W, -7
  store i64 %lna3X, i64* %R1_Var
  %lna3Y = load i64*, i64** %Sp_Var
  %lna3Z = getelementptr inbounds i64, i64* %lna3Y, i32 3
  %lna40 = ptrtoint i64* %lna3Z to i64
  %lna41 = inttoptr i64 %lna40 to i64*
  store i64* %lna41, i64** %Sp_Var
  %lna42 = load i64*, i64** %Sp_Var
  %lna43 = getelementptr inbounds i64, i64* %lna42, i32 0
  %lna44 = bitcast i64* %lna43 to i64*
  %lna45 = load i64, i64* %lna44, !tbaa !2
  %lna46 = inttoptr i64 %lna45 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna47 = load i64*, i64** %Sp_Var
  %lna48 = load i64*, i64** %Hp_Var
  %lna49 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna46( i64* %Base_Arg, i64* %lna47, i64* %lna48, i64 %lna49, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92S:
  %lna4a = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lna4a, !tbaa !5
  %lna4b = load i64, i64* %R1_Var
  store i64 %lna4b, i64* %R1_Var
  %lna4c = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4d = load i64*, i64** %Sp_Var
  %lna4e = load i64*, i64** %Hp_Var
  %lna4f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4c( i64* %Base_Arg, i64* %lna4d, i64* %lna4e, i64 %lna4f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7wS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wS_info$def to i8*)
define internal ghccc void @s7wS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
na4g:
  %ls7v6 = alloca i64, i32 1
  %ls7v5 = alloca i64, i32 1
  %ls7vj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c92W
c92W:
  %lna4h = load i64*, i64** %Sp_Var
  %lna4i = getelementptr inbounds i64, i64* %lna4h, i32 -9
  %lna4j = ptrtoint i64* %lna4i to i64
  %lna4k = icmp ult i64 %lna4j, %SpLim_Arg
  %lna4l = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna4k, i1 0 )
  br i1 %lna4l, label %c92Y, label %c92Z
c92Z:
  %lna4n = ptrtoint i8* @stg_upd_frame_info to i64
  %lna4m = load i64*, i64** %Sp_Var
  %lna4o = getelementptr inbounds i64, i64* %lna4m, i32 -2
  store i64 %lna4n, i64* %lna4o, !tbaa !2
  %lna4q = load i64, i64* %R1_Var
  %lna4p = load i64*, i64** %Sp_Var
  %lna4r = getelementptr inbounds i64, i64* %lna4p, i32 -1
  store i64 %lna4q, i64* %lna4r, !tbaa !2
  %lna4t = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8WY_info$def to i64
  %lna4s = load i64*, i64** %Sp_Var
  %lna4u = getelementptr inbounds i64, i64* %lna4s, i32 -6
  store i64 %lna4t, i64* %lna4u, !tbaa !2
  %lna4x = load i64, i64* %R1_Var
  %lna4y = add i64 %lna4x, 16
  %lna4z = inttoptr i64 %lna4y to i64*
  %lna4A = load i64, i64* %lna4z, !tbaa !4
  store i64 %lna4A, i64* %ls7v6
  %lna4D = load i64, i64* %R1_Var
  %lna4E = add i64 %lna4D, 24
  %lna4F = inttoptr i64 %lna4E to i64*
  %lna4G = load i64, i64* %lna4F, !tbaa !4
  store i64 %lna4G, i64* %ls7v5
  %lna4J = load i64, i64* %R1_Var
  %lna4K = add i64 %lna4J, 32
  %lna4L = inttoptr i64 %lna4K to i64*
  %lna4M = load i64, i64* %lna4L, !tbaa !4
  store i64 %lna4M, i64* %ls7vj
  %lna4P = load i64, i64* %R1_Var
  %lna4Q = add i64 %lna4P, 40
  %lna4R = inttoptr i64 %lna4Q to i64*
  %lna4S = load i64, i64* %lna4R, !tbaa !4
  store i64 %lna4S, i64* %R1_Var
  %lna4U = load i64, i64* %ls7v5
  %lna4T = load i64*, i64** %Sp_Var
  %lna4V = getelementptr inbounds i64, i64* %lna4T, i32 -5
  store i64 %lna4U, i64* %lna4V, !tbaa !2
  %lna4X = load i64, i64* %ls7v6
  %lna4W = load i64*, i64** %Sp_Var
  %lna4Y = getelementptr inbounds i64, i64* %lna4W, i32 -4
  store i64 %lna4X, i64* %lna4Y, !tbaa !2
  %lna50 = load i64, i64* %ls7vj
  %lna4Z = load i64*, i64** %Sp_Var
  %lna51 = getelementptr inbounds i64, i64* %lna4Z, i32 -3
  store i64 %lna50, i64* %lna51, !tbaa !2
  %lna52 = load i64*, i64** %Sp_Var
  %lna53 = getelementptr inbounds i64, i64* %lna52, i32 -6
  %lna54 = ptrtoint i64* %lna53 to i64
  %lna55 = inttoptr i64 %lna54 to i64*
  store i64* %lna55, i64** %Sp_Var
  %lna56 = load i64, i64* %R1_Var
  %lna57 = and i64 %lna56, 7
  %lna58 = icmp ne i64 %lna57, 0
  br i1 %lna58, label %u937, label %c8WZ
c8WZ:
  %lna5a = load i64, i64* %R1_Var
  %lna5b = inttoptr i64 %lna5a to i64*
  %lna5c = load i64, i64* %lna5b, !tbaa !4
  %lna5d = inttoptr i64 %lna5c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5e = load i64*, i64** %Sp_Var
  %lna5f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5d( i64* %Base_Arg, i64* %lna5e, i64* %Hp_Arg, i64 %lna5f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u937:
  %lna5g = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8WY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5h = load i64*, i64** %Sp_Var
  %lna5i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5g( i64* %Base_Arg, i64* %lna5h, i64* %Hp_Arg, i64 %lna5i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c92Y:
  %lna5j = load i64, i64* %R1_Var
  store i64 %lna5j, i64* %R1_Var
  %lna5k = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna5l = bitcast i64* %lna5k to i64*
  %lna5m = load i64, i64* %lna5l, !tbaa !5
  %lna5n = inttoptr i64 %lna5m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5o = load i64*, i64** %Sp_Var
  %lna5p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5n( i64* %Base_Arg, i64* %lna5o, i64* %Hp_Arg, i64 %lna5p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8WY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8WY_info$def to i8*)
define internal ghccc void @c8WY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
na5q:
  %ls7wU = alloca i64, i32 1
  %ls7wV = alloca i64, i32 1
  %ls7wW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8WY
c8WY:
  %lna5s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X3_info$def to i64
  %lna5r = load i64*, i64** %Sp_Var
  %lna5t = getelementptr inbounds i64, i64* %lna5r, i32 -2
  store i64 %lna5s, i64* %lna5t, !tbaa !2
  %lna5w = load i64, i64* %R1_Var
  %lna5x = add i64 %lna5w, 7
  %lna5y = inttoptr i64 %lna5x to i64*
  %lna5z = load i64, i64* %lna5y, !tbaa !4
  store i64 %lna5z, i64* %ls7wU
  %lna5C = load i64, i64* %R1_Var
  %lna5D = add i64 %lna5C, 15
  %lna5E = inttoptr i64 %lna5D to i64*
  %lna5F = load i64, i64* %lna5E, !tbaa !4
  store i64 %lna5F, i64* %ls7wV
  %lna5I = load i64, i64* %R1_Var
  %lna5J = add i64 %lna5I, 23
  %lna5K = inttoptr i64 %lna5J to i64*
  %lna5L = load i64, i64* %lna5K, !tbaa !4
  store i64 %lna5L, i64* %ls7wW
  %lna5M = load i64*, i64** %Sp_Var
  %lna5N = getelementptr inbounds i64, i64* %lna5M, i32 3
  %lna5O = bitcast i64* %lna5N to i64*
  %lna5P = load i64, i64* %lna5O, !tbaa !2
  store i64 %lna5P, i64* %R1_Var
  %lna5R = load i64, i64* %ls7wW
  %lna5Q = load i64*, i64** %Sp_Var
  %lna5S = getelementptr inbounds i64, i64* %lna5Q, i32 -1
  store i64 %lna5R, i64* %lna5S, !tbaa !2
  %lna5U = load i64, i64* %ls7wV
  %lna5T = load i64*, i64** %Sp_Var
  %lna5V = getelementptr inbounds i64, i64* %lna5T, i32 0
  store i64 %lna5U, i64* %lna5V, !tbaa !2
  %lna5X = load i64, i64* %ls7wU
  %lna5W = load i64*, i64** %Sp_Var
  %lna5Y = getelementptr inbounds i64, i64* %lna5W, i32 3
  store i64 %lna5X, i64* %lna5Y, !tbaa !2
  %lna5Z = load i64*, i64** %Sp_Var
  %lna60 = getelementptr inbounds i64, i64* %lna5Z, i32 -2
  %lna61 = ptrtoint i64* %lna60 to i64
  %lna62 = inttoptr i64 %lna61 to i64*
  store i64* %lna62, i64** %Sp_Var
  %lna63 = load i64, i64* %R1_Var
  %lna64 = and i64 %lna63, 7
  %lna65 = icmp ne i64 %lna64, 0
  br i1 %lna65, label %u935, label %c8X4
c8X4:
  %lna67 = load i64, i64* %R1_Var
  %lna68 = inttoptr i64 %lna67 to i64*
  %lna69 = load i64, i64* %lna68, !tbaa !4
  %lna6a = inttoptr i64 %lna69 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6b = load i64*, i64** %Sp_Var
  %lna6c = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6a( i64* %Base_Arg, i64* %lna6b, i64* %Hp_Arg, i64 %lna6c, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u935:
  %lna6d = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6e = load i64*, i64** %Sp_Var
  %lna6f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6d( i64* %Base_Arg, i64* %lna6e, i64* %Hp_Arg, i64 %lna6f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8X3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X3_info$def to i8*)
define internal ghccc void @c8X3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
na6g:
  %ls7wZ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8X3
c8X3:
  %lna6i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X8_info$def to i64
  %lna6h = load i64*, i64** %Sp_Var
  %lna6j = getelementptr inbounds i64, i64* %lna6h, i32 -1
  store i64 %lna6i, i64* %lna6j, !tbaa !2
  %lna6m = load i64, i64* %R1_Var
  %lna6n = add i64 %lna6m, 15
  %lna6o = inttoptr i64 %lna6n to i64*
  %lna6p = load i64, i64* %lna6o, !tbaa !4
  store i64 %lna6p, i64* %ls7wZ
  %lna6s = load i64, i64* %R1_Var
  %lna6t = add i64 %lna6s, 7
  %lna6u = inttoptr i64 %lna6t to i64*
  %lna6v = load i64, i64* %lna6u, !tbaa !4
  store i64 %lna6v, i64* %R1_Var
  %lna6x = load i64, i64* %ls7wZ
  %lna6w = load i64*, i64** %Sp_Var
  %lna6y = getelementptr inbounds i64, i64* %lna6w, i32 0
  store i64 %lna6x, i64* %lna6y, !tbaa !2
  %lna6z = load i64*, i64** %Sp_Var
  %lna6A = getelementptr inbounds i64, i64* %lna6z, i32 -1
  %lna6B = ptrtoint i64* %lna6A to i64
  %lna6C = inttoptr i64 %lna6B to i64*
  store i64* %lna6C, i64** %Sp_Var
  %lna6D = load i64, i64* %R1_Var
  %lna6E = and i64 %lna6D, 7
  %lna6F = icmp ne i64 %lna6E, 0
  br i1 %lna6F, label %u936, label %c8X9
c8X9:
  %lna6H = load i64, i64* %R1_Var
  %lna6I = inttoptr i64 %lna6H to i64*
  %lna6J = load i64, i64* %lna6I, !tbaa !4
  %lna6K = inttoptr i64 %lna6J to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6L = load i64*, i64** %Sp_Var
  %lna6M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6K( i64* %Base_Arg, i64* %lna6L, i64* %Hp_Arg, i64 %lna6M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u936:
  %lna6N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6O = load i64*, i64** %Sp_Var
  %lna6P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6N( i64* %Base_Arg, i64* %lna6O, i64* %Hp_Arg, i64 %lna6P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8X8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8X8_info$def to i8*)
define internal ghccc void @c8X8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 0}>
{
na6Q:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7x1 = alloca i64, i32 1
  %ls7x2 = alloca i64, i32 1
  %ls7x3 = alloca i64, i32 1
  %ls7wV = alloca i64, i32 1
  %ls7wU = alloca i64, i32 1
  %ls7wW = alloca i64, i32 1
  %lc8Y4 = alloca i64, i32 1
  %lc8YP = alloca i64, i32 1
  %lc8ZA = alloca i64, i32 1
  %lc90l = alloca i64, i32 1
  %lc8Xd = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c8X8
c8X8:
  %lna6R = load i64*, i64** %Hp_Var
  %lna6S = getelementptr inbounds i64, i64* %lna6R, i32 47
  %lna6T = ptrtoint i64* %lna6S to i64
  %lna6U = inttoptr i64 %lna6T to i64*
  store i64* %lna6U, i64** %Hp_Var
  %lna6V = load i64*, i64** %Hp_Var
  %lna6W = ptrtoint i64* %lna6V to i64
  %lna6X = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna6Y = bitcast i64* %lna6X to i64*
  %lna6Z = load i64, i64* %lna6Y, !tbaa !5
  %lna70 = icmp ugt i64 %lna6W, %lna6Z
  %lna71 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna70, i1 0 )
  br i1 %lna71, label %c934, label %c933
c933:
  %lna74 = load i64, i64* %R1_Var
  %lna75 = add i64 %lna74, 7
  %lna76 = inttoptr i64 %lna75 to i64*
  %lna77 = load i64, i64* %lna76, !tbaa !4
  store i64 %lna77, i64* %ls7x1
  %lna7a = load i64, i64* %R1_Var
  %lna7b = add i64 %lna7a, 15
  %lna7c = inttoptr i64 %lna7b to i64*
  %lna7d = load i64, i64* %lna7c, !tbaa !4
  store i64 %lna7d, i64* %ls7x2
  %lna7g = load i64, i64* %R1_Var
  %lna7h = add i64 %lna7g, 23
  %lna7i = inttoptr i64 %lna7h to i64*
  %lna7j = load i64, i64* %lna7i, !tbaa !4
  store i64 %lna7j, i64* %ls7x3
  %lna7l = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7x4_info$def to i64
  %lna7k = load i64*, i64** %Hp_Var
  %lna7m = getelementptr inbounds i64, i64* %lna7k, i32 -46
  store i64 %lna7l, i64* %lna7m, !tbaa !3
  %lna7o = load i64*, i64** %Sp_Var
  %lna7p = getelementptr inbounds i64, i64* %lna7o, i32 5
  %lna7q = bitcast i64* %lna7p to i64*
  %lna7r = load i64, i64* %lna7q, !tbaa !2
  %lna7n = load i64*, i64** %Hp_Var
  %lna7s = getelementptr inbounds i64, i64* %lna7n, i32 -44
  store i64 %lna7r, i64* %lna7s, !tbaa !3
  %lna7u = load i64*, i64** %Sp_Var
  %lna7v = getelementptr inbounds i64, i64* %lna7u, i32 4
  %lna7w = bitcast i64* %lna7v to i64*
  %lna7x = load i64, i64* %lna7w, !tbaa !2
  %lna7t = load i64*, i64** %Hp_Var
  %lna7y = getelementptr inbounds i64, i64* %lna7t, i32 -43
  store i64 %lna7x, i64* %lna7y, !tbaa !3
  %lna7A = load i64*, i64** %Sp_Var
  %lna7B = getelementptr inbounds i64, i64* %lna7A, i32 1
  %lna7C = bitcast i64* %lna7B to i64*
  %lna7D = load i64, i64* %lna7C, !tbaa !2
  %lna7z = load i64*, i64** %Hp_Var
  %lna7E = getelementptr inbounds i64, i64* %lna7z, i32 -42
  store i64 %lna7D, i64* %lna7E, !tbaa !3
  %lna7G = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xi_info$def to i64
  %lna7F = load i64*, i64** %Hp_Var
  %lna7H = getelementptr inbounds i64, i64* %lna7F, i32 -41
  store i64 %lna7G, i64* %lna7H, !tbaa !3
  %lna7I = load i64*, i64** %Sp_Var
  %lna7J = getelementptr inbounds i64, i64* %lna7I, i32 3
  %lna7K = bitcast i64* %lna7J to i64*
  %lna7L = load i64, i64* %lna7K, !tbaa !2
  store i64 %lna7L, i64* %ls7wV
  %lna7N = load i64, i64* %ls7wV
  %lna7M = load i64*, i64** %Hp_Var
  %lna7O = getelementptr inbounds i64, i64* %lna7M, i32 -39
  store i64 %lna7N, i64* %lna7O, !tbaa !3
  %lna7Q = load i64, i64* %ls7x1
  %lna7P = load i64*, i64** %Hp_Var
  %lna7R = getelementptr inbounds i64, i64* %lna7P, i32 -38
  store i64 %lna7Q, i64* %lna7R, !tbaa !3
  %lna7T = load i64, i64* %ls7x2
  %lna7S = load i64*, i64** %Hp_Var
  %lna7U = getelementptr inbounds i64, i64* %lna7S, i32 -37
  store i64 %lna7T, i64* %lna7U, !tbaa !3
  %lna7V = load i64*, i64** %Sp_Var
  %lna7W = getelementptr inbounds i64, i64* %lna7V, i32 6
  %lna7X = bitcast i64* %lna7W to i64*
  %lna7Y = load i64, i64* %lna7X, !tbaa !2
  store i64 %lna7Y, i64* %ls7wU
  %lna80 = load i64, i64* %ls7wU
  %lna7Z = load i64*, i64** %Hp_Var
  %lna81 = getelementptr inbounds i64, i64* %lna7Z, i32 -36
  store i64 %lna80, i64* %lna81, !tbaa !3
  %lna83 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xu_info$def to i64
  %lna82 = load i64*, i64** %Hp_Var
  %lna84 = getelementptr inbounds i64, i64* %lna82, i32 -35
  store i64 %lna83, i64* %lna84, !tbaa !3
  %lna86 = load i64, i64* %ls7wU
  %lna85 = load i64*, i64** %Hp_Var
  %lna87 = getelementptr inbounds i64, i64* %lna85, i32 -33
  store i64 %lna86, i64* %lna87, !tbaa !3
  %lna89 = load i64, i64* %ls7x3
  %lna88 = load i64*, i64** %Hp_Var
  %lna8a = getelementptr inbounds i64, i64* %lna88, i32 -32
  store i64 %lna89, i64* %lna8a, !tbaa !3
  %lna8c = load i64, i64* %ls7x1
  %lna8b = load i64*, i64** %Hp_Var
  %lna8d = getelementptr inbounds i64, i64* %lna8b, i32 -31
  store i64 %lna8c, i64* %lna8d, !tbaa !3
  %lna8e = load i64*, i64** %Sp_Var
  %lna8f = getelementptr inbounds i64, i64* %lna8e, i32 2
  %lna8g = bitcast i64* %lna8f to i64*
  %lna8h = load i64, i64* %lna8g, !tbaa !2
  store i64 %lna8h, i64* %ls7wW
  %lna8j = load i64, i64* %ls7wW
  %lna8i = load i64*, i64** %Hp_Var
  %lna8k = getelementptr inbounds i64, i64* %lna8i, i32 -30
  store i64 %lna8j, i64* %lna8k, !tbaa !3
  %lna8m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xG_info$def to i64
  %lna8l = load i64*, i64** %Hp_Var
  %lna8n = getelementptr inbounds i64, i64* %lna8l, i32 -29
  store i64 %lna8m, i64* %lna8n, !tbaa !3
  %lna8p = load i64, i64* %ls7wW
  %lna8o = load i64*, i64** %Hp_Var
  %lna8q = getelementptr inbounds i64, i64* %lna8o, i32 -27
  store i64 %lna8p, i64* %lna8q, !tbaa !3
  %lna8s = load i64, i64* %ls7x2
  %lna8r = load i64*, i64** %Hp_Var
  %lna8t = getelementptr inbounds i64, i64* %lna8r, i32 -26
  store i64 %lna8s, i64* %lna8t, !tbaa !3
  %lna8v = load i64, i64* %ls7x3
  %lna8u = load i64*, i64** %Hp_Var
  %lna8w = getelementptr inbounds i64, i64* %lna8u, i32 -25
  store i64 %lna8v, i64* %lna8w, !tbaa !3
  %lna8y = load i64, i64* %ls7wV
  %lna8x = load i64*, i64** %Hp_Var
  %lna8z = getelementptr inbounds i64, i64* %lna8x, i32 -24
  store i64 %lna8y, i64* %lna8z, !tbaa !3
  %lna8B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7xS_info$def to i64
  %lna8A = load i64*, i64** %Hp_Var
  %lna8C = getelementptr inbounds i64, i64* %lna8A, i32 -23
  store i64 %lna8B, i64* %lna8C, !tbaa !3
  %lna8D = load i64*, i64** %Hp_Var
  %lna8E = getelementptr inbounds i64, i64* %lna8D, i32 -41
  %lna8F = ptrtoint i64* %lna8E to i64
  store i64 %lna8F, i64* %lc8Y4
  %lna8H = load i64, i64* %lc8Y4
  %lna8G = load i64*, i64** %Hp_Var
  %lna8I = getelementptr inbounds i64, i64* %lna8G, i32 -21
  store i64 %lna8H, i64* %lna8I, !tbaa !3
  %lna8J = load i64*, i64** %Hp_Var
  %lna8K = getelementptr inbounds i64, i64* %lna8J, i32 -35
  %lna8L = ptrtoint i64* %lna8K to i64
  store i64 %lna8L, i64* %lc8YP
  %lna8N = load i64, i64* %lc8YP
  %lna8M = load i64*, i64** %Hp_Var
  %lna8O = getelementptr inbounds i64, i64* %lna8M, i32 -20
  store i64 %lna8N, i64* %lna8O, !tbaa !3
  %lna8P = load i64*, i64** %Hp_Var
  %lna8Q = getelementptr inbounds i64, i64* %lna8P, i32 -29
  %lna8R = ptrtoint i64* %lna8Q to i64
  store i64 %lna8R, i64* %lc8ZA
  %lna8T = load i64, i64* %lc8ZA
  %lna8S = load i64*, i64** %Hp_Var
  %lna8U = getelementptr inbounds i64, i64* %lna8S, i32 -19
  store i64 %lna8T, i64* %lna8U, !tbaa !3
  %lna8W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yv_info$def to i64
  %lna8V = load i64*, i64** %Hp_Var
  %lna8X = getelementptr inbounds i64, i64* %lna8V, i32 -18
  store i64 %lna8W, i64* %lna8X, !tbaa !3
  %lna8Y = load i64*, i64** %Hp_Var
  %lna8Z = getelementptr inbounds i64, i64* %lna8Y, i32 -23
  %lna90 = ptrtoint i64* %lna8Z to i64
  store i64 %lna90, i64* %lc90l
  %lna92 = load i64, i64* %lc90l
  %lna91 = load i64*, i64** %Hp_Var
  %lna93 = getelementptr inbounds i64, i64* %lna91, i32 -16
  store i64 %lna92, i64* %lna93, !tbaa !3
  %lna95 = load i64, i64* %lc8Y4
  %lna94 = load i64*, i64** %Hp_Var
  %lna96 = getelementptr inbounds i64, i64* %lna94, i32 -15
  store i64 %lna95, i64* %lna96, !tbaa !3
  %lna97 = load i64*, i64** %Hp_Var
  %lna98 = getelementptr inbounds i64, i64* %lna97, i32 -46
  %lna99 = ptrtoint i64* %lna98 to i64
  store i64 %lna99, i64* %lc8Xd
  %lna9b = load i64, i64* %lc8Xd
  %lna9a = load i64*, i64** %Hp_Var
  %lna9c = getelementptr inbounds i64, i64* %lna9a, i32 -14
  store i64 %lna9b, i64* %lna9c, !tbaa !3
  %lna9e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7ym_info$def to i64
  %lna9d = load i64*, i64** %Hp_Var
  %lna9f = getelementptr inbounds i64, i64* %lna9d, i32 -13
  store i64 %lna9e, i64* %lna9f, !tbaa !3
  %lna9h = load i64, i64* %lc90l
  %lna9g = load i64*, i64** %Hp_Var
  %lna9i = getelementptr inbounds i64, i64* %lna9g, i32 -11
  store i64 %lna9h, i64* %lna9i, !tbaa !3
  %lna9k = load i64, i64* %lc8YP
  %lna9j = load i64*, i64** %Hp_Var
  %lna9l = getelementptr inbounds i64, i64* %lna9j, i32 -10
  store i64 %lna9k, i64* %lna9l, !tbaa !3
  %lna9n = load i64, i64* %lc8Xd
  %lna9m = load i64*, i64** %Hp_Var
  %lna9o = getelementptr inbounds i64, i64* %lna9m, i32 -9
  store i64 %lna9n, i64* %lna9o, !tbaa !3
  %lna9q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yd_info$def to i64
  %lna9p = load i64*, i64** %Hp_Var
  %lna9r = getelementptr inbounds i64, i64* %lna9p, i32 -8
  store i64 %lna9q, i64* %lna9r, !tbaa !3
  %lna9t = load i64, i64* %lc90l
  %lna9s = load i64*, i64** %Hp_Var
  %lna9u = getelementptr inbounds i64, i64* %lna9s, i32 -6
  store i64 %lna9t, i64* %lna9u, !tbaa !3
  %lna9w = load i64, i64* %lc8ZA
  %lna9v = load i64*, i64** %Hp_Var
  %lna9x = getelementptr inbounds i64, i64* %lna9v, i32 -5
  store i64 %lna9w, i64* %lna9x, !tbaa !3
  %lna9z = load i64, i64* %lc8Xd
  %lna9y = load i64*, i64** %Hp_Var
  %lna9A = getelementptr inbounds i64, i64* %lna9y, i32 -4
  store i64 %lna9z, i64* %lna9A, !tbaa !3
  %lna9C = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lna9B = load i64*, i64** %Hp_Var
  %lna9D = getelementptr inbounds i64, i64* %lna9B, i32 -3
  store i64 %lna9C, i64* %lna9D, !tbaa !3
  %lna9F = load i64*, i64** %Hp_Var
  %lna9G = getelementptr inbounds i64, i64* %lna9F, i32 -8
  %lna9H = ptrtoint i64* %lna9G to i64
  %lna9E = load i64*, i64** %Hp_Var
  %lna9I = getelementptr inbounds i64, i64* %lna9E, i32 -2
  store i64 %lna9H, i64* %lna9I, !tbaa !3
  %lna9K = load i64*, i64** %Hp_Var
  %lna9L = getelementptr inbounds i64, i64* %lna9K, i32 -13
  %lna9M = ptrtoint i64* %lna9L to i64
  %lna9J = load i64*, i64** %Hp_Var
  %lna9N = getelementptr inbounds i64, i64* %lna9J, i32 -1
  store i64 %lna9M, i64* %lna9N, !tbaa !3
  %lna9P = load i64*, i64** %Hp_Var
  %lna9Q = getelementptr inbounds i64, i64* %lna9P, i32 -18
  %lna9R = ptrtoint i64* %lna9Q to i64
  %lna9O = load i64*, i64** %Hp_Var
  %lna9S = getelementptr inbounds i64, i64* %lna9O, i32 0
  store i64 %lna9R, i64* %lna9S, !tbaa !3
  %lna9U = load i64*, i64** %Hp_Var
  %lna9V = ptrtoint i64* %lna9U to i64
  %lna9W = add i64 %lna9V, -23
  store i64 %lna9W, i64* %R1_Var
  %lna9X = load i64*, i64** %Sp_Var
  %lna9Y = getelementptr inbounds i64, i64* %lna9X, i32 7
  %lna9Z = ptrtoint i64* %lna9Y to i64
  %lnaa0 = inttoptr i64 %lna9Z to i64*
  store i64* %lnaa0, i64** %Sp_Var
  %lnaa1 = load i64*, i64** %Sp_Var
  %lnaa2 = getelementptr inbounds i64, i64* %lnaa1, i32 0
  %lnaa3 = bitcast i64* %lnaa2 to i64*
  %lnaa4 = load i64, i64* %lnaa3, !tbaa !2
  %lnaa5 = inttoptr i64 %lnaa4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaa6 = load i64*, i64** %Sp_Var
  %lnaa7 = load i64*, i64** %Hp_Var
  %lnaa8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaa5( i64* %Base_Arg, i64* %lnaa6, i64* %lnaa7, i64 %lnaa8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c934:
  %lnaa9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 376, i64* %lnaa9, !tbaa !5
  %lnaaa = load i64, i64* %R1_Var
  store i64 %lnaaa, i64* %R1_Var
  %lnaab = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaac = load i64*, i64** %Sp_Var
  %lnaad = load i64*, i64** %Hp_Var
  %lnaae = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaab( i64* %Base_Arg, i64* %lnaac, i64* %lnaad, i64 %lnaae, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7yI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yI_info$def to i8*)
define internal ghccc void @s7yI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
naaf:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93y
c93y:
  %lnaag = load i64*, i64** %Sp_Var
  %lnaah = getelementptr inbounds i64, i64* %lnaag, i32 -3
  %lnaai = ptrtoint i64* %lnaah to i64
  %lnaaj = icmp ult i64 %lnaai, %SpLim_Arg
  %lnaak = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaaj, i1 0 )
  br i1 %lnaak, label %c93F, label %c93G
c93G:
  %lnaam = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaal = load i64*, i64** %Sp_Var
  %lnaan = getelementptr inbounds i64, i64* %lnaal, i32 -2
  store i64 %lnaam, i64* %lnaan, !tbaa !2
  %lnaap = load i64, i64* %R1_Var
  %lnaao = load i64*, i64** %Sp_Var
  %lnaaq = getelementptr inbounds i64, i64* %lnaao, i32 -1
  store i64 %lnaap, i64* %lnaaq, !tbaa !2
  %lnaas = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93v_info$def to i64
  %lnaar = load i64*, i64** %Sp_Var
  %lnaat = getelementptr inbounds i64, i64* %lnaar, i32 -3
  store i64 %lnaas, i64* %lnaat, !tbaa !2
  %lnaaw = load i64, i64* %R1_Var
  %lnaax = add i64 %lnaaw, 16
  %lnaay = inttoptr i64 %lnaax to i64*
  %lnaaz = load i64, i64* %lnaay, !tbaa !4
  store i64 %lnaaz, i64* %R1_Var
  %lnaaA = load i64*, i64** %Sp_Var
  %lnaaB = getelementptr inbounds i64, i64* %lnaaA, i32 -3
  %lnaaC = ptrtoint i64* %lnaaB to i64
  %lnaaD = inttoptr i64 %lnaaC to i64*
  store i64* %lnaaD, i64** %Sp_Var
  %lnaaE = load i64, i64* %R1_Var
  %lnaaF = and i64 %lnaaE, 7
  %lnaaG = icmp ne i64 %lnaaF, 0
  br i1 %lnaaG, label %u93K, label %c93w
c93w:
  %lnaaI = load i64, i64* %R1_Var
  %lnaaJ = inttoptr i64 %lnaaI to i64*
  %lnaaK = load i64, i64* %lnaaJ, !tbaa !4
  %lnaaL = inttoptr i64 %lnaaK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaM = load i64*, i64** %Sp_Var
  %lnaaN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaL( i64* %Base_Arg, i64* %lnaaM, i64* %Hp_Arg, i64 %lnaaN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u93K:
  %lnaaO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93v_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaP = load i64*, i64** %Sp_Var
  %lnaaQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaO( i64* %Base_Arg, i64* %lnaaP, i64* %Hp_Arg, i64 %lnaaQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c93F:
  %lnaaR = load i64, i64* %R1_Var
  store i64 %lnaaR, i64* %R1_Var
  %lnaaS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaaT = bitcast i64* %lnaaS to i64*
  %lnaaU = load i64, i64* %lnaaT, !tbaa !5
  %lnaaV = inttoptr i64 %lnaaU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaW = load i64*, i64** %Sp_Var
  %lnaaX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaV( i64* %Base_Arg, i64* %lnaaW, i64* %Hp_Arg, i64 %lnaaX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93v_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93v_info$def to i8*)
define internal ghccc void @c93v_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
naaY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yL = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93v
c93v:
  %lnaaZ = load i64*, i64** %Hp_Var
  %lnab0 = getelementptr inbounds i64, i64* %lnaaZ, i32 2
  %lnab1 = ptrtoint i64* %lnab0 to i64
  %lnab2 = inttoptr i64 %lnab1 to i64*
  store i64* %lnab2, i64** %Hp_Var
  %lnab3 = load i64*, i64** %Hp_Var
  %lnab4 = ptrtoint i64* %lnab3 to i64
  %lnab5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnab6 = bitcast i64* %lnab5 to i64*
  %lnab7 = load i64, i64* %lnab6, !tbaa !5
  %lnab8 = icmp ugt i64 %lnab4, %lnab7
  %lnab9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnab8, i1 0 )
  br i1 %lnab9, label %c93J, label %c93I
c93I:
  %lnabc = load i64, i64* %R1_Var
  %lnabd = add i64 %lnabc, 7
  %lnabe = inttoptr i64 %lnabd to double*
  %lnabf = load double, double* %lnabe, !tbaa !4
  %lnabg = fmul double %lnabf, 0x3FE0000000000000
  store double %lnabg, double* %ls7yL
  %lnabi = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnabh = load i64*, i64** %Hp_Var
  %lnabj = getelementptr inbounds i64, i64* %lnabh, i32 -1
  store i64 %lnabi, i64* %lnabj, !tbaa !3
  %lnabl = load double, double* %ls7yL
  %lnabk = load i64*, i64** %Hp_Var
  %lnabm = getelementptr inbounds i64, i64* %lnabk, i32 0
  %lnabn = bitcast i64* %lnabm to double*
  store double %lnabl, double* %lnabn, !tbaa !3
  %lnabp = load i64*, i64** %Hp_Var
  %lnabq = ptrtoint i64* %lnabp to i64
  %lnabr = add i64 %lnabq, -7
  store i64 %lnabr, i64* %R1_Var
  %lnabs = load i64*, i64** %Sp_Var
  %lnabt = getelementptr inbounds i64, i64* %lnabs, i32 1
  %lnabu = ptrtoint i64* %lnabt to i64
  %lnabv = inttoptr i64 %lnabu to i64*
  store i64* %lnabv, i64** %Sp_Var
  %lnabw = load i64*, i64** %Sp_Var
  %lnabx = getelementptr inbounds i64, i64* %lnabw, i32 0
  %lnaby = bitcast i64* %lnabx to i64*
  %lnabz = load i64, i64* %lnaby, !tbaa !2
  %lnabA = inttoptr i64 %lnabz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnabB = load i64*, i64** %Sp_Var
  %lnabC = load i64*, i64** %Hp_Var
  %lnabD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnabA( i64* %Base_Arg, i64* %lnabB, i64* %lnabC, i64 %lnabD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c93J:
  %lnabE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnabE, !tbaa !5
  %lnabF = load i64, i64* %R1_Var
  store i64 %lnabF, i64* %R1_Var
  %lnabG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnabH = load i64*, i64** %Sp_Var
  %lnabI = load i64*, i64** %Hp_Var
  %lnabJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnabG( i64* %Base_Arg, i64* %lnabH, i64* %lnabI, i64 %lnabJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7zo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zo_info$def to i8*)
define internal ghccc void @s7zo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nabK:
  %ls7yH = alloca i64, i32 1
  %ls7yD = alloca i64, i32 1
  %ls7yI = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93S
c93S:
  %lnabL = load i64*, i64** %Sp_Var
  %lnabM = getelementptr inbounds i64, i64* %lnabL, i32 -6
  %lnabN = ptrtoint i64* %lnabM to i64
  %lnabO = icmp ult i64 %lnabN, %SpLim_Arg
  %lnabP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnabO, i1 0 )
  br i1 %lnabP, label %c94n, label %c94o
c94o:
  %lnabR = ptrtoint i8* @stg_upd_frame_info to i64
  %lnabQ = load i64*, i64** %Sp_Var
  %lnabS = getelementptr inbounds i64, i64* %lnabQ, i32 -2
  store i64 %lnabR, i64* %lnabS, !tbaa !2
  %lnabU = load i64, i64* %R1_Var
  %lnabT = load i64*, i64** %Sp_Var
  %lnabV = getelementptr inbounds i64, i64* %lnabT, i32 -1
  store i64 %lnabU, i64* %lnabV, !tbaa !2
  %lnabX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93P_info$def to i64
  %lnabW = load i64*, i64** %Sp_Var
  %lnabY = getelementptr inbounds i64, i64* %lnabW, i32 -6
  store i64 %lnabX, i64* %lnabY, !tbaa !2
  %lnac1 = load i64, i64* %R1_Var
  %lnac2 = add i64 %lnac1, 16
  %lnac3 = inttoptr i64 %lnac2 to i64*
  %lnac4 = load i64, i64* %lnac3, !tbaa !4
  store i64 %lnac4, i64* %ls7yH
  %lnac7 = load i64, i64* %R1_Var
  %lnac8 = add i64 %lnac7, 24
  %lnac9 = inttoptr i64 %lnac8 to i64*
  %lnaca = load i64, i64* %lnac9, !tbaa !4
  store i64 %lnaca, i64* %ls7yD
  %lnacd = load i64, i64* %R1_Var
  %lnace = add i64 %lnacd, 32
  %lnacf = inttoptr i64 %lnace to i64*
  %lnacg = load i64, i64* %lnacf, !tbaa !4
  store i64 %lnacg, i64* %ls7yI
  %lnacj = load i64, i64* %R1_Var
  %lnack = add i64 %lnacj, 40
  %lnacl = inttoptr i64 %lnack to i64*
  %lnacm = load i64, i64* %lnacl, !tbaa !4
  store i64 %lnacm, i64* %R1_Var
  %lnaco = load i64, i64* %ls7yD
  %lnacn = load i64*, i64** %Sp_Var
  %lnacp = getelementptr inbounds i64, i64* %lnacn, i32 -5
  store i64 %lnaco, i64* %lnacp, !tbaa !2
  %lnacr = load i64, i64* %ls7yH
  %lnacq = load i64*, i64** %Sp_Var
  %lnacs = getelementptr inbounds i64, i64* %lnacq, i32 -4
  store i64 %lnacr, i64* %lnacs, !tbaa !2
  %lnacu = load i64, i64* %ls7yI
  %lnact = load i64*, i64** %Sp_Var
  %lnacv = getelementptr inbounds i64, i64* %lnact, i32 -3
  store i64 %lnacu, i64* %lnacv, !tbaa !2
  %lnacw = load i64*, i64** %Sp_Var
  %lnacx = getelementptr inbounds i64, i64* %lnacw, i32 -6
  %lnacy = ptrtoint i64* %lnacx to i64
  %lnacz = inttoptr i64 %lnacy to i64*
  store i64* %lnacz, i64** %Sp_Var
  %lnacA = load i64, i64* %R1_Var
  %lnacB = and i64 %lnacA, 7
  %lnacC = icmp ne i64 %lnacB, 0
  br i1 %lnacC, label %u94w, label %c93Q
c93Q:
  %lnacE = load i64, i64* %R1_Var
  %lnacF = inttoptr i64 %lnacE to i64*
  %lnacG = load i64, i64* %lnacF, !tbaa !4
  %lnacH = inttoptr i64 %lnacG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacI = load i64*, i64** %Sp_Var
  %lnacJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacH( i64* %Base_Arg, i64* %lnacI, i64* %Hp_Arg, i64 %lnacJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u94w:
  %lnacK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93P_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacL = load i64*, i64** %Sp_Var
  %lnacM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacK( i64* %Base_Arg, i64* %lnacL, i64* %Hp_Arg, i64 %lnacM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c94n:
  %lnacN = load i64, i64* %R1_Var
  store i64 %lnacN, i64* %R1_Var
  %lnacO = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnacP = bitcast i64* %lnacO to i64*
  %lnacQ = load i64, i64* %lnacP, !tbaa !5
  %lnacR = inttoptr i64 %lnacQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacS = load i64*, i64** %Sp_Var
  %lnacT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacR( i64* %Base_Arg, i64* %lnacS, i64* %Hp_Arg, i64 %lnacT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93P_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93P_info$def to i8*)
define internal ghccc void @c93P_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nacU:
  %ls7zd = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c93P
c93P:
  %lnacV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93V_info$def to i64
  %lnacW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnacV, i64* %lnacW, !tbaa !2
  %lnacZ = load i64, i64* %R1_Var
  %lnad0 = add i64 %lnacZ, 7
  %lnad1 = inttoptr i64 %lnad0 to double*
  %lnad2 = load double, double* %lnad1, !tbaa !4
  store double %lnad2, double* %ls7zd
  %lnad3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnad4 = bitcast i64* %lnad3 to i64*
  %lnad5 = load i64, i64* %lnad4, !tbaa !2
  store i64 %lnad5, i64* %R1_Var
  %lnad6 = load double, double* %ls7zd
  %lnad7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnad8 = bitcast i64* %lnad7 to double*
  store double %lnad6, double* %lnad8, !tbaa !2
  %lnad9 = load i64, i64* %R1_Var
  %lnada = and i64 %lnad9, 7
  %lnadb = icmp ne i64 %lnada, 0
  br i1 %lnadb, label %u94v, label %c93W
c93W:
  %lnadd = load i64, i64* %R1_Var
  %lnade = inttoptr i64 %lnadd to i64*
  %lnadf = load i64, i64* %lnade, !tbaa !4
  %lnadg = inttoptr i64 %lnadf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnadh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u94v:
  %lnadi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93V_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnadj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93V_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93V_info$def to i8*)
define internal ghccc void @c93V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
nadk:
  %ls7zf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c93V
c93V:
  %lnadl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c940_info$def to i64
  %lnadm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnadl, i64* %lnadm, !tbaa !2
  %lnadp = load i64, i64* %R1_Var
  %lnadq = add i64 %lnadp, 7
  %lnadr = inttoptr i64 %lnadq to double*
  %lnads = load double, double* %lnadr, !tbaa !4
  store double %lnads, double* %ls7zf
  %lnadt = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnadu = bitcast i64* %lnadt to i64*
  %lnadv = load i64, i64* %lnadu, !tbaa !2
  store i64 %lnadv, i64* %R1_Var
  %lnadw = load double, double* %ls7zf
  %lnadx = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnady = bitcast i64* %lnadx to double*
  store double %lnadw, double* %lnady, !tbaa !2
  %lnadz = load i64, i64* %R1_Var
  %lnadA = and i64 %lnadz, 7
  %lnadB = icmp ne i64 %lnadA, 0
  br i1 %lnadB, label %u94x, label %c941
c941:
  %lnadD = load i64, i64* %R1_Var
  %lnadE = inttoptr i64 %lnadD to i64*
  %lnadF = load i64, i64* %lnadE, !tbaa !4
  %lnadG = inttoptr i64 %lnadF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnadH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u94x:
  %lnadI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c940_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnadJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c940_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c940_info$def to i8*)
define internal ghccc void @c940_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 0}>
{
nadK:
  %ls7zh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c940
c940:
  %lnadL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c945_info$def to i64
  %lnadM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnadL, i64* %lnadM, !tbaa !2
  %lnadP = load i64, i64* %R1_Var
  %lnadQ = add i64 %lnadP, 7
  %lnadR = inttoptr i64 %lnadQ to double*
  %lnadS = load double, double* %lnadR, !tbaa !4
  store double %lnadS, double* %ls7zh
  %lnadT = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnadU = bitcast i64* %lnadT to i64*
  %lnadV = load i64, i64* %lnadU, !tbaa !2
  store i64 %lnadV, i64* %R1_Var
  %lnadW = load double, double* %ls7zh
  %lnadX = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnadY = bitcast i64* %lnadX to double*
  store double %lnadW, double* %lnadY, !tbaa !2
  %lnadZ = load i64, i64* %R1_Var
  %lnae0 = and i64 %lnadZ, 7
  %lnae1 = icmp ne i64 %lnae0, 0
  br i1 %lnae1, label %u94y, label %c946
c946:
  %lnae3 = load i64, i64* %R1_Var
  %lnae4 = inttoptr i64 %lnae3 to i64*
  %lnae5 = load i64, i64* %lnae4, !tbaa !4
  %lnae6 = inttoptr i64 %lnae5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnae7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnae6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnae7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u94y:
  %lnae8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c945_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnae9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnae8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnae9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c945_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c945_info$def to i8*)
define internal ghccc void @c945_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
naea:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7zf = alloca double, i32 1
  %ls7zn = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c945
c945:
  %lnaeb = load i64*, i64** %Hp_Var
  %lnaec = getelementptr inbounds i64, i64* %lnaeb, i32 2
  %lnaed = ptrtoint i64* %lnaec to i64
  %lnaee = inttoptr i64 %lnaed to i64*
  store i64* %lnaee, i64** %Hp_Var
  %lnaef = load i64*, i64** %Hp_Var
  %lnaeg = ptrtoint i64* %lnaef to i64
  %lnaeh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaei = bitcast i64* %lnaeh to i64*
  %lnaej = load i64, i64* %lnaei, !tbaa !5
  %lnaek = icmp ugt i64 %lnaeg, %lnaej
  %lnael = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaek, i1 0 )
  br i1 %lnael, label %c94u, label %c94t
c94t:
  %lnaem = load i64*, i64** %Sp_Var
  %lnaen = getelementptr inbounds i64, i64* %lnaem, i32 1
  %lnaeo = bitcast i64* %lnaen to double*
  %lnaep = load double, double* %lnaeo, !tbaa !2
  store double %lnaep, double* %ls7zf
  %lnaeq = load i64*, i64** %Sp_Var
  %lnaer = getelementptr inbounds i64, i64* %lnaeq, i32 3
  %lnaes = bitcast i64* %lnaer to double*
  %lnaet = load double, double* %lnaes, !tbaa !2
  %lnaeu = load double, double* %ls7zf
  %lnaev = load i64*, i64** %Sp_Var
  %lnaew = getelementptr inbounds i64, i64* %lnaev, i32 2
  %lnaex = bitcast i64* %lnaew to double*
  %lnaey = load double, double* %lnaex, !tbaa !2
  %lnaez = fmul double %lnaeu, %lnaey
  %lnaeA = load double, double* %ls7zf
  %lnaeD = load i64, i64* %R1_Var
  %lnaeE = add i64 %lnaeD, 7
  %lnaeF = inttoptr i64 %lnaeE to double*
  %lnaeG = load double, double* %lnaeF, !tbaa !4
  %lnaeH = fmul double %lnaeA, %lnaeG
  %lnaeI = fadd double %lnaez, %lnaeH
  %lnaeJ = fsub double %lnaet, %lnaeI
  store double %lnaeJ, double* %ls7zn
  %lnaeL = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnaeK = load i64*, i64** %Hp_Var
  %lnaeM = getelementptr inbounds i64, i64* %lnaeK, i32 -1
  store i64 %lnaeL, i64* %lnaeM, !tbaa !3
  %lnaeO = load double, double* %ls7zn
  %lnaeN = load i64*, i64** %Hp_Var
  %lnaeP = getelementptr inbounds i64, i64* %lnaeN, i32 0
  %lnaeQ = bitcast i64* %lnaeP to double*
  store double %lnaeO, double* %lnaeQ, !tbaa !3
  %lnaeS = load i64*, i64** %Hp_Var
  %lnaeT = ptrtoint i64* %lnaeS to i64
  %lnaeU = add i64 %lnaeT, -7
  store i64 %lnaeU, i64* %R1_Var
  %lnaeV = load i64*, i64** %Sp_Var
  %lnaeW = getelementptr inbounds i64, i64* %lnaeV, i32 4
  %lnaeX = ptrtoint i64* %lnaeW to i64
  %lnaeY = inttoptr i64 %lnaeX to i64*
  store i64* %lnaeY, i64** %Sp_Var
  %lnaeZ = load i64*, i64** %Sp_Var
  %lnaf0 = getelementptr inbounds i64, i64* %lnaeZ, i32 0
  %lnaf1 = bitcast i64* %lnaf0 to i64*
  %lnaf2 = load i64, i64* %lnaf1, !tbaa !2
  %lnaf3 = inttoptr i64 %lnaf2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaf4 = load i64*, i64** %Sp_Var
  %lnaf5 = load i64*, i64** %Hp_Var
  %lnaf6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaf3( i64* %Base_Arg, i64* %lnaf4, i64* %lnaf5, i64 %lnaf6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c94u:
  %lnaf7 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnaf7, !tbaa !5
  %lnaf8 = load i64, i64* %R1_Var
  store i64 %lnaf8, i64* %R1_Var
  %lnaf9 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafa = load i64*, i64** %Sp_Var
  %lnafb = load i64*, i64** %Hp_Var
  %lnafc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaf9( i64* %Base_Arg, i64* %lnafa, i64* %lnafb, i64 %lnafc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7zb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zb_info$def to i8*)
define internal ghccc void @s7zb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nafd:
  %ls7yG = alloca i64, i32 1
  %ls7yC = alloca i64, i32 1
  %ls7yI = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c94G
c94G:
  %lnafe = load i64*, i64** %Sp_Var
  %lnaff = getelementptr inbounds i64, i64* %lnafe, i32 -6
  %lnafg = ptrtoint i64* %lnaff to i64
  %lnafh = icmp ult i64 %lnafg, %SpLim_Arg
  %lnafi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnafh, i1 0 )
  br i1 %lnafi, label %c95b, label %c95c
c95c:
  %lnafk = ptrtoint i8* @stg_upd_frame_info to i64
  %lnafj = load i64*, i64** %Sp_Var
  %lnafl = getelementptr inbounds i64, i64* %lnafj, i32 -2
  store i64 %lnafk, i64* %lnafl, !tbaa !2
  %lnafn = load i64, i64* %R1_Var
  %lnafm = load i64*, i64** %Sp_Var
  %lnafo = getelementptr inbounds i64, i64* %lnafm, i32 -1
  store i64 %lnafn, i64* %lnafo, !tbaa !2
  %lnafq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94D_info$def to i64
  %lnafp = load i64*, i64** %Sp_Var
  %lnafr = getelementptr inbounds i64, i64* %lnafp, i32 -6
  store i64 %lnafq, i64* %lnafr, !tbaa !2
  %lnafu = load i64, i64* %R1_Var
  %lnafv = add i64 %lnafu, 16
  %lnafw = inttoptr i64 %lnafv to i64*
  %lnafx = load i64, i64* %lnafw, !tbaa !4
  store i64 %lnafx, i64* %ls7yG
  %lnafA = load i64, i64* %R1_Var
  %lnafB = add i64 %lnafA, 24
  %lnafC = inttoptr i64 %lnafB to i64*
  %lnafD = load i64, i64* %lnafC, !tbaa !4
  store i64 %lnafD, i64* %ls7yC
  %lnafG = load i64, i64* %R1_Var
  %lnafH = add i64 %lnafG, 32
  %lnafI = inttoptr i64 %lnafH to i64*
  %lnafJ = load i64, i64* %lnafI, !tbaa !4
  store i64 %lnafJ, i64* %ls7yI
  %lnafM = load i64, i64* %R1_Var
  %lnafN = add i64 %lnafM, 40
  %lnafO = inttoptr i64 %lnafN to i64*
  %lnafP = load i64, i64* %lnafO, !tbaa !4
  store i64 %lnafP, i64* %R1_Var
  %lnafR = load i64, i64* %ls7yC
  %lnafQ = load i64*, i64** %Sp_Var
  %lnafS = getelementptr inbounds i64, i64* %lnafQ, i32 -5
  store i64 %lnafR, i64* %lnafS, !tbaa !2
  %lnafU = load i64, i64* %ls7yG
  %lnafT = load i64*, i64** %Sp_Var
  %lnafV = getelementptr inbounds i64, i64* %lnafT, i32 -4
  store i64 %lnafU, i64* %lnafV, !tbaa !2
  %lnafX = load i64, i64* %ls7yI
  %lnafW = load i64*, i64** %Sp_Var
  %lnafY = getelementptr inbounds i64, i64* %lnafW, i32 -3
  store i64 %lnafX, i64* %lnafY, !tbaa !2
  %lnafZ = load i64*, i64** %Sp_Var
  %lnag0 = getelementptr inbounds i64, i64* %lnafZ, i32 -6
  %lnag1 = ptrtoint i64* %lnag0 to i64
  %lnag2 = inttoptr i64 %lnag1 to i64*
  store i64* %lnag2, i64** %Sp_Var
  %lnag3 = load i64, i64* %R1_Var
  %lnag4 = and i64 %lnag3, 7
  %lnag5 = icmp ne i64 %lnag4, 0
  br i1 %lnag5, label %u95k, label %c94E
c94E:
  %lnag7 = load i64, i64* %R1_Var
  %lnag8 = inttoptr i64 %lnag7 to i64*
  %lnag9 = load i64, i64* %lnag8, !tbaa !4
  %lnaga = inttoptr i64 %lnag9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagb = load i64*, i64** %Sp_Var
  %lnagc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaga( i64* %Base_Arg, i64* %lnagb, i64* %Hp_Arg, i64 %lnagc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u95k:
  %lnagd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94D_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnage = load i64*, i64** %Sp_Var
  %lnagf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagd( i64* %Base_Arg, i64* %lnage, i64* %Hp_Arg, i64 %lnagf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c95b:
  %lnagg = load i64, i64* %R1_Var
  store i64 %lnagg, i64* %R1_Var
  %lnagh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnagi = bitcast i64* %lnagh to i64*
  %lnagj = load i64, i64* %lnagi, !tbaa !5
  %lnagk = inttoptr i64 %lnagj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagl = load i64*, i64** %Sp_Var
  %lnagm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagk( i64* %Base_Arg, i64* %lnagl, i64* %Hp_Arg, i64 %lnagm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c94D_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94D_info$def to i8*)
define internal ghccc void @c94D_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nagn:
  %ls7z0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c94D
c94D:
  %lnago = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94J_info$def to i64
  %lnagp = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnago, i64* %lnagp, !tbaa !2
  %lnags = load i64, i64* %R1_Var
  %lnagt = add i64 %lnags, 7
  %lnagu = inttoptr i64 %lnagt to double*
  %lnagv = load double, double* %lnagu, !tbaa !4
  store double %lnagv, double* %ls7z0
  %lnagw = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnagx = bitcast i64* %lnagw to i64*
  %lnagy = load i64, i64* %lnagx, !tbaa !2
  store i64 %lnagy, i64* %R1_Var
  %lnagz = load double, double* %ls7z0
  %lnagA = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnagB = bitcast i64* %lnagA to double*
  store double %lnagz, double* %lnagB, !tbaa !2
  %lnagC = load i64, i64* %R1_Var
  %lnagD = and i64 %lnagC, 7
  %lnagE = icmp ne i64 %lnagD, 0
  br i1 %lnagE, label %u95j, label %c94K
c94K:
  %lnagG = load i64, i64* %R1_Var
  %lnagH = inttoptr i64 %lnagG to i64*
  %lnagI = load i64, i64* %lnagH, !tbaa !4
  %lnagJ = inttoptr i64 %lnagI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnagK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u95j:
  %lnagL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94J_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnagM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c94J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94J_info$def to i8*)
define internal ghccc void @c94J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
nagN:
  %ls7z2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c94J
c94J:
  %lnagO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94O_info$def to i64
  %lnagP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnagO, i64* %lnagP, !tbaa !2
  %lnagS = load i64, i64* %R1_Var
  %lnagT = add i64 %lnagS, 7
  %lnagU = inttoptr i64 %lnagT to double*
  %lnagV = load double, double* %lnagU, !tbaa !4
  store double %lnagV, double* %ls7z2
  %lnagW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnagX = bitcast i64* %lnagW to i64*
  %lnagY = load i64, i64* %lnagX, !tbaa !2
  store i64 %lnagY, i64* %R1_Var
  %lnagZ = load double, double* %ls7z2
  %lnah0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnah1 = bitcast i64* %lnah0 to double*
  store double %lnagZ, double* %lnah1, !tbaa !2
  %lnah2 = load i64, i64* %R1_Var
  %lnah3 = and i64 %lnah2, 7
  %lnah4 = icmp ne i64 %lnah3, 0
  br i1 %lnah4, label %u95l, label %c94P
c94P:
  %lnah6 = load i64, i64* %R1_Var
  %lnah7 = inttoptr i64 %lnah6 to i64*
  %lnah8 = load i64, i64* %lnah7, !tbaa !4
  %lnah9 = inttoptr i64 %lnah8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaha = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnah9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaha, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u95l:
  %lnahb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94O_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnahc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c94O_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94O_info$def to i8*)
define internal ghccc void @c94O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 0}>
{
nahd:
  %ls7z4 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c94O
c94O:
  %lnahe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94T_info$def to i64
  %lnahf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnahe, i64* %lnahf, !tbaa !2
  %lnahi = load i64, i64* %R1_Var
  %lnahj = add i64 %lnahi, 7
  %lnahk = inttoptr i64 %lnahj to double*
  %lnahl = load double, double* %lnahk, !tbaa !4
  store double %lnahl, double* %ls7z4
  %lnahm = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnahn = bitcast i64* %lnahm to i64*
  %lnaho = load i64, i64* %lnahn, !tbaa !2
  store i64 %lnaho, i64* %R1_Var
  %lnahp = load double, double* %ls7z4
  %lnahq = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnahr = bitcast i64* %lnahq to double*
  store double %lnahp, double* %lnahr, !tbaa !2
  %lnahs = load i64, i64* %R1_Var
  %lnaht = and i64 %lnahs, 7
  %lnahu = icmp ne i64 %lnaht, 0
  br i1 %lnahu, label %u95m, label %c94U
c94U:
  %lnahw = load i64, i64* %R1_Var
  %lnahx = inttoptr i64 %lnahw to i64*
  %lnahy = load i64, i64* %lnahx, !tbaa !4
  %lnahz = inttoptr i64 %lnahy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnahA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u95m:
  %lnahB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94T_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnahC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c94T_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c94T_info$def to i8*)
define internal ghccc void @c94T_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
nahD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7z2 = alloca double, i32 1
  %ls7za = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c94T
c94T:
  %lnahE = load i64*, i64** %Hp_Var
  %lnahF = getelementptr inbounds i64, i64* %lnahE, i32 2
  %lnahG = ptrtoint i64* %lnahF to i64
  %lnahH = inttoptr i64 %lnahG to i64*
  store i64* %lnahH, i64** %Hp_Var
  %lnahI = load i64*, i64** %Hp_Var
  %lnahJ = ptrtoint i64* %lnahI to i64
  %lnahK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnahL = bitcast i64* %lnahK to i64*
  %lnahM = load i64, i64* %lnahL, !tbaa !5
  %lnahN = icmp ugt i64 %lnahJ, %lnahM
  %lnahO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnahN, i1 0 )
  br i1 %lnahO, label %c95i, label %c95h
c95h:
  %lnahP = load i64*, i64** %Sp_Var
  %lnahQ = getelementptr inbounds i64, i64* %lnahP, i32 1
  %lnahR = bitcast i64* %lnahQ to double*
  %lnahS = load double, double* %lnahR, !tbaa !2
  store double %lnahS, double* %ls7z2
  %lnahT = load i64*, i64** %Sp_Var
  %lnahU = getelementptr inbounds i64, i64* %lnahT, i32 3
  %lnahV = bitcast i64* %lnahU to double*
  %lnahW = load double, double* %lnahV, !tbaa !2
  %lnahX = load double, double* %ls7z2
  %lnahY = load i64*, i64** %Sp_Var
  %lnahZ = getelementptr inbounds i64, i64* %lnahY, i32 2
  %lnai0 = bitcast i64* %lnahZ to double*
  %lnai1 = load double, double* %lnai0, !tbaa !2
  %lnai2 = fmul double %lnahX, %lnai1
  %lnai3 = load double, double* %ls7z2
  %lnai6 = load i64, i64* %R1_Var
  %lnai7 = add i64 %lnai6, 7
  %lnai8 = inttoptr i64 %lnai7 to double*
  %lnai9 = load double, double* %lnai8, !tbaa !4
  %lnaia = fmul double %lnai3, %lnai9
  %lnaib = fadd double %lnai2, %lnaia
  %lnaic = fsub double %lnahW, %lnaib
  store double %lnaic, double* %ls7za
  %lnaie = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnaid = load i64*, i64** %Hp_Var
  %lnaif = getelementptr inbounds i64, i64* %lnaid, i32 -1
  store i64 %lnaie, i64* %lnaif, !tbaa !3
  %lnaih = load double, double* %ls7za
  %lnaig = load i64*, i64** %Hp_Var
  %lnaii = getelementptr inbounds i64, i64* %lnaig, i32 0
  %lnaij = bitcast i64* %lnaii to double*
  store double %lnaih, double* %lnaij, !tbaa !3
  %lnail = load i64*, i64** %Hp_Var
  %lnaim = ptrtoint i64* %lnail to i64
  %lnain = add i64 %lnaim, -7
  store i64 %lnain, i64* %R1_Var
  %lnaio = load i64*, i64** %Sp_Var
  %lnaip = getelementptr inbounds i64, i64* %lnaio, i32 4
  %lnaiq = ptrtoint i64* %lnaip to i64
  %lnair = inttoptr i64 %lnaiq to i64*
  store i64* %lnair, i64** %Sp_Var
  %lnais = load i64*, i64** %Sp_Var
  %lnait = getelementptr inbounds i64, i64* %lnais, i32 0
  %lnaiu = bitcast i64* %lnait to i64*
  %lnaiv = load i64, i64* %lnaiu, !tbaa !2
  %lnaiw = inttoptr i64 %lnaiv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaix = load i64*, i64** %Sp_Var
  %lnaiy = load i64*, i64** %Hp_Var
  %lnaiz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiw( i64* %Base_Arg, i64* %lnaix, i64* %lnaiy, i64 %lnaiz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c95i:
  %lnaiA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnaiA, !tbaa !5
  %lnaiB = load i64, i64* %R1_Var
  store i64 %lnaiB, i64* %R1_Var
  %lnaiC = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaiD = load i64*, i64** %Sp_Var
  %lnaiE = load i64*, i64** %Hp_Var
  %lnaiF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiC( i64* %Base_Arg, i64* %lnaiD, i64* %lnaiE, i64 %lnaiF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7yY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yY_info$def to i8*)
define internal ghccc void @s7yY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
naiG:
  %ls7yF = alloca i64, i32 1
  %ls7yB = alloca i64, i32 1
  %ls7yI = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c95u
c95u:
  %lnaiH = load i64*, i64** %Sp_Var
  %lnaiI = getelementptr inbounds i64, i64* %lnaiH, i32 -6
  %lnaiJ = ptrtoint i64* %lnaiI to i64
  %lnaiK = icmp ult i64 %lnaiJ, %SpLim_Arg
  %lnaiL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaiK, i1 0 )
  br i1 %lnaiL, label %c95Z, label %c960
c960:
  %lnaiN = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaiM = load i64*, i64** %Sp_Var
  %lnaiO = getelementptr inbounds i64, i64* %lnaiM, i32 -2
  store i64 %lnaiN, i64* %lnaiO, !tbaa !2
  %lnaiQ = load i64, i64* %R1_Var
  %lnaiP = load i64*, i64** %Sp_Var
  %lnaiR = getelementptr inbounds i64, i64* %lnaiP, i32 -1
  store i64 %lnaiQ, i64* %lnaiR, !tbaa !2
  %lnaiT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95r_info$def to i64
  %lnaiS = load i64*, i64** %Sp_Var
  %lnaiU = getelementptr inbounds i64, i64* %lnaiS, i32 -6
  store i64 %lnaiT, i64* %lnaiU, !tbaa !2
  %lnaiX = load i64, i64* %R1_Var
  %lnaiY = add i64 %lnaiX, 16
  %lnaiZ = inttoptr i64 %lnaiY to i64*
  %lnaj0 = load i64, i64* %lnaiZ, !tbaa !4
  store i64 %lnaj0, i64* %ls7yF
  %lnaj3 = load i64, i64* %R1_Var
  %lnaj4 = add i64 %lnaj3, 24
  %lnaj5 = inttoptr i64 %lnaj4 to i64*
  %lnaj6 = load i64, i64* %lnaj5, !tbaa !4
  store i64 %lnaj6, i64* %ls7yB
  %lnaj9 = load i64, i64* %R1_Var
  %lnaja = add i64 %lnaj9, 32
  %lnajb = inttoptr i64 %lnaja to i64*
  %lnajc = load i64, i64* %lnajb, !tbaa !4
  store i64 %lnajc, i64* %ls7yI
  %lnajf = load i64, i64* %R1_Var
  %lnajg = add i64 %lnajf, 40
  %lnajh = inttoptr i64 %lnajg to i64*
  %lnaji = load i64, i64* %lnajh, !tbaa !4
  store i64 %lnaji, i64* %R1_Var
  %lnajk = load i64, i64* %ls7yB
  %lnajj = load i64*, i64** %Sp_Var
  %lnajl = getelementptr inbounds i64, i64* %lnajj, i32 -5
  store i64 %lnajk, i64* %lnajl, !tbaa !2
  %lnajn = load i64, i64* %ls7yF
  %lnajm = load i64*, i64** %Sp_Var
  %lnajo = getelementptr inbounds i64, i64* %lnajm, i32 -4
  store i64 %lnajn, i64* %lnajo, !tbaa !2
  %lnajq = load i64, i64* %ls7yI
  %lnajp = load i64*, i64** %Sp_Var
  %lnajr = getelementptr inbounds i64, i64* %lnajp, i32 -3
  store i64 %lnajq, i64* %lnajr, !tbaa !2
  %lnajs = load i64*, i64** %Sp_Var
  %lnajt = getelementptr inbounds i64, i64* %lnajs, i32 -6
  %lnaju = ptrtoint i64* %lnajt to i64
  %lnajv = inttoptr i64 %lnaju to i64*
  store i64* %lnajv, i64** %Sp_Var
  %lnajw = load i64, i64* %R1_Var
  %lnajx = and i64 %lnajw, 7
  %lnajy = icmp ne i64 %lnajx, 0
  br i1 %lnajy, label %u968, label %c95s
c95s:
  %lnajA = load i64, i64* %R1_Var
  %lnajB = inttoptr i64 %lnajA to i64*
  %lnajC = load i64, i64* %lnajB, !tbaa !4
  %lnajD = inttoptr i64 %lnajC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajE = load i64*, i64** %Sp_Var
  %lnajF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajD( i64* %Base_Arg, i64* %lnajE, i64* %Hp_Arg, i64 %lnajF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u968:
  %lnajG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95r_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajH = load i64*, i64** %Sp_Var
  %lnajI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajG( i64* %Base_Arg, i64* %lnajH, i64* %Hp_Arg, i64 %lnajI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c95Z:
  %lnajJ = load i64, i64* %R1_Var
  store i64 %lnajJ, i64* %R1_Var
  %lnajK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnajL = bitcast i64* %lnajK to i64*
  %lnajM = load i64, i64* %lnajL, !tbaa !5
  %lnajN = inttoptr i64 %lnajM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajO = load i64*, i64** %Sp_Var
  %lnajP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajN( i64* %Base_Arg, i64* %lnajO, i64* %Hp_Arg, i64 %lnajP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c95r_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95r_info$def to i8*)
define internal ghccc void @c95r_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
najQ:
  %ls7yN = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c95r
c95r:
  %lnajR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95x_info$def to i64
  %lnajS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnajR, i64* %lnajS, !tbaa !2
  %lnajV = load i64, i64* %R1_Var
  %lnajW = add i64 %lnajV, 7
  %lnajX = inttoptr i64 %lnajW to double*
  %lnajY = load double, double* %lnajX, !tbaa !4
  store double %lnajY, double* %ls7yN
  %lnajZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnak0 = bitcast i64* %lnajZ to i64*
  %lnak1 = load i64, i64* %lnak0, !tbaa !2
  store i64 %lnak1, i64* %R1_Var
  %lnak2 = load double, double* %ls7yN
  %lnak3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnak4 = bitcast i64* %lnak3 to double*
  store double %lnak2, double* %lnak4, !tbaa !2
  %lnak5 = load i64, i64* %R1_Var
  %lnak6 = and i64 %lnak5, 7
  %lnak7 = icmp ne i64 %lnak6, 0
  br i1 %lnak7, label %u967, label %c95y
c95y:
  %lnak9 = load i64, i64* %R1_Var
  %lnaka = inttoptr i64 %lnak9 to i64*
  %lnakb = load i64, i64* %lnaka, !tbaa !4
  %lnakc = inttoptr i64 %lnakb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnakd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u967:
  %lnake = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95x_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnake( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnakf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c95x_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95x_info$def to i8*)
define internal ghccc void @c95x_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
nakg:
  %ls7yP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c95x
c95x:
  %lnakh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95C_info$def to i64
  %lnaki = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnakh, i64* %lnaki, !tbaa !2
  %lnakl = load i64, i64* %R1_Var
  %lnakm = add i64 %lnakl, 7
  %lnakn = inttoptr i64 %lnakm to double*
  %lnako = load double, double* %lnakn, !tbaa !4
  store double %lnako, double* %ls7yP
  %lnakp = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnakq = bitcast i64* %lnakp to i64*
  %lnakr = load i64, i64* %lnakq, !tbaa !2
  store i64 %lnakr, i64* %R1_Var
  %lnaks = load double, double* %ls7yP
  %lnakt = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnaku = bitcast i64* %lnakt to double*
  store double %lnaks, double* %lnaku, !tbaa !2
  %lnakv = load i64, i64* %R1_Var
  %lnakw = and i64 %lnakv, 7
  %lnakx = icmp ne i64 %lnakw, 0
  br i1 %lnakx, label %u969, label %c95D
c95D:
  %lnakz = load i64, i64* %R1_Var
  %lnakA = inttoptr i64 %lnakz to i64*
  %lnakB = load i64, i64* %lnakA, !tbaa !4
  %lnakC = inttoptr i64 %lnakB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnakD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u969:
  %lnakE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95C_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnakF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c95C_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95C_info$def to i8*)
define internal ghccc void @c95C_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 323, i32 30, i32 0}>
{
nakG:
  %ls7yR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c95C
c95C:
  %lnakH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95H_info$def to i64
  %lnakI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnakH, i64* %lnakI, !tbaa !2
  %lnakL = load i64, i64* %R1_Var
  %lnakM = add i64 %lnakL, 7
  %lnakN = inttoptr i64 %lnakM to double*
  %lnakO = load double, double* %lnakN, !tbaa !4
  store double %lnakO, double* %ls7yR
  %lnakP = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnakQ = bitcast i64* %lnakP to i64*
  %lnakR = load i64, i64* %lnakQ, !tbaa !2
  store i64 %lnakR, i64* %R1_Var
  %lnakS = load double, double* %ls7yR
  %lnakT = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnakU = bitcast i64* %lnakT to double*
  store double %lnakS, double* %lnakU, !tbaa !2
  %lnakV = load i64, i64* %R1_Var
  %lnakW = and i64 %lnakV, 7
  %lnakX = icmp ne i64 %lnakW, 0
  br i1 %lnakX, label %u96a, label %c95I
c95I:
  %lnakZ = load i64, i64* %R1_Var
  %lnal0 = inttoptr i64 %lnakZ to i64*
  %lnal1 = load i64, i64* %lnal0, !tbaa !4
  %lnal2 = inttoptr i64 %lnal1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnal3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnal2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnal3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u96a:
  %lnal4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95H_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnal5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnal4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnal5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c95H_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c95H_info$def to i8*)
define internal ghccc void @c95H_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
nal6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yP = alloca double, i32 1
  %ls7yX = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c95H
c95H:
  %lnal7 = load i64*, i64** %Hp_Var
  %lnal8 = getelementptr inbounds i64, i64* %lnal7, i32 2
  %lnal9 = ptrtoint i64* %lnal8 to i64
  %lnala = inttoptr i64 %lnal9 to i64*
  store i64* %lnala, i64** %Hp_Var
  %lnalb = load i64*, i64** %Hp_Var
  %lnalc = ptrtoint i64* %lnalb to i64
  %lnald = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnale = bitcast i64* %lnald to i64*
  %lnalf = load i64, i64* %lnale, !tbaa !5
  %lnalg = icmp ugt i64 %lnalc, %lnalf
  %lnalh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnalg, i1 0 )
  br i1 %lnalh, label %c966, label %c965
c965:
  %lnali = load i64*, i64** %Sp_Var
  %lnalj = getelementptr inbounds i64, i64* %lnali, i32 1
  %lnalk = bitcast i64* %lnalj to double*
  %lnall = load double, double* %lnalk, !tbaa !2
  store double %lnall, double* %ls7yP
  %lnalm = load i64*, i64** %Sp_Var
  %lnaln = getelementptr inbounds i64, i64* %lnalm, i32 3
  %lnalo = bitcast i64* %lnaln to double*
  %lnalp = load double, double* %lnalo, !tbaa !2
  %lnalq = load double, double* %ls7yP
  %lnalr = load i64*, i64** %Sp_Var
  %lnals = getelementptr inbounds i64, i64* %lnalr, i32 2
  %lnalt = bitcast i64* %lnals to double*
  %lnalu = load double, double* %lnalt, !tbaa !2
  %lnalv = fmul double %lnalq, %lnalu
  %lnalw = load double, double* %ls7yP
  %lnalz = load i64, i64* %R1_Var
  %lnalA = add i64 %lnalz, 7
  %lnalB = inttoptr i64 %lnalA to double*
  %lnalC = load double, double* %lnalB, !tbaa !4
  %lnalD = fmul double %lnalw, %lnalC
  %lnalE = fadd double %lnalv, %lnalD
  %lnalF = fsub double %lnalp, %lnalE
  store double %lnalF, double* %ls7yX
  %lnalH = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnalG = load i64*, i64** %Hp_Var
  %lnalI = getelementptr inbounds i64, i64* %lnalG, i32 -1
  store i64 %lnalH, i64* %lnalI, !tbaa !3
  %lnalK = load double, double* %ls7yX
  %lnalJ = load i64*, i64** %Hp_Var
  %lnalL = getelementptr inbounds i64, i64* %lnalJ, i32 0
  %lnalM = bitcast i64* %lnalL to double*
  store double %lnalK, double* %lnalM, !tbaa !3
  %lnalO = load i64*, i64** %Hp_Var
  %lnalP = ptrtoint i64* %lnalO to i64
  %lnalQ = add i64 %lnalP, -7
  store i64 %lnalQ, i64* %R1_Var
  %lnalR = load i64*, i64** %Sp_Var
  %lnalS = getelementptr inbounds i64, i64* %lnalR, i32 4
  %lnalT = ptrtoint i64* %lnalS to i64
  %lnalU = inttoptr i64 %lnalT to i64*
  store i64* %lnalU, i64** %Sp_Var
  %lnalV = load i64*, i64** %Sp_Var
  %lnalW = getelementptr inbounds i64, i64* %lnalV, i32 0
  %lnalX = bitcast i64* %lnalW to i64*
  %lnalY = load i64, i64* %lnalX, !tbaa !2
  %lnalZ = inttoptr i64 %lnalY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnam0 = load i64*, i64** %Sp_Var
  %lnam1 = load i64*, i64** %Hp_Var
  %lnam2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnalZ( i64* %Base_Arg, i64* %lnam0, i64* %lnam1, i64 %lnam2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c966:
  %lnam3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnam3, !tbaa !5
  %lnam4 = load i64, i64* %R1_Var
  store i64 %lnam4, i64* %R1_Var
  %lnam5 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnam6 = load i64*, i64** %Sp_Var
  %lnam7 = load i64*, i64** %Hp_Var
  %lnam8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnam5( i64* %Base_Arg, i64* %lnam6, i64* %lnam7, i64 %lnam8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7zp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zp_info$def to i8*)
define internal ghccc void @s7zp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nam9:
  %ls7v6 = alloca i64, i32 1
  %ls7wS = alloca i64, i32 1
  %ls7wt = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c96b
c96b:
  %lnama = load i64*, i64** %Sp_Var
  %lnamb = getelementptr inbounds i64, i64* %lnama, i32 -10
  %lnamc = ptrtoint i64* %lnamb to i64
  %lnamd = icmp ult i64 %lnamc, %SpLim_Arg
  %lname = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnamd, i1 0 )
  br i1 %lname, label %c96d, label %c96e
c96e:
  %lnamg = ptrtoint i8* @stg_upd_frame_info to i64
  %lnamf = load i64*, i64** %Sp_Var
  %lnamh = getelementptr inbounds i64, i64* %lnamf, i32 -2
  store i64 %lnamg, i64* %lnamh, !tbaa !2
  %lnamj = load i64, i64* %R1_Var
  %lnami = load i64*, i64** %Sp_Var
  %lnamk = getelementptr inbounds i64, i64* %lnami, i32 -1
  store i64 %lnamj, i64* %lnamk, !tbaa !2
  %lnamm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93c_info$def to i64
  %lnaml = load i64*, i64** %Sp_Var
  %lnamn = getelementptr inbounds i64, i64* %lnaml, i32 -6
  store i64 %lnamm, i64* %lnamn, !tbaa !2
  %lnamq = load i64, i64* %R1_Var
  %lnamr = add i64 %lnamq, 16
  %lnams = inttoptr i64 %lnamr to i64*
  %lnamt = load i64, i64* %lnams, !tbaa !4
  store i64 %lnamt, i64* %ls7v6
  %lnamw = load i64, i64* %R1_Var
  %lnamx = add i64 %lnamw, 24
  %lnamy = inttoptr i64 %lnamx to i64*
  %lnamz = load i64, i64* %lnamy, !tbaa !4
  store i64 %lnamz, i64* %ls7wS
  %lnamC = load i64, i64* %R1_Var
  %lnamD = add i64 %lnamC, 32
  %lnamE = inttoptr i64 %lnamD to i64*
  %lnamF = load i64, i64* %lnamE, !tbaa !4
  store i64 %lnamF, i64* %ls7wt
  %lnamI = load i64, i64* %R1_Var
  %lnamJ = add i64 %lnamI, 40
  %lnamK = inttoptr i64 %lnamJ to i64*
  %lnamL = load i64, i64* %lnamK, !tbaa !4
  store i64 %lnamL, i64* %R1_Var
  %lnamN = load i64, i64* %ls7v6
  %lnamM = load i64*, i64** %Sp_Var
  %lnamO = getelementptr inbounds i64, i64* %lnamM, i32 -5
  store i64 %lnamN, i64* %lnamO, !tbaa !2
  %lnamQ = load i64, i64* %ls7wt
  %lnamP = load i64*, i64** %Sp_Var
  %lnamR = getelementptr inbounds i64, i64* %lnamP, i32 -4
  store i64 %lnamQ, i64* %lnamR, !tbaa !2
  %lnamT = load i64, i64* %ls7wS
  %lnamS = load i64*, i64** %Sp_Var
  %lnamU = getelementptr inbounds i64, i64* %lnamS, i32 -3
  store i64 %lnamT, i64* %lnamU, !tbaa !2
  %lnamV = load i64*, i64** %Sp_Var
  %lnamW = getelementptr inbounds i64, i64* %lnamV, i32 -6
  %lnamX = ptrtoint i64* %lnamW to i64
  %lnamY = inttoptr i64 %lnamX to i64*
  store i64* %lnamY, i64** %Sp_Var
  %lnamZ = load i64, i64* %R1_Var
  %lnan0 = and i64 %lnamZ, 7
  %lnan1 = icmp ne i64 %lnan0, 0
  br i1 %lnan1, label %u96m, label %c93d
c93d:
  %lnan3 = load i64, i64* %R1_Var
  %lnan4 = inttoptr i64 %lnan3 to i64*
  %lnan5 = load i64, i64* %lnan4, !tbaa !4
  %lnan6 = inttoptr i64 %lnan5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnan7 = load i64*, i64** %Sp_Var
  %lnan8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnan6( i64* %Base_Arg, i64* %lnan7, i64* %Hp_Arg, i64 %lnan8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u96m:
  %lnan9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93c_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnana = load i64*, i64** %Sp_Var
  %lnanb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnan9( i64* %Base_Arg, i64* %lnana, i64* %Hp_Arg, i64 %lnanb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96d:
  %lnanc = load i64, i64* %R1_Var
  store i64 %lnanc, i64* %R1_Var
  %lnand = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnane = bitcast i64* %lnand to i64*
  %lnanf = load i64, i64* %lnane, !tbaa !5
  %lnang = inttoptr i64 %lnanf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnanh = load i64*, i64** %Sp_Var
  %lnani = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnang( i64* %Base_Arg, i64* %lnanh, i64* %Hp_Arg, i64 %lnani, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93c_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93c_info$def to i8*)
define internal ghccc void @c93c_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nanj:
  %ls7yx = alloca i64, i32 1
  %ls7yy = alloca i64, i32 1
  %ls7yz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93c
c93c:
  %lnanl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93h_info$def to i64
  %lnank = load i64*, i64** %Sp_Var
  %lnanm = getelementptr inbounds i64, i64* %lnank, i32 -2
  store i64 %lnanl, i64* %lnanm, !tbaa !2
  %lnanp = load i64, i64* %R1_Var
  %lnanq = add i64 %lnanp, 7
  %lnanr = inttoptr i64 %lnanq to i64*
  %lnans = load i64, i64* %lnanr, !tbaa !4
  store i64 %lnans, i64* %ls7yx
  %lnanv = load i64, i64* %R1_Var
  %lnanw = add i64 %lnanv, 15
  %lnanx = inttoptr i64 %lnanw to i64*
  %lnany = load i64, i64* %lnanx, !tbaa !4
  store i64 %lnany, i64* %ls7yy
  %lnanB = load i64, i64* %R1_Var
  %lnanC = add i64 %lnanB, 23
  %lnanD = inttoptr i64 %lnanC to i64*
  %lnanE = load i64, i64* %lnanD, !tbaa !4
  store i64 %lnanE, i64* %ls7yz
  %lnanF = load i64*, i64** %Sp_Var
  %lnanG = getelementptr inbounds i64, i64* %lnanF, i32 2
  %lnanH = bitcast i64* %lnanG to i64*
  %lnanI = load i64, i64* %lnanH, !tbaa !2
  store i64 %lnanI, i64* %R1_Var
  %lnanK = load i64, i64* %ls7yz
  %lnanJ = load i64*, i64** %Sp_Var
  %lnanL = getelementptr inbounds i64, i64* %lnanJ, i32 -1
  store i64 %lnanK, i64* %lnanL, !tbaa !2
  %lnanN = load i64, i64* %ls7yy
  %lnanM = load i64*, i64** %Sp_Var
  %lnanO = getelementptr inbounds i64, i64* %lnanM, i32 0
  store i64 %lnanN, i64* %lnanO, !tbaa !2
  %lnanQ = load i64, i64* %ls7yx
  %lnanP = load i64*, i64** %Sp_Var
  %lnanR = getelementptr inbounds i64, i64* %lnanP, i32 2
  store i64 %lnanQ, i64* %lnanR, !tbaa !2
  %lnanS = load i64*, i64** %Sp_Var
  %lnanT = getelementptr inbounds i64, i64* %lnanS, i32 -2
  %lnanU = ptrtoint i64* %lnanT to i64
  %lnanV = inttoptr i64 %lnanU to i64*
  store i64* %lnanV, i64** %Sp_Var
  %lnanW = load i64, i64* %R1_Var
  %lnanX = and i64 %lnanW, 7
  %lnanY = icmp ne i64 %lnanX, 0
  br i1 %lnanY, label %u96k, label %c93i
c93i:
  %lnao0 = load i64, i64* %R1_Var
  %lnao1 = inttoptr i64 %lnao0 to i64*
  %lnao2 = load i64, i64* %lnao1, !tbaa !4
  %lnao3 = inttoptr i64 %lnao2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnao4 = load i64*, i64** %Sp_Var
  %lnao5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnao3( i64* %Base_Arg, i64* %lnao4, i64* %Hp_Arg, i64 %lnao5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u96k:
  %lnao6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93h_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnao7 = load i64*, i64** %Sp_Var
  %lnao8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnao6( i64* %Base_Arg, i64* %lnao7, i64* %Hp_Arg, i64 %lnao8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93h_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93h_info$def to i8*)
define internal ghccc void @c93h_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
nao9:
  %ls7yB = alloca i64, i32 1
  %ls7yC = alloca i64, i32 1
  %ls7yD = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93h
c93h:
  %lnaob = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93m_info$def to i64
  %lnaoa = load i64*, i64** %Sp_Var
  %lnaoc = getelementptr inbounds i64, i64* %lnaoa, i32 -2
  store i64 %lnaob, i64* %lnaoc, !tbaa !2
  %lnaof = load i64, i64* %R1_Var
  %lnaog = add i64 %lnaof, 7
  %lnaoh = inttoptr i64 %lnaog to i64*
  %lnaoi = load i64, i64* %lnaoh, !tbaa !4
  store i64 %lnaoi, i64* %ls7yB
  %lnaol = load i64, i64* %R1_Var
  %lnaom = add i64 %lnaol, 15
  %lnaon = inttoptr i64 %lnaom to i64*
  %lnaoo = load i64, i64* %lnaon, !tbaa !4
  store i64 %lnaoo, i64* %ls7yC
  %lnaor = load i64, i64* %R1_Var
  %lnaos = add i64 %lnaor, 23
  %lnaot = inttoptr i64 %lnaos to i64*
  %lnaou = load i64, i64* %lnaot, !tbaa !4
  store i64 %lnaou, i64* %ls7yD
  %lnaov = load i64*, i64** %Sp_Var
  %lnaow = getelementptr inbounds i64, i64* %lnaov, i32 5
  %lnaox = bitcast i64* %lnaow to i64*
  %lnaoy = load i64, i64* %lnaox, !tbaa !2
  store i64 %lnaoy, i64* %R1_Var
  %lnaoA = load i64, i64* %ls7yD
  %lnaoz = load i64*, i64** %Sp_Var
  %lnaoB = getelementptr inbounds i64, i64* %lnaoz, i32 -1
  store i64 %lnaoA, i64* %lnaoB, !tbaa !2
  %lnaoD = load i64, i64* %ls7yC
  %lnaoC = load i64*, i64** %Sp_Var
  %lnaoE = getelementptr inbounds i64, i64* %lnaoC, i32 0
  store i64 %lnaoD, i64* %lnaoE, !tbaa !2
  %lnaoG = load i64, i64* %ls7yB
  %lnaoF = load i64*, i64** %Sp_Var
  %lnaoH = getelementptr inbounds i64, i64* %lnaoF, i32 5
  store i64 %lnaoG, i64* %lnaoH, !tbaa !2
  %lnaoI = load i64*, i64** %Sp_Var
  %lnaoJ = getelementptr inbounds i64, i64* %lnaoI, i32 -2
  %lnaoK = ptrtoint i64* %lnaoJ to i64
  %lnaoL = inttoptr i64 %lnaoK to i64*
  store i64* %lnaoL, i64** %Sp_Var
  %lnaoM = load i64, i64* %R1_Var
  %lnaoN = and i64 %lnaoM, 7
  %lnaoO = icmp ne i64 %lnaoN, 0
  br i1 %lnaoO, label %u96l, label %c93n
c93n:
  %lnaoQ = load i64, i64* %R1_Var
  %lnaoR = inttoptr i64 %lnaoQ to i64*
  %lnaoS = load i64, i64* %lnaoR, !tbaa !4
  %lnaoT = inttoptr i64 %lnaoS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoU = load i64*, i64** %Sp_Var
  %lnaoV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaoT( i64* %Base_Arg, i64* %lnaoU, i64* %Hp_Arg, i64 %lnaoV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u96l:
  %lnaoW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93m_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoX = load i64*, i64** %Sp_Var
  %lnaoY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaoW( i64* %Base_Arg, i64* %lnaoX, i64* %Hp_Arg, i64 %lnaoY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c93m_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c93m_info$def to i8*)
define internal ghccc void @c93m_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 7, i32 30, i32 0}>
{
naoZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7yF = alloca i64, i32 1
  %ls7yG = alloca i64, i32 1
  %ls7yH = alloca i64, i32 1
  %lc93r = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c93m
c93m:
  %lnap0 = load i64*, i64** %Hp_Var
  %lnap1 = getelementptr inbounds i64, i64* %lnap0, i32 25
  %lnap2 = ptrtoint i64* %lnap1 to i64
  %lnap3 = inttoptr i64 %lnap2 to i64*
  store i64* %lnap3, i64** %Hp_Var
  %lnap4 = load i64*, i64** %Hp_Var
  %lnap5 = ptrtoint i64* %lnap4 to i64
  %lnap6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnap7 = bitcast i64* %lnap6 to i64*
  %lnap8 = load i64, i64* %lnap7, !tbaa !5
  %lnap9 = icmp ugt i64 %lnap5, %lnap8
  %lnapa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnap9, i1 0 )
  br i1 %lnapa, label %c96j, label %c96i
c96i:
  %lnapd = load i64, i64* %R1_Var
  %lnape = add i64 %lnapd, 7
  %lnapf = inttoptr i64 %lnape to i64*
  %lnapg = load i64, i64* %lnapf, !tbaa !4
  store i64 %lnapg, i64* %ls7yF
  %lnapj = load i64, i64* %R1_Var
  %lnapk = add i64 %lnapj, 15
  %lnapl = inttoptr i64 %lnapk to i64*
  %lnapm = load i64, i64* %lnapl, !tbaa !4
  store i64 %lnapm, i64* %ls7yG
  %lnapp = load i64, i64* %R1_Var
  %lnapq = add i64 %lnapp, 23
  %lnapr = inttoptr i64 %lnapq to i64*
  %lnaps = load i64, i64* %lnapr, !tbaa !4
  store i64 %lnaps, i64* %ls7yH
  %lnapu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yI_info$def to i64
  %lnapt = load i64*, i64** %Hp_Var
  %lnapv = getelementptr inbounds i64, i64* %lnapt, i32 -24
  store i64 %lnapu, i64* %lnapv, !tbaa !3
  %lnapx = load i64*, i64** %Sp_Var
  %lnapy = getelementptr inbounds i64, i64* %lnapx, i32 5
  %lnapz = bitcast i64* %lnapy to i64*
  %lnapA = load i64, i64* %lnapz, !tbaa !2
  %lnapw = load i64*, i64** %Hp_Var
  %lnapB = getelementptr inbounds i64, i64* %lnapw, i32 -22
  store i64 %lnapA, i64* %lnapB, !tbaa !3
  %lnapD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zo_info$def to i64
  %lnapC = load i64*, i64** %Hp_Var
  %lnapE = getelementptr inbounds i64, i64* %lnapC, i32 -21
  store i64 %lnapD, i64* %lnapE, !tbaa !3
  %lnapG = load i64, i64* %ls7yH
  %lnapF = load i64*, i64** %Hp_Var
  %lnapH = getelementptr inbounds i64, i64* %lnapF, i32 -19
  store i64 %lnapG, i64* %lnapH, !tbaa !3
  %lnapJ = load i64*, i64** %Sp_Var
  %lnapK = getelementptr inbounds i64, i64* %lnapJ, i32 1
  %lnapL = bitcast i64* %lnapK to i64*
  %lnapM = load i64, i64* %lnapL, !tbaa !2
  %lnapI = load i64*, i64** %Hp_Var
  %lnapN = getelementptr inbounds i64, i64* %lnapI, i32 -18
  store i64 %lnapM, i64* %lnapN, !tbaa !3
  %lnapO = load i64*, i64** %Hp_Var
  %lnapP = getelementptr inbounds i64, i64* %lnapO, i32 -24
  %lnapQ = ptrtoint i64* %lnapP to i64
  store i64 %lnapQ, i64* %lc93r
  %lnapS = load i64, i64* %lc93r
  %lnapR = load i64*, i64** %Hp_Var
  %lnapT = getelementptr inbounds i64, i64* %lnapR, i32 -17
  store i64 %lnapS, i64* %lnapT, !tbaa !3
  %lnapV = load i64*, i64** %Sp_Var
  %lnapW = getelementptr inbounds i64, i64* %lnapV, i32 3
  %lnapX = bitcast i64* %lnapW to i64*
  %lnapY = load i64, i64* %lnapX, !tbaa !2
  %lnapU = load i64*, i64** %Hp_Var
  %lnapZ = getelementptr inbounds i64, i64* %lnapU, i32 -16
  store i64 %lnapY, i64* %lnapZ, !tbaa !3
  %lnaq1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zb_info$def to i64
  %lnaq0 = load i64*, i64** %Hp_Var
  %lnaq2 = getelementptr inbounds i64, i64* %lnaq0, i32 -15
  store i64 %lnaq1, i64* %lnaq2, !tbaa !3
  %lnaq4 = load i64, i64* %ls7yG
  %lnaq3 = load i64*, i64** %Hp_Var
  %lnaq5 = getelementptr inbounds i64, i64* %lnaq3, i32 -13
  store i64 %lnaq4, i64* %lnaq5, !tbaa !3
  %lnaq7 = load i64*, i64** %Sp_Var
  %lnaq8 = getelementptr inbounds i64, i64* %lnaq7, i32 2
  %lnaq9 = bitcast i64* %lnaq8 to i64*
  %lnaqa = load i64, i64* %lnaq9, !tbaa !2
  %lnaq6 = load i64*, i64** %Hp_Var
  %lnaqb = getelementptr inbounds i64, i64* %lnaq6, i32 -12
  store i64 %lnaqa, i64* %lnaqb, !tbaa !3
  %lnaqd = load i64, i64* %lc93r
  %lnaqc = load i64*, i64** %Hp_Var
  %lnaqe = getelementptr inbounds i64, i64* %lnaqc, i32 -11
  store i64 %lnaqd, i64* %lnaqe, !tbaa !3
  %lnaqg = load i64*, i64** %Sp_Var
  %lnaqh = getelementptr inbounds i64, i64* %lnaqg, i32 4
  %lnaqi = bitcast i64* %lnaqh to i64*
  %lnaqj = load i64, i64* %lnaqi, !tbaa !2
  %lnaqf = load i64*, i64** %Hp_Var
  %lnaqk = getelementptr inbounds i64, i64* %lnaqf, i32 -10
  store i64 %lnaqj, i64* %lnaqk, !tbaa !3
  %lnaqm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7yY_info$def to i64
  %lnaql = load i64*, i64** %Hp_Var
  %lnaqn = getelementptr inbounds i64, i64* %lnaql, i32 -9
  store i64 %lnaqm, i64* %lnaqn, !tbaa !3
  %lnaqp = load i64, i64* %ls7yF
  %lnaqo = load i64*, i64** %Hp_Var
  %lnaqq = getelementptr inbounds i64, i64* %lnaqo, i32 -7
  store i64 %lnaqp, i64* %lnaqq, !tbaa !3
  %lnaqs = load i64*, i64** %Sp_Var
  %lnaqt = getelementptr inbounds i64, i64* %lnaqs, i32 7
  %lnaqu = bitcast i64* %lnaqt to i64*
  %lnaqv = load i64, i64* %lnaqu, !tbaa !2
  %lnaqr = load i64*, i64** %Hp_Var
  %lnaqw = getelementptr inbounds i64, i64* %lnaqr, i32 -6
  store i64 %lnaqv, i64* %lnaqw, !tbaa !3
  %lnaqy = load i64, i64* %lc93r
  %lnaqx = load i64*, i64** %Hp_Var
  %lnaqz = getelementptr inbounds i64, i64* %lnaqx, i32 -5
  store i64 %lnaqy, i64* %lnaqz, !tbaa !3
  %lnaqB = load i64*, i64** %Sp_Var
  %lnaqC = getelementptr inbounds i64, i64* %lnaqB, i32 6
  %lnaqD = bitcast i64* %lnaqC to i64*
  %lnaqE = load i64, i64* %lnaqD, !tbaa !2
  %lnaqA = load i64*, i64** %Hp_Var
  %lnaqF = getelementptr inbounds i64, i64* %lnaqA, i32 -4
  store i64 %lnaqE, i64* %lnaqF, !tbaa !3
  %lnaqH = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaqG = load i64*, i64** %Hp_Var
  %lnaqI = getelementptr inbounds i64, i64* %lnaqG, i32 -3
  store i64 %lnaqH, i64* %lnaqI, !tbaa !3
  %lnaqK = load i64*, i64** %Hp_Var
  %lnaqL = getelementptr inbounds i64, i64* %lnaqK, i32 -9
  %lnaqM = ptrtoint i64* %lnaqL to i64
  %lnaqJ = load i64*, i64** %Hp_Var
  %lnaqN = getelementptr inbounds i64, i64* %lnaqJ, i32 -2
  store i64 %lnaqM, i64* %lnaqN, !tbaa !3
  %lnaqP = load i64*, i64** %Hp_Var
  %lnaqQ = getelementptr inbounds i64, i64* %lnaqP, i32 -15
  %lnaqR = ptrtoint i64* %lnaqQ to i64
  %lnaqO = load i64*, i64** %Hp_Var
  %lnaqS = getelementptr inbounds i64, i64* %lnaqO, i32 -1
  store i64 %lnaqR, i64* %lnaqS, !tbaa !3
  %lnaqU = load i64*, i64** %Hp_Var
  %lnaqV = getelementptr inbounds i64, i64* %lnaqU, i32 -21
  %lnaqW = ptrtoint i64* %lnaqV to i64
  %lnaqT = load i64*, i64** %Hp_Var
  %lnaqX = getelementptr inbounds i64, i64* %lnaqT, i32 0
  store i64 %lnaqW, i64* %lnaqX, !tbaa !3
  %lnaqZ = load i64*, i64** %Hp_Var
  %lnar0 = ptrtoint i64* %lnaqZ to i64
  %lnar1 = add i64 %lnar0, -23
  store i64 %lnar1, i64* %R1_Var
  %lnar2 = load i64*, i64** %Sp_Var
  %lnar3 = getelementptr inbounds i64, i64* %lnar2, i32 8
  %lnar4 = ptrtoint i64* %lnar3 to i64
  %lnar5 = inttoptr i64 %lnar4 to i64*
  store i64* %lnar5, i64** %Sp_Var
  %lnar6 = load i64*, i64** %Sp_Var
  %lnar7 = getelementptr inbounds i64, i64* %lnar6, i32 0
  %lnar8 = bitcast i64* %lnar7 to i64*
  %lnar9 = load i64, i64* %lnar8, !tbaa !2
  %lnara = inttoptr i64 %lnar9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarb = load i64*, i64** %Sp_Var
  %lnarc = load i64*, i64** %Hp_Var
  %lnard = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnara( i64* %Base_Arg, i64* %lnarb, i64* %lnarc, i64 %lnard, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96j:
  %lnare = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 200, i64* %lnare, !tbaa !5
  %lnarf = load i64, i64* %R1_Var
  store i64 %lnarf, i64* %R1_Var
  %lnarg = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarh = load i64*, i64** %Sp_Var
  %lnari = load i64*, i64** %Hp_Var
  %lnarj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarg( i64* %Base_Arg, i64* %lnarh, i64* %lnari, i64 %lnarj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwcamparams_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwcamparams_info$def to i8*)
define ghccc void @Main_zdwcamparams_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 21474836505, i64 0, i32 14, i32 0}>
{
nark:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lc8Qm = alloca i64, i32 1
  %lc8R5 = alloca i64, i32 1
  %lc8Rp = alloca i64, i32 1
  %lc8WU = alloca i64, i32 1
  %lc8Vk = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  br label %c96n
c96n:
  %lnarl = load i64*, i64** %Hp_Var
  %lnarm = getelementptr inbounds i64, i64* %lnarl, i32 29
  %lnarn = ptrtoint i64* %lnarm to i64
  %lnaro = inttoptr i64 %lnarn to i64*
  store i64* %lnaro, i64** %Hp_Var
  %lnarp = load i64*, i64** %Hp_Var
  %lnarq = ptrtoint i64* %lnarp to i64
  %lnarr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnars = bitcast i64* %lnarr to i64*
  %lnart = load i64, i64* %lnars, !tbaa !5
  %lnaru = icmp ugt i64 %lnarq, %lnart
  %lnarv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaru, i1 0 )
  br i1 %lnarv, label %c96r, label %c96q
c96q:
  %lnarx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7v7_info$def to i64
  %lnarw = load i64*, i64** %Hp_Var
  %lnary = getelementptr inbounds i64, i64* %lnarw, i32 -28
  store i64 %lnarx, i64* %lnary, !tbaa !3
  %lnarA = load i64, i64* %R2_Var
  %lnarz = load i64*, i64** %Hp_Var
  %lnarB = getelementptr inbounds i64, i64* %lnarz, i32 -26
  store i64 %lnarA, i64* %lnarB, !tbaa !3
  %lnarD = load i64, i64* %R3_Var
  %lnarC = load i64*, i64** %Hp_Var
  %lnarE = getelementptr inbounds i64, i64* %lnarC, i32 -25
  store i64 %lnarD, i64* %lnarE, !tbaa !3
  %lnarG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vj_info$def to i64
  %lnarF = load i64*, i64** %Hp_Var
  %lnarH = getelementptr inbounds i64, i64* %lnarF, i32 -24
  store i64 %lnarG, i64* %lnarH, !tbaa !3
  %lnarI = load i64*, i64** %Hp_Var
  %lnarJ = getelementptr inbounds i64, i64* %lnarI, i32 -28
  %lnarK = ptrtoint i64* %lnarJ to i64
  store i64 %lnarK, i64* %lc8Qm
  %lnarM = load i64, i64* %lc8Qm
  %lnarL = load i64*, i64** %Hp_Var
  %lnarN = getelementptr inbounds i64, i64* %lnarL, i32 -22
  store i64 %lnarM, i64* %lnarN, !tbaa !3
  %lnarP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7vr_info$def to i64
  %lnarO = load i64*, i64** %Hp_Var
  %lnarQ = getelementptr inbounds i64, i64* %lnarO, i32 -21
  store i64 %lnarP, i64* %lnarQ, !tbaa !3
  %lnarS = load i64, i64* %R4_Var
  %lnarR = load i64*, i64** %Hp_Var
  %lnarT = getelementptr inbounds i64, i64* %lnarR, i32 -19
  store i64 %lnarS, i64* %lnarT, !tbaa !3
  %lnarU = load i64*, i64** %Hp_Var
  %lnarV = getelementptr inbounds i64, i64* %lnarU, i32 -24
  %lnarW = ptrtoint i64* %lnarV to i64
  store i64 %lnarW, i64* %lc8R5
  %lnarY = load i64, i64* %lc8R5
  %lnarX = load i64*, i64** %Hp_Var
  %lnarZ = getelementptr inbounds i64, i64* %lnarX, i32 -18
  store i64 %lnarY, i64* %lnarZ, !tbaa !3
  %lnas1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wt_info$def to i64
  %lnas0 = load i64*, i64** %Hp_Var
  %lnas2 = getelementptr inbounds i64, i64* %lnas0, i32 -17
  store i64 %lnas1, i64* %lnas2, !tbaa !3
  %lnas4 = load i64, i64* %R6_Var
  %lnas3 = load i64*, i64** %Hp_Var
  %lnas5 = getelementptr inbounds i64, i64* %lnas3, i32 -15
  store i64 %lnas4, i64* %lnas5, !tbaa !3
  %lnas7 = load i64, i64* %R5_Var
  %lnas6 = load i64*, i64** %Hp_Var
  %lnas8 = getelementptr inbounds i64, i64* %lnas6, i32 -14
  store i64 %lnas7, i64* %lnas8, !tbaa !3
  %lnasa = load i64, i64* %lc8R5
  %lnas9 = load i64*, i64** %Hp_Var
  %lnasb = getelementptr inbounds i64, i64* %lnas9, i32 -13
  store i64 %lnasa, i64* %lnasb, !tbaa !3
  %lnasc = load i64*, i64** %Hp_Var
  %lnasd = getelementptr inbounds i64, i64* %lnasc, i32 -21
  %lnase = ptrtoint i64* %lnasd to i64
  store i64 %lnase, i64* %lc8Rp
  %lnasg = load i64, i64* %lc8Rp
  %lnasf = load i64*, i64** %Hp_Var
  %lnash = getelementptr inbounds i64, i64* %lnasf, i32 -12
  store i64 %lnasg, i64* %lnash, !tbaa !3
  %lnasj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7wS_info$def to i64
  %lnasi = load i64*, i64** %Hp_Var
  %lnask = getelementptr inbounds i64, i64* %lnasi, i32 -11
  store i64 %lnasj, i64* %lnask, !tbaa !3
  %lnasm = load i64, i64* %R6_Var
  %lnasl = load i64*, i64** %Hp_Var
  %lnasn = getelementptr inbounds i64, i64* %lnasl, i32 -9
  store i64 %lnasm, i64* %lnasn, !tbaa !3
  %lnasp = load i64, i64* %R5_Var
  %lnaso = load i64*, i64** %Hp_Var
  %lnasq = getelementptr inbounds i64, i64* %lnaso, i32 -8
  store i64 %lnasp, i64* %lnasq, !tbaa !3
  %lnass = load i64, i64* %lc8R5
  %lnasr = load i64*, i64** %Hp_Var
  %lnast = getelementptr inbounds i64, i64* %lnasr, i32 -7
  store i64 %lnass, i64* %lnast, !tbaa !3
  %lnasv = load i64, i64* %lc8Rp
  %lnasu = load i64*, i64** %Hp_Var
  %lnasw = getelementptr inbounds i64, i64* %lnasu, i32 -6
  store i64 %lnasv, i64* %lnasw, !tbaa !3
  %lnasy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zp_info$def to i64
  %lnasx = load i64*, i64** %Hp_Var
  %lnasz = getelementptr inbounds i64, i64* %lnasx, i32 -5
  store i64 %lnasy, i64* %lnasz, !tbaa !3
  %lnasB = load i64, i64* %R6_Var
  %lnasA = load i64*, i64** %Hp_Var
  %lnasC = getelementptr inbounds i64, i64* %lnasA, i32 -3
  store i64 %lnasB, i64* %lnasC, !tbaa !3
  %lnasD = load i64*, i64** %Hp_Var
  %lnasE = getelementptr inbounds i64, i64* %lnasD, i32 -11
  %lnasF = ptrtoint i64* %lnasE to i64
  store i64 %lnasF, i64* %lc8WU
  %lnasH = load i64, i64* %lc8WU
  %lnasG = load i64*, i64** %Hp_Var
  %lnasI = getelementptr inbounds i64, i64* %lnasG, i32 -2
  store i64 %lnasH, i64* %lnasI, !tbaa !3
  %lnasJ = load i64*, i64** %Hp_Var
  %lnasK = getelementptr inbounds i64, i64* %lnasJ, i32 -17
  %lnasL = ptrtoint i64* %lnasK to i64
  store i64 %lnasL, i64* %lc8Vk
  %lnasN = load i64, i64* %lc8Vk
  %lnasM = load i64*, i64** %Hp_Var
  %lnasO = getelementptr inbounds i64, i64* %lnasM, i32 -1
  store i64 %lnasN, i64* %lnasO, !tbaa !3
  %lnasQ = load i64, i64* %lc8Qm
  %lnasP = load i64*, i64** %Hp_Var
  %lnasR = getelementptr inbounds i64, i64* %lnasP, i32 0
  store i64 %lnasQ, i64* %lnasR, !tbaa !3
  %lnasS = load i64, i64* %lc8WU
  store i64 %lnasS, i64* %R3_Var
  %lnasT = load i64, i64* %lc8Vk
  store i64 %lnasT, i64* %R2_Var
  %lnasU = load i64*, i64** %Hp_Var
  %lnasV = getelementptr inbounds i64, i64* %lnasU, i32 -5
  %lnasW = ptrtoint i64* %lnasV to i64
  store i64 %lnasW, i64* %R1_Var
  %lnasX = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnasY = bitcast i64* %lnasX to i64*
  %lnasZ = load i64, i64* %lnasY, !tbaa !2
  %lnat0 = inttoptr i64 %lnasZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnat1 = load i64*, i64** %Hp_Var
  %lnat2 = load i64, i64* %R1_Var
  %lnat3 = load i64, i64* %R2_Var
  %lnat4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnat0( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnat1, i64 %lnat2, i64 %lnat3, i64 %lnat4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96r:
  %lnat5 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 232, i64* %lnat5, !tbaa !5
  %lnat6 = load i64, i64* %R6_Var
  store i64 %lnat6, i64* %R6_Var
  %lnat7 = load i64, i64* %R5_Var
  store i64 %lnat7, i64* %R5_Var
  %lnat8 = load i64, i64* %R4_Var
  store i64 %lnat8, i64* %R4_Var
  %lnat9 = load i64, i64* %R3_Var
  store i64 %lnat9, i64* %R3_Var
  %lnata = load i64, i64* %R2_Var
  store i64 %lnata, i64* %R2_Var
  %lnatb = ptrtoint %Main_zdwcamparams_closure_struct* @Main_zdwcamparams_closure$def to i64
  store i64 %lnatb, i64* %R1_Var
  %lnatc = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnatd = bitcast i64* %lnatc to i64*
  %lnate = load i64, i64* %lnatd, !tbaa !5
  %lnatf = inttoptr i64 %lnate to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnatg = load i64*, i64** %Hp_Var
  %lnath = load i64, i64* %R1_Var
  %lnati = load i64, i64* %R2_Var
  %lnatj = load i64, i64* %R3_Var
  %lnatk = load i64, i64* %R4_Var
  %lnatl = load i64, i64* %R5_Var
  %lnatm = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnatf( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnatg, i64 %lnath, i64 %lnati, i64 %lnatj, i64 %lnatk, i64 %lnatl, i64 %lnatm, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_camparams_closure_struct = type <{i64}>
@Main_camparams_closure$def = internal global %Main_camparams_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_camparams_info$def to i64)}>
@Main_camparams_closure = alias i8, bitcast (%Main_camparams_closure_struct* @Main_camparams_closure$def to i8*)
@Main_camparams_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_camparams_info$def to i8*)
define ghccc void @Main_camparams_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 21474836505, i64 0, i32 14, i32 0}>
{
natA:
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %catu
catu:
  %lnatB = load i64*, i64** %Sp_Var
  %lnatC = getelementptr inbounds i64, i64* %lnatB, i32 -1
  %lnatD = ptrtoint i64* %lnatC to i64
  %lnatE = icmp ult i64 %lnatD, %SpLim_Arg
  %lnatF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnatE, i1 0 )
  br i1 %lnatF, label %catv, label %catw
catw:
  %lnatH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @catr_info$def to i64
  %lnatG = load i64*, i64** %Sp_Var
  %lnatI = getelementptr inbounds i64, i64* %lnatG, i32 -1
  store i64 %lnatH, i64* %lnatI, !tbaa !2
  %lnatJ = load i64, i64* %R6_Var
  store i64 %lnatJ, i64* %R6_Var
  %lnatK = load i64, i64* %R5_Var
  store i64 %lnatK, i64* %R5_Var
  %lnatL = load i64, i64* %R4_Var
  store i64 %lnatL, i64* %R4_Var
  %lnatM = load i64, i64* %R3_Var
  store i64 %lnatM, i64* %R3_Var
  %lnatN = load i64, i64* %R2_Var
  store i64 %lnatN, i64* %R2_Var
  %lnatO = load i64*, i64** %Sp_Var
  %lnatP = getelementptr inbounds i64, i64* %lnatO, i32 -1
  %lnatQ = ptrtoint i64* %lnatP to i64
  %lnatR = inttoptr i64 %lnatQ to i64*
  store i64* %lnatR, i64** %Sp_Var
  %lnatS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwcamparams_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnatT = load i64*, i64** %Sp_Var
  %lnatU = load i64, i64* %R1_Var
  %lnatV = load i64, i64* %R2_Var
  %lnatW = load i64, i64* %R3_Var
  %lnatX = load i64, i64* %R4_Var
  %lnatY = load i64, i64* %R5_Var
  %lnatZ = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnatS( i64* %Base_Arg, i64* %lnatT, i64* %Hp_Arg, i64 %lnatU, i64 %lnatV, i64 %lnatW, i64 %lnatX, i64 %lnatY, i64 %lnatZ, i64 %SpLim_Arg ) nounwind
  ret void
catv:
  %lnau0 = load i64, i64* %R6_Var
  store i64 %lnau0, i64* %R6_Var
  %lnau1 = load i64, i64* %R5_Var
  store i64 %lnau1, i64* %R5_Var
  %lnau2 = load i64, i64* %R4_Var
  store i64 %lnau2, i64* %R4_Var
  %lnau3 = load i64, i64* %R3_Var
  store i64 %lnau3, i64* %R3_Var
  %lnau4 = load i64, i64* %R2_Var
  store i64 %lnau4, i64* %R2_Var
  %lnau5 = ptrtoint %Main_camparams_closure_struct* @Main_camparams_closure$def to i64
  store i64 %lnau5, i64* %R1_Var
  %lnau6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnau7 = bitcast i64* %lnau6 to i64*
  %lnau8 = load i64, i64* %lnau7, !tbaa !5
  %lnau9 = inttoptr i64 %lnau8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaua = load i64*, i64** %Sp_Var
  %lnaub = load i64, i64* %R1_Var
  %lnauc = load i64, i64* %R2_Var
  %lnaud = load i64, i64* %R3_Var
  %lnaue = load i64, i64* %R4_Var
  %lnauf = load i64, i64* %R5_Var
  %lnaug = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnau9( i64* %Base_Arg, i64* %lnaua, i64* %Hp_Arg, i64 %lnaub, i64 %lnauc, i64 %lnaud, i64 %lnaue, i64 %lnauf, i64 %lnaug, i64 %SpLim_Arg ) nounwind
  ret void
}
@catr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @catr_info$def to i8*)
define internal ghccc void @catr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nauh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %catr
catr:
  %lnaui = load i64*, i64** %Hp_Var
  %lnauj = getelementptr inbounds i64, i64* %lnaui, i32 4
  %lnauk = ptrtoint i64* %lnauj to i64
  %lnaul = inttoptr i64 %lnauk to i64*
  store i64* %lnaul, i64** %Hp_Var
  %lnaum = load i64*, i64** %Hp_Var
  %lnaun = ptrtoint i64* %lnaum to i64
  %lnauo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaup = bitcast i64* %lnauo to i64*
  %lnauq = load i64, i64* %lnaup, !tbaa !5
  %lnaur = icmp ugt i64 %lnaun, %lnauq
  %lnaus = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaur, i1 0 )
  br i1 %lnaus, label %catz, label %caty
caty:
  %lnauu = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaut = load i64*, i64** %Hp_Var
  %lnauv = getelementptr inbounds i64, i64* %lnaut, i32 -3
  store i64 %lnauu, i64* %lnauv, !tbaa !3
  %lnaux = load i64, i64* %R1_Var
  %lnauw = load i64*, i64** %Hp_Var
  %lnauy = getelementptr inbounds i64, i64* %lnauw, i32 -2
  store i64 %lnaux, i64* %lnauy, !tbaa !3
  %lnauA = load i64, i64* %R2_Var
  %lnauz = load i64*, i64** %Hp_Var
  %lnauB = getelementptr inbounds i64, i64* %lnauz, i32 -1
  store i64 %lnauA, i64* %lnauB, !tbaa !3
  %lnauD = load i64, i64* %R3_Var
  %lnauC = load i64*, i64** %Hp_Var
  %lnauE = getelementptr inbounds i64, i64* %lnauC, i32 0
  store i64 %lnauD, i64* %lnauE, !tbaa !3
  %lnauG = load i64*, i64** %Hp_Var
  %lnauH = ptrtoint i64* %lnauG to i64
  %lnauI = add i64 %lnauH, -23
  store i64 %lnauI, i64* %R1_Var
  %lnauJ = load i64*, i64** %Sp_Var
  %lnauK = getelementptr inbounds i64, i64* %lnauJ, i32 1
  %lnauL = ptrtoint i64* %lnauK to i64
  %lnauM = inttoptr i64 %lnauL to i64*
  store i64* %lnauM, i64** %Sp_Var
  %lnauN = load i64*, i64** %Sp_Var
  %lnauO = getelementptr inbounds i64, i64* %lnauN, i32 0
  %lnauP = bitcast i64* %lnauO to i64*
  %lnauQ = load i64, i64* %lnauP, !tbaa !2
  %lnauR = inttoptr i64 %lnauQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnauS = load i64*, i64** %Sp_Var
  %lnauT = load i64*, i64** %Hp_Var
  %lnauU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnauR( i64* %Base_Arg, i64* %lnauS, i64* %lnauT, i64 %lnauU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
catz:
  %lnauV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnauV, !tbaa !5
  %lnauW = load i64, i64* %R3_Var
  store i64 %lnauW, i64* %R3_Var
  %lnauX = load i64, i64* %R2_Var
  store i64 %lnauX, i64* %R2_Var
  %lnauY = load i64, i64* %R1_Var
  store i64 %lnauY, i64* %R1_Var
  %lnauZ = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnav0 = load i64*, i64** %Sp_Var
  %lnav1 = load i64*, i64** %Hp_Var
  %lnav2 = load i64, i64* %R1_Var
  %lnav3 = load i64, i64* %R2_Var
  %lnav4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnauZ( i64* %Base_Arg, i64* %lnav0, i64* %lnav1, i64 %lnav2, i64 %lnav3, i64 %lnav4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_dtor_closure_struct = type <{i64}>
@Main_dtor_closure$def = internal global %Main_dtor_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_dtor_info$def to i64)}>
@Main_dtor_closure = alias i8, bitcast (%Main_dtor_closure_struct* @Main_dtor_closure$def to i8*)
@Main_dtor_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_dtor_info$def to i8*)
define ghccc void @Main_dtor_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
navs:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cavc
cavc:
  %lnavt = load i64*, i64** %Sp_Var
  %lnavu = getelementptr inbounds i64, i64* %lnavt, i32 -1
  %lnavv = ptrtoint i64* %lnavu to i64
  %lnavw = icmp ult i64 %lnavv, %SpLim_Arg
  %lnavx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnavw, i1 0 )
  br i1 %lnavx, label %cavm, label %cavn
cavn:
  %lnavz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to i64
  %lnavy = load i64*, i64** %Sp_Var
  %lnavA = getelementptr inbounds i64, i64* %lnavy, i32 -1
  store i64 %lnavz, i64* %lnavA, !tbaa !2
  %lnavB = load i64, i64* %R2_Var
  store i64 %lnavB, i64* %R1_Var
  %lnavC = load i64*, i64** %Sp_Var
  %lnavD = getelementptr inbounds i64, i64* %lnavC, i32 -1
  %lnavE = ptrtoint i64* %lnavD to i64
  %lnavF = inttoptr i64 %lnavE to i64*
  store i64* %lnavF, i64** %Sp_Var
  %lnavG = load i64, i64* %R1_Var
  %lnavH = and i64 %lnavG, 7
  %lnavI = icmp ne i64 %lnavH, 0
  br i1 %lnavI, label %uavr, label %cava
cava:
  %lnavK = load i64, i64* %R1_Var
  %lnavL = inttoptr i64 %lnavK to i64*
  %lnavM = load i64, i64* %lnavL, !tbaa !4
  %lnavN = inttoptr i64 %lnavM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnavO = load i64*, i64** %Sp_Var
  %lnavP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnavN( i64* %Base_Arg, i64* %lnavO, i64* %Hp_Arg, i64 %lnavP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uavr:
  %lnavQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnavR = load i64*, i64** %Sp_Var
  %lnavS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnavQ( i64* %Base_Arg, i64* %lnavR, i64* %Hp_Arg, i64 %lnavS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cavm:
  %lnavT = load i64, i64* %R2_Var
  store i64 %lnavT, i64* %R2_Var
  %lnavU = ptrtoint %Main_dtor_closure_struct* @Main_dtor_closure$def to i64
  store i64 %lnavU, i64* %R1_Var
  %lnavV = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnavW = bitcast i64* %lnavV to i64*
  %lnavX = load i64, i64* %lnavW, !tbaa !5
  %lnavY = inttoptr i64 %lnavX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnavZ = load i64*, i64** %Sp_Var
  %lnaw0 = load i64, i64* %R1_Var
  %lnaw1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnavY( i64* %Base_Arg, i64* %lnavZ, i64* %Hp_Arg, i64 %lnaw0, i64 %lnaw1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cav9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to i8*)
define internal ghccc void @cav9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
naw2:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7um = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cav9
cav9:
  %lnaw3 = load i64*, i64** %Hp_Var
  %lnaw4 = getelementptr inbounds i64, i64* %lnaw3, i32 2
  %lnaw5 = ptrtoint i64* %lnaw4 to i64
  %lnaw6 = inttoptr i64 %lnaw5 to i64*
  store i64* %lnaw6, i64** %Hp_Var
  %lnaw7 = load i64*, i64** %Hp_Var
  %lnaw8 = ptrtoint i64* %lnaw7 to i64
  %lnaw9 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnawa = bitcast i64* %lnaw9 to i64*
  %lnawb = load i64, i64* %lnawa, !tbaa !5
  %lnawc = icmp ugt i64 %lnaw8, %lnawb
  %lnawd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnawc, i1 0 )
  br i1 %lnawd, label %cavq, label %cavp
cavp:
  %lnawg = load i64, i64* %R1_Var
  %lnawh = add i64 %lnawg, 7
  %lnawi = inttoptr i64 %lnawh to double*
  %lnawj = load double, double* %lnawi, !tbaa !4
  %lnawk = fmul double %lnawj, 0x400921FB54442D18
  %lnawl = fdiv double %lnawk, 0x4066800000000000
  store double %lnawl, double* %ls7um
  %lnawn = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnawm = load i64*, i64** %Hp_Var
  %lnawo = getelementptr inbounds i64, i64* %lnawm, i32 -1
  store i64 %lnawn, i64* %lnawo, !tbaa !3
  %lnawq = load double, double* %ls7um
  %lnawp = load i64*, i64** %Hp_Var
  %lnawr = getelementptr inbounds i64, i64* %lnawp, i32 0
  %lnaws = bitcast i64* %lnawr to double*
  store double %lnawq, double* %lnaws, !tbaa !3
  %lnawu = load i64*, i64** %Hp_Var
  %lnawv = ptrtoint i64* %lnawu to i64
  %lnaww = add i64 %lnawv, -7
  store i64 %lnaww, i64* %R1_Var
  %lnawx = load i64*, i64** %Sp_Var
  %lnawy = getelementptr inbounds i64, i64* %lnawx, i32 1
  %lnawz = ptrtoint i64* %lnawy to i64
  %lnawA = inttoptr i64 %lnawz to i64*
  store i64* %lnawA, i64** %Sp_Var
  %lnawB = load i64*, i64** %Sp_Var
  %lnawC = getelementptr inbounds i64, i64* %lnawB, i32 0
  %lnawD = bitcast i64* %lnawC to i64*
  %lnawE = load i64, i64* %lnawD, !tbaa !2
  %lnawF = inttoptr i64 %lnawE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawG = load i64*, i64** %Sp_Var
  %lnawH = load i64*, i64** %Hp_Var
  %lnawI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawF( i64* %Base_Arg, i64* %lnawG, i64* %lnawH, i64 %lnawI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cavq:
  %lnawJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnawJ, !tbaa !5
  %lnawK = load i64, i64* %R1_Var
  store i64 %lnawK, i64* %R1_Var
  %lnawL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawM = load i64*, i64** %Sp_Var
  %lnawN = load i64*, i64** %Hp_Var
  %lnawO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawL( i64* %Base_Arg, i64* %lnawM, i64* %lnawN, i64 %lnawO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecadd_closure_struct = type <{i64}>
@Main_vecadd_closure$def = internal global %Main_vecadd_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecadd_info$def to i64)}>
@Main_vecadd_closure = alias i8, bitcast (%Main_vecadd_closure_struct* @Main_vecadd_closure$def to i8*)
@s7sY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sY_info$def to i8*)
define internal ghccc void @s7sY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naxy:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cax7
cax7:
  %lnaxz = load i64*, i64** %Sp_Var
  %lnaxA = getelementptr inbounds i64, i64* %lnaxz, i32 -2
  %lnaxB = ptrtoint i64* %lnaxA to i64
  %lnaxC = icmp ult i64 %lnaxB, %SpLim_Arg
  %lnaxD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaxC, i1 0 )
  br i1 %lnaxD, label %cax8, label %cax9
cax9:
  %lnaxF = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaxE = load i64*, i64** %Sp_Var
  %lnaxG = getelementptr inbounds i64, i64* %lnaxE, i32 -2
  store i64 %lnaxF, i64* %lnaxG, !tbaa !2
  %lnaxI = load i64, i64* %R1_Var
  %lnaxH = load i64*, i64** %Sp_Var
  %lnaxJ = getelementptr inbounds i64, i64* %lnaxH, i32 -1
  store i64 %lnaxI, i64* %lnaxJ, !tbaa !2
  %lnaxM = load i64, i64* %R1_Var
  %lnaxN = add i64 %lnaxM, 24
  %lnaxO = inttoptr i64 %lnaxN to i64*
  %lnaxP = load i64, i64* %lnaxO, !tbaa !4
  store i64 %lnaxP, i64* %R3_Var
  %lnaxS = load i64, i64* %R1_Var
  %lnaxT = add i64 %lnaxS, 16
  %lnaxU = inttoptr i64 %lnaxT to i64*
  %lnaxV = load i64, i64* %lnaxU, !tbaa !4
  store i64 %lnaxV, i64* %R2_Var
  %lnaxW = load i64*, i64** %Sp_Var
  %lnaxX = getelementptr inbounds i64, i64* %lnaxW, i32 -2
  %lnaxY = ptrtoint i64* %lnaxX to i64
  %lnaxZ = inttoptr i64 %lnaxY to i64*
  store i64* %lnaxZ, i64** %Sp_Var
  %lnay0 = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnay1 = load i64*, i64** %Sp_Var
  %lnay2 = load i64, i64* %R1_Var
  %lnay3 = load i64, i64* %R2_Var
  %lnay4 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnay0( i64* %Base_Arg, i64* %lnay1, i64* %Hp_Arg, i64 %lnay2, i64 %lnay3, i64 %lnay4, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cax8:
  %lnay5 = load i64, i64* %R1_Var
  store i64 %lnay5, i64* %R1_Var
  %lnay6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnay7 = bitcast i64* %lnay6 to i64*
  %lnay8 = load i64, i64* %lnay7, !tbaa !5
  %lnay9 = inttoptr i64 %lnay8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaya = load i64*, i64** %Sp_Var
  %lnayb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnay9( i64* %Base_Arg, i64* %lnaya, i64* %Hp_Arg, i64 %lnayb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7sX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sX_info$def to i8*)
define internal ghccc void @s7sX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nayc:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caxe
caxe:
  %lnayd = load i64*, i64** %Sp_Var
  %lnaye = getelementptr inbounds i64, i64* %lnayd, i32 -2
  %lnayf = ptrtoint i64* %lnaye to i64
  %lnayg = icmp ult i64 %lnayf, %SpLim_Arg
  %lnayh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnayg, i1 0 )
  br i1 %lnayh, label %caxf, label %caxg
caxg:
  %lnayj = ptrtoint i8* @stg_upd_frame_info to i64
  %lnayi = load i64*, i64** %Sp_Var
  %lnayk = getelementptr inbounds i64, i64* %lnayi, i32 -2
  store i64 %lnayj, i64* %lnayk, !tbaa !2
  %lnaym = load i64, i64* %R1_Var
  %lnayl = load i64*, i64** %Sp_Var
  %lnayn = getelementptr inbounds i64, i64* %lnayl, i32 -1
  store i64 %lnaym, i64* %lnayn, !tbaa !2
  %lnayq = load i64, i64* %R1_Var
  %lnayr = add i64 %lnayq, 24
  %lnays = inttoptr i64 %lnayr to i64*
  %lnayt = load i64, i64* %lnays, !tbaa !4
  store i64 %lnayt, i64* %R3_Var
  %lnayw = load i64, i64* %R1_Var
  %lnayx = add i64 %lnayw, 16
  %lnayy = inttoptr i64 %lnayx to i64*
  %lnayz = load i64, i64* %lnayy, !tbaa !4
  store i64 %lnayz, i64* %R2_Var
  %lnayA = load i64*, i64** %Sp_Var
  %lnayB = getelementptr inbounds i64, i64* %lnayA, i32 -2
  %lnayC = ptrtoint i64* %lnayB to i64
  %lnayD = inttoptr i64 %lnayC to i64*
  store i64* %lnayD, i64** %Sp_Var
  %lnayE = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayF = load i64*, i64** %Sp_Var
  %lnayG = load i64, i64* %R1_Var
  %lnayH = load i64, i64* %R2_Var
  %lnayI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayE( i64* %Base_Arg, i64* %lnayF, i64* %Hp_Arg, i64 %lnayG, i64 %lnayH, i64 %lnayI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caxf:
  %lnayJ = load i64, i64* %R1_Var
  store i64 %lnayJ, i64* %R1_Var
  %lnayK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnayL = bitcast i64* %lnayK to i64*
  %lnayM = load i64, i64* %lnayL, !tbaa !5
  %lnayN = inttoptr i64 %lnayM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayO = load i64*, i64** %Sp_Var
  %lnayP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayN( i64* %Base_Arg, i64* %lnayO, i64* %Hp_Arg, i64 %lnayP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7sW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sW_info$def to i8*)
define internal ghccc void @s7sW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nayQ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caxl
caxl:
  %lnayR = load i64*, i64** %Sp_Var
  %lnayS = getelementptr inbounds i64, i64* %lnayR, i32 -2
  %lnayT = ptrtoint i64* %lnayS to i64
  %lnayU = icmp ult i64 %lnayT, %SpLim_Arg
  %lnayV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnayU, i1 0 )
  br i1 %lnayV, label %caxm, label %caxn
caxn:
  %lnayX = ptrtoint i8* @stg_upd_frame_info to i64
  %lnayW = load i64*, i64** %Sp_Var
  %lnayY = getelementptr inbounds i64, i64* %lnayW, i32 -2
  store i64 %lnayX, i64* %lnayY, !tbaa !2
  %lnaz0 = load i64, i64* %R1_Var
  %lnayZ = load i64*, i64** %Sp_Var
  %lnaz1 = getelementptr inbounds i64, i64* %lnayZ, i32 -1
  store i64 %lnaz0, i64* %lnaz1, !tbaa !2
  %lnaz4 = load i64, i64* %R1_Var
  %lnaz5 = add i64 %lnaz4, 24
  %lnaz6 = inttoptr i64 %lnaz5 to i64*
  %lnaz7 = load i64, i64* %lnaz6, !tbaa !4
  store i64 %lnaz7, i64* %R3_Var
  %lnaza = load i64, i64* %R1_Var
  %lnazb = add i64 %lnaza, 16
  %lnazc = inttoptr i64 %lnazb to i64*
  %lnazd = load i64, i64* %lnazc, !tbaa !4
  store i64 %lnazd, i64* %R2_Var
  %lnaze = load i64*, i64** %Sp_Var
  %lnazf = getelementptr inbounds i64, i64* %lnaze, i32 -2
  %lnazg = ptrtoint i64* %lnazf to i64
  %lnazh = inttoptr i64 %lnazg to i64*
  store i64* %lnazh, i64** %Sp_Var
  %lnazi = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazj = load i64*, i64** %Sp_Var
  %lnazk = load i64, i64* %R1_Var
  %lnazl = load i64, i64* %R2_Var
  %lnazm = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazi( i64* %Base_Arg, i64* %lnazj, i64* %Hp_Arg, i64 %lnazk, i64 %lnazl, i64 %lnazm, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caxm:
  %lnazn = load i64, i64* %R1_Var
  store i64 %lnazn, i64* %R1_Var
  %lnazo = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnazp = bitcast i64* %lnazo to i64*
  %lnazq = load i64, i64* %lnazp, !tbaa !5
  %lnazr = inttoptr i64 %lnazq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazs = load i64*, i64** %Sp_Var
  %lnazt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazr( i64* %Base_Arg, i64* %lnazs, i64* %Hp_Arg, i64 %lnazt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_vecadd_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecadd_info$def to i8*)
define ghccc void @Main_vecadd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
nazu:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caxo
caxo:
  %lnazv = load i64*, i64** %Sp_Var
  %lnazw = getelementptr inbounds i64, i64* %lnazv, i32 -4
  %lnazx = ptrtoint i64* %lnazw to i64
  %lnazy = icmp ult i64 %lnazx, %SpLim_Arg
  %lnazz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnazy, i1 0 )
  br i1 %lnazz, label %caxq, label %caxr
caxr:
  %lnazB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawT_info$def to i64
  %lnazA = load i64*, i64** %Sp_Var
  %lnazC = getelementptr inbounds i64, i64* %lnazA, i32 -2
  store i64 %lnazB, i64* %lnazC, !tbaa !2
  %lnazD = load i64, i64* %R2_Var
  store i64 %lnazD, i64* %R1_Var
  %lnazF = load i64, i64* %R3_Var
  %lnazE = load i64*, i64** %Sp_Var
  %lnazG = getelementptr inbounds i64, i64* %lnazE, i32 -1
  store i64 %lnazF, i64* %lnazG, !tbaa !2
  %lnazH = load i64*, i64** %Sp_Var
  %lnazI = getelementptr inbounds i64, i64* %lnazH, i32 -2
  %lnazJ = ptrtoint i64* %lnazI to i64
  %lnazK = inttoptr i64 %lnazJ to i64*
  store i64* %lnazK, i64** %Sp_Var
  %lnazL = load i64, i64* %R1_Var
  %lnazM = and i64 %lnazL, 7
  %lnazN = icmp ne i64 %lnazM, 0
  br i1 %lnazN, label %uaxx, label %cawU
cawU:
  %lnazP = load i64, i64* %R1_Var
  %lnazQ = inttoptr i64 %lnazP to i64*
  %lnazR = load i64, i64* %lnazQ, !tbaa !4
  %lnazS = inttoptr i64 %lnazR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazT = load i64*, i64** %Sp_Var
  %lnazU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazS( i64* %Base_Arg, i64* %lnazT, i64* %Hp_Arg, i64 %lnazU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxx:
  %lnazV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazW = load i64*, i64** %Sp_Var
  %lnazX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazV( i64* %Base_Arg, i64* %lnazW, i64* %Hp_Arg, i64 %lnazX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caxq:
  %lnazY = load i64, i64* %R3_Var
  store i64 %lnazY, i64* %R3_Var
  %lnazZ = load i64, i64* %R2_Var
  store i64 %lnazZ, i64* %R2_Var
  %lnaA0 = ptrtoint %Main_vecadd_closure_struct* @Main_vecadd_closure$def to i64
  store i64 %lnaA0, i64* %R1_Var
  %lnaA1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaA2 = bitcast i64* %lnaA1 to i64*
  %lnaA3 = load i64, i64* %lnaA2, !tbaa !5
  %lnaA4 = inttoptr i64 %lnaA3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaA5 = load i64*, i64** %Sp_Var
  %lnaA6 = load i64, i64* %R1_Var
  %lnaA7 = load i64, i64* %R2_Var
  %lnaA8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaA4( i64* %Base_Arg, i64* %lnaA5, i64* %Hp_Arg, i64 %lnaA6, i64 %lnaA7, i64 %lnaA8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawT_info$def to i8*)
define internal ghccc void @cawT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
naA9:
  %ls7sP = alloca i64, i32 1
  %ls7sQ = alloca i64, i32 1
  %ls7sR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cawT
cawT:
  %lnaAb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawY_info$def to i64
  %lnaAa = load i64*, i64** %Sp_Var
  %lnaAc = getelementptr inbounds i64, i64* %lnaAa, i32 -2
  store i64 %lnaAb, i64* %lnaAc, !tbaa !2
  %lnaAf = load i64, i64* %R1_Var
  %lnaAg = add i64 %lnaAf, 7
  %lnaAh = inttoptr i64 %lnaAg to i64*
  %lnaAi = load i64, i64* %lnaAh, !tbaa !4
  store i64 %lnaAi, i64* %ls7sP
  %lnaAl = load i64, i64* %R1_Var
  %lnaAm = add i64 %lnaAl, 15
  %lnaAn = inttoptr i64 %lnaAm to i64*
  %lnaAo = load i64, i64* %lnaAn, !tbaa !4
  store i64 %lnaAo, i64* %ls7sQ
  %lnaAr = load i64, i64* %R1_Var
  %lnaAs = add i64 %lnaAr, 23
  %lnaAt = inttoptr i64 %lnaAs to i64*
  %lnaAu = load i64, i64* %lnaAt, !tbaa !4
  store i64 %lnaAu, i64* %ls7sR
  %lnaAv = load i64*, i64** %Sp_Var
  %lnaAw = getelementptr inbounds i64, i64* %lnaAv, i32 1
  %lnaAx = bitcast i64* %lnaAw to i64*
  %lnaAy = load i64, i64* %lnaAx, !tbaa !2
  store i64 %lnaAy, i64* %R1_Var
  %lnaAA = load i64, i64* %ls7sR
  %lnaAz = load i64*, i64** %Sp_Var
  %lnaAB = getelementptr inbounds i64, i64* %lnaAz, i32 -1
  store i64 %lnaAA, i64* %lnaAB, !tbaa !2
  %lnaAD = load i64, i64* %ls7sQ
  %lnaAC = load i64*, i64** %Sp_Var
  %lnaAE = getelementptr inbounds i64, i64* %lnaAC, i32 0
  store i64 %lnaAD, i64* %lnaAE, !tbaa !2
  %lnaAG = load i64, i64* %ls7sP
  %lnaAF = load i64*, i64** %Sp_Var
  %lnaAH = getelementptr inbounds i64, i64* %lnaAF, i32 1
  store i64 %lnaAG, i64* %lnaAH, !tbaa !2
  %lnaAI = load i64*, i64** %Sp_Var
  %lnaAJ = getelementptr inbounds i64, i64* %lnaAI, i32 -2
  %lnaAK = ptrtoint i64* %lnaAJ to i64
  %lnaAL = inttoptr i64 %lnaAK to i64*
  store i64* %lnaAL, i64** %Sp_Var
  %lnaAM = load i64, i64* %R1_Var
  %lnaAN = and i64 %lnaAM, 7
  %lnaAO = icmp ne i64 %lnaAN, 0
  br i1 %lnaAO, label %uaxw, label %cawZ
cawZ:
  %lnaAQ = load i64, i64* %R1_Var
  %lnaAR = inttoptr i64 %lnaAQ to i64*
  %lnaAS = load i64, i64* %lnaAR, !tbaa !4
  %lnaAT = inttoptr i64 %lnaAS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAU = load i64*, i64** %Sp_Var
  %lnaAV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAT( i64* %Base_Arg, i64* %lnaAU, i64* %Hp_Arg, i64 %lnaAV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxw:
  %lnaAW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAX = load i64*, i64** %Sp_Var
  %lnaAY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAW( i64* %Base_Arg, i64* %lnaAX, i64* %Hp_Arg, i64 %lnaAY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawY_info$def to i8*)
define internal ghccc void @cawY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
naAZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7sT = alloca i64, i32 1
  %ls7sU = alloca i64, i32 1
  %ls7sV = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cawY
cawY:
  %lnaB0 = load i64*, i64** %Hp_Var
  %lnaB1 = getelementptr inbounds i64, i64* %lnaB0, i32 16
  %lnaB2 = ptrtoint i64* %lnaB1 to i64
  %lnaB3 = inttoptr i64 %lnaB2 to i64*
  store i64* %lnaB3, i64** %Hp_Var
  %lnaB4 = load i64*, i64** %Hp_Var
  %lnaB5 = ptrtoint i64* %lnaB4 to i64
  %lnaB6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaB7 = bitcast i64* %lnaB6 to i64*
  %lnaB8 = load i64, i64* %lnaB7, !tbaa !5
  %lnaB9 = icmp ugt i64 %lnaB5, %lnaB8
  %lnaBa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaB9, i1 0 )
  br i1 %lnaBa, label %caxv, label %caxu
caxu:
  %lnaBd = load i64, i64* %R1_Var
  %lnaBe = add i64 %lnaBd, 7
  %lnaBf = inttoptr i64 %lnaBe to i64*
  %lnaBg = load i64, i64* %lnaBf, !tbaa !4
  store i64 %lnaBg, i64* %ls7sT
  %lnaBj = load i64, i64* %R1_Var
  %lnaBk = add i64 %lnaBj, 15
  %lnaBl = inttoptr i64 %lnaBk to i64*
  %lnaBm = load i64, i64* %lnaBl, !tbaa !4
  store i64 %lnaBm, i64* %ls7sU
  %lnaBp = load i64, i64* %R1_Var
  %lnaBq = add i64 %lnaBp, 23
  %lnaBr = inttoptr i64 %lnaBq to i64*
  %lnaBs = load i64, i64* %lnaBr, !tbaa !4
  store i64 %lnaBs, i64* %ls7sV
  %lnaBu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sY_info$def to i64
  %lnaBt = load i64*, i64** %Hp_Var
  %lnaBv = getelementptr inbounds i64, i64* %lnaBt, i32 -15
  store i64 %lnaBu, i64* %lnaBv, !tbaa !3
  %lnaBx = load i64*, i64** %Sp_Var
  %lnaBy = getelementptr inbounds i64, i64* %lnaBx, i32 1
  %lnaBz = bitcast i64* %lnaBy to i64*
  %lnaBA = load i64, i64* %lnaBz, !tbaa !2
  %lnaBw = load i64*, i64** %Hp_Var
  %lnaBB = getelementptr inbounds i64, i64* %lnaBw, i32 -13
  store i64 %lnaBA, i64* %lnaBB, !tbaa !3
  %lnaBD = load i64, i64* %ls7sV
  %lnaBC = load i64*, i64** %Hp_Var
  %lnaBE = getelementptr inbounds i64, i64* %lnaBC, i32 -12
  store i64 %lnaBD, i64* %lnaBE, !tbaa !3
  %lnaBG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sX_info$def to i64
  %lnaBF = load i64*, i64** %Hp_Var
  %lnaBH = getelementptr inbounds i64, i64* %lnaBF, i32 -11
  store i64 %lnaBG, i64* %lnaBH, !tbaa !3
  %lnaBJ = load i64*, i64** %Sp_Var
  %lnaBK = getelementptr inbounds i64, i64* %lnaBJ, i32 2
  %lnaBL = bitcast i64* %lnaBK to i64*
  %lnaBM = load i64, i64* %lnaBL, !tbaa !2
  %lnaBI = load i64*, i64** %Hp_Var
  %lnaBN = getelementptr inbounds i64, i64* %lnaBI, i32 -9
  store i64 %lnaBM, i64* %lnaBN, !tbaa !3
  %lnaBP = load i64, i64* %ls7sU
  %lnaBO = load i64*, i64** %Hp_Var
  %lnaBQ = getelementptr inbounds i64, i64* %lnaBO, i32 -8
  store i64 %lnaBP, i64* %lnaBQ, !tbaa !3
  %lnaBS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7sW_info$def to i64
  %lnaBR = load i64*, i64** %Hp_Var
  %lnaBT = getelementptr inbounds i64, i64* %lnaBR, i32 -7
  store i64 %lnaBS, i64* %lnaBT, !tbaa !3
  %lnaBV = load i64*, i64** %Sp_Var
  %lnaBW = getelementptr inbounds i64, i64* %lnaBV, i32 3
  %lnaBX = bitcast i64* %lnaBW to i64*
  %lnaBY = load i64, i64* %lnaBX, !tbaa !2
  %lnaBU = load i64*, i64** %Hp_Var
  %lnaBZ = getelementptr inbounds i64, i64* %lnaBU, i32 -5
  store i64 %lnaBY, i64* %lnaBZ, !tbaa !3
  %lnaC1 = load i64, i64* %ls7sT
  %lnaC0 = load i64*, i64** %Hp_Var
  %lnaC2 = getelementptr inbounds i64, i64* %lnaC0, i32 -4
  store i64 %lnaC1, i64* %lnaC2, !tbaa !3
  %lnaC4 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaC3 = load i64*, i64** %Hp_Var
  %lnaC5 = getelementptr inbounds i64, i64* %lnaC3, i32 -3
  store i64 %lnaC4, i64* %lnaC5, !tbaa !3
  %lnaC7 = load i64*, i64** %Hp_Var
  %lnaC8 = getelementptr inbounds i64, i64* %lnaC7, i32 -7
  %lnaC9 = ptrtoint i64* %lnaC8 to i64
  %lnaC6 = load i64*, i64** %Hp_Var
  %lnaCa = getelementptr inbounds i64, i64* %lnaC6, i32 -2
  store i64 %lnaC9, i64* %lnaCa, !tbaa !3
  %lnaCc = load i64*, i64** %Hp_Var
  %lnaCd = getelementptr inbounds i64, i64* %lnaCc, i32 -11
  %lnaCe = ptrtoint i64* %lnaCd to i64
  %lnaCb = load i64*, i64** %Hp_Var
  %lnaCf = getelementptr inbounds i64, i64* %lnaCb, i32 -1
  store i64 %lnaCe, i64* %lnaCf, !tbaa !3
  %lnaCh = load i64*, i64** %Hp_Var
  %lnaCi = getelementptr inbounds i64, i64* %lnaCh, i32 -15
  %lnaCj = ptrtoint i64* %lnaCi to i64
  %lnaCg = load i64*, i64** %Hp_Var
  %lnaCk = getelementptr inbounds i64, i64* %lnaCg, i32 0
  store i64 %lnaCj, i64* %lnaCk, !tbaa !3
  %lnaCm = load i64*, i64** %Hp_Var
  %lnaCn = ptrtoint i64* %lnaCm to i64
  %lnaCo = add i64 %lnaCn, -23
  store i64 %lnaCo, i64* %R1_Var
  %lnaCp = load i64*, i64** %Sp_Var
  %lnaCq = getelementptr inbounds i64, i64* %lnaCp, i32 4
  %lnaCr = ptrtoint i64* %lnaCq to i64
  %lnaCs = inttoptr i64 %lnaCr to i64*
  store i64* %lnaCs, i64** %Sp_Var
  %lnaCt = load i64*, i64** %Sp_Var
  %lnaCu = getelementptr inbounds i64, i64* %lnaCt, i32 0
  %lnaCv = bitcast i64* %lnaCu to i64*
  %lnaCw = load i64, i64* %lnaCv, !tbaa !2
  %lnaCx = inttoptr i64 %lnaCw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaCy = load i64*, i64** %Sp_Var
  %lnaCz = load i64*, i64** %Hp_Var
  %lnaCA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaCx( i64* %Base_Arg, i64* %lnaCy, i64* %lnaCz, i64 %lnaCA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caxv:
  %lnaCB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnaCB, !tbaa !5
  %lnaCC = load i64, i64* %R1_Var
  store i64 %lnaCC, i64* %R1_Var
  %lnaCD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaCE = load i64*, i64** %Sp_Var
  %lnaCF = load i64*, i64** %Hp_Var
  %lnaCG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaCD( i64* %Base_Arg, i64* %lnaCE, i64* %lnaCF, i64 %lnaCG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecsub_closure_struct = type <{i64}>
@Main_vecsub_closure$def = internal global %Main_vecsub_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecsub_info$def to i64)}>
@Main_vecsub_closure = alias i8, bitcast (%Main_vecsub_closure_struct* @Main_vecsub_closure$def to i8*)
@s7rG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rG_info$def to i8*)
define internal ghccc void @s7rG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naDq:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caCZ
caCZ:
  %lnaDr = load i64*, i64** %Sp_Var
  %lnaDs = getelementptr inbounds i64, i64* %lnaDr, i32 -2
  %lnaDt = ptrtoint i64* %lnaDs to i64
  %lnaDu = icmp ult i64 %lnaDt, %SpLim_Arg
  %lnaDv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaDu, i1 0 )
  br i1 %lnaDv, label %caD0, label %caD1
caD1:
  %lnaDx = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaDw = load i64*, i64** %Sp_Var
  %lnaDy = getelementptr inbounds i64, i64* %lnaDw, i32 -2
  store i64 %lnaDx, i64* %lnaDy, !tbaa !2
  %lnaDA = load i64, i64* %R1_Var
  %lnaDz = load i64*, i64** %Sp_Var
  %lnaDB = getelementptr inbounds i64, i64* %lnaDz, i32 -1
  store i64 %lnaDA, i64* %lnaDB, !tbaa !2
  %lnaDE = load i64, i64* %R1_Var
  %lnaDF = add i64 %lnaDE, 24
  %lnaDG = inttoptr i64 %lnaDF to i64*
  %lnaDH = load i64, i64* %lnaDG, !tbaa !4
  store i64 %lnaDH, i64* %R3_Var
  %lnaDK = load i64, i64* %R1_Var
  %lnaDL = add i64 %lnaDK, 16
  %lnaDM = inttoptr i64 %lnaDL to i64*
  %lnaDN = load i64, i64* %lnaDM, !tbaa !4
  store i64 %lnaDN, i64* %R2_Var
  %lnaDO = load i64*, i64** %Sp_Var
  %lnaDP = getelementptr inbounds i64, i64* %lnaDO, i32 -2
  %lnaDQ = ptrtoint i64* %lnaDP to i64
  %lnaDR = inttoptr i64 %lnaDQ to i64*
  store i64* %lnaDR, i64** %Sp_Var
  %lnaDS = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDT = load i64*, i64** %Sp_Var
  %lnaDU = load i64, i64* %R1_Var
  %lnaDV = load i64, i64* %R2_Var
  %lnaDW = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDS( i64* %Base_Arg, i64* %lnaDT, i64* %Hp_Arg, i64 %lnaDU, i64 %lnaDV, i64 %lnaDW, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caD0:
  %lnaDX = load i64, i64* %R1_Var
  store i64 %lnaDX, i64* %R1_Var
  %lnaDY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaDZ = bitcast i64* %lnaDY to i64*
  %lnaE0 = load i64, i64* %lnaDZ, !tbaa !5
  %lnaE1 = inttoptr i64 %lnaE0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaE2 = load i64*, i64** %Sp_Var
  %lnaE3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaE1( i64* %Base_Arg, i64* %lnaE2, i64* %Hp_Arg, i64 %lnaE3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7rF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rF_info$def to i8*)
define internal ghccc void @s7rF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naE4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caD6
caD6:
  %lnaE5 = load i64*, i64** %Sp_Var
  %lnaE6 = getelementptr inbounds i64, i64* %lnaE5, i32 -2
  %lnaE7 = ptrtoint i64* %lnaE6 to i64
  %lnaE8 = icmp ult i64 %lnaE7, %SpLim_Arg
  %lnaE9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaE8, i1 0 )
  br i1 %lnaE9, label %caD7, label %caD8
caD8:
  %lnaEb = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaEa = load i64*, i64** %Sp_Var
  %lnaEc = getelementptr inbounds i64, i64* %lnaEa, i32 -2
  store i64 %lnaEb, i64* %lnaEc, !tbaa !2
  %lnaEe = load i64, i64* %R1_Var
  %lnaEd = load i64*, i64** %Sp_Var
  %lnaEf = getelementptr inbounds i64, i64* %lnaEd, i32 -1
  store i64 %lnaEe, i64* %lnaEf, !tbaa !2
  %lnaEi = load i64, i64* %R1_Var
  %lnaEj = add i64 %lnaEi, 24
  %lnaEk = inttoptr i64 %lnaEj to i64*
  %lnaEl = load i64, i64* %lnaEk, !tbaa !4
  store i64 %lnaEl, i64* %R3_Var
  %lnaEo = load i64, i64* %R1_Var
  %lnaEp = add i64 %lnaEo, 16
  %lnaEq = inttoptr i64 %lnaEp to i64*
  %lnaEr = load i64, i64* %lnaEq, !tbaa !4
  store i64 %lnaEr, i64* %R2_Var
  %lnaEs = load i64*, i64** %Sp_Var
  %lnaEt = getelementptr inbounds i64, i64* %lnaEs, i32 -2
  %lnaEu = ptrtoint i64* %lnaEt to i64
  %lnaEv = inttoptr i64 %lnaEu to i64*
  store i64* %lnaEv, i64** %Sp_Var
  %lnaEw = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaEx = load i64*, i64** %Sp_Var
  %lnaEy = load i64, i64* %R1_Var
  %lnaEz = load i64, i64* %R2_Var
  %lnaEA = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaEw( i64* %Base_Arg, i64* %lnaEx, i64* %Hp_Arg, i64 %lnaEy, i64 %lnaEz, i64 %lnaEA, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caD7:
  %lnaEB = load i64, i64* %R1_Var
  store i64 %lnaEB, i64* %R1_Var
  %lnaEC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaED = bitcast i64* %lnaEC to i64*
  %lnaEE = load i64, i64* %lnaED, !tbaa !5
  %lnaEF = inttoptr i64 %lnaEE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaEG = load i64*, i64** %Sp_Var
  %lnaEH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaEF( i64* %Base_Arg, i64* %lnaEG, i64* %Hp_Arg, i64 %lnaEH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7rE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rE_info$def to i8*)
define internal ghccc void @s7rE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naEI:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caDd
caDd:
  %lnaEJ = load i64*, i64** %Sp_Var
  %lnaEK = getelementptr inbounds i64, i64* %lnaEJ, i32 -2
  %lnaEL = ptrtoint i64* %lnaEK to i64
  %lnaEM = icmp ult i64 %lnaEL, %SpLim_Arg
  %lnaEN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaEM, i1 0 )
  br i1 %lnaEN, label %caDe, label %caDf
caDf:
  %lnaEP = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaEO = load i64*, i64** %Sp_Var
  %lnaEQ = getelementptr inbounds i64, i64* %lnaEO, i32 -2
  store i64 %lnaEP, i64* %lnaEQ, !tbaa !2
  %lnaES = load i64, i64* %R1_Var
  %lnaER = load i64*, i64** %Sp_Var
  %lnaET = getelementptr inbounds i64, i64* %lnaER, i32 -1
  store i64 %lnaES, i64* %lnaET, !tbaa !2
  %lnaEW = load i64, i64* %R1_Var
  %lnaEX = add i64 %lnaEW, 24
  %lnaEY = inttoptr i64 %lnaEX to i64*
  %lnaEZ = load i64, i64* %lnaEY, !tbaa !4
  store i64 %lnaEZ, i64* %R3_Var
  %lnaF2 = load i64, i64* %R1_Var
  %lnaF3 = add i64 %lnaF2, 16
  %lnaF4 = inttoptr i64 %lnaF3 to i64*
  %lnaF5 = load i64, i64* %lnaF4, !tbaa !4
  store i64 %lnaF5, i64* %R2_Var
  %lnaF6 = load i64*, i64** %Sp_Var
  %lnaF7 = getelementptr inbounds i64, i64* %lnaF6, i32 -2
  %lnaF8 = ptrtoint i64* %lnaF7 to i64
  %lnaF9 = inttoptr i64 %lnaF8 to i64*
  store i64* %lnaF9, i64** %Sp_Var
  %lnaFa = bitcast i8* @base_GHCziFloat_minusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFb = load i64*, i64** %Sp_Var
  %lnaFc = load i64, i64* %R1_Var
  %lnaFd = load i64, i64* %R2_Var
  %lnaFe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFa( i64* %Base_Arg, i64* %lnaFb, i64* %Hp_Arg, i64 %lnaFc, i64 %lnaFd, i64 %lnaFe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caDe:
  %lnaFf = load i64, i64* %R1_Var
  store i64 %lnaFf, i64* %R1_Var
  %lnaFg = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaFh = bitcast i64* %lnaFg to i64*
  %lnaFi = load i64, i64* %lnaFh, !tbaa !5
  %lnaFj = inttoptr i64 %lnaFi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFk = load i64*, i64** %Sp_Var
  %lnaFl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFj( i64* %Base_Arg, i64* %lnaFk, i64* %Hp_Arg, i64 %lnaFl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_vecsub_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecsub_info$def to i8*)
define ghccc void @Main_vecsub_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
naFm:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caDg
caDg:
  %lnaFn = load i64*, i64** %Sp_Var
  %lnaFo = getelementptr inbounds i64, i64* %lnaFn, i32 -4
  %lnaFp = ptrtoint i64* %lnaFo to i64
  %lnaFq = icmp ult i64 %lnaFp, %SpLim_Arg
  %lnaFr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaFq, i1 0 )
  br i1 %lnaFr, label %caDi, label %caDj
caDj:
  %lnaFt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCL_info$def to i64
  %lnaFs = load i64*, i64** %Sp_Var
  %lnaFu = getelementptr inbounds i64, i64* %lnaFs, i32 -2
  store i64 %lnaFt, i64* %lnaFu, !tbaa !2
  %lnaFv = load i64, i64* %R2_Var
  store i64 %lnaFv, i64* %R1_Var
  %lnaFx = load i64, i64* %R3_Var
  %lnaFw = load i64*, i64** %Sp_Var
  %lnaFy = getelementptr inbounds i64, i64* %lnaFw, i32 -1
  store i64 %lnaFx, i64* %lnaFy, !tbaa !2
  %lnaFz = load i64*, i64** %Sp_Var
  %lnaFA = getelementptr inbounds i64, i64* %lnaFz, i32 -2
  %lnaFB = ptrtoint i64* %lnaFA to i64
  %lnaFC = inttoptr i64 %lnaFB to i64*
  store i64* %lnaFC, i64** %Sp_Var
  %lnaFD = load i64, i64* %R1_Var
  %lnaFE = and i64 %lnaFD, 7
  %lnaFF = icmp ne i64 %lnaFE, 0
  br i1 %lnaFF, label %uaDp, label %caCM
caCM:
  %lnaFH = load i64, i64* %R1_Var
  %lnaFI = inttoptr i64 %lnaFH to i64*
  %lnaFJ = load i64, i64* %lnaFI, !tbaa !4
  %lnaFK = inttoptr i64 %lnaFJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFL = load i64*, i64** %Sp_Var
  %lnaFM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFK( i64* %Base_Arg, i64* %lnaFL, i64* %Hp_Arg, i64 %lnaFM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaDp:
  %lnaFN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFO = load i64*, i64** %Sp_Var
  %lnaFP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFN( i64* %Base_Arg, i64* %lnaFO, i64* %Hp_Arg, i64 %lnaFP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caDi:
  %lnaFQ = load i64, i64* %R3_Var
  store i64 %lnaFQ, i64* %R3_Var
  %lnaFR = load i64, i64* %R2_Var
  store i64 %lnaFR, i64* %R2_Var
  %lnaFS = ptrtoint %Main_vecsub_closure_struct* @Main_vecsub_closure$def to i64
  store i64 %lnaFS, i64* %R1_Var
  %lnaFT = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaFU = bitcast i64* %lnaFT to i64*
  %lnaFV = load i64, i64* %lnaFU, !tbaa !5
  %lnaFW = inttoptr i64 %lnaFV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFX = load i64*, i64** %Sp_Var
  %lnaFY = load i64, i64* %R1_Var
  %lnaFZ = load i64, i64* %R2_Var
  %lnaG0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFW( i64* %Base_Arg, i64* %lnaFX, i64* %Hp_Arg, i64 %lnaFY, i64 %lnaFZ, i64 %lnaG0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caCL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCL_info$def to i8*)
define internal ghccc void @caCL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
naG1:
  %ls7rx = alloca i64, i32 1
  %ls7ry = alloca i64, i32 1
  %ls7rz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caCL
caCL:
  %lnaG3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCQ_info$def to i64
  %lnaG2 = load i64*, i64** %Sp_Var
  %lnaG4 = getelementptr inbounds i64, i64* %lnaG2, i32 -2
  store i64 %lnaG3, i64* %lnaG4, !tbaa !2
  %lnaG7 = load i64, i64* %R1_Var
  %lnaG8 = add i64 %lnaG7, 7
  %lnaG9 = inttoptr i64 %lnaG8 to i64*
  %lnaGa = load i64, i64* %lnaG9, !tbaa !4
  store i64 %lnaGa, i64* %ls7rx
  %lnaGd = load i64, i64* %R1_Var
  %lnaGe = add i64 %lnaGd, 15
  %lnaGf = inttoptr i64 %lnaGe to i64*
  %lnaGg = load i64, i64* %lnaGf, !tbaa !4
  store i64 %lnaGg, i64* %ls7ry
  %lnaGj = load i64, i64* %R1_Var
  %lnaGk = add i64 %lnaGj, 23
  %lnaGl = inttoptr i64 %lnaGk to i64*
  %lnaGm = load i64, i64* %lnaGl, !tbaa !4
  store i64 %lnaGm, i64* %ls7rz
  %lnaGn = load i64*, i64** %Sp_Var
  %lnaGo = getelementptr inbounds i64, i64* %lnaGn, i32 1
  %lnaGp = bitcast i64* %lnaGo to i64*
  %lnaGq = load i64, i64* %lnaGp, !tbaa !2
  store i64 %lnaGq, i64* %R1_Var
  %lnaGs = load i64, i64* %ls7rz
  %lnaGr = load i64*, i64** %Sp_Var
  %lnaGt = getelementptr inbounds i64, i64* %lnaGr, i32 -1
  store i64 %lnaGs, i64* %lnaGt, !tbaa !2
  %lnaGv = load i64, i64* %ls7ry
  %lnaGu = load i64*, i64** %Sp_Var
  %lnaGw = getelementptr inbounds i64, i64* %lnaGu, i32 0
  store i64 %lnaGv, i64* %lnaGw, !tbaa !2
  %lnaGy = load i64, i64* %ls7rx
  %lnaGx = load i64*, i64** %Sp_Var
  %lnaGz = getelementptr inbounds i64, i64* %lnaGx, i32 1
  store i64 %lnaGy, i64* %lnaGz, !tbaa !2
  %lnaGA = load i64*, i64** %Sp_Var
  %lnaGB = getelementptr inbounds i64, i64* %lnaGA, i32 -2
  %lnaGC = ptrtoint i64* %lnaGB to i64
  %lnaGD = inttoptr i64 %lnaGC to i64*
  store i64* %lnaGD, i64** %Sp_Var
  %lnaGE = load i64, i64* %R1_Var
  %lnaGF = and i64 %lnaGE, 7
  %lnaGG = icmp ne i64 %lnaGF, 0
  br i1 %lnaGG, label %uaDo, label %caCR
caCR:
  %lnaGI = load i64, i64* %R1_Var
  %lnaGJ = inttoptr i64 %lnaGI to i64*
  %lnaGK = load i64, i64* %lnaGJ, !tbaa !4
  %lnaGL = inttoptr i64 %lnaGK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGM = load i64*, i64** %Sp_Var
  %lnaGN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGL( i64* %Base_Arg, i64* %lnaGM, i64* %Hp_Arg, i64 %lnaGN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaDo:
  %lnaGO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGP = load i64*, i64** %Sp_Var
  %lnaGQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGO( i64* %Base_Arg, i64* %lnaGP, i64* %Hp_Arg, i64 %lnaGQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caCQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCQ_info$def to i8*)
define internal ghccc void @caCQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
naGR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7rB = alloca i64, i32 1
  %ls7rC = alloca i64, i32 1
  %ls7rD = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caCQ
caCQ:
  %lnaGS = load i64*, i64** %Hp_Var
  %lnaGT = getelementptr inbounds i64, i64* %lnaGS, i32 16
  %lnaGU = ptrtoint i64* %lnaGT to i64
  %lnaGV = inttoptr i64 %lnaGU to i64*
  store i64* %lnaGV, i64** %Hp_Var
  %lnaGW = load i64*, i64** %Hp_Var
  %lnaGX = ptrtoint i64* %lnaGW to i64
  %lnaGY = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaGZ = bitcast i64* %lnaGY to i64*
  %lnaH0 = load i64, i64* %lnaGZ, !tbaa !5
  %lnaH1 = icmp ugt i64 %lnaGX, %lnaH0
  %lnaH2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaH1, i1 0 )
  br i1 %lnaH2, label %caDn, label %caDm
caDm:
  %lnaH5 = load i64, i64* %R1_Var
  %lnaH6 = add i64 %lnaH5, 7
  %lnaH7 = inttoptr i64 %lnaH6 to i64*
  %lnaH8 = load i64, i64* %lnaH7, !tbaa !4
  store i64 %lnaH8, i64* %ls7rB
  %lnaHb = load i64, i64* %R1_Var
  %lnaHc = add i64 %lnaHb, 15
  %lnaHd = inttoptr i64 %lnaHc to i64*
  %lnaHe = load i64, i64* %lnaHd, !tbaa !4
  store i64 %lnaHe, i64* %ls7rC
  %lnaHh = load i64, i64* %R1_Var
  %lnaHi = add i64 %lnaHh, 23
  %lnaHj = inttoptr i64 %lnaHi to i64*
  %lnaHk = load i64, i64* %lnaHj, !tbaa !4
  store i64 %lnaHk, i64* %ls7rD
  %lnaHm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rG_info$def to i64
  %lnaHl = load i64*, i64** %Hp_Var
  %lnaHn = getelementptr inbounds i64, i64* %lnaHl, i32 -15
  store i64 %lnaHm, i64* %lnaHn, !tbaa !3
  %lnaHp = load i64*, i64** %Sp_Var
  %lnaHq = getelementptr inbounds i64, i64* %lnaHp, i32 1
  %lnaHr = bitcast i64* %lnaHq to i64*
  %lnaHs = load i64, i64* %lnaHr, !tbaa !2
  %lnaHo = load i64*, i64** %Hp_Var
  %lnaHt = getelementptr inbounds i64, i64* %lnaHo, i32 -13
  store i64 %lnaHs, i64* %lnaHt, !tbaa !3
  %lnaHv = load i64, i64* %ls7rD
  %lnaHu = load i64*, i64** %Hp_Var
  %lnaHw = getelementptr inbounds i64, i64* %lnaHu, i32 -12
  store i64 %lnaHv, i64* %lnaHw, !tbaa !3
  %lnaHy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rF_info$def to i64
  %lnaHx = load i64*, i64** %Hp_Var
  %lnaHz = getelementptr inbounds i64, i64* %lnaHx, i32 -11
  store i64 %lnaHy, i64* %lnaHz, !tbaa !3
  %lnaHB = load i64*, i64** %Sp_Var
  %lnaHC = getelementptr inbounds i64, i64* %lnaHB, i32 2
  %lnaHD = bitcast i64* %lnaHC to i64*
  %lnaHE = load i64, i64* %lnaHD, !tbaa !2
  %lnaHA = load i64*, i64** %Hp_Var
  %lnaHF = getelementptr inbounds i64, i64* %lnaHA, i32 -9
  store i64 %lnaHE, i64* %lnaHF, !tbaa !3
  %lnaHH = load i64, i64* %ls7rC
  %lnaHG = load i64*, i64** %Hp_Var
  %lnaHI = getelementptr inbounds i64, i64* %lnaHG, i32 -8
  store i64 %lnaHH, i64* %lnaHI, !tbaa !3
  %lnaHK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rE_info$def to i64
  %lnaHJ = load i64*, i64** %Hp_Var
  %lnaHL = getelementptr inbounds i64, i64* %lnaHJ, i32 -7
  store i64 %lnaHK, i64* %lnaHL, !tbaa !3
  %lnaHN = load i64*, i64** %Sp_Var
  %lnaHO = getelementptr inbounds i64, i64* %lnaHN, i32 3
  %lnaHP = bitcast i64* %lnaHO to i64*
  %lnaHQ = load i64, i64* %lnaHP, !tbaa !2
  %lnaHM = load i64*, i64** %Hp_Var
  %lnaHR = getelementptr inbounds i64, i64* %lnaHM, i32 -5
  store i64 %lnaHQ, i64* %lnaHR, !tbaa !3
  %lnaHT = load i64, i64* %ls7rB
  %lnaHS = load i64*, i64** %Hp_Var
  %lnaHU = getelementptr inbounds i64, i64* %lnaHS, i32 -4
  store i64 %lnaHT, i64* %lnaHU, !tbaa !3
  %lnaHW = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaHV = load i64*, i64** %Hp_Var
  %lnaHX = getelementptr inbounds i64, i64* %lnaHV, i32 -3
  store i64 %lnaHW, i64* %lnaHX, !tbaa !3
  %lnaHZ = load i64*, i64** %Hp_Var
  %lnaI0 = getelementptr inbounds i64, i64* %lnaHZ, i32 -7
  %lnaI1 = ptrtoint i64* %lnaI0 to i64
  %lnaHY = load i64*, i64** %Hp_Var
  %lnaI2 = getelementptr inbounds i64, i64* %lnaHY, i32 -2
  store i64 %lnaI1, i64* %lnaI2, !tbaa !3
  %lnaI4 = load i64*, i64** %Hp_Var
  %lnaI5 = getelementptr inbounds i64, i64* %lnaI4, i32 -11
  %lnaI6 = ptrtoint i64* %lnaI5 to i64
  %lnaI3 = load i64*, i64** %Hp_Var
  %lnaI7 = getelementptr inbounds i64, i64* %lnaI3, i32 -1
  store i64 %lnaI6, i64* %lnaI7, !tbaa !3
  %lnaI9 = load i64*, i64** %Hp_Var
  %lnaIa = getelementptr inbounds i64, i64* %lnaI9, i32 -15
  %lnaIb = ptrtoint i64* %lnaIa to i64
  %lnaI8 = load i64*, i64** %Hp_Var
  %lnaIc = getelementptr inbounds i64, i64* %lnaI8, i32 0
  store i64 %lnaIb, i64* %lnaIc, !tbaa !3
  %lnaIe = load i64*, i64** %Hp_Var
  %lnaIf = ptrtoint i64* %lnaIe to i64
  %lnaIg = add i64 %lnaIf, -23
  store i64 %lnaIg, i64* %R1_Var
  %lnaIh = load i64*, i64** %Sp_Var
  %lnaIi = getelementptr inbounds i64, i64* %lnaIh, i32 4
  %lnaIj = ptrtoint i64* %lnaIi to i64
  %lnaIk = inttoptr i64 %lnaIj to i64*
  store i64* %lnaIk, i64** %Sp_Var
  %lnaIl = load i64*, i64** %Sp_Var
  %lnaIm = getelementptr inbounds i64, i64* %lnaIl, i32 0
  %lnaIn = bitcast i64* %lnaIm to i64*
  %lnaIo = load i64, i64* %lnaIn, !tbaa !2
  %lnaIp = inttoptr i64 %lnaIo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIq = load i64*, i64** %Sp_Var
  %lnaIr = load i64*, i64** %Hp_Var
  %lnaIs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaIp( i64* %Base_Arg, i64* %lnaIq, i64* %lnaIr, i64 %lnaIs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caDn:
  %lnaIt = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnaIt, !tbaa !5
  %lnaIu = load i64, i64* %R1_Var
  store i64 %lnaIu, i64* %R1_Var
  %lnaIv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIw = load i64*, i64** %Sp_Var
  %lnaIx = load i64*, i64** %Hp_Var
  %lnaIy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaIv( i64* %Base_Arg, i64* %lnaIw, i64* %lnaIx, i64 %lnaIy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecmult_closure_struct = type <{i64}>
@Main_vecmult_closure$def = internal global %Main_vecmult_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecmult_info$def to i64)}>
@Main_vecmult_closure = alias i8, bitcast (%Main_vecmult_closure_struct* @Main_vecmult_closure$def to i8*)
@s7rt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rt_info$def to i8*)
define internal ghccc void @s7rt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naJi:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caIR
caIR:
  %lnaJj = load i64*, i64** %Sp_Var
  %lnaJk = getelementptr inbounds i64, i64* %lnaJj, i32 -2
  %lnaJl = ptrtoint i64* %lnaJk to i64
  %lnaJm = icmp ult i64 %lnaJl, %SpLim_Arg
  %lnaJn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaJm, i1 0 )
  br i1 %lnaJn, label %caIS, label %caIT
caIT:
  %lnaJp = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaJo = load i64*, i64** %Sp_Var
  %lnaJq = getelementptr inbounds i64, i64* %lnaJo, i32 -2
  store i64 %lnaJp, i64* %lnaJq, !tbaa !2
  %lnaJs = load i64, i64* %R1_Var
  %lnaJr = load i64*, i64** %Sp_Var
  %lnaJt = getelementptr inbounds i64, i64* %lnaJr, i32 -1
  store i64 %lnaJs, i64* %lnaJt, !tbaa !2
  %lnaJw = load i64, i64* %R1_Var
  %lnaJx = add i64 %lnaJw, 24
  %lnaJy = inttoptr i64 %lnaJx to i64*
  %lnaJz = load i64, i64* %lnaJy, !tbaa !4
  store i64 %lnaJz, i64* %R3_Var
  %lnaJC = load i64, i64* %R1_Var
  %lnaJD = add i64 %lnaJC, 16
  %lnaJE = inttoptr i64 %lnaJD to i64*
  %lnaJF = load i64, i64* %lnaJE, !tbaa !4
  store i64 %lnaJF, i64* %R2_Var
  %lnaJG = load i64*, i64** %Sp_Var
  %lnaJH = getelementptr inbounds i64, i64* %lnaJG, i32 -2
  %lnaJI = ptrtoint i64* %lnaJH to i64
  %lnaJJ = inttoptr i64 %lnaJI to i64*
  store i64* %lnaJJ, i64** %Sp_Var
  %lnaJK = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJL = load i64*, i64** %Sp_Var
  %lnaJM = load i64, i64* %R1_Var
  %lnaJN = load i64, i64* %R2_Var
  %lnaJO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJK( i64* %Base_Arg, i64* %lnaJL, i64* %Hp_Arg, i64 %lnaJM, i64 %lnaJN, i64 %lnaJO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIS:
  %lnaJP = load i64, i64* %R1_Var
  store i64 %lnaJP, i64* %R1_Var
  %lnaJQ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaJR = bitcast i64* %lnaJQ to i64*
  %lnaJS = load i64, i64* %lnaJR, !tbaa !5
  %lnaJT = inttoptr i64 %lnaJS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJU = load i64*, i64** %Sp_Var
  %lnaJV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJT( i64* %Base_Arg, i64* %lnaJU, i64* %Hp_Arg, i64 %lnaJV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7rs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rs_info$def to i8*)
define internal ghccc void @s7rs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naJW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caIY
caIY:
  %lnaJX = load i64*, i64** %Sp_Var
  %lnaJY = getelementptr inbounds i64, i64* %lnaJX, i32 -2
  %lnaJZ = ptrtoint i64* %lnaJY to i64
  %lnaK0 = icmp ult i64 %lnaJZ, %SpLim_Arg
  %lnaK1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaK0, i1 0 )
  br i1 %lnaK1, label %caIZ, label %caJ0
caJ0:
  %lnaK3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaK2 = load i64*, i64** %Sp_Var
  %lnaK4 = getelementptr inbounds i64, i64* %lnaK2, i32 -2
  store i64 %lnaK3, i64* %lnaK4, !tbaa !2
  %lnaK6 = load i64, i64* %R1_Var
  %lnaK5 = load i64*, i64** %Sp_Var
  %lnaK7 = getelementptr inbounds i64, i64* %lnaK5, i32 -1
  store i64 %lnaK6, i64* %lnaK7, !tbaa !2
  %lnaKa = load i64, i64* %R1_Var
  %lnaKb = add i64 %lnaKa, 24
  %lnaKc = inttoptr i64 %lnaKb to i64*
  %lnaKd = load i64, i64* %lnaKc, !tbaa !4
  store i64 %lnaKd, i64* %R3_Var
  %lnaKg = load i64, i64* %R1_Var
  %lnaKh = add i64 %lnaKg, 16
  %lnaKi = inttoptr i64 %lnaKh to i64*
  %lnaKj = load i64, i64* %lnaKi, !tbaa !4
  store i64 %lnaKj, i64* %R2_Var
  %lnaKk = load i64*, i64** %Sp_Var
  %lnaKl = getelementptr inbounds i64, i64* %lnaKk, i32 -2
  %lnaKm = ptrtoint i64* %lnaKl to i64
  %lnaKn = inttoptr i64 %lnaKm to i64*
  store i64* %lnaKn, i64** %Sp_Var
  %lnaKo = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKp = load i64*, i64** %Sp_Var
  %lnaKq = load i64, i64* %R1_Var
  %lnaKr = load i64, i64* %R2_Var
  %lnaKs = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKo( i64* %Base_Arg, i64* %lnaKp, i64* %Hp_Arg, i64 %lnaKq, i64 %lnaKr, i64 %lnaKs, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIZ:
  %lnaKt = load i64, i64* %R1_Var
  store i64 %lnaKt, i64* %R1_Var
  %lnaKu = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaKv = bitcast i64* %lnaKu to i64*
  %lnaKw = load i64, i64* %lnaKv, !tbaa !5
  %lnaKx = inttoptr i64 %lnaKw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKy = load i64*, i64** %Sp_Var
  %lnaKz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKx( i64* %Base_Arg, i64* %lnaKy, i64* %Hp_Arg, i64 %lnaKz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7rr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rr_info$def to i8*)
define internal ghccc void @s7rr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naKA:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caJ5
caJ5:
  %lnaKB = load i64*, i64** %Sp_Var
  %lnaKC = getelementptr inbounds i64, i64* %lnaKB, i32 -2
  %lnaKD = ptrtoint i64* %lnaKC to i64
  %lnaKE = icmp ult i64 %lnaKD, %SpLim_Arg
  %lnaKF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaKE, i1 0 )
  br i1 %lnaKF, label %caJ6, label %caJ7
caJ7:
  %lnaKH = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaKG = load i64*, i64** %Sp_Var
  %lnaKI = getelementptr inbounds i64, i64* %lnaKG, i32 -2
  store i64 %lnaKH, i64* %lnaKI, !tbaa !2
  %lnaKK = load i64, i64* %R1_Var
  %lnaKJ = load i64*, i64** %Sp_Var
  %lnaKL = getelementptr inbounds i64, i64* %lnaKJ, i32 -1
  store i64 %lnaKK, i64* %lnaKL, !tbaa !2
  %lnaKO = load i64, i64* %R1_Var
  %lnaKP = add i64 %lnaKO, 24
  %lnaKQ = inttoptr i64 %lnaKP to i64*
  %lnaKR = load i64, i64* %lnaKQ, !tbaa !4
  store i64 %lnaKR, i64* %R3_Var
  %lnaKU = load i64, i64* %R1_Var
  %lnaKV = add i64 %lnaKU, 16
  %lnaKW = inttoptr i64 %lnaKV to i64*
  %lnaKX = load i64, i64* %lnaKW, !tbaa !4
  store i64 %lnaKX, i64* %R2_Var
  %lnaKY = load i64*, i64** %Sp_Var
  %lnaKZ = getelementptr inbounds i64, i64* %lnaKY, i32 -2
  %lnaL0 = ptrtoint i64* %lnaKZ to i64
  %lnaL1 = inttoptr i64 %lnaL0 to i64*
  store i64* %lnaL1, i64** %Sp_Var
  %lnaL2 = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaL3 = load i64*, i64** %Sp_Var
  %lnaL4 = load i64, i64* %R1_Var
  %lnaL5 = load i64, i64* %R2_Var
  %lnaL6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaL2( i64* %Base_Arg, i64* %lnaL3, i64* %Hp_Arg, i64 %lnaL4, i64 %lnaL5, i64 %lnaL6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJ6:
  %lnaL7 = load i64, i64* %R1_Var
  store i64 %lnaL7, i64* %R1_Var
  %lnaL8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaL9 = bitcast i64* %lnaL8 to i64*
  %lnaLa = load i64, i64* %lnaL9, !tbaa !5
  %lnaLb = inttoptr i64 %lnaLa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLc = load i64*, i64** %Sp_Var
  %lnaLd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLb( i64* %Base_Arg, i64* %lnaLc, i64* %Hp_Arg, i64 %lnaLd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_vecmult_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecmult_info$def to i8*)
define ghccc void @Main_vecmult_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
naLe:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caJ8
caJ8:
  %lnaLf = load i64*, i64** %Sp_Var
  %lnaLg = getelementptr inbounds i64, i64* %lnaLf, i32 -4
  %lnaLh = ptrtoint i64* %lnaLg to i64
  %lnaLi = icmp ult i64 %lnaLh, %SpLim_Arg
  %lnaLj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaLi, i1 0 )
  br i1 %lnaLj, label %caJa, label %caJb
caJb:
  %lnaLl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caID_info$def to i64
  %lnaLk = load i64*, i64** %Sp_Var
  %lnaLm = getelementptr inbounds i64, i64* %lnaLk, i32 -2
  store i64 %lnaLl, i64* %lnaLm, !tbaa !2
  %lnaLn = load i64, i64* %R2_Var
  store i64 %lnaLn, i64* %R1_Var
  %lnaLp = load i64, i64* %R3_Var
  %lnaLo = load i64*, i64** %Sp_Var
  %lnaLq = getelementptr inbounds i64, i64* %lnaLo, i32 -1
  store i64 %lnaLp, i64* %lnaLq, !tbaa !2
  %lnaLr = load i64*, i64** %Sp_Var
  %lnaLs = getelementptr inbounds i64, i64* %lnaLr, i32 -2
  %lnaLt = ptrtoint i64* %lnaLs to i64
  %lnaLu = inttoptr i64 %lnaLt to i64*
  store i64* %lnaLu, i64** %Sp_Var
  %lnaLv = load i64, i64* %R1_Var
  %lnaLw = and i64 %lnaLv, 7
  %lnaLx = icmp ne i64 %lnaLw, 0
  br i1 %lnaLx, label %uaJh, label %caIE
caIE:
  %lnaLz = load i64, i64* %R1_Var
  %lnaLA = inttoptr i64 %lnaLz to i64*
  %lnaLB = load i64, i64* %lnaLA, !tbaa !4
  %lnaLC = inttoptr i64 %lnaLB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLD = load i64*, i64** %Sp_Var
  %lnaLE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLC( i64* %Base_Arg, i64* %lnaLD, i64* %Hp_Arg, i64 %lnaLE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaJh:
  %lnaLF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caID_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLG = load i64*, i64** %Sp_Var
  %lnaLH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLF( i64* %Base_Arg, i64* %lnaLG, i64* %Hp_Arg, i64 %lnaLH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJa:
  %lnaLI = load i64, i64* %R3_Var
  store i64 %lnaLI, i64* %R3_Var
  %lnaLJ = load i64, i64* %R2_Var
  store i64 %lnaLJ, i64* %R2_Var
  %lnaLK = ptrtoint %Main_vecmult_closure_struct* @Main_vecmult_closure$def to i64
  store i64 %lnaLK, i64* %R1_Var
  %lnaLL = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaLM = bitcast i64* %lnaLL to i64*
  %lnaLN = load i64, i64* %lnaLM, !tbaa !5
  %lnaLO = inttoptr i64 %lnaLN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLP = load i64*, i64** %Sp_Var
  %lnaLQ = load i64, i64* %R1_Var
  %lnaLR = load i64, i64* %R2_Var
  %lnaLS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLO( i64* %Base_Arg, i64* %lnaLP, i64* %Hp_Arg, i64 %lnaLQ, i64 %lnaLR, i64 %lnaLS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caID_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caID_info$def to i8*)
define internal ghccc void @caID_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
naLT:
  %ls7rk = alloca i64, i32 1
  %ls7rl = alloca i64, i32 1
  %ls7rm = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caID
caID:
  %lnaLV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caII_info$def to i64
  %lnaLU = load i64*, i64** %Sp_Var
  %lnaLW = getelementptr inbounds i64, i64* %lnaLU, i32 -2
  store i64 %lnaLV, i64* %lnaLW, !tbaa !2
  %lnaLZ = load i64, i64* %R1_Var
  %lnaM0 = add i64 %lnaLZ, 7
  %lnaM1 = inttoptr i64 %lnaM0 to i64*
  %lnaM2 = load i64, i64* %lnaM1, !tbaa !4
  store i64 %lnaM2, i64* %ls7rk
  %lnaM5 = load i64, i64* %R1_Var
  %lnaM6 = add i64 %lnaM5, 15
  %lnaM7 = inttoptr i64 %lnaM6 to i64*
  %lnaM8 = load i64, i64* %lnaM7, !tbaa !4
  store i64 %lnaM8, i64* %ls7rl
  %lnaMb = load i64, i64* %R1_Var
  %lnaMc = add i64 %lnaMb, 23
  %lnaMd = inttoptr i64 %lnaMc to i64*
  %lnaMe = load i64, i64* %lnaMd, !tbaa !4
  store i64 %lnaMe, i64* %ls7rm
  %lnaMf = load i64*, i64** %Sp_Var
  %lnaMg = getelementptr inbounds i64, i64* %lnaMf, i32 1
  %lnaMh = bitcast i64* %lnaMg to i64*
  %lnaMi = load i64, i64* %lnaMh, !tbaa !2
  store i64 %lnaMi, i64* %R1_Var
  %lnaMk = load i64, i64* %ls7rm
  %lnaMj = load i64*, i64** %Sp_Var
  %lnaMl = getelementptr inbounds i64, i64* %lnaMj, i32 -1
  store i64 %lnaMk, i64* %lnaMl, !tbaa !2
  %lnaMn = load i64, i64* %ls7rl
  %lnaMm = load i64*, i64** %Sp_Var
  %lnaMo = getelementptr inbounds i64, i64* %lnaMm, i32 0
  store i64 %lnaMn, i64* %lnaMo, !tbaa !2
  %lnaMq = load i64, i64* %ls7rk
  %lnaMp = load i64*, i64** %Sp_Var
  %lnaMr = getelementptr inbounds i64, i64* %lnaMp, i32 1
  store i64 %lnaMq, i64* %lnaMr, !tbaa !2
  %lnaMs = load i64*, i64** %Sp_Var
  %lnaMt = getelementptr inbounds i64, i64* %lnaMs, i32 -2
  %lnaMu = ptrtoint i64* %lnaMt to i64
  %lnaMv = inttoptr i64 %lnaMu to i64*
  store i64* %lnaMv, i64** %Sp_Var
  %lnaMw = load i64, i64* %R1_Var
  %lnaMx = and i64 %lnaMw, 7
  %lnaMy = icmp ne i64 %lnaMx, 0
  br i1 %lnaMy, label %uaJg, label %caIJ
caIJ:
  %lnaMA = load i64, i64* %R1_Var
  %lnaMB = inttoptr i64 %lnaMA to i64*
  %lnaMC = load i64, i64* %lnaMB, !tbaa !4
  %lnaMD = inttoptr i64 %lnaMC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaME = load i64*, i64** %Sp_Var
  %lnaMF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaMD( i64* %Base_Arg, i64* %lnaME, i64* %Hp_Arg, i64 %lnaMF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaJg:
  %lnaMG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caII_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaMH = load i64*, i64** %Sp_Var
  %lnaMI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaMG( i64* %Base_Arg, i64* %lnaMH, i64* %Hp_Arg, i64 %lnaMI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caII_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caII_info$def to i8*)
define internal ghccc void @caII_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
naMJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7ro = alloca i64, i32 1
  %ls7rp = alloca i64, i32 1
  %ls7rq = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caII
caII:
  %lnaMK = load i64*, i64** %Hp_Var
  %lnaML = getelementptr inbounds i64, i64* %lnaMK, i32 16
  %lnaMM = ptrtoint i64* %lnaML to i64
  %lnaMN = inttoptr i64 %lnaMM to i64*
  store i64* %lnaMN, i64** %Hp_Var
  %lnaMO = load i64*, i64** %Hp_Var
  %lnaMP = ptrtoint i64* %lnaMO to i64
  %lnaMQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaMR = bitcast i64* %lnaMQ to i64*
  %lnaMS = load i64, i64* %lnaMR, !tbaa !5
  %lnaMT = icmp ugt i64 %lnaMP, %lnaMS
  %lnaMU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaMT, i1 0 )
  br i1 %lnaMU, label %caJf, label %caJe
caJe:
  %lnaMX = load i64, i64* %R1_Var
  %lnaMY = add i64 %lnaMX, 7
  %lnaMZ = inttoptr i64 %lnaMY to i64*
  %lnaN0 = load i64, i64* %lnaMZ, !tbaa !4
  store i64 %lnaN0, i64* %ls7ro
  %lnaN3 = load i64, i64* %R1_Var
  %lnaN4 = add i64 %lnaN3, 15
  %lnaN5 = inttoptr i64 %lnaN4 to i64*
  %lnaN6 = load i64, i64* %lnaN5, !tbaa !4
  store i64 %lnaN6, i64* %ls7rp
  %lnaN9 = load i64, i64* %R1_Var
  %lnaNa = add i64 %lnaN9, 23
  %lnaNb = inttoptr i64 %lnaNa to i64*
  %lnaNc = load i64, i64* %lnaNb, !tbaa !4
  store i64 %lnaNc, i64* %ls7rq
  %lnaNe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rt_info$def to i64
  %lnaNd = load i64*, i64** %Hp_Var
  %lnaNf = getelementptr inbounds i64, i64* %lnaNd, i32 -15
  store i64 %lnaNe, i64* %lnaNf, !tbaa !3
  %lnaNh = load i64*, i64** %Sp_Var
  %lnaNi = getelementptr inbounds i64, i64* %lnaNh, i32 1
  %lnaNj = bitcast i64* %lnaNi to i64*
  %lnaNk = load i64, i64* %lnaNj, !tbaa !2
  %lnaNg = load i64*, i64** %Hp_Var
  %lnaNl = getelementptr inbounds i64, i64* %lnaNg, i32 -13
  store i64 %lnaNk, i64* %lnaNl, !tbaa !3
  %lnaNn = load i64, i64* %ls7rq
  %lnaNm = load i64*, i64** %Hp_Var
  %lnaNo = getelementptr inbounds i64, i64* %lnaNm, i32 -12
  store i64 %lnaNn, i64* %lnaNo, !tbaa !3
  %lnaNq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rs_info$def to i64
  %lnaNp = load i64*, i64** %Hp_Var
  %lnaNr = getelementptr inbounds i64, i64* %lnaNp, i32 -11
  store i64 %lnaNq, i64* %lnaNr, !tbaa !3
  %lnaNt = load i64*, i64** %Sp_Var
  %lnaNu = getelementptr inbounds i64, i64* %lnaNt, i32 2
  %lnaNv = bitcast i64* %lnaNu to i64*
  %lnaNw = load i64, i64* %lnaNv, !tbaa !2
  %lnaNs = load i64*, i64** %Hp_Var
  %lnaNx = getelementptr inbounds i64, i64* %lnaNs, i32 -9
  store i64 %lnaNw, i64* %lnaNx, !tbaa !3
  %lnaNz = load i64, i64* %ls7rp
  %lnaNy = load i64*, i64** %Hp_Var
  %lnaNA = getelementptr inbounds i64, i64* %lnaNy, i32 -8
  store i64 %lnaNz, i64* %lnaNA, !tbaa !3
  %lnaNC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rr_info$def to i64
  %lnaNB = load i64*, i64** %Hp_Var
  %lnaND = getelementptr inbounds i64, i64* %lnaNB, i32 -7
  store i64 %lnaNC, i64* %lnaND, !tbaa !3
  %lnaNF = load i64*, i64** %Sp_Var
  %lnaNG = getelementptr inbounds i64, i64* %lnaNF, i32 3
  %lnaNH = bitcast i64* %lnaNG to i64*
  %lnaNI = load i64, i64* %lnaNH, !tbaa !2
  %lnaNE = load i64*, i64** %Hp_Var
  %lnaNJ = getelementptr inbounds i64, i64* %lnaNE, i32 -5
  store i64 %lnaNI, i64* %lnaNJ, !tbaa !3
  %lnaNL = load i64, i64* %ls7ro
  %lnaNK = load i64*, i64** %Hp_Var
  %lnaNM = getelementptr inbounds i64, i64* %lnaNK, i32 -4
  store i64 %lnaNL, i64* %lnaNM, !tbaa !3
  %lnaNO = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaNN = load i64*, i64** %Hp_Var
  %lnaNP = getelementptr inbounds i64, i64* %lnaNN, i32 -3
  store i64 %lnaNO, i64* %lnaNP, !tbaa !3
  %lnaNR = load i64*, i64** %Hp_Var
  %lnaNS = getelementptr inbounds i64, i64* %lnaNR, i32 -7
  %lnaNT = ptrtoint i64* %lnaNS to i64
  %lnaNQ = load i64*, i64** %Hp_Var
  %lnaNU = getelementptr inbounds i64, i64* %lnaNQ, i32 -2
  store i64 %lnaNT, i64* %lnaNU, !tbaa !3
  %lnaNW = load i64*, i64** %Hp_Var
  %lnaNX = getelementptr inbounds i64, i64* %lnaNW, i32 -11
  %lnaNY = ptrtoint i64* %lnaNX to i64
  %lnaNV = load i64*, i64** %Hp_Var
  %lnaNZ = getelementptr inbounds i64, i64* %lnaNV, i32 -1
  store i64 %lnaNY, i64* %lnaNZ, !tbaa !3
  %lnaO1 = load i64*, i64** %Hp_Var
  %lnaO2 = getelementptr inbounds i64, i64* %lnaO1, i32 -15
  %lnaO3 = ptrtoint i64* %lnaO2 to i64
  %lnaO0 = load i64*, i64** %Hp_Var
  %lnaO4 = getelementptr inbounds i64, i64* %lnaO0, i32 0
  store i64 %lnaO3, i64* %lnaO4, !tbaa !3
  %lnaO6 = load i64*, i64** %Hp_Var
  %lnaO7 = ptrtoint i64* %lnaO6 to i64
  %lnaO8 = add i64 %lnaO7, -23
  store i64 %lnaO8, i64* %R1_Var
  %lnaO9 = load i64*, i64** %Sp_Var
  %lnaOa = getelementptr inbounds i64, i64* %lnaO9, i32 4
  %lnaOb = ptrtoint i64* %lnaOa to i64
  %lnaOc = inttoptr i64 %lnaOb to i64*
  store i64* %lnaOc, i64** %Sp_Var
  %lnaOd = load i64*, i64** %Sp_Var
  %lnaOe = getelementptr inbounds i64, i64* %lnaOd, i32 0
  %lnaOf = bitcast i64* %lnaOe to i64*
  %lnaOg = load i64, i64* %lnaOf, !tbaa !2
  %lnaOh = inttoptr i64 %lnaOg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaOi = load i64*, i64** %Sp_Var
  %lnaOj = load i64*, i64** %Hp_Var
  %lnaOk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaOh( i64* %Base_Arg, i64* %lnaOi, i64* %lnaOj, i64 %lnaOk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJf:
  %lnaOl = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnaOl, !tbaa !5
  %lnaOm = load i64, i64* %R1_Var
  store i64 %lnaOm, i64* %R1_Var
  %lnaOn = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaOo = load i64*, i64** %Sp_Var
  %lnaOp = load i64*, i64** %Hp_Var
  %lnaOq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaOn( i64* %Base_Arg, i64* %lnaOo, i64* %lnaOp, i64 %lnaOq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecscale_closure_struct = type <{i64}>
@Main_vecscale_closure$def = internal global %Main_vecscale_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecscale_info$def to i64)}>
@Main_vecscale_closure = alias i8, bitcast (%Main_vecscale_closure_struct* @Main_vecscale_closure$def to i8*)
@s7rg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rg_info$def to i8*)
define internal ghccc void @s7rg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naP3:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caOE
caOE:
  %lnaP4 = load i64*, i64** %Sp_Var
  %lnaP5 = getelementptr inbounds i64, i64* %lnaP4, i32 -2
  %lnaP6 = ptrtoint i64* %lnaP5 to i64
  %lnaP7 = icmp ult i64 %lnaP6, %SpLim_Arg
  %lnaP8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaP7, i1 0 )
  br i1 %lnaP8, label %caOF, label %caOG
caOG:
  %lnaPa = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaP9 = load i64*, i64** %Sp_Var
  %lnaPb = getelementptr inbounds i64, i64* %lnaP9, i32 -2
  store i64 %lnaPa, i64* %lnaPb, !tbaa !2
  %lnaPd = load i64, i64* %R1_Var
  %lnaPc = load i64*, i64** %Sp_Var
  %lnaPe = getelementptr inbounds i64, i64* %lnaPc, i32 -1
  store i64 %lnaPd, i64* %lnaPe, !tbaa !2
  %lnaPh = load i64, i64* %R1_Var
  %lnaPi = add i64 %lnaPh, 24
  %lnaPj = inttoptr i64 %lnaPi to i64*
  %lnaPk = load i64, i64* %lnaPj, !tbaa !4
  store i64 %lnaPk, i64* %R3_Var
  %lnaPn = load i64, i64* %R1_Var
  %lnaPo = add i64 %lnaPn, 16
  %lnaPp = inttoptr i64 %lnaPo to i64*
  %lnaPq = load i64, i64* %lnaPp, !tbaa !4
  store i64 %lnaPq, i64* %R2_Var
  %lnaPr = load i64*, i64** %Sp_Var
  %lnaPs = getelementptr inbounds i64, i64* %lnaPr, i32 -2
  %lnaPt = ptrtoint i64* %lnaPs to i64
  %lnaPu = inttoptr i64 %lnaPt to i64*
  store i64* %lnaPu, i64** %Sp_Var
  %lnaPv = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaPw = load i64*, i64** %Sp_Var
  %lnaPx = load i64, i64* %R1_Var
  %lnaPy = load i64, i64* %R2_Var
  %lnaPz = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaPv( i64* %Base_Arg, i64* %lnaPw, i64* %Hp_Arg, i64 %lnaPx, i64 %lnaPy, i64 %lnaPz, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOF:
  %lnaPA = load i64, i64* %R1_Var
  store i64 %lnaPA, i64* %R1_Var
  %lnaPB = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaPC = bitcast i64* %lnaPB to i64*
  %lnaPD = load i64, i64* %lnaPC, !tbaa !5
  %lnaPE = inttoptr i64 %lnaPD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaPF = load i64*, i64** %Sp_Var
  %lnaPG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaPE( i64* %Base_Arg, i64* %lnaPF, i64* %Hp_Arg, i64 %lnaPG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7rf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rf_info$def to i8*)
define internal ghccc void @s7rf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naPH:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caOL
caOL:
  %lnaPI = load i64*, i64** %Sp_Var
  %lnaPJ = getelementptr inbounds i64, i64* %lnaPI, i32 -2
  %lnaPK = ptrtoint i64* %lnaPJ to i64
  %lnaPL = icmp ult i64 %lnaPK, %SpLim_Arg
  %lnaPM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaPL, i1 0 )
  br i1 %lnaPM, label %caOM, label %caON
caON:
  %lnaPO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaPN = load i64*, i64** %Sp_Var
  %lnaPP = getelementptr inbounds i64, i64* %lnaPN, i32 -2
  store i64 %lnaPO, i64* %lnaPP, !tbaa !2
  %lnaPR = load i64, i64* %R1_Var
  %lnaPQ = load i64*, i64** %Sp_Var
  %lnaPS = getelementptr inbounds i64, i64* %lnaPQ, i32 -1
  store i64 %lnaPR, i64* %lnaPS, !tbaa !2
  %lnaPV = load i64, i64* %R1_Var
  %lnaPW = add i64 %lnaPV, 24
  %lnaPX = inttoptr i64 %lnaPW to i64*
  %lnaPY = load i64, i64* %lnaPX, !tbaa !4
  store i64 %lnaPY, i64* %R3_Var
  %lnaQ1 = load i64, i64* %R1_Var
  %lnaQ2 = add i64 %lnaQ1, 16
  %lnaQ3 = inttoptr i64 %lnaQ2 to i64*
  %lnaQ4 = load i64, i64* %lnaQ3, !tbaa !4
  store i64 %lnaQ4, i64* %R2_Var
  %lnaQ5 = load i64*, i64** %Sp_Var
  %lnaQ6 = getelementptr inbounds i64, i64* %lnaQ5, i32 -2
  %lnaQ7 = ptrtoint i64* %lnaQ6 to i64
  %lnaQ8 = inttoptr i64 %lnaQ7 to i64*
  store i64* %lnaQ8, i64** %Sp_Var
  %lnaQ9 = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQa = load i64*, i64** %Sp_Var
  %lnaQb = load i64, i64* %R1_Var
  %lnaQc = load i64, i64* %R2_Var
  %lnaQd = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQ9( i64* %Base_Arg, i64* %lnaQa, i64* %Hp_Arg, i64 %lnaQb, i64 %lnaQc, i64 %lnaQd, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOM:
  %lnaQe = load i64, i64* %R1_Var
  store i64 %lnaQe, i64* %R1_Var
  %lnaQf = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaQg = bitcast i64* %lnaQf to i64*
  %lnaQh = load i64, i64* %lnaQg, !tbaa !5
  %lnaQi = inttoptr i64 %lnaQh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQj = load i64*, i64** %Sp_Var
  %lnaQk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQi( i64* %Base_Arg, i64* %lnaQj, i64* %Hp_Arg, i64 %lnaQk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7re_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7re_info$def to i8*)
define internal ghccc void @s7re_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
naQl:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caOS
caOS:
  %lnaQm = load i64*, i64** %Sp_Var
  %lnaQn = getelementptr inbounds i64, i64* %lnaQm, i32 -2
  %lnaQo = ptrtoint i64* %lnaQn to i64
  %lnaQp = icmp ult i64 %lnaQo, %SpLim_Arg
  %lnaQq = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaQp, i1 0 )
  br i1 %lnaQq, label %caOT, label %caOU
caOU:
  %lnaQs = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaQr = load i64*, i64** %Sp_Var
  %lnaQt = getelementptr inbounds i64, i64* %lnaQr, i32 -2
  store i64 %lnaQs, i64* %lnaQt, !tbaa !2
  %lnaQv = load i64, i64* %R1_Var
  %lnaQu = load i64*, i64** %Sp_Var
  %lnaQw = getelementptr inbounds i64, i64* %lnaQu, i32 -1
  store i64 %lnaQv, i64* %lnaQw, !tbaa !2
  %lnaQz = load i64, i64* %R1_Var
  %lnaQA = add i64 %lnaQz, 24
  %lnaQB = inttoptr i64 %lnaQA to i64*
  %lnaQC = load i64, i64* %lnaQB, !tbaa !4
  store i64 %lnaQC, i64* %R3_Var
  %lnaQF = load i64, i64* %R1_Var
  %lnaQG = add i64 %lnaQF, 16
  %lnaQH = inttoptr i64 %lnaQG to i64*
  %lnaQI = load i64, i64* %lnaQH, !tbaa !4
  store i64 %lnaQI, i64* %R2_Var
  %lnaQJ = load i64*, i64** %Sp_Var
  %lnaQK = getelementptr inbounds i64, i64* %lnaQJ, i32 -2
  %lnaQL = ptrtoint i64* %lnaQK to i64
  %lnaQM = inttoptr i64 %lnaQL to i64*
  store i64* %lnaQM, i64** %Sp_Var
  %lnaQN = bitcast i8* @base_GHCziFloat_timesDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQO = load i64*, i64** %Sp_Var
  %lnaQP = load i64, i64* %R1_Var
  %lnaQQ = load i64, i64* %R2_Var
  %lnaQR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQN( i64* %Base_Arg, i64* %lnaQO, i64* %Hp_Arg, i64 %lnaQP, i64 %lnaQQ, i64 %lnaQR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOT:
  %lnaQS = load i64, i64* %R1_Var
  store i64 %lnaQS, i64* %R1_Var
  %lnaQT = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaQU = bitcast i64* %lnaQT to i64*
  %lnaQV = load i64, i64* %lnaQU, !tbaa !5
  %lnaQW = inttoptr i64 %lnaQV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQX = load i64*, i64** %Sp_Var
  %lnaQY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQW( i64* %Base_Arg, i64* %lnaQX, i64* %Hp_Arg, i64 %lnaQY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_vecscale_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecscale_info$def to i8*)
define ghccc void @Main_vecscale_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
naQZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caOV
caOV:
  %lnaR0 = load i64*, i64** %Sp_Var
  %lnaR1 = getelementptr inbounds i64, i64* %lnaR0, i32 -2
  %lnaR2 = ptrtoint i64* %lnaR1 to i64
  %lnaR3 = icmp ult i64 %lnaR2, %SpLim_Arg
  %lnaR4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaR3, i1 0 )
  br i1 %lnaR4, label %caOX, label %caOY
caOY:
  %lnaR6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to i64
  %lnaR5 = load i64*, i64** %Sp_Var
  %lnaR7 = getelementptr inbounds i64, i64* %lnaR5, i32 -2
  store i64 %lnaR6, i64* %lnaR7, !tbaa !2
  %lnaR8 = load i64, i64* %R2_Var
  store i64 %lnaR8, i64* %R1_Var
  %lnaRa = load i64, i64* %R3_Var
  %lnaR9 = load i64*, i64** %Sp_Var
  %lnaRb = getelementptr inbounds i64, i64* %lnaR9, i32 -1
  store i64 %lnaRa, i64* %lnaRb, !tbaa !2
  %lnaRc = load i64*, i64** %Sp_Var
  %lnaRd = getelementptr inbounds i64, i64* %lnaRc, i32 -2
  %lnaRe = ptrtoint i64* %lnaRd to i64
  %lnaRf = inttoptr i64 %lnaRe to i64*
  store i64* %lnaRf, i64** %Sp_Var
  %lnaRg = load i64, i64* %R1_Var
  %lnaRh = and i64 %lnaRg, 7
  %lnaRi = icmp ne i64 %lnaRh, 0
  br i1 %lnaRi, label %uaP2, label %caOw
caOw:
  %lnaRk = load i64, i64* %R1_Var
  %lnaRl = inttoptr i64 %lnaRk to i64*
  %lnaRm = load i64, i64* %lnaRl, !tbaa !4
  %lnaRn = inttoptr i64 %lnaRm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRo = load i64*, i64** %Sp_Var
  %lnaRp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRn( i64* %Base_Arg, i64* %lnaRo, i64* %Hp_Arg, i64 %lnaRp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaP2:
  %lnaRq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRr = load i64*, i64** %Sp_Var
  %lnaRs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRq( i64* %Base_Arg, i64* %lnaRr, i64* %Hp_Arg, i64 %lnaRs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOX:
  %lnaRt = load i64, i64* %R3_Var
  store i64 %lnaRt, i64* %R3_Var
  %lnaRu = load i64, i64* %R2_Var
  store i64 %lnaRu, i64* %R2_Var
  %lnaRv = ptrtoint %Main_vecscale_closure_struct* @Main_vecscale_closure$def to i64
  store i64 %lnaRv, i64* %R1_Var
  %lnaRw = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaRx = bitcast i64* %lnaRw to i64*
  %lnaRy = load i64, i64* %lnaRx, !tbaa !5
  %lnaRz = inttoptr i64 %lnaRy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRA = load i64*, i64** %Sp_Var
  %lnaRB = load i64, i64* %R1_Var
  %lnaRC = load i64, i64* %R2_Var
  %lnaRD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRz( i64* %Base_Arg, i64* %lnaRA, i64* %Hp_Arg, i64 %lnaRB, i64 %lnaRC, i64 %lnaRD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caOv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to i8*)
define internal ghccc void @caOv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
naRE:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7rb = alloca i64, i32 1
  %ls7rc = alloca i64, i32 1
  %ls7rd = alloca i64, i32 1
  %ls7r9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caOv
caOv:
  %lnaRF = load i64*, i64** %Hp_Var
  %lnaRG = getelementptr inbounds i64, i64* %lnaRF, i32 16
  %lnaRH = ptrtoint i64* %lnaRG to i64
  %lnaRI = inttoptr i64 %lnaRH to i64*
  store i64* %lnaRI, i64** %Hp_Var
  %lnaRJ = load i64*, i64** %Hp_Var
  %lnaRK = ptrtoint i64* %lnaRJ to i64
  %lnaRL = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaRM = bitcast i64* %lnaRL to i64*
  %lnaRN = load i64, i64* %lnaRM, !tbaa !5
  %lnaRO = icmp ugt i64 %lnaRK, %lnaRN
  %lnaRP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaRO, i1 0 )
  br i1 %lnaRP, label %caP1, label %caP0
caP0:
  %lnaRS = load i64, i64* %R1_Var
  %lnaRT = add i64 %lnaRS, 7
  %lnaRU = inttoptr i64 %lnaRT to i64*
  %lnaRV = load i64, i64* %lnaRU, !tbaa !4
  store i64 %lnaRV, i64* %ls7rb
  %lnaRY = load i64, i64* %R1_Var
  %lnaRZ = add i64 %lnaRY, 15
  %lnaS0 = inttoptr i64 %lnaRZ to i64*
  %lnaS1 = load i64, i64* %lnaS0, !tbaa !4
  store i64 %lnaS1, i64* %ls7rc
  %lnaS4 = load i64, i64* %R1_Var
  %lnaS5 = add i64 %lnaS4, 23
  %lnaS6 = inttoptr i64 %lnaS5 to i64*
  %lnaS7 = load i64, i64* %lnaS6, !tbaa !4
  store i64 %lnaS7, i64* %ls7rd
  %lnaS9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rg_info$def to i64
  %lnaS8 = load i64*, i64** %Hp_Var
  %lnaSa = getelementptr inbounds i64, i64* %lnaS8, i32 -15
  store i64 %lnaS9, i64* %lnaSa, !tbaa !3
  %lnaSb = load i64*, i64** %Sp_Var
  %lnaSc = getelementptr inbounds i64, i64* %lnaSb, i32 1
  %lnaSd = bitcast i64* %lnaSc to i64*
  %lnaSe = load i64, i64* %lnaSd, !tbaa !2
  store i64 %lnaSe, i64* %ls7r9
  %lnaSg = load i64, i64* %ls7r9
  %lnaSf = load i64*, i64** %Hp_Var
  %lnaSh = getelementptr inbounds i64, i64* %lnaSf, i32 -13
  store i64 %lnaSg, i64* %lnaSh, !tbaa !3
  %lnaSj = load i64, i64* %ls7rd
  %lnaSi = load i64*, i64** %Hp_Var
  %lnaSk = getelementptr inbounds i64, i64* %lnaSi, i32 -12
  store i64 %lnaSj, i64* %lnaSk, !tbaa !3
  %lnaSm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7rf_info$def to i64
  %lnaSl = load i64*, i64** %Hp_Var
  %lnaSn = getelementptr inbounds i64, i64* %lnaSl, i32 -11
  store i64 %lnaSm, i64* %lnaSn, !tbaa !3
  %lnaSp = load i64, i64* %ls7r9
  %lnaSo = load i64*, i64** %Hp_Var
  %lnaSq = getelementptr inbounds i64, i64* %lnaSo, i32 -9
  store i64 %lnaSp, i64* %lnaSq, !tbaa !3
  %lnaSs = load i64, i64* %ls7rc
  %lnaSr = load i64*, i64** %Hp_Var
  %lnaSt = getelementptr inbounds i64, i64* %lnaSr, i32 -8
  store i64 %lnaSs, i64* %lnaSt, !tbaa !3
  %lnaSv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7re_info$def to i64
  %lnaSu = load i64*, i64** %Hp_Var
  %lnaSw = getelementptr inbounds i64, i64* %lnaSu, i32 -7
  store i64 %lnaSv, i64* %lnaSw, !tbaa !3
  %lnaSy = load i64, i64* %ls7r9
  %lnaSx = load i64*, i64** %Hp_Var
  %lnaSz = getelementptr inbounds i64, i64* %lnaSx, i32 -5
  store i64 %lnaSy, i64* %lnaSz, !tbaa !3
  %lnaSB = load i64, i64* %ls7rb
  %lnaSA = load i64*, i64** %Hp_Var
  %lnaSC = getelementptr inbounds i64, i64* %lnaSA, i32 -4
  store i64 %lnaSB, i64* %lnaSC, !tbaa !3
  %lnaSE = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnaSD = load i64*, i64** %Hp_Var
  %lnaSF = getelementptr inbounds i64, i64* %lnaSD, i32 -3
  store i64 %lnaSE, i64* %lnaSF, !tbaa !3
  %lnaSH = load i64*, i64** %Hp_Var
  %lnaSI = getelementptr inbounds i64, i64* %lnaSH, i32 -7
  %lnaSJ = ptrtoint i64* %lnaSI to i64
  %lnaSG = load i64*, i64** %Hp_Var
  %lnaSK = getelementptr inbounds i64, i64* %lnaSG, i32 -2
  store i64 %lnaSJ, i64* %lnaSK, !tbaa !3
  %lnaSM = load i64*, i64** %Hp_Var
  %lnaSN = getelementptr inbounds i64, i64* %lnaSM, i32 -11
  %lnaSO = ptrtoint i64* %lnaSN to i64
  %lnaSL = load i64*, i64** %Hp_Var
  %lnaSP = getelementptr inbounds i64, i64* %lnaSL, i32 -1
  store i64 %lnaSO, i64* %lnaSP, !tbaa !3
  %lnaSR = load i64*, i64** %Hp_Var
  %lnaSS = getelementptr inbounds i64, i64* %lnaSR, i32 -15
  %lnaST = ptrtoint i64* %lnaSS to i64
  %lnaSQ = load i64*, i64** %Hp_Var
  %lnaSU = getelementptr inbounds i64, i64* %lnaSQ, i32 0
  store i64 %lnaST, i64* %lnaSU, !tbaa !3
  %lnaSW = load i64*, i64** %Hp_Var
  %lnaSX = ptrtoint i64* %lnaSW to i64
  %lnaSY = add i64 %lnaSX, -23
  store i64 %lnaSY, i64* %R1_Var
  %lnaSZ = load i64*, i64** %Sp_Var
  %lnaT0 = getelementptr inbounds i64, i64* %lnaSZ, i32 2
  %lnaT1 = ptrtoint i64* %lnaT0 to i64
  %lnaT2 = inttoptr i64 %lnaT1 to i64*
  store i64* %lnaT2, i64** %Sp_Var
  %lnaT3 = load i64*, i64** %Sp_Var
  %lnaT4 = getelementptr inbounds i64, i64* %lnaT3, i32 0
  %lnaT5 = bitcast i64* %lnaT4 to i64*
  %lnaT6 = load i64, i64* %lnaT5, !tbaa !2
  %lnaT7 = inttoptr i64 %lnaT6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaT8 = load i64*, i64** %Sp_Var
  %lnaT9 = load i64*, i64** %Hp_Var
  %lnaTa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaT7( i64* %Base_Arg, i64* %lnaT8, i64* %lnaT9, i64 %lnaTa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caP1:
  %lnaTb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnaTb, !tbaa !5
  %lnaTc = load i64, i64* %R1_Var
  store i64 %lnaTc, i64* %R1_Var
  %lnaTd = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTe = load i64*, i64** %Sp_Var
  %lnaTf = load i64*, i64** %Hp_Var
  %lnaTg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTd( i64* %Base_Arg, i64* %lnaTe, i64* %lnaTf, i64 %lnaTg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecdot_closure_struct = type <{i64}>
@Main_vecdot_closure$def = internal global %Main_vecdot_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecdot_info$def to i64)}>
@Main_vecdot_closure = alias i8, bitcast (%Main_vecdot_closure_struct* @Main_vecdot_closure$def to i8*)
@Main_vecdot_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecdot_info$def to i8*)
define ghccc void @Main_vecdot_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
naUA:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %caTo
caTo:
  %lnaUB = load i64*, i64** %Sp_Var
  %lnaUC = getelementptr inbounds i64, i64* %lnaUB, i32 -6
  %lnaUD = ptrtoint i64* %lnaUC to i64
  %lnaUE = icmp ult i64 %lnaUD, %SpLim_Arg
  %lnaUF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaUE, i1 0 )
  br i1 %lnaUF, label %caUg, label %caUh
caUh:
  %lnaUH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTl_info$def to i64
  %lnaUG = load i64*, i64** %Sp_Var
  %lnaUI = getelementptr inbounds i64, i64* %lnaUG, i32 -2
  store i64 %lnaUH, i64* %lnaUI, !tbaa !2
  %lnaUJ = load i64, i64* %R2_Var
  store i64 %lnaUJ, i64* %R1_Var
  %lnaUL = load i64, i64* %R3_Var
  %lnaUK = load i64*, i64** %Sp_Var
  %lnaUM = getelementptr inbounds i64, i64* %lnaUK, i32 -1
  store i64 %lnaUL, i64* %lnaUM, !tbaa !2
  %lnaUN = load i64*, i64** %Sp_Var
  %lnaUO = getelementptr inbounds i64, i64* %lnaUN, i32 -2
  %lnaUP = ptrtoint i64* %lnaUO to i64
  %lnaUQ = inttoptr i64 %lnaUP to i64*
  store i64* %lnaUQ, i64** %Sp_Var
  %lnaUR = load i64, i64* %R1_Var
  %lnaUS = and i64 %lnaUR, 7
  %lnaUT = icmp ne i64 %lnaUS, 0
  br i1 %lnaUT, label %uaUt, label %caTm
caTm:
  %lnaUV = load i64, i64* %R1_Var
  %lnaUW = inttoptr i64 %lnaUV to i64*
  %lnaUX = load i64, i64* %lnaUW, !tbaa !4
  %lnaUY = inttoptr i64 %lnaUX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUZ = load i64*, i64** %Sp_Var
  %lnaV0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUY( i64* %Base_Arg, i64* %lnaUZ, i64* %Hp_Arg, i64 %lnaV0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUt:
  %lnaV1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaV2 = load i64*, i64** %Sp_Var
  %lnaV3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaV1( i64* %Base_Arg, i64* %lnaV2, i64* %Hp_Arg, i64 %lnaV3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caUg:
  %lnaV4 = load i64, i64* %R3_Var
  store i64 %lnaV4, i64* %R3_Var
  %lnaV5 = load i64, i64* %R2_Var
  store i64 %lnaV5, i64* %R2_Var
  %lnaV6 = ptrtoint %Main_vecdot_closure_struct* @Main_vecdot_closure$def to i64
  store i64 %lnaV6, i64* %R1_Var
  %lnaV7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaV8 = bitcast i64* %lnaV7 to i64*
  %lnaV9 = load i64, i64* %lnaV8, !tbaa !5
  %lnaVa = inttoptr i64 %lnaV9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVb = load i64*, i64** %Sp_Var
  %lnaVc = load i64, i64* %R1_Var
  %lnaVd = load i64, i64* %R2_Var
  %lnaVe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVa( i64* %Base_Arg, i64* %lnaVb, i64* %Hp_Arg, i64 %lnaVc, i64 %lnaVd, i64 %lnaVe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTl_info$def to i8*)
define internal ghccc void @caTl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
naVf:
  %ls7qK = alloca i64, i32 1
  %ls7qL = alloca i64, i32 1
  %ls7qM = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caTl
caTl:
  %lnaVh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTr_info$def to i64
  %lnaVg = load i64*, i64** %Sp_Var
  %lnaVi = getelementptr inbounds i64, i64* %lnaVg, i32 -2
  store i64 %lnaVh, i64* %lnaVi, !tbaa !2
  %lnaVl = load i64, i64* %R1_Var
  %lnaVm = add i64 %lnaVl, 7
  %lnaVn = inttoptr i64 %lnaVm to i64*
  %lnaVo = load i64, i64* %lnaVn, !tbaa !4
  store i64 %lnaVo, i64* %ls7qK
  %lnaVr = load i64, i64* %R1_Var
  %lnaVs = add i64 %lnaVr, 15
  %lnaVt = inttoptr i64 %lnaVs to i64*
  %lnaVu = load i64, i64* %lnaVt, !tbaa !4
  store i64 %lnaVu, i64* %ls7qL
  %lnaVx = load i64, i64* %R1_Var
  %lnaVy = add i64 %lnaVx, 23
  %lnaVz = inttoptr i64 %lnaVy to i64*
  %lnaVA = load i64, i64* %lnaVz, !tbaa !4
  store i64 %lnaVA, i64* %ls7qM
  %lnaVB = load i64*, i64** %Sp_Var
  %lnaVC = getelementptr inbounds i64, i64* %lnaVB, i32 1
  %lnaVD = bitcast i64* %lnaVC to i64*
  %lnaVE = load i64, i64* %lnaVD, !tbaa !2
  store i64 %lnaVE, i64* %R1_Var
  %lnaVG = load i64, i64* %ls7qM
  %lnaVF = load i64*, i64** %Sp_Var
  %lnaVH = getelementptr inbounds i64, i64* %lnaVF, i32 -1
  store i64 %lnaVG, i64* %lnaVH, !tbaa !2
  %lnaVJ = load i64, i64* %ls7qL
  %lnaVI = load i64*, i64** %Sp_Var
  %lnaVK = getelementptr inbounds i64, i64* %lnaVI, i32 0
  store i64 %lnaVJ, i64* %lnaVK, !tbaa !2
  %lnaVM = load i64, i64* %ls7qK
  %lnaVL = load i64*, i64** %Sp_Var
  %lnaVN = getelementptr inbounds i64, i64* %lnaVL, i32 1
  store i64 %lnaVM, i64* %lnaVN, !tbaa !2
  %lnaVO = load i64*, i64** %Sp_Var
  %lnaVP = getelementptr inbounds i64, i64* %lnaVO, i32 -2
  %lnaVQ = ptrtoint i64* %lnaVP to i64
  %lnaVR = inttoptr i64 %lnaVQ to i64*
  store i64* %lnaVR, i64** %Sp_Var
  %lnaVS = load i64, i64* %R1_Var
  %lnaVT = and i64 %lnaVS, 7
  %lnaVU = icmp ne i64 %lnaVT, 0
  br i1 %lnaVU, label %uaUs, label %caTs
caTs:
  %lnaVW = load i64, i64* %R1_Var
  %lnaVX = inttoptr i64 %lnaVW to i64*
  %lnaVY = load i64, i64* %lnaVX, !tbaa !4
  %lnaVZ = inttoptr i64 %lnaVY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaW0 = load i64*, i64** %Sp_Var
  %lnaW1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVZ( i64* %Base_Arg, i64* %lnaW0, i64* %Hp_Arg, i64 %lnaW1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUs:
  %lnaW2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaW3 = load i64*, i64** %Sp_Var
  %lnaW4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaW2( i64* %Base_Arg, i64* %lnaW3, i64* %Hp_Arg, i64 %lnaW4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTr_info$def to i8*)
define internal ghccc void @caTr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
naW5:
  %ls7qO = alloca i64, i32 1
  %ls7qP = alloca i64, i32 1
  %ls7qQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caTr
caTr:
  %lnaW7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTw_info$def to i64
  %lnaW6 = load i64*, i64** %Sp_Var
  %lnaW8 = getelementptr inbounds i64, i64* %lnaW6, i32 -2
  store i64 %lnaW7, i64* %lnaW8, !tbaa !2
  %lnaWb = load i64, i64* %R1_Var
  %lnaWc = add i64 %lnaWb, 7
  %lnaWd = inttoptr i64 %lnaWc to i64*
  %lnaWe = load i64, i64* %lnaWd, !tbaa !4
  store i64 %lnaWe, i64* %ls7qO
  %lnaWh = load i64, i64* %R1_Var
  %lnaWi = add i64 %lnaWh, 15
  %lnaWj = inttoptr i64 %lnaWi to i64*
  %lnaWk = load i64, i64* %lnaWj, !tbaa !4
  store i64 %lnaWk, i64* %ls7qP
  %lnaWn = load i64, i64* %R1_Var
  %lnaWo = add i64 %lnaWn, 23
  %lnaWp = inttoptr i64 %lnaWo to i64*
  %lnaWq = load i64, i64* %lnaWp, !tbaa !4
  store i64 %lnaWq, i64* %ls7qQ
  %lnaWr = load i64*, i64** %Sp_Var
  %lnaWs = getelementptr inbounds i64, i64* %lnaWr, i32 3
  %lnaWt = bitcast i64* %lnaWs to i64*
  %lnaWu = load i64, i64* %lnaWt, !tbaa !2
  store i64 %lnaWu, i64* %R1_Var
  %lnaWw = load i64, i64* %ls7qQ
  %lnaWv = load i64*, i64** %Sp_Var
  %lnaWx = getelementptr inbounds i64, i64* %lnaWv, i32 -1
  store i64 %lnaWw, i64* %lnaWx, !tbaa !2
  %lnaWz = load i64, i64* %ls7qP
  %lnaWy = load i64*, i64** %Sp_Var
  %lnaWA = getelementptr inbounds i64, i64* %lnaWy, i32 0
  store i64 %lnaWz, i64* %lnaWA, !tbaa !2
  %lnaWC = load i64, i64* %ls7qO
  %lnaWB = load i64*, i64** %Sp_Var
  %lnaWD = getelementptr inbounds i64, i64* %lnaWB, i32 3
  store i64 %lnaWC, i64* %lnaWD, !tbaa !2
  %lnaWE = load i64*, i64** %Sp_Var
  %lnaWF = getelementptr inbounds i64, i64* %lnaWE, i32 -2
  %lnaWG = ptrtoint i64* %lnaWF to i64
  %lnaWH = inttoptr i64 %lnaWG to i64*
  store i64* %lnaWH, i64** %Sp_Var
  %lnaWI = load i64, i64* %R1_Var
  %lnaWJ = and i64 %lnaWI, 7
  %lnaWK = icmp ne i64 %lnaWJ, 0
  br i1 %lnaWK, label %uaUu, label %caTx
caTx:
  %lnaWM = load i64, i64* %R1_Var
  %lnaWN = inttoptr i64 %lnaWM to i64*
  %lnaWO = load i64, i64* %lnaWN, !tbaa !4
  %lnaWP = inttoptr i64 %lnaWO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWQ = load i64*, i64** %Sp_Var
  %lnaWR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWP( i64* %Base_Arg, i64* %lnaWQ, i64* %Hp_Arg, i64 %lnaWR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUu:
  %lnaWS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWT = load i64*, i64** %Sp_Var
  %lnaWU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWS( i64* %Base_Arg, i64* %lnaWT, i64* %Hp_Arg, i64 %lnaWU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTw_info$def to i8*)
define internal ghccc void @caTw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
naWV:
  %ls7qS = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caTw
caTw:
  %lnaWW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTB_info$def to i64
  %lnaWX = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaWW, i64* %lnaWX, !tbaa !2
  %lnaX0 = load i64, i64* %R1_Var
  %lnaX1 = add i64 %lnaX0, 7
  %lnaX2 = inttoptr i64 %lnaX1 to double*
  %lnaX3 = load double, double* %lnaX2, !tbaa !4
  store double %lnaX3, double* %ls7qS
  %lnaX4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnaX5 = bitcast i64* %lnaX4 to i64*
  %lnaX6 = load i64, i64* %lnaX5, !tbaa !2
  store i64 %lnaX6, i64* %R1_Var
  %lnaX7 = load double, double* %ls7qS
  %lnaX8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnaX9 = bitcast i64* %lnaX8 to double*
  store double %lnaX7, double* %lnaX9, !tbaa !2
  %lnaXa = load i64, i64* %R1_Var
  %lnaXb = and i64 %lnaXa, 7
  %lnaXc = icmp ne i64 %lnaXb, 0
  br i1 %lnaXc, label %uaUv, label %caTC
caTC:
  %lnaXe = load i64, i64* %R1_Var
  %lnaXf = inttoptr i64 %lnaXe to i64*
  %lnaXg = load i64, i64* %lnaXf, !tbaa !4
  %lnaXh = inttoptr i64 %lnaXg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaXi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUv:
  %lnaXj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaXk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTB_info$def to i8*)
define internal ghccc void @caTB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1029, i32 30, i32 0}>
{
naXl:
  %ls7qU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caTB
caTB:
  %lnaXm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTG_info$def to i64
  %lnaXn = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaXm, i64* %lnaXn, !tbaa !2
  %lnaXq = load i64, i64* %R1_Var
  %lnaXr = add i64 %lnaXq, 7
  %lnaXs = inttoptr i64 %lnaXr to double*
  %lnaXt = load double, double* %lnaXs, !tbaa !4
  store double %lnaXt, double* %ls7qU
  %lnaXu = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnaXv = bitcast i64* %lnaXu to i64*
  %lnaXw = load i64, i64* %lnaXv, !tbaa !2
  store i64 %lnaXw, i64* %R1_Var
  %lnaXx = load double, double* %ls7qU
  %lnaXy = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnaXz = bitcast i64* %lnaXy to double*
  store double %lnaXx, double* %lnaXz, !tbaa !2
  %lnaXA = load i64, i64* %R1_Var
  %lnaXB = and i64 %lnaXA, 7
  %lnaXC = icmp ne i64 %lnaXB, 0
  br i1 %lnaXC, label %uaUw, label %caTH
caTH:
  %lnaXE = load i64, i64* %R1_Var
  %lnaXF = inttoptr i64 %lnaXE to i64*
  %lnaXG = load i64, i64* %lnaXF, !tbaa !4
  %lnaXH = inttoptr i64 %lnaXG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaXI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUw:
  %lnaXJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaXK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTG_info$def to i8*)
define internal ghccc void @caTG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1541, i32 30, i32 0}>
{
naXL:
  %ls7qW = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caTG
caTG:
  %lnaXM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTL_info$def to i64
  %lnaXN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaXM, i64* %lnaXN, !tbaa !2
  %lnaXQ = load i64, i64* %R1_Var
  %lnaXR = add i64 %lnaXQ, 7
  %lnaXS = inttoptr i64 %lnaXR to double*
  %lnaXT = load double, double* %lnaXS, !tbaa !4
  store double %lnaXT, double* %ls7qW
  %lnaXU = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnaXV = bitcast i64* %lnaXU to i64*
  %lnaXW = load i64, i64* %lnaXV, !tbaa !2
  store i64 %lnaXW, i64* %R1_Var
  %lnaXX = load double, double* %ls7qW
  %lnaXY = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnaXZ = bitcast i64* %lnaXY to double*
  store double %lnaXX, double* %lnaXZ, !tbaa !2
  %lnaY0 = load i64, i64* %R1_Var
  %lnaY1 = and i64 %lnaY0, 7
  %lnaY2 = icmp ne i64 %lnaY1, 0
  br i1 %lnaY2, label %uaUx, label %caTM
caTM:
  %lnaY4 = load i64, i64* %R1_Var
  %lnaY5 = inttoptr i64 %lnaY4 to i64*
  %lnaY6 = load i64, i64* %lnaY5, !tbaa !4
  %lnaY7 = inttoptr i64 %lnaY6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaY8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaY7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaY8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUx:
  %lnaY9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaY9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTL_info$def to i8*)
define internal ghccc void @caTL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1669, i32 30, i32 0}>
{
naYb:
  %ls7qY = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caTL
caTL:
  %lnaYc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTQ_info$def to i64
  %lnaYd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaYc, i64* %lnaYd, !tbaa !2
  %lnaYg = load i64, i64* %R1_Var
  %lnaYh = add i64 %lnaYg, 7
  %lnaYi = inttoptr i64 %lnaYh to double*
  %lnaYj = load double, double* %lnaYi, !tbaa !4
  store double %lnaYj, double* %ls7qY
  %lnaYk = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnaYl = bitcast i64* %lnaYk to i64*
  %lnaYm = load i64, i64* %lnaYl, !tbaa !2
  store i64 %lnaYm, i64* %R1_Var
  %lnaYn = load double, double* %ls7qY
  %lnaYo = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnaYp = bitcast i64* %lnaYo to double*
  store double %lnaYn, double* %lnaYp, !tbaa !2
  %lnaYq = load i64, i64* %R1_Var
  %lnaYr = and i64 %lnaYq, 7
  %lnaYs = icmp ne i64 %lnaYr, 0
  br i1 %lnaYs, label %uaUy, label %caTR
caTR:
  %lnaYu = load i64, i64* %R1_Var
  %lnaYv = inttoptr i64 %lnaYu to i64*
  %lnaYw = load i64, i64* %lnaYv, !tbaa !4
  %lnaYx = inttoptr i64 %lnaYw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUy:
  %lnaYz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTQ_info$def to i8*)
define internal ghccc void @caTQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1925, i32 30, i32 0}>
{
naYB:
  %ls7r0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %caTQ
caTQ:
  %lnaYC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTV_info$def to i64
  %lnaYD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaYC, i64* %lnaYD, !tbaa !2
  %lnaYG = load i64, i64* %R1_Var
  %lnaYH = add i64 %lnaYG, 7
  %lnaYI = inttoptr i64 %lnaYH to double*
  %lnaYJ = load double, double* %lnaYI, !tbaa !4
  store double %lnaYJ, double* %ls7r0
  %lnaYK = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnaYL = bitcast i64* %lnaYK to i64*
  %lnaYM = load i64, i64* %lnaYL, !tbaa !2
  store i64 %lnaYM, i64* %R1_Var
  %lnaYN = load double, double* %ls7r0
  %lnaYO = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnaYP = bitcast i64* %lnaYO to double*
  store double %lnaYN, double* %lnaYP, !tbaa !2
  %lnaYQ = load i64, i64* %R1_Var
  %lnaYR = and i64 %lnaYQ, 7
  %lnaYS = icmp ne i64 %lnaYR, 0
  br i1 %lnaYS, label %uaUz, label %caTW
caTW:
  %lnaYU = load i64, i64* %R1_Var
  %lnaYV = inttoptr i64 %lnaYU to i64*
  %lnaYW = load i64, i64* %lnaYV, !tbaa !4
  %lnaYX = inttoptr i64 %lnaYW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaYY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaUz:
  %lnaYZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZ0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaZ0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caTV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caTV_info$def to i8*)
define internal ghccc void @caTV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1989, i32 30, i32 0}>
{
naZ1:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7r7 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %caTV
caTV:
  %lnaZ2 = load i64*, i64** %Hp_Var
  %lnaZ3 = getelementptr inbounds i64, i64* %lnaZ2, i32 2
  %lnaZ4 = ptrtoint i64* %lnaZ3 to i64
  %lnaZ5 = inttoptr i64 %lnaZ4 to i64*
  store i64* %lnaZ5, i64** %Hp_Var
  %lnaZ6 = load i64*, i64** %Hp_Var
  %lnaZ7 = ptrtoint i64* %lnaZ6 to i64
  %lnaZ8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaZ9 = bitcast i64* %lnaZ8 to i64*
  %lnaZa = load i64, i64* %lnaZ9, !tbaa !5
  %lnaZb = icmp ugt i64 %lnaZ7, %lnaZa
  %lnaZc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaZb, i1 0 )
  br i1 %lnaZc, label %caUr, label %caUq
caUq:
  %lnaZd = load i64*, i64** %Sp_Var
  %lnaZe = getelementptr inbounds i64, i64* %lnaZd, i32 5
  %lnaZf = bitcast i64* %lnaZe to double*
  %lnaZg = load double, double* %lnaZf, !tbaa !2
  %lnaZh = load i64*, i64** %Sp_Var
  %lnaZi = getelementptr inbounds i64, i64* %lnaZh, i32 4
  %lnaZj = bitcast i64* %lnaZi to double*
  %lnaZk = load double, double* %lnaZj, !tbaa !2
  %lnaZl = fmul double %lnaZg, %lnaZk
  %lnaZm = load i64*, i64** %Sp_Var
  %lnaZn = getelementptr inbounds i64, i64* %lnaZm, i32 2
  %lnaZo = bitcast i64* %lnaZn to double*
  %lnaZp = load double, double* %lnaZo, !tbaa !2
  %lnaZq = load i64*, i64** %Sp_Var
  %lnaZr = getelementptr inbounds i64, i64* %lnaZq, i32 3
  %lnaZs = bitcast i64* %lnaZr to double*
  %lnaZt = load double, double* %lnaZs, !tbaa !2
  %lnaZu = fmul double %lnaZp, %lnaZt
  %lnaZv = fadd double %lnaZl, %lnaZu
  %lnaZw = load i64*, i64** %Sp_Var
  %lnaZx = getelementptr inbounds i64, i64* %lnaZw, i32 1
  %lnaZy = bitcast i64* %lnaZx to double*
  %lnaZz = load double, double* %lnaZy, !tbaa !2
  %lnaZC = load i64, i64* %R1_Var
  %lnaZD = add i64 %lnaZC, 7
  %lnaZE = inttoptr i64 %lnaZD to double*
  %lnaZF = load double, double* %lnaZE, !tbaa !4
  %lnaZG = fmul double %lnaZz, %lnaZF
  %lnaZH = fadd double %lnaZv, %lnaZG
  store double %lnaZH, double* %ls7r7
  %lnaZJ = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnaZI = load i64*, i64** %Hp_Var
  %lnaZK = getelementptr inbounds i64, i64* %lnaZI, i32 -1
  store i64 %lnaZJ, i64* %lnaZK, !tbaa !3
  %lnaZM = load double, double* %ls7r7
  %lnaZL = load i64*, i64** %Hp_Var
  %lnaZN = getelementptr inbounds i64, i64* %lnaZL, i32 0
  %lnaZO = bitcast i64* %lnaZN to double*
  store double %lnaZM, double* %lnaZO, !tbaa !3
  %lnaZQ = load i64*, i64** %Hp_Var
  %lnaZR = ptrtoint i64* %lnaZQ to i64
  %lnaZS = add i64 %lnaZR, -7
  store i64 %lnaZS, i64* %R1_Var
  %lnaZT = load i64*, i64** %Sp_Var
  %lnaZU = getelementptr inbounds i64, i64* %lnaZT, i32 6
  %lnaZV = ptrtoint i64* %lnaZU to i64
  %lnaZW = inttoptr i64 %lnaZV to i64*
  store i64* %lnaZW, i64** %Sp_Var
  %lnaZX = load i64*, i64** %Sp_Var
  %lnaZY = getelementptr inbounds i64, i64* %lnaZX, i32 0
  %lnaZZ = bitcast i64* %lnaZY to i64*
  %lnb00 = load i64, i64* %lnaZZ, !tbaa !2
  %lnb01 = inttoptr i64 %lnb00 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb02 = load i64*, i64** %Sp_Var
  %lnb03 = load i64*, i64** %Hp_Var
  %lnb04 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb01( i64* %Base_Arg, i64* %lnb02, i64* %lnb03, i64 %lnb04, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caUr:
  %lnb05 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnb05, !tbaa !5
  %lnb06 = load i64, i64* %R1_Var
  store i64 %lnb06, i64* %R1_Var
  %lnb07 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb08 = load i64*, i64** %Sp_Var
  %lnb09 = load i64*, i64** %Hp_Var
  %lnb0a = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb07( i64* %Base_Arg, i64* %lnb08, i64* %lnb09, i64 %lnb0a, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_veccross_closure_struct = type <{i64}>
@Main_veccross_closure$def = internal global %Main_veccross_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_veccross_info$def to i64)}>
@Main_veccross_closure = alias i8, bitcast (%Main_veccross_closure_struct* @Main_veccross_closure$def to i8*)
@s7qG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qG_info$def to i8*)
define internal ghccc void @s7qG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nb2Q:
  %ls7q1 = alloca i64, i32 1
  %ls7q4 = alloca i64, i32 1
  %ls7q5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb0w
cb0w:
  %lnb2R = load i64*, i64** %Sp_Var
  %lnb2S = getelementptr inbounds i64, i64* %lnb2R, i32 -6
  %lnb2T = ptrtoint i64* %lnb2S to i64
  %lnb2U = icmp ult i64 %lnb2T, %SpLim_Arg
  %lnb2V = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb2U, i1 0 )
  br i1 %lnb2V, label %cb0Y, label %cb0Z
cb0Z:
  %lnb2X = ptrtoint i8* @stg_upd_frame_info to i64
  %lnb2W = load i64*, i64** %Sp_Var
  %lnb2Y = getelementptr inbounds i64, i64* %lnb2W, i32 -2
  store i64 %lnb2X, i64* %lnb2Y, !tbaa !2
  %lnb30 = load i64, i64* %R1_Var
  %lnb2Z = load i64*, i64** %Sp_Var
  %lnb31 = getelementptr inbounds i64, i64* %lnb2Z, i32 -1
  store i64 %lnb30, i64* %lnb31, !tbaa !2
  %lnb33 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0t_info$def to i64
  %lnb32 = load i64*, i64** %Sp_Var
  %lnb34 = getelementptr inbounds i64, i64* %lnb32, i32 -6
  store i64 %lnb33, i64* %lnb34, !tbaa !2
  %lnb37 = load i64, i64* %R1_Var
  %lnb38 = add i64 %lnb37, 16
  %lnb39 = inttoptr i64 %lnb38 to i64*
  %lnb3a = load i64, i64* %lnb39, !tbaa !4
  store i64 %lnb3a, i64* %ls7q1
  %lnb3d = load i64, i64* %R1_Var
  %lnb3e = add i64 %lnb3d, 24
  %lnb3f = inttoptr i64 %lnb3e to i64*
  %lnb3g = load i64, i64* %lnb3f, !tbaa !4
  store i64 %lnb3g, i64* %ls7q4
  %lnb3j = load i64, i64* %R1_Var
  %lnb3k = add i64 %lnb3j, 32
  %lnb3l = inttoptr i64 %lnb3k to i64*
  %lnb3m = load i64, i64* %lnb3l, !tbaa !4
  store i64 %lnb3m, i64* %ls7q5
  %lnb3p = load i64, i64* %R1_Var
  %lnb3q = add i64 %lnb3p, 40
  %lnb3r = inttoptr i64 %lnb3q to i64*
  %lnb3s = load i64, i64* %lnb3r, !tbaa !4
  store i64 %lnb3s, i64* %R1_Var
  %lnb3u = load i64, i64* %ls7q1
  %lnb3t = load i64*, i64** %Sp_Var
  %lnb3v = getelementptr inbounds i64, i64* %lnb3t, i32 -5
  store i64 %lnb3u, i64* %lnb3v, !tbaa !2
  %lnb3x = load i64, i64* %ls7q4
  %lnb3w = load i64*, i64** %Sp_Var
  %lnb3y = getelementptr inbounds i64, i64* %lnb3w, i32 -4
  store i64 %lnb3x, i64* %lnb3y, !tbaa !2
  %lnb3A = load i64, i64* %ls7q5
  %lnb3z = load i64*, i64** %Sp_Var
  %lnb3B = getelementptr inbounds i64, i64* %lnb3z, i32 -3
  store i64 %lnb3A, i64* %lnb3B, !tbaa !2
  %lnb3C = load i64*, i64** %Sp_Var
  %lnb3D = getelementptr inbounds i64, i64* %lnb3C, i32 -6
  %lnb3E = ptrtoint i64* %lnb3D to i64
  %lnb3F = inttoptr i64 %lnb3E to i64*
  store i64* %lnb3F, i64** %Sp_Var
  %lnb3G = load i64, i64* %R1_Var
  %lnb3H = and i64 %lnb3G, 7
  %lnb3I = icmp ne i64 %lnb3H, 0
  br i1 %lnb3I, label %ub17, label %cb0u
cb0u:
  %lnb3K = load i64, i64* %R1_Var
  %lnb3L = inttoptr i64 %lnb3K to i64*
  %lnb3M = load i64, i64* %lnb3L, !tbaa !4
  %lnb3N = inttoptr i64 %lnb3M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3O = load i64*, i64** %Sp_Var
  %lnb3P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3N( i64* %Base_Arg, i64* %lnb3O, i64* %Hp_Arg, i64 %lnb3P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub17:
  %lnb3Q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0t_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3R = load i64*, i64** %Sp_Var
  %lnb3S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3Q( i64* %Base_Arg, i64* %lnb3R, i64* %Hp_Arg, i64 %lnb3S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb0Y:
  %lnb3T = load i64, i64* %R1_Var
  store i64 %lnb3T, i64* %R1_Var
  %lnb3U = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnb3V = bitcast i64* %lnb3U to i64*
  %lnb3W = load i64, i64* %lnb3V, !tbaa !5
  %lnb3X = inttoptr i64 %lnb3W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3Y = load i64*, i64** %Sp_Var
  %lnb3Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3X( i64* %Base_Arg, i64* %lnb3Y, i64* %Hp_Arg, i64 %lnb3Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0t_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0t_info$def to i8*)
define internal ghccc void @cb0t_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nb40:
  %ls7qw = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb0t
cb0t:
  %lnb41 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0z_info$def to i64
  %lnb42 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb41, i64* %lnb42, !tbaa !2
  %lnb45 = load i64, i64* %R1_Var
  %lnb46 = add i64 %lnb45, 7
  %lnb47 = inttoptr i64 %lnb46 to double*
  %lnb48 = load double, double* %lnb47, !tbaa !4
  store double %lnb48, double* %ls7qw
  %lnb49 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb4a = bitcast i64* %lnb49 to i64*
  %lnb4b = load i64, i64* %lnb4a, !tbaa !2
  store i64 %lnb4b, i64* %R1_Var
  %lnb4c = load double, double* %ls7qw
  %lnb4d = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb4e = bitcast i64* %lnb4d to double*
  store double %lnb4c, double* %lnb4e, !tbaa !2
  %lnb4f = load i64, i64* %R1_Var
  %lnb4g = and i64 %lnb4f, 7
  %lnb4h = icmp ne i64 %lnb4g, 0
  br i1 %lnb4h, label %ub16, label %cb0A
cb0A:
  %lnb4j = load i64, i64* %R1_Var
  %lnb4k = inttoptr i64 %lnb4j to i64*
  %lnb4l = load i64, i64* %lnb4k, !tbaa !4
  %lnb4m = inttoptr i64 %lnb4l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub16:
  %lnb4o = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0z_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4o( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0z_info$def to i8*)
define internal ghccc void @cb0z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
nb4q:
  %ls7qy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb0z
cb0z:
  %lnb4r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0E_info$def to i64
  %lnb4s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb4r, i64* %lnb4s, !tbaa !2
  %lnb4v = load i64, i64* %R1_Var
  %lnb4w = add i64 %lnb4v, 7
  %lnb4x = inttoptr i64 %lnb4w to double*
  %lnb4y = load double, double* %lnb4x, !tbaa !4
  store double %lnb4y, double* %ls7qy
  %lnb4z = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb4A = bitcast i64* %lnb4z to i64*
  %lnb4B = load i64, i64* %lnb4A, !tbaa !2
  store i64 %lnb4B, i64* %R1_Var
  %lnb4C = load double, double* %ls7qy
  %lnb4D = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb4E = bitcast i64* %lnb4D to double*
  store double %lnb4C, double* %lnb4E, !tbaa !2
  %lnb4F = load i64, i64* %R1_Var
  %lnb4G = and i64 %lnb4F, 7
  %lnb4H = icmp ne i64 %lnb4G, 0
  br i1 %lnb4H, label %ub18, label %cb0F
cb0F:
  %lnb4J = load i64, i64* %R1_Var
  %lnb4K = inttoptr i64 %lnb4J to i64*
  %lnb4L = load i64, i64* %lnb4K, !tbaa !4
  %lnb4M = inttoptr i64 %lnb4L to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4M( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub18:
  %lnb4O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0E_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4O( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0E_info$def to i8*)
define internal ghccc void @cb0E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
nb4Q:
  %ls7qA = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb0E
cb0E:
  %lnb4R = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0J_info$def to i64
  %lnb4S = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb4R, i64* %lnb4S, !tbaa !2
  %lnb4V = load i64, i64* %R1_Var
  %lnb4W = add i64 %lnb4V, 7
  %lnb4X = inttoptr i64 %lnb4W to double*
  %lnb4Y = load double, double* %lnb4X, !tbaa !4
  store double %lnb4Y, double* %ls7qA
  %lnb4Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb50 = bitcast i64* %lnb4Z to i64*
  %lnb51 = load i64, i64* %lnb50, !tbaa !2
  store i64 %lnb51, i64* %R1_Var
  %lnb52 = load double, double* %ls7qA
  %lnb53 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb54 = bitcast i64* %lnb53 to double*
  store double %lnb52, double* %lnb54, !tbaa !2
  %lnb55 = load i64, i64* %R1_Var
  %lnb56 = and i64 %lnb55, 7
  %lnb57 = icmp ne i64 %lnb56, 0
  br i1 %lnb57, label %ub19, label %cb0K
cb0K:
  %lnb59 = load i64, i64* %R1_Var
  %lnb5a = inttoptr i64 %lnb59 to i64*
  %lnb5b = load i64, i64* %lnb5a, !tbaa !4
  %lnb5c = inttoptr i64 %lnb5b to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5c( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb5d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub19:
  %lnb5e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0J_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5e( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb5f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0J_info$def to i8*)
define internal ghccc void @cb0J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
nb5g:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7qF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb0J
cb0J:
  %lnb5h = load i64*, i64** %Hp_Var
  %lnb5i = getelementptr inbounds i64, i64* %lnb5h, i32 2
  %lnb5j = ptrtoint i64* %lnb5i to i64
  %lnb5k = inttoptr i64 %lnb5j to i64*
  store i64* %lnb5k, i64** %Hp_Var
  %lnb5l = load i64*, i64** %Hp_Var
  %lnb5m = ptrtoint i64* %lnb5l to i64
  %lnb5n = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnb5o = bitcast i64* %lnb5n to i64*
  %lnb5p = load i64, i64* %lnb5o, !tbaa !5
  %lnb5q = icmp ugt i64 %lnb5m, %lnb5p
  %lnb5r = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb5q, i1 0 )
  br i1 %lnb5r, label %cb15, label %cb14
cb14:
  %lnb5s = load i64*, i64** %Sp_Var
  %lnb5t = getelementptr inbounds i64, i64* %lnb5s, i32 3
  %lnb5u = bitcast i64* %lnb5t to double*
  %lnb5v = load double, double* %lnb5u, !tbaa !2
  %lnb5w = load i64*, i64** %Sp_Var
  %lnb5x = getelementptr inbounds i64, i64* %lnb5w, i32 2
  %lnb5y = bitcast i64* %lnb5x to double*
  %lnb5z = load double, double* %lnb5y, !tbaa !2
  %lnb5A = fmul double %lnb5v, %lnb5z
  %lnb5B = load i64*, i64** %Sp_Var
  %lnb5C = getelementptr inbounds i64, i64* %lnb5B, i32 1
  %lnb5D = bitcast i64* %lnb5C to double*
  %lnb5E = load double, double* %lnb5D, !tbaa !2
  %lnb5H = load i64, i64* %R1_Var
  %lnb5I = add i64 %lnb5H, 7
  %lnb5J = inttoptr i64 %lnb5I to double*
  %lnb5K = load double, double* %lnb5J, !tbaa !4
  %lnb5L = fmul double %lnb5E, %lnb5K
  %lnb5M = fsub double %lnb5A, %lnb5L
  store double %lnb5M, double* %ls7qF
  %lnb5O = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnb5N = load i64*, i64** %Hp_Var
  %lnb5P = getelementptr inbounds i64, i64* %lnb5N, i32 -1
  store i64 %lnb5O, i64* %lnb5P, !tbaa !3
  %lnb5R = load double, double* %ls7qF
  %lnb5Q = load i64*, i64** %Hp_Var
  %lnb5S = getelementptr inbounds i64, i64* %lnb5Q, i32 0
  %lnb5T = bitcast i64* %lnb5S to double*
  store double %lnb5R, double* %lnb5T, !tbaa !3
  %lnb5V = load i64*, i64** %Hp_Var
  %lnb5W = ptrtoint i64* %lnb5V to i64
  %lnb5X = add i64 %lnb5W, -7
  store i64 %lnb5X, i64* %R1_Var
  %lnb5Y = load i64*, i64** %Sp_Var
  %lnb5Z = getelementptr inbounds i64, i64* %lnb5Y, i32 4
  %lnb60 = ptrtoint i64* %lnb5Z to i64
  %lnb61 = inttoptr i64 %lnb60 to i64*
  store i64* %lnb61, i64** %Sp_Var
  %lnb62 = load i64*, i64** %Sp_Var
  %lnb63 = getelementptr inbounds i64, i64* %lnb62, i32 0
  %lnb64 = bitcast i64* %lnb63 to i64*
  %lnb65 = load i64, i64* %lnb64, !tbaa !2
  %lnb66 = inttoptr i64 %lnb65 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb67 = load i64*, i64** %Sp_Var
  %lnb68 = load i64*, i64** %Hp_Var
  %lnb69 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb66( i64* %Base_Arg, i64* %lnb67, i64* %lnb68, i64 %lnb69, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb15:
  %lnb6a = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnb6a, !tbaa !5
  %lnb6b = load i64, i64* %R1_Var
  store i64 %lnb6b, i64* %R1_Var
  %lnb6c = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6d = load i64*, i64** %Sp_Var
  %lnb6e = load i64*, i64** %Hp_Var
  %lnb6f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6c( i64* %Base_Arg, i64* %lnb6d, i64* %lnb6e, i64 %lnb6f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7qu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qu_info$def to i8*)
define internal ghccc void @s7qu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nb6g:
  %ls7q0 = alloca i64, i32 1
  %ls7q6 = alloca i64, i32 1
  %ls7q4 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb1h
cb1h:
  %lnb6h = load i64*, i64** %Sp_Var
  %lnb6i = getelementptr inbounds i64, i64* %lnb6h, i32 -6
  %lnb6j = ptrtoint i64* %lnb6i to i64
  %lnb6k = icmp ult i64 %lnb6j, %SpLim_Arg
  %lnb6l = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb6k, i1 0 )
  br i1 %lnb6l, label %cb1J, label %cb1K
cb1K:
  %lnb6n = ptrtoint i8* @stg_upd_frame_info to i64
  %lnb6m = load i64*, i64** %Sp_Var
  %lnb6o = getelementptr inbounds i64, i64* %lnb6m, i32 -2
  store i64 %lnb6n, i64* %lnb6o, !tbaa !2
  %lnb6q = load i64, i64* %R1_Var
  %lnb6p = load i64*, i64** %Sp_Var
  %lnb6r = getelementptr inbounds i64, i64* %lnb6p, i32 -1
  store i64 %lnb6q, i64* %lnb6r, !tbaa !2
  %lnb6t = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1e_info$def to i64
  %lnb6s = load i64*, i64** %Sp_Var
  %lnb6u = getelementptr inbounds i64, i64* %lnb6s, i32 -6
  store i64 %lnb6t, i64* %lnb6u, !tbaa !2
  %lnb6x = load i64, i64* %R1_Var
  %lnb6y = add i64 %lnb6x, 16
  %lnb6z = inttoptr i64 %lnb6y to i64*
  %lnb6A = load i64, i64* %lnb6z, !tbaa !4
  store i64 %lnb6A, i64* %ls7q0
  %lnb6D = load i64, i64* %R1_Var
  %lnb6E = add i64 %lnb6D, 24
  %lnb6F = inttoptr i64 %lnb6E to i64*
  %lnb6G = load i64, i64* %lnb6F, !tbaa !4
  store i64 %lnb6G, i64* %ls7q6
  %lnb6J = load i64, i64* %R1_Var
  %lnb6K = add i64 %lnb6J, 32
  %lnb6L = inttoptr i64 %lnb6K to i64*
  %lnb6M = load i64, i64* %lnb6L, !tbaa !4
  store i64 %lnb6M, i64* %ls7q4
  %lnb6P = load i64, i64* %R1_Var
  %lnb6Q = add i64 %lnb6P, 40
  %lnb6R = inttoptr i64 %lnb6Q to i64*
  %lnb6S = load i64, i64* %lnb6R, !tbaa !4
  store i64 %lnb6S, i64* %R1_Var
  %lnb6U = load i64, i64* %ls7q0
  %lnb6T = load i64*, i64** %Sp_Var
  %lnb6V = getelementptr inbounds i64, i64* %lnb6T, i32 -5
  store i64 %lnb6U, i64* %lnb6V, !tbaa !2
  %lnb6X = load i64, i64* %ls7q4
  %lnb6W = load i64*, i64** %Sp_Var
  %lnb6Y = getelementptr inbounds i64, i64* %lnb6W, i32 -4
  store i64 %lnb6X, i64* %lnb6Y, !tbaa !2
  %lnb70 = load i64, i64* %ls7q6
  %lnb6Z = load i64*, i64** %Sp_Var
  %lnb71 = getelementptr inbounds i64, i64* %lnb6Z, i32 -3
  store i64 %lnb70, i64* %lnb71, !tbaa !2
  %lnb72 = load i64*, i64** %Sp_Var
  %lnb73 = getelementptr inbounds i64, i64* %lnb72, i32 -6
  %lnb74 = ptrtoint i64* %lnb73 to i64
  %lnb75 = inttoptr i64 %lnb74 to i64*
  store i64* %lnb75, i64** %Sp_Var
  %lnb76 = load i64, i64* %R1_Var
  %lnb77 = and i64 %lnb76, 7
  %lnb78 = icmp ne i64 %lnb77, 0
  br i1 %lnb78, label %ub1S, label %cb1f
cb1f:
  %lnb7a = load i64, i64* %R1_Var
  %lnb7b = inttoptr i64 %lnb7a to i64*
  %lnb7c = load i64, i64* %lnb7b, !tbaa !4
  %lnb7d = inttoptr i64 %lnb7c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7e = load i64*, i64** %Sp_Var
  %lnb7f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7d( i64* %Base_Arg, i64* %lnb7e, i64* %Hp_Arg, i64 %lnb7f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub1S:
  %lnb7g = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1e_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7h = load i64*, i64** %Sp_Var
  %lnb7i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7g( i64* %Base_Arg, i64* %lnb7h, i64* %Hp_Arg, i64 %lnb7i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb1J:
  %lnb7j = load i64, i64* %R1_Var
  store i64 %lnb7j, i64* %R1_Var
  %lnb7k = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnb7l = bitcast i64* %lnb7k to i64*
  %lnb7m = load i64, i64* %lnb7l, !tbaa !5
  %lnb7n = inttoptr i64 %lnb7m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7o = load i64*, i64** %Sp_Var
  %lnb7p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7n( i64* %Base_Arg, i64* %lnb7o, i64* %Hp_Arg, i64 %lnb7p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb1e_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1e_info$def to i8*)
define internal ghccc void @cb1e_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nb7q:
  %ls7qk = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb1e
cb1e:
  %lnb7r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1k_info$def to i64
  %lnb7s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb7r, i64* %lnb7s, !tbaa !2
  %lnb7v = load i64, i64* %R1_Var
  %lnb7w = add i64 %lnb7v, 7
  %lnb7x = inttoptr i64 %lnb7w to double*
  %lnb7y = load double, double* %lnb7x, !tbaa !4
  store double %lnb7y, double* %ls7qk
  %lnb7z = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb7A = bitcast i64* %lnb7z to i64*
  %lnb7B = load i64, i64* %lnb7A, !tbaa !2
  store i64 %lnb7B, i64* %R1_Var
  %lnb7C = load double, double* %ls7qk
  %lnb7D = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb7E = bitcast i64* %lnb7D to double*
  store double %lnb7C, double* %lnb7E, !tbaa !2
  %lnb7F = load i64, i64* %R1_Var
  %lnb7G = and i64 %lnb7F, 7
  %lnb7H = icmp ne i64 %lnb7G, 0
  br i1 %lnb7H, label %ub1R, label %cb1l
cb1l:
  %lnb7J = load i64, i64* %R1_Var
  %lnb7K = inttoptr i64 %lnb7J to i64*
  %lnb7L = load i64, i64* %lnb7K, !tbaa !4
  %lnb7M = inttoptr i64 %lnb7L to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7M( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb7N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub1R:
  %lnb7O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1k_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7O( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb7P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb1k_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1k_info$def to i8*)
define internal ghccc void @cb1k_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131, i32 30, i32 0}>
{
nb7Q:
  %ls7qm = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb1k
cb1k:
  %lnb7R = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1p_info$def to i64
  %lnb7S = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb7R, i64* %lnb7S, !tbaa !2
  %lnb7V = load i64, i64* %R1_Var
  %lnb7W = add i64 %lnb7V, 7
  %lnb7X = inttoptr i64 %lnb7W to double*
  %lnb7Y = load double, double* %lnb7X, !tbaa !4
  store double %lnb7Y, double* %ls7qm
  %lnb7Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb80 = bitcast i64* %lnb7Z to i64*
  %lnb81 = load i64, i64* %lnb80, !tbaa !2
  store i64 %lnb81, i64* %R1_Var
  %lnb82 = load double, double* %ls7qm
  %lnb83 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb84 = bitcast i64* %lnb83 to double*
  store double %lnb82, double* %lnb84, !tbaa !2
  %lnb85 = load i64, i64* %R1_Var
  %lnb86 = and i64 %lnb85, 7
  %lnb87 = icmp ne i64 %lnb86, 0
  br i1 %lnb87, label %ub1T, label %cb1q
cb1q:
  %lnb89 = load i64, i64* %R1_Var
  %lnb8a = inttoptr i64 %lnb89 to i64*
  %lnb8b = load i64, i64* %lnb8a, !tbaa !4
  %lnb8c = inttoptr i64 %lnb8b to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8c( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb8d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub1T:
  %lnb8e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1p_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8e( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb8f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb1p_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1p_info$def to i8*)
define internal ghccc void @cb1p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
nb8g:
  %ls7qo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb1p
cb1p:
  %lnb8h = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1u_info$def to i64
  %lnb8i = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb8h, i64* %lnb8i, !tbaa !2
  %lnb8l = load i64, i64* %R1_Var
  %lnb8m = add i64 %lnb8l, 7
  %lnb8n = inttoptr i64 %lnb8m to double*
  %lnb8o = load double, double* %lnb8n, !tbaa !4
  store double %lnb8o, double* %ls7qo
  %lnb8p = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb8q = bitcast i64* %lnb8p to i64*
  %lnb8r = load i64, i64* %lnb8q, !tbaa !2
  store i64 %lnb8r, i64* %R1_Var
  %lnb8s = load double, double* %ls7qo
  %lnb8t = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb8u = bitcast i64* %lnb8t to double*
  store double %lnb8s, double* %lnb8u, !tbaa !2
  %lnb8v = load i64, i64* %R1_Var
  %lnb8w = and i64 %lnb8v, 7
  %lnb8x = icmp ne i64 %lnb8w, 0
  br i1 %lnb8x, label %ub1U, label %cb1v
cb1v:
  %lnb8z = load i64, i64* %R1_Var
  %lnb8A = inttoptr i64 %lnb8z to i64*
  %lnb8B = load i64, i64* %lnb8A, !tbaa !4
  %lnb8C = inttoptr i64 %lnb8B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8C( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb8D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub1U:
  %lnb8E = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1u_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8E( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb8F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb1u_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1u_info$def to i8*)
define internal ghccc void @cb1u_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
nb8G:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7qt = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb1u
cb1u:
  %lnb8H = load i64*, i64** %Hp_Var
  %lnb8I = getelementptr inbounds i64, i64* %lnb8H, i32 2
  %lnb8J = ptrtoint i64* %lnb8I to i64
  %lnb8K = inttoptr i64 %lnb8J to i64*
  store i64* %lnb8K, i64** %Hp_Var
  %lnb8L = load i64*, i64** %Hp_Var
  %lnb8M = ptrtoint i64* %lnb8L to i64
  %lnb8N = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnb8O = bitcast i64* %lnb8N to i64*
  %lnb8P = load i64, i64* %lnb8O, !tbaa !5
  %lnb8Q = icmp ugt i64 %lnb8M, %lnb8P
  %lnb8R = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb8Q, i1 0 )
  br i1 %lnb8R, label %cb1Q, label %cb1P
cb1P:
  %lnb8S = load i64*, i64** %Sp_Var
  %lnb8T = getelementptr inbounds i64, i64* %lnb8S, i32 2
  %lnb8U = bitcast i64* %lnb8T to double*
  %lnb8V = load double, double* %lnb8U, !tbaa !2
  %lnb8W = load i64*, i64** %Sp_Var
  %lnb8X = getelementptr inbounds i64, i64* %lnb8W, i32 3
  %lnb8Y = bitcast i64* %lnb8X to double*
  %lnb8Z = load double, double* %lnb8Y, !tbaa !2
  %lnb90 = fmul double %lnb8V, %lnb8Z
  %lnb91 = load i64*, i64** %Sp_Var
  %lnb92 = getelementptr inbounds i64, i64* %lnb91, i32 1
  %lnb93 = bitcast i64* %lnb92 to double*
  %lnb94 = load double, double* %lnb93, !tbaa !2
  %lnb97 = load i64, i64* %R1_Var
  %lnb98 = add i64 %lnb97, 7
  %lnb99 = inttoptr i64 %lnb98 to double*
  %lnb9a = load double, double* %lnb99, !tbaa !4
  %lnb9b = fmul double %lnb94, %lnb9a
  %lnb9c = fsub double %lnb90, %lnb9b
  store double %lnb9c, double* %ls7qt
  %lnb9e = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnb9d = load i64*, i64** %Hp_Var
  %lnb9f = getelementptr inbounds i64, i64* %lnb9d, i32 -1
  store i64 %lnb9e, i64* %lnb9f, !tbaa !3
  %lnb9h = load double, double* %ls7qt
  %lnb9g = load i64*, i64** %Hp_Var
  %lnb9i = getelementptr inbounds i64, i64* %lnb9g, i32 0
  %lnb9j = bitcast i64* %lnb9i to double*
  store double %lnb9h, double* %lnb9j, !tbaa !3
  %lnb9l = load i64*, i64** %Hp_Var
  %lnb9m = ptrtoint i64* %lnb9l to i64
  %lnb9n = add i64 %lnb9m, -7
  store i64 %lnb9n, i64* %R1_Var
  %lnb9o = load i64*, i64** %Sp_Var
  %lnb9p = getelementptr inbounds i64, i64* %lnb9o, i32 4
  %lnb9q = ptrtoint i64* %lnb9p to i64
  %lnb9r = inttoptr i64 %lnb9q to i64*
  store i64* %lnb9r, i64** %Sp_Var
  %lnb9s = load i64*, i64** %Sp_Var
  %lnb9t = getelementptr inbounds i64, i64* %lnb9s, i32 0
  %lnb9u = bitcast i64* %lnb9t to i64*
  %lnb9v = load i64, i64* %lnb9u, !tbaa !2
  %lnb9w = inttoptr i64 %lnb9v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9x = load i64*, i64** %Sp_Var
  %lnb9y = load i64*, i64** %Hp_Var
  %lnb9z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9w( i64* %Base_Arg, i64* %lnb9x, i64* %lnb9y, i64 %lnb9z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb1Q:
  %lnb9A = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnb9A, !tbaa !5
  %lnb9B = load i64, i64* %R1_Var
  store i64 %lnb9B, i64* %R1_Var
  %lnb9C = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9D = load i64*, i64** %Sp_Var
  %lnb9E = load i64*, i64** %Hp_Var
  %lnb9F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9C( i64* %Base_Arg, i64* %lnb9D, i64* %lnb9E, i64 %lnb9F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7qi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qi_info$def to i8*)
define internal ghccc void @s7qi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 15, i32 0}>
{
nb9G:
  %ls7q2 = alloca i64, i32 1
  %ls7q5 = alloca i64, i32 1
  %ls7q6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb22
cb22:
  %lnb9H = load i64*, i64** %Sp_Var
  %lnb9I = getelementptr inbounds i64, i64* %lnb9H, i32 -6
  %lnb9J = ptrtoint i64* %lnb9I to i64
  %lnb9K = icmp ult i64 %lnb9J, %SpLim_Arg
  %lnb9L = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnb9K, i1 0 )
  br i1 %lnb9L, label %cb2u, label %cb2v
cb2v:
  %lnb9N = ptrtoint i8* @stg_upd_frame_info to i64
  %lnb9M = load i64*, i64** %Sp_Var
  %lnb9O = getelementptr inbounds i64, i64* %lnb9M, i32 -2
  store i64 %lnb9N, i64* %lnb9O, !tbaa !2
  %lnb9Q = load i64, i64* %R1_Var
  %lnb9P = load i64*, i64** %Sp_Var
  %lnb9R = getelementptr inbounds i64, i64* %lnb9P, i32 -1
  store i64 %lnb9Q, i64* %lnb9R, !tbaa !2
  %lnb9T = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1Z_info$def to i64
  %lnb9S = load i64*, i64** %Sp_Var
  %lnb9U = getelementptr inbounds i64, i64* %lnb9S, i32 -6
  store i64 %lnb9T, i64* %lnb9U, !tbaa !2
  %lnb9X = load i64, i64* %R1_Var
  %lnb9Y = add i64 %lnb9X, 16
  %lnb9Z = inttoptr i64 %lnb9Y to i64*
  %lnba0 = load i64, i64* %lnb9Z, !tbaa !4
  store i64 %lnba0, i64* %ls7q2
  %lnba3 = load i64, i64* %R1_Var
  %lnba4 = add i64 %lnba3, 24
  %lnba5 = inttoptr i64 %lnba4 to i64*
  %lnba6 = load i64, i64* %lnba5, !tbaa !4
  store i64 %lnba6, i64* %ls7q5
  %lnba9 = load i64, i64* %R1_Var
  %lnbaa = add i64 %lnba9, 32
  %lnbab = inttoptr i64 %lnbaa to i64*
  %lnbac = load i64, i64* %lnbab, !tbaa !4
  store i64 %lnbac, i64* %ls7q6
  %lnbaf = load i64, i64* %R1_Var
  %lnbag = add i64 %lnbaf, 40
  %lnbah = inttoptr i64 %lnbag to i64*
  %lnbai = load i64, i64* %lnbah, !tbaa !4
  store i64 %lnbai, i64* %R1_Var
  %lnbak = load i64, i64* %ls7q2
  %lnbaj = load i64*, i64** %Sp_Var
  %lnbal = getelementptr inbounds i64, i64* %lnbaj, i32 -5
  store i64 %lnbak, i64* %lnbal, !tbaa !2
  %lnban = load i64, i64* %ls7q5
  %lnbam = load i64*, i64** %Sp_Var
  %lnbao = getelementptr inbounds i64, i64* %lnbam, i32 -4
  store i64 %lnban, i64* %lnbao, !tbaa !2
  %lnbaq = load i64, i64* %ls7q6
  %lnbap = load i64*, i64** %Sp_Var
  %lnbar = getelementptr inbounds i64, i64* %lnbap, i32 -3
  store i64 %lnbaq, i64* %lnbar, !tbaa !2
  %lnbas = load i64*, i64** %Sp_Var
  %lnbat = getelementptr inbounds i64, i64* %lnbas, i32 -6
  %lnbau = ptrtoint i64* %lnbat to i64
  %lnbav = inttoptr i64 %lnbau to i64*
  store i64* %lnbav, i64** %Sp_Var
  %lnbaw = load i64, i64* %R1_Var
  %lnbax = and i64 %lnbaw, 7
  %lnbay = icmp ne i64 %lnbax, 0
  br i1 %lnbay, label %ub2D, label %cb20
cb20:
  %lnbaA = load i64, i64* %R1_Var
  %lnbaB = inttoptr i64 %lnbaA to i64*
  %lnbaC = load i64, i64* %lnbaB, !tbaa !4
  %lnbaD = inttoptr i64 %lnbaC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaE = load i64*, i64** %Sp_Var
  %lnbaF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaD( i64* %Base_Arg, i64* %lnbaE, i64* %Hp_Arg, i64 %lnbaF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2D:
  %lnbaG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1Z_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaH = load i64*, i64** %Sp_Var
  %lnbaI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaG( i64* %Base_Arg, i64* %lnbaH, i64* %Hp_Arg, i64 %lnbaI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb2u:
  %lnbaJ = load i64, i64* %R1_Var
  store i64 %lnbaJ, i64* %R1_Var
  %lnbaK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbaL = bitcast i64* %lnbaK to i64*
  %lnbaM = load i64, i64* %lnbaL, !tbaa !5
  %lnbaN = inttoptr i64 %lnbaM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaO = load i64*, i64** %Sp_Var
  %lnbaP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaN( i64* %Base_Arg, i64* %lnbaO, i64* %Hp_Arg, i64 %lnbaP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb1Z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb1Z_info$def to i8*)
define internal ghccc void @cb1Z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nbaQ:
  %ls7q8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb1Z
cb1Z:
  %lnbaR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb25_info$def to i64
  %lnbaS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbaR, i64* %lnbaS, !tbaa !2
  %lnbaV = load i64, i64* %R1_Var
  %lnbaW = add i64 %lnbaV, 7
  %lnbaX = inttoptr i64 %lnbaW to double*
  %lnbaY = load double, double* %lnbaX, !tbaa !4
  store double %lnbaY, double* %ls7q8
  %lnbaZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnbb0 = bitcast i64* %lnbaZ to i64*
  %lnbb1 = load i64, i64* %lnbb0, !tbaa !2
  store i64 %lnbb1, i64* %R1_Var
  %lnbb2 = load double, double* %ls7q8
  %lnbb3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnbb4 = bitcast i64* %lnbb3 to double*
  store double %lnbb2, double* %lnbb4, !tbaa !2
  %lnbb5 = load i64, i64* %R1_Var
  %lnbb6 = and i64 %lnbb5, 7
  %lnbb7 = icmp ne i64 %lnbb6, 0
  br i1 %lnbb7, label %ub2C, label %cb26
cb26:
  %lnbb9 = load i64, i64* %R1_Var
  %lnbba = inttoptr i64 %lnbb9 to i64*
  %lnbbb = load i64, i64* %lnbba, !tbaa !4
  %lnbbc = inttoptr i64 %lnbbb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbbd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2C:
  %lnbbe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb25_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbbf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb25_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb25_info$def to i8*)
define internal ghccc void @cb25_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 259, i32 30, i32 0}>
{
nbbg:
  %ls7qa = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb25
cb25:
  %lnbbh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2a_info$def to i64
  %lnbbi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbbh, i64* %lnbbi, !tbaa !2
  %lnbbl = load i64, i64* %R1_Var
  %lnbbm = add i64 %lnbbl, 7
  %lnbbn = inttoptr i64 %lnbbm to double*
  %lnbbo = load double, double* %lnbbn, !tbaa !4
  store double %lnbbo, double* %ls7qa
  %lnbbp = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbbq = bitcast i64* %lnbbp to i64*
  %lnbbr = load i64, i64* %lnbbq, !tbaa !2
  store i64 %lnbbr, i64* %R1_Var
  %lnbbs = load double, double* %ls7qa
  %lnbbt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbbu = bitcast i64* %lnbbt to double*
  store double %lnbbs, double* %lnbbu, !tbaa !2
  %lnbbv = load i64, i64* %R1_Var
  %lnbbw = and i64 %lnbbv, 7
  %lnbbx = icmp ne i64 %lnbbw, 0
  br i1 %lnbbx, label %ub2E, label %cb2b
cb2b:
  %lnbbz = load i64, i64* %R1_Var
  %lnbbA = inttoptr i64 %lnbbz to i64*
  %lnbbB = load i64, i64* %lnbbA, !tbaa !4
  %lnbbC = inttoptr i64 %lnbbB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbbD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2E:
  %lnbbE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2a_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbbF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb2a_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2a_info$def to i8*)
define internal ghccc void @cb2a_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 387, i32 30, i32 0}>
{
nbbG:
  %ls7qc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cb2a
cb2a:
  %lnbbH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2f_info$def to i64
  %lnbbI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbbH, i64* %lnbbI, !tbaa !2
  %lnbbL = load i64, i64* %R1_Var
  %lnbbM = add i64 %lnbbL, 7
  %lnbbN = inttoptr i64 %lnbbM to double*
  %lnbbO = load double, double* %lnbbN, !tbaa !4
  store double %lnbbO, double* %ls7qc
  %lnbbP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbbQ = bitcast i64* %lnbbP to i64*
  %lnbbR = load i64, i64* %lnbbQ, !tbaa !2
  store i64 %lnbbR, i64* %R1_Var
  %lnbbS = load double, double* %ls7qc
  %lnbbT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbbU = bitcast i64* %lnbbT to double*
  store double %lnbbS, double* %lnbbU, !tbaa !2
  %lnbbV = load i64, i64* %R1_Var
  %lnbbW = and i64 %lnbbV, 7
  %lnbbX = icmp ne i64 %lnbbW, 0
  br i1 %lnbbX, label %ub2F, label %cb2g
cb2g:
  %lnbbZ = load i64, i64* %R1_Var
  %lnbc0 = inttoptr i64 %lnbbZ to i64*
  %lnbc1 = load i64, i64* %lnbc0, !tbaa !4
  %lnbc2 = inttoptr i64 %lnbc1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbc3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbc2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbc3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2F:
  %lnbc4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2f_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbc5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbc4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbc5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb2f_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb2f_info$def to i8*)
define internal ghccc void @cb2f_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 451, i32 30, i32 0}>
{
nbc6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7qh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb2f
cb2f:
  %lnbc7 = load i64*, i64** %Hp_Var
  %lnbc8 = getelementptr inbounds i64, i64* %lnbc7, i32 2
  %lnbc9 = ptrtoint i64* %lnbc8 to i64
  %lnbca = inttoptr i64 %lnbc9 to i64*
  store i64* %lnbca, i64** %Hp_Var
  %lnbcb = load i64*, i64** %Hp_Var
  %lnbcc = ptrtoint i64* %lnbcb to i64
  %lnbcd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbce = bitcast i64* %lnbcd to i64*
  %lnbcf = load i64, i64* %lnbce, !tbaa !5
  %lnbcg = icmp ugt i64 %lnbcc, %lnbcf
  %lnbch = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbcg, i1 0 )
  br i1 %lnbch, label %cb2B, label %cb2A
cb2A:
  %lnbci = load i64*, i64** %Sp_Var
  %lnbcj = getelementptr inbounds i64, i64* %lnbci, i32 3
  %lnbck = bitcast i64* %lnbcj to double*
  %lnbcl = load double, double* %lnbck, !tbaa !2
  %lnbcm = load i64*, i64** %Sp_Var
  %lnbcn = getelementptr inbounds i64, i64* %lnbcm, i32 2
  %lnbco = bitcast i64* %lnbcn to double*
  %lnbcp = load double, double* %lnbco, !tbaa !2
  %lnbcq = fmul double %lnbcl, %lnbcp
  %lnbcr = load i64*, i64** %Sp_Var
  %lnbcs = getelementptr inbounds i64, i64* %lnbcr, i32 1
  %lnbct = bitcast i64* %lnbcs to double*
  %lnbcu = load double, double* %lnbct, !tbaa !2
  %lnbcx = load i64, i64* %R1_Var
  %lnbcy = add i64 %lnbcx, 7
  %lnbcz = inttoptr i64 %lnbcy to double*
  %lnbcA = load double, double* %lnbcz, !tbaa !4
  %lnbcB = fmul double %lnbcu, %lnbcA
  %lnbcC = fsub double %lnbcq, %lnbcB
  store double %lnbcC, double* %ls7qh
  %lnbcE = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbcD = load i64*, i64** %Hp_Var
  %lnbcF = getelementptr inbounds i64, i64* %lnbcD, i32 -1
  store i64 %lnbcE, i64* %lnbcF, !tbaa !3
  %lnbcH = load double, double* %ls7qh
  %lnbcG = load i64*, i64** %Hp_Var
  %lnbcI = getelementptr inbounds i64, i64* %lnbcG, i32 0
  %lnbcJ = bitcast i64* %lnbcI to double*
  store double %lnbcH, double* %lnbcJ, !tbaa !3
  %lnbcL = load i64*, i64** %Hp_Var
  %lnbcM = ptrtoint i64* %lnbcL to i64
  %lnbcN = add i64 %lnbcM, -7
  store i64 %lnbcN, i64* %R1_Var
  %lnbcO = load i64*, i64** %Sp_Var
  %lnbcP = getelementptr inbounds i64, i64* %lnbcO, i32 4
  %lnbcQ = ptrtoint i64* %lnbcP to i64
  %lnbcR = inttoptr i64 %lnbcQ to i64*
  store i64* %lnbcR, i64** %Sp_Var
  %lnbcS = load i64*, i64** %Sp_Var
  %lnbcT = getelementptr inbounds i64, i64* %lnbcS, i32 0
  %lnbcU = bitcast i64* %lnbcT to i64*
  %lnbcV = load i64, i64* %lnbcU, !tbaa !2
  %lnbcW = inttoptr i64 %lnbcV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcX = load i64*, i64** %Sp_Var
  %lnbcY = load i64*, i64** %Hp_Var
  %lnbcZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcW( i64* %Base_Arg, i64* %lnbcX, i64* %lnbcY, i64 %lnbcZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb2B:
  %lnbd0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbd0, !tbaa !5
  %lnbd1 = load i64, i64* %R1_Var
  store i64 %lnbd1, i64* %R1_Var
  %lnbd2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbd3 = load i64*, i64** %Sp_Var
  %lnbd4 = load i64*, i64** %Hp_Var
  %lnbd5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbd2( i64* %Base_Arg, i64* %lnbd3, i64* %lnbd4, i64 %lnbd5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_veccross_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_veccross_info$def to i8*)
define ghccc void @Main_veccross_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
nbd6:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cb2G
cb2G:
  %lnbd7 = load i64*, i64** %Sp_Var
  %lnbd8 = getelementptr inbounds i64, i64* %lnbd7, i32 -4
  %lnbd9 = ptrtoint i64* %lnbd8 to i64
  %lnbda = icmp ult i64 %lnbd9, %SpLim_Arg
  %lnbdb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbda, i1 0 )
  br i1 %lnbdb, label %cb2I, label %cb2J
cb2J:
  %lnbdd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0f_info$def to i64
  %lnbdc = load i64*, i64** %Sp_Var
  %lnbde = getelementptr inbounds i64, i64* %lnbdc, i32 -2
  store i64 %lnbdd, i64* %lnbde, !tbaa !2
  %lnbdf = load i64, i64* %R2_Var
  store i64 %lnbdf, i64* %R1_Var
  %lnbdh = load i64, i64* %R3_Var
  %lnbdg = load i64*, i64** %Sp_Var
  %lnbdi = getelementptr inbounds i64, i64* %lnbdg, i32 -1
  store i64 %lnbdh, i64* %lnbdi, !tbaa !2
  %lnbdj = load i64*, i64** %Sp_Var
  %lnbdk = getelementptr inbounds i64, i64* %lnbdj, i32 -2
  %lnbdl = ptrtoint i64* %lnbdk to i64
  %lnbdm = inttoptr i64 %lnbdl to i64*
  store i64* %lnbdm, i64** %Sp_Var
  %lnbdn = load i64, i64* %R1_Var
  %lnbdo = and i64 %lnbdn, 7
  %lnbdp = icmp ne i64 %lnbdo, 0
  br i1 %lnbdp, label %ub2P, label %cb0g
cb0g:
  %lnbdr = load i64, i64* %R1_Var
  %lnbds = inttoptr i64 %lnbdr to i64*
  %lnbdt = load i64, i64* %lnbds, !tbaa !4
  %lnbdu = inttoptr i64 %lnbdt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdv = load i64*, i64** %Sp_Var
  %lnbdw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdu( i64* %Base_Arg, i64* %lnbdv, i64* %Hp_Arg, i64 %lnbdw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2P:
  %lnbdx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0f_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdy = load i64*, i64** %Sp_Var
  %lnbdz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdx( i64* %Base_Arg, i64* %lnbdy, i64* %Hp_Arg, i64 %lnbdz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb2I:
  %lnbdA = load i64, i64* %R3_Var
  store i64 %lnbdA, i64* %R3_Var
  %lnbdB = load i64, i64* %R2_Var
  store i64 %lnbdB, i64* %R2_Var
  %lnbdC = ptrtoint %Main_veccross_closure_struct* @Main_veccross_closure$def to i64
  store i64 %lnbdC, i64* %R1_Var
  %lnbdD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbdE = bitcast i64* %lnbdD to i64*
  %lnbdF = load i64, i64* %lnbdE, !tbaa !5
  %lnbdG = inttoptr i64 %lnbdF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdH = load i64*, i64** %Sp_Var
  %lnbdI = load i64, i64* %R1_Var
  %lnbdJ = load i64, i64* %R2_Var
  %lnbdK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdG( i64* %Base_Arg, i64* %lnbdH, i64* %Hp_Arg, i64 %lnbdI, i64 %lnbdJ, i64 %lnbdK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0f_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0f_info$def to i8*)
define internal ghccc void @cb0f_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbdL:
  %ls7q0 = alloca i64, i32 1
  %ls7q1 = alloca i64, i32 1
  %ls7q2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb0f
cb0f:
  %lnbdN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0k_info$def to i64
  %lnbdM = load i64*, i64** %Sp_Var
  %lnbdO = getelementptr inbounds i64, i64* %lnbdM, i32 -2
  store i64 %lnbdN, i64* %lnbdO, !tbaa !2
  %lnbdR = load i64, i64* %R1_Var
  %lnbdS = add i64 %lnbdR, 7
  %lnbdT = inttoptr i64 %lnbdS to i64*
  %lnbdU = load i64, i64* %lnbdT, !tbaa !4
  store i64 %lnbdU, i64* %ls7q0
  %lnbdX = load i64, i64* %R1_Var
  %lnbdY = add i64 %lnbdX, 15
  %lnbdZ = inttoptr i64 %lnbdY to i64*
  %lnbe0 = load i64, i64* %lnbdZ, !tbaa !4
  store i64 %lnbe0, i64* %ls7q1
  %lnbe3 = load i64, i64* %R1_Var
  %lnbe4 = add i64 %lnbe3, 23
  %lnbe5 = inttoptr i64 %lnbe4 to i64*
  %lnbe6 = load i64, i64* %lnbe5, !tbaa !4
  store i64 %lnbe6, i64* %ls7q2
  %lnbe7 = load i64*, i64** %Sp_Var
  %lnbe8 = getelementptr inbounds i64, i64* %lnbe7, i32 1
  %lnbe9 = bitcast i64* %lnbe8 to i64*
  %lnbea = load i64, i64* %lnbe9, !tbaa !2
  store i64 %lnbea, i64* %R1_Var
  %lnbec = load i64, i64* %ls7q2
  %lnbeb = load i64*, i64** %Sp_Var
  %lnbed = getelementptr inbounds i64, i64* %lnbeb, i32 -1
  store i64 %lnbec, i64* %lnbed, !tbaa !2
  %lnbef = load i64, i64* %ls7q1
  %lnbee = load i64*, i64** %Sp_Var
  %lnbeg = getelementptr inbounds i64, i64* %lnbee, i32 0
  store i64 %lnbef, i64* %lnbeg, !tbaa !2
  %lnbei = load i64, i64* %ls7q0
  %lnbeh = load i64*, i64** %Sp_Var
  %lnbej = getelementptr inbounds i64, i64* %lnbeh, i32 1
  store i64 %lnbei, i64* %lnbej, !tbaa !2
  %lnbek = load i64*, i64** %Sp_Var
  %lnbel = getelementptr inbounds i64, i64* %lnbek, i32 -2
  %lnbem = ptrtoint i64* %lnbel to i64
  %lnben = inttoptr i64 %lnbem to i64*
  store i64* %lnben, i64** %Sp_Var
  %lnbeo = load i64, i64* %R1_Var
  %lnbep = and i64 %lnbeo, 7
  %lnbeq = icmp ne i64 %lnbep, 0
  br i1 %lnbeq, label %ub2O, label %cb0l
cb0l:
  %lnbes = load i64, i64* %R1_Var
  %lnbet = inttoptr i64 %lnbes to i64*
  %lnbeu = load i64, i64* %lnbet, !tbaa !4
  %lnbev = inttoptr i64 %lnbeu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbew = load i64*, i64** %Sp_Var
  %lnbex = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbev( i64* %Base_Arg, i64* %lnbew, i64* %Hp_Arg, i64 %lnbex, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ub2O:
  %lnbey = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0k_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbez = load i64*, i64** %Sp_Var
  %lnbeA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbey( i64* %Base_Arg, i64* %lnbez, i64* %Hp_Arg, i64 %lnbeA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cb0k_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cb0k_info$def to i8*)
define internal ghccc void @cb0k_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nbeB:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7q4 = alloca i64, i32 1
  %ls7q5 = alloca i64, i32 1
  %ls7q6 = alloca i64, i32 1
  %ls7q1 = alloca i64, i32 1
  %ls7q0 = alloca i64, i32 1
  %ls7q2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cb0k
cb0k:
  %lnbeC = load i64*, i64** %Hp_Var
  %lnbeD = getelementptr inbounds i64, i64* %lnbeC, i32 22
  %lnbeE = ptrtoint i64* %lnbeD to i64
  %lnbeF = inttoptr i64 %lnbeE to i64*
  store i64* %lnbeF, i64** %Hp_Var
  %lnbeG = load i64*, i64** %Hp_Var
  %lnbeH = ptrtoint i64* %lnbeG to i64
  %lnbeI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbeJ = bitcast i64* %lnbeI to i64*
  %lnbeK = load i64, i64* %lnbeJ, !tbaa !5
  %lnbeL = icmp ugt i64 %lnbeH, %lnbeK
  %lnbeM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbeL, i1 0 )
  br i1 %lnbeM, label %cb2N, label %cb2M
cb2M:
  %lnbeP = load i64, i64* %R1_Var
  %lnbeQ = add i64 %lnbeP, 7
  %lnbeR = inttoptr i64 %lnbeQ to i64*
  %lnbeS = load i64, i64* %lnbeR, !tbaa !4
  store i64 %lnbeS, i64* %ls7q4
  %lnbeV = load i64, i64* %R1_Var
  %lnbeW = add i64 %lnbeV, 15
  %lnbeX = inttoptr i64 %lnbeW to i64*
  %lnbeY = load i64, i64* %lnbeX, !tbaa !4
  store i64 %lnbeY, i64* %ls7q5
  %lnbf1 = load i64, i64* %R1_Var
  %lnbf2 = add i64 %lnbf1, 23
  %lnbf3 = inttoptr i64 %lnbf2 to i64*
  %lnbf4 = load i64, i64* %lnbf3, !tbaa !4
  store i64 %lnbf4, i64* %ls7q6
  %lnbf6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qG_info$def to i64
  %lnbf5 = load i64*, i64** %Hp_Var
  %lnbf7 = getelementptr inbounds i64, i64* %lnbf5, i32 -21
  store i64 %lnbf6, i64* %lnbf7, !tbaa !3
  %lnbf8 = load i64*, i64** %Sp_Var
  %lnbf9 = getelementptr inbounds i64, i64* %lnbf8, i32 2
  %lnbfa = bitcast i64* %lnbf9 to i64*
  %lnbfb = load i64, i64* %lnbfa, !tbaa !2
  store i64 %lnbfb, i64* %ls7q1
  %lnbfd = load i64, i64* %ls7q1
  %lnbfc = load i64*, i64** %Hp_Var
  %lnbfe = getelementptr inbounds i64, i64* %lnbfc, i32 -19
  store i64 %lnbfd, i64* %lnbfe, !tbaa !3
  %lnbfg = load i64, i64* %ls7q4
  %lnbff = load i64*, i64** %Hp_Var
  %lnbfh = getelementptr inbounds i64, i64* %lnbff, i32 -18
  store i64 %lnbfg, i64* %lnbfh, !tbaa !3
  %lnbfj = load i64, i64* %ls7q5
  %lnbfi = load i64*, i64** %Hp_Var
  %lnbfk = getelementptr inbounds i64, i64* %lnbfi, i32 -17
  store i64 %lnbfj, i64* %lnbfk, !tbaa !3
  %lnbfl = load i64*, i64** %Sp_Var
  %lnbfm = getelementptr inbounds i64, i64* %lnbfl, i32 3
  %lnbfn = bitcast i64* %lnbfm to i64*
  %lnbfo = load i64, i64* %lnbfn, !tbaa !2
  store i64 %lnbfo, i64* %ls7q0
  %lnbfq = load i64, i64* %ls7q0
  %lnbfp = load i64*, i64** %Hp_Var
  %lnbfr = getelementptr inbounds i64, i64* %lnbfp, i32 -16
  store i64 %lnbfq, i64* %lnbfr, !tbaa !3
  %lnbft = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qu_info$def to i64
  %lnbfs = load i64*, i64** %Hp_Var
  %lnbfu = getelementptr inbounds i64, i64* %lnbfs, i32 -15
  store i64 %lnbft, i64* %lnbfu, !tbaa !3
  %lnbfw = load i64, i64* %ls7q0
  %lnbfv = load i64*, i64** %Hp_Var
  %lnbfx = getelementptr inbounds i64, i64* %lnbfv, i32 -13
  store i64 %lnbfw, i64* %lnbfx, !tbaa !3
  %lnbfz = load i64, i64* %ls7q6
  %lnbfy = load i64*, i64** %Hp_Var
  %lnbfA = getelementptr inbounds i64, i64* %lnbfy, i32 -12
  store i64 %lnbfz, i64* %lnbfA, !tbaa !3
  %lnbfC = load i64, i64* %ls7q4
  %lnbfB = load i64*, i64** %Hp_Var
  %lnbfD = getelementptr inbounds i64, i64* %lnbfB, i32 -11
  store i64 %lnbfC, i64* %lnbfD, !tbaa !3
  %lnbfE = load i64*, i64** %Sp_Var
  %lnbfF = getelementptr inbounds i64, i64* %lnbfE, i32 1
  %lnbfG = bitcast i64* %lnbfF to i64*
  %lnbfH = load i64, i64* %lnbfG, !tbaa !2
  store i64 %lnbfH, i64* %ls7q2
  %lnbfJ = load i64, i64* %ls7q2
  %lnbfI = load i64*, i64** %Hp_Var
  %lnbfK = getelementptr inbounds i64, i64* %lnbfI, i32 -10
  store i64 %lnbfJ, i64* %lnbfK, !tbaa !3
  %lnbfM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7qi_info$def to i64
  %lnbfL = load i64*, i64** %Hp_Var
  %lnbfN = getelementptr inbounds i64, i64* %lnbfL, i32 -9
  store i64 %lnbfM, i64* %lnbfN, !tbaa !3
  %lnbfP = load i64, i64* %ls7q2
  %lnbfO = load i64*, i64** %Hp_Var
  %lnbfQ = getelementptr inbounds i64, i64* %lnbfO, i32 -7
  store i64 %lnbfP, i64* %lnbfQ, !tbaa !3
  %lnbfS = load i64, i64* %ls7q5
  %lnbfR = load i64*, i64** %Hp_Var
  %lnbfT = getelementptr inbounds i64, i64* %lnbfR, i32 -6
  store i64 %lnbfS, i64* %lnbfT, !tbaa !3
  %lnbfV = load i64, i64* %ls7q6
  %lnbfU = load i64*, i64** %Hp_Var
  %lnbfW = getelementptr inbounds i64, i64* %lnbfU, i32 -5
  store i64 %lnbfV, i64* %lnbfW, !tbaa !3
  %lnbfY = load i64, i64* %ls7q1
  %lnbfX = load i64*, i64** %Hp_Var
  %lnbfZ = getelementptr inbounds i64, i64* %lnbfX, i32 -4
  store i64 %lnbfY, i64* %lnbfZ, !tbaa !3
  %lnbg1 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnbg0 = load i64*, i64** %Hp_Var
  %lnbg2 = getelementptr inbounds i64, i64* %lnbg0, i32 -3
  store i64 %lnbg1, i64* %lnbg2, !tbaa !3
  %lnbg4 = load i64*, i64** %Hp_Var
  %lnbg5 = getelementptr inbounds i64, i64* %lnbg4, i32 -9
  %lnbg6 = ptrtoint i64* %lnbg5 to i64
  %lnbg3 = load i64*, i64** %Hp_Var
  %lnbg7 = getelementptr inbounds i64, i64* %lnbg3, i32 -2
  store i64 %lnbg6, i64* %lnbg7, !tbaa !3
  %lnbg9 = load i64*, i64** %Hp_Var
  %lnbga = getelementptr inbounds i64, i64* %lnbg9, i32 -15
  %lnbgb = ptrtoint i64* %lnbga to i64
  %lnbg8 = load i64*, i64** %Hp_Var
  %lnbgc = getelementptr inbounds i64, i64* %lnbg8, i32 -1
  store i64 %lnbgb, i64* %lnbgc, !tbaa !3
  %lnbge = load i64*, i64** %Hp_Var
  %lnbgf = getelementptr inbounds i64, i64* %lnbge, i32 -21
  %lnbgg = ptrtoint i64* %lnbgf to i64
  %lnbgd = load i64*, i64** %Hp_Var
  %lnbgh = getelementptr inbounds i64, i64* %lnbgd, i32 0
  store i64 %lnbgg, i64* %lnbgh, !tbaa !3
  %lnbgj = load i64*, i64** %Hp_Var
  %lnbgk = ptrtoint i64* %lnbgj to i64
  %lnbgl = add i64 %lnbgk, -23
  store i64 %lnbgl, i64* %R1_Var
  %lnbgm = load i64*, i64** %Sp_Var
  %lnbgn = getelementptr inbounds i64, i64* %lnbgm, i32 4
  %lnbgo = ptrtoint i64* %lnbgn to i64
  %lnbgp = inttoptr i64 %lnbgo to i64*
  store i64* %lnbgp, i64** %Sp_Var
  %lnbgq = load i64*, i64** %Sp_Var
  %lnbgr = getelementptr inbounds i64, i64* %lnbgq, i32 0
  %lnbgs = bitcast i64* %lnbgr to i64*
  %lnbgt = load i64, i64* %lnbgs, !tbaa !2
  %lnbgu = inttoptr i64 %lnbgt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbgv = load i64*, i64** %Sp_Var
  %lnbgw = load i64*, i64** %Hp_Var
  %lnbgx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbgu( i64* %Base_Arg, i64* %lnbgv, i64* %lnbgw, i64 %lnbgx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cb2N:
  %lnbgy = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 176, i64* %lnbgy, !tbaa !5
  %lnbgz = load i64, i64* %R1_Var
  store i64 %lnbgz, i64* %R1_Var
  %lnbgA = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbgB = load i64*, i64** %Sp_Var
  %lnbgC = load i64*, i64** %Hp_Var
  %lnbgD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbgA( i64* %Base_Arg, i64* %lnbgB, i64* %lnbgC, i64 %lnbgD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_testspheres18_closure_struct = type <{i64, double}>
@Main_testspheres18_closure$def = internal global %Main_testspheres18_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xBFC615FCC1871E6D}>
@Main_testspheres18_closure = alias i8, bitcast (%Main_testspheres18_closure_struct* @Main_testspheres18_closure$def to i8*)
%Main_testspheres17_closure_struct = type <{i64, double}>
@Main_testspheres17_closure$def = internal global %Main_testspheres17_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xBFE49B3F20A73F75}>
@Main_testspheres17_closure = alias i8, bitcast (%Main_testspheres17_closure_struct* @Main_testspheres17_closure$def to i8*)
%Main_testspheres14_closure_struct = type <{i64, double}>
@Main_testspheres14_closure$def = internal global %Main_testspheres14_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FDE2B7FE08AEFB3}>
@Main_testspheres14_closure = alias i8, bitcast (%Main_testspheres14_closure_struct* @Main_testspheres14_closure$def to i8*)
%Main_testspheres13_closure_struct = type <{i64, double}>
@Main_testspheres13_closure$def = internal global %Main_testspheres13_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xBFDE2B7FE08AEFB3}>
@Main_testspheres13_closure = alias i8, bitcast (%Main_testspheres13_closure_struct* @Main_testspheres13_closure$def to i8*)
%Main_testspheres23_closure_struct = type <{i64, double}>
@Main_testspheres23_closure$def = internal global %Main_testspheres23_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FB980A9DE8B3B32}>
@Main_testspheres23_closure = alias i8, bitcast (%Main_testspheres23_closure_struct* @Main_testspheres23_closure$def to i8*)
%Main_testspheres22_closure_struct = type <{i64, double}>
@Main_testspheres22_closure$def = internal global %Main_testspheres22_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xBFD7CB5350092CCF}>
@Main_testspheres22_closure = alias i8, bitcast (%Main_testspheres22_closure_struct* @Main_testspheres22_closure$def to i8*)
%Main_testspheres33_closure_struct = type <{i64, double}>
@Main_testspheres33_closure$def = internal global %Main_testspheres33_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FC615FCC1871E6D}>
@Main_testspheres33_closure = alias i8, bitcast (%Main_testspheres33_closure_struct* @Main_testspheres33_closure$def to i8*)
%Main_testspheres32_closure_struct = type <{i64, double}>
@Main_testspheres32_closure$def = internal global %Main_testspheres32_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE49B3F20A73F75}>
@Main_testspheres32_closure = alias i8, bitcast (%Main_testspheres32_closure_struct* @Main_testspheres32_closure$def to i8*)
%Main_testspheres11_closure_struct = type <{i64, double}>
@Main_testspheres11_closure$def = internal global %Main_testspheres11_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FC5555821294574}>
@Main_testspheres11_closure = alias i8, bitcast (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i8*)
%Main_testspheres21_closure_struct = type <{i64, double}>
@Main_testspheres21_closure$def = internal global %Main_testspheres21_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE16B28D8665E03}>
@Main_testspheres21_closure = alias i8, bitcast (%Main_testspheres21_closure_struct* @Main_testspheres21_closure$def to i8*)
%Main_testspheres29_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres29_closure$def = internal global %Main_testspheres29_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres22_closure_struct* @Main_testspheres22_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres23_closure_struct* @Main_testspheres23_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres21_closure_struct* @Main_testspheres21_closure$def to i64),i64 1), i64 3}>
@Main_testspheres29_closure = alias i8, bitcast (%Main_testspheres29_closure_struct* @Main_testspheres29_closure$def to i8*)
%Main_testspheres20_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres20_closure$def = internal global %Main_testspheres20_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres23_closure_struct* @Main_testspheres23_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres22_closure_struct* @Main_testspheres22_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres21_closure_struct* @Main_testspheres21_closure$def to i64),i64 1), i64 3}>
@Main_testspheres20_closure = alias i8, bitcast (%Main_testspheres20_closure_struct* @Main_testspheres20_closure$def to i8*)
%Main_testspheres38_closure_struct = type <{i64, double}>
@Main_testspheres38_closure$def = internal global %Main_testspheres38_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD16B2AF145521A}>
@Main_testspheres38_closure = alias i8, bitcast (%Main_testspheres38_closure_struct* @Main_testspheres38_closure$def to i8*)
%Main_testspheres37_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres37_closure$def = internal global %Main_testspheres37_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres38_closure_struct* @Main_testspheres38_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres38_closure_struct* @Main_testspheres38_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres21_closure_struct* @Main_testspheres21_closure$def to i64),i64 1), i64 3}>
@Main_testspheres37_closure = alias i8, bitcast (%Main_testspheres37_closure_struct* @Main_testspheres37_closure$def to i8*)
%Main_testlights7_closure_struct = type <{i64, double}>
@Main_testlights7_closure$def = internal global %Main_testlights7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4014000000000000}>
@Main_testlights7_closure = alias i8, bitcast (%Main_testlights7_closure_struct* @Main_testlights7_closure$def to i8*)
%Main_testlights8_closure_struct = type <{i64, double}>
@Main_testlights8_closure$def = internal global %Main_testlights8_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xC008000000000000}>
@Main_testlights8_closure = alias i8, bitcast (%Main_testlights8_closure_struct* @Main_testlights8_closure$def to i8*)
%Main_testlights12_closure_struct = type <{i64, double}>
@Main_testlights12_closure$def = internal global %Main_testlights12_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0xC010000000000000}>
@Main_testlights12_closure = alias i8, bitcast (%Main_testlights12_closure_struct* @Main_testlights12_closure$def to i8*)
%Main_testlights5_closure_struct = type <{i64, double}>
@Main_testlights5_closure$def = internal global %Main_testlights5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD279A6B50B0F28}>
@Main_testlights5_closure = alias i8, bitcast (%Main_testlights5_closure_struct* @Main_testlights5_closure$def to i8*)
%Main_testlights4_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testlights4_closure$def = internal global %Main_testlights4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights5_closure_struct* @Main_testlights5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights5_closure_struct* @Main_testlights5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights5_closure_struct* @Main_testlights5_closure$def to i64),i64 1), i64 3}>
@Main_testlights4_closure = alias i8, bitcast (%Main_testlights4_closure_struct* @Main_testlights4_closure$def to i8*)
%Main_testlights15_closure_struct = type <{i64, double}>
@Main_testlights15_closure$def = internal global %Main_testlights15_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4000000000000000}>
@Main_testlights15_closure = alias i8, bitcast (%Main_testlights15_closure_struct* @Main_testlights15_closure$def to i8*)
%Main_testlights11_closure_struct = type <{i64, double}>
@Main_testlights11_closure$def = internal global %Main_testlights11_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4010000000000000}>
@Main_testlights11_closure = alias i8, bitcast (%Main_testlights11_closure_struct* @Main_testlights11_closure$def to i8*)
%Main_iszuzzerovector_closure_struct = type <{i64}>
@Main_iszuzzerovector_closure$def = internal global %Main_iszuzzerovector_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_iszuzzerovector_info$def to i64)}>
@Main_iszuzzerovector_closure = alias i8, bitcast (%Main_iszuzzerovector_closure_struct* @Main_iszuzzerovector_closure$def to i8*)
@Main_iszuzzerovector_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_iszuzzerovector_info$def to i8*)
define ghccc void @Main_iszuzzerovector_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbhw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbgL
cbgL:
  %lnbhx = load i64*, i64** %Sp_Var
  %lnbhy = getelementptr inbounds i64, i64* %lnbhx, i32 -3
  %lnbhz = ptrtoint i64* %lnbhy to i64
  %lnbhA = icmp ult i64 %lnbhz, %SpLim_Arg
  %lnbhB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbhA, i1 0 )
  br i1 %lnbhB, label %cbgP, label %cbgQ
cbgQ:
  %lnbhD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgI_info$def to i64
  %lnbhC = load i64*, i64** %Sp_Var
  %lnbhE = getelementptr inbounds i64, i64* %lnbhC, i32 -1
  store i64 %lnbhD, i64* %lnbhE, !tbaa !2
  %lnbhF = load i64, i64* %R2_Var
  store i64 %lnbhF, i64* %R1_Var
  %lnbhG = load i64*, i64** %Sp_Var
  %lnbhH = getelementptr inbounds i64, i64* %lnbhG, i32 -1
  %lnbhI = ptrtoint i64* %lnbhH to i64
  %lnbhJ = inttoptr i64 %lnbhI to i64*
  store i64* %lnbhJ, i64** %Sp_Var
  %lnbhK = load i64, i64* %R1_Var
  %lnbhL = and i64 %lnbhK, 7
  %lnbhM = icmp ne i64 %lnbhL, 0
  br i1 %lnbhM, label %ubhr, label %cbgJ
cbgJ:
  %lnbhO = load i64, i64* %R1_Var
  %lnbhP = inttoptr i64 %lnbhO to i64*
  %lnbhQ = load i64, i64* %lnbhP, !tbaa !4
  %lnbhR = inttoptr i64 %lnbhQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbhS = load i64*, i64** %Sp_Var
  %lnbhT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbhR( i64* %Base_Arg, i64* %lnbhS, i64* %Hp_Arg, i64 %lnbhT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubhr:
  %lnbhU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbhV = load i64*, i64** %Sp_Var
  %lnbhW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbhU( i64* %Base_Arg, i64* %lnbhV, i64* %Hp_Arg, i64 %lnbhW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbgP:
  %lnbhX = load i64, i64* %R2_Var
  store i64 %lnbhX, i64* %R2_Var
  %lnbhY = ptrtoint %Main_iszuzzerovector_closure_struct* @Main_iszuzzerovector_closure$def to i64
  store i64 %lnbhY, i64* %R1_Var
  %lnbhZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbi0 = bitcast i64* %lnbhZ to i64*
  %lnbi1 = load i64, i64* %lnbi0, !tbaa !5
  %lnbi2 = inttoptr i64 %lnbi1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbi3 = load i64*, i64** %Sp_Var
  %lnbi4 = load i64, i64* %R1_Var
  %lnbi5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbi2( i64* %Base_Arg, i64* %lnbi3, i64* %Hp_Arg, i64 %lnbi4, i64 %lnbi5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbgI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgI_info$def to i8*)
define internal ghccc void @cbgI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbi6:
  %ls7pM = alloca i64, i32 1
  %ls7pN = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbgI
cbgI:
  %lnbi8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgO_info$def to i64
  %lnbi7 = load i64*, i64** %Sp_Var
  %lnbi9 = getelementptr inbounds i64, i64* %lnbi7, i32 -2
  store i64 %lnbi8, i64* %lnbi9, !tbaa !2
  %lnbic = load i64, i64* %R1_Var
  %lnbid = add i64 %lnbic, 15
  %lnbie = inttoptr i64 %lnbid to i64*
  %lnbif = load i64, i64* %lnbie, !tbaa !4
  store i64 %lnbif, i64* %ls7pM
  %lnbii = load i64, i64* %R1_Var
  %lnbij = add i64 %lnbii, 23
  %lnbik = inttoptr i64 %lnbij to i64*
  %lnbil = load i64, i64* %lnbik, !tbaa !4
  store i64 %lnbil, i64* %ls7pN
  %lnbio = load i64, i64* %R1_Var
  %lnbip = add i64 %lnbio, 7
  %lnbiq = inttoptr i64 %lnbip to i64*
  %lnbir = load i64, i64* %lnbiq, !tbaa !4
  store i64 %lnbir, i64* %R1_Var
  %lnbit = load i64, i64* %ls7pN
  %lnbis = load i64*, i64** %Sp_Var
  %lnbiu = getelementptr inbounds i64, i64* %lnbis, i32 -1
  store i64 %lnbit, i64* %lnbiu, !tbaa !2
  %lnbiw = load i64, i64* %ls7pM
  %lnbiv = load i64*, i64** %Sp_Var
  %lnbix = getelementptr inbounds i64, i64* %lnbiv, i32 0
  store i64 %lnbiw, i64* %lnbix, !tbaa !2
  %lnbiy = load i64*, i64** %Sp_Var
  %lnbiz = getelementptr inbounds i64, i64* %lnbiy, i32 -2
  %lnbiA = ptrtoint i64* %lnbiz to i64
  %lnbiB = inttoptr i64 %lnbiA to i64*
  store i64* %lnbiB, i64** %Sp_Var
  %lnbiC = load i64, i64* %R1_Var
  %lnbiD = and i64 %lnbiC, 7
  %lnbiE = icmp ne i64 %lnbiD, 0
  br i1 %lnbiE, label %ubhq, label %cbgS
cbgS:
  %lnbiG = load i64, i64* %R1_Var
  %lnbiH = inttoptr i64 %lnbiG to i64*
  %lnbiI = load i64, i64* %lnbiH, !tbaa !4
  %lnbiJ = inttoptr i64 %lnbiI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbiK = load i64*, i64** %Sp_Var
  %lnbiL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbiJ( i64* %Base_Arg, i64* %lnbiK, i64* %Hp_Arg, i64 %lnbiL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubhq:
  %lnbiM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbiN = load i64*, i64** %Sp_Var
  %lnbiO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbiM( i64* %Base_Arg, i64* %lnbiN, i64* %Hp_Arg, i64 %lnbiO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbgO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbgO_info$def to i8*)
define internal ghccc void @cbgO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nbiP:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbgO
cbgO:
  %lnbiS = load i64, i64* %R1_Var
  %lnbiT = add i64 %lnbiS, 7
  %lnbiU = inttoptr i64 %lnbiT to double*
  %lnbiV = load double, double* %lnbiU, !tbaa !4
  %lnbiW = fcmp olt double %lnbiV, 0x3EB0C6F7A0B5ED8D
  %lnbiX = zext i1 %lnbiW to i64
  switch i64 %lnbiX, label %ubho [i64 1, label %cbh4]
ubho:
  %lnbiY = load i64*, i64** %Sp_Var
  %lnbiZ = getelementptr inbounds i64, i64* %lnbiY, i32 3
  %lnbj0 = ptrtoint i64* %lnbiZ to i64
  %lnbj1 = inttoptr i64 %lnbj0 to i64*
  store i64* %lnbj1, i64** %Sp_Var
  %lnbj2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbh0$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbj3 = load i64*, i64** %Sp_Var
  %lnbj4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbj2( i64* %Base_Arg, i64* %lnbj3, i64* %Hp_Arg, i64 %lnbj4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbh4:
  %lnbj6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_info$def to i64
  %lnbj5 = load i64*, i64** %Sp_Var
  %lnbj7 = getelementptr inbounds i64, i64* %lnbj5, i32 0
  store i64 %lnbj6, i64* %lnbj7, !tbaa !2
  %lnbj8 = load i64*, i64** %Sp_Var
  %lnbj9 = getelementptr inbounds i64, i64* %lnbj8, i32 2
  %lnbja = bitcast i64* %lnbj9 to i64*
  %lnbjb = load i64, i64* %lnbja, !tbaa !2
  store i64 %lnbjb, i64* %R1_Var
  %lnbjc = load i64, i64* %R1_Var
  %lnbjd = and i64 %lnbjc, 7
  %lnbje = icmp ne i64 %lnbjd, 0
  br i1 %lnbje, label %ubhs, label %cbh5
cbh5:
  %lnbjg = load i64, i64* %R1_Var
  %lnbjh = inttoptr i64 %lnbjg to i64*
  %lnbji = load i64, i64* %lnbjh, !tbaa !4
  %lnbjj = inttoptr i64 %lnbji to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjk = load i64*, i64** %Sp_Var
  %lnbjl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjj( i64* %Base_Arg, i64* %lnbjk, i64* %Hp_Arg, i64 %lnbjl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubhs:
  %lnbjm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjn = load i64*, i64** %Sp_Var
  %lnbjo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjm( i64* %Base_Arg, i64* %lnbjn, i64* %Hp_Arg, i64 %lnbjo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbh3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_info$def to i8*)
define internal ghccc void @cbh3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nbjp:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbh3
cbh3:
  %lnbjs = load i64, i64* %R1_Var
  %lnbjt = add i64 %lnbjs, 7
  %lnbju = inttoptr i64 %lnbjt to double*
  %lnbjv = load double, double* %lnbju, !tbaa !4
  %lnbjw = fcmp olt double %lnbjv, 0x3EB0C6F7A0B5ED8D
  %lnbjx = zext i1 %lnbjw to i64
  switch i64 %lnbjx, label %ubhp [i64 1, label %cbhh]
ubhp:
  %lnbjy = load i64*, i64** %Sp_Var
  %lnbjz = getelementptr inbounds i64, i64* %lnbjy, i32 3
  %lnbjA = ptrtoint i64* %lnbjz to i64
  %lnbjB = inttoptr i64 %lnbjA to i64*
  store i64* %lnbjB, i64** %Sp_Var
  %lnbjC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbh0$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjD = load i64*, i64** %Sp_Var
  %lnbjE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjC( i64* %Base_Arg, i64* %lnbjD, i64* %Hp_Arg, i64 %lnbjE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbhh:
  %lnbjG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhg_info$def to i64
  %lnbjF = load i64*, i64** %Sp_Var
  %lnbjH = getelementptr inbounds i64, i64* %lnbjF, i32 2
  store i64 %lnbjG, i64* %lnbjH, !tbaa !2
  %lnbjI = load i64*, i64** %Sp_Var
  %lnbjJ = getelementptr inbounds i64, i64* %lnbjI, i32 1
  %lnbjK = bitcast i64* %lnbjJ to i64*
  %lnbjL = load i64, i64* %lnbjK, !tbaa !2
  store i64 %lnbjL, i64* %R1_Var
  %lnbjM = load i64*, i64** %Sp_Var
  %lnbjN = getelementptr inbounds i64, i64* %lnbjM, i32 2
  %lnbjO = ptrtoint i64* %lnbjN to i64
  %lnbjP = inttoptr i64 %lnbjO to i64*
  store i64* %lnbjP, i64** %Sp_Var
  %lnbjQ = load i64, i64* %R1_Var
  %lnbjR = and i64 %lnbjQ, 7
  %lnbjS = icmp ne i64 %lnbjR, 0
  br i1 %lnbjS, label %ubhu, label %cbhi
cbhi:
  %lnbjU = load i64, i64* %R1_Var
  %lnbjV = inttoptr i64 %lnbjU to i64*
  %lnbjW = load i64, i64* %lnbjV, !tbaa !4
  %lnbjX = inttoptr i64 %lnbjW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjY = load i64*, i64** %Sp_Var
  %lnbjZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjX( i64* %Base_Arg, i64* %lnbjY, i64* %Hp_Arg, i64 %lnbjZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubhu:
  %lnbk0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbk1 = load i64*, i64** %Sp_Var
  %lnbk2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbk0( i64* %Base_Arg, i64* %lnbk1, i64* %Hp_Arg, i64 %lnbk2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhg_info$def to i8*)
define internal ghccc void @cbhg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbk3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbhg
cbhg:
  %lnbk6 = load i64, i64* %R1_Var
  %lnbk7 = add i64 %lnbk6, 7
  %lnbk8 = inttoptr i64 %lnbk7 to double*
  %lnbk9 = load double, double* %lnbk8, !tbaa !4
  %lnbka = fcmp olt double %lnbk9, 0x3EB0C6F7A0B5ED8D
  %lnbkb = zext i1 %lnbka to i64
  %lnbkc = shl i64 %lnbkb, 3
  %lnbkd = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnbke = add i64 %lnbkc, %lnbkd
  %lnbkf = inttoptr i64 %lnbke to i64*
  %lnbkg = load i64, i64* %lnbkf, !tbaa !1
  store i64 %lnbkg, i64* %R1_Var
  %lnbkh = load i64*, i64** %Sp_Var
  %lnbki = getelementptr inbounds i64, i64* %lnbkh, i32 1
  %lnbkj = ptrtoint i64* %lnbki to i64
  %lnbkk = inttoptr i64 %lnbkj to i64*
  store i64* %lnbkk, i64** %Sp_Var
  %lnbkl = load i64*, i64** %Sp_Var
  %lnbkm = getelementptr inbounds i64, i64* %lnbkl, i32 0
  %lnbkn = bitcast i64* %lnbkm to i64*
  %lnbko = load i64, i64* %lnbkn, !tbaa !2
  %lnbkp = inttoptr i64 %lnbko to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbkq = load i64*, i64** %Sp_Var
  %lnbkr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbkp( i64* %Base_Arg, i64* %lnbkq, i64* %Hp_Arg, i64 %lnbkr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbh0 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbh0$def to i8*)
define internal ghccc void @_cbh0$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbks:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbh0
cbh0:
  %lnbkt = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnbku = add i64 %lnbkt, 1
  store i64 %lnbku, i64* %R1_Var
  %lnbkv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbkw = bitcast i64* %lnbkv to i64*
  %lnbkx = load i64, i64* %lnbkw, !tbaa !2
  %lnbky = inttoptr i64 %lnbkx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbkz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbky( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbkz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdtczqSphere3_bytes_struct = type <{[8 x i8]}>
@Main_zdtczqSphere3_bytes$def = internal constant %Main_zdtczqSphere3_bytes_struct<{[8 x i8] [i8 39, i8 83, i8 112, i8 104, i8 101, i8 114, i8 101, i8 0]}>, align 1
@Main_zdtczqSphere3_bytes = alias i8, bitcast (%Main_zdtczqSphere3_bytes_struct* @Main_zdtczqSphere3_bytes$def to i8*)
%Main_zdtczqSphere2_closure_struct = type <{i64, i64}>
@Main_zdtczqSphere2_closure$def = internal global %Main_zdtczqSphere2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqSphere3_bytes_struct* @Main_zdtczqSphere3_bytes$def to i64)}>
@Main_zdtczqSphere2_closure = alias i8, bitcast (%Main_zdtczqSphere2_closure_struct* @Main_zdtczqSphere2_closure$def to i8*)
%Main_zdtcSphere2_bytes_struct = type <{[7 x i8]}>
@Main_zdtcSphere2_bytes$def = internal constant %Main_zdtcSphere2_bytes_struct<{[7 x i8] [i8 83, i8 112, i8 104, i8 101, i8 114, i8 101, i8 0]}>, align 1
@Main_zdtcSphere2_bytes = alias i8, bitcast (%Main_zdtcSphere2_bytes_struct* @Main_zdtcSphere2_bytes$def to i8*)
%Main_zdtcSphere1_closure_struct = type <{i64, i64}>
@Main_zdtcSphere1_closure$def = internal global %Main_zdtcSphere1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtcSphere2_bytes_struct* @Main_zdtcSphere2_bytes$def to i64)}>
@Main_zdtcSphere1_closure = alias i8, bitcast (%Main_zdtcSphere1_closure_struct* @Main_zdtcSphere1_closure$def to i8*)
%Main_zdtczqRefract2_bytes_struct = type <{[9 x i8]}>
@Main_zdtczqRefract2_bytes$def = internal constant %Main_zdtczqRefract2_bytes_struct<{[9 x i8] [i8 39, i8 82, i8 101, i8 102, i8 114, i8 97, i8 99, i8 116, i8 0]}>, align 1
@Main_zdtczqRefract2_bytes = alias i8, bitcast (%Main_zdtczqRefract2_bytes_struct* @Main_zdtczqRefract2_bytes$def to i8*)
%Main_zdtczqRefract1_closure_struct = type <{i64, i64}>
@Main_zdtczqRefract1_closure$def = internal global %Main_zdtczqRefract1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqRefract2_bytes_struct* @Main_zdtczqRefract2_bytes$def to i64)}>
@Main_zdtczqRefract1_closure = alias i8, bitcast (%Main_zdtczqRefract1_closure_struct* @Main_zdtczqRefract1_closure$def to i8*)
%Main_zdtczqTransmit2_bytes_struct = type <{[10 x i8]}>
@Main_zdtczqTransmit2_bytes$def = internal constant %Main_zdtczqTransmit2_bytes_struct<{[10 x i8] [i8 39, i8 84, i8 114, i8 97, i8 110, i8 115, i8 109, i8 105, i8 116, i8 0]}>, align 1
@Main_zdtczqTransmit2_bytes = alias i8, bitcast (%Main_zdtczqTransmit2_bytes_struct* @Main_zdtczqTransmit2_bytes$def to i8*)
%Main_zdtczqTransmit1_closure_struct = type <{i64, i64}>
@Main_zdtczqTransmit1_closure$def = internal global %Main_zdtczqTransmit1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqTransmit2_bytes_struct* @Main_zdtczqTransmit2_bytes$def to i64)}>
@Main_zdtczqTransmit1_closure = alias i8, bitcast (%Main_zdtczqTransmit1_closure_struct* @Main_zdtczqTransmit1_closure$def to i8*)
%Main_zdtczqReflect3_bytes_struct = type <{[9 x i8]}>
@Main_zdtczqReflect3_bytes$def = internal constant %Main_zdtczqReflect3_bytes_struct<{[9 x i8] [i8 39, i8 82, i8 101, i8 102, i8 108, i8 101, i8 99, i8 116, i8 0]}>, align 1
@Main_zdtczqReflect3_bytes = alias i8, bitcast (%Main_zdtczqReflect3_bytes_struct* @Main_zdtczqReflect3_bytes$def to i8*)
%Main_zdtczqReflect2_closure_struct = type <{i64, i64}>
@Main_zdtczqReflect2_closure$def = internal global %Main_zdtczqReflect2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqReflect3_bytes_struct* @Main_zdtczqReflect3_bytes$def to i64)}>
@Main_zdtczqReflect2_closure = alias i8, bitcast (%Main_zdtczqReflect2_closure_struct* @Main_zdtczqReflect2_closure$def to i8*)
%Main_zdtczqSpecpow2_bytes_struct = type <{[9 x i8]}>
@Main_zdtczqSpecpow2_bytes$def = internal constant %Main_zdtczqSpecpow2_bytes_struct<{[9 x i8] [i8 39, i8 83, i8 112, i8 101, i8 99, i8 112, i8 111, i8 119, i8 0]}>, align 1
@Main_zdtczqSpecpow2_bytes = alias i8, bitcast (%Main_zdtczqSpecpow2_bytes_struct* @Main_zdtczqSpecpow2_bytes$def to i8*)
%Main_zdtczqSpecpow1_closure_struct = type <{i64, i64}>
@Main_zdtczqSpecpow1_closure$def = internal global %Main_zdtczqSpecpow1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqSpecpow2_bytes_struct* @Main_zdtczqSpecpow2_bytes$def to i64)}>
@Main_zdtczqSpecpow1_closure = alias i8, bitcast (%Main_zdtczqSpecpow1_closure_struct* @Main_zdtczqSpecpow1_closure$def to i8*)
%Main_zdtczqBody2_bytes_struct = type <{[6 x i8]}>
@Main_zdtczqBody2_bytes$def = internal constant %Main_zdtczqBody2_bytes_struct<{[6 x i8] [i8 39, i8 66, i8 111, i8 100, i8 121, i8 0]}>, align 1
@Main_zdtczqBody2_bytes = alias i8, bitcast (%Main_zdtczqBody2_bytes_struct* @Main_zdtczqBody2_bytes$def to i8*)
%Main_zdtczqBody1_closure_struct = type <{i64, i64}>
@Main_zdtczqBody1_closure$def = internal global %Main_zdtczqBody1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqBody2_bytes_struct* @Main_zdtczqBody2_bytes$def to i64)}>
@Main_zdtczqBody1_closure = alias i8, bitcast (%Main_zdtczqBody1_closure_struct* @Main_zdtczqBody1_closure$def to i8*)
%Main_zdtczqSpecular2_bytes_struct = type <{[10 x i8]}>
@Main_zdtczqSpecular2_bytes$def = internal constant %Main_zdtczqSpecular2_bytes_struct<{[10 x i8] [i8 39, i8 83, i8 112, i8 101, i8 99, i8 117, i8 108, i8 97, i8 114, i8 0]}>, align 1
@Main_zdtczqSpecular2_bytes = alias i8, bitcast (%Main_zdtczqSpecular2_bytes_struct* @Main_zdtczqSpecular2_bytes$def to i8*)
%Main_zdtczqSpecular1_closure_struct = type <{i64, i64}>
@Main_zdtczqSpecular1_closure$def = internal global %Main_zdtczqSpecular1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqSpecular2_bytes_struct* @Main_zdtczqSpecular2_bytes$def to i64)}>
@Main_zdtczqSpecular1_closure = alias i8, bitcast (%Main_zdtczqSpecular1_closure_struct* @Main_zdtczqSpecular1_closure$def to i8*)
%Main_zdtczqDiffuse2_bytes_struct = type <{[9 x i8]}>
@Main_zdtczqDiffuse2_bytes$def = internal constant %Main_zdtczqDiffuse2_bytes_struct<{[9 x i8] [i8 39, i8 68, i8 105, i8 102, i8 102, i8 117, i8 115, i8 101, i8 0]}>, align 1
@Main_zdtczqDiffuse2_bytes = alias i8, bitcast (%Main_zdtczqDiffuse2_bytes_struct* @Main_zdtczqDiffuse2_bytes$def to i8*)
%Main_zdtczqDiffuse1_closure_struct = type <{i64, i64}>
@Main_zdtczqDiffuse1_closure$def = internal global %Main_zdtczqDiffuse1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqDiffuse2_bytes_struct* @Main_zdtczqDiffuse2_bytes$def to i64)}>
@Main_zdtczqDiffuse1_closure = alias i8, bitcast (%Main_zdtczqDiffuse1_closure_struct* @Main_zdtczqDiffuse1_closure$def to i8*)
%Main_zdtczqAmbient3_bytes_struct = type <{[9 x i8]}>
@Main_zdtczqAmbient3_bytes$def = internal constant %Main_zdtczqAmbient3_bytes_struct<{[9 x i8] [i8 39, i8 65, i8 109, i8 98, i8 105, i8 101, i8 110, i8 116, i8 0]}>, align 1
@Main_zdtczqAmbient3_bytes = alias i8, bitcast (%Main_zdtczqAmbient3_bytes_struct* @Main_zdtczqAmbient3_bytes$def to i8*)
%Main_zdtczqAmbient2_closure_struct = type <{i64, i64}>
@Main_zdtczqAmbient2_closure$def = internal global %Main_zdtczqAmbient2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqAmbient3_bytes_struct* @Main_zdtczqAmbient3_bytes$def to i64)}>
@Main_zdtczqAmbient2_closure = alias i8, bitcast (%Main_zdtczqAmbient2_closure_struct* @Main_zdtczqAmbient2_closure$def to i8*)
%Main_zdtcSurfspec2_bytes_struct = type <{[9 x i8]}>
@Main_zdtcSurfspec2_bytes$def = internal constant %Main_zdtcSurfspec2_bytes_struct<{[9 x i8] [i8 83, i8 117, i8 114, i8 102, i8 115, i8 112, i8 101, i8 99, i8 0]}>, align 1
@Main_zdtcSurfspec2_bytes = alias i8, bitcast (%Main_zdtcSurfspec2_bytes_struct* @Main_zdtcSurfspec2_bytes$def to i8*)
%Main_zdtcSurfspec1_closure_struct = type <{i64, i64}>
@Main_zdtcSurfspec1_closure$def = internal global %Main_zdtcSurfspec1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtcSurfspec2_bytes_struct* @Main_zdtcSurfspec2_bytes$def to i64)}>
@Main_zdtcSurfspec1_closure = alias i8, bitcast (%Main_zdtcSurfspec1_closure_struct* @Main_zdtcSurfspec1_closure$def to i8*)
%Main_zdtczqPoint2_bytes_struct = type <{[7 x i8]}>
@Main_zdtczqPoint2_bytes$def = internal constant %Main_zdtczqPoint2_bytes_struct<{[7 x i8] [i8 39, i8 80, i8 111, i8 105, i8 110, i8 116, i8 0]}>, align 1
@Main_zdtczqPoint2_bytes = alias i8, bitcast (%Main_zdtczqPoint2_bytes_struct* @Main_zdtczqPoint2_bytes$def to i8*)
%Main_zdtczqPoint1_closure_struct = type <{i64, i64}>
@Main_zdtczqPoint1_closure$def = internal global %Main_zdtczqPoint1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqPoint2_bytes_struct* @Main_zdtczqPoint2_bytes$def to i64)}>
@Main_zdtczqPoint1_closure = alias i8, bitcast (%Main_zdtczqPoint1_closure_struct* @Main_zdtczqPoint1_closure$def to i8*)
%Main_zdtczqDirectional3_bytes_struct = type <{[13 x i8]}>
@Main_zdtczqDirectional3_bytes$def = internal constant %Main_zdtczqDirectional3_bytes_struct<{[13 x i8] [i8 39, i8 68, i8 105, i8 114, i8 101, i8 99, i8 116, i8 105, i8 111, i8 110, i8 97, i8 108, i8 0]}>, align 1
@Main_zdtczqDirectional3_bytes = alias i8, bitcast (%Main_zdtczqDirectional3_bytes_struct* @Main_zdtczqDirectional3_bytes$def to i8*)
%Main_zdtczqDirectional2_closure_struct = type <{i64, i64}>
@Main_zdtczqDirectional2_closure$def = internal global %Main_zdtczqDirectional2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtczqDirectional3_bytes_struct* @Main_zdtczqDirectional3_bytes$def to i64)}>
@Main_zdtczqDirectional2_closure = alias i8, bitcast (%Main_zdtczqDirectional2_closure_struct* @Main_zdtczqDirectional2_closure$def to i8*)
%Main_zdtcLight2_bytes_struct = type <{[6 x i8]}>
@Main_zdtcLight2_bytes$def = internal constant %Main_zdtcLight2_bytes_struct<{[6 x i8] [i8 76, i8 105, i8 103, i8 104, i8 116, i8 0]}>, align 1
@Main_zdtcLight2_bytes = alias i8, bitcast (%Main_zdtcLight2_bytes_struct* @Main_zdtcLight2_bytes$def to i8*)
%Main_zdtcLight1_closure_struct = type <{i64, i64}>
@Main_zdtcLight1_closure$def = internal global %Main_zdtcLight1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtcLight2_bytes_struct* @Main_zdtcLight2_bytes$def to i64)}>
@Main_zdtcLight1_closure = alias i8, bitcast (%Main_zdtcLight1_closure_struct* @Main_zdtcLight1_closure$def to i8*)
%r7mo_closure_struct = type <{i64, i64, i64, i64}>
@r7mo_closure$def = internal global %r7mo_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_zdtcDouble_closure to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7mo_closure = internal alias i8, bitcast (%r7mo_closure_struct* @r7mo_closure$def to i8*)
%r7mp_closure_struct = type <{i64, i64, i64, i64}>
@r7mp_closure$def = internal global %r7mp_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%r7mo_closure_struct* @r7mo_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7mp_closure = internal alias i8, bitcast (%r7mp_closure_struct* @r7mp_closure$def to i8*)
%r7mq_closure_struct = type <{i64, i64, i64, i64}>
@r7mq_closure$def = internal global %r7mq_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%r7mo_closure_struct* @r7mo_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mp_closure_struct* @r7mp_closure$def to i64),i64 2), i64 3}>
@r7mq_closure = internal alias i8, bitcast (%r7mq_closure_struct* @r7mq_closure$def to i8*)
%r7mr_closure_struct = type <{i64, i64, i64, i64}>
@r7mr_closure$def = internal global %r7mr_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%r7mo_closure_struct* @r7mo_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mq_closure_struct* @r7mq_closure$def to i64),i64 2), i64 3}>
@r7mr_closure = internal alias i8, bitcast (%r7mr_closure_struct* @r7mr_closure$def to i8*)
%r7ms_closure_struct = type <{i64, i64, i64, i64}>
@r7ms_closure$def = internal global %r7ms_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTuple_zdtcZLz2cUz2cUZR_closure to i64),i64 1), i64 add (i64 ptrtoint (%r7mr_closure_struct* @r7mr_closure$def to i64),i64 2), i64 3}>
@r7ms_closure = internal alias i8, bitcast (%r7ms_closure_struct* @r7ms_closure$def to i8*)
%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)
%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)
%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)
%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)
%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)
%Main_zdtcLight_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtcLight_closure$def = internal global %Main_zdtcLight_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtcLight1_closure_struct* @Main_zdtcLight1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_krepzdzt_closure to i64),i64 5), i64 6412344619272839963, i64 -355233376336288665, i64 0, i64 3}>
@Main_zdtcLight_closure = alias i8, bitcast (%Main_zdtcLight_closure_struct* @Main_zdtcLight_closure$def to i8*)
%r7mt_closure_struct = type <{i64, i64, i64, i64}>
@r7mt_closure$def = internal global %r7mt_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtcLight_closure_struct* @Main_zdtcLight_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7mt_closure = internal alias i8, bitcast (%r7mt_closure_struct* @r7mt_closure$def to i8*)
%r7mu_closure_struct = type <{i64, i64, i64, i64}>
@r7mu_closure$def = internal global %r7mu_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7ms_closure_struct* @r7ms_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mt_closure_struct* @r7mt_closure$def to i64),i64 1), i64 3}>
@r7mu_closure = internal alias i8, bitcast (%r7mu_closure_struct* @r7mu_closure$def to i8*)
%Main_zdtczqDirectional1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqDirectional1_closure$def = internal global %Main_zdtczqDirectional1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7ms_closure_struct* @r7ms_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mu_closure_struct* @r7mu_closure$def to i64),i64 4), i64 3}>
@Main_zdtczqDirectional1_closure = alias i8, bitcast (%Main_zdtczqDirectional1_closure_struct* @Main_zdtczqDirectional1_closure$def to i8*)
%Main_zdtczqDirectional_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqDirectional_closure$def = internal global %Main_zdtczqDirectional_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqDirectional2_closure_struct* @Main_zdtczqDirectional2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqDirectional1_closure_struct* @Main_zdtczqDirectional1_closure$def to i64),i64 4), i64 3876454671273116553, i64 -8486283743441182762, i64 0, i64 3}>
@Main_zdtczqDirectional_closure = alias i8, bitcast (%Main_zdtczqDirectional_closure_struct* @Main_zdtczqDirectional_closure$def to i8*)
%Main_zdtczqPoint_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqPoint_closure$def = internal global %Main_zdtczqPoint_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqPoint1_closure_struct* @Main_zdtczqPoint1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqDirectional1_closure_struct* @Main_zdtczqDirectional1_closure$def to i64),i64 4), i64 -2167238921680478116, i64 7140802812436523503, i64 0, i64 3}>
@Main_zdtczqPoint_closure = alias i8, bitcast (%Main_zdtczqPoint_closure_struct* @Main_zdtczqPoint_closure$def to i8*)
%Main_zdtcSurfspec_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtcSurfspec_closure$def = internal global %Main_zdtcSurfspec_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtcSurfspec1_closure_struct* @Main_zdtcSurfspec1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_krepzdzt_closure to i64),i64 5), i64 -2775287109087494745, i64 2213904662461041098, i64 0, i64 3}>
@Main_zdtcSurfspec_closure = alias i8, bitcast (%Main_zdtcSurfspec_closure_struct* @Main_zdtcSurfspec_closure$def to i8*)
%r7mv_closure_struct = type <{i64, i64, i64, i64}>
@r7mv_closure$def = internal global %r7mv_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtcSurfspec_closure_struct* @Main_zdtcSurfspec_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7mv_closure = internal alias i8, bitcast (%r7mv_closure_struct* @r7mv_closure$def to i8*)
%Main_zdtczqAmbient1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqAmbient1_closure$def = internal global %Main_zdtczqAmbient1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7ms_closure_struct* @r7ms_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mv_closure_struct* @r7mv_closure$def to i64),i64 1), i64 3}>
@Main_zdtczqAmbient1_closure = alias i8, bitcast (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i8*)
%Main_zdtczqReflect1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqReflect1_closure$def = internal global %Main_zdtczqReflect1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7mo_closure_struct* @r7mo_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mv_closure_struct* @r7mv_closure$def to i64),i64 1), i64 3}>
@Main_zdtczqReflect1_closure = alias i8, bitcast (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i8*)
%r7mw_closure_struct = type <{i64, i64, i64, i64}>
@r7mw_closure$def = internal global %r7mw_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%r7mv_closure_struct* @r7mv_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7mw_closure = internal alias i8, bitcast (%r7mw_closure_struct* @r7mw_closure$def to i8*)
%r7mx_closure_struct = type <{i64, i64, i64, i64}>
@r7mx_closure$def = internal global %r7mx_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_zdtcZMZN_closure to i64),i64 1), i64 add (i64 ptrtoint (%r7mw_closure_struct* @r7mw_closure$def to i64),i64 2), i64 3}>
@r7mx_closure = internal alias i8, bitcast (%r7mx_closure_struct* @r7mx_closure$def to i8*)
%Main_zdtczqAmbient_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqAmbient_closure$def = internal global %Main_zdtczqAmbient_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqAmbient2_closure_struct* @Main_zdtczqAmbient2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i64),i64 4), i64 -1813543712634430064, i64 1403391612386348360, i64 0, i64 3}>
@Main_zdtczqAmbient_closure = alias i8, bitcast (%Main_zdtczqAmbient_closure_struct* @Main_zdtczqAmbient_closure$def to i8*)
%Main_zdtczqDiffuse_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqDiffuse_closure$def = internal global %Main_zdtczqDiffuse_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqDiffuse1_closure_struct* @Main_zdtczqDiffuse1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i64),i64 4), i64 1483603326772202226, i64 -8734422184109016527, i64 0, i64 3}>
@Main_zdtczqDiffuse_closure = alias i8, bitcast (%Main_zdtczqDiffuse_closure_struct* @Main_zdtczqDiffuse_closure$def to i8*)
%Main_zdtczqSpecular_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqSpecular_closure$def = internal global %Main_zdtczqSpecular_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqSpecular1_closure_struct* @Main_zdtczqSpecular1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i64),i64 4), i64 -7976991352756099709, i64 -7901709929637604861, i64 0, i64 3}>
@Main_zdtczqSpecular_closure = alias i8, bitcast (%Main_zdtczqSpecular_closure_struct* @Main_zdtczqSpecular_closure$def to i8*)
%Main_zdtczqBody_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqBody_closure$def = internal global %Main_zdtczqBody_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqBody1_closure_struct* @Main_zdtczqBody1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i64),i64 4), i64 2585923215485964160, i64 -3878006186137867375, i64 0, i64 3}>
@Main_zdtczqBody_closure = alias i8, bitcast (%Main_zdtczqBody_closure_struct* @Main_zdtczqBody_closure$def to i8*)
%Main_zdtczqSpecpow_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqSpecpow_closure$def = internal global %Main_zdtczqSpecpow_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqSpecpow1_closure_struct* @Main_zdtczqSpecpow1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i64),i64 4), i64 4353289867329766058, i64 4617460656137534758, i64 0, i64 3}>
@Main_zdtczqSpecpow_closure = alias i8, bitcast (%Main_zdtczqSpecpow_closure_struct* @Main_zdtczqSpecpow_closure$def to i8*)
%Main_zdtczqReflect_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqReflect_closure$def = internal global %Main_zdtczqReflect_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqReflect2_closure_struct* @Main_zdtczqReflect2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i64),i64 4), i64 4233469672258615562, i64 -7778268596695797165, i64 0, i64 3}>
@Main_zdtczqReflect_closure = alias i8, bitcast (%Main_zdtczqReflect_closure_struct* @Main_zdtczqReflect_closure$def to i8*)
%Main_zdtczqTransmit_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqTransmit_closure$def = internal global %Main_zdtczqTransmit_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqTransmit1_closure_struct* @Main_zdtczqTransmit1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i64),i64 4), i64 9198839858977273341, i64 -3075041177291697812, i64 0, i64 3}>
@Main_zdtczqTransmit_closure = alias i8, bitcast (%Main_zdtczqTransmit_closure_struct* @Main_zdtczqTransmit_closure$def to i8*)
%Main_zdtczqRefract_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqRefract_closure$def = internal global %Main_zdtczqRefract_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqRefract1_closure_struct* @Main_zdtczqRefract1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i64),i64 4), i64 -8318549329350580483, i64 -6978335019592962980, i64 0, i64 3}>
@Main_zdtczqRefract_closure = alias i8, bitcast (%Main_zdtczqRefract_closure_struct* @Main_zdtczqRefract_closure$def to i8*)
%Main_zdtcSphere_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtcSphere_closure$def = internal global %Main_zdtcSphere_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtcSphere1_closure_struct* @Main_zdtcSphere1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_krepzdzt_closure to i64),i64 5), i64 -1658357811151431516, i64 5278588684051321090, i64 0, i64 3}>
@Main_zdtcSphere_closure = alias i8, bitcast (%Main_zdtcSphere_closure_struct* @Main_zdtcSphere_closure$def to i8*)
%r7my_closure_struct = type <{i64, i64, i64, i64}>
@r7my_closure$def = internal global %r7my_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepTyConApp_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtcSphere_closure_struct* @Main_zdtcSphere_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@r7my_closure = internal alias i8, bitcast (%r7my_closure_struct* @r7my_closure$def to i8*)
%r7mz_closure_struct = type <{i64, i64, i64, i64}>
@r7mz_closure$def = internal global %r7mz_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7mx_closure_struct* @r7mx_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7my_closure_struct* @r7my_closure$def to i64),i64 1), i64 3}>
@r7mz_closure = internal alias i8, bitcast (%r7mz_closure_struct* @r7mz_closure$def to i8*)
%r7mA_closure_struct = type <{i64, i64, i64, i64}>
@r7mA_closure$def = internal global %r7mA_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7mo_closure_struct* @r7mo_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mz_closure_struct* @r7mz_closure$def to i64),i64 4), i64 3}>
@r7mA_closure = internal alias i8, bitcast (%r7mA_closure_struct* @r7mA_closure$def to i8*)
%Main_zdtczqSphere1_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtczqSphere1_closure$def = internal global %Main_zdtczqSphere1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_KindRepFun_con_info to i64), i64 add (i64 ptrtoint (%r7ms_closure_struct* @r7ms_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r7mA_closure_struct* @r7mA_closure$def to i64),i64 4), i64 3}>
@Main_zdtczqSphere1_closure = alias i8, bitcast (%Main_zdtczqSphere1_closure_struct* @Main_zdtczqSphere1_closure$def to i8*)
%Main_zdtczqSphere_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_zdtczqSphere_closure$def = internal global %Main_zdtczqSphere_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqSphere2_closure_struct* @Main_zdtczqSphere2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtczqSphere1_closure_struct* @Main_zdtczqSphere1_closure$def to i64),i64 4), i64 -1263405766196768112, i64 1986039327047388195, i64 0, i64 3}>
@Main_zdtczqSphere_closure = alias i8, bitcast (%Main_zdtczqSphere_closure_struct* @Main_zdtczqSphere_closure$def to i8*)
%Main_background1_closure_struct = type <{i64, double}>
@Main_background1_closure$def = internal global %Main_background1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE8189374BC6A7F}>
@Main_background1_closure = alias i8, bitcast (%Main_background1_closure_struct* @Main_background1_closure$def to i8*)
%Main_background2_closure_struct = type <{i64, double}>
@Main_background2_closure$def = internal global %Main_background2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD71A9FBE76C8B4}>
@Main_background2_closure = alias i8, bitcast (%Main_background2_closure_struct* @Main_background2_closure$def to i8*)
%Main_background3_closure_struct = type <{i64, double}>
@Main_background3_closure$def = internal global %Main_background3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FB3F7CED916872B}>
@Main_background3_closure = alias i8, bitcast (%Main_background3_closure_struct* @Main_background3_closure$def to i8*)
%Main_background_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_background_closure$def = internal global %Main_background_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_background3_closure_struct* @Main_background3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_background2_closure_struct* @Main_background2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_background1_closure_struct* @Main_background1_closure$def to i64),i64 1), i64 3}>
@Main_background_closure = alias i8, bitcast (%Main_background_closure_struct* @Main_background_closure$def to i8*)
%Main_lookfrom1_closure_struct = type <{i64, double}>
@Main_lookfrom1_closure$def = internal global %Main_lookfrom1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FFB333333333333}>
@Main_lookfrom1_closure = alias i8, bitcast (%Main_lookfrom1_closure_struct* @Main_lookfrom1_closure$def to i8*)
%Main_lookfrom2_closure_struct = type <{i64, double}>
@Main_lookfrom2_closure$def = internal global %Main_lookfrom2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FF4CCCCCCCCCCCD}>
@Main_lookfrom2_closure = alias i8, bitcast (%Main_lookfrom2_closure_struct* @Main_lookfrom2_closure$def to i8*)
%Main_lookfrom3_closure_struct = type <{i64, double}>
@Main_lookfrom3_closure$def = internal global %Main_lookfrom3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4000CCCCCCCCCCCD}>
@Main_lookfrom3_closure = alias i8, bitcast (%Main_lookfrom3_closure_struct* @Main_lookfrom3_closure$def to i8*)
%Main_lookfrom_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_lookfrom_closure$def = internal global %Main_lookfrom_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookfrom3_closure_struct* @Main_lookfrom3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookfrom2_closure_struct* @Main_lookfrom2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookfrom1_closure_struct* @Main_lookfrom1_closure$def to i64),i64 1), i64 3}>
@Main_lookfrom_closure = alias i8, bitcast (%Main_lookfrom_closure_struct* @Main_lookfrom_closure$def to i8*)
%Main_testlights16_closure_struct = type <{i64, double}>
@Main_testlights16_closure$def = internal global %Main_testlights16_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4008000000000000}>
@Main_testlights16_closure = alias i8, bitcast (%Main_testlights16_closure_struct* @Main_testlights16_closure$def to i8*)
%Main_s8_closure_struct = type <{i64, i64, i64}>
@Main_s8_closure$def = internal global %Main_s8_closure_struct<{i64 ptrtoint (i8* @Main_Specpow_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights16_closure_struct* @Main_testlights16_closure$def to i64),i64 1), i64 3}>
@Main_s8_closure = alias i8, bitcast (%Main_s8_closure_struct* @Main_s8_closure$def to i8*)
%Main_testlights14_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testlights14_closure$def = internal global %Main_testlights14_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights11_closure_struct* @Main_testlights11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights16_closure_struct* @Main_testlights16_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights15_closure_struct* @Main_testlights15_closure$def to i64),i64 1), i64 3}>
@Main_testlights14_closure = alias i8, bitcast (%Main_testlights14_closure_struct* @Main_testlights14_closure$def to i8*)
%Main_testlights13_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights13_closure$def = internal global %Main_testlights13_closure_struct<{i64 ptrtoint (i8* @Main_Point_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights14_closure_struct* @Main_testlights14_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights4_closure_struct* @Main_testlights4_closure$def to i64),i64 1), i64 3}>
@Main_testlights13_closure = alias i8, bitcast (%Main_testlights13_closure_struct* @Main_testlights13_closure$def to i8*)
%Main_s13_closure_struct = type <{i64, double}>
@Main_s13_closure$def = internal global %Main_s13_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD6666666666666}>
@Main_s13_closure = alias i8, bitcast (%Main_s13_closure_struct* @Main_s13_closure$def to i8*)
%Main_s14_closure_struct = type <{i64, double}>
@Main_s14_closure$def = internal global %Main_s14_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FDCCCCCCCCCCCCD}>
@Main_s14_closure = alias i8, bitcast (%Main_s14_closure_struct* @Main_s14_closure$def to i8*)
%Main_s7_closure_struct = type <{i64, double}>
@Main_s7_closure$def = internal global %Main_s7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE0000000000000}>
@Main_s7_closure = alias i8, bitcast (%Main_s7_closure_struct* @Main_s7_closure$def to i8*)
%Main_s12_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_s12_closure$def = internal global %Main_s12_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_s7_closure_struct* @Main_s7_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s14_closure_struct* @Main_s14_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s13_closure_struct* @Main_s13_closure$def to i64),i64 1), i64 3}>
@Main_s12_closure = alias i8, bitcast (%Main_s12_closure_struct* @Main_s12_closure$def to i8*)
%Main_s11_closure_struct = type <{i64, i64, i64}>
@Main_s11_closure$def = internal global %Main_s11_closure_struct<{i64 ptrtoint (i8* @Main_Diffuse_con_info to i64), i64 add (i64 ptrtoint (%Main_s12_closure_struct* @Main_s12_closure$def to i64),i64 1), i64 3}>
@Main_s11_closure = alias i8, bitcast (%Main_s11_closure_struct* @Main_s11_closure$def to i8*)
%Main_s6_closure_struct = type <{i64, i64, i64}>
@Main_s6_closure$def = internal global %Main_s6_closure_struct<{i64 ptrtoint (i8* @Main_Reflect_con_info to i64), i64 add (i64 ptrtoint (%Main_s7_closure_struct* @Main_s7_closure$def to i64),i64 1), i64 3}>
@Main_s6_closure = alias i8, bitcast (%Main_s6_closure_struct* @Main_s6_closure$def to i8*)
%Main_s5_closure_struct = type <{i64, i64, i64, i64}>
@Main_s5_closure$def = internal global %Main_s5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_s6_closure_struct* @Main_s6_closure$def to i64),i64 5), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_s5_closure = alias i8, bitcast (%Main_s5_closure_struct* @Main_s5_closure$def to i8*)
%Main_s4_closure_struct = type <{i64, i64, i64, i64}>
@Main_s4_closure$def = internal global %Main_s4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_s8_closure_struct* @Main_s8_closure$def to i64),i64 4), i64 add (i64 ptrtoint (%Main_s5_closure_struct* @Main_s5_closure$def to i64),i64 2), i64 3}>
@Main_s4_closure = alias i8, bitcast (%Main_s4_closure_struct* @Main_s4_closure$def to i8*)
%Main_s17_closure_struct = type <{i64, double}>
@Main_s17_closure$def = internal global %Main_s17_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3F9999999999999A}>
@Main_s17_closure = alias i8, bitcast (%Main_s17_closure_struct* @Main_s17_closure$def to i8*)
%Main_s18_closure_struct = type <{i64, double}>
@Main_s18_closure$def = internal global %Main_s18_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FA0A3D70A3D70A4}>
@Main_s18_closure = alias i8, bitcast (%Main_s18_closure_struct* @Main_s18_closure$def to i8*)
%Main_s19_closure_struct = type <{i64, double}>
@Main_s19_closure$def = internal global %Main_s19_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FA1EB851EB851EC}>
@Main_s19_closure = alias i8, bitcast (%Main_s19_closure_struct* @Main_s19_closure$def to i8*)
%Main_s16_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_s16_closure$def = internal global %Main_s16_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_s19_closure_struct* @Main_s19_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s18_closure_struct* @Main_s18_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s17_closure_struct* @Main_s17_closure$def to i64),i64 1), i64 3}>
@Main_s16_closure = alias i8, bitcast (%Main_s16_closure_struct* @Main_s16_closure$def to i8*)
%Main_s15_closure_struct = type <{i64, i64, i64}>
@Main_s15_closure$def = internal global %Main_s15_closure_struct<{i64 ptrtoint (i8* @Main_Ambient_con_info to i64), i64 add (i64 ptrtoint (%Main_s16_closure_struct* @Main_s16_closure$def to i64),i64 1), i64 3}>
@Main_s15_closure = alias i8, bitcast (%Main_s15_closure_struct* @Main_s15_closure$def to i8*)
%Main_redsurf5_closure_struct = type <{i64, double}>
@Main_redsurf5_closure$def = internal global %Main_redsurf5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE6666666666666}>
@Main_redsurf5_closure = alias i8, bitcast (%Main_redsurf5_closure_struct* @Main_redsurf5_closure$def to i8*)
%Main_redsurf4_closure_struct = type <{i64, i64, i64}>
@Main_redsurf4_closure$def = internal global %Main_redsurf4_closure_struct<{i64 ptrtoint (i8* @Main_Transmit_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf5_closure_struct* @Main_redsurf5_closure$def to i64),i64 1), i64 3}>
@Main_redsurf4_closure = alias i8, bitcast (%Main_redsurf4_closure_struct* @Main_redsurf4_closure$def to i8*)
%Main_redsurf3_closure_struct = type <{i64, i64, i64, i64}>
@Main_redsurf3_closure$def = internal global %Main_redsurf3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf4_closure_struct* @Main_redsurf4_closure$def to i64),i64 6), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_redsurf3_closure = alias i8, bitcast (%Main_redsurf3_closure_struct* @Main_redsurf3_closure$def to i8*)
%Main_bluesurf6_closure_struct = type <{i64, double}>
@Main_bluesurf6_closure$def = internal global %Main_bluesurf6_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD999999999999A}>
@Main_bluesurf6_closure = alias i8, bitcast (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i8*)
%Main_bluesurf5_closure_struct = type <{i64, double}>
@Main_bluesurf5_closure$def = internal global %Main_bluesurf5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FE999999999999A}>
@Main_bluesurf5_closure = alias i8, bitcast (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i8*)
%Main_redsurf7_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_redsurf7_closure$def = internal global %Main_redsurf7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 3}>
@Main_redsurf7_closure = alias i8, bitcast (%Main_redsurf7_closure_struct* @Main_redsurf7_closure$def to i8*)
%Main_redsurf6_closure_struct = type <{i64, i64, i64}>
@Main_redsurf6_closure$def = internal global %Main_redsurf6_closure_struct<{i64 ptrtoint (i8* @Main_Specular_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf7_closure_struct* @Main_redsurf7_closure$def to i64),i64 1), i64 3}>
@Main_redsurf6_closure = alias i8, bitcast (%Main_redsurf6_closure_struct* @Main_redsurf6_closure$def to i8*)
%Main_redsurf2_closure_struct = type <{i64, i64, i64, i64}>
@Main_redsurf2_closure$def = internal global %Main_redsurf2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf6_closure_struct* @Main_redsurf6_closure$def to i64),i64 3), i64 add (i64 ptrtoint (%Main_redsurf3_closure_struct* @Main_redsurf3_closure$def to i64),i64 2), i64 3}>
@Main_redsurf2_closure = alias i8, bitcast (%Main_redsurf2_closure_struct* @Main_redsurf2_closure$def to i8*)
%Main_greensurf4_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_greensurf4_closure$def = internal global %Main_greensurf4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 3}>
@Main_greensurf4_closure = alias i8, bitcast (%Main_greensurf4_closure_struct* @Main_greensurf4_closure$def to i8*)
%Main_greensurf3_closure_struct = type <{i64, i64, i64}>
@Main_greensurf3_closure$def = internal global %Main_greensurf3_closure_struct<{i64 ptrtoint (i8* @Main_Specular_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf4_closure_struct* @Main_greensurf4_closure$def to i64),i64 1), i64 3}>
@Main_greensurf3_closure = alias i8, bitcast (%Main_greensurf3_closure_struct* @Main_greensurf3_closure$def to i8*)
%Main_greensurf2_closure_struct = type <{i64, i64, i64, i64}>
@Main_greensurf2_closure$def = internal global %Main_greensurf2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf3_closure_struct* @Main_greensurf3_closure$def to i64),i64 3), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_greensurf2_closure = alias i8, bitcast (%Main_greensurf2_closure_struct* @Main_greensurf2_closure$def to i8*)
%Main_bluesurf4_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_bluesurf4_closure$def = internal global %Main_bluesurf4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf4_closure = alias i8, bitcast (%Main_bluesurf4_closure_struct* @Main_bluesurf4_closure$def to i8*)
%Main_bluesurf3_closure_struct = type <{i64, i64, i64}>
@Main_bluesurf3_closure$def = internal global %Main_bluesurf3_closure_struct<{i64 ptrtoint (i8* @Main_Specular_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf4_closure_struct* @Main_bluesurf4_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf3_closure = alias i8, bitcast (%Main_bluesurf3_closure_struct* @Main_bluesurf3_closure$def to i8*)
%Main_bluesurf2_closure_struct = type <{i64, i64, i64, i64}>
@Main_bluesurf2_closure$def = internal global %Main_bluesurf2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf3_closure_struct* @Main_bluesurf3_closure$def to i64),i64 3), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_bluesurf2_closure = alias i8, bitcast (%Main_bluesurf2_closure_struct* @Main_bluesurf2_closure$def to i8*)
%Main_s10_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_s10_closure$def = internal global %Main_s10_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i64),i64 1), i64 3}>
@Main_s10_closure = alias i8, bitcast (%Main_s10_closure_struct* @Main_s10_closure$def to i8*)
%Main_s9_closure_struct = type <{i64, i64, i64}>
@Main_s9_closure$def = internal global %Main_s9_closure_struct<{i64 ptrtoint (i8* @Main_Specular_con_info to i64), i64 add (i64 ptrtoint (%Main_s10_closure_struct* @Main_s10_closure$def to i64),i64 1), i64 3}>
@Main_s9_closure = alias i8, bitcast (%Main_s9_closure_struct* @Main_s9_closure$def to i8*)
%Main_s3_closure_struct = type <{i64, i64, i64, i64}>
@Main_s3_closure$def = internal global %Main_s3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_s9_closure_struct* @Main_s9_closure$def to i64),i64 3), i64 add (i64 ptrtoint (%Main_s4_closure_struct* @Main_s4_closure$def to i64),i64 2), i64 3}>
@Main_s3_closure = alias i8, bitcast (%Main_s3_closure_struct* @Main_s3_closure$def to i8*)
%Main_s1_closure_struct = type <{i64, i64, i64, i64}>
@Main_s1_closure$def = internal global %Main_s1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_s11_closure_struct* @Main_s11_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_s3_closure_struct* @Main_s3_closure$def to i64),i64 2), i64 3}>
@Main_s1_closure = alias i8, bitcast (%Main_s1_closure_struct* @Main_s1_closure$def to i8*)
%Main_s2_closure_struct = type <{i64, i64, i64, i64}>
@Main_s2_closure$def = internal global %Main_s2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_s15_closure_struct* @Main_s15_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s1_closure_struct* @Main_s1_closure$def to i64),i64 2), i64 3}>
@Main_s2_closure = alias i8, bitcast (%Main_s2_closure_struct* @Main_s2_closure$def to i8*)
%Main_testspheres36_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres36_closure$def = internal global %Main_testspheres36_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres37_closure_struct* @Main_testspheres37_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres36_closure = alias i8, bitcast (%Main_testspheres36_closure_struct* @Main_testspheres36_closure$def to i8*)
%Main_testspheres28_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres28_closure$def = internal global %Main_testspheres28_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres29_closure_struct* @Main_testspheres29_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres28_closure = alias i8, bitcast (%Main_testspheres28_closure_struct* @Main_testspheres28_closure$def to i8*)
%Main_testspheres19_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres19_closure$def = internal global %Main_testspheres19_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres20_closure_struct* @Main_testspheres20_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres19_closure = alias i8, bitcast (%Main_testspheres19_closure_struct* @Main_testspheres19_closure$def to i8*)
%Main_bluesurf9_closure_struct = type <{i64, double}>
@Main_bluesurf9_closure$def = internal global %Main_bluesurf9_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FD3333333333333}>
@Main_bluesurf9_closure = alias i8, bitcast (%Main_bluesurf9_closure_struct* @Main_bluesurf9_closure$def to i8*)
%Main_bluesurf12_closure_struct = type <{i64, double}>
@Main_bluesurf12_closure$def = internal global %Main_bluesurf12_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FB999999999999A}>
@Main_bluesurf12_closure = alias i8, bitcast (%Main_bluesurf12_closure_struct* @Main_bluesurf12_closure$def to i8*)
%Main_fov_closure_struct = type <{i64, double}>
@Main_fov_closure$def = internal global %Main_fov_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4046800000000000}>
@Main_fov_closure = alias i8, bitcast (%Main_fov_closure_struct* @Main_fov_closure$def to i8*)
%Main_spheresurf_closure_struct = type <{i64}>
@Main_spheresurf_closure$def = internal global %Main_spheresurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_spheresurf_info$def to i64)}>
@Main_spheresurf_closure = alias i8, bitcast (%Main_spheresurf_closure_struct* @Main_spheresurf_closure$def to i8*)
@Main_spheresurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_spheresurf_info$def to i8*)
define ghccc void @Main_spheresurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbkO:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbkH
cbkH:
  %lnbkP = load i64*, i64** %Sp_Var
  %lnbkQ = getelementptr inbounds i64, i64* %lnbkP, i32 -1
  %lnbkR = ptrtoint i64* %lnbkQ to i64
  %lnbkS = icmp ult i64 %lnbkR, %SpLim_Arg
  %lnbkT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbkS, i1 0 )
  br i1 %lnbkT, label %cbkI, label %cbkJ
cbkJ:
  %lnbkV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to i64
  %lnbkU = load i64*, i64** %Sp_Var
  %lnbkW = getelementptr inbounds i64, i64* %lnbkU, i32 -1
  store i64 %lnbkV, i64* %lnbkW, !tbaa !2
  %lnbkX = load i64, i64* %R2_Var
  store i64 %lnbkX, i64* %R1_Var
  %lnbkY = load i64*, i64** %Sp_Var
  %lnbkZ = getelementptr inbounds i64, i64* %lnbkY, i32 -1
  %lnbl0 = ptrtoint i64* %lnbkZ to i64
  %lnbl1 = inttoptr i64 %lnbl0 to i64*
  store i64* %lnbl1, i64** %Sp_Var
  %lnbl2 = load i64, i64* %R1_Var
  %lnbl3 = and i64 %lnbl2, 7
  %lnbl4 = icmp ne i64 %lnbl3, 0
  br i1 %lnbl4, label %ubkN, label %cbkF
cbkF:
  %lnbl6 = load i64, i64* %R1_Var
  %lnbl7 = inttoptr i64 %lnbl6 to i64*
  %lnbl8 = load i64, i64* %lnbl7, !tbaa !4
  %lnbl9 = inttoptr i64 %lnbl8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbla = load i64*, i64** %Sp_Var
  %lnblb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbl9( i64* %Base_Arg, i64* %lnbla, i64* %Hp_Arg, i64 %lnblb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubkN:
  %lnblc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbld = load i64*, i64** %Sp_Var
  %lnble = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnblc( i64* %Base_Arg, i64* %lnbld, i64* %Hp_Arg, i64 %lnble, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkI:
  %lnblf = load i64, i64* %R2_Var
  store i64 %lnblf, i64* %R2_Var
  %lnblg = ptrtoint %Main_spheresurf_closure_struct* @Main_spheresurf_closure$def to i64
  store i64 %lnblg, i64* %R1_Var
  %lnblh = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbli = bitcast i64* %lnblh to i64*
  %lnblj = load i64, i64* %lnbli, !tbaa !5
  %lnblk = inttoptr i64 %lnblj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbll = load i64*, i64** %Sp_Var
  %lnblm = load i64, i64* %R1_Var
  %lnbln = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnblk( i64* %Base_Arg, i64* %lnbll, i64* %Hp_Arg, i64 %lnblm, i64 %lnbln, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbkE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to i8*)
define internal ghccc void @cbkE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nblo:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbkE
cbkE:
  %lnblr = load i64, i64* %R1_Var
  %lnbls = add i64 %lnblr, 23
  %lnblt = inttoptr i64 %lnbls to i64*
  %lnblu = load i64, i64* %lnblt, !tbaa !4
  %lnblv = and i64 %lnblu, -8
  store i64 %lnblv, i64* %R1_Var
  %lnblw = load i64*, i64** %Sp_Var
  %lnblx = getelementptr inbounds i64, i64* %lnblw, i32 1
  %lnbly = ptrtoint i64* %lnblx to i64
  %lnblz = inttoptr i64 %lnbly to i64*
  store i64* %lnblz, i64** %Sp_Var
  %lnblB = load i64, i64* %R1_Var
  %lnblC = inttoptr i64 %lnblB to i64*
  %lnblD = load i64, i64* %lnblC, !tbaa !4
  %lnblE = inttoptr i64 %lnblD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnblF = load i64*, i64** %Sp_Var
  %lnblG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnblE( i64* %Base_Arg, i64* %lnblF, i64* %Hp_Arg, i64 %lnblG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_bodysurf2_closure_struct = type <{i64, double}>
@Main_bodysurf2_closure$def = internal global %Main_bodysurf2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3FF0000000000000}>
@Main_bodysurf2_closure = alias i8, bitcast (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i8*)
%r7mm_closure_struct = type <{i64}>
@r7mm_closure$def = internal global %r7mm_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mm_info$def to i64)}>
@r7mm_closure = internal alias i8, bitcast (%r7mm_closure_struct* @r7mm_closure$def to i8*)
@r7mm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mm_info$def to i8*)
define internal ghccc void @r7mm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbmk:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cblS
cblS:
  %lnbml = load i64*, i64** %Sp_Var
  %lnbmm = getelementptr inbounds i64, i64* %lnbml, i32 -2
  %lnbmn = ptrtoint i64* %lnbmm to i64
  %lnbmo = icmp ult i64 %lnbmn, %SpLim_Arg
  %lnbmp = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbmo, i1 0 )
  br i1 %lnbmp, label %cblT, label %ubme
ubme:
  %lnbmr = load i64, i64* %R2_Var
  %lnbmq = load i64*, i64** %Sp_Var
  %lnbms = getelementptr inbounds i64, i64* %lnbmq, i32 -1
  store i64 %lnbmr, i64* %lnbms, !tbaa !2
  %lnbmt = load i64*, i64** %Sp_Var
  %lnbmu = getelementptr inbounds i64, i64* %lnbmt, i32 -1
  %lnbmv = ptrtoint i64* %lnbmu to i64
  %lnbmw = inttoptr i64 %lnbmv to i64*
  store i64* %lnbmw, i64** %Sp_Var
  %lnbmx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cblI$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmy = load i64*, i64** %Sp_Var
  %lnbmz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmx( i64* %Base_Arg, i64* %lnbmy, i64* %Hp_Arg, i64 %lnbmz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cblT:
  %lnbmA = load i64, i64* %R2_Var
  store i64 %lnbmA, i64* %R2_Var
  %lnbmB = ptrtoint %r7mm_closure_struct* @r7mm_closure$def to i64
  store i64 %lnbmB, i64* %R1_Var
  %lnbmC = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbmD = bitcast i64* %lnbmC to i64*
  %lnbmE = load i64, i64* %lnbmD, !tbaa !5
  %lnbmF = inttoptr i64 %lnbmE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmG = load i64*, i64** %Sp_Var
  %lnbmH = load i64, i64* %R1_Var
  %lnbmI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmF( i64* %Base_Arg, i64* %lnbmG, i64* %Hp_Arg, i64 %lnbmH, i64 %lnbmI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cblI = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cblI$def to i8*)
define internal ghccc void @_cblI$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbmJ:
  %ls7pq = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cblI
cblI:
  %lnbmK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbmL = bitcast i64* %lnbmK to i64*
  %lnbmM = load i64, i64* %lnbmL, !tbaa !2
  store i64 %lnbmM, i64* %ls7pq
  %lnbmN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cblL_info$def to i64
  %lnbmO = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbmN, i64* %lnbmO, !tbaa !2
  %lnbmP = load i64, i64* %ls7pq
  store i64 %lnbmP, i64* %R1_Var
  %lnbmQ = load i64, i64* %R1_Var
  %lnbmR = and i64 %lnbmQ, 7
  %lnbmS = icmp ne i64 %lnbmR, 0
  br i1 %lnbmS, label %ubmg, label %cblM
cblM:
  %lnbmU = load i64, i64* %R1_Var
  %lnbmV = inttoptr i64 %lnbmU to i64*
  %lnbmW = load i64, i64* %lnbmV, !tbaa !4
  %lnbmX = inttoptr i64 %lnbmW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbmY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubmg:
  %lnbmZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cblL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbn0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbn0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cblL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cblL_info$def to i8*)
define internal ghccc void @cblL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbn1:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7pt = alloca i64, i32 1
  br label %cblL
cblL:
  %lnbn2 = load i64, i64* %R1_Var
  %lnbn3 = and i64 %lnbn2, 7
  switch i64 %lnbn3, label %cblP [i64 1, label %cblP
i64 2, label %cblQ]
cblP:
  %lnbn4 = ptrtoint %Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64
  %lnbn5 = add i64 %lnbn4, 1
  store i64 %lnbn5, i64* %R1_Var
  %lnbn6 = load i64*, i64** %Sp_Var
  %lnbn7 = getelementptr inbounds i64, i64* %lnbn6, i32 1
  %lnbn8 = ptrtoint i64* %lnbn7 to i64
  %lnbn9 = inttoptr i64 %lnbn8 to i64*
  store i64* %lnbn9, i64** %Sp_Var
  %lnbna = load i64*, i64** %Sp_Var
  %lnbnb = getelementptr inbounds i64, i64* %lnbna, i32 0
  %lnbnc = bitcast i64* %lnbnb to i64*
  %lnbnd = load i64, i64* %lnbnc, !tbaa !2
  %lnbne = inttoptr i64 %lnbnd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnf = load i64*, i64** %Sp_Var
  %lnbng = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbne( i64* %Base_Arg, i64* %lnbnf, i64* %Hp_Arg, i64 %lnbng, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cblQ:
  %lnbni = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbm0_info$def to i64
  %lnbnh = load i64*, i64** %Sp_Var
  %lnbnj = getelementptr inbounds i64, i64* %lnbnh, i32 -1
  store i64 %lnbni, i64* %lnbnj, !tbaa !2
  %lnbnm = load i64, i64* %R1_Var
  %lnbnn = add i64 %lnbnm, 14
  %lnbno = inttoptr i64 %lnbnn to i64*
  %lnbnp = load i64, i64* %lnbno, !tbaa !4
  store i64 %lnbnp, i64* %ls7pt
  %lnbns = load i64, i64* %R1_Var
  %lnbnt = add i64 %lnbns, 6
  %lnbnu = inttoptr i64 %lnbnt to i64*
  %lnbnv = load i64, i64* %lnbnu, !tbaa !4
  store i64 %lnbnv, i64* %R1_Var
  %lnbnx = load i64, i64* %ls7pt
  %lnbnw = load i64*, i64** %Sp_Var
  %lnbny = getelementptr inbounds i64, i64* %lnbnw, i32 0
  store i64 %lnbnx, i64* %lnbny, !tbaa !2
  %lnbnz = load i64*, i64** %Sp_Var
  %lnbnA = getelementptr inbounds i64, i64* %lnbnz, i32 -1
  %lnbnB = ptrtoint i64* %lnbnA to i64
  %lnbnC = inttoptr i64 %lnbnB to i64*
  store i64* %lnbnC, i64** %Sp_Var
  %lnbnD = load i64, i64* %R1_Var
  %lnbnE = and i64 %lnbnD, 7
  %lnbnF = icmp ne i64 %lnbnE, 0
  br i1 %lnbnF, label %ubmh, label %cbm2
cbm2:
  %lnbnH = load i64, i64* %R1_Var
  %lnbnI = inttoptr i64 %lnbnH to i64*
  %lnbnJ = load i64, i64* %lnbnI, !tbaa !4
  %lnbnK = inttoptr i64 %lnbnJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnL = load i64*, i64** %Sp_Var
  %lnbnM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnK( i64* %Base_Arg, i64* %lnbnL, i64* %Hp_Arg, i64 %lnbnM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubmh:
  %lnbnN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbm0_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnO = load i64*, i64** %Sp_Var
  %lnbnP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnN( i64* %Base_Arg, i64* %lnbnO, i64* %Hp_Arg, i64 %lnbnP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbm0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbm0_info$def to i8*)
define internal ghccc void @cbm0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbnQ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbm0
cbm0:
  %lnbnR = load i64, i64* %R1_Var
  %lnbnS = and i64 %lnbnR, -8
  %lnbnT = inttoptr i64 %lnbnS to i64*
  %lnbnU = load i64, i64* %lnbnT, !tbaa !1
  %lnbnV = add i64 %lnbnU, -4
  %lnbnW = inttoptr i64 %lnbnV to i32*
  %lnbnX = load i32, i32* %lnbnW, !tbaa !1
  %lnbnY = zext i32 %lnbnX to i64
  switch i64 %lnbnY, label %cbm8 [i64 6, label %cbmc]
cbm8:
  %lnbo0 = load i64*, i64** %Sp_Var
  %lnbo1 = getelementptr inbounds i64, i64* %lnbo0, i32 1
  %lnbo2 = bitcast i64* %lnbo1 to i64*
  %lnbo3 = load i64, i64* %lnbo2, !tbaa !2
  %lnbnZ = load i64*, i64** %Sp_Var
  %lnbo4 = getelementptr inbounds i64, i64* %lnbnZ, i32 1
  store i64 %lnbo3, i64* %lnbo4, !tbaa !2
  %lnbo5 = load i64*, i64** %Sp_Var
  %lnbo6 = getelementptr inbounds i64, i64* %lnbo5, i32 1
  %lnbo7 = ptrtoint i64* %lnbo6 to i64
  %lnbo8 = inttoptr i64 %lnbo7 to i64*
  store i64* %lnbo8, i64** %Sp_Var
  %lnbo9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cblI$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboa = load i64*, i64** %Sp_Var
  %lnbob = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbo9( i64* %Base_Arg, i64* %lnboa, i64* %Hp_Arg, i64 %lnbob, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbmc:
  %lnboe = load i64, i64* %R1_Var
  %lnbof = add i64 %lnboe, 1
  %lnbog = inttoptr i64 %lnbof to i64*
  %lnboh = load i64, i64* %lnbog, !tbaa !4
  %lnboi = and i64 %lnboh, -8
  store i64 %lnboi, i64* %R1_Var
  %lnboj = load i64*, i64** %Sp_Var
  %lnbok = getelementptr inbounds i64, i64* %lnboj, i32 2
  %lnbol = ptrtoint i64* %lnbok to i64
  %lnbom = inttoptr i64 %lnbol to i64*
  store i64* %lnbom, i64** %Sp_Var
  %lnboo = load i64, i64* %R1_Var
  %lnbop = inttoptr i64 %lnboo to i64*
  %lnboq = load i64, i64* %lnbop, !tbaa !4
  %lnbor = inttoptr i64 %lnboq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbos = load i64*, i64** %Sp_Var
  %lnbot = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbor( i64* %Base_Arg, i64* %lnbos, i64* %Hp_Arg, i64 %lnbot, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_refractsurf_closure_struct = type <{i64}>
@Main_refractsurf_closure$def = internal global %Main_refractsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_refractsurf_info$def to i64)}>
@Main_refractsurf_closure = alias i8, bitcast (%Main_refractsurf_closure_struct* @Main_refractsurf_closure$def to i8*)
@Main_refractsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_refractsurf_info$def to i8*)
define ghccc void @Main_refractsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nboB:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cboy
cboy:
  %lnboC = load i64, i64* %R2_Var
  store i64 %lnboC, i64* %R2_Var
  %lnboD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnboE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_bodysurf1_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_bodysurf1_closure$def = internal global %Main_bodysurf1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 3}>
@Main_bodysurf1_closure = alias i8, bitcast (%Main_bodysurf1_closure_struct* @Main_bodysurf1_closure$def to i8*)
%r7mn_closure_struct = type <{i64}>
@r7mn_closure$def = internal global %r7mn_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mn_info$def to i64)}>
@r7mn_closure = internal alias i8, bitcast (%r7mn_closure_struct* @r7mn_closure$def to i8*)
@r7mn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mn_info$def to i8*)
define internal ghccc void @r7mn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbpi:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cboQ
cboQ:
  %lnbpj = load i64*, i64** %Sp_Var
  %lnbpk = getelementptr inbounds i64, i64* %lnbpj, i32 -2
  %lnbpl = ptrtoint i64* %lnbpk to i64
  %lnbpm = icmp ult i64 %lnbpl, %SpLim_Arg
  %lnbpn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbpm, i1 0 )
  br i1 %lnbpn, label %cboR, label %ubpc
ubpc:
  %lnbpp = load i64, i64* %R2_Var
  %lnbpo = load i64*, i64** %Sp_Var
  %lnbpq = getelementptr inbounds i64, i64* %lnbpo, i32 -1
  store i64 %lnbpp, i64* %lnbpq, !tbaa !2
  %lnbpr = load i64*, i64** %Sp_Var
  %lnbps = getelementptr inbounds i64, i64* %lnbpr, i32 -1
  %lnbpt = ptrtoint i64* %lnbps to i64
  %lnbpu = inttoptr i64 %lnbpt to i64*
  store i64* %lnbpu, i64** %Sp_Var
  %lnbpv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cboG$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpw = load i64*, i64** %Sp_Var
  %lnbpx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpv( i64* %Base_Arg, i64* %lnbpw, i64* %Hp_Arg, i64 %lnbpx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cboR:
  %lnbpy = load i64, i64* %R2_Var
  store i64 %lnbpy, i64* %R2_Var
  %lnbpz = ptrtoint %r7mn_closure_struct* @r7mn_closure$def to i64
  store i64 %lnbpz, i64* %R1_Var
  %lnbpA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbpB = bitcast i64* %lnbpA to i64*
  %lnbpC = load i64, i64* %lnbpB, !tbaa !5
  %lnbpD = inttoptr i64 %lnbpC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpE = load i64*, i64** %Sp_Var
  %lnbpF = load i64, i64* %R1_Var
  %lnbpG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpD( i64* %Base_Arg, i64* %lnbpE, i64* %Hp_Arg, i64 %lnbpF, i64 %lnbpG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cboG = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cboG$def to i8*)
define internal ghccc void @_cboG$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbpH:
  %ls7px = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cboG
cboG:
  %lnbpI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbpJ = bitcast i64* %lnbpI to i64*
  %lnbpK = load i64, i64* %lnbpJ, !tbaa !2
  store i64 %lnbpK, i64* %ls7px
  %lnbpL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboJ_info$def to i64
  %lnbpM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbpL, i64* %lnbpM, !tbaa !2
  %lnbpN = load i64, i64* %ls7px
  store i64 %lnbpN, i64* %R1_Var
  %lnbpO = load i64, i64* %R1_Var
  %lnbpP = and i64 %lnbpO, 7
  %lnbpQ = icmp ne i64 %lnbpP, 0
  br i1 %lnbpQ, label %ubpe, label %cboK
cboK:
  %lnbpS = load i64, i64* %R1_Var
  %lnbpT = inttoptr i64 %lnbpS to i64*
  %lnbpU = load i64, i64* %lnbpT, !tbaa !4
  %lnbpV = inttoptr i64 %lnbpU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbpW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubpe:
  %lnbpX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbpY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cboJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboJ_info$def to i8*)
define internal ghccc void @cboJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbpZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7pA = alloca i64, i32 1
  br label %cboJ
cboJ:
  %lnbq0 = load i64, i64* %R1_Var
  %lnbq1 = and i64 %lnbq0, 7
  switch i64 %lnbq1, label %cboN [i64 1, label %cboN
i64 2, label %cboO]
cboN:
  %lnbq2 = ptrtoint %Main_bodysurf1_closure_struct* @Main_bodysurf1_closure$def to i64
  %lnbq3 = add i64 %lnbq2, 1
  store i64 %lnbq3, i64* %R1_Var
  %lnbq4 = load i64*, i64** %Sp_Var
  %lnbq5 = getelementptr inbounds i64, i64* %lnbq4, i32 1
  %lnbq6 = ptrtoint i64* %lnbq5 to i64
  %lnbq7 = inttoptr i64 %lnbq6 to i64*
  store i64* %lnbq7, i64** %Sp_Var
  %lnbq8 = load i64*, i64** %Sp_Var
  %lnbq9 = getelementptr inbounds i64, i64* %lnbq8, i32 0
  %lnbqa = bitcast i64* %lnbq9 to i64*
  %lnbqb = load i64, i64* %lnbqa, !tbaa !2
  %lnbqc = inttoptr i64 %lnbqb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqd = load i64*, i64** %Sp_Var
  %lnbqe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqc( i64* %Base_Arg, i64* %lnbqd, i64* %Hp_Arg, i64 %lnbqe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cboO:
  %lnbqg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboY_info$def to i64
  %lnbqf = load i64*, i64** %Sp_Var
  %lnbqh = getelementptr inbounds i64, i64* %lnbqf, i32 -1
  store i64 %lnbqg, i64* %lnbqh, !tbaa !2
  %lnbqk = load i64, i64* %R1_Var
  %lnbql = add i64 %lnbqk, 14
  %lnbqm = inttoptr i64 %lnbql to i64*
  %lnbqn = load i64, i64* %lnbqm, !tbaa !4
  store i64 %lnbqn, i64* %ls7pA
  %lnbqq = load i64, i64* %R1_Var
  %lnbqr = add i64 %lnbqq, 6
  %lnbqs = inttoptr i64 %lnbqr to i64*
  %lnbqt = load i64, i64* %lnbqs, !tbaa !4
  store i64 %lnbqt, i64* %R1_Var
  %lnbqv = load i64, i64* %ls7pA
  %lnbqu = load i64*, i64** %Sp_Var
  %lnbqw = getelementptr inbounds i64, i64* %lnbqu, i32 0
  store i64 %lnbqv, i64* %lnbqw, !tbaa !2
  %lnbqx = load i64*, i64** %Sp_Var
  %lnbqy = getelementptr inbounds i64, i64* %lnbqx, i32 -1
  %lnbqz = ptrtoint i64* %lnbqy to i64
  %lnbqA = inttoptr i64 %lnbqz to i64*
  store i64* %lnbqA, i64** %Sp_Var
  %lnbqB = load i64, i64* %R1_Var
  %lnbqC = and i64 %lnbqB, 7
  %lnbqD = icmp ne i64 %lnbqC, 0
  br i1 %lnbqD, label %ubpf, label %cbp0
cbp0:
  %lnbqF = load i64, i64* %R1_Var
  %lnbqG = inttoptr i64 %lnbqF to i64*
  %lnbqH = load i64, i64* %lnbqG, !tbaa !4
  %lnbqI = inttoptr i64 %lnbqH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqJ = load i64*, i64** %Sp_Var
  %lnbqK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqI( i64* %Base_Arg, i64* %lnbqJ, i64* %Hp_Arg, i64 %lnbqK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubpf:
  %lnbqL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqM = load i64*, i64** %Sp_Var
  %lnbqN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqL( i64* %Base_Arg, i64* %lnbqM, i64* %Hp_Arg, i64 %lnbqN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cboY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cboY_info$def to i8*)
define internal ghccc void @cboY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbqO:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cboY
cboY:
  %lnbqP = load i64, i64* %R1_Var
  %lnbqQ = and i64 %lnbqP, -8
  %lnbqR = inttoptr i64 %lnbqQ to i64*
  %lnbqS = load i64, i64* %lnbqR, !tbaa !1
  %lnbqT = add i64 %lnbqS, -4
  %lnbqU = inttoptr i64 %lnbqT to i32*
  %lnbqV = load i32, i32* %lnbqU, !tbaa !1
  %lnbqW = zext i32 %lnbqV to i64
  switch i64 %lnbqW, label %cbp6 [i64 7, label %cbpa]
cbp6:
  %lnbqY = load i64*, i64** %Sp_Var
  %lnbqZ = getelementptr inbounds i64, i64* %lnbqY, i32 1
  %lnbr0 = bitcast i64* %lnbqZ to i64*
  %lnbr1 = load i64, i64* %lnbr0, !tbaa !2
  %lnbqX = load i64*, i64** %Sp_Var
  %lnbr2 = getelementptr inbounds i64, i64* %lnbqX, i32 1
  store i64 %lnbr1, i64* %lnbr2, !tbaa !2
  %lnbr3 = load i64*, i64** %Sp_Var
  %lnbr4 = getelementptr inbounds i64, i64* %lnbr3, i32 1
  %lnbr5 = ptrtoint i64* %lnbr4 to i64
  %lnbr6 = inttoptr i64 %lnbr5 to i64*
  store i64* %lnbr6, i64** %Sp_Var
  %lnbr7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cboG$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbr8 = load i64*, i64** %Sp_Var
  %lnbr9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbr7( i64* %Base_Arg, i64* %lnbr8, i64* %Hp_Arg, i64 %lnbr9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbpa:
  %lnbrc = load i64, i64* %R1_Var
  %lnbrd = add i64 %lnbrc, 1
  %lnbre = inttoptr i64 %lnbrd to i64*
  %lnbrf = load i64, i64* %lnbre, !tbaa !4
  %lnbrg = and i64 %lnbrf, -8
  store i64 %lnbrg, i64* %R1_Var
  %lnbrh = load i64*, i64** %Sp_Var
  %lnbri = getelementptr inbounds i64, i64* %lnbrh, i32 2
  %lnbrj = ptrtoint i64* %lnbri to i64
  %lnbrk = inttoptr i64 %lnbrj to i64*
  store i64* %lnbrk, i64** %Sp_Var
  %lnbrm = load i64, i64* %R1_Var
  %lnbrn = inttoptr i64 %lnbrm to i64*
  %lnbro = load i64, i64* %lnbrn, !tbaa !4
  %lnbrp = inttoptr i64 %lnbro to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbrq = load i64*, i64** %Sp_Var
  %lnbrr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbrp( i64* %Base_Arg, i64* %lnbrq, i64* %Hp_Arg, i64 %lnbrr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_bodysurf_closure_struct = type <{i64}>
@Main_bodysurf_closure$def = internal global %Main_bodysurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_bodysurf_info$def to i64)}>
@Main_bodysurf_closure = alias i8, bitcast (%Main_bodysurf_closure_struct* @Main_bodysurf_closure$def to i8*)
@Main_bodysurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_bodysurf_info$def to i8*)
define ghccc void @Main_bodysurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbrz:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbrw
cbrw:
  %lnbrA = load i64, i64* %R2_Var
  store i64 %lnbrA, i64* %R2_Var
  %lnbrB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbrC = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbrB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbrC, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_testlights10_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testlights10_closure$def = internal global %Main_testlights10_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights12_closure_struct* @Main_testlights12_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights11_closure_struct* @Main_testlights11_closure$def to i64),i64 1), i64 3}>
@Main_testlights10_closure = alias i8, bitcast (%Main_testlights10_closure_struct* @Main_testlights10_closure$def to i8*)
%Main_testlights9_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights9_closure$def = internal global %Main_testlights9_closure_struct<{i64 ptrtoint (i8* @Main_Point_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights10_closure_struct* @Main_testlights10_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights4_closure_struct* @Main_testlights4_closure$def to i64),i64 1), i64 3}>
@Main_testlights9_closure = alias i8, bitcast (%Main_testlights9_closure_struct* @Main_testlights9_closure$def to i8*)
%Main_testlights6_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testlights6_closure$def = internal global %Main_testlights6_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights8_closure_struct* @Main_testlights8_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights7_closure_struct* @Main_testlights7_closure$def to i64),i64 1), i64 3}>
@Main_testlights6_closure = alias i8, bitcast (%Main_testlights6_closure_struct* @Main_testlights6_closure$def to i8*)
%Main_testlights3_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights3_closure$def = internal global %Main_testlights3_closure_struct<{i64 ptrtoint (i8* @Main_Point_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights6_closure_struct* @Main_testlights6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testlights4_closure_struct* @Main_testlights4_closure$def to i64),i64 1), i64 3}>
@Main_testlights3_closure = alias i8, bitcast (%Main_testlights3_closure_struct* @Main_testlights3_closure$def to i8*)
%Main_testlights2_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights2_closure$def = internal global %Main_testlights2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights3_closure_struct* @Main_testlights3_closure$def to i64),i64 2), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_testlights2_closure = alias i8, bitcast (%Main_testlights2_closure_struct* @Main_testlights2_closure$def to i8*)
%Main_testlights1_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights1_closure$def = internal global %Main_testlights1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights9_closure_struct* @Main_testlights9_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_testlights2_closure_struct* @Main_testlights2_closure$def to i64),i64 2), i64 3}>
@Main_testlights1_closure = alias i8, bitcast (%Main_testlights1_closure_struct* @Main_testlights1_closure$def to i8*)
%Main_testlights_closure_struct = type <{i64, i64, i64, i64}>
@Main_testlights_closure$def = internal global %Main_testlights_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testlights13_closure_struct* @Main_testlights13_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_testlights1_closure_struct* @Main_testlights1_closure$def to i64),i64 2), i64 3}>
@Main_testlights_closure = alias i8, bitcast (%Main_testlights_closure_struct* @Main_testlights_closure$def to i8*)
%Main_specpowsurf1_closure_struct = type <{i64, double}>
@Main_specpowsurf1_closure$def = internal global %Main_specpowsurf1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4020000000000000}>
@Main_specpowsurf1_closure = alias i8, bitcast (%Main_specpowsurf1_closure_struct* @Main_specpowsurf1_closure$def to i8*)
%r7mj_closure_struct = type <{i64}>
@r7mj_closure$def = internal global %r7mj_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mj_info$def to i64)}>
@r7mj_closure = internal alias i8, bitcast (%r7mj_closure_struct* @r7mj_closure$def to i8*)
@r7mj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mj_info$def to i8*)
define internal ghccc void @r7mj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbsg:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbrO
cbrO:
  %lnbsh = load i64*, i64** %Sp_Var
  %lnbsi = getelementptr inbounds i64, i64* %lnbsh, i32 -2
  %lnbsj = ptrtoint i64* %lnbsi to i64
  %lnbsk = icmp ult i64 %lnbsj, %SpLim_Arg
  %lnbsl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbsk, i1 0 )
  br i1 %lnbsl, label %cbrP, label %ubsa
ubsa:
  %lnbsn = load i64, i64* %R2_Var
  %lnbsm = load i64*, i64** %Sp_Var
  %lnbso = getelementptr inbounds i64, i64* %lnbsm, i32 -1
  store i64 %lnbsn, i64* %lnbso, !tbaa !2
  %lnbsp = load i64*, i64** %Sp_Var
  %lnbsq = getelementptr inbounds i64, i64* %lnbsp, i32 -1
  %lnbsr = ptrtoint i64* %lnbsq to i64
  %lnbss = inttoptr i64 %lnbsr to i64*
  store i64* %lnbss, i64** %Sp_Var
  %lnbst = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbrE$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbsu = load i64*, i64** %Sp_Var
  %lnbsv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbst( i64* %Base_Arg, i64* %lnbsu, i64* %Hp_Arg, i64 %lnbsv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbrP:
  %lnbsw = load i64, i64* %R2_Var
  store i64 %lnbsw, i64* %R2_Var
  %lnbsx = ptrtoint %r7mj_closure_struct* @r7mj_closure$def to i64
  store i64 %lnbsx, i64* %R1_Var
  %lnbsy = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbsz = bitcast i64* %lnbsy to i64*
  %lnbsA = load i64, i64* %lnbsz, !tbaa !5
  %lnbsB = inttoptr i64 %lnbsA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbsC = load i64*, i64** %Sp_Var
  %lnbsD = load i64, i64* %R1_Var
  %lnbsE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbsB( i64* %Base_Arg, i64* %lnbsC, i64* %Hp_Arg, i64 %lnbsD, i64 %lnbsE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbrE = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbrE$def to i8*)
define internal ghccc void @_cbrE$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbsF:
  %ls7p5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbrE
cbrE:
  %lnbsG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbsH = bitcast i64* %lnbsG to i64*
  %lnbsI = load i64, i64* %lnbsH, !tbaa !2
  store i64 %lnbsI, i64* %ls7p5
  %lnbsJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrH_info$def to i64
  %lnbsK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbsJ, i64* %lnbsK, !tbaa !2
  %lnbsL = load i64, i64* %ls7p5
  store i64 %lnbsL, i64* %R1_Var
  %lnbsM = load i64, i64* %R1_Var
  %lnbsN = and i64 %lnbsM, 7
  %lnbsO = icmp ne i64 %lnbsN, 0
  br i1 %lnbsO, label %ubsc, label %cbrI
cbrI:
  %lnbsQ = load i64, i64* %R1_Var
  %lnbsR = inttoptr i64 %lnbsQ to i64*
  %lnbsS = load i64, i64* %lnbsR, !tbaa !4
  %lnbsT = inttoptr i64 %lnbsS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbsU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbsT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbsU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubsc:
  %lnbsV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbsW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbsV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbsW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbrH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrH_info$def to i8*)
define internal ghccc void @cbrH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbsX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7p8 = alloca i64, i32 1
  br label %cbrH
cbrH:
  %lnbsY = load i64, i64* %R1_Var
  %lnbsZ = and i64 %lnbsY, 7
  switch i64 %lnbsZ, label %cbrL [i64 1, label %cbrL
i64 2, label %cbrM]
cbrL:
  %lnbt0 = ptrtoint %Main_specpowsurf1_closure_struct* @Main_specpowsurf1_closure$def to i64
  %lnbt1 = add i64 %lnbt0, 1
  store i64 %lnbt1, i64* %R1_Var
  %lnbt2 = load i64*, i64** %Sp_Var
  %lnbt3 = getelementptr inbounds i64, i64* %lnbt2, i32 1
  %lnbt4 = ptrtoint i64* %lnbt3 to i64
  %lnbt5 = inttoptr i64 %lnbt4 to i64*
  store i64* %lnbt5, i64** %Sp_Var
  %lnbt6 = load i64*, i64** %Sp_Var
  %lnbt7 = getelementptr inbounds i64, i64* %lnbt6, i32 0
  %lnbt8 = bitcast i64* %lnbt7 to i64*
  %lnbt9 = load i64, i64* %lnbt8, !tbaa !2
  %lnbta = inttoptr i64 %lnbt9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtb = load i64*, i64** %Sp_Var
  %lnbtc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbta( i64* %Base_Arg, i64* %lnbtb, i64* %Hp_Arg, i64 %lnbtc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbrM:
  %lnbte = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrW_info$def to i64
  %lnbtd = load i64*, i64** %Sp_Var
  %lnbtf = getelementptr inbounds i64, i64* %lnbtd, i32 -1
  store i64 %lnbte, i64* %lnbtf, !tbaa !2
  %lnbti = load i64, i64* %R1_Var
  %lnbtj = add i64 %lnbti, 14
  %lnbtk = inttoptr i64 %lnbtj to i64*
  %lnbtl = load i64, i64* %lnbtk, !tbaa !4
  store i64 %lnbtl, i64* %ls7p8
  %lnbto = load i64, i64* %R1_Var
  %lnbtp = add i64 %lnbto, 6
  %lnbtq = inttoptr i64 %lnbtp to i64*
  %lnbtr = load i64, i64* %lnbtq, !tbaa !4
  store i64 %lnbtr, i64* %R1_Var
  %lnbtt = load i64, i64* %ls7p8
  %lnbts = load i64*, i64** %Sp_Var
  %lnbtu = getelementptr inbounds i64, i64* %lnbts, i32 0
  store i64 %lnbtt, i64* %lnbtu, !tbaa !2
  %lnbtv = load i64*, i64** %Sp_Var
  %lnbtw = getelementptr inbounds i64, i64* %lnbtv, i32 -1
  %lnbtx = ptrtoint i64* %lnbtw to i64
  %lnbty = inttoptr i64 %lnbtx to i64*
  store i64* %lnbty, i64** %Sp_Var
  %lnbtz = load i64, i64* %R1_Var
  %lnbtA = and i64 %lnbtz, 7
  %lnbtB = icmp ne i64 %lnbtA, 0
  br i1 %lnbtB, label %ubsd, label %cbrY
cbrY:
  %lnbtD = load i64, i64* %R1_Var
  %lnbtE = inttoptr i64 %lnbtD to i64*
  %lnbtF = load i64, i64* %lnbtE, !tbaa !4
  %lnbtG = inttoptr i64 %lnbtF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtH = load i64*, i64** %Sp_Var
  %lnbtI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtG( i64* %Base_Arg, i64* %lnbtH, i64* %Hp_Arg, i64 %lnbtI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubsd:
  %lnbtJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtK = load i64*, i64** %Sp_Var
  %lnbtL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtJ( i64* %Base_Arg, i64* %lnbtK, i64* %Hp_Arg, i64 %lnbtL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbrW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbrW_info$def to i8*)
define internal ghccc void @cbrW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbtM:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbrW
cbrW:
  %lnbtN = load i64, i64* %R1_Var
  %lnbtO = and i64 %lnbtN, 7
  switch i64 %lnbtO, label %cbs4 [i64 4, label %cbs8]
cbs4:
  %lnbtQ = load i64*, i64** %Sp_Var
  %lnbtR = getelementptr inbounds i64, i64* %lnbtQ, i32 1
  %lnbtS = bitcast i64* %lnbtR to i64*
  %lnbtT = load i64, i64* %lnbtS, !tbaa !2
  %lnbtP = load i64*, i64** %Sp_Var
  %lnbtU = getelementptr inbounds i64, i64* %lnbtP, i32 1
  store i64 %lnbtT, i64* %lnbtU, !tbaa !2
  %lnbtV = load i64*, i64** %Sp_Var
  %lnbtW = getelementptr inbounds i64, i64* %lnbtV, i32 1
  %lnbtX = ptrtoint i64* %lnbtW to i64
  %lnbtY = inttoptr i64 %lnbtX to i64*
  store i64* %lnbtY, i64** %Sp_Var
  %lnbtZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbrE$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbu0 = load i64*, i64** %Sp_Var
  %lnbu1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtZ( i64* %Base_Arg, i64* %lnbu0, i64* %Hp_Arg, i64 %lnbu1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbs8:
  %lnbu4 = load i64, i64* %R1_Var
  %lnbu5 = add i64 %lnbu4, 4
  %lnbu6 = inttoptr i64 %lnbu5 to i64*
  %lnbu7 = load i64, i64* %lnbu6, !tbaa !4
  %lnbu8 = and i64 %lnbu7, -8
  store i64 %lnbu8, i64* %R1_Var
  %lnbu9 = load i64*, i64** %Sp_Var
  %lnbua = getelementptr inbounds i64, i64* %lnbu9, i32 2
  %lnbub = ptrtoint i64* %lnbua to i64
  %lnbuc = inttoptr i64 %lnbub to i64*
  store i64* %lnbuc, i64** %Sp_Var
  %lnbue = load i64, i64* %R1_Var
  %lnbuf = inttoptr i64 %lnbue to i64*
  %lnbug = load i64, i64* %lnbuf, !tbaa !4
  %lnbuh = inttoptr i64 %lnbug to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbui = load i64*, i64** %Sp_Var
  %lnbuj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbuh( i64* %Base_Arg, i64* %lnbui, i64* %Hp_Arg, i64 %lnbuj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_specpowsurf_closure_struct = type <{i64}>
@Main_specpowsurf_closure$def = internal global %Main_specpowsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_specpowsurf_info$def to i64)}>
@Main_specpowsurf_closure = alias i8, bitcast (%Main_specpowsurf_closure_struct* @Main_specpowsurf_closure$def to i8*)
@Main_specpowsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_specpowsurf_info$def to i8*)
define ghccc void @Main_specpowsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbur:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbuo
cbuo:
  %lnbus = load i64, i64* %R2_Var
  store i64 %lnbus, i64* %R2_Var
  %lnbut = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbuu = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbut( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbuu, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lookat1_closure_struct = type <{i64, double}>
@Main_lookat1_closure$def = internal global %Main_lookat1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x0000000000000000}>
@Main_lookat1_closure = alias i8, bitcast (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i8*)
%Main_lookat_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_lookat_closure$def = internal global %Main_lookat_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_lookat_closure = alias i8, bitcast (%Main_lookat_closure_struct* @Main_lookat_closure$def to i8*)
%r7mg_closure_struct = type <{i64}>
@r7mg_closure$def = internal global %r7mg_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mg_info$def to i64)}>
@r7mg_closure = internal alias i8, bitcast (%r7mg_closure_struct* @r7mg_closure$def to i8*)
@r7mg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mg_info$def to i8*)
define internal ghccc void @r7mg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbv8:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbuG
cbuG:
  %lnbv9 = load i64*, i64** %Sp_Var
  %lnbva = getelementptr inbounds i64, i64* %lnbv9, i32 -2
  %lnbvb = ptrtoint i64* %lnbva to i64
  %lnbvc = icmp ult i64 %lnbvb, %SpLim_Arg
  %lnbvd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbvc, i1 0 )
  br i1 %lnbvd, label %cbuH, label %ubv2
ubv2:
  %lnbvf = load i64, i64* %R2_Var
  %lnbve = load i64*, i64** %Sp_Var
  %lnbvg = getelementptr inbounds i64, i64* %lnbve, i32 -1
  store i64 %lnbvf, i64* %lnbvg, !tbaa !2
  %lnbvh = load i64*, i64** %Sp_Var
  %lnbvi = getelementptr inbounds i64, i64* %lnbvh, i32 -1
  %lnbvj = ptrtoint i64* %lnbvi to i64
  %lnbvk = inttoptr i64 %lnbvj to i64*
  store i64* %lnbvk, i64** %Sp_Var
  %lnbvl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbuw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvm = load i64*, i64** %Sp_Var
  %lnbvn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvl( i64* %Base_Arg, i64* %lnbvm, i64* %Hp_Arg, i64 %lnbvn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbuH:
  %lnbvo = load i64, i64* %R2_Var
  store i64 %lnbvo, i64* %R2_Var
  %lnbvp = ptrtoint %r7mg_closure_struct* @r7mg_closure$def to i64
  store i64 %lnbvp, i64* %R1_Var
  %lnbvq = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbvr = bitcast i64* %lnbvq to i64*
  %lnbvs = load i64, i64* %lnbvr, !tbaa !5
  %lnbvt = inttoptr i64 %lnbvs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvu = load i64*, i64** %Sp_Var
  %lnbvv = load i64, i64* %R1_Var
  %lnbvw = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvt( i64* %Base_Arg, i64* %lnbvu, i64* %Hp_Arg, i64 %lnbvv, i64 %lnbvw, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbuw = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbuw$def to i8*)
define internal ghccc void @_cbuw$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbvx:
  %ls7oK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbuw
cbuw:
  %lnbvy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbvz = bitcast i64* %lnbvy to i64*
  %lnbvA = load i64, i64* %lnbvz, !tbaa !2
  store i64 %lnbvA, i64* %ls7oK
  %lnbvB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuz_info$def to i64
  %lnbvC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbvB, i64* %lnbvC, !tbaa !2
  %lnbvD = load i64, i64* %ls7oK
  store i64 %lnbvD, i64* %R1_Var
  %lnbvE = load i64, i64* %R1_Var
  %lnbvF = and i64 %lnbvE, 7
  %lnbvG = icmp ne i64 %lnbvF, 0
  br i1 %lnbvG, label %ubv4, label %cbuA
cbuA:
  %lnbvI = load i64, i64* %R1_Var
  %lnbvJ = inttoptr i64 %lnbvI to i64*
  %lnbvK = load i64, i64* %lnbvJ, !tbaa !4
  %lnbvL = inttoptr i64 %lnbvK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbvM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubv4:
  %lnbvN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvN( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbvO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbuz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuz_info$def to i8*)
define internal ghccc void @cbuz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbvP:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7oN = alloca i64, i32 1
  br label %cbuz
cbuz:
  %lnbvQ = load i64, i64* %R1_Var
  %lnbvR = and i64 %lnbvQ, 7
  switch i64 %lnbvR, label %cbuD [i64 1, label %cbuD
i64 2, label %cbuE]
cbuD:
  %lnbvS = ptrtoint %Main_lookat_closure_struct* @Main_lookat_closure$def to i64
  %lnbvT = add i64 %lnbvS, 1
  store i64 %lnbvT, i64* %R1_Var
  %lnbvU = load i64*, i64** %Sp_Var
  %lnbvV = getelementptr inbounds i64, i64* %lnbvU, i32 1
  %lnbvW = ptrtoint i64* %lnbvV to i64
  %lnbvX = inttoptr i64 %lnbvW to i64*
  store i64* %lnbvX, i64** %Sp_Var
  %lnbvY = load i64*, i64** %Sp_Var
  %lnbvZ = getelementptr inbounds i64, i64* %lnbvY, i32 0
  %lnbw0 = bitcast i64* %lnbvZ to i64*
  %lnbw1 = load i64, i64* %lnbw0, !tbaa !2
  %lnbw2 = inttoptr i64 %lnbw1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbw3 = load i64*, i64** %Sp_Var
  %lnbw4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbw2( i64* %Base_Arg, i64* %lnbw3, i64* %Hp_Arg, i64 %lnbw4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbuE:
  %lnbw6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuO_info$def to i64
  %lnbw5 = load i64*, i64** %Sp_Var
  %lnbw7 = getelementptr inbounds i64, i64* %lnbw5, i32 -1
  store i64 %lnbw6, i64* %lnbw7, !tbaa !2
  %lnbwa = load i64, i64* %R1_Var
  %lnbwb = add i64 %lnbwa, 14
  %lnbwc = inttoptr i64 %lnbwb to i64*
  %lnbwd = load i64, i64* %lnbwc, !tbaa !4
  store i64 %lnbwd, i64* %ls7oN
  %lnbwg = load i64, i64* %R1_Var
  %lnbwh = add i64 %lnbwg, 6
  %lnbwi = inttoptr i64 %lnbwh to i64*
  %lnbwj = load i64, i64* %lnbwi, !tbaa !4
  store i64 %lnbwj, i64* %R1_Var
  %lnbwl = load i64, i64* %ls7oN
  %lnbwk = load i64*, i64** %Sp_Var
  %lnbwm = getelementptr inbounds i64, i64* %lnbwk, i32 0
  store i64 %lnbwl, i64* %lnbwm, !tbaa !2
  %lnbwn = load i64*, i64** %Sp_Var
  %lnbwo = getelementptr inbounds i64, i64* %lnbwn, i32 -1
  %lnbwp = ptrtoint i64* %lnbwo to i64
  %lnbwq = inttoptr i64 %lnbwp to i64*
  store i64* %lnbwq, i64** %Sp_Var
  %lnbwr = load i64, i64* %R1_Var
  %lnbws = and i64 %lnbwr, 7
  %lnbwt = icmp ne i64 %lnbws, 0
  br i1 %lnbwt, label %ubv5, label %cbuQ
cbuQ:
  %lnbwv = load i64, i64* %R1_Var
  %lnbww = inttoptr i64 %lnbwv to i64*
  %lnbwx = load i64, i64* %lnbww, !tbaa !4
  %lnbwy = inttoptr i64 %lnbwx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbwz = load i64*, i64** %Sp_Var
  %lnbwA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbwy( i64* %Base_Arg, i64* %lnbwz, i64* %Hp_Arg, i64 %lnbwA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubv5:
  %lnbwB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbwC = load i64*, i64** %Sp_Var
  %lnbwD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbwB( i64* %Base_Arg, i64* %lnbwC, i64* %Hp_Arg, i64 %lnbwD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbuO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbuO_info$def to i8*)
define internal ghccc void @cbuO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbwE:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbuO
cbuO:
  %lnbwF = load i64, i64* %R1_Var
  %lnbwG = and i64 %lnbwF, 7
  switch i64 %lnbwG, label %cbuW [i64 1, label %cbv0]
cbuW:
  %lnbwI = load i64*, i64** %Sp_Var
  %lnbwJ = getelementptr inbounds i64, i64* %lnbwI, i32 1
  %lnbwK = bitcast i64* %lnbwJ to i64*
  %lnbwL = load i64, i64* %lnbwK, !tbaa !2
  %lnbwH = load i64*, i64** %Sp_Var
  %lnbwM = getelementptr inbounds i64, i64* %lnbwH, i32 1
  store i64 %lnbwL, i64* %lnbwM, !tbaa !2
  %lnbwN = load i64*, i64** %Sp_Var
  %lnbwO = getelementptr inbounds i64, i64* %lnbwN, i32 1
  %lnbwP = ptrtoint i64* %lnbwO to i64
  %lnbwQ = inttoptr i64 %lnbwP to i64*
  store i64* %lnbwQ, i64** %Sp_Var
  %lnbwR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbuw$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbwS = load i64*, i64** %Sp_Var
  %lnbwT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbwR( i64* %Base_Arg, i64* %lnbwS, i64* %Hp_Arg, i64 %lnbwT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbv0:
  %lnbwW = load i64, i64* %R1_Var
  %lnbwX = add i64 %lnbwW, 7
  %lnbwY = inttoptr i64 %lnbwX to i64*
  %lnbwZ = load i64, i64* %lnbwY, !tbaa !4
  %lnbx0 = and i64 %lnbwZ, -8
  store i64 %lnbx0, i64* %R1_Var
  %lnbx1 = load i64*, i64** %Sp_Var
  %lnbx2 = getelementptr inbounds i64, i64* %lnbx1, i32 2
  %lnbx3 = ptrtoint i64* %lnbx2 to i64
  %lnbx4 = inttoptr i64 %lnbx3 to i64*
  store i64* %lnbx4, i64** %Sp_Var
  %lnbx6 = load i64, i64* %R1_Var
  %lnbx7 = inttoptr i64 %lnbx6 to i64*
  %lnbx8 = load i64, i64* %lnbx7, !tbaa !4
  %lnbx9 = inttoptr i64 %lnbx8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbxa = load i64*, i64** %Sp_Var
  %lnbxb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbx9( i64* %Base_Arg, i64* %lnbxa, i64* %Hp_Arg, i64 %lnbxb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_ambientsurf_closure_struct = type <{i64}>
@Main_ambientsurf_closure$def = internal global %Main_ambientsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ambientsurf_info$def to i64)}>
@Main_ambientsurf_closure = alias i8, bitcast (%Main_ambientsurf_closure_struct* @Main_ambientsurf_closure$def to i8*)
@Main_ambientsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ambientsurf_info$def to i8*)
define ghccc void @Main_ambientsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbxj:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbxg
cbxg:
  %lnbxk = load i64, i64* %R2_Var
  store i64 %lnbxk, i64* %R2_Var
  %lnbxl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbxm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbxl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbxm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mh_closure_struct = type <{i64}>
@r7mh_closure$def = internal global %r7mh_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mh_info$def to i64)}>
@r7mh_closure = internal alias i8, bitcast (%r7mh_closure_struct* @r7mh_closure$def to i8*)
@r7mh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mh_info$def to i8*)
define internal ghccc void @r7mh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nby0:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbxy
cbxy:
  %lnby1 = load i64*, i64** %Sp_Var
  %lnby2 = getelementptr inbounds i64, i64* %lnby1, i32 -2
  %lnby3 = ptrtoint i64* %lnby2 to i64
  %lnby4 = icmp ult i64 %lnby3, %SpLim_Arg
  %lnby5 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnby4, i1 0 )
  br i1 %lnby5, label %cbxz, label %ubxU
ubxU:
  %lnby7 = load i64, i64* %R2_Var
  %lnby6 = load i64*, i64** %Sp_Var
  %lnby8 = getelementptr inbounds i64, i64* %lnby6, i32 -1
  store i64 %lnby7, i64* %lnby8, !tbaa !2
  %lnby9 = load i64*, i64** %Sp_Var
  %lnbya = getelementptr inbounds i64, i64* %lnby9, i32 -1
  %lnbyb = ptrtoint i64* %lnbya to i64
  %lnbyc = inttoptr i64 %lnbyb to i64*
  store i64* %lnbyc, i64** %Sp_Var
  %lnbyd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbxo$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbye = load i64*, i64** %Sp_Var
  %lnbyf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyd( i64* %Base_Arg, i64* %lnbye, i64* %Hp_Arg, i64 %lnbyf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbxz:
  %lnbyg = load i64, i64* %R2_Var
  store i64 %lnbyg, i64* %R2_Var
  %lnbyh = ptrtoint %r7mh_closure_struct* @r7mh_closure$def to i64
  store i64 %lnbyh, i64* %R1_Var
  %lnbyi = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbyj = bitcast i64* %lnbyi to i64*
  %lnbyk = load i64, i64* %lnbyj, !tbaa !5
  %lnbyl = inttoptr i64 %lnbyk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbym = load i64*, i64** %Sp_Var
  %lnbyn = load i64, i64* %R1_Var
  %lnbyo = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyl( i64* %Base_Arg, i64* %lnbym, i64* %Hp_Arg, i64 %lnbyn, i64 %lnbyo, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbxo = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbxo$def to i8*)
define internal ghccc void @_cbxo$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbyp:
  %ls7oR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbxo
cbxo:
  %lnbyq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbyr = bitcast i64* %lnbyq to i64*
  %lnbys = load i64, i64* %lnbyr, !tbaa !2
  store i64 %lnbys, i64* %ls7oR
  %lnbyt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxr_info$def to i64
  %lnbyu = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbyt, i64* %lnbyu, !tbaa !2
  %lnbyv = load i64, i64* %ls7oR
  store i64 %lnbyv, i64* %R1_Var
  %lnbyw = load i64, i64* %R1_Var
  %lnbyx = and i64 %lnbyw, 7
  %lnbyy = icmp ne i64 %lnbyx, 0
  br i1 %lnbyy, label %ubxW, label %cbxs
cbxs:
  %lnbyA = load i64, i64* %R1_Var
  %lnbyB = inttoptr i64 %lnbyA to i64*
  %lnbyC = load i64, i64* %lnbyB, !tbaa !4
  %lnbyD = inttoptr i64 %lnbyC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbyE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubxW:
  %lnbyF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbyG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbxr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxr_info$def to i8*)
define internal ghccc void @cbxr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbyH:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7oU = alloca i64, i32 1
  br label %cbxr
cbxr:
  %lnbyI = load i64, i64* %R1_Var
  %lnbyJ = and i64 %lnbyI, 7
  switch i64 %lnbyJ, label %cbxv [i64 1, label %cbxv
i64 2, label %cbxw]
cbxv:
  %lnbyK = ptrtoint %Main_lookat_closure_struct* @Main_lookat_closure$def to i64
  %lnbyL = add i64 %lnbyK, 1
  store i64 %lnbyL, i64* %R1_Var
  %lnbyM = load i64*, i64** %Sp_Var
  %lnbyN = getelementptr inbounds i64, i64* %lnbyM, i32 1
  %lnbyO = ptrtoint i64* %lnbyN to i64
  %lnbyP = inttoptr i64 %lnbyO to i64*
  store i64* %lnbyP, i64** %Sp_Var
  %lnbyQ = load i64*, i64** %Sp_Var
  %lnbyR = getelementptr inbounds i64, i64* %lnbyQ, i32 0
  %lnbyS = bitcast i64* %lnbyR to i64*
  %lnbyT = load i64, i64* %lnbyS, !tbaa !2
  %lnbyU = inttoptr i64 %lnbyT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyV = load i64*, i64** %Sp_Var
  %lnbyW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyU( i64* %Base_Arg, i64* %lnbyV, i64* %Hp_Arg, i64 %lnbyW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbxw:
  %lnbyY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxG_info$def to i64
  %lnbyX = load i64*, i64** %Sp_Var
  %lnbyZ = getelementptr inbounds i64, i64* %lnbyX, i32 -1
  store i64 %lnbyY, i64* %lnbyZ, !tbaa !2
  %lnbz2 = load i64, i64* %R1_Var
  %lnbz3 = add i64 %lnbz2, 14
  %lnbz4 = inttoptr i64 %lnbz3 to i64*
  %lnbz5 = load i64, i64* %lnbz4, !tbaa !4
  store i64 %lnbz5, i64* %ls7oU
  %lnbz8 = load i64, i64* %R1_Var
  %lnbz9 = add i64 %lnbz8, 6
  %lnbza = inttoptr i64 %lnbz9 to i64*
  %lnbzb = load i64, i64* %lnbza, !tbaa !4
  store i64 %lnbzb, i64* %R1_Var
  %lnbzd = load i64, i64* %ls7oU
  %lnbzc = load i64*, i64** %Sp_Var
  %lnbze = getelementptr inbounds i64, i64* %lnbzc, i32 0
  store i64 %lnbzd, i64* %lnbze, !tbaa !2
  %lnbzf = load i64*, i64** %Sp_Var
  %lnbzg = getelementptr inbounds i64, i64* %lnbzf, i32 -1
  %lnbzh = ptrtoint i64* %lnbzg to i64
  %lnbzi = inttoptr i64 %lnbzh to i64*
  store i64* %lnbzi, i64** %Sp_Var
  %lnbzj = load i64, i64* %R1_Var
  %lnbzk = and i64 %lnbzj, 7
  %lnbzl = icmp ne i64 %lnbzk, 0
  br i1 %lnbzl, label %ubxX, label %cbxI
cbxI:
  %lnbzn = load i64, i64* %R1_Var
  %lnbzo = inttoptr i64 %lnbzn to i64*
  %lnbzp = load i64, i64* %lnbzo, !tbaa !4
  %lnbzq = inttoptr i64 %lnbzp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbzr = load i64*, i64** %Sp_Var
  %lnbzs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbzq( i64* %Base_Arg, i64* %lnbzr, i64* %Hp_Arg, i64 %lnbzs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubxX:
  %lnbzt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbzu = load i64*, i64** %Sp_Var
  %lnbzv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbzt( i64* %Base_Arg, i64* %lnbzu, i64* %Hp_Arg, i64 %lnbzv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbxG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbxG_info$def to i8*)
define internal ghccc void @cbxG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbzw:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbxG
cbxG:
  %lnbzx = load i64, i64* %R1_Var
  %lnbzy = and i64 %lnbzx, 7
  switch i64 %lnbzy, label %cbxO [i64 2, label %cbxS]
cbxO:
  %lnbzA = load i64*, i64** %Sp_Var
  %lnbzB = getelementptr inbounds i64, i64* %lnbzA, i32 1
  %lnbzC = bitcast i64* %lnbzB to i64*
  %lnbzD = load i64, i64* %lnbzC, !tbaa !2
  %lnbzz = load i64*, i64** %Sp_Var
  %lnbzE = getelementptr inbounds i64, i64* %lnbzz, i32 1
  store i64 %lnbzD, i64* %lnbzE, !tbaa !2
  %lnbzF = load i64*, i64** %Sp_Var
  %lnbzG = getelementptr inbounds i64, i64* %lnbzF, i32 1
  %lnbzH = ptrtoint i64* %lnbzG to i64
  %lnbzI = inttoptr i64 %lnbzH to i64*
  store i64* %lnbzI, i64** %Sp_Var
  %lnbzJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbxo$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbzK = load i64*, i64** %Sp_Var
  %lnbzL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbzJ( i64* %Base_Arg, i64* %lnbzK, i64* %Hp_Arg, i64 %lnbzL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbxS:
  %lnbzO = load i64, i64* %R1_Var
  %lnbzP = add i64 %lnbzO, 6
  %lnbzQ = inttoptr i64 %lnbzP to i64*
  %lnbzR = load i64, i64* %lnbzQ, !tbaa !4
  %lnbzS = and i64 %lnbzR, -8
  store i64 %lnbzS, i64* %R1_Var
  %lnbzT = load i64*, i64** %Sp_Var
  %lnbzU = getelementptr inbounds i64, i64* %lnbzT, i32 2
  %lnbzV = ptrtoint i64* %lnbzU to i64
  %lnbzW = inttoptr i64 %lnbzV to i64*
  store i64* %lnbzW, i64** %Sp_Var
  %lnbzY = load i64, i64* %R1_Var
  %lnbzZ = inttoptr i64 %lnbzY to i64*
  %lnbA0 = load i64, i64* %lnbzZ, !tbaa !4
  %lnbA1 = inttoptr i64 %lnbA0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbA2 = load i64*, i64** %Sp_Var
  %lnbA3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbA1( i64* %Base_Arg, i64* %lnbA2, i64* %Hp_Arg, i64 %lnbA3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_diffusesurf_closure_struct = type <{i64}>
@Main_diffusesurf_closure$def = internal global %Main_diffusesurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_diffusesurf_info$def to i64)}>
@Main_diffusesurf_closure = alias i8, bitcast (%Main_diffusesurf_closure_struct* @Main_diffusesurf_closure$def to i8*)
@Main_diffusesurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_diffusesurf_info$def to i8*)
define ghccc void @Main_diffusesurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbAb:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbA8
cbA8:
  %lnbAc = load i64, i64* %R2_Var
  store i64 %lnbAc, i64* %R2_Var
  %lnbAd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbAe = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbAd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbAe, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mi_closure_struct = type <{i64}>
@r7mi_closure$def = internal global %r7mi_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mi_info$def to i64)}>
@r7mi_closure = internal alias i8, bitcast (%r7mi_closure_struct* @r7mi_closure$def to i8*)
@r7mi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mi_info$def to i8*)
define internal ghccc void @r7mi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbAS:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbAq
cbAq:
  %lnbAT = load i64*, i64** %Sp_Var
  %lnbAU = getelementptr inbounds i64, i64* %lnbAT, i32 -2
  %lnbAV = ptrtoint i64* %lnbAU to i64
  %lnbAW = icmp ult i64 %lnbAV, %SpLim_Arg
  %lnbAX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbAW, i1 0 )
  br i1 %lnbAX, label %cbAr, label %ubAM
ubAM:
  %lnbAZ = load i64, i64* %R2_Var
  %lnbAY = load i64*, i64** %Sp_Var
  %lnbB0 = getelementptr inbounds i64, i64* %lnbAY, i32 -1
  store i64 %lnbAZ, i64* %lnbB0, !tbaa !2
  %lnbB1 = load i64*, i64** %Sp_Var
  %lnbB2 = getelementptr inbounds i64, i64* %lnbB1, i32 -1
  %lnbB3 = ptrtoint i64* %lnbB2 to i64
  %lnbB4 = inttoptr i64 %lnbB3 to i64*
  store i64* %lnbB4, i64** %Sp_Var
  %lnbB5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbAg$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbB6 = load i64*, i64** %Sp_Var
  %lnbB7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbB5( i64* %Base_Arg, i64* %lnbB6, i64* %Hp_Arg, i64 %lnbB7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbAr:
  %lnbB8 = load i64, i64* %R2_Var
  store i64 %lnbB8, i64* %R2_Var
  %lnbB9 = ptrtoint %r7mi_closure_struct* @r7mi_closure$def to i64
  store i64 %lnbB9, i64* %R1_Var
  %lnbBa = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbBb = bitcast i64* %lnbBa to i64*
  %lnbBc = load i64, i64* %lnbBb, !tbaa !5
  %lnbBd = inttoptr i64 %lnbBc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBe = load i64*, i64** %Sp_Var
  %lnbBf = load i64, i64* %R1_Var
  %lnbBg = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBd( i64* %Base_Arg, i64* %lnbBe, i64* %Hp_Arg, i64 %lnbBf, i64 %lnbBg, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbAg = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbAg$def to i8*)
define internal ghccc void @_cbAg$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbBh:
  %ls7oY = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbAg
cbAg:
  %lnbBi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbBj = bitcast i64* %lnbBi to i64*
  %lnbBk = load i64, i64* %lnbBj, !tbaa !2
  store i64 %lnbBk, i64* %ls7oY
  %lnbBl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAj_info$def to i64
  %lnbBm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbBl, i64* %lnbBm, !tbaa !2
  %lnbBn = load i64, i64* %ls7oY
  store i64 %lnbBn, i64* %R1_Var
  %lnbBo = load i64, i64* %R1_Var
  %lnbBp = and i64 %lnbBo, 7
  %lnbBq = icmp ne i64 %lnbBp, 0
  br i1 %lnbBq, label %ubAO, label %cbAk
cbAk:
  %lnbBs = load i64, i64* %R1_Var
  %lnbBt = inttoptr i64 %lnbBs to i64*
  %lnbBu = load i64, i64* %lnbBt, !tbaa !4
  %lnbBv = inttoptr i64 %lnbBu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbBw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubAO:
  %lnbBx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbBy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbAj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAj_info$def to i8*)
define internal ghccc void @cbAj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbBz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7p1 = alloca i64, i32 1
  br label %cbAj
cbAj:
  %lnbBA = load i64, i64* %R1_Var
  %lnbBB = and i64 %lnbBA, 7
  switch i64 %lnbBB, label %cbAn [i64 1, label %cbAn
i64 2, label %cbAo]
cbAn:
  %lnbBC = ptrtoint %Main_lookat_closure_struct* @Main_lookat_closure$def to i64
  %lnbBD = add i64 %lnbBC, 1
  store i64 %lnbBD, i64* %R1_Var
  %lnbBE = load i64*, i64** %Sp_Var
  %lnbBF = getelementptr inbounds i64, i64* %lnbBE, i32 1
  %lnbBG = ptrtoint i64* %lnbBF to i64
  %lnbBH = inttoptr i64 %lnbBG to i64*
  store i64* %lnbBH, i64** %Sp_Var
  %lnbBI = load i64*, i64** %Sp_Var
  %lnbBJ = getelementptr inbounds i64, i64* %lnbBI, i32 0
  %lnbBK = bitcast i64* %lnbBJ to i64*
  %lnbBL = load i64, i64* %lnbBK, !tbaa !2
  %lnbBM = inttoptr i64 %lnbBL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBN = load i64*, i64** %Sp_Var
  %lnbBO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBM( i64* %Base_Arg, i64* %lnbBN, i64* %Hp_Arg, i64 %lnbBO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbAo:
  %lnbBQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAy_info$def to i64
  %lnbBP = load i64*, i64** %Sp_Var
  %lnbBR = getelementptr inbounds i64, i64* %lnbBP, i32 -1
  store i64 %lnbBQ, i64* %lnbBR, !tbaa !2
  %lnbBU = load i64, i64* %R1_Var
  %lnbBV = add i64 %lnbBU, 14
  %lnbBW = inttoptr i64 %lnbBV to i64*
  %lnbBX = load i64, i64* %lnbBW, !tbaa !4
  store i64 %lnbBX, i64* %ls7p1
  %lnbC0 = load i64, i64* %R1_Var
  %lnbC1 = add i64 %lnbC0, 6
  %lnbC2 = inttoptr i64 %lnbC1 to i64*
  %lnbC3 = load i64, i64* %lnbC2, !tbaa !4
  store i64 %lnbC3, i64* %R1_Var
  %lnbC5 = load i64, i64* %ls7p1
  %lnbC4 = load i64*, i64** %Sp_Var
  %lnbC6 = getelementptr inbounds i64, i64* %lnbC4, i32 0
  store i64 %lnbC5, i64* %lnbC6, !tbaa !2
  %lnbC7 = load i64*, i64** %Sp_Var
  %lnbC8 = getelementptr inbounds i64, i64* %lnbC7, i32 -1
  %lnbC9 = ptrtoint i64* %lnbC8 to i64
  %lnbCa = inttoptr i64 %lnbC9 to i64*
  store i64* %lnbCa, i64** %Sp_Var
  %lnbCb = load i64, i64* %R1_Var
  %lnbCc = and i64 %lnbCb, 7
  %lnbCd = icmp ne i64 %lnbCc, 0
  br i1 %lnbCd, label %ubAP, label %cbAA
cbAA:
  %lnbCf = load i64, i64* %R1_Var
  %lnbCg = inttoptr i64 %lnbCf to i64*
  %lnbCh = load i64, i64* %lnbCg, !tbaa !4
  %lnbCi = inttoptr i64 %lnbCh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCj = load i64*, i64** %Sp_Var
  %lnbCk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCi( i64* %Base_Arg, i64* %lnbCj, i64* %Hp_Arg, i64 %lnbCk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubAP:
  %lnbCl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAy_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCm = load i64*, i64** %Sp_Var
  %lnbCn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCl( i64* %Base_Arg, i64* %lnbCm, i64* %Hp_Arg, i64 %lnbCn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbAy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbAy_info$def to i8*)
define internal ghccc void @cbAy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbCo:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbAy
cbAy:
  %lnbCp = load i64, i64* %R1_Var
  %lnbCq = and i64 %lnbCp, 7
  switch i64 %lnbCq, label %cbAG [i64 3, label %cbAK]
cbAG:
  %lnbCs = load i64*, i64** %Sp_Var
  %lnbCt = getelementptr inbounds i64, i64* %lnbCs, i32 1
  %lnbCu = bitcast i64* %lnbCt to i64*
  %lnbCv = load i64, i64* %lnbCu, !tbaa !2
  %lnbCr = load i64*, i64** %Sp_Var
  %lnbCw = getelementptr inbounds i64, i64* %lnbCr, i32 1
  store i64 %lnbCv, i64* %lnbCw, !tbaa !2
  %lnbCx = load i64*, i64** %Sp_Var
  %lnbCy = getelementptr inbounds i64, i64* %lnbCx, i32 1
  %lnbCz = ptrtoint i64* %lnbCy to i64
  %lnbCA = inttoptr i64 %lnbCz to i64*
  store i64* %lnbCA, i64** %Sp_Var
  %lnbCB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbAg$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCC = load i64*, i64** %Sp_Var
  %lnbCD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCB( i64* %Base_Arg, i64* %lnbCC, i64* %Hp_Arg, i64 %lnbCD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbAK:
  %lnbCG = load i64, i64* %R1_Var
  %lnbCH = add i64 %lnbCG, 5
  %lnbCI = inttoptr i64 %lnbCH to i64*
  %lnbCJ = load i64, i64* %lnbCI, !tbaa !4
  %lnbCK = and i64 %lnbCJ, -8
  store i64 %lnbCK, i64* %R1_Var
  %lnbCL = load i64*, i64** %Sp_Var
  %lnbCM = getelementptr inbounds i64, i64* %lnbCL, i32 2
  %lnbCN = ptrtoint i64* %lnbCM to i64
  %lnbCO = inttoptr i64 %lnbCN to i64*
  store i64* %lnbCO, i64** %Sp_Var
  %lnbCQ = load i64, i64* %R1_Var
  %lnbCR = inttoptr i64 %lnbCQ to i64*
  %lnbCS = load i64, i64* %lnbCR, !tbaa !4
  %lnbCT = inttoptr i64 %lnbCS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCU = load i64*, i64** %Sp_Var
  %lnbCV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCT( i64* %Base_Arg, i64* %lnbCU, i64* %Hp_Arg, i64 %lnbCV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_specularsurf_closure_struct = type <{i64}>
@Main_specularsurf_closure$def = internal global %Main_specularsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_specularsurf_info$def to i64)}>
@Main_specularsurf_closure = alias i8, bitcast (%Main_specularsurf_closure_struct* @Main_specularsurf_closure$def to i8*)
@Main_specularsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_specularsurf_info$def to i8*)
define ghccc void @Main_specularsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbD3:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbD0
cbD0:
  %lnbD4 = load i64, i64* %R2_Var
  store i64 %lnbD4, i64* %R2_Var
  %lnbD5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbD6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbD5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbD6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_testspheres39_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres39_closure$def = internal global %Main_testspheres39_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat_closure_struct* @Main_lookat_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s7_closure_struct* @Main_s7_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres39_closure = alias i8, bitcast (%Main_testspheres39_closure_struct* @Main_testspheres39_closure$def to i8*)
%r7mC_closure_struct = type <{i64, i64, i64, i64}>
@r7mC_closure$def = internal global %r7mC_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_True_closure to i64),i64 2), i64 add (i64 ptrtoint (%Main_lookat_closure_struct* @Main_lookat_closure$def to i64),i64 1), i64 3}>
@r7mC_closure = internal alias i8, bitcast (%r7mC_closure_struct* @r7mC_closure$def to i8*)
%Main_refractray_closure_struct = type <{i64}>
@Main_refractray_closure$def = internal global %Main_refractray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_refractray_info$def to i64)}>
@Main_refractray_closure = alias i8, bitcast (%Main_refractray_closure_struct* @Main_refractray_closure$def to i8*)
@Main_refractray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_refractray_info$def to i8*)
define ghccc void @Main_refractray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
nbGX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbDe
cbDe:
  %lnbGY = load i64*, i64** %Sp_Var
  %lnbGZ = getelementptr inbounds i64, i64* %lnbGY, i32 -7
  %lnbH0 = ptrtoint i64* %lnbGZ to i64
  %lnbH1 = icmp ult i64 %lnbH0, %SpLim_Arg
  %lnbH2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbH1, i1 0 )
  br i1 %lnbH2, label %cbDR, label %cbDS
cbDS:
  %lnbH4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDb_info$def to i64
  %lnbH3 = load i64*, i64** %Sp_Var
  %lnbH5 = getelementptr inbounds i64, i64* %lnbH3, i32 -3
  store i64 %lnbH4, i64* %lnbH5, !tbaa !2
  %lnbH6 = load i64, i64* %R2_Var
  store i64 %lnbH6, i64* %R1_Var
  %lnbH8 = load i64, i64* %R3_Var
  %lnbH7 = load i64*, i64** %Sp_Var
  %lnbH9 = getelementptr inbounds i64, i64* %lnbH7, i32 -2
  store i64 %lnbH8, i64* %lnbH9, !tbaa !2
  %lnbHb = load i64, i64* %R4_Var
  %lnbHa = load i64*, i64** %Sp_Var
  %lnbHc = getelementptr inbounds i64, i64* %lnbHa, i32 -1
  store i64 %lnbHb, i64* %lnbHc, !tbaa !2
  %lnbHd = load i64*, i64** %Sp_Var
  %lnbHe = getelementptr inbounds i64, i64* %lnbHd, i32 -3
  %lnbHf = ptrtoint i64* %lnbHe to i64
  %lnbHg = inttoptr i64 %lnbHf to i64*
  store i64* %lnbHg, i64** %Sp_Var
  %lnbHh = load i64, i64* %R1_Var
  %lnbHi = and i64 %lnbHh, 7
  %lnbHj = icmp ne i64 %lnbHi, 0
  br i1 %lnbHj, label %ubGP, label %cbDc
cbDc:
  %lnbHl = load i64, i64* %R1_Var
  %lnbHm = inttoptr i64 %lnbHl to i64*
  %lnbHn = load i64, i64* %lnbHm, !tbaa !4
  %lnbHo = inttoptr i64 %lnbHn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbHp = load i64*, i64** %Sp_Var
  %lnbHq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbHo( i64* %Base_Arg, i64* %lnbHp, i64* %Hp_Arg, i64 %lnbHq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGP:
  %lnbHr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbHs = load i64*, i64** %Sp_Var
  %lnbHt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbHr( i64* %Base_Arg, i64* %lnbHs, i64* %Hp_Arg, i64 %lnbHt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbDR:
  %lnbHu = load i64, i64* %R4_Var
  store i64 %lnbHu, i64* %R4_Var
  %lnbHv = load i64, i64* %R3_Var
  store i64 %lnbHv, i64* %R3_Var
  %lnbHw = load i64, i64* %R2_Var
  store i64 %lnbHw, i64* %R2_Var
  %lnbHx = ptrtoint %Main_refractray_closure_struct* @Main_refractray_closure$def to i64
  store i64 %lnbHx, i64* %R1_Var
  %lnbHy = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbHz = bitcast i64* %lnbHy to i64*
  %lnbHA = load i64, i64* %lnbHz, !tbaa !5
  %lnbHB = inttoptr i64 %lnbHA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbHC = load i64*, i64** %Sp_Var
  %lnbHD = load i64, i64* %R1_Var
  %lnbHE = load i64, i64* %R2_Var
  %lnbHF = load i64, i64* %R3_Var
  %lnbHG = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbHB( i64* %Base_Arg, i64* %lnbHC, i64* %Hp_Arg, i64 %lnbHD, i64 %lnbHE, i64 %lnbHF, i64 %lnbHG, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDb_info$def to i8*)
define internal ghccc void @cbDb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nbHH:
  %ls7t3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDb
cbDb:
  %lnbHI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDh_info$def to i64
  %lnbHJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbHI, i64* %lnbHJ, !tbaa !2
  %lnbHM = load i64, i64* %R1_Var
  %lnbHN = add i64 %lnbHM, 7
  %lnbHO = inttoptr i64 %lnbHN to double*
  %lnbHP = load double, double* %lnbHO, !tbaa !4
  store double %lnbHP, double* %ls7t3
  %lnbHQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbHR = bitcast i64* %lnbHQ to i64*
  %lnbHS = load i64, i64* %lnbHR, !tbaa !2
  store i64 %lnbHS, i64* %R1_Var
  %lnbHT = load double, double* %ls7t3
  %lnbHU = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbHV = bitcast i64* %lnbHU to double*
  store double %lnbHT, double* %lnbHV, !tbaa !2
  %lnbHW = load i64, i64* %R1_Var
  %lnbHX = and i64 %lnbHW, 7
  %lnbHY = icmp ne i64 %lnbHX, 0
  br i1 %lnbHY, label %ubGO, label %cbDi
cbDi:
  %lnbI0 = load i64, i64* %R1_Var
  %lnbI1 = inttoptr i64 %lnbI0 to i64*
  %lnbI2 = load i64, i64* %lnbI1, !tbaa !4
  %lnbI3 = inttoptr i64 %lnbI2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbI4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbI3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbI4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGO:
  %lnbI5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbI6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbI5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbI6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDh_info$def to i8*)
define internal ghccc void @cbDh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nbI7:
  %ls7t6 = alloca i64, i32 1
  %ls7t7 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbDh
cbDh:
  %lnbI9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDm_info$def to i64
  %lnbI8 = load i64*, i64** %Sp_Var
  %lnbIa = getelementptr inbounds i64, i64* %lnbI8, i32 -2
  store i64 %lnbI9, i64* %lnbIa, !tbaa !2
  %lnbId = load i64, i64* %R1_Var
  %lnbIe = add i64 %lnbId, 15
  %lnbIf = inttoptr i64 %lnbIe to i64*
  %lnbIg = load i64, i64* %lnbIf, !tbaa !4
  store i64 %lnbIg, i64* %ls7t6
  %lnbIj = load i64, i64* %R1_Var
  %lnbIk = add i64 %lnbIj, 23
  %lnbIl = inttoptr i64 %lnbIk to i64*
  %lnbIm = load i64, i64* %lnbIl, !tbaa !4
  store i64 %lnbIm, i64* %ls7t7
  %lnbIp = load i64, i64* %R1_Var
  %lnbIq = add i64 %lnbIp, 7
  %lnbIr = inttoptr i64 %lnbIq to i64*
  %lnbIs = load i64, i64* %lnbIr, !tbaa !4
  store i64 %lnbIs, i64* %R1_Var
  %lnbIu = load i64, i64* %ls7t7
  %lnbIt = load i64*, i64** %Sp_Var
  %lnbIv = getelementptr inbounds i64, i64* %lnbIt, i32 -1
  store i64 %lnbIu, i64* %lnbIv, !tbaa !2
  %lnbIx = load i64, i64* %ls7t6
  %lnbIw = load i64*, i64** %Sp_Var
  %lnbIy = getelementptr inbounds i64, i64* %lnbIw, i32 0
  store i64 %lnbIx, i64* %lnbIy, !tbaa !2
  %lnbIz = load i64*, i64** %Sp_Var
  %lnbIA = getelementptr inbounds i64, i64* %lnbIz, i32 -2
  %lnbIB = ptrtoint i64* %lnbIA to i64
  %lnbIC = inttoptr i64 %lnbIB to i64*
  store i64* %lnbIC, i64** %Sp_Var
  %lnbID = load i64, i64* %R1_Var
  %lnbIE = and i64 %lnbID, 7
  %lnbIF = icmp ne i64 %lnbIE, 0
  br i1 %lnbIF, label %ubGQ, label %cbDn
cbDn:
  %lnbIH = load i64, i64* %R1_Var
  %lnbII = inttoptr i64 %lnbIH to i64*
  %lnbIJ = load i64, i64* %lnbII, !tbaa !4
  %lnbIK = inttoptr i64 %lnbIJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbIL = load i64*, i64** %Sp_Var
  %lnbIM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbIK( i64* %Base_Arg, i64* %lnbIL, i64* %Hp_Arg, i64 %lnbIM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGQ:
  %lnbIN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbIO = load i64*, i64** %Sp_Var
  %lnbIP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbIN( i64* %Base_Arg, i64* %lnbIO, i64* %Hp_Arg, i64 %lnbIP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDm_info$def to i8*)
define internal ghccc void @cbDm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 260, i32 30, i32 0}>
{
nbIQ:
  %ls7t9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDm
cbDm:
  %lnbIR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDr_info$def to i64
  %lnbIS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbIR, i64* %lnbIS, !tbaa !2
  %lnbIV = load i64, i64* %R1_Var
  %lnbIW = add i64 %lnbIV, 7
  %lnbIX = inttoptr i64 %lnbIW to double*
  %lnbIY = load double, double* %lnbIX, !tbaa !4
  store double %lnbIY, double* %ls7t9
  %lnbIZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbJ0 = bitcast i64* %lnbIZ to i64*
  %lnbJ1 = load i64, i64* %lnbJ0, !tbaa !2
  store i64 %lnbJ1, i64* %R1_Var
  %lnbJ2 = load double, double* %ls7t9
  %lnbJ3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbJ4 = bitcast i64* %lnbJ3 to double*
  store double %lnbJ2, double* %lnbJ4, !tbaa !2
  %lnbJ5 = load i64, i64* %R1_Var
  %lnbJ6 = and i64 %lnbJ5, 7
  %lnbJ7 = icmp ne i64 %lnbJ6, 0
  br i1 %lnbJ7, label %ubGR, label %cbDs
cbDs:
  %lnbJ9 = load i64, i64* %R1_Var
  %lnbJa = inttoptr i64 %lnbJ9 to i64*
  %lnbJb = load i64, i64* %lnbJa, !tbaa !4
  %lnbJc = inttoptr i64 %lnbJb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbJd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGR:
  %lnbJe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbJf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDr_info$def to i8*)
define internal ghccc void @cbDr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 388, i32 30, i32 0}>
{
nbJg:
  %ls7tb = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDr
cbDr:
  %lnbJh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDw_info$def to i64
  %lnbJi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbJh, i64* %lnbJi, !tbaa !2
  %lnbJl = load i64, i64* %R1_Var
  %lnbJm = add i64 %lnbJl, 7
  %lnbJn = inttoptr i64 %lnbJm to double*
  %lnbJo = load double, double* %lnbJn, !tbaa !4
  store double %lnbJo, double* %ls7tb
  %lnbJp = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbJq = bitcast i64* %lnbJp to i64*
  %lnbJr = load i64, i64* %lnbJq, !tbaa !2
  store i64 %lnbJr, i64* %R1_Var
  %lnbJs = load double, double* %ls7tb
  %lnbJt = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbJu = bitcast i64* %lnbJt to double*
  store double %lnbJs, double* %lnbJu, !tbaa !2
  %lnbJv = load i64, i64* %R1_Var
  %lnbJw = and i64 %lnbJv, 7
  %lnbJx = icmp ne i64 %lnbJw, 0
  br i1 %lnbJx, label %ubGS, label %cbDx
cbDx:
  %lnbJz = load i64, i64* %R1_Var
  %lnbJA = inttoptr i64 %lnbJz to i64*
  %lnbJB = load i64, i64* %lnbJA, !tbaa !4
  %lnbJC = inttoptr i64 %lnbJB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbJD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGS:
  %lnbJE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbJF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDw_info$def to i8*)
define internal ghccc void @cbDw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
nbJG:
  %ls7td = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDw
cbDw:
  %lnbJH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDB_info$def to i64
  %lnbJI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbJH, i64* %lnbJI, !tbaa !2
  %lnbJL = load i64, i64* %R1_Var
  %lnbJM = add i64 %lnbJL, 7
  %lnbJN = inttoptr i64 %lnbJM to double*
  %lnbJO = load double, double* %lnbJN, !tbaa !4
  store double %lnbJO, double* %ls7td
  %lnbJP = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnbJQ = bitcast i64* %lnbJP to i64*
  %lnbJR = load i64, i64* %lnbJQ, !tbaa !2
  store i64 %lnbJR, i64* %R1_Var
  %lnbJS = load double, double* %ls7td
  %lnbJT = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnbJU = bitcast i64* %lnbJT to double*
  store double %lnbJS, double* %lnbJU, !tbaa !2
  %lnbJV = load i64, i64* %R1_Var
  %lnbJW = and i64 %lnbJV, 7
  %lnbJX = icmp ne i64 %lnbJW, 0
  br i1 %lnbJX, label %ubGT, label %cbDC
cbDC:
  %lnbJZ = load i64, i64* %R1_Var
  %lnbK0 = inttoptr i64 %lnbJZ to i64*
  %lnbK1 = load i64, i64* %lnbK0, !tbaa !4
  %lnbK2 = inttoptr i64 %lnbK1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbK3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbK2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbK3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGT:
  %lnbK4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbK5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbK4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbK5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDB_info$def to i8*)
define internal ghccc void @cbDB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
nbK6:
  %ls7tg = alloca i64, i32 1
  %ls7th = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbDB
cbDB:
  %lnbK8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDG_info$def to i64
  %lnbK7 = load i64*, i64** %Sp_Var
  %lnbK9 = getelementptr inbounds i64, i64* %lnbK7, i32 -2
  store i64 %lnbK8, i64* %lnbK9, !tbaa !2
  %lnbKc = load i64, i64* %R1_Var
  %lnbKd = add i64 %lnbKc, 15
  %lnbKe = inttoptr i64 %lnbKd to i64*
  %lnbKf = load i64, i64* %lnbKe, !tbaa !4
  store i64 %lnbKf, i64* %ls7tg
  %lnbKi = load i64, i64* %R1_Var
  %lnbKj = add i64 %lnbKi, 23
  %lnbKk = inttoptr i64 %lnbKj to i64*
  %lnbKl = load i64, i64* %lnbKk, !tbaa !4
  store i64 %lnbKl, i64* %ls7th
  %lnbKo = load i64, i64* %R1_Var
  %lnbKp = add i64 %lnbKo, 7
  %lnbKq = inttoptr i64 %lnbKp to i64*
  %lnbKr = load i64, i64* %lnbKq, !tbaa !4
  store i64 %lnbKr, i64* %R1_Var
  %lnbKt = load i64, i64* %ls7th
  %lnbKs = load i64*, i64** %Sp_Var
  %lnbKu = getelementptr inbounds i64, i64* %lnbKs, i32 -1
  store i64 %lnbKt, i64* %lnbKu, !tbaa !2
  %lnbKw = load i64, i64* %ls7tg
  %lnbKv = load i64*, i64** %Sp_Var
  %lnbKx = getelementptr inbounds i64, i64* %lnbKv, i32 0
  store i64 %lnbKw, i64* %lnbKx, !tbaa !2
  %lnbKy = load i64*, i64** %Sp_Var
  %lnbKz = getelementptr inbounds i64, i64* %lnbKy, i32 -2
  %lnbKA = ptrtoint i64* %lnbKz to i64
  %lnbKB = inttoptr i64 %lnbKA to i64*
  store i64* %lnbKB, i64** %Sp_Var
  %lnbKC = load i64, i64* %R1_Var
  %lnbKD = and i64 %lnbKC, 7
  %lnbKE = icmp ne i64 %lnbKD, 0
  br i1 %lnbKE, label %ubGU, label %cbDH
cbDH:
  %lnbKG = load i64, i64* %R1_Var
  %lnbKH = inttoptr i64 %lnbKG to i64*
  %lnbKI = load i64, i64* %lnbKH, !tbaa !4
  %lnbKJ = inttoptr i64 %lnbKI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbKK = load i64*, i64** %Sp_Var
  %lnbKL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKJ( i64* %Base_Arg, i64* %lnbKK, i64* %Hp_Arg, i64 %lnbKL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGU:
  %lnbKM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbKN = load i64*, i64** %Sp_Var
  %lnbKO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKM( i64* %Base_Arg, i64* %lnbKN, i64* %Hp_Arg, i64 %lnbKO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDG_info$def to i8*)
define internal ghccc void @cbDG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3846, i32 30, i32 0}>
{
nbKP:
  %ls7tj = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDG
cbDG:
  %lnbKQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDL_info$def to i64
  %lnbKR = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbKQ, i64* %lnbKR, !tbaa !2
  %lnbKU = load i64, i64* %R1_Var
  %lnbKV = add i64 %lnbKU, 7
  %lnbKW = inttoptr i64 %lnbKV to double*
  %lnbKX = load double, double* %lnbKW, !tbaa !4
  store double %lnbKX, double* %ls7tj
  %lnbKY = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbKZ = bitcast i64* %lnbKY to i64*
  %lnbL0 = load i64, i64* %lnbKZ, !tbaa !2
  store i64 %lnbL0, i64* %R1_Var
  %lnbL1 = load double, double* %ls7tj
  %lnbL2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbL3 = bitcast i64* %lnbL2 to double*
  store double %lnbL1, double* %lnbL3, !tbaa !2
  %lnbL4 = load i64, i64* %R1_Var
  %lnbL5 = and i64 %lnbL4, 7
  %lnbL6 = icmp ne i64 %lnbL5, 0
  br i1 %lnbL6, label %ubGV, label %cbDM
cbDM:
  %lnbL8 = load i64, i64* %R1_Var
  %lnbL9 = inttoptr i64 %lnbL8 to i64*
  %lnbLa = load i64, i64* %lnbL9, !tbaa !4
  %lnbLb = inttoptr i64 %lnbLa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbLc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbLb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbLc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGV:
  %lnbLd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbLe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbLd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbLe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDL_info$def to i8*)
define internal ghccc void @cbDL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3974, i32 30, i32 0}>
{
nbLf:
  %ls7tl = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbDL
cbDL:
  %lnbLg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDQ_info$def to i64
  %lnbLh = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbLg, i64* %lnbLh, !tbaa !2
  %lnbLk = load i64, i64* %R1_Var
  %lnbLl = add i64 %lnbLk, 7
  %lnbLm = inttoptr i64 %lnbLl to double*
  %lnbLn = load double, double* %lnbLm, !tbaa !4
  store double %lnbLn, double* %ls7tl
  %lnbLo = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbLp = bitcast i64* %lnbLo to i64*
  %lnbLq = load i64, i64* %lnbLp, !tbaa !2
  store i64 %lnbLq, i64* %R1_Var
  %lnbLr = load double, double* %ls7tl
  %lnbLs = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbLt = bitcast i64* %lnbLs to double*
  store double %lnbLr, double* %lnbLt, !tbaa !2
  %lnbLu = load i64, i64* %R1_Var
  %lnbLv = and i64 %lnbLu, 7
  %lnbLw = icmp ne i64 %lnbLv, 0
  br i1 %lnbLw, label %ubGW, label %cbE1
cbE1:
  %lnbLy = load i64, i64* %R1_Var
  %lnbLz = inttoptr i64 %lnbLy to i64*
  %lnbLA = load i64, i64* %lnbLz, !tbaa !4
  %lnbLB = inttoptr i64 %lnbLA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbLC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbLB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbLC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubGW:
  %lnbLD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbLE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbLD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbLE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDQ_info$def to i8*)
define internal ghccc void @cbDQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4038, i32 30, i32 0}>
{
nbLF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7t3 = alloca double, i32 1
  %ls7t9 = alloca double, i32 1
  %ls7tb = alloca double, i32 1
  %ls7td = alloca double, i32 1
  %ls7tj = alloca double, i32 1
  %ls7tl = alloca double, i32 1
  %ls7tn = alloca double, i32 1
  %ls7to = alloca double, i32 1
  %ls7tv = alloca double, i32 1
  %lcbEL = alloca double, i32 1
  %ls7tB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7tR = alloca double, i32 1
  %ls7tS = alloca double, i32 1
  %ls7tT = alloca double, i32 1
  %lcbFV = alloca double, i32 1
  %ls7tZ = alloca double, i32 1
  br label %cbDQ
cbDQ:
  %lnbLG = load i64*, i64** %Hp_Var
  %lnbLH = getelementptr inbounds i64, i64* %lnbLG, i32 13
  %lnbLI = ptrtoint i64* %lnbLH to i64
  %lnbLJ = inttoptr i64 %lnbLI to i64*
  store i64* %lnbLJ, i64** %Hp_Var
  %lnbLK = load i64*, i64** %Hp_Var
  %lnbLL = ptrtoint i64* %lnbLK to i64
  %lnbLM = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbLN = bitcast i64* %lnbLM to i64*
  %lnbLO = load i64, i64* %lnbLN, !tbaa !5
  %lnbLP = icmp ugt i64 %lnbLL, %lnbLO
  %lnbLQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbLP, i1 0 )
  br i1 %lnbLQ, label %cbE7, label %cbE6
cbE6:
  %lnbLR = load i64*, i64** %Sp_Var
  %lnbLS = getelementptr inbounds i64, i64* %lnbLR, i32 5
  %lnbLT = bitcast i64* %lnbLS to double*
  %lnbLU = load double, double* %lnbLT, !tbaa !2
  store double %lnbLU, double* %ls7t3
  %lnbLV = load i64*, i64** %Sp_Var
  %lnbLW = getelementptr inbounds i64, i64* %lnbLV, i32 4
  %lnbLX = bitcast i64* %lnbLW to double*
  %lnbLY = load double, double* %lnbLX, !tbaa !2
  store double %lnbLY, double* %ls7t9
  %lnbLZ = load i64*, i64** %Sp_Var
  %lnbM0 = getelementptr inbounds i64, i64* %lnbLZ, i32 3
  %lnbM1 = bitcast i64* %lnbM0 to double*
  %lnbM2 = load double, double* %lnbM1, !tbaa !2
  store double %lnbM2, double* %ls7tb
  %lnbM3 = load i64*, i64** %Sp_Var
  %lnbM4 = getelementptr inbounds i64, i64* %lnbM3, i32 6
  %lnbM5 = bitcast i64* %lnbM4 to double*
  %lnbM6 = load double, double* %lnbM5, !tbaa !2
  store double %lnbM6, double* %ls7td
  %lnbM7 = load i64*, i64** %Sp_Var
  %lnbM8 = getelementptr inbounds i64, i64* %lnbM7, i32 2
  %lnbM9 = bitcast i64* %lnbM8 to double*
  %lnbMa = load double, double* %lnbM9, !tbaa !2
  store double %lnbMa, double* %ls7tj
  %lnbMb = load i64*, i64** %Sp_Var
  %lnbMc = getelementptr inbounds i64, i64* %lnbMb, i32 1
  %lnbMd = bitcast i64* %lnbMc to double*
  %lnbMe = load double, double* %lnbMd, !tbaa !2
  store double %lnbMe, double* %ls7tl
  %lnbMh = load i64, i64* %R1_Var
  %lnbMi = add i64 %lnbMh, 7
  %lnbMj = inttoptr i64 %lnbMi to double*
  %lnbMk = load double, double* %lnbMj, !tbaa !4
  store double %lnbMk, double* %ls7tn
  %lnbMl = load double, double* %ls7t9
  %lnbMm = load double, double* %ls7tj
  %lnbMn = fmul double %lnbMl, %lnbMm
  %lnbMo = load double, double* %ls7tb
  %lnbMp = load double, double* %ls7tl
  %lnbMq = fmul double %lnbMo, %lnbMp
  %lnbMr = fadd double %lnbMn, %lnbMq
  %lnbMs = load double, double* %ls7td
  %lnbMt = load double, double* %ls7tn
  %lnbMu = fmul double %lnbMs, %lnbMt
  %lnbMv = fadd double %lnbMr, %lnbMu
  %lnbMw = fsub double 0x8000000000000000, %lnbMv
  store double %lnbMw, double* %ls7to
  %lnbMx = load double, double* %ls7to
  %lnbMy = fcmp olt double %lnbMx, 0x0000000000000000
  %lnbMz = zext i1 %lnbMy to i64
  switch i64 %lnbMz, label %cbFv [i64 1, label %cbGN]
cbFv:
  %lnbMA = load double, double* %ls7t3
  %lnbMB = load double, double* %ls7t3
  %lnbMC = fmul double %lnbMA, %lnbMB
  %lnbMD = load double, double* %ls7to
  %lnbME = load double, double* %ls7to
  %lnbMF = fmul double %lnbMD, %lnbME
  %lnbMG = fsub double 0x3FF0000000000000, %lnbMF
  %lnbMH = fmul double %lnbMC, %lnbMG
  %lnbMI = fsub double 0x3FF0000000000000, %lnbMH
  store double %lnbMI, double* %ls7tv
  %lnbMJ = load double, double* %ls7tv
  %lnbMK = fcmp olt double %lnbMJ, 0x0000000000000000
  %lnbML = zext i1 %lnbMK to i64
  switch i64 %lnbML, label %cbFs [i64 1, label %cbFt]
cbFs:
  %lnbMM = load double, double* %ls7tv
  %lnbMN = call ccc double (double) @llvm.sqrt.f64( double %lnbMM ) nounwind
  store double %lnbMN, double* %lcbEL
  %lnbMP = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbMO = load i64*, i64** %Hp_Var
  %lnbMQ = getelementptr inbounds i64, i64* %lnbMO, i32 -12
  store i64 %lnbMP, i64* %lnbMQ, !tbaa !3
  %lnbMR = load double, double* %ls7t3
  %lnbMS = load double, double* %ls7to
  %lnbMT = fmul double %lnbMR, %lnbMS
  %lnbMU = load double, double* %lcbEL
  %lnbMV = fsub double %lnbMT, %lnbMU
  store double %lnbMV, double* %ls7tB
  %lnbMX = load double, double* %ls7tB
  %lnbMY = load double, double* %ls7tn
  %lnbMZ = fmul double %lnbMX, %lnbMY
  %lnbN0 = load double, double* %ls7t3
  %lnbN1 = load double, double* %ls7td
  %lnbN2 = fmul double %lnbN0, %lnbN1
  %lnbN3 = fadd double %lnbMZ, %lnbN2
  %lnbMW = load i64*, i64** %Hp_Var
  %lnbN4 = getelementptr inbounds i64, i64* %lnbMW, i32 -11
  %lnbN5 = bitcast i64* %lnbN4 to double*
  store double %lnbN3, double* %lnbN5, !tbaa !3
  %lnbN7 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbN6 = load i64*, i64** %Hp_Var
  %lnbN8 = getelementptr inbounds i64, i64* %lnbN6, i32 -10
  store i64 %lnbN7, i64* %lnbN8, !tbaa !3
  %lnbNa = load double, double* %ls7tB
  %lnbNb = load double, double* %ls7tl
  %lnbNc = fmul double %lnbNa, %lnbNb
  %lnbNd = load double, double* %ls7t3
  %lnbNe = load double, double* %ls7tb
  %lnbNf = fmul double %lnbNd, %lnbNe
  %lnbNg = fadd double %lnbNc, %lnbNf
  %lnbN9 = load i64*, i64** %Hp_Var
  %lnbNh = getelementptr inbounds i64, i64* %lnbN9, i32 -9
  %lnbNi = bitcast i64* %lnbNh to double*
  store double %lnbNg, double* %lnbNi, !tbaa !3
  %lnbNk = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbNj = load i64*, i64** %Hp_Var
  %lnbNl = getelementptr inbounds i64, i64* %lnbNj, i32 -8
  store i64 %lnbNk, i64* %lnbNl, !tbaa !3
  %lnbNn = load double, double* %ls7tB
  %lnbNo = load double, double* %ls7tj
  %lnbNp = fmul double %lnbNn, %lnbNo
  %lnbNq = load double, double* %ls7t3
  %lnbNr = load double, double* %ls7t9
  %lnbNs = fmul double %lnbNq, %lnbNr
  %lnbNt = fadd double %lnbNp, %lnbNs
  %lnbNm = load i64*, i64** %Hp_Var
  %lnbNu = getelementptr inbounds i64, i64* %lnbNm, i32 -7
  %lnbNv = bitcast i64* %lnbNu to double*
  store double %lnbNt, double* %lnbNv, !tbaa !3
  %lnbNx = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnbNw = load i64*, i64** %Hp_Var
  %lnbNy = getelementptr inbounds i64, i64* %lnbNw, i32 -6
  store i64 %lnbNx, i64* %lnbNy, !tbaa !3
  %lnbNB = load i64*, i64** %Hp_Var
  %lnbNC = ptrtoint i64* %lnbNB to i64
  %lnbND = add i64 %lnbNC, -63
  %lnbNz = load i64*, i64** %Hp_Var
  %lnbNE = getelementptr inbounds i64, i64* %lnbNz, i32 -5
  store i64 %lnbND, i64* %lnbNE, !tbaa !3
  %lnbNH = load i64*, i64** %Hp_Var
  %lnbNI = ptrtoint i64* %lnbNH to i64
  %lnbNJ = add i64 %lnbNI, -79
  %lnbNF = load i64*, i64** %Hp_Var
  %lnbNK = getelementptr inbounds i64, i64* %lnbNF, i32 -4
  store i64 %lnbNJ, i64* %lnbNK, !tbaa !3
  %lnbNN = load i64*, i64** %Hp_Var
  %lnbNO = ptrtoint i64* %lnbNN to i64
  %lnbNP = add i64 %lnbNO, -95
  %lnbNL = load i64*, i64** %Hp_Var
  %lnbNQ = getelementptr inbounds i64, i64* %lnbNL, i32 -3
  store i64 %lnbNP, i64* %lnbNQ, !tbaa !3
  %lnbNS = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnbNR = load i64*, i64** %Hp_Var
  %lnbNT = getelementptr inbounds i64, i64* %lnbNR, i32 -2
  store i64 %lnbNS, i64* %lnbNT, !tbaa !3
  %lnbNV = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnbNW = add i64 %lnbNV, 1
  %lnbNU = load i64*, i64** %Hp_Var
  %lnbNX = getelementptr inbounds i64, i64* %lnbNU, i32 -1
  store i64 %lnbNW, i64* %lnbNX, !tbaa !3
  %lnbO0 = load i64*, i64** %Hp_Var
  %lnbO1 = ptrtoint i64* %lnbO0 to i64
  %lnbO2 = add i64 %lnbO1, -47
  %lnbNY = load i64*, i64** %Hp_Var
  %lnbO3 = getelementptr inbounds i64, i64* %lnbNY, i32 0
  store i64 %lnbO2, i64* %lnbO3, !tbaa !3
  %lnbO5 = load i64*, i64** %Hp_Var
  %lnbO6 = ptrtoint i64* %lnbO5 to i64
  %lnbO7 = add i64 %lnbO6, -15
  store i64 %lnbO7, i64* %R1_Var
  %lnbO8 = load i64*, i64** %Sp_Var
  %lnbO9 = getelementptr inbounds i64, i64* %lnbO8, i32 7
  %lnbOa = ptrtoint i64* %lnbO9 to i64
  %lnbOb = inttoptr i64 %lnbOa to i64*
  store i64* %lnbOb, i64** %Sp_Var
  %lnbOc = load i64*, i64** %Sp_Var
  %lnbOd = getelementptr inbounds i64, i64* %lnbOc, i32 0
  %lnbOe = bitcast i64* %lnbOd to i64*
  %lnbOf = load i64, i64* %lnbOe, !tbaa !2
  %lnbOg = inttoptr i64 %lnbOf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbOh = load i64*, i64** %Sp_Var
  %lnbOi = load i64*, i64** %Hp_Var
  %lnbOj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbOg( i64* %Base_Arg, i64* %lnbOh, i64* %lnbOi, i64 %lnbOj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbFt:
  %lnbOk = load i64*, i64** %Hp_Var
  %lnbOl = getelementptr inbounds i64, i64* %lnbOk, i32 -13
  %lnbOm = ptrtoint i64* %lnbOl to i64
  %lnbOn = inttoptr i64 %lnbOm to i64*
  store i64* %lnbOn, i64** %Hp_Var
  %lnbOo = ptrtoint %r7mC_closure_struct* @r7mC_closure$def to i64
  %lnbOp = add i64 %lnbOo, 1
  store i64 %lnbOp, i64* %R1_Var
  %lnbOq = load i64*, i64** %Sp_Var
  %lnbOr = getelementptr inbounds i64, i64* %lnbOq, i32 7
  %lnbOs = ptrtoint i64* %lnbOr to i64
  %lnbOt = inttoptr i64 %lnbOs to i64*
  store i64* %lnbOt, i64** %Sp_Var
  %lnbOu = load i64*, i64** %Sp_Var
  %lnbOv = getelementptr inbounds i64, i64* %lnbOu, i32 0
  %lnbOw = bitcast i64* %lnbOv to i64*
  %lnbOx = load i64, i64* %lnbOw, !tbaa !2
  %lnbOy = inttoptr i64 %lnbOx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbOz = load i64*, i64** %Sp_Var
  %lnbOA = load i64*, i64** %Hp_Var
  %lnbOB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbOy( i64* %Base_Arg, i64* %lnbOz, i64* %lnbOA, i64 %lnbOB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbGN:
  %lnbOC = load double, double* %ls7t3
  %lnbOD = fdiv double 0x3FF0000000000000, %lnbOC
  store double %lnbOD, double* %ls7tR
  %lnbOE = load double, double* %ls7to
  %lnbOF = fsub double 0x8000000000000000, %lnbOE
  store double %lnbOF, double* %ls7tS
  %lnbOG = load double, double* %ls7tR
  %lnbOH = load double, double* %ls7tR
  %lnbOI = fmul double %lnbOG, %lnbOH
  %lnbOJ = load double, double* %ls7tS
  %lnbOK = load double, double* %ls7tS
  %lnbOL = fmul double %lnbOJ, %lnbOK
  %lnbOM = fsub double 0x3FF0000000000000, %lnbOL
  %lnbON = fmul double %lnbOI, %lnbOM
  %lnbOO = fsub double 0x3FF0000000000000, %lnbON
  store double %lnbOO, double* %ls7tT
  %lnbOP = load double, double* %ls7tT
  %lnbOQ = fcmp olt double %lnbOP, 0x0000000000000000
  %lnbOR = zext i1 %lnbOQ to i64
  switch i64 %lnbOR, label %cbGL [i64 1, label %cbFt]
cbGL:
  %lnbOS = load double, double* %ls7tT
  %lnbOT = call ccc double (double) @llvm.sqrt.f64( double %lnbOS ) nounwind
  store double %lnbOT, double* %lcbFV
  %lnbOV = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbOU = load i64*, i64** %Hp_Var
  %lnbOW = getelementptr inbounds i64, i64* %lnbOU, i32 -12
  store i64 %lnbOV, i64* %lnbOW, !tbaa !3
  %lnbOX = load double, double* %ls7tR
  %lnbOY = load double, double* %ls7tS
  %lnbOZ = fmul double %lnbOX, %lnbOY
  %lnbP0 = load double, double* %lcbFV
  %lnbP1 = fsub double %lnbOZ, %lnbP0
  store double %lnbP1, double* %ls7tZ
  %lnbP3 = load double, double* %ls7tZ
  %lnbP4 = load double, double* %ls7tn
  %lnbP5 = fmul double %lnbP4, 0xBFF0000000000000
  %lnbP6 = fmul double %lnbP3, %lnbP5
  %lnbP7 = load double, double* %ls7tR
  %lnbP8 = load double, double* %ls7td
  %lnbP9 = fmul double %lnbP7, %lnbP8
  %lnbPa = fadd double %lnbP6, %lnbP9
  %lnbP2 = load i64*, i64** %Hp_Var
  %lnbPb = getelementptr inbounds i64, i64* %lnbP2, i32 -11
  %lnbPc = bitcast i64* %lnbPb to double*
  store double %lnbPa, double* %lnbPc, !tbaa !3
  %lnbPe = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbPd = load i64*, i64** %Hp_Var
  %lnbPf = getelementptr inbounds i64, i64* %lnbPd, i32 -10
  store i64 %lnbPe, i64* %lnbPf, !tbaa !3
  %lnbPh = load double, double* %ls7tZ
  %lnbPi = load double, double* %ls7tl
  %lnbPj = fmul double %lnbPi, 0xBFF0000000000000
  %lnbPk = fmul double %lnbPh, %lnbPj
  %lnbPl = load double, double* %ls7tR
  %lnbPm = load double, double* %ls7tb
  %lnbPn = fmul double %lnbPl, %lnbPm
  %lnbPo = fadd double %lnbPk, %lnbPn
  %lnbPg = load i64*, i64** %Hp_Var
  %lnbPp = getelementptr inbounds i64, i64* %lnbPg, i32 -9
  %lnbPq = bitcast i64* %lnbPp to double*
  store double %lnbPo, double* %lnbPq, !tbaa !3
  %lnbPs = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnbPr = load i64*, i64** %Hp_Var
  %lnbPt = getelementptr inbounds i64, i64* %lnbPr, i32 -8
  store i64 %lnbPs, i64* %lnbPt, !tbaa !3
  %lnbPv = load double, double* %ls7tZ
  %lnbPw = load double, double* %ls7tj
  %lnbPx = fmul double %lnbPw, 0xBFF0000000000000
  %lnbPy = fmul double %lnbPv, %lnbPx
  %lnbPz = load double, double* %ls7tR
  %lnbPA = load double, double* %ls7t9
  %lnbPB = fmul double %lnbPz, %lnbPA
  %lnbPC = fadd double %lnbPy, %lnbPB
  %lnbPu = load i64*, i64** %Hp_Var
  %lnbPD = getelementptr inbounds i64, i64* %lnbPu, i32 -7
  %lnbPE = bitcast i64* %lnbPD to double*
  store double %lnbPC, double* %lnbPE, !tbaa !3
  %lnbPG = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnbPF = load i64*, i64** %Hp_Var
  %lnbPH = getelementptr inbounds i64, i64* %lnbPF, i32 -6
  store i64 %lnbPG, i64* %lnbPH, !tbaa !3
  %lnbPK = load i64*, i64** %Hp_Var
  %lnbPL = ptrtoint i64* %lnbPK to i64
  %lnbPM = add i64 %lnbPL, -63
  %lnbPI = load i64*, i64** %Hp_Var
  %lnbPN = getelementptr inbounds i64, i64* %lnbPI, i32 -5
  store i64 %lnbPM, i64* %lnbPN, !tbaa !3
  %lnbPQ = load i64*, i64** %Hp_Var
  %lnbPR = ptrtoint i64* %lnbPQ to i64
  %lnbPS = add i64 %lnbPR, -79
  %lnbPO = load i64*, i64** %Hp_Var
  %lnbPT = getelementptr inbounds i64, i64* %lnbPO, i32 -4
  store i64 %lnbPS, i64* %lnbPT, !tbaa !3
  %lnbPW = load i64*, i64** %Hp_Var
  %lnbPX = ptrtoint i64* %lnbPW to i64
  %lnbPY = add i64 %lnbPX, -95
  %lnbPU = load i64*, i64** %Hp_Var
  %lnbPZ = getelementptr inbounds i64, i64* %lnbPU, i32 -3
  store i64 %lnbPY, i64* %lnbPZ, !tbaa !3
  %lnbQ1 = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnbQ0 = load i64*, i64** %Hp_Var
  %lnbQ2 = getelementptr inbounds i64, i64* %lnbQ0, i32 -2
  store i64 %lnbQ1, i64* %lnbQ2, !tbaa !3
  %lnbQ4 = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnbQ5 = add i64 %lnbQ4, 1
  %lnbQ3 = load i64*, i64** %Hp_Var
  %lnbQ6 = getelementptr inbounds i64, i64* %lnbQ3, i32 -1
  store i64 %lnbQ5, i64* %lnbQ6, !tbaa !3
  %lnbQ9 = load i64*, i64** %Hp_Var
  %lnbQa = ptrtoint i64* %lnbQ9 to i64
  %lnbQb = add i64 %lnbQa, -47
  %lnbQ7 = load i64*, i64** %Hp_Var
  %lnbQc = getelementptr inbounds i64, i64* %lnbQ7, i32 0
  store i64 %lnbQb, i64* %lnbQc, !tbaa !3
  %lnbQe = load i64*, i64** %Hp_Var
  %lnbQf = ptrtoint i64* %lnbQe to i64
  %lnbQg = add i64 %lnbQf, -15
  store i64 %lnbQg, i64* %R1_Var
  %lnbQh = load i64*, i64** %Sp_Var
  %lnbQi = getelementptr inbounds i64, i64* %lnbQh, i32 7
  %lnbQj = ptrtoint i64* %lnbQi to i64
  %lnbQk = inttoptr i64 %lnbQj to i64*
  store i64* %lnbQk, i64** %Sp_Var
  %lnbQl = load i64*, i64** %Sp_Var
  %lnbQm = getelementptr inbounds i64, i64* %lnbQl, i32 0
  %lnbQn = bitcast i64* %lnbQm to i64*
  %lnbQo = load i64, i64* %lnbQn, !tbaa !2
  %lnbQp = inttoptr i64 %lnbQo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbQq = load i64*, i64** %Sp_Var
  %lnbQr = load i64*, i64** %Hp_Var
  %lnbQs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbQp( i64* %Base_Arg, i64* %lnbQq, i64* %lnbQr, i64 %lnbQs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbE7:
  %lnbQt = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 104, i64* %lnbQt, !tbaa !5
  %lnbQu = load i64, i64* %R1_Var
  store i64 %lnbQu, i64* %R1_Var
  %lnbQv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbQw = load i64*, i64** %Sp_Var
  %lnbQx = load i64*, i64** %Hp_Var
  %lnbQy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbQv( i64* %Base_Arg, i64* %lnbQw, i64* %lnbQx, i64 %lnbQy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mk_closure_struct = type <{i64}>
@r7mk_closure$def = internal global %r7mk_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mk_info$def to i64)}>
@r7mk_closure = internal alias i8, bitcast (%r7mk_closure_struct* @r7mk_closure$def to i8*)
@r7mk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mk_info$def to i8*)
define internal ghccc void @r7mk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbRc:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbQK
cbQK:
  %lnbRd = load i64*, i64** %Sp_Var
  %lnbRe = getelementptr inbounds i64, i64* %lnbRd, i32 -2
  %lnbRf = ptrtoint i64* %lnbRe to i64
  %lnbRg = icmp ult i64 %lnbRf, %SpLim_Arg
  %lnbRh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbRg, i1 0 )
  br i1 %lnbRh, label %cbQL, label %ubR6
ubR6:
  %lnbRj = load i64, i64* %R2_Var
  %lnbRi = load i64*, i64** %Sp_Var
  %lnbRk = getelementptr inbounds i64, i64* %lnbRi, i32 -1
  store i64 %lnbRj, i64* %lnbRk, !tbaa !2
  %lnbRl = load i64*, i64** %Sp_Var
  %lnbRm = getelementptr inbounds i64, i64* %lnbRl, i32 -1
  %lnbRn = ptrtoint i64* %lnbRm to i64
  %lnbRo = inttoptr i64 %lnbRn to i64*
  store i64* %lnbRo, i64** %Sp_Var
  %lnbRp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbQA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbRq = load i64*, i64** %Sp_Var
  %lnbRr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbRp( i64* %Base_Arg, i64* %lnbRq, i64* %Hp_Arg, i64 %lnbRr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbQL:
  %lnbRs = load i64, i64* %R2_Var
  store i64 %lnbRs, i64* %R2_Var
  %lnbRt = ptrtoint %r7mk_closure_struct* @r7mk_closure$def to i64
  store i64 %lnbRt, i64* %R1_Var
  %lnbRu = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbRv = bitcast i64* %lnbRu to i64*
  %lnbRw = load i64, i64* %lnbRv, !tbaa !5
  %lnbRx = inttoptr i64 %lnbRw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbRy = load i64*, i64** %Sp_Var
  %lnbRz = load i64, i64* %R1_Var
  %lnbRA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbRx( i64* %Base_Arg, i64* %lnbRy, i64* %Hp_Arg, i64 %lnbRz, i64 %lnbRA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbQA = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbQA$def to i8*)
define internal ghccc void @_cbQA$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbRB:
  %ls7pc = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbQA
cbQA:
  %lnbRC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbRD = bitcast i64* %lnbRC to i64*
  %lnbRE = load i64, i64* %lnbRD, !tbaa !2
  store i64 %lnbRE, i64* %ls7pc
  %lnbRF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQD_info$def to i64
  %lnbRG = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbRF, i64* %lnbRG, !tbaa !2
  %lnbRH = load i64, i64* %ls7pc
  store i64 %lnbRH, i64* %R1_Var
  %lnbRI = load i64, i64* %R1_Var
  %lnbRJ = and i64 %lnbRI, 7
  %lnbRK = icmp ne i64 %lnbRJ, 0
  br i1 %lnbRK, label %ubR8, label %cbQE
cbQE:
  %lnbRM = load i64, i64* %R1_Var
  %lnbRN = inttoptr i64 %lnbRM to i64*
  %lnbRO = load i64, i64* %lnbRN, !tbaa !4
  %lnbRP = inttoptr i64 %lnbRO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbRQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbRP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbRQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubR8:
  %lnbRR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbRS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbRR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbRS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbQD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQD_info$def to i8*)
define internal ghccc void @cbQD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbRT:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7pf = alloca i64, i32 1
  br label %cbQD
cbQD:
  %lnbRU = load i64, i64* %R1_Var
  %lnbRV = and i64 %lnbRU, 7
  switch i64 %lnbRV, label %cbQH [i64 1, label %cbQH
i64 2, label %cbQI]
cbQH:
  %lnbRW = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnbRX = add i64 %lnbRW, 1
  store i64 %lnbRX, i64* %R1_Var
  %lnbRY = load i64*, i64** %Sp_Var
  %lnbRZ = getelementptr inbounds i64, i64* %lnbRY, i32 1
  %lnbS0 = ptrtoint i64* %lnbRZ to i64
  %lnbS1 = inttoptr i64 %lnbS0 to i64*
  store i64* %lnbS1, i64** %Sp_Var
  %lnbS2 = load i64*, i64** %Sp_Var
  %lnbS3 = getelementptr inbounds i64, i64* %lnbS2, i32 0
  %lnbS4 = bitcast i64* %lnbS3 to i64*
  %lnbS5 = load i64, i64* %lnbS4, !tbaa !2
  %lnbS6 = inttoptr i64 %lnbS5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbS7 = load i64*, i64** %Sp_Var
  %lnbS8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbS6( i64* %Base_Arg, i64* %lnbS7, i64* %Hp_Arg, i64 %lnbS8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbQI:
  %lnbSa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQS_info$def to i64
  %lnbS9 = load i64*, i64** %Sp_Var
  %lnbSb = getelementptr inbounds i64, i64* %lnbS9, i32 -1
  store i64 %lnbSa, i64* %lnbSb, !tbaa !2
  %lnbSe = load i64, i64* %R1_Var
  %lnbSf = add i64 %lnbSe, 14
  %lnbSg = inttoptr i64 %lnbSf to i64*
  %lnbSh = load i64, i64* %lnbSg, !tbaa !4
  store i64 %lnbSh, i64* %ls7pf
  %lnbSk = load i64, i64* %R1_Var
  %lnbSl = add i64 %lnbSk, 6
  %lnbSm = inttoptr i64 %lnbSl to i64*
  %lnbSn = load i64, i64* %lnbSm, !tbaa !4
  store i64 %lnbSn, i64* %R1_Var
  %lnbSp = load i64, i64* %ls7pf
  %lnbSo = load i64*, i64** %Sp_Var
  %lnbSq = getelementptr inbounds i64, i64* %lnbSo, i32 0
  store i64 %lnbSp, i64* %lnbSq, !tbaa !2
  %lnbSr = load i64*, i64** %Sp_Var
  %lnbSs = getelementptr inbounds i64, i64* %lnbSr, i32 -1
  %lnbSt = ptrtoint i64* %lnbSs to i64
  %lnbSu = inttoptr i64 %lnbSt to i64*
  store i64* %lnbSu, i64** %Sp_Var
  %lnbSv = load i64, i64* %R1_Var
  %lnbSw = and i64 %lnbSv, 7
  %lnbSx = icmp ne i64 %lnbSw, 0
  br i1 %lnbSx, label %ubR9, label %cbQU
cbQU:
  %lnbSz = load i64, i64* %R1_Var
  %lnbSA = inttoptr i64 %lnbSz to i64*
  %lnbSB = load i64, i64* %lnbSA, !tbaa !4
  %lnbSC = inttoptr i64 %lnbSB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbSD = load i64*, i64** %Sp_Var
  %lnbSE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbSC( i64* %Base_Arg, i64* %lnbSD, i64* %Hp_Arg, i64 %lnbSE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubR9:
  %lnbSF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbSG = load i64*, i64** %Sp_Var
  %lnbSH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbSF( i64* %Base_Arg, i64* %lnbSG, i64* %Hp_Arg, i64 %lnbSH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbQS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbQS_info$def to i8*)
define internal ghccc void @cbQS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbSI:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbQS
cbQS:
  %lnbSJ = load i64, i64* %R1_Var
  %lnbSK = and i64 %lnbSJ, 7
  switch i64 %lnbSK, label %cbR0 [i64 5, label %cbR4]
cbR0:
  %lnbSM = load i64*, i64** %Sp_Var
  %lnbSN = getelementptr inbounds i64, i64* %lnbSM, i32 1
  %lnbSO = bitcast i64* %lnbSN to i64*
  %lnbSP = load i64, i64* %lnbSO, !tbaa !2
  %lnbSL = load i64*, i64** %Sp_Var
  %lnbSQ = getelementptr inbounds i64, i64* %lnbSL, i32 1
  store i64 %lnbSP, i64* %lnbSQ, !tbaa !2
  %lnbSR = load i64*, i64** %Sp_Var
  %lnbSS = getelementptr inbounds i64, i64* %lnbSR, i32 1
  %lnbST = ptrtoint i64* %lnbSS to i64
  %lnbSU = inttoptr i64 %lnbST to i64*
  store i64* %lnbSU, i64** %Sp_Var
  %lnbSV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbQA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbSW = load i64*, i64** %Sp_Var
  %lnbSX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbSV( i64* %Base_Arg, i64* %lnbSW, i64* %Hp_Arg, i64 %lnbSX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbR4:
  %lnbT0 = load i64, i64* %R1_Var
  %lnbT1 = add i64 %lnbT0, 3
  %lnbT2 = inttoptr i64 %lnbT1 to i64*
  %lnbT3 = load i64, i64* %lnbT2, !tbaa !4
  %lnbT4 = and i64 %lnbT3, -8
  store i64 %lnbT4, i64* %R1_Var
  %lnbT5 = load i64*, i64** %Sp_Var
  %lnbT6 = getelementptr inbounds i64, i64* %lnbT5, i32 2
  %lnbT7 = ptrtoint i64* %lnbT6 to i64
  %lnbT8 = inttoptr i64 %lnbT7 to i64*
  store i64* %lnbT8, i64** %Sp_Var
  %lnbTa = load i64, i64* %R1_Var
  %lnbTb = inttoptr i64 %lnbTa to i64*
  %lnbTc = load i64, i64* %lnbTb, !tbaa !4
  %lnbTd = inttoptr i64 %lnbTc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTe = load i64*, i64** %Sp_Var
  %lnbTf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTd( i64* %Base_Arg, i64* %lnbTe, i64* %Hp_Arg, i64 %lnbTf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_reflectsurf_closure_struct = type <{i64}>
@Main_reflectsurf_closure$def = internal global %Main_reflectsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectsurf_info$def to i64)}>
@Main_reflectsurf_closure = alias i8, bitcast (%Main_reflectsurf_closure_struct* @Main_reflectsurf_closure$def to i8*)
@Main_reflectsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectsurf_info$def to i8*)
define ghccc void @Main_reflectsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbTn:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbTk
cbTk:
  %lnbTo = load i64, i64* %R2_Var
  store i64 %lnbTo, i64* %R2_Var
  %lnbTp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7mk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbTq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7ml_closure_struct = type <{i64}>
@r7ml_closure$def = internal global %r7ml_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7ml_info$def to i64)}>
@r7ml_closure = internal alias i8, bitcast (%r7ml_closure_struct* @r7ml_closure$def to i8*)
@r7ml_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7ml_info$def to i8*)
define internal ghccc void @r7ml_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbU4:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbTC
cbTC:
  %lnbU5 = load i64*, i64** %Sp_Var
  %lnbU6 = getelementptr inbounds i64, i64* %lnbU5, i32 -2
  %lnbU7 = ptrtoint i64* %lnbU6 to i64
  %lnbU8 = icmp ult i64 %lnbU7, %SpLim_Arg
  %lnbU9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbU8, i1 0 )
  br i1 %lnbU9, label %cbTD, label %ubTY
ubTY:
  %lnbUb = load i64, i64* %R2_Var
  %lnbUa = load i64*, i64** %Sp_Var
  %lnbUc = getelementptr inbounds i64, i64* %lnbUa, i32 -1
  store i64 %lnbUb, i64* %lnbUc, !tbaa !2
  %lnbUd = load i64*, i64** %Sp_Var
  %lnbUe = getelementptr inbounds i64, i64* %lnbUd, i32 -1
  %lnbUf = ptrtoint i64* %lnbUe to i64
  %lnbUg = inttoptr i64 %lnbUf to i64*
  store i64* %lnbUg, i64** %Sp_Var
  %lnbUh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbTs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUi = load i64*, i64** %Sp_Var
  %lnbUj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUh( i64* %Base_Arg, i64* %lnbUi, i64* %Hp_Arg, i64 %lnbUj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbTD:
  %lnbUk = load i64, i64* %R2_Var
  store i64 %lnbUk, i64* %R2_Var
  %lnbUl = ptrtoint %r7ml_closure_struct* @r7ml_closure$def to i64
  store i64 %lnbUl, i64* %R1_Var
  %lnbUm = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbUn = bitcast i64* %lnbUm to i64*
  %lnbUo = load i64, i64* %lnbUn, !tbaa !5
  %lnbUp = inttoptr i64 %lnbUo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUq = load i64*, i64** %Sp_Var
  %lnbUr = load i64, i64* %R1_Var
  %lnbUs = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUp( i64* %Base_Arg, i64* %lnbUq, i64* %Hp_Arg, i64 %lnbUr, i64 %lnbUs, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cbTs = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbTs$def to i8*)
define internal ghccc void @_cbTs$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nbUt:
  %ls7pj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbTs
cbTs:
  %lnbUu = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbUv = bitcast i64* %lnbUu to i64*
  %lnbUw = load i64, i64* %lnbUv, !tbaa !2
  store i64 %lnbUw, i64* %ls7pj
  %lnbUx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTv_info$def to i64
  %lnbUy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbUx, i64* %lnbUy, !tbaa !2
  %lnbUz = load i64, i64* %ls7pj
  store i64 %lnbUz, i64* %R1_Var
  %lnbUA = load i64, i64* %R1_Var
  %lnbUB = and i64 %lnbUA, 7
  %lnbUC = icmp ne i64 %lnbUB, 0
  br i1 %lnbUC, label %ubU0, label %cbTw
cbTw:
  %lnbUE = load i64, i64* %R1_Var
  %lnbUF = inttoptr i64 %lnbUE to i64*
  %lnbUG = load i64, i64* %lnbUF, !tbaa !4
  %lnbUH = inttoptr i64 %lnbUG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbUI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubU0:
  %lnbUJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbUK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbTv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTv_info$def to i8*)
define internal ghccc void @cbTv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nbUL:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7pm = alloca i64, i32 1
  br label %cbTv
cbTv:
  %lnbUM = load i64, i64* %R1_Var
  %lnbUN = and i64 %lnbUM, 7
  switch i64 %lnbUN, label %cbTz [i64 1, label %cbTz
i64 2, label %cbTA]
cbTz:
  %lnbUO = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnbUP = add i64 %lnbUO, 1
  store i64 %lnbUP, i64* %R1_Var
  %lnbUQ = load i64*, i64** %Sp_Var
  %lnbUR = getelementptr inbounds i64, i64* %lnbUQ, i32 1
  %lnbUS = ptrtoint i64* %lnbUR to i64
  %lnbUT = inttoptr i64 %lnbUS to i64*
  store i64* %lnbUT, i64** %Sp_Var
  %lnbUU = load i64*, i64** %Sp_Var
  %lnbUV = getelementptr inbounds i64, i64* %lnbUU, i32 0
  %lnbUW = bitcast i64* %lnbUV to i64*
  %lnbUX = load i64, i64* %lnbUW, !tbaa !2
  %lnbUY = inttoptr i64 %lnbUX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUZ = load i64*, i64** %Sp_Var
  %lnbV0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUY( i64* %Base_Arg, i64* %lnbUZ, i64* %Hp_Arg, i64 %lnbV0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbTA:
  %lnbV2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTK_info$def to i64
  %lnbV1 = load i64*, i64** %Sp_Var
  %lnbV3 = getelementptr inbounds i64, i64* %lnbV1, i32 -1
  store i64 %lnbV2, i64* %lnbV3, !tbaa !2
  %lnbV6 = load i64, i64* %R1_Var
  %lnbV7 = add i64 %lnbV6, 14
  %lnbV8 = inttoptr i64 %lnbV7 to i64*
  %lnbV9 = load i64, i64* %lnbV8, !tbaa !4
  store i64 %lnbV9, i64* %ls7pm
  %lnbVc = load i64, i64* %R1_Var
  %lnbVd = add i64 %lnbVc, 6
  %lnbVe = inttoptr i64 %lnbVd to i64*
  %lnbVf = load i64, i64* %lnbVe, !tbaa !4
  store i64 %lnbVf, i64* %R1_Var
  %lnbVh = load i64, i64* %ls7pm
  %lnbVg = load i64*, i64** %Sp_Var
  %lnbVi = getelementptr inbounds i64, i64* %lnbVg, i32 0
  store i64 %lnbVh, i64* %lnbVi, !tbaa !2
  %lnbVj = load i64*, i64** %Sp_Var
  %lnbVk = getelementptr inbounds i64, i64* %lnbVj, i32 -1
  %lnbVl = ptrtoint i64* %lnbVk to i64
  %lnbVm = inttoptr i64 %lnbVl to i64*
  store i64* %lnbVm, i64** %Sp_Var
  %lnbVn = load i64, i64* %R1_Var
  %lnbVo = and i64 %lnbVn, 7
  %lnbVp = icmp ne i64 %lnbVo, 0
  br i1 %lnbVp, label %ubU1, label %cbTM
cbTM:
  %lnbVr = load i64, i64* %R1_Var
  %lnbVs = inttoptr i64 %lnbVr to i64*
  %lnbVt = load i64, i64* %lnbVs, !tbaa !4
  %lnbVu = inttoptr i64 %lnbVt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbVv = load i64*, i64** %Sp_Var
  %lnbVw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbVu( i64* %Base_Arg, i64* %lnbVv, i64* %Hp_Arg, i64 %lnbVw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubU1:
  %lnbVx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbVy = load i64*, i64** %Sp_Var
  %lnbVz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbVx( i64* %Base_Arg, i64* %lnbVy, i64* %Hp_Arg, i64 %lnbVz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbTK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbTK_info$def to i8*)
define internal ghccc void @cbTK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nbVA:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbTK
cbTK:
  %lnbVB = load i64, i64* %R1_Var
  %lnbVC = and i64 %lnbVB, 7
  switch i64 %lnbVC, label %cbTS [i64 6, label %cbTW]
cbTS:
  %lnbVE = load i64*, i64** %Sp_Var
  %lnbVF = getelementptr inbounds i64, i64* %lnbVE, i32 1
  %lnbVG = bitcast i64* %lnbVF to i64*
  %lnbVH = load i64, i64* %lnbVG, !tbaa !2
  %lnbVD = load i64*, i64** %Sp_Var
  %lnbVI = getelementptr inbounds i64, i64* %lnbVD, i32 1
  store i64 %lnbVH, i64* %lnbVI, !tbaa !2
  %lnbVJ = load i64*, i64** %Sp_Var
  %lnbVK = getelementptr inbounds i64, i64* %lnbVJ, i32 1
  %lnbVL = ptrtoint i64* %lnbVK to i64
  %lnbVM = inttoptr i64 %lnbVL to i64*
  store i64* %lnbVM, i64** %Sp_Var
  %lnbVN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbTs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbVO = load i64*, i64** %Sp_Var
  %lnbVP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbVN( i64* %Base_Arg, i64* %lnbVO, i64* %Hp_Arg, i64 %lnbVP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbTW:
  %lnbVS = load i64, i64* %R1_Var
  %lnbVT = add i64 %lnbVS, 2
  %lnbVU = inttoptr i64 %lnbVT to i64*
  %lnbVV = load i64, i64* %lnbVU, !tbaa !4
  %lnbVW = and i64 %lnbVV, -8
  store i64 %lnbVW, i64* %R1_Var
  %lnbVX = load i64*, i64** %Sp_Var
  %lnbVY = getelementptr inbounds i64, i64* %lnbVX, i32 2
  %lnbVZ = ptrtoint i64* %lnbVY to i64
  %lnbW0 = inttoptr i64 %lnbVZ to i64*
  store i64* %lnbW0, i64** %Sp_Var
  %lnbW2 = load i64, i64* %R1_Var
  %lnbW3 = inttoptr i64 %lnbW2 to i64*
  %lnbW4 = load i64, i64* %lnbW3, !tbaa !4
  %lnbW5 = inttoptr i64 %lnbW4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbW6 = load i64*, i64** %Sp_Var
  %lnbW7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbW5( i64* %Base_Arg, i64* %lnbW6, i64* %Hp_Arg, i64 %lnbW7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_transmitsurf_closure_struct = type <{i64}>
@Main_transmitsurf_closure$def = internal global %Main_transmitsurf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitsurf_info$def to i64)}>
@Main_transmitsurf_closure = alias i8, bitcast (%Main_transmitsurf_closure_struct* @Main_transmitsurf_closure$def to i8*)
@Main_transmitsurf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitsurf_info$def to i8*)
define ghccc void @Main_transmitsurf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nbWf:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbWc
cbWc:
  %lnbWg = load i64, i64* %R2_Var
  store i64 %lnbWg, i64* %R2_Var
  %lnbWh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7ml_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbWi = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbWh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbWi, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vup_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_vup_closure$def = internal global %Main_vup_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64),i64 1), i64 3}>
@Main_vup_closure = alias i8, bitcast (%Main_vup_closure_struct* @Main_vup_closure$def to i8*)
%Main_redsurf11_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_redsurf11_closure$def = internal global %Main_redsurf11_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf12_closure_struct* @Main_bluesurf12_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_redsurf11_closure = alias i8, bitcast (%Main_redsurf11_closure_struct* @Main_redsurf11_closure$def to i8*)
%Main_redsurf10_closure_struct = type <{i64, i64, i64}>
@Main_redsurf10_closure$def = internal global %Main_redsurf10_closure_struct<{i64 ptrtoint (i8* @Main_Ambient_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf11_closure_struct* @Main_redsurf11_closure$def to i64),i64 1), i64 3}>
@Main_redsurf10_closure = alias i8, bitcast (%Main_redsurf10_closure_struct* @Main_redsurf10_closure$def to i8*)
%Main_redsurf9_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_redsurf9_closure$def = internal global %Main_redsurf9_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf9_closure_struct* @Main_bluesurf9_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_redsurf9_closure = alias i8, bitcast (%Main_redsurf9_closure_struct* @Main_redsurf9_closure$def to i8*)
%Main_redsurf8_closure_struct = type <{i64, i64, i64}>
@Main_redsurf8_closure$def = internal global %Main_redsurf8_closure_struct<{i64 ptrtoint (i8* @Main_Diffuse_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf9_closure_struct* @Main_redsurf9_closure$def to i64),i64 1), i64 3}>
@Main_redsurf8_closure = alias i8, bitcast (%Main_redsurf8_closure_struct* @Main_redsurf8_closure$def to i8*)
%Main_redsurf1_closure_struct = type <{i64, i64, i64, i64}>
@Main_redsurf1_closure$def = internal global %Main_redsurf1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf8_closure_struct* @Main_redsurf8_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_redsurf2_closure_struct* @Main_redsurf2_closure$def to i64),i64 2), i64 3}>
@Main_redsurf1_closure = alias i8, bitcast (%Main_redsurf1_closure_struct* @Main_redsurf1_closure$def to i8*)
%Main_redsurf_closure_struct = type <{i64, i64, i64, i64}>
@Main_redsurf_closure$def = internal global %Main_redsurf_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_redsurf10_closure_struct* @Main_redsurf10_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_redsurf1_closure_struct* @Main_redsurf1_closure$def to i64),i64 2), i64 3}>
@Main_redsurf_closure = alias i8, bitcast (%Main_redsurf_closure_struct* @Main_redsurf_closure$def to i8*)
%Main_greensurf8_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_greensurf8_closure$def = internal global %Main_greensurf8_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf12_closure_struct* @Main_bluesurf12_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_greensurf8_closure = alias i8, bitcast (%Main_greensurf8_closure_struct* @Main_greensurf8_closure$def to i8*)
%Main_greensurf7_closure_struct = type <{i64, i64, i64}>
@Main_greensurf7_closure$def = internal global %Main_greensurf7_closure_struct<{i64 ptrtoint (i8* @Main_Ambient_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf8_closure_struct* @Main_greensurf8_closure$def to i64),i64 1), i64 3}>
@Main_greensurf7_closure = alias i8, bitcast (%Main_greensurf7_closure_struct* @Main_greensurf7_closure$def to i8*)
%Main_greensurf6_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_greensurf6_closure$def = internal global %Main_greensurf6_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf9_closure_struct* @Main_bluesurf9_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_greensurf6_closure = alias i8, bitcast (%Main_greensurf6_closure_struct* @Main_greensurf6_closure$def to i8*)
%Main_greensurf5_closure_struct = type <{i64, i64, i64}>
@Main_greensurf5_closure$def = internal global %Main_greensurf5_closure_struct<{i64 ptrtoint (i8* @Main_Diffuse_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf6_closure_struct* @Main_greensurf6_closure$def to i64),i64 1), i64 3}>
@Main_greensurf5_closure = alias i8, bitcast (%Main_greensurf5_closure_struct* @Main_greensurf5_closure$def to i8*)
%Main_greensurf1_closure_struct = type <{i64, i64, i64, i64}>
@Main_greensurf1_closure$def = internal global %Main_greensurf1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf5_closure_struct* @Main_greensurf5_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_greensurf2_closure_struct* @Main_greensurf2_closure$def to i64),i64 2), i64 3}>
@Main_greensurf1_closure = alias i8, bitcast (%Main_greensurf1_closure_struct* @Main_greensurf1_closure$def to i8*)
%Main_greensurf_closure_struct = type <{i64, i64, i64, i64}>
@Main_greensurf_closure$def = internal global %Main_greensurf_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_greensurf7_closure_struct* @Main_greensurf7_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_greensurf1_closure_struct* @Main_greensurf1_closure$def to i64),i64 2), i64 3}>
@Main_greensurf_closure = alias i8, bitcast (%Main_greensurf_closure_struct* @Main_greensurf_closure$def to i8*)
%Main_bluesurf11_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_bluesurf11_closure$def = internal global %Main_bluesurf11_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf12_closure_struct* @Main_bluesurf12_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf11_closure = alias i8, bitcast (%Main_bluesurf11_closure_struct* @Main_bluesurf11_closure$def to i8*)
%Main_bluesurf10_closure_struct = type <{i64, i64, i64}>
@Main_bluesurf10_closure$def = internal global %Main_bluesurf10_closure_struct<{i64 ptrtoint (i8* @Main_Ambient_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf11_closure_struct* @Main_bluesurf11_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf10_closure = alias i8, bitcast (%Main_bluesurf10_closure_struct* @Main_bluesurf10_closure$def to i8*)
%Main_bluesurf8_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_bluesurf8_closure$def = internal global %Main_bluesurf8_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf9_closure_struct* @Main_bluesurf9_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf8_closure = alias i8, bitcast (%Main_bluesurf8_closure_struct* @Main_bluesurf8_closure$def to i8*)
%Main_bluesurf7_closure_struct = type <{i64, i64, i64}>
@Main_bluesurf7_closure$def = internal global %Main_bluesurf7_closure_struct<{i64 ptrtoint (i8* @Main_Diffuse_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf8_closure_struct* @Main_bluesurf8_closure$def to i64),i64 1), i64 3}>
@Main_bluesurf7_closure = alias i8, bitcast (%Main_bluesurf7_closure_struct* @Main_bluesurf7_closure$def to i8*)
%Main_bluesurf1_closure_struct = type <{i64, i64, i64, i64}>
@Main_bluesurf1_closure$def = internal global %Main_bluesurf1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf7_closure_struct* @Main_bluesurf7_closure$def to i64),i64 2), i64 add (i64 ptrtoint (%Main_bluesurf2_closure_struct* @Main_bluesurf2_closure$def to i64),i64 2), i64 3}>
@Main_bluesurf1_closure = alias i8, bitcast (%Main_bluesurf1_closure_struct* @Main_bluesurf1_closure$def to i8*)
%Main_bluesurf_closure_struct = type <{i64, i64, i64, i64}>
@Main_bluesurf_closure$def = internal global %Main_bluesurf_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_bluesurf10_closure_struct* @Main_bluesurf10_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_bluesurf1_closure_struct* @Main_bluesurf1_closure$def to i64),i64 2), i64 3}>
@Main_bluesurf_closure = alias i8, bitcast (%Main_bluesurf_closure_struct* @Main_bluesurf_closure$def to i8*)
%Main_testspheres35_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres35_closure$def = internal global %Main_testspheres35_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres32_closure_struct* @Main_testspheres32_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres33_closure_struct* @Main_testspheres33_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres35_closure = alias i8, bitcast (%Main_testspheres35_closure_struct* @Main_testspheres35_closure$def to i8*)
%Main_testspheres34_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres34_closure$def = internal global %Main_testspheres34_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres35_closure_struct* @Main_testspheres35_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres34_closure = alias i8, bitcast (%Main_testspheres34_closure_struct* @Main_testspheres34_closure$def to i8*)
%Main_testspheres31_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres31_closure$def = internal global %Main_testspheres31_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres33_closure_struct* @Main_testspheres33_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres32_closure_struct* @Main_testspheres32_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres31_closure = alias i8, bitcast (%Main_testspheres31_closure_struct* @Main_testspheres31_closure$def to i8*)
%Main_testspheres30_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres30_closure$def = internal global %Main_testspheres30_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres31_closure_struct* @Main_testspheres31_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres30_closure = alias i8, bitcast (%Main_testspheres30_closure_struct* @Main_testspheres30_closure$def to i8*)
%Main_testspheres27_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres27_closure$def = internal global %Main_testspheres27_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres13_closure_struct* @Main_testspheres13_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres14_closure_struct* @Main_testspheres14_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres27_closure = alias i8, bitcast (%Main_testspheres27_closure_struct* @Main_testspheres27_closure$def to i8*)
%Main_testspheres26_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres26_closure$def = internal global %Main_testspheres26_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres27_closure_struct* @Main_testspheres27_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres26_closure = alias i8, bitcast (%Main_testspheres26_closure_struct* @Main_testspheres26_closure$def to i8*)
%Main_testspheres25_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres25_closure$def = internal global %Main_testspheres25_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres17_closure_struct* @Main_testspheres17_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres18_closure_struct* @Main_testspheres18_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres25_closure = alias i8, bitcast (%Main_testspheres25_closure_struct* @Main_testspheres25_closure$def to i8*)
%Main_testspheres24_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres24_closure$def = internal global %Main_testspheres24_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres25_closure_struct* @Main_testspheres25_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres24_closure = alias i8, bitcast (%Main_testspheres24_closure_struct* @Main_testspheres24_closure$def to i8*)
%Main_testspheres16_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres16_closure$def = internal global %Main_testspheres16_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres18_closure_struct* @Main_testspheres18_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres17_closure_struct* @Main_testspheres17_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres16_closure = alias i8, bitcast (%Main_testspheres16_closure_struct* @Main_testspheres16_closure$def to i8*)
%Main_testspheres15_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres15_closure$def = internal global %Main_testspheres15_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres16_closure_struct* @Main_testspheres16_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres15_closure = alias i8, bitcast (%Main_testspheres15_closure_struct* @Main_testspheres15_closure$def to i8*)
%Main_testspheres12_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres12_closure$def = internal global %Main_testspheres12_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres14_closure_struct* @Main_testspheres14_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres13_closure_struct* @Main_testspheres13_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@Main_testspheres12_closure = alias i8, bitcast (%Main_testspheres12_closure_struct* @Main_testspheres12_closure$def to i8*)
%Main_testspheres10_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_testspheres10_closure$def = internal global %Main_testspheres10_closure_struct<{i64 ptrtoint (i8* @Main_Sphere_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres12_closure_struct* @Main_testspheres12_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_s2_closure_struct* @Main_s2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres10_closure = alias i8, bitcast (%Main_testspheres10_closure_struct* @Main_testspheres10_closure$def to i8*)
%Main_testspheres9_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres9_closure$def = internal global %Main_testspheres9_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres10_closure_struct* @Main_testspheres10_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_testspheres9_closure = alias i8, bitcast (%Main_testspheres9_closure_struct* @Main_testspheres9_closure$def to i8*)
%Main_testspheres8_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres8_closure$def = internal global %Main_testspheres8_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres15_closure_struct* @Main_testspheres15_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres9_closure_struct* @Main_testspheres9_closure$def to i64),i64 2), i64 3}>
@Main_testspheres8_closure = alias i8, bitcast (%Main_testspheres8_closure_struct* @Main_testspheres8_closure$def to i8*)
%Main_testspheres7_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres7_closure$def = internal global %Main_testspheres7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres19_closure_struct* @Main_testspheres19_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres8_closure_struct* @Main_testspheres8_closure$def to i64),i64 2), i64 3}>
@Main_testspheres7_closure = alias i8, bitcast (%Main_testspheres7_closure_struct* @Main_testspheres7_closure$def to i8*)
%Main_testspheres6_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres6_closure$def = internal global %Main_testspheres6_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres24_closure_struct* @Main_testspheres24_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres7_closure_struct* @Main_testspheres7_closure$def to i64),i64 2), i64 3}>
@Main_testspheres6_closure = alias i8, bitcast (%Main_testspheres6_closure_struct* @Main_testspheres6_closure$def to i8*)
%Main_testspheres5_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres5_closure$def = internal global %Main_testspheres5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres26_closure_struct* @Main_testspheres26_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres6_closure_struct* @Main_testspheres6_closure$def to i64),i64 2), i64 3}>
@Main_testspheres5_closure = alias i8, bitcast (%Main_testspheres5_closure_struct* @Main_testspheres5_closure$def to i8*)
%Main_testspheres4_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres4_closure$def = internal global %Main_testspheres4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres28_closure_struct* @Main_testspheres28_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres5_closure_struct* @Main_testspheres5_closure$def to i64),i64 2), i64 3}>
@Main_testspheres4_closure = alias i8, bitcast (%Main_testspheres4_closure_struct* @Main_testspheres4_closure$def to i8*)
%Main_testspheres3_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres3_closure$def = internal global %Main_testspheres3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres30_closure_struct* @Main_testspheres30_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres4_closure_struct* @Main_testspheres4_closure$def to i64),i64 2), i64 3}>
@Main_testspheres3_closure = alias i8, bitcast (%Main_testspheres3_closure_struct* @Main_testspheres3_closure$def to i8*)
%Main_testspheres2_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres2_closure$def = internal global %Main_testspheres2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres34_closure_struct* @Main_testspheres34_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres3_closure_struct* @Main_testspheres3_closure$def to i64),i64 2), i64 3}>
@Main_testspheres2_closure = alias i8, bitcast (%Main_testspheres2_closure_struct* @Main_testspheres2_closure$def to i8*)
%Main_testspheres1_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres1_closure$def = internal global %Main_testspheres1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres36_closure_struct* @Main_testspheres36_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres2_closure_struct* @Main_testspheres2_closure$def to i64),i64 2), i64 3}>
@Main_testspheres1_closure = alias i8, bitcast (%Main_testspheres1_closure_struct* @Main_testspheres1_closure$def to i8*)
%Main_testspheres_closure_struct = type <{i64, i64, i64, i64}>
@Main_testspheres_closure$def = internal global %Main_testspheres_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 add (i64 ptrtoint (%Main_testspheres39_closure_struct* @Main_testspheres39_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_testspheres1_closure_struct* @Main_testspheres1_closure$def to i64),i64 2), i64 3}>
@Main_testspheres_closure = alias i8, bitcast (%Main_testspheres_closure_struct* @Main_testspheres_closure$def to i8*)
%Main_world_closure_struct = type {}
@Main_world_closure$def = alias %Main_world_closure_struct, bitcast (%Main_testspheres_closure_struct* @Main_testspheres_closure$def to %Main_world_closure_struct*)
@Main_world_closure = alias i8, i8* @Main_testspheres_closure
%r7mB_closure_struct = type <{i64, i64, i64, i64}>
@r7mB_closure$def = internal global %r7mB_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_False_closure to i64),i64 1), i64 add (i64 ptrtoint (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64),i64 1), i64 3}>
@r7mB_closure = internal alias i8, bitcast (%r7mB_closure_struct* @r7mB_closure$def to i8*)
%Main_sphereintersect_closure_struct = type <{i64}>
@Main_sphereintersect_closure$def = internal global %Main_sphereintersect_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sphereintersect_info$def to i64)}>
@Main_sphereintersect_closure = alias i8, bitcast (%Main_sphereintersect_closure_struct* @Main_sphereintersect_closure$def to i8*)
@Main_sphereintersect_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_sphereintersect_info$def to i8*)
define ghccc void @Main_sphereintersect_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 0}>
{
nbZy:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cbWq
cbWq:
  %lnbZz = load i64*, i64** %Sp_Var
  %lnbZA = getelementptr inbounds i64, i64* %lnbZz, i32 -10
  %lnbZB = ptrtoint i64* %lnbZA to i64
  %lnbZC = icmp ult i64 %lnbZB, %SpLim_Arg
  %lnbZD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbZC, i1 0 )
  br i1 %lnbZD, label %cbXs, label %cbXt
cbXt:
  %lnbZF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWn_info$def to i64
  %lnbZE = load i64*, i64** %Sp_Var
  %lnbZG = getelementptr inbounds i64, i64* %lnbZE, i32 -3
  store i64 %lnbZF, i64* %lnbZG, !tbaa !2
  %lnbZH = load i64, i64* %R2_Var
  store i64 %lnbZH, i64* %R1_Var
  %lnbZJ = load i64, i64* %R3_Var
  %lnbZI = load i64*, i64** %Sp_Var
  %lnbZK = getelementptr inbounds i64, i64* %lnbZI, i32 -2
  store i64 %lnbZJ, i64* %lnbZK, !tbaa !2
  %lnbZM = load i64, i64* %R4_Var
  %lnbZL = load i64*, i64** %Sp_Var
  %lnbZN = getelementptr inbounds i64, i64* %lnbZL, i32 -1
  store i64 %lnbZM, i64* %lnbZN, !tbaa !2
  %lnbZO = load i64*, i64** %Sp_Var
  %lnbZP = getelementptr inbounds i64, i64* %lnbZO, i32 -3
  %lnbZQ = ptrtoint i64* %lnbZP to i64
  %lnbZR = inttoptr i64 %lnbZQ to i64*
  store i64* %lnbZR, i64** %Sp_Var
  %lnbZS = load i64, i64* %R1_Var
  %lnbZT = and i64 %lnbZS, 7
  %lnbZU = icmp ne i64 %lnbZT, 0
  br i1 %lnbZU, label %ubZl, label %cbWo
cbWo:
  %lnbZW = load i64, i64* %R1_Var
  %lnbZX = inttoptr i64 %lnbZW to i64*
  %lnbZY = load i64, i64* %lnbZX, !tbaa !4
  %lnbZZ = inttoptr i64 %lnbZY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc00 = load i64*, i64** %Sp_Var
  %lnc01 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbZZ( i64* %Base_Arg, i64* %lnc00, i64* %Hp_Arg, i64 %lnc01, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZl:
  %lnc02 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc03 = load i64*, i64** %Sp_Var
  %lnc04 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc02( i64* %Base_Arg, i64* %lnc03, i64* %Hp_Arg, i64 %lnc04, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbXs:
  %lnc05 = load i64, i64* %R4_Var
  store i64 %lnc05, i64* %R4_Var
  %lnc06 = load i64, i64* %R3_Var
  store i64 %lnc06, i64* %R3_Var
  %lnc07 = load i64, i64* %R2_Var
  store i64 %lnc07, i64* %R2_Var
  %lnc08 = ptrtoint %Main_sphereintersect_closure_struct* @Main_sphereintersect_closure$def to i64
  store i64 %lnc08, i64* %R1_Var
  %lnc09 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnc0a = bitcast i64* %lnc09 to i64*
  %lnc0b = load i64, i64* %lnc0a, !tbaa !5
  %lnc0c = inttoptr i64 %lnc0b to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc0d = load i64*, i64** %Sp_Var
  %lnc0e = load i64, i64* %R1_Var
  %lnc0f = load i64, i64* %R2_Var
  %lnc0g = load i64, i64* %R3_Var
  %lnc0h = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc0c( i64* %Base_Arg, i64* %lnc0d, i64* %Hp_Arg, i64 %lnc0e, i64 %lnc0f, i64 %lnc0g, i64 %lnc0h, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWn_info$def to i8*)
define internal ghccc void @cbWn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nc0i:
  %ls7rM = alloca i64, i32 1
  %ls7rN = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbWn
cbWn:
  %lnc0k = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWt_info$def to i64
  %lnc0j = load i64*, i64** %Sp_Var
  %lnc0l = getelementptr inbounds i64, i64* %lnc0j, i32 -2
  store i64 %lnc0k, i64* %lnc0l, !tbaa !2
  %lnc0o = load i64, i64* %R1_Var
  %lnc0p = add i64 %lnc0o, 15
  %lnc0q = inttoptr i64 %lnc0p to i64*
  %lnc0r = load i64, i64* %lnc0q, !tbaa !4
  store i64 %lnc0r, i64* %ls7rM
  %lnc0u = load i64, i64* %R1_Var
  %lnc0v = add i64 %lnc0u, 23
  %lnc0w = inttoptr i64 %lnc0v to i64*
  %lnc0x = load i64, i64* %lnc0w, !tbaa !4
  store i64 %lnc0x, i64* %ls7rN
  %lnc0A = load i64, i64* %R1_Var
  %lnc0B = add i64 %lnc0A, 7
  %lnc0C = inttoptr i64 %lnc0B to i64*
  %lnc0D = load i64, i64* %lnc0C, !tbaa !4
  store i64 %lnc0D, i64* %R1_Var
  %lnc0F = load i64, i64* %ls7rN
  %lnc0E = load i64*, i64** %Sp_Var
  %lnc0G = getelementptr inbounds i64, i64* %lnc0E, i32 -1
  store i64 %lnc0F, i64* %lnc0G, !tbaa !2
  %lnc0I = load i64, i64* %ls7rM
  %lnc0H = load i64*, i64** %Sp_Var
  %lnc0J = getelementptr inbounds i64, i64* %lnc0H, i32 0
  store i64 %lnc0I, i64* %lnc0J, !tbaa !2
  %lnc0K = load i64*, i64** %Sp_Var
  %lnc0L = getelementptr inbounds i64, i64* %lnc0K, i32 -2
  %lnc0M = ptrtoint i64* %lnc0L to i64
  %lnc0N = inttoptr i64 %lnc0M to i64*
  store i64* %lnc0N, i64** %Sp_Var
  %lnc0O = load i64, i64* %R1_Var
  %lnc0P = and i64 %lnc0O, 7
  %lnc0Q = icmp ne i64 %lnc0P, 0
  br i1 %lnc0Q, label %ubZk, label %cbWu
cbWu:
  %lnc0S = load i64, i64* %R1_Var
  %lnc0T = inttoptr i64 %lnc0S to i64*
  %lnc0U = load i64, i64* %lnc0T, !tbaa !4
  %lnc0V = inttoptr i64 %lnc0U to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc0W = load i64*, i64** %Sp_Var
  %lnc0X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc0V( i64* %Base_Arg, i64* %lnc0W, i64* %Hp_Arg, i64 %lnc0X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZk:
  %lnc0Y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc0Z = load i64*, i64** %Sp_Var
  %lnc10 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc0Y( i64* %Base_Arg, i64* %lnc0Z, i64* %Hp_Arg, i64 %lnc10, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWt_info$def to i8*)
define internal ghccc void @cbWt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nc11:
  %ls7rP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWt
cbWt:
  %lnc12 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWy_info$def to i64
  %lnc13 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc12, i64* %lnc13, !tbaa !2
  %lnc16 = load i64, i64* %R1_Var
  %lnc17 = add i64 %lnc16, 7
  %lnc18 = inttoptr i64 %lnc17 to double*
  %lnc19 = load double, double* %lnc18, !tbaa !4
  store double %lnc19, double* %ls7rP
  %lnc1a = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc1b = bitcast i64* %lnc1a to i64*
  %lnc1c = load i64, i64* %lnc1b, !tbaa !2
  store i64 %lnc1c, i64* %R1_Var
  %lnc1d = load double, double* %ls7rP
  %lnc1e = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc1f = bitcast i64* %lnc1e to double*
  store double %lnc1d, double* %lnc1f, !tbaa !2
  %lnc1g = load i64, i64* %R1_Var
  %lnc1h = and i64 %lnc1g, 7
  %lnc1i = icmp ne i64 %lnc1h, 0
  br i1 %lnc1i, label %ubZm, label %cbWz
cbWz:
  %lnc1k = load i64, i64* %R1_Var
  %lnc1l = inttoptr i64 %lnc1k to i64*
  %lnc1m = load i64, i64* %lnc1l, !tbaa !4
  %lnc1n = inttoptr i64 %lnc1m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc1o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc1n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc1o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZm:
  %lnc1p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWy_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc1q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc1p( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc1q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWy_info$def to i8*)
define internal ghccc void @cbWy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 132, i32 30, i32 0}>
{
nc1r:
  %ls7rR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWy
cbWy:
  %lnc1s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWD_info$def to i64
  %lnc1t = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc1s, i64* %lnc1t, !tbaa !2
  %lnc1w = load i64, i64* %R1_Var
  %lnc1x = add i64 %lnc1w, 7
  %lnc1y = inttoptr i64 %lnc1x to double*
  %lnc1z = load double, double* %lnc1y, !tbaa !4
  store double %lnc1z, double* %ls7rR
  %lnc1A = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc1B = bitcast i64* %lnc1A to i64*
  %lnc1C = load i64, i64* %lnc1B, !tbaa !2
  store i64 %lnc1C, i64* %R1_Var
  %lnc1D = load double, double* %ls7rR
  %lnc1E = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc1F = bitcast i64* %lnc1E to double*
  store double %lnc1D, double* %lnc1F, !tbaa !2
  %lnc1G = load i64, i64* %R1_Var
  %lnc1H = and i64 %lnc1G, 7
  %lnc1I = icmp ne i64 %lnc1H, 0
  br i1 %lnc1I, label %ubZn, label %cbWE
cbWE:
  %lnc1K = load i64, i64* %R1_Var
  %lnc1L = inttoptr i64 %lnc1K to i64*
  %lnc1M = load i64, i64* %lnc1L, !tbaa !4
  %lnc1N = inttoptr i64 %lnc1M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc1O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc1N( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc1O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZn:
  %lnc1P = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc1Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc1P( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc1Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWD_info$def to i8*)
define internal ghccc void @cbWD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
nc1R:
  %ls7rT = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWD
cbWD:
  %lnc1S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWI_info$def to i64
  %lnc1T = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc1S, i64* %lnc1T, !tbaa !2
  %lnc1W = load i64, i64* %R1_Var
  %lnc1X = add i64 %lnc1W, 7
  %lnc1Y = inttoptr i64 %lnc1X to double*
  %lnc1Z = load double, double* %lnc1Y, !tbaa !4
  store double %lnc1Z, double* %ls7rT
  %lnc20 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnc21 = bitcast i64* %lnc20 to i64*
  %lnc22 = load i64, i64* %lnc21, !tbaa !2
  store i64 %lnc22, i64* %R1_Var
  %lnc23 = load double, double* %ls7rT
  %lnc24 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnc25 = bitcast i64* %lnc24 to double*
  store double %lnc23, double* %lnc25, !tbaa !2
  %lnc26 = load i64, i64* %R1_Var
  %lnc27 = and i64 %lnc26, 7
  %lnc28 = icmp ne i64 %lnc27, 0
  br i1 %lnc28, label %ubZo, label %cbWJ
cbWJ:
  %lnc2a = load i64, i64* %R1_Var
  %lnc2b = inttoptr i64 %lnc2a to i64*
  %lnc2c = load i64, i64* %lnc2b, !tbaa !4
  %lnc2d = inttoptr i64 %lnc2c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc2e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc2d( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc2e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZo:
  %lnc2f = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc2g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc2f( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc2g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWI_info$def to i8*)
define internal ghccc void @cbWI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
nc2h:
  %ls7rW = alloca i64, i32 1
  %ls7rX = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbWI
cbWI:
  %lnc2j = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWN_info$def to i64
  %lnc2i = load i64*, i64** %Sp_Var
  %lnc2k = getelementptr inbounds i64, i64* %lnc2i, i32 -2
  store i64 %lnc2j, i64* %lnc2k, !tbaa !2
  %lnc2n = load i64, i64* %R1_Var
  %lnc2o = add i64 %lnc2n, 15
  %lnc2p = inttoptr i64 %lnc2o to i64*
  %lnc2q = load i64, i64* %lnc2p, !tbaa !4
  store i64 %lnc2q, i64* %ls7rW
  %lnc2t = load i64, i64* %R1_Var
  %lnc2u = add i64 %lnc2t, 23
  %lnc2v = inttoptr i64 %lnc2u to i64*
  %lnc2w = load i64, i64* %lnc2v, !tbaa !4
  store i64 %lnc2w, i64* %ls7rX
  %lnc2z = load i64, i64* %R1_Var
  %lnc2A = add i64 %lnc2z, 7
  %lnc2B = inttoptr i64 %lnc2A to i64*
  %lnc2C = load i64, i64* %lnc2B, !tbaa !4
  store i64 %lnc2C, i64* %R1_Var
  %lnc2E = load i64, i64* %ls7rX
  %lnc2D = load i64*, i64** %Sp_Var
  %lnc2F = getelementptr inbounds i64, i64* %lnc2D, i32 -1
  store i64 %lnc2E, i64* %lnc2F, !tbaa !2
  %lnc2H = load i64, i64* %ls7rW
  %lnc2G = load i64*, i64** %Sp_Var
  %lnc2I = getelementptr inbounds i64, i64* %lnc2G, i32 0
  store i64 %lnc2H, i64* %lnc2I, !tbaa !2
  %lnc2J = load i64*, i64** %Sp_Var
  %lnc2K = getelementptr inbounds i64, i64* %lnc2J, i32 -2
  %lnc2L = ptrtoint i64* %lnc2K to i64
  %lnc2M = inttoptr i64 %lnc2L to i64*
  store i64* %lnc2M, i64** %Sp_Var
  %lnc2N = load i64, i64* %R1_Var
  %lnc2O = and i64 %lnc2N, 7
  %lnc2P = icmp ne i64 %lnc2O, 0
  br i1 %lnc2P, label %ubZp, label %cbWO
cbWO:
  %lnc2R = load i64, i64* %R1_Var
  %lnc2S = inttoptr i64 %lnc2R to i64*
  %lnc2T = load i64, i64* %lnc2S, !tbaa !4
  %lnc2U = inttoptr i64 %lnc2T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc2V = load i64*, i64** %Sp_Var
  %lnc2W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc2U( i64* %Base_Arg, i64* %lnc2V, i64* %Hp_Arg, i64 %lnc2W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZp:
  %lnc2X = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc2Y = load i64*, i64** %Sp_Var
  %lnc2Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc2X( i64* %Base_Arg, i64* %lnc2Y, i64* %Hp_Arg, i64 %lnc2Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWN_info$def to i8*)
define internal ghccc void @cbWN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1798, i32 30, i32 0}>
{
nc30:
  %ls7rZ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWN
cbWN:
  %lnc31 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWS_info$def to i64
  %lnc32 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc31, i64* %lnc32, !tbaa !2
  %lnc35 = load i64, i64* %R1_Var
  %lnc36 = add i64 %lnc35, 7
  %lnc37 = inttoptr i64 %lnc36 to double*
  %lnc38 = load double, double* %lnc37, !tbaa !4
  store double %lnc38, double* %ls7rZ
  %lnc39 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc3a = bitcast i64* %lnc39 to i64*
  %lnc3b = load i64, i64* %lnc3a, !tbaa !2
  store i64 %lnc3b, i64* %R1_Var
  %lnc3c = load double, double* %ls7rZ
  %lnc3d = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc3e = bitcast i64* %lnc3d to double*
  store double %lnc3c, double* %lnc3e, !tbaa !2
  %lnc3f = load i64, i64* %R1_Var
  %lnc3g = and i64 %lnc3f, 7
  %lnc3h = icmp ne i64 %lnc3g, 0
  br i1 %lnc3h, label %ubZq, label %cbWT
cbWT:
  %lnc3j = load i64, i64* %R1_Var
  %lnc3k = inttoptr i64 %lnc3j to i64*
  %lnc3l = load i64, i64* %lnc3k, !tbaa !4
  %lnc3m = inttoptr i64 %lnc3l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc3n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZq:
  %lnc3o = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3o( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc3p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWS_info$def to i8*)
define internal ghccc void @cbWS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1926, i32 30, i32 0}>
{
nc3q:
  %ls7s1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWS
cbWS:
  %lnc3r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWX_info$def to i64
  %lnc3s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc3r, i64* %lnc3s, !tbaa !2
  %lnc3v = load i64, i64* %R1_Var
  %lnc3w = add i64 %lnc3v, 7
  %lnc3x = inttoptr i64 %lnc3w to double*
  %lnc3y = load double, double* %lnc3x, !tbaa !4
  store double %lnc3y, double* %ls7s1
  %lnc3z = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc3A = bitcast i64* %lnc3z to i64*
  %lnc3B = load i64, i64* %lnc3A, !tbaa !2
  store i64 %lnc3B, i64* %R1_Var
  %lnc3C = load double, double* %ls7s1
  %lnc3D = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc3E = bitcast i64* %lnc3D to double*
  store double %lnc3C, double* %lnc3E, !tbaa !2
  %lnc3F = load i64, i64* %R1_Var
  %lnc3G = and i64 %lnc3F, 7
  %lnc3H = icmp ne i64 %lnc3G, 0
  br i1 %lnc3H, label %ubZr, label %cbWY
cbWY:
  %lnc3J = load i64, i64* %R1_Var
  %lnc3K = inttoptr i64 %lnc3J to i64*
  %lnc3L = load i64, i64* %lnc3K, !tbaa !4
  %lnc3M = inttoptr i64 %lnc3L to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3M( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc3N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZr:
  %lnc3O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3O( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc3P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbWX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbWX_info$def to i8*)
define internal ghccc void @cbWX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1990, i32 30, i32 0}>
{
nc3Q:
  %ls7s3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbWX
cbWX:
  %lnc3R = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX2_info$def to i64
  %lnc3S = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc3R, i64* %lnc3S, !tbaa !2
  %lnc3V = load i64, i64* %R1_Var
  %lnc3W = add i64 %lnc3V, 7
  %lnc3X = inttoptr i64 %lnc3W to double*
  %lnc3Y = load double, double* %lnc3X, !tbaa !4
  store double %lnc3Y, double* %ls7s3
  %lnc3Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %lnc40 = bitcast i64* %lnc3Z to i64*
  %lnc41 = load i64, i64* %lnc40, !tbaa !2
  store i64 %lnc41, i64* %R1_Var
  %lnc42 = load double, double* %ls7s3
  %lnc43 = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %lnc44 = bitcast i64* %lnc43 to double*
  store double %lnc42, double* %lnc44, !tbaa !2
  %lnc45 = load i64, i64* %R1_Var
  %lnc46 = and i64 %lnc45, 7
  %lnc47 = icmp ne i64 %lnc46, 0
  br i1 %lnc47, label %ubZs, label %cbX3
cbX3:
  %lnc49 = load i64, i64* %R1_Var
  %lnc4a = inttoptr i64 %lnc49 to i64*
  %lnc4b = load i64, i64* %lnc4a, !tbaa !4
  %lnc4c = inttoptr i64 %lnc4b to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4c( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc4d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZs:
  %lnc4e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4e( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc4f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbX2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX2_info$def to i8*)
define internal ghccc void @cbX2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4038, i32 30, i32 0}>
{
nc4g:
  %ls7s6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbX2
cbX2:
  %lnc4i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX7_info$def to i64
  %lnc4h = load i64*, i64** %Sp_Var
  %lnc4j = getelementptr inbounds i64, i64* %lnc4h, i32 -1
  store i64 %lnc4i, i64* %lnc4j, !tbaa !2
  %lnc4m = load i64, i64* %R1_Var
  %lnc4n = add i64 %lnc4m, 15
  %lnc4o = inttoptr i64 %lnc4n to i64*
  %lnc4p = load i64, i64* %lnc4o, !tbaa !4
  store i64 %lnc4p, i64* %ls7s6
  %lnc4s = load i64, i64* %R1_Var
  %lnc4t = add i64 %lnc4s, 7
  %lnc4u = inttoptr i64 %lnc4t to i64*
  %lnc4v = load i64, i64* %lnc4u, !tbaa !4
  store i64 %lnc4v, i64* %R1_Var
  %lnc4x = load i64, i64* %ls7s6
  %lnc4w = load i64*, i64** %Sp_Var
  %lnc4y = getelementptr inbounds i64, i64* %lnc4w, i32 0
  store i64 %lnc4x, i64* %lnc4y, !tbaa !2
  %lnc4z = load i64*, i64** %Sp_Var
  %lnc4A = getelementptr inbounds i64, i64* %lnc4z, i32 -1
  %lnc4B = ptrtoint i64* %lnc4A to i64
  %lnc4C = inttoptr i64 %lnc4B to i64*
  store i64* %lnc4C, i64** %Sp_Var
  %lnc4D = load i64, i64* %R1_Var
  %lnc4E = and i64 %lnc4D, 7
  %lnc4F = icmp ne i64 %lnc4E, 0
  br i1 %lnc4F, label %ubZt, label %cbX8
cbX8:
  %lnc4H = load i64, i64* %R1_Var
  %lnc4I = inttoptr i64 %lnc4H to i64*
  %lnc4J = load i64, i64* %lnc4I, !tbaa !4
  %lnc4K = inttoptr i64 %lnc4J to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4L = load i64*, i64** %Sp_Var
  %lnc4M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4K( i64* %Base_Arg, i64* %lnc4L, i64* %Hp_Arg, i64 %lnc4M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZt:
  %lnc4N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4O = load i64*, i64** %Sp_Var
  %lnc4P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4N( i64* %Base_Arg, i64* %lnc4O, i64* %Hp_Arg, i64 %lnc4P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbX7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbX7_info$def to i8*)
define internal ghccc void @cbX7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8071, i32 30, i32 0}>
{
nc4Q:
  %ls7sa = alloca i64, i32 1
  %ls7sb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cbX7
cbX7:
  %lnc4S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXc_info$def to i64
  %lnc4R = load i64*, i64** %Sp_Var
  %lnc4T = getelementptr inbounds i64, i64* %lnc4R, i32 -2
  store i64 %lnc4S, i64* %lnc4T, !tbaa !2
  %lnc4W = load i64, i64* %R1_Var
  %lnc4X = add i64 %lnc4W, 15
  %lnc4Y = inttoptr i64 %lnc4X to i64*
  %lnc4Z = load i64, i64* %lnc4Y, !tbaa !4
  store i64 %lnc4Z, i64* %ls7sa
  %lnc52 = load i64, i64* %R1_Var
  %lnc53 = add i64 %lnc52, 23
  %lnc54 = inttoptr i64 %lnc53 to i64*
  %lnc55 = load i64, i64* %lnc54, !tbaa !4
  store i64 %lnc55, i64* %ls7sb
  %lnc58 = load i64, i64* %R1_Var
  %lnc59 = add i64 %lnc58, 7
  %lnc5a = inttoptr i64 %lnc59 to i64*
  %lnc5b = load i64, i64* %lnc5a, !tbaa !4
  store i64 %lnc5b, i64* %R1_Var
  %lnc5d = load i64, i64* %ls7sb
  %lnc5c = load i64*, i64** %Sp_Var
  %lnc5e = getelementptr inbounds i64, i64* %lnc5c, i32 -1
  store i64 %lnc5d, i64* %lnc5e, !tbaa !2
  %lnc5g = load i64, i64* %ls7sa
  %lnc5f = load i64*, i64** %Sp_Var
  %lnc5h = getelementptr inbounds i64, i64* %lnc5f, i32 0
  store i64 %lnc5g, i64* %lnc5h, !tbaa !2
  %lnc5i = load i64*, i64** %Sp_Var
  %lnc5j = getelementptr inbounds i64, i64* %lnc5i, i32 -2
  %lnc5k = ptrtoint i64* %lnc5j to i64
  %lnc5l = inttoptr i64 %lnc5k to i64*
  store i64* %lnc5l, i64** %Sp_Var
  %lnc5m = load i64, i64* %R1_Var
  %lnc5n = and i64 %lnc5m, 7
  %lnc5o = icmp ne i64 %lnc5n, 0
  br i1 %lnc5o, label %ubZu, label %cbXd
cbXd:
  %lnc5q = load i64, i64* %R1_Var
  %lnc5r = inttoptr i64 %lnc5q to i64*
  %lnc5s = load i64, i64* %lnc5r, !tbaa !4
  %lnc5t = inttoptr i64 %lnc5s to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5u = load i64*, i64** %Sp_Var
  %lnc5v = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5t( i64* %Base_Arg, i64* %lnc5u, i64* %Hp_Arg, i64 %lnc5v, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZu:
  %lnc5w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5x = load i64*, i64** %Sp_Var
  %lnc5y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5w( i64* %Base_Arg, i64* %lnc5x, i64* %Hp_Arg, i64 %lnc5y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbXc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXc_info$def to i8*)
define internal ghccc void @cbXc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 32265, i32 30, i32 0}>
{
nc5z:
  %ls7sd = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbXc
cbXc:
  %lnc5A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXh_info$def to i64
  %lnc5B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc5A, i64* %lnc5B, !tbaa !2
  %lnc5E = load i64, i64* %R1_Var
  %lnc5F = add i64 %lnc5E, 7
  %lnc5G = inttoptr i64 %lnc5F to double*
  %lnc5H = load double, double* %lnc5G, !tbaa !4
  store double %lnc5H, double* %ls7sd
  %lnc5I = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc5J = bitcast i64* %lnc5I to i64*
  %lnc5K = load i64, i64* %lnc5J, !tbaa !2
  store i64 %lnc5K, i64* %R1_Var
  %lnc5L = load double, double* %ls7sd
  %lnc5M = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnc5N = bitcast i64* %lnc5M to double*
  store double %lnc5L, double* %lnc5N, !tbaa !2
  %lnc5O = load i64, i64* %R1_Var
  %lnc5P = and i64 %lnc5O, 7
  %lnc5Q = icmp ne i64 %lnc5P, 0
  br i1 %lnc5Q, label %ubZv, label %cbXi
cbXi:
  %lnc5S = load i64, i64* %R1_Var
  %lnc5T = inttoptr i64 %lnc5S to i64*
  %lnc5U = load i64, i64* %lnc5T, !tbaa !4
  %lnc5V = inttoptr i64 %lnc5U to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5V( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc5W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZv:
  %lnc5X = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5X( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc5Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbXh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXh_info$def to i8*)
define internal ghccc void @cbXh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 32393, i32 30, i32 0}>
{
nc5Z:
  %ls7sf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbXh
cbXh:
  %lnc60 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXm_info$def to i64
  %lnc61 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc60, i64* %lnc61, !tbaa !2
  %lnc64 = load i64, i64* %R1_Var
  %lnc65 = add i64 %lnc64, 7
  %lnc66 = inttoptr i64 %lnc65 to double*
  %lnc67 = load double, double* %lnc66, !tbaa !4
  store double %lnc67, double* %ls7sf
  %lnc68 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc69 = bitcast i64* %lnc68 to i64*
  %lnc6a = load i64, i64* %lnc69, !tbaa !2
  store i64 %lnc6a, i64* %R1_Var
  %lnc6b = load double, double* %ls7sf
  %lnc6c = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnc6d = bitcast i64* %lnc6c to double*
  store double %lnc6b, double* %lnc6d, !tbaa !2
  %lnc6e = load i64, i64* %R1_Var
  %lnc6f = and i64 %lnc6e, 7
  %lnc6g = icmp ne i64 %lnc6f, 0
  br i1 %lnc6g, label %ubZw, label %cbXn
cbXn:
  %lnc6i = load i64, i64* %R1_Var
  %lnc6j = inttoptr i64 %lnc6i to i64*
  %lnc6k = load i64, i64* %lnc6j, !tbaa !4
  %lnc6l = inttoptr i64 %lnc6k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6l( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc6m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZw:
  %lnc6n = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc6o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbXm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXm_info$def to i8*)
define internal ghccc void @cbXm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 32457, i32 30, i32 0}>
{
nc6p:
  %ls7sh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cbXm
cbXm:
  %lnc6q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXr_info$def to i64
  %lnc6r = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnc6q, i64* %lnc6r, !tbaa !2
  %lnc6u = load i64, i64* %R1_Var
  %lnc6v = add i64 %lnc6u, 7
  %lnc6w = inttoptr i64 %lnc6v to double*
  %lnc6x = load double, double* %lnc6w, !tbaa !4
  store double %lnc6x, double* %ls7sh
  %lnc6y = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnc6z = bitcast i64* %lnc6y to i64*
  %lnc6A = load i64, i64* %lnc6z, !tbaa !2
  store i64 %lnc6A, i64* %R1_Var
  %lnc6B = load double, double* %ls7sh
  %lnc6C = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnc6D = bitcast i64* %lnc6C to double*
  store double %lnc6B, double* %lnc6D, !tbaa !2
  %lnc6E = load i64, i64* %R1_Var
  %lnc6F = and i64 %lnc6E, 7
  %lnc6G = icmp ne i64 %lnc6F, 0
  br i1 %lnc6G, label %ubZx, label %cbXH
cbXH:
  %lnc6I = load i64, i64* %R1_Var
  %lnc6J = inttoptr i64 %lnc6I to i64*
  %lnc6K = load i64, i64* %lnc6J, !tbaa !4
  %lnc6L = inttoptr i64 %lnc6K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6L( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc6M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubZx:
  %lnc6N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6N( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnc6O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbXr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbXr_info$def to i8*)
define internal ghccc void @cbXr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 32713, i32 30, i32 0}>
{
nc6P:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7sj = alloca double, i32 1
  %ls7sk = alloca double, i32 1
  %ls7sl = alloca double, i32 1
  %ls7sm = alloca double, i32 1
  %ls7sn = alloca double, i32 1
  %ls7ss = alloca double, i32 1
  %lcbYG = alloca double, i32 1
  %ls7sC = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lcbYY = alloca double, i32 1
  %ls7sH = alloca double, i32 1
  br label %cbXr
cbXr:
  %lnc6Q = load i64*, i64** %Hp_Var
  %lnc6R = getelementptr inbounds i64, i64* %lnc6Q, i32 5
  %lnc6S = ptrtoint i64* %lnc6R to i64
  %lnc6T = inttoptr i64 %lnc6S to i64*
  store i64* %lnc6T, i64** %Hp_Var
  %lnc6U = load i64*, i64** %Hp_Var
  %lnc6V = ptrtoint i64* %lnc6U to i64
  %lnc6W = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnc6X = bitcast i64* %lnc6W to i64*
  %lnc6Y = load i64, i64* %lnc6X, !tbaa !5
  %lnc6Z = icmp ugt i64 %lnc6V, %lnc6Y
  %lnc70 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnc6Z, i1 0 )
  br i1 %lnc70, label %cbXN, label %cbXM
cbXM:
  %lnc73 = load i64, i64* %R1_Var
  %lnc74 = add i64 %lnc73, 7
  %lnc75 = inttoptr i64 %lnc74 to double*
  %lnc76 = load double, double* %lnc75, !tbaa !4
  store double %lnc76, double* %ls7sj
  %lnc77 = load i64*, i64** %Sp_Var
  %lnc78 = getelementptr inbounds i64, i64* %lnc77, i32 7
  %lnc79 = bitcast i64* %lnc78 to double*
  %lnc7a = load double, double* %lnc79, !tbaa !2
  %lnc7b = load i64*, i64** %Sp_Var
  %lnc7c = getelementptr inbounds i64, i64* %lnc7b, i32 2
  %lnc7d = bitcast i64* %lnc7c to double*
  %lnc7e = load double, double* %lnc7d, !tbaa !2
  %lnc7f = fsub double %lnc7a, %lnc7e
  store double %lnc7f, double* %ls7sk
  %lnc7g = load i64*, i64** %Sp_Var
  %lnc7h = getelementptr inbounds i64, i64* %lnc7g, i32 6
  %lnc7i = bitcast i64* %lnc7h to double*
  %lnc7j = load double, double* %lnc7i, !tbaa !2
  %lnc7k = load i64*, i64** %Sp_Var
  %lnc7l = getelementptr inbounds i64, i64* %lnc7k, i32 1
  %lnc7m = bitcast i64* %lnc7l to double*
  %lnc7n = load double, double* %lnc7m, !tbaa !2
  %lnc7o = fsub double %lnc7j, %lnc7n
  store double %lnc7o, double* %ls7sl
  %lnc7p = load i64*, i64** %Sp_Var
  %lnc7q = getelementptr inbounds i64, i64* %lnc7p, i32 8
  %lnc7r = bitcast i64* %lnc7q to double*
  %lnc7s = load double, double* %lnc7r, !tbaa !2
  %lnc7t = load i64*, i64** %Sp_Var
  %lnc7u = getelementptr inbounds i64, i64* %lnc7t, i32 3
  %lnc7v = bitcast i64* %lnc7u to double*
  %lnc7w = load double, double* %lnc7v, !tbaa !2
  %lnc7x = fsub double %lnc7s, %lnc7w
  store double %lnc7x, double* %ls7sm
  %lnc7y = load double, double* %ls7sk
  %lnc7z = load i64*, i64** %Sp_Var
  %lnc7A = getelementptr inbounds i64, i64* %lnc7z, i32 5
  %lnc7B = bitcast i64* %lnc7A to double*
  %lnc7C = load double, double* %lnc7B, !tbaa !2
  %lnc7D = fmul double %lnc7y, %lnc7C
  %lnc7E = load double, double* %ls7sl
  %lnc7F = load i64*, i64** %Sp_Var
  %lnc7G = getelementptr inbounds i64, i64* %lnc7F, i32 4
  %lnc7H = bitcast i64* %lnc7G to double*
  %lnc7I = load double, double* %lnc7H, !tbaa !2
  %lnc7J = fmul double %lnc7E, %lnc7I
  %lnc7K = fadd double %lnc7D, %lnc7J
  %lnc7L = load double, double* %ls7sm
  %lnc7M = load i64*, i64** %Sp_Var
  %lnc7N = getelementptr inbounds i64, i64* %lnc7M, i32 9
  %lnc7O = bitcast i64* %lnc7N to double*
  %lnc7P = load double, double* %lnc7O, !tbaa !2
  %lnc7Q = fmul double %lnc7L, %lnc7P
  %lnc7R = fadd double %lnc7K, %lnc7Q
  store double %lnc7R, double* %ls7sn
  %lnc7S = load double, double* %ls7sn
  %lnc7T = load double, double* %ls7sn
  %lnc7U = fmul double %lnc7S, %lnc7T
  %lnc7V = load double, double* %ls7sk
  %lnc7W = load double, double* %ls7sk
  %lnc7X = fmul double %lnc7V, %lnc7W
  %lnc7Y = load double, double* %ls7sl
  %lnc7Z = load double, double* %ls7sl
  %lnc80 = fmul double %lnc7Y, %lnc7Z
  %lnc81 = fadd double %lnc7X, %lnc80
  %lnc82 = load double, double* %ls7sm
  %lnc83 = load double, double* %ls7sm
  %lnc84 = fmul double %lnc82, %lnc83
  %lnc85 = fadd double %lnc81, %lnc84
  %lnc86 = fsub double %lnc7U, %lnc85
  %lnc87 = load double, double* %ls7sj
  %lnc88 = load double, double* %ls7sj
  %lnc89 = fmul double %lnc87, %lnc88
  %lnc8a = fadd double %lnc86, %lnc89
  store double %lnc8a, double* %ls7ss
  %lnc8b = load double, double* %ls7ss
  %lnc8c = fcmp olt double %lnc8b, 0x0000000000000000
  %lnc8d = zext i1 %lnc8c to i64
  switch i64 %lnc8d, label %cbZi [i64 1, label %cbZf]
cbZi:
  %lnc8e = load double, double* %ls7ss
  %lnc8f = call ccc double (double) @llvm.sqrt.f64( double %lnc8e ) nounwind
  store double %lnc8f, double* %lcbYG
  %lnc8g = load double, double* %ls7sn
  %lnc8h = fsub double 0x8000000000000000, %lnc8g
  %lnc8i = load double, double* %lcbYG
  %lnc8j = fsub double %lnc8h, %lnc8i
  store double %lnc8j, double* %ls7sC
  %lnc8k = load double, double* %ls7sC
  %lnc8l = fcmp olt double %lnc8k, 0x0000000000000000
  %lnc8m = zext i1 %lnc8l to i64
  switch i64 %lnc8m, label %cbYW [i64 1, label %cbZg]
cbYW:
  %lnc8o = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnc8n = load i64*, i64** %Hp_Var
  %lnc8p = getelementptr inbounds i64, i64* %lnc8n, i32 -4
  store i64 %lnc8o, i64* %lnc8p, !tbaa !3
  %lnc8r = load double, double* %ls7sC
  %lnc8q = load i64*, i64** %Hp_Var
  %lnc8s = getelementptr inbounds i64, i64* %lnc8q, i32 -3
  %lnc8t = bitcast i64* %lnc8s to double*
  store double %lnc8r, double* %lnc8t, !tbaa !3
  %lnc8v = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnc8u = load i64*, i64** %Hp_Var
  %lnc8w = getelementptr inbounds i64, i64* %lnc8u, i32 -2
  store i64 %lnc8v, i64* %lnc8w, !tbaa !3
  %lnc8y = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnc8z = add i64 %lnc8y, 2
  %lnc8x = load i64*, i64** %Hp_Var
  %lnc8A = getelementptr inbounds i64, i64* %lnc8x, i32 -1
  store i64 %lnc8z, i64* %lnc8A, !tbaa !3
  %lnc8D = load i64*, i64** %Hp_Var
  %lnc8E = ptrtoint i64* %lnc8D to i64
  %lnc8F = add i64 %lnc8E, -31
  %lnc8B = load i64*, i64** %Hp_Var
  %lnc8G = getelementptr inbounds i64, i64* %lnc8B, i32 0
  store i64 %lnc8F, i64* %lnc8G, !tbaa !3
  %lnc8I = load i64*, i64** %Hp_Var
  %lnc8J = ptrtoint i64* %lnc8I to i64
  %lnc8K = add i64 %lnc8J, -15
  store i64 %lnc8K, i64* %R1_Var
  %lnc8L = load i64*, i64** %Sp_Var
  %lnc8M = getelementptr inbounds i64, i64* %lnc8L, i32 10
  %lnc8N = ptrtoint i64* %lnc8M to i64
  %lnc8O = inttoptr i64 %lnc8N to i64*
  store i64* %lnc8O, i64** %Sp_Var
  %lnc8P = load i64*, i64** %Sp_Var
  %lnc8Q = getelementptr inbounds i64, i64* %lnc8P, i32 0
  %lnc8R = bitcast i64* %lnc8Q to i64*
  %lnc8S = load i64, i64* %lnc8R, !tbaa !2
  %lnc8T = inttoptr i64 %lnc8S to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc8U = load i64*, i64** %Sp_Var
  %lnc8V = load i64*, i64** %Hp_Var
  %lnc8W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc8T( i64* %Base_Arg, i64* %lnc8U, i64* %lnc8V, i64 %lnc8W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbZg:
  %lnc8X = load double, double* %ls7ss
  %lnc8Y = call ccc double (double) @llvm.sqrt.f64( double %lnc8X ) nounwind
  store double %lnc8Y, double* %lcbYY
  %lnc8Z = load double, double* %ls7sn
  %lnc90 = fsub double 0x8000000000000000, %lnc8Z
  %lnc91 = load double, double* %lcbYY
  %lnc92 = fadd double %lnc90, %lnc91
  store double %lnc92, double* %ls7sH
  %lnc93 = load double, double* %ls7sH
  %lnc94 = fcmp olt double %lnc93, 0x0000000000000000
  %lnc95 = zext i1 %lnc94 to i64
  switch i64 %lnc95, label %cbZe [i64 1, label %cbZf]
cbZe:
  %lnc97 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnc96 = load i64*, i64** %Hp_Var
  %lnc98 = getelementptr inbounds i64, i64* %lnc96, i32 -4
  store i64 %lnc97, i64* %lnc98, !tbaa !3
  %lnc9a = load double, double* %ls7sH
  %lnc99 = load i64*, i64** %Hp_Var
  %lnc9b = getelementptr inbounds i64, i64* %lnc99, i32 -3
  %lnc9c = bitcast i64* %lnc9b to double*
  store double %lnc9a, double* %lnc9c, !tbaa !3
  %lnc9e = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnc9d = load i64*, i64** %Hp_Var
  %lnc9f = getelementptr inbounds i64, i64* %lnc9d, i32 -2
  store i64 %lnc9e, i64* %lnc9f, !tbaa !3
  %lnc9h = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnc9i = add i64 %lnc9h, 2
  %lnc9g = load i64*, i64** %Hp_Var
  %lnc9j = getelementptr inbounds i64, i64* %lnc9g, i32 -1
  store i64 %lnc9i, i64* %lnc9j, !tbaa !3
  %lnc9m = load i64*, i64** %Hp_Var
  %lnc9n = ptrtoint i64* %lnc9m to i64
  %lnc9o = add i64 %lnc9n, -31
  %lnc9k = load i64*, i64** %Hp_Var
  %lnc9p = getelementptr inbounds i64, i64* %lnc9k, i32 0
  store i64 %lnc9o, i64* %lnc9p, !tbaa !3
  %lnc9r = load i64*, i64** %Hp_Var
  %lnc9s = ptrtoint i64* %lnc9r to i64
  %lnc9t = add i64 %lnc9s, -15
  store i64 %lnc9t, i64* %R1_Var
  %lnc9u = load i64*, i64** %Sp_Var
  %lnc9v = getelementptr inbounds i64, i64* %lnc9u, i32 10
  %lnc9w = ptrtoint i64* %lnc9v to i64
  %lnc9x = inttoptr i64 %lnc9w to i64*
  store i64* %lnc9x, i64** %Sp_Var
  %lnc9y = load i64*, i64** %Sp_Var
  %lnc9z = getelementptr inbounds i64, i64* %lnc9y, i32 0
  %lnc9A = bitcast i64* %lnc9z to i64*
  %lnc9B = load i64, i64* %lnc9A, !tbaa !2
  %lnc9C = inttoptr i64 %lnc9B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc9D = load i64*, i64** %Sp_Var
  %lnc9E = load i64*, i64** %Hp_Var
  %lnc9F = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc9C( i64* %Base_Arg, i64* %lnc9D, i64* %lnc9E, i64 %lnc9F, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbZf:
  %lnc9G = load i64*, i64** %Hp_Var
  %lnc9H = getelementptr inbounds i64, i64* %lnc9G, i32 -5
  %lnc9I = ptrtoint i64* %lnc9H to i64
  %lnc9J = inttoptr i64 %lnc9I to i64*
  store i64* %lnc9J, i64** %Hp_Var
  %lnc9K = ptrtoint %r7mB_closure_struct* @r7mB_closure$def to i64
  %lnc9L = add i64 %lnc9K, 1
  store i64 %lnc9L, i64* %R1_Var
  %lnc9M = load i64*, i64** %Sp_Var
  %lnc9N = getelementptr inbounds i64, i64* %lnc9M, i32 10
  %lnc9O = ptrtoint i64* %lnc9N to i64
  %lnc9P = inttoptr i64 %lnc9O to i64*
  store i64* %lnc9P, i64** %Sp_Var
  %lnc9Q = load i64*, i64** %Sp_Var
  %lnc9R = getelementptr inbounds i64, i64* %lnc9Q, i32 0
  %lnc9S = bitcast i64* %lnc9R to i64*
  %lnc9T = load i64, i64* %lnc9S, !tbaa !2
  %lnc9U = inttoptr i64 %lnc9T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc9V = load i64*, i64** %Sp_Var
  %lnc9W = load i64*, i64** %Hp_Var
  %lnc9X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc9U( i64* %Base_Arg, i64* %lnc9V, i64* %lnc9W, i64 %lnc9X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbXN:
  %lnc9Y = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnc9Y, !tbaa !5
  %lnc9Z = load i64, i64* %R1_Var
  store i64 %lnc9Z, i64* %R1_Var
  %lnca0 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnca1 = load i64*, i64** %Sp_Var
  %lnca2 = load i64*, i64** %Hp_Var
  %lnca3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnca0( i64* %Base_Arg, i64* %lnca1, i64* %lnca2, i64 %lnca3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwgo3_closure_struct = type <{i64}>
@Main_zdwgo3_closure$def = internal global %Main_zdwgo3_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo3_info$def to i64)}>
@Main_zdwgo3_closure = alias i8, bitcast (%Main_zdwgo3_closure_struct* @Main_zdwgo3_closure$def to i8*)
@s7BU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BU_info$def to i8*)
define internal ghccc void @s7BU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncaW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccap
ccap:
  %lncaX = load i64*, i64** %Sp_Var
  %lncaY = getelementptr inbounds i64, i64* %lncaX, i32 -2
  %lncaZ = ptrtoint i64* %lncaY to i64
  %lncb0 = icmp ult i64 %lncaZ, %SpLim_Arg
  %lncb1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncb0, i1 0 )
  br i1 %lncb1, label %ccaq, label %ccar
ccar:
  %lncb3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lncb2 = load i64*, i64** %Sp_Var
  %lncb4 = getelementptr inbounds i64, i64* %lncb2, i32 -2
  store i64 %lncb3, i64* %lncb4, !tbaa !2
  %lncb6 = load i64, i64* %R1_Var
  %lncb5 = load i64*, i64** %Sp_Var
  %lncb7 = getelementptr inbounds i64, i64* %lncb5, i32 -1
  store i64 %lncb6, i64* %lncb7, !tbaa !2
  %lncba = load i64, i64* %R1_Var
  %lncbb = add i64 %lncba, 24
  %lncbc = inttoptr i64 %lncbb to i64*
  %lncbd = load i64, i64* %lncbc, !tbaa !4
  store i64 %lncbd, i64* %R3_Var
  %lncbg = load i64, i64* %R1_Var
  %lncbh = add i64 %lncbg, 16
  %lncbi = inttoptr i64 %lncbh to i64*
  %lncbj = load i64, i64* %lncbi, !tbaa !4
  store i64 %lncbj, i64* %R2_Var
  %lncbk = load i64*, i64** %Sp_Var
  %lncbl = getelementptr inbounds i64, i64* %lncbk, i32 -2
  %lncbm = ptrtoint i64* %lncbl to i64
  %lncbn = inttoptr i64 %lncbm to i64*
  store i64* %lncbn, i64** %Sp_Var
  %lncbo = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncbp = load i64*, i64** %Sp_Var
  %lncbq = load i64, i64* %R1_Var
  %lncbr = load i64, i64* %R2_Var
  %lncbs = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncbo( i64* %Base_Arg, i64* %lncbp, i64* %Hp_Arg, i64 %lncbq, i64 %lncbr, i64 %lncbs, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccaq:
  %lncbt = load i64, i64* %R1_Var
  store i64 %lncbt, i64* %R1_Var
  %lncbu = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncbv = bitcast i64* %lncbu to i64*
  %lncbw = load i64, i64* %lncbv, !tbaa !5
  %lncbx = inttoptr i64 %lncbw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncby = load i64*, i64** %Sp_Var
  %lncbz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncbx( i64* %Base_Arg, i64* %lncby, i64* %Hp_Arg, i64 %lncbz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7BT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BT_info$def to i8*)
define internal ghccc void @s7BT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncbA:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccaw
ccaw:
  %lncbB = load i64*, i64** %Sp_Var
  %lncbC = getelementptr inbounds i64, i64* %lncbB, i32 -2
  %lncbD = ptrtoint i64* %lncbC to i64
  %lncbE = icmp ult i64 %lncbD, %SpLim_Arg
  %lncbF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncbE, i1 0 )
  br i1 %lncbF, label %ccax, label %ccay
ccay:
  %lncbH = ptrtoint i8* @stg_upd_frame_info to i64
  %lncbG = load i64*, i64** %Sp_Var
  %lncbI = getelementptr inbounds i64, i64* %lncbG, i32 -2
  store i64 %lncbH, i64* %lncbI, !tbaa !2
  %lncbK = load i64, i64* %R1_Var
  %lncbJ = load i64*, i64** %Sp_Var
  %lncbL = getelementptr inbounds i64, i64* %lncbJ, i32 -1
  store i64 %lncbK, i64* %lncbL, !tbaa !2
  %lncbO = load i64, i64* %R1_Var
  %lncbP = add i64 %lncbO, 24
  %lncbQ = inttoptr i64 %lncbP to i64*
  %lncbR = load i64, i64* %lncbQ, !tbaa !4
  store i64 %lncbR, i64* %R3_Var
  %lncbU = load i64, i64* %R1_Var
  %lncbV = add i64 %lncbU, 16
  %lncbW = inttoptr i64 %lncbV to i64*
  %lncbX = load i64, i64* %lncbW, !tbaa !4
  store i64 %lncbX, i64* %R2_Var
  %lncbY = load i64*, i64** %Sp_Var
  %lncbZ = getelementptr inbounds i64, i64* %lncbY, i32 -2
  %lncc0 = ptrtoint i64* %lncbZ to i64
  %lncc1 = inttoptr i64 %lncc0 to i64*
  store i64* %lncc1, i64** %Sp_Var
  %lncc2 = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncc3 = load i64*, i64** %Sp_Var
  %lncc4 = load i64, i64* %R1_Var
  %lncc5 = load i64, i64* %R2_Var
  %lncc6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncc2( i64* %Base_Arg, i64* %lncc3, i64* %Hp_Arg, i64 %lncc4, i64 %lncc5, i64 %lncc6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccax:
  %lncc7 = load i64, i64* %R1_Var
  store i64 %lncc7, i64* %R1_Var
  %lncc8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncc9 = bitcast i64* %lncc8 to i64*
  %lncca = load i64, i64* %lncc9, !tbaa !5
  %lnccb = inttoptr i64 %lncca to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnccc = load i64*, i64** %Sp_Var
  %lnccd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnccb( i64* %Base_Arg, i64* %lnccc, i64* %Hp_Arg, i64 %lnccd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7BS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BS_info$def to i8*)
define internal ghccc void @s7BS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncce:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccaD
ccaD:
  %lnccf = load i64*, i64** %Sp_Var
  %lnccg = getelementptr inbounds i64, i64* %lnccf, i32 -2
  %lncch = ptrtoint i64* %lnccg to i64
  %lncci = icmp ult i64 %lncch, %SpLim_Arg
  %lnccj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncci, i1 0 )
  br i1 %lnccj, label %ccaE, label %ccaF
ccaF:
  %lnccl = ptrtoint i8* @stg_upd_frame_info to i64
  %lncck = load i64*, i64** %Sp_Var
  %lnccm = getelementptr inbounds i64, i64* %lncck, i32 -2
  store i64 %lnccl, i64* %lnccm, !tbaa !2
  %lncco = load i64, i64* %R1_Var
  %lnccn = load i64*, i64** %Sp_Var
  %lnccp = getelementptr inbounds i64, i64* %lnccn, i32 -1
  store i64 %lncco, i64* %lnccp, !tbaa !2
  %lnccs = load i64, i64* %R1_Var
  %lncct = add i64 %lnccs, 24
  %lnccu = inttoptr i64 %lncct to i64*
  %lnccv = load i64, i64* %lnccu, !tbaa !4
  store i64 %lnccv, i64* %R3_Var
  %lnccy = load i64, i64* %R1_Var
  %lnccz = add i64 %lnccy, 16
  %lnccA = inttoptr i64 %lnccz to i64*
  %lnccB = load i64, i64* %lnccA, !tbaa !4
  store i64 %lnccB, i64* %R2_Var
  %lnccC = load i64*, i64** %Sp_Var
  %lnccD = getelementptr inbounds i64, i64* %lnccC, i32 -2
  %lnccE = ptrtoint i64* %lnccD to i64
  %lnccF = inttoptr i64 %lnccE to i64*
  store i64* %lnccF, i64** %Sp_Var
  %lnccG = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnccH = load i64*, i64** %Sp_Var
  %lnccI = load i64, i64* %R1_Var
  %lnccJ = load i64, i64* %R2_Var
  %lnccK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnccG( i64* %Base_Arg, i64* %lnccH, i64* %Hp_Arg, i64 %lnccI, i64 %lnccJ, i64 %lnccK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccaE:
  %lnccL = load i64, i64* %R1_Var
  store i64 %lnccL, i64* %R1_Var
  %lnccM = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnccN = bitcast i64* %lnccM to i64*
  %lnccO = load i64, i64* %lnccN, !tbaa !5
  %lnccP = inttoptr i64 %lnccO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnccQ = load i64*, i64** %Sp_Var
  %lnccR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnccP( i64* %Base_Arg, i64* %lnccQ, i64* %Hp_Arg, i64 %lnccR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwgo3_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo3_info$def to i8*)
define ghccc void @Main_zdwgo3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nccS:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ccaK
ccaK:
  %lnccT = load i64*, i64** %Sp_Var
  %lnccU = getelementptr inbounds i64, i64* %lnccT, i32 -4
  %lnccV = ptrtoint i64* %lnccU to i64
  %lnccW = icmp ult i64 %lnccV, %SpLim_Arg
  %lnccX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnccW, i1 0 )
  br i1 %lnccX, label %ccaL, label %ccaM
ccaM:
  %lnccZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cca8_info$def to i64
  %lnccY = load i64*, i64** %Sp_Var
  %lncd0 = getelementptr inbounds i64, i64* %lnccY, i32 -1
  store i64 %lnccZ, i64* %lncd0, !tbaa !2
  %lncd1 = load i64, i64* %R2_Var
  store i64 %lncd1, i64* %R1_Var
  %lncd2 = load i64*, i64** %Sp_Var
  %lncd3 = getelementptr inbounds i64, i64* %lncd2, i32 -1
  %lncd4 = ptrtoint i64* %lncd3 to i64
  %lncd5 = inttoptr i64 %lncd4 to i64*
  store i64* %lncd5, i64** %Sp_Var
  %lncd6 = load i64, i64* %R1_Var
  %lncd7 = and i64 %lncd6, 7
  %lncd8 = icmp ne i64 %lncd7, 0
  br i1 %lncd8, label %ucaV, label %cca9
cca9:
  %lncda = load i64, i64* %R1_Var
  %lncdb = inttoptr i64 %lncda to i64*
  %lncdc = load i64, i64* %lncdb, !tbaa !4
  %lncdd = inttoptr i64 %lncdc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncde = load i64*, i64** %Sp_Var
  %lncdf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdd( i64* %Base_Arg, i64* %lncde, i64* %Hp_Arg, i64 %lncdf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucaV:
  %lncdg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cca8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncdh = load i64*, i64** %Sp_Var
  %lncdi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdg( i64* %Base_Arg, i64* %lncdh, i64* %Hp_Arg, i64 %lncdi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccaL:
  %lncdj = load i64, i64* %R2_Var
  store i64 %lncdj, i64* %R2_Var
  %lncdk = ptrtoint %Main_zdwgo3_closure_struct* @Main_zdwgo3_closure$def to i64
  store i64 %lncdk, i64* %R1_Var
  %lncdl = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncdm = bitcast i64* %lncdl to i64*
  %lncdn = load i64, i64* %lncdm, !tbaa !5
  %lncdo = inttoptr i64 %lncdn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncdp = load i64*, i64** %Sp_Var
  %lncdq = load i64, i64* %R1_Var
  %lncdr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdo( i64* %Base_Arg, i64* %lncdp, i64* %Hp_Arg, i64 %lncdq, i64 %lncdr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cca8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cca8_info$def to i8*)
define internal ghccc void @cca8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncds:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7BJ = alloca i64, i32 1
  br label %cca8
cca8:
  %lncdt = load i64, i64* %R1_Var
  %lncdu = and i64 %lncdt, 7
  switch i64 %lncdu, label %ccaH [i64 1, label %ccaH
i64 2, label %ccaI]
ccaH:
  %lncdv = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lncdw = add i64 %lncdv, 1
  store i64 %lncdw, i64* %R3_Var
  %lncdx = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lncdy = add i64 %lncdx, 1
  store i64 %lncdy, i64* %R2_Var
  %lncdz = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lncdA = add i64 %lncdz, 1
  store i64 %lncdA, i64* %R1_Var
  %lncdB = load i64*, i64** %Sp_Var
  %lncdC = getelementptr inbounds i64, i64* %lncdB, i32 1
  %lncdD = ptrtoint i64* %lncdC to i64
  %lncdE = inttoptr i64 %lncdD to i64*
  store i64* %lncdE, i64** %Sp_Var
  %lncdF = load i64*, i64** %Sp_Var
  %lncdG = getelementptr inbounds i64, i64* %lncdF, i32 0
  %lncdH = bitcast i64* %lncdG to i64*
  %lncdI = load i64, i64* %lncdH, !tbaa !2
  %lncdJ = inttoptr i64 %lncdI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncdK = load i64*, i64** %Sp_Var
  %lncdL = load i64, i64* %R1_Var
  %lncdM = load i64, i64* %R2_Var
  %lncdN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdJ( i64* %Base_Arg, i64* %lncdK, i64* %Hp_Arg, i64 %lncdL, i64 %lncdM, i64 %lncdN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccaI:
  %lncdP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccae_info$def to i64
  %lncdO = load i64*, i64** %Sp_Var
  %lncdQ = getelementptr inbounds i64, i64* %lncdO, i32 -1
  store i64 %lncdP, i64* %lncdQ, !tbaa !2
  %lncdT = load i64, i64* %R1_Var
  %lncdU = add i64 %lncdT, 14
  %lncdV = inttoptr i64 %lncdU to i64*
  %lncdW = load i64, i64* %lncdV, !tbaa !4
  store i64 %lncdW, i64* %ls7BJ
  %lncdZ = load i64, i64* %R1_Var
  %lnce0 = add i64 %lncdZ, 6
  %lnce1 = inttoptr i64 %lnce0 to i64*
  %lnce2 = load i64, i64* %lnce1, !tbaa !4
  store i64 %lnce2, i64* %R1_Var
  %lnce4 = load i64, i64* %ls7BJ
  %lnce3 = load i64*, i64** %Sp_Var
  %lnce5 = getelementptr inbounds i64, i64* %lnce3, i32 0
  store i64 %lnce4, i64* %lnce5, !tbaa !2
  %lnce6 = load i64*, i64** %Sp_Var
  %lnce7 = getelementptr inbounds i64, i64* %lnce6, i32 -1
  %lnce8 = ptrtoint i64* %lnce7 to i64
  %lnce9 = inttoptr i64 %lnce8 to i64*
  store i64* %lnce9, i64** %Sp_Var
  %lncea = load i64, i64* %R1_Var
  %lnceb = and i64 %lncea, 7
  %lncec = icmp ne i64 %lnceb, 0
  br i1 %lncec, label %ucaU, label %ccaf
ccaf:
  %lncee = load i64, i64* %R1_Var
  %lncef = inttoptr i64 %lncee to i64*
  %lnceg = load i64, i64* %lncef, !tbaa !4
  %lnceh = inttoptr i64 %lnceg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncei = load i64*, i64** %Sp_Var
  %lncej = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnceh( i64* %Base_Arg, i64* %lncei, i64* %Hp_Arg, i64 %lncej, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucaU:
  %lncek = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccae_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncel = load i64*, i64** %Sp_Var
  %lncem = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncek( i64* %Base_Arg, i64* %lncel, i64* %Hp_Arg, i64 %lncem, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccae_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccae_info$def to i8*)
define internal ghccc void @ccae_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncen:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccae
ccae:
  %lncep = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccaj_info$def to i64
  %lnceo = load i64*, i64** %Sp_Var
  %lnceq = getelementptr inbounds i64, i64* %lnceo, i32 -2
  store i64 %lncep, i64* %lnceq, !tbaa !2
  %lncer = load i64*, i64** %Sp_Var
  %lnces = getelementptr inbounds i64, i64* %lncer, i32 1
  %lncet = bitcast i64* %lnces to i64*
  %lnceu = load i64, i64* %lncet, !tbaa !2
  store i64 %lnceu, i64* %R2_Var
  %lncew = add i64 %R1_Arg, 23
  %lncex = inttoptr i64 %lncew to i64*
  %lncey = load i64, i64* %lncex, !tbaa !4
  %lncev = load i64*, i64** %Sp_Var
  %lncez = getelementptr inbounds i64, i64* %lncev, i32 -1
  store i64 %lncey, i64* %lncez, !tbaa !2
  %lnceB = add i64 %R1_Arg, 15
  %lnceC = inttoptr i64 %lnceB to i64*
  %lnceD = load i64, i64* %lnceC, !tbaa !4
  %lnceA = load i64*, i64** %Sp_Var
  %lnceE = getelementptr inbounds i64, i64* %lnceA, i32 0
  store i64 %lnceD, i64* %lnceE, !tbaa !2
  %lnceG = add i64 %R1_Arg, 7
  %lnceH = inttoptr i64 %lnceG to i64*
  %lnceI = load i64, i64* %lnceH, !tbaa !4
  %lnceF = load i64*, i64** %Sp_Var
  %lnceJ = getelementptr inbounds i64, i64* %lnceF, i32 1
  store i64 %lnceI, i64* %lnceJ, !tbaa !2
  %lnceK = load i64*, i64** %Sp_Var
  %lnceL = getelementptr inbounds i64, i64* %lnceK, i32 -2
  %lnceM = ptrtoint i64* %lnceL to i64
  %lnceN = inttoptr i64 %lnceM to i64*
  store i64* %lnceN, i64** %Sp_Var
  %lnceO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnceP = load i64*, i64** %Sp_Var
  %lnceQ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnceO( i64* %Base_Arg, i64* %lnceP, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnceQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccaj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccaj_info$def to i8*)
define internal ghccc void @ccaj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nceR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccaj
ccaj:
  %lnceS = load i64*, i64** %Hp_Var
  %lnceT = getelementptr inbounds i64, i64* %lnceS, i32 12
  %lnceU = ptrtoint i64* %lnceT to i64
  %lnceV = inttoptr i64 %lnceU to i64*
  store i64* %lnceV, i64** %Hp_Var
  %lnceW = load i64*, i64** %Hp_Var
  %lnceX = ptrtoint i64* %lnceW to i64
  %lnceY = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnceZ = bitcast i64* %lnceY to i64*
  %lncf0 = load i64, i64* %lnceZ, !tbaa !5
  %lncf1 = icmp ugt i64 %lnceX, %lncf0
  %lncf2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncf1, i1 0 )
  br i1 %lncf2, label %ccaT, label %ccaS
ccaS:
  %lncf4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BU_info$def to i64
  %lncf3 = load i64*, i64** %Hp_Var
  %lncf5 = getelementptr inbounds i64, i64* %lncf3, i32 -11
  store i64 %lncf4, i64* %lncf5, !tbaa !3
  %lncf7 = load i64*, i64** %Sp_Var
  %lncf8 = getelementptr inbounds i64, i64* %lncf7, i32 1
  %lncf9 = bitcast i64* %lncf8 to i64*
  %lncfa = load i64, i64* %lncf9, !tbaa !2
  %lncf6 = load i64*, i64** %Hp_Var
  %lncfb = getelementptr inbounds i64, i64* %lncf6, i32 -9
  store i64 %lncfa, i64* %lncfb, !tbaa !3
  %lncfd = load i64, i64* %R3_Var
  %lncfc = load i64*, i64** %Hp_Var
  %lncfe = getelementptr inbounds i64, i64* %lncfc, i32 -8
  store i64 %lncfd, i64* %lncfe, !tbaa !3
  %lncfg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BT_info$def to i64
  %lncff = load i64*, i64** %Hp_Var
  %lncfh = getelementptr inbounds i64, i64* %lncff, i32 -7
  store i64 %lncfg, i64* %lncfh, !tbaa !3
  %lncfj = load i64*, i64** %Sp_Var
  %lncfk = getelementptr inbounds i64, i64* %lncfj, i32 2
  %lncfl = bitcast i64* %lncfk to i64*
  %lncfm = load i64, i64* %lncfl, !tbaa !2
  %lncfi = load i64*, i64** %Hp_Var
  %lncfn = getelementptr inbounds i64, i64* %lncfi, i32 -5
  store i64 %lncfm, i64* %lncfn, !tbaa !3
  %lncfp = load i64, i64* %R2_Var
  %lncfo = load i64*, i64** %Hp_Var
  %lncfq = getelementptr inbounds i64, i64* %lncfo, i32 -4
  store i64 %lncfp, i64* %lncfq, !tbaa !3
  %lncfs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7BS_info$def to i64
  %lncfr = load i64*, i64** %Hp_Var
  %lncft = getelementptr inbounds i64, i64* %lncfr, i32 -3
  store i64 %lncfs, i64* %lncft, !tbaa !3
  %lncfv = load i64*, i64** %Sp_Var
  %lncfw = getelementptr inbounds i64, i64* %lncfv, i32 3
  %lncfx = bitcast i64* %lncfw to i64*
  %lncfy = load i64, i64* %lncfx, !tbaa !2
  %lncfu = load i64*, i64** %Hp_Var
  %lncfz = getelementptr inbounds i64, i64* %lncfu, i32 -1
  store i64 %lncfy, i64* %lncfz, !tbaa !3
  %lncfB = load i64, i64* %R1_Var
  %lncfA = load i64*, i64** %Hp_Var
  %lncfC = getelementptr inbounds i64, i64* %lncfA, i32 0
  store i64 %lncfB, i64* %lncfC, !tbaa !3
  %lncfD = load i64*, i64** %Hp_Var
  %lncfE = getelementptr inbounds i64, i64* %lncfD, i32 -11
  %lncfF = ptrtoint i64* %lncfE to i64
  store i64 %lncfF, i64* %R3_Var
  %lncfG = load i64*, i64** %Hp_Var
  %lncfH = getelementptr inbounds i64, i64* %lncfG, i32 -7
  %lncfI = ptrtoint i64* %lncfH to i64
  store i64 %lncfI, i64* %R2_Var
  %lncfJ = load i64*, i64** %Hp_Var
  %lncfK = getelementptr inbounds i64, i64* %lncfJ, i32 -3
  %lncfL = ptrtoint i64* %lncfK to i64
  store i64 %lncfL, i64* %R1_Var
  %lncfM = load i64*, i64** %Sp_Var
  %lncfN = getelementptr inbounds i64, i64* %lncfM, i32 4
  %lncfO = ptrtoint i64* %lncfN to i64
  %lncfP = inttoptr i64 %lncfO to i64*
  store i64* %lncfP, i64** %Sp_Var
  %lncfQ = load i64*, i64** %Sp_Var
  %lncfR = getelementptr inbounds i64, i64* %lncfQ, i32 0
  %lncfS = bitcast i64* %lncfR to i64*
  %lncfT = load i64, i64* %lncfS, !tbaa !2
  %lncfU = inttoptr i64 %lncfT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncfV = load i64*, i64** %Sp_Var
  %lncfW = load i64*, i64** %Hp_Var
  %lncfX = load i64, i64* %R1_Var
  %lncfY = load i64, i64* %R2_Var
  %lncfZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncfU( i64* %Base_Arg, i64* %lncfV, i64* %lncfW, i64 %lncfX, i64 %lncfY, i64 %lncfZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccaT:
  %lncg0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %lncg0, !tbaa !5
  %lncg1 = load i64, i64* %R3_Var
  store i64 %lncg1, i64* %R3_Var
  %lncg2 = load i64, i64* %R2_Var
  store i64 %lncg2, i64* %R2_Var
  %lncg3 = load i64, i64* %R1_Var
  store i64 %lncg3, i64* %R1_Var
  %lncg4 = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncg5 = load i64*, i64** %Sp_Var
  %lncg6 = load i64*, i64** %Hp_Var
  %lncg7 = load i64, i64* %R1_Var
  %lncg8 = load i64, i64* %R2_Var
  %lncg9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncg4( i64* %Base_Arg, i64* %lncg5, i64* %lncg6, i64 %lncg7, i64 %lncg8, i64 %lncg9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_vecsum_closure_struct = type <{i64}>
@Main_vecsum_closure$def = internal global %Main_vecsum_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecsum_info$def to i64)}>
@Main_vecsum_closure = alias i8, bitcast (%Main_vecsum_closure_struct* @Main_vecsum_closure$def to i8*)
@Main_vecsum_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_vecsum_info$def to i8*)
define ghccc void @Main_vecsum_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
ncgn:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccgh
ccgh:
  %lncgo = load i64*, i64** %Sp_Var
  %lncgp = getelementptr inbounds i64, i64* %lncgo, i32 -1
  %lncgq = ptrtoint i64* %lncgp to i64
  %lncgr = icmp ult i64 %lncgq, %SpLim_Arg
  %lncgs = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncgr, i1 0 )
  br i1 %lncgs, label %ccgi, label %ccgj
ccgj:
  %lncgu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccge_info$def to i64
  %lncgt = load i64*, i64** %Sp_Var
  %lncgv = getelementptr inbounds i64, i64* %lncgt, i32 -1
  store i64 %lncgu, i64* %lncgv, !tbaa !2
  %lncgw = load i64, i64* %R2_Var
  store i64 %lncgw, i64* %R2_Var
  %lncgx = load i64*, i64** %Sp_Var
  %lncgy = getelementptr inbounds i64, i64* %lncgx, i32 -1
  %lncgz = ptrtoint i64* %lncgy to i64
  %lncgA = inttoptr i64 %lncgz to i64*
  store i64* %lncgA, i64** %Sp_Var
  %lncgB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncgC = load i64*, i64** %Sp_Var
  %lncgD = load i64, i64* %R1_Var
  %lncgE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncgB( i64* %Base_Arg, i64* %lncgC, i64* %Hp_Arg, i64 %lncgD, i64 %lncgE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccgi:
  %lncgF = load i64, i64* %R2_Var
  store i64 %lncgF, i64* %R2_Var
  %lncgG = ptrtoint %Main_vecsum_closure_struct* @Main_vecsum_closure$def to i64
  store i64 %lncgG, i64* %R1_Var
  %lncgH = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncgI = bitcast i64* %lncgH to i64*
  %lncgJ = load i64, i64* %lncgI, !tbaa !5
  %lncgK = inttoptr i64 %lncgJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncgL = load i64*, i64** %Sp_Var
  %lncgM = load i64, i64* %R1_Var
  %lncgN = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncgK( i64* %Base_Arg, i64* %lncgL, i64* %Hp_Arg, i64 %lncgM, i64 %lncgN, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccge_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccge_info$def to i8*)
define internal ghccc void @ccge_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncgO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ccge
ccge:
  %lncgP = load i64*, i64** %Hp_Var
  %lncgQ = getelementptr inbounds i64, i64* %lncgP, i32 4
  %lncgR = ptrtoint i64* %lncgQ to i64
  %lncgS = inttoptr i64 %lncgR to i64*
  store i64* %lncgS, i64** %Hp_Var
  %lncgT = load i64*, i64** %Hp_Var
  %lncgU = ptrtoint i64* %lncgT to i64
  %lncgV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncgW = bitcast i64* %lncgV to i64*
  %lncgX = load i64, i64* %lncgW, !tbaa !5
  %lncgY = icmp ugt i64 %lncgU, %lncgX
  %lncgZ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncgY, i1 0 )
  br i1 %lncgZ, label %ccgm, label %ccgl
ccgl:
  %lnch1 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnch0 = load i64*, i64** %Hp_Var
  %lnch2 = getelementptr inbounds i64, i64* %lnch0, i32 -3
  store i64 %lnch1, i64* %lnch2, !tbaa !3
  %lnch4 = load i64, i64* %R1_Var
  %lnch3 = load i64*, i64** %Hp_Var
  %lnch5 = getelementptr inbounds i64, i64* %lnch3, i32 -2
  store i64 %lnch4, i64* %lnch5, !tbaa !3
  %lnch7 = load i64, i64* %R2_Var
  %lnch6 = load i64*, i64** %Hp_Var
  %lnch8 = getelementptr inbounds i64, i64* %lnch6, i32 -1
  store i64 %lnch7, i64* %lnch8, !tbaa !3
  %lncha = load i64, i64* %R3_Var
  %lnch9 = load i64*, i64** %Hp_Var
  %lnchb = getelementptr inbounds i64, i64* %lnch9, i32 0
  store i64 %lncha, i64* %lnchb, !tbaa !3
  %lnchd = load i64*, i64** %Hp_Var
  %lnche = ptrtoint i64* %lnchd to i64
  %lnchf = add i64 %lnche, -23
  store i64 %lnchf, i64* %R1_Var
  %lnchg = load i64*, i64** %Sp_Var
  %lnchh = getelementptr inbounds i64, i64* %lnchg, i32 1
  %lnchi = ptrtoint i64* %lnchh to i64
  %lnchj = inttoptr i64 %lnchi to i64*
  store i64* %lnchj, i64** %Sp_Var
  %lnchk = load i64*, i64** %Sp_Var
  %lnchl = getelementptr inbounds i64, i64* %lnchk, i32 0
  %lnchm = bitcast i64* %lnchl to i64*
  %lnchn = load i64, i64* %lnchm, !tbaa !2
  %lncho = inttoptr i64 %lnchn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnchp = load i64*, i64** %Sp_Var
  %lnchq = load i64*, i64** %Hp_Var
  %lnchr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncho( i64* %Base_Arg, i64* %lnchp, i64* %lnchq, i64 %lnchr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccgm:
  %lnchs = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnchs, !tbaa !5
  %lncht = load i64, i64* %R3_Var
  store i64 %lncht, i64* %R3_Var
  %lnchu = load i64, i64* %R2_Var
  store i64 %lnchu, i64* %R2_Var
  %lnchv = load i64, i64* %R1_Var
  store i64 %lnchv, i64* %R1_Var
  %lnchw = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnchx = load i64*, i64** %Sp_Var
  %lnchy = load i64*, i64** %Hp_Var
  %lnchz = load i64, i64* %R1_Var
  %lnchA = load i64, i64* %R2_Var
  %lnchB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnchw( i64* %Base_Arg, i64* %lnchx, i64* %lnchy, i64 %lnchz, i64 %lnchA, i64 %lnchB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lightcolour_closure_struct = type <{i64}>
@Main_lightcolour_closure$def = internal global %Main_lightcolour_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightcolour_info$def to i64)}>
@Main_lightcolour_closure = alias i8, bitcast (%Main_lightcolour_closure_struct* @Main_lightcolour_closure$def to i8*)
@Main_lightcolour_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightcolour_info$def to i8*)
define ghccc void @Main_lightcolour_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 0}>
{
nchX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cchN
cchN:
  %lnchY = load i64*, i64** %Sp_Var
  %lnchZ = getelementptr inbounds i64, i64* %lnchY, i32 -1
  %lnci0 = ptrtoint i64* %lnchZ to i64
  %lnci1 = icmp ult i64 %lnci0, %SpLim_Arg
  %lnci2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnci1, i1 0 )
  br i1 %lnci2, label %cchO, label %cchP
cchP:
  %lnci4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cchG_info$def to i64
  %lnci3 = load i64*, i64** %Sp_Var
  %lnci5 = getelementptr inbounds i64, i64* %lnci3, i32 -1
  store i64 %lnci4, i64* %lnci5, !tbaa !2
  %lnci6 = load i64, i64* %R2_Var
  store i64 %lnci6, i64* %R1_Var
  %lnci7 = load i64*, i64** %Sp_Var
  %lnci8 = getelementptr inbounds i64, i64* %lnci7, i32 -1
  %lnci9 = ptrtoint i64* %lnci8 to i64
  %lncia = inttoptr i64 %lnci9 to i64*
  store i64* %lncia, i64** %Sp_Var
  %lncib = load i64, i64* %R1_Var
  %lncic = and i64 %lncib, 7
  %lncid = icmp ne i64 %lncic, 0
  br i1 %lncid, label %uchW, label %cchH
cchH:
  %lncif = load i64, i64* %R1_Var
  %lncig = inttoptr i64 %lncif to i64*
  %lncih = load i64, i64* %lncig, !tbaa !4
  %lncii = inttoptr i64 %lncih to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncij = load i64*, i64** %Sp_Var
  %lncik = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncii( i64* %Base_Arg, i64* %lncij, i64* %Hp_Arg, i64 %lncik, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uchW:
  %lncil = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cchG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncim = load i64*, i64** %Sp_Var
  %lncin = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncil( i64* %Base_Arg, i64* %lncim, i64* %Hp_Arg, i64 %lncin, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cchO:
  %lncio = load i64, i64* %R2_Var
  store i64 %lncio, i64* %R2_Var
  %lncip = ptrtoint %Main_lightcolour_closure_struct* @Main_lightcolour_closure$def to i64
  store i64 %lncip, i64* %R1_Var
  %lnciq = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncir = bitcast i64* %lnciq to i64*
  %lncis = load i64, i64* %lncir, !tbaa !5
  %lncit = inttoptr i64 %lncis to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnciu = load i64*, i64** %Sp_Var
  %lnciv = load i64, i64* %R1_Var
  %lnciw = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncit( i64* %Base_Arg, i64* %lnciu, i64* %Hp_Arg, i64 %lnciv, i64 %lnciw, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cchG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cchG_info$def to i8*)
define internal ghccc void @cchG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncix:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cchG
cchG:
  %lnciy = load i64, i64* %R1_Var
  %lnciz = and i64 %lnciy, 7
  switch i64 %lnciz, label %cchK [i64 1, label %cchK
i64 2, label %cchL]
cchK:
  %lnciC = load i64, i64* %R1_Var
  %lnciD = add i64 %lnciC, 15
  %lnciE = inttoptr i64 %lnciD to i64*
  %lnciF = load i64, i64* %lnciE, !tbaa !4
  %lnciG = and i64 %lnciF, -8
  store i64 %lnciG, i64* %R1_Var
  %lnciH = load i64*, i64** %Sp_Var
  %lnciI = getelementptr inbounds i64, i64* %lnciH, i32 1
  %lnciJ = ptrtoint i64* %lnciI to i64
  %lnciK = inttoptr i64 %lnciJ to i64*
  store i64* %lnciK, i64** %Sp_Var
  %lnciM = load i64, i64* %R1_Var
  %lnciN = inttoptr i64 %lnciM to i64*
  %lnciO = load i64, i64* %lnciN, !tbaa !4
  %lnciP = inttoptr i64 %lnciO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnciQ = load i64*, i64** %Sp_Var
  %lnciR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnciP( i64* %Base_Arg, i64* %lnciQ, i64* %Hp_Arg, i64 %lnciR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cchL:
  %lnciU = load i64, i64* %R1_Var
  %lnciV = add i64 %lnciU, 14
  %lnciW = inttoptr i64 %lnciV to i64*
  %lnciX = load i64, i64* %lnciW, !tbaa !4
  %lnciY = and i64 %lnciX, -8
  store i64 %lnciY, i64* %R1_Var
  %lnciZ = load i64*, i64** %Sp_Var
  %lncj0 = getelementptr inbounds i64, i64* %lnciZ, i32 1
  %lncj1 = ptrtoint i64* %lncj0 to i64
  %lncj2 = inttoptr i64 %lncj1 to i64*
  store i64* %lncj2, i64** %Sp_Var
  %lncj4 = load i64, i64* %R1_Var
  %lncj5 = inttoptr i64 %lncj4 to i64*
  %lncj6 = load i64, i64* %lncj5, !tbaa !4
  %lncj7 = inttoptr i64 %lncj6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncj8 = load i64*, i64** %Sp_Var
  %lncj9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncj7( i64* %Base_Arg, i64* %lncj8, i64* %Hp_Arg, i64 %lncj9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7mf_bytes_struct = type <{[35 x i8]}>
@r7mf_bytes$def = internal constant %r7mf_bytes_struct<{[35 x i8] [i8 77, i8 97, i8 105, i8 110, i8 46, i8 108, i8 104, i8 115, i8 58, i8 56, i8 52, i8 58, i8 51, i8 45, i8 51, i8 50, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 108, i8 105, i8 103, i8 104, i8 116, i8 112, i8 111, i8 115, i8 0]}>, align 1
@r7mf_bytes = internal alias i8, bitcast (%r7mf_bytes_struct* @r7mf_bytes$def to i8*)
%Main_lightpos1_closure_struct = type <{i64, i64, i64, i64}>
@Main_lightpos1_closure$def = internal global %Main_lightpos1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_lightpos1_closure = alias i8, bitcast (%Main_lightpos1_closure_struct* @Main_lightpos1_closure$def to i8*)
@Main_lightpos1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos1_info$def to i8*)
define ghccc void @Main_lightpos1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos1_info$def to i64)) to i32),i32 0)}>
{
ncjj:
  %lccjd = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccjg
ccjg:
  %lncjk = load i64*, i64** %Sp_Var
  %lncjl = getelementptr inbounds i64, i64* %lncjk, i32 -2
  %lncjm = ptrtoint i64* %lncjl to i64
  %lncjn = icmp ult i64 %lncjm, %SpLim_Arg
  %lncjo = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncjn, i1 0 )
  br i1 %lncjo, label %ccjh, label %ccji
ccji:
  %lncjp = ptrtoint i64* %Base_Arg to i64
  %lncjq = inttoptr i64 %lncjp to i8*
  %lncjr = load i64, i64* %R1_Var
  %lncjs = inttoptr i64 %lncjr to i8*
  %lncjt = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %lncju = call ccc i8* (i8*, i8*) %lncjt( i8* %lncjq, i8* %lncjs ) nounwind
  %lncjv = ptrtoint i8* %lncju to i64
  store i64 %lncjv, i64* %lccjd
  %lncjw = load i64, i64* %lccjd
  %lncjx = icmp eq i64 %lncjw, 0
  br i1 %lncjx, label %ccjf, label %ccje
ccje:
  %lncjz = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lncjy = load i64*, i64** %Sp_Var
  %lncjA = getelementptr inbounds i64, i64* %lncjy, i32 -2
  store i64 %lncjz, i64* %lncjA, !tbaa !2
  %lncjC = load i64, i64* %lccjd
  %lncjB = load i64*, i64** %Sp_Var
  %lncjD = getelementptr inbounds i64, i64* %lncjB, i32 -1
  store i64 %lncjC, i64* %lncjD, !tbaa !2
  %lncjE = ptrtoint %r7mf_bytes_struct* @r7mf_bytes$def to i64
  store i64 %lncjE, i64* %R2_Var
  %lncjF = load i64*, i64** %Sp_Var
  %lncjG = getelementptr inbounds i64, i64* %lncjF, i32 -2
  %lncjH = ptrtoint i64* %lncjG to i64
  %lncjI = inttoptr i64 %lncjH to i64*
  store i64* %lncjI, i64** %Sp_Var
  %lncjJ = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncjK = load i64*, i64** %Sp_Var
  %lncjL = load i64, i64* %R1_Var
  %lncjM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncjJ( i64* %Base_Arg, i64* %lncjK, i64* %Hp_Arg, i64 %lncjL, i64 %lncjM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccjf:
  %lncjO = load i64, i64* %R1_Var
  %lncjP = inttoptr i64 %lncjO to i64*
  %lncjQ = load i64, i64* %lncjP, !tbaa !4
  %lncjR = inttoptr i64 %lncjQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncjS = load i64*, i64** %Sp_Var
  %lncjT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncjR( i64* %Base_Arg, i64* %lncjS, i64* %Hp_Arg, i64 %lncjT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccjh:
  %lncjU = load i64, i64* %R1_Var
  store i64 %lncjU, i64* %R1_Var
  %lncjV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncjW = bitcast i64* %lncjV to i64*
  %lncjX = load i64, i64* %lncjW, !tbaa !5
  %lncjY = inttoptr i64 %lncjX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncjZ = load i64*, i64** %Sp_Var
  %lnck0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncjY( i64* %Base_Arg, i64* %lncjZ, i64* %Hp_Arg, i64 %lnck0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lightpos_closure_struct = type <{i64, i64}>
@Main_lightpos_closure$def = internal global %Main_lightpos_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos_info$def to i64), i64 0}>
@Main_lightpos_closure = alias i8, bitcast (%Main_lightpos_closure_struct* @Main_lightpos_closure$def to i8*)
@Main_lightpos_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos_info$def to i8*)
define ghccc void @Main_lightpos_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_lightpos1_closure_struct* @Main_lightpos1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightpos_info$def to i64)) to i32),i32 0)}>
{
nckm:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cckc
cckc:
  %lnckn = load i64*, i64** %Sp_Var
  %lncko = getelementptr inbounds i64, i64* %lnckn, i32 -1
  %lnckp = ptrtoint i64* %lncko to i64
  %lnckq = icmp ult i64 %lnckp, %SpLim_Arg
  %lnckr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnckq, i1 0 )
  br i1 %lnckr, label %cckd, label %ccke
ccke:
  %lnckt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cck5_info$def to i64
  %lncks = load i64*, i64** %Sp_Var
  %lncku = getelementptr inbounds i64, i64* %lncks, i32 -1
  store i64 %lnckt, i64* %lncku, !tbaa !2
  %lnckv = load i64, i64* %R2_Var
  store i64 %lnckv, i64* %R1_Var
  %lnckw = load i64*, i64** %Sp_Var
  %lnckx = getelementptr inbounds i64, i64* %lnckw, i32 -1
  %lncky = ptrtoint i64* %lnckx to i64
  %lnckz = inttoptr i64 %lncky to i64*
  store i64* %lnckz, i64** %Sp_Var
  %lnckA = load i64, i64* %R1_Var
  %lnckB = and i64 %lnckA, 7
  %lnckC = icmp ne i64 %lnckB, 0
  br i1 %lnckC, label %uckl, label %cck6
cck6:
  %lnckE = load i64, i64* %R1_Var
  %lnckF = inttoptr i64 %lnckE to i64*
  %lnckG = load i64, i64* %lnckF, !tbaa !4
  %lnckH = inttoptr i64 %lnckG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckI = load i64*, i64** %Sp_Var
  %lnckJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnckH( i64* %Base_Arg, i64* %lnckI, i64* %Hp_Arg, i64 %lnckJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uckl:
  %lnckK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cck5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckL = load i64*, i64** %Sp_Var
  %lnckM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnckK( i64* %Base_Arg, i64* %lnckL, i64* %Hp_Arg, i64 %lnckM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cckd:
  %lnckN = load i64, i64* %R2_Var
  store i64 %lnckN, i64* %R2_Var
  %lnckO = ptrtoint %Main_lightpos_closure_struct* @Main_lightpos_closure$def to i64
  store i64 %lnckO, i64* %R1_Var
  %lnckP = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnckQ = bitcast i64* %lnckP to i64*
  %lnckR = load i64, i64* %lnckQ, !tbaa !5
  %lnckS = inttoptr i64 %lnckR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckT = load i64*, i64** %Sp_Var
  %lnckU = load i64, i64* %R1_Var
  %lnckV = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnckS( i64* %Base_Arg, i64* %lnckT, i64* %Hp_Arg, i64 %lnckU, i64 %lnckV, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cck5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cck5_info$def to i8*)
define internal ghccc void @cck5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_lightpos1_closure_struct* @Main_lightpos1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cck5_info$def to i64)) to i32),i32 0)}>
{
nckW:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cck5
cck5:
  %lnckX = load i64, i64* %R1_Var
  %lnckY = and i64 %lnckX, 7
  switch i64 %lnckY, label %cck9 [i64 1, label %cck9
i64 2, label %ccka]
cck9:
  %lnckZ = ptrtoint %Main_lightpos1_closure_struct* @Main_lightpos1_closure$def to i64
  store i64 %lnckZ, i64* %R1_Var
  %lncl0 = load i64*, i64** %Sp_Var
  %lncl1 = getelementptr inbounds i64, i64* %lncl0, i32 1
  %lncl2 = ptrtoint i64* %lncl1 to i64
  %lncl3 = inttoptr i64 %lncl2 to i64*
  store i64* %lncl3, i64** %Sp_Var
  %lncl5 = load i64, i64* %R1_Var
  %lncl6 = inttoptr i64 %lncl5 to i64*
  %lncl7 = load i64, i64* %lncl6, !tbaa !4
  %lncl8 = inttoptr i64 %lncl7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncl9 = load i64*, i64** %Sp_Var
  %lncla = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncl8( i64* %Base_Arg, i64* %lncl9, i64* %Hp_Arg, i64 %lncla, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccka:
  %lncld = load i64, i64* %R1_Var
  %lncle = add i64 %lncld, 6
  %lnclf = inttoptr i64 %lncle to i64*
  %lnclg = load i64, i64* %lnclf, !tbaa !4
  %lnclh = and i64 %lnclg, -8
  store i64 %lnclh, i64* %R1_Var
  %lncli = load i64*, i64** %Sp_Var
  %lnclj = getelementptr inbounds i64, i64* %lncli, i32 1
  %lnclk = ptrtoint i64* %lnclj to i64
  %lncll = inttoptr i64 %lnclk to i64*
  store i64* %lncll, i64** %Sp_Var
  %lncln = load i64, i64* %R1_Var
  %lnclo = inttoptr i64 %lncln to i64*
  %lnclp = load i64, i64* %lnclo, !tbaa !4
  %lnclq = inttoptr i64 %lnclp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnclr = load i64*, i64** %Sp_Var
  %lncls = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnclq( i64* %Base_Arg, i64* %lnclr, i64* %Hp_Arg, i64 %lncls, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_infinity_closure_struct = type <{i64, double}>
@Main_infinity_closure$def = internal global %Main_infinity_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x4415AF1D78B58C40}>
@Main_infinity_closure = alias i8, bitcast (%Main_infinity_closure_struct* @Main_infinity_closure$def to i8*)
%Main_zdwlightdirection_closure_struct = type <{i64}>
@Main_zdwlightdirection_closure$def = internal global %Main_zdwlightdirection_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightdirection_info$def to i64)}>
@Main_zdwlightdirection_closure = alias i8, bitcast (%Main_zdwlightdirection_closure_struct* @Main_zdwlightdirection_closure$def to i8*)
@s7zL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zL_info$def to i8*)
define internal ghccc void @s7zL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
ncnG:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cclJ
cclJ:
  %lncnH = load i64*, i64** %Sp_Var
  %lncnI = getelementptr inbounds i64, i64* %lncnH, i32 -3
  %lncnJ = ptrtoint i64* %lncnI to i64
  %lncnK = icmp ult i64 %lncnJ, %SpLim_Arg
  %lncnL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncnK, i1 0 )
  br i1 %lncnL, label %cclN, label %cclO
cclO:
  %lncnN = ptrtoint i8* @stg_upd_frame_info to i64
  %lncnM = load i64*, i64** %Sp_Var
  %lncnO = getelementptr inbounds i64, i64* %lncnM, i32 -2
  store i64 %lncnN, i64* %lncnO, !tbaa !2
  %lncnQ = load i64, i64* %R1_Var
  %lncnP = load i64*, i64** %Sp_Var
  %lncnR = getelementptr inbounds i64, i64* %lncnP, i32 -1
  store i64 %lncnQ, i64* %lncnR, !tbaa !2
  %lncnT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclG_info$def to i64
  %lncnS = load i64*, i64** %Sp_Var
  %lncnU = getelementptr inbounds i64, i64* %lncnS, i32 -3
  store i64 %lncnT, i64* %lncnU, !tbaa !2
  %lncnX = load i64, i64* %R1_Var
  %lncnY = add i64 %lncnX, 16
  %lncnZ = inttoptr i64 %lncnY to i64*
  %lnco0 = load i64, i64* %lncnZ, !tbaa !4
  store i64 %lnco0, i64* %R1_Var
  %lnco1 = load i64*, i64** %Sp_Var
  %lnco2 = getelementptr inbounds i64, i64* %lnco1, i32 -3
  %lnco3 = ptrtoint i64* %lnco2 to i64
  %lnco4 = inttoptr i64 %lnco3 to i64*
  store i64* %lnco4, i64** %Sp_Var
  %lnco5 = load i64, i64* %R1_Var
  %lnco6 = and i64 %lnco5, 7
  %lnco7 = icmp ne i64 %lnco6, 0
  br i1 %lnco7, label %uclS, label %cclH
cclH:
  %lnco9 = load i64, i64* %R1_Var
  %lncoa = inttoptr i64 %lnco9 to i64*
  %lncob = load i64, i64* %lncoa, !tbaa !4
  %lncoc = inttoptr i64 %lncob to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncod = load i64*, i64** %Sp_Var
  %lncoe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncoc( i64* %Base_Arg, i64* %lncod, i64* %Hp_Arg, i64 %lncoe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uclS:
  %lncof = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncog = load i64*, i64** %Sp_Var
  %lncoh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncof( i64* %Base_Arg, i64* %lncog, i64* %Hp_Arg, i64 %lncoh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cclN:
  %lncoi = load i64, i64* %R1_Var
  store i64 %lncoi, i64* %R1_Var
  %lncoj = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncok = bitcast i64* %lncoj to i64*
  %lncol = load i64, i64* %lncok, !tbaa !5
  %lncom = inttoptr i64 %lncol to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncon = load i64*, i64** %Sp_Var
  %lncoo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncom( i64* %Base_Arg, i64* %lncon, i64* %Hp_Arg, i64 %lncoo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cclG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclG_info$def to i8*)
define internal ghccc void @cclG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncop:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cclG
cclG:
  %lncoq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclM_info$def to i64
  %lncor = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncoq, i64* %lncor, !tbaa !2
  %lncos = add i64 %R1_Arg, 23
  %lncot = inttoptr i64 %lncos to i64*
  %lncou = load i64, i64* %lncot, !tbaa !4
  store i64 %lncou, i64* %R4_Var
  %lncov = add i64 %R1_Arg, 15
  %lncow = inttoptr i64 %lncov to i64*
  %lncox = load i64, i64* %lncow, !tbaa !4
  store i64 %lncox, i64* %R3_Var
  %lncoy = add i64 %R1_Arg, 7
  %lncoz = inttoptr i64 %lncoy to i64*
  %lncoA = load i64, i64* %lncoz, !tbaa !4
  store i64 %lncoA, i64* %R2_Var
  %lncoB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncoC = load i64, i64* %R2_Var
  %lncoD = load i64, i64* %R3_Var
  %lncoE = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncoB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncoC, i64 %lncoD, i64 %lncoE, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cclM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclM_info$def to i8*)
define internal ghccc void @cclM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncoF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cclM
cclM:
  %lncoG = load i64, i64* %R1_Var
  %lncoH = and i64 %lncoG, -8
  store i64 %lncoH, i64* %R1_Var
  %lncoI = load i64*, i64** %Sp_Var
  %lncoJ = getelementptr inbounds i64, i64* %lncoI, i32 1
  %lncoK = ptrtoint i64* %lncoJ to i64
  %lncoL = inttoptr i64 %lncoK to i64*
  store i64* %lncoL, i64** %Sp_Var
  %lncoN = load i64, i64* %R1_Var
  %lncoO = inttoptr i64 %lncoN to i64*
  %lncoP = load i64, i64* %lncoO, !tbaa !4
  %lncoQ = inttoptr i64 %lncoP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncoR = load i64*, i64** %Sp_Var
  %lncoS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncoQ( i64* %Base_Arg, i64* %lncoR, i64* %Hp_Arg, i64 %lncoS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ad_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ad_info$def to i8*)
define internal ghccc void @s7Ad_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncoT:
  %ls7zV = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccmc
ccmc:
  %lncoU = load i64*, i64** %Sp_Var
  %lncoV = getelementptr inbounds i64, i64* %lncoU, i32 -4
  %lncoW = ptrtoint i64* %lncoV to i64
  %lncoX = icmp ult i64 %lncoW, %SpLim_Arg
  %lncoY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncoX, i1 0 )
  br i1 %lncoY, label %ccmo, label %ccmp
ccmp:
  %lncp0 = ptrtoint i8* @stg_upd_frame_info to i64
  %lncoZ = load i64*, i64** %Sp_Var
  %lncp1 = getelementptr inbounds i64, i64* %lncoZ, i32 -2
  store i64 %lncp0, i64* %lncp1, !tbaa !2
  %lncp3 = load i64, i64* %R1_Var
  %lncp2 = load i64*, i64** %Sp_Var
  %lncp4 = getelementptr inbounds i64, i64* %lncp2, i32 -1
  store i64 %lncp3, i64* %lncp4, !tbaa !2
  %lncp6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm9_info$def to i64
  %lncp5 = load i64*, i64** %Sp_Var
  %lncp7 = getelementptr inbounds i64, i64* %lncp5, i32 -4
  store i64 %lncp6, i64* %lncp7, !tbaa !2
  %lncpa = load i64, i64* %R1_Var
  %lncpb = add i64 %lncpa, 16
  %lncpc = inttoptr i64 %lncpb to i64*
  %lncpd = load i64, i64* %lncpc, !tbaa !4
  store i64 %lncpd, i64* %ls7zV
  %lncpg = load i64, i64* %R1_Var
  %lncph = add i64 %lncpg, 24
  %lncpi = inttoptr i64 %lncph to i64*
  %lncpj = load i64, i64* %lncpi, !tbaa !4
  store i64 %lncpj, i64* %R1_Var
  %lncpl = load i64, i64* %ls7zV
  %lncpk = load i64*, i64** %Sp_Var
  %lncpm = getelementptr inbounds i64, i64* %lncpk, i32 -3
  store i64 %lncpl, i64* %lncpm, !tbaa !2
  %lncpn = load i64*, i64** %Sp_Var
  %lncpo = getelementptr inbounds i64, i64* %lncpn, i32 -4
  %lncpp = ptrtoint i64* %lncpo to i64
  %lncpq = inttoptr i64 %lncpp to i64*
  store i64* %lncpq, i64** %Sp_Var
  %lncpr = load i64, i64* %R1_Var
  %lncps = and i64 %lncpr, 7
  %lncpt = icmp ne i64 %lncps, 0
  br i1 %lncpt, label %ucmv, label %ccma
ccma:
  %lncpv = load i64, i64* %R1_Var
  %lncpw = inttoptr i64 %lncpv to i64*
  %lncpx = load i64, i64* %lncpw, !tbaa !4
  %lncpy = inttoptr i64 %lncpx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncpz = load i64*, i64** %Sp_Var
  %lncpA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncpy( i64* %Base_Arg, i64* %lncpz, i64* %Hp_Arg, i64 %lncpA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucmv:
  %lncpB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncpC = load i64*, i64** %Sp_Var
  %lncpD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncpB( i64* %Base_Arg, i64* %lncpC, i64* %Hp_Arg, i64 %lncpD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccmo:
  %lncpE = load i64, i64* %R1_Var
  store i64 %lncpE, i64* %R1_Var
  %lncpF = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncpG = bitcast i64* %lncpF to i64*
  %lncpH = load i64, i64* %lncpG, !tbaa !5
  %lncpI = inttoptr i64 %lncpH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncpJ = load i64*, i64** %Sp_Var
  %lncpK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncpI( i64* %Base_Arg, i64* %lncpJ, i64* %Hp_Arg, i64 %lncpK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccm9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm9_info$def to i8*)
define internal ghccc void @ccm9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncpL:
  %ls7A9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccm9
ccm9:
  %lncpM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmf_info$def to i64
  %lncpN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncpM, i64* %lncpN, !tbaa !2
  %lncpQ = load i64, i64* %R1_Var
  %lncpR = add i64 %lncpQ, 7
  %lncpS = inttoptr i64 %lncpR to double*
  %lncpT = load double, double* %lncpS, !tbaa !4
  store double %lncpT, double* %ls7A9
  %lncpU = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncpV = bitcast i64* %lncpU to i64*
  %lncpW = load i64, i64* %lncpV, !tbaa !2
  store i64 %lncpW, i64* %R1_Var
  %lncpX = load double, double* %ls7A9
  %lncpY = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncpZ = bitcast i64* %lncpY to double*
  store double %lncpX, double* %lncpZ, !tbaa !2
  %lncq0 = load i64, i64* %R1_Var
  %lncq1 = and i64 %lncq0, 7
  %lncq2 = icmp ne i64 %lncq1, 0
  br i1 %lncq2, label %ucmu, label %ccmg
ccmg:
  %lncq4 = load i64, i64* %R1_Var
  %lncq5 = inttoptr i64 %lncq4 to i64*
  %lncq6 = load i64, i64* %lncq5, !tbaa !4
  %lncq7 = inttoptr i64 %lncq6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncq8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncq7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncq8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucmu:
  %lncq9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncqa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncq9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncqa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccmf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmf_info$def to i8*)
define internal ghccc void @ccmf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ncqb:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ac = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccmf
ccmf:
  %lncqc = load i64*, i64** %Hp_Var
  %lncqd = getelementptr inbounds i64, i64* %lncqc, i32 2
  %lncqe = ptrtoint i64* %lncqd to i64
  %lncqf = inttoptr i64 %lncqe to i64*
  store i64* %lncqf, i64** %Hp_Var
  %lncqg = load i64*, i64** %Hp_Var
  %lncqh = ptrtoint i64* %lncqg to i64
  %lncqi = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncqj = bitcast i64* %lncqi to i64*
  %lncqk = load i64, i64* %lncqj, !tbaa !5
  %lncql = icmp ugt i64 %lncqh, %lncqk
  %lncqm = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncql, i1 0 )
  br i1 %lncqm, label %ccmt, label %ccms
ccms:
  %lncqn = load i64*, i64** %Sp_Var
  %lncqo = getelementptr inbounds i64, i64* %lncqn, i32 1
  %lncqp = bitcast i64* %lncqo to double*
  %lncqq = load double, double* %lncqp, !tbaa !2
  %lncqt = load i64, i64* %R1_Var
  %lncqu = add i64 %lncqt, 7
  %lncqv = inttoptr i64 %lncqu to double*
  %lncqw = load double, double* %lncqv, !tbaa !4
  %lncqx = fsub double %lncqq, %lncqw
  store double %lncqx, double* %ls7Ac
  %lncqz = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lncqy = load i64*, i64** %Hp_Var
  %lncqA = getelementptr inbounds i64, i64* %lncqy, i32 -1
  store i64 %lncqz, i64* %lncqA, !tbaa !3
  %lncqC = load double, double* %ls7Ac
  %lncqB = load i64*, i64** %Hp_Var
  %lncqD = getelementptr inbounds i64, i64* %lncqB, i32 0
  %lncqE = bitcast i64* %lncqD to double*
  store double %lncqC, double* %lncqE, !tbaa !3
  %lncqG = load i64*, i64** %Hp_Var
  %lncqH = ptrtoint i64* %lncqG to i64
  %lncqI = add i64 %lncqH, -7
  store i64 %lncqI, i64* %R1_Var
  %lncqJ = load i64*, i64** %Sp_Var
  %lncqK = getelementptr inbounds i64, i64* %lncqJ, i32 2
  %lncqL = ptrtoint i64* %lncqK to i64
  %lncqM = inttoptr i64 %lncqL to i64*
  store i64* %lncqM, i64** %Sp_Var
  %lncqN = load i64*, i64** %Sp_Var
  %lncqO = getelementptr inbounds i64, i64* %lncqN, i32 0
  %lncqP = bitcast i64* %lncqO to i64*
  %lncqQ = load i64, i64* %lncqP, !tbaa !2
  %lncqR = inttoptr i64 %lncqQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncqS = load i64*, i64** %Sp_Var
  %lncqT = load i64*, i64** %Hp_Var
  %lncqU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncqR( i64* %Base_Arg, i64* %lncqS, i64* %lncqT, i64 %lncqU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccmt:
  %lncqV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncqV, !tbaa !5
  %lncqW = load i64, i64* %R1_Var
  store i64 %lncqW, i64* %R1_Var
  %lncqX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncqY = load i64*, i64** %Sp_Var
  %lncqZ = load i64*, i64** %Hp_Var
  %lncr0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncqX( i64* %Base_Arg, i64* %lncqY, i64* %lncqZ, i64 %lncr0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7A7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7A7_info$def to i8*)
define internal ghccc void @s7A7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncr1:
  %ls7zU = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccmD
ccmD:
  %lncr2 = load i64*, i64** %Sp_Var
  %lncr3 = getelementptr inbounds i64, i64* %lncr2, i32 -4
  %lncr4 = ptrtoint i64* %lncr3 to i64
  %lncr5 = icmp ult i64 %lncr4, %SpLim_Arg
  %lncr6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncr5, i1 0 )
  br i1 %lncr6, label %ccmP, label %ccmQ
ccmQ:
  %lncr8 = ptrtoint i8* @stg_upd_frame_info to i64
  %lncr7 = load i64*, i64** %Sp_Var
  %lncr9 = getelementptr inbounds i64, i64* %lncr7, i32 -2
  store i64 %lncr8, i64* %lncr9, !tbaa !2
  %lncrb = load i64, i64* %R1_Var
  %lncra = load i64*, i64** %Sp_Var
  %lncrc = getelementptr inbounds i64, i64* %lncra, i32 -1
  store i64 %lncrb, i64* %lncrc, !tbaa !2
  %lncre = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmA_info$def to i64
  %lncrd = load i64*, i64** %Sp_Var
  %lncrf = getelementptr inbounds i64, i64* %lncrd, i32 -4
  store i64 %lncre, i64* %lncrf, !tbaa !2
  %lncri = load i64, i64* %R1_Var
  %lncrj = add i64 %lncri, 16
  %lncrk = inttoptr i64 %lncrj to i64*
  %lncrl = load i64, i64* %lncrk, !tbaa !4
  store i64 %lncrl, i64* %ls7zU
  %lncro = load i64, i64* %R1_Var
  %lncrp = add i64 %lncro, 24
  %lncrq = inttoptr i64 %lncrp to i64*
  %lncrr = load i64, i64* %lncrq, !tbaa !4
  store i64 %lncrr, i64* %R1_Var
  %lncrt = load i64, i64* %ls7zU
  %lncrs = load i64*, i64** %Sp_Var
  %lncru = getelementptr inbounds i64, i64* %lncrs, i32 -3
  store i64 %lncrt, i64* %lncru, !tbaa !2
  %lncrv = load i64*, i64** %Sp_Var
  %lncrw = getelementptr inbounds i64, i64* %lncrv, i32 -4
  %lncrx = ptrtoint i64* %lncrw to i64
  %lncry = inttoptr i64 %lncrx to i64*
  store i64* %lncry, i64** %Sp_Var
  %lncrz = load i64, i64* %R1_Var
  %lncrA = and i64 %lncrz, 7
  %lncrB = icmp ne i64 %lncrA, 0
  br i1 %lncrB, label %ucmW, label %ccmB
ccmB:
  %lncrD = load i64, i64* %R1_Var
  %lncrE = inttoptr i64 %lncrD to i64*
  %lncrF = load i64, i64* %lncrE, !tbaa !4
  %lncrG = inttoptr i64 %lncrF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncrH = load i64*, i64** %Sp_Var
  %lncrI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncrG( i64* %Base_Arg, i64* %lncrH, i64* %Hp_Arg, i64 %lncrI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucmW:
  %lncrJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncrK = load i64*, i64** %Sp_Var
  %lncrL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncrJ( i64* %Base_Arg, i64* %lncrK, i64* %Hp_Arg, i64 %lncrL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccmP:
  %lncrM = load i64, i64* %R1_Var
  store i64 %lncrM, i64* %R1_Var
  %lncrN = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncrO = bitcast i64* %lncrN to i64*
  %lncrP = load i64, i64* %lncrO, !tbaa !5
  %lncrQ = inttoptr i64 %lncrP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncrR = load i64*, i64** %Sp_Var
  %lncrS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncrQ( i64* %Base_Arg, i64* %lncrR, i64* %Hp_Arg, i64 %lncrS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccmA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmA_info$def to i8*)
define internal ghccc void @ccmA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncrT:
  %ls7A3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccmA
ccmA:
  %lncrU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmG_info$def to i64
  %lncrV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncrU, i64* %lncrV, !tbaa !2
  %lncrY = load i64, i64* %R1_Var
  %lncrZ = add i64 %lncrY, 7
  %lncs0 = inttoptr i64 %lncrZ to double*
  %lncs1 = load double, double* %lncs0, !tbaa !4
  store double %lncs1, double* %ls7A3
  %lncs2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncs3 = bitcast i64* %lncs2 to i64*
  %lncs4 = load i64, i64* %lncs3, !tbaa !2
  store i64 %lncs4, i64* %R1_Var
  %lncs5 = load double, double* %ls7A3
  %lncs6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncs7 = bitcast i64* %lncs6 to double*
  store double %lncs5, double* %lncs7, !tbaa !2
  %lncs8 = load i64, i64* %R1_Var
  %lncs9 = and i64 %lncs8, 7
  %lncsa = icmp ne i64 %lncs9, 0
  br i1 %lncsa, label %ucmV, label %ccmH
ccmH:
  %lncsc = load i64, i64* %R1_Var
  %lncsd = inttoptr i64 %lncsc to i64*
  %lncse = load i64, i64* %lncsd, !tbaa !4
  %lncsf = inttoptr i64 %lncse to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncsg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncsf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncsg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucmV:
  %lncsh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncsi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncsh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncsi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccmG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccmG_info$def to i8*)
define internal ghccc void @ccmG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ncsj:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7A6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccmG
ccmG:
  %lncsk = load i64*, i64** %Hp_Var
  %lncsl = getelementptr inbounds i64, i64* %lncsk, i32 2
  %lncsm = ptrtoint i64* %lncsl to i64
  %lncsn = inttoptr i64 %lncsm to i64*
  store i64* %lncsn, i64** %Hp_Var
  %lncso = load i64*, i64** %Hp_Var
  %lncsp = ptrtoint i64* %lncso to i64
  %lncsq = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncsr = bitcast i64* %lncsq to i64*
  %lncss = load i64, i64* %lncsr, !tbaa !5
  %lncst = icmp ugt i64 %lncsp, %lncss
  %lncsu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncst, i1 0 )
  br i1 %lncsu, label %ccmU, label %ccmT
ccmT:
  %lncsv = load i64*, i64** %Sp_Var
  %lncsw = getelementptr inbounds i64, i64* %lncsv, i32 1
  %lncsx = bitcast i64* %lncsw to double*
  %lncsy = load double, double* %lncsx, !tbaa !2
  %lncsB = load i64, i64* %R1_Var
  %lncsC = add i64 %lncsB, 7
  %lncsD = inttoptr i64 %lncsC to double*
  %lncsE = load double, double* %lncsD, !tbaa !4
  %lncsF = fsub double %lncsy, %lncsE
  store double %lncsF, double* %ls7A6
  %lncsH = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lncsG = load i64*, i64** %Hp_Var
  %lncsI = getelementptr inbounds i64, i64* %lncsG, i32 -1
  store i64 %lncsH, i64* %lncsI, !tbaa !3
  %lncsK = load double, double* %ls7A6
  %lncsJ = load i64*, i64** %Hp_Var
  %lncsL = getelementptr inbounds i64, i64* %lncsJ, i32 0
  %lncsM = bitcast i64* %lncsL to double*
  store double %lncsK, double* %lncsM, !tbaa !3
  %lncsO = load i64*, i64** %Hp_Var
  %lncsP = ptrtoint i64* %lncsO to i64
  %lncsQ = add i64 %lncsP, -7
  store i64 %lncsQ, i64* %R1_Var
  %lncsR = load i64*, i64** %Sp_Var
  %lncsS = getelementptr inbounds i64, i64* %lncsR, i32 2
  %lncsT = ptrtoint i64* %lncsS to i64
  %lncsU = inttoptr i64 %lncsT to i64*
  store i64* %lncsU, i64** %Sp_Var
  %lncsV = load i64*, i64** %Sp_Var
  %lncsW = getelementptr inbounds i64, i64* %lncsV, i32 0
  %lncsX = bitcast i64* %lncsW to i64*
  %lncsY = load i64, i64* %lncsX, !tbaa !2
  %lncsZ = inttoptr i64 %lncsY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnct0 = load i64*, i64** %Sp_Var
  %lnct1 = load i64*, i64** %Hp_Var
  %lnct2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncsZ( i64* %Base_Arg, i64* %lnct0, i64* %lnct1, i64 %lnct2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccmU:
  %lnct3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnct3, !tbaa !5
  %lnct4 = load i64, i64* %R1_Var
  store i64 %lnct4, i64* %R1_Var
  %lnct5 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnct6 = load i64*, i64** %Sp_Var
  %lnct7 = load i64*, i64** %Hp_Var
  %lnct8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnct5( i64* %Base_Arg, i64* %lnct6, i64* %lnct7, i64 %lnct8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7A1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7A1_info$def to i8*)
define internal ghccc void @s7A1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nct9:
  %ls7zT = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccn4
ccn4:
  %lncta = load i64*, i64** %Sp_Var
  %lnctb = getelementptr inbounds i64, i64* %lncta, i32 -4
  %lnctc = ptrtoint i64* %lnctb to i64
  %lnctd = icmp ult i64 %lnctc, %SpLim_Arg
  %lncte = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnctd, i1 0 )
  br i1 %lncte, label %ccng, label %ccnh
ccnh:
  %lnctg = ptrtoint i8* @stg_upd_frame_info to i64
  %lnctf = load i64*, i64** %Sp_Var
  %lncth = getelementptr inbounds i64, i64* %lnctf, i32 -2
  store i64 %lnctg, i64* %lncth, !tbaa !2
  %lnctj = load i64, i64* %R1_Var
  %lncti = load i64*, i64** %Sp_Var
  %lnctk = getelementptr inbounds i64, i64* %lncti, i32 -1
  store i64 %lnctj, i64* %lnctk, !tbaa !2
  %lnctm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn1_info$def to i64
  %lnctl = load i64*, i64** %Sp_Var
  %lnctn = getelementptr inbounds i64, i64* %lnctl, i32 -4
  store i64 %lnctm, i64* %lnctn, !tbaa !2
  %lnctq = load i64, i64* %R1_Var
  %lnctr = add i64 %lnctq, 16
  %lncts = inttoptr i64 %lnctr to i64*
  %lnctt = load i64, i64* %lncts, !tbaa !4
  store i64 %lnctt, i64* %ls7zT
  %lnctw = load i64, i64* %R1_Var
  %lnctx = add i64 %lnctw, 24
  %lncty = inttoptr i64 %lnctx to i64*
  %lnctz = load i64, i64* %lncty, !tbaa !4
  store i64 %lnctz, i64* %R1_Var
  %lnctB = load i64, i64* %ls7zT
  %lnctA = load i64*, i64** %Sp_Var
  %lnctC = getelementptr inbounds i64, i64* %lnctA, i32 -3
  store i64 %lnctB, i64* %lnctC, !tbaa !2
  %lnctD = load i64*, i64** %Sp_Var
  %lnctE = getelementptr inbounds i64, i64* %lnctD, i32 -4
  %lnctF = ptrtoint i64* %lnctE to i64
  %lnctG = inttoptr i64 %lnctF to i64*
  store i64* %lnctG, i64** %Sp_Var
  %lnctH = load i64, i64* %R1_Var
  %lnctI = and i64 %lnctH, 7
  %lnctJ = icmp ne i64 %lnctI, 0
  br i1 %lnctJ, label %ucnn, label %ccn2
ccn2:
  %lnctL = load i64, i64* %R1_Var
  %lnctM = inttoptr i64 %lnctL to i64*
  %lnctN = load i64, i64* %lnctM, !tbaa !4
  %lnctO = inttoptr i64 %lnctN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnctP = load i64*, i64** %Sp_Var
  %lnctQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnctO( i64* %Base_Arg, i64* %lnctP, i64* %Hp_Arg, i64 %lnctQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucnn:
  %lnctR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnctS = load i64*, i64** %Sp_Var
  %lnctT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnctR( i64* %Base_Arg, i64* %lnctS, i64* %Hp_Arg, i64 %lnctT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccng:
  %lnctU = load i64, i64* %R1_Var
  store i64 %lnctU, i64* %R1_Var
  %lnctV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnctW = bitcast i64* %lnctV to i64*
  %lnctX = load i64, i64* %lnctW, !tbaa !5
  %lnctY = inttoptr i64 %lnctX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnctZ = load i64*, i64** %Sp_Var
  %lncu0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnctY( i64* %Base_Arg, i64* %lnctZ, i64* %Hp_Arg, i64 %lncu0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccn1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn1_info$def to i8*)
define internal ghccc void @ccn1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncu1:
  %ls7zX = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccn1
ccn1:
  %lncu2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn7_info$def to i64
  %lncu3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncu2, i64* %lncu3, !tbaa !2
  %lncu6 = load i64, i64* %R1_Var
  %lncu7 = add i64 %lncu6, 7
  %lncu8 = inttoptr i64 %lncu7 to double*
  %lncu9 = load double, double* %lncu8, !tbaa !4
  store double %lncu9, double* %ls7zX
  %lncua = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncub = bitcast i64* %lncua to i64*
  %lncuc = load i64, i64* %lncub, !tbaa !2
  store i64 %lncuc, i64* %R1_Var
  %lncud = load double, double* %ls7zX
  %lncue = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncuf = bitcast i64* %lncue to double*
  store double %lncud, double* %lncuf, !tbaa !2
  %lncug = load i64, i64* %R1_Var
  %lncuh = and i64 %lncug, 7
  %lncui = icmp ne i64 %lncuh, 0
  br i1 %lncui, label %ucnm, label %ccn8
ccn8:
  %lncuk = load i64, i64* %R1_Var
  %lncul = inttoptr i64 %lncuk to i64*
  %lncum = load i64, i64* %lncul, !tbaa !4
  %lncun = inttoptr i64 %lncum to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncuo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncun( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncuo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucnm:
  %lncup = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncuq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncup( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncuq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccn7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccn7_info$def to i8*)
define internal ghccc void @ccn7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ncur:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7A0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccn7
ccn7:
  %lncus = load i64*, i64** %Hp_Var
  %lncut = getelementptr inbounds i64, i64* %lncus, i32 2
  %lncuu = ptrtoint i64* %lncut to i64
  %lncuv = inttoptr i64 %lncuu to i64*
  store i64* %lncuv, i64** %Hp_Var
  %lncuw = load i64*, i64** %Hp_Var
  %lncux = ptrtoint i64* %lncuw to i64
  %lncuy = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncuz = bitcast i64* %lncuy to i64*
  %lncuA = load i64, i64* %lncuz, !tbaa !5
  %lncuB = icmp ugt i64 %lncux, %lncuA
  %lncuC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncuB, i1 0 )
  br i1 %lncuC, label %ccnl, label %ccnk
ccnk:
  %lncuD = load i64*, i64** %Sp_Var
  %lncuE = getelementptr inbounds i64, i64* %lncuD, i32 1
  %lncuF = bitcast i64* %lncuE to double*
  %lncuG = load double, double* %lncuF, !tbaa !2
  %lncuJ = load i64, i64* %R1_Var
  %lncuK = add i64 %lncuJ, 7
  %lncuL = inttoptr i64 %lncuK to double*
  %lncuM = load double, double* %lncuL, !tbaa !4
  %lncuN = fsub double %lncuG, %lncuM
  store double %lncuN, double* %ls7A0
  %lncuP = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lncuO = load i64*, i64** %Hp_Var
  %lncuQ = getelementptr inbounds i64, i64* %lncuO, i32 -1
  store i64 %lncuP, i64* %lncuQ, !tbaa !3
  %lncuS = load double, double* %ls7A0
  %lncuR = load i64*, i64** %Hp_Var
  %lncuT = getelementptr inbounds i64, i64* %lncuR, i32 0
  %lncuU = bitcast i64* %lncuT to double*
  store double %lncuS, double* %lncuU, !tbaa !3
  %lncuW = load i64*, i64** %Hp_Var
  %lncuX = ptrtoint i64* %lncuW to i64
  %lncuY = add i64 %lncuX, -7
  store i64 %lncuY, i64* %R1_Var
  %lncuZ = load i64*, i64** %Sp_Var
  %lncv0 = getelementptr inbounds i64, i64* %lncuZ, i32 2
  %lncv1 = ptrtoint i64* %lncv0 to i64
  %lncv2 = inttoptr i64 %lncv1 to i64*
  store i64* %lncv2, i64** %Sp_Var
  %lncv3 = load i64*, i64** %Sp_Var
  %lncv4 = getelementptr inbounds i64, i64* %lncv3, i32 0
  %lncv5 = bitcast i64* %lncv4 to i64*
  %lncv6 = load i64, i64* %lncv5, !tbaa !2
  %lncv7 = inttoptr i64 %lncv6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncv8 = load i64*, i64** %Sp_Var
  %lncv9 = load i64*, i64** %Hp_Var
  %lncva = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncv7( i64* %Base_Arg, i64* %lncv8, i64* %lncv9, i64 %lncva, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccnl:
  %lncvb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncvb, !tbaa !5
  %lncvc = load i64, i64* %R1_Var
  store i64 %lncvc, i64* %R1_Var
  %lncvd = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncve = load i64*, i64** %Sp_Var
  %lncvf = load i64*, i64** %Hp_Var
  %lncvg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvd( i64* %Base_Arg, i64* %lncve, i64* %lncvf, i64 %lncvg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwlightdirection_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightdirection_info$def to i8*)
define ghccc void @Main_zdwlightdirection_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
ncvh:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ccns
ccns:
  %lncvi = load i64*, i64** %Sp_Var
  %lncvj = getelementptr inbounds i64, i64* %lncvi, i32 -4
  %lncvk = ptrtoint i64* %lncvj to i64
  %lncvl = icmp ult i64 %lncvk, %SpLim_Arg
  %lncvm = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncvl, i1 0 )
  br i1 %lncvm, label %ccnt, label %ccnu
ccnu:
  %lncvo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclx_info$def to i64
  %lncvn = load i64*, i64** %Sp_Var
  %lncvp = getelementptr inbounds i64, i64* %lncvn, i32 -2
  store i64 %lncvo, i64* %lncvp, !tbaa !2
  %lncvq = load i64, i64* %R2_Var
  store i64 %lncvq, i64* %R1_Var
  %lncvs = load i64, i64* %R3_Var
  %lncvr = load i64*, i64** %Sp_Var
  %lncvt = getelementptr inbounds i64, i64* %lncvr, i32 -1
  store i64 %lncvs, i64* %lncvt, !tbaa !2
  %lncvu = load i64*, i64** %Sp_Var
  %lncvv = getelementptr inbounds i64, i64* %lncvu, i32 -2
  %lncvw = ptrtoint i64* %lncvv to i64
  %lncvx = inttoptr i64 %lncvw to i64*
  store i64* %lncvx, i64** %Sp_Var
  %lncvy = load i64, i64* %R1_Var
  %lncvz = and i64 %lncvy, 7
  %lncvA = icmp ne i64 %lncvz, 0
  br i1 %lncvA, label %ucnF, label %ccly
ccly:
  %lncvC = load i64, i64* %R1_Var
  %lncvD = inttoptr i64 %lncvC to i64*
  %lncvE = load i64, i64* %lncvD, !tbaa !4
  %lncvF = inttoptr i64 %lncvE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvG = load i64*, i64** %Sp_Var
  %lncvH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvF( i64* %Base_Arg, i64* %lncvG, i64* %Hp_Arg, i64 %lncvH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucnF:
  %lncvI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvJ = load i64*, i64** %Sp_Var
  %lncvK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvI( i64* %Base_Arg, i64* %lncvJ, i64* %Hp_Arg, i64 %lncvK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccnt:
  %lncvL = load i64, i64* %R3_Var
  store i64 %lncvL, i64* %R3_Var
  %lncvM = load i64, i64* %R2_Var
  store i64 %lncvM, i64* %R2_Var
  %lncvN = ptrtoint %Main_zdwlightdirection_closure_struct* @Main_zdwlightdirection_closure$def to i64
  store i64 %lncvN, i64* %R1_Var
  %lncvO = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncvP = bitcast i64* %lncvO to i64*
  %lncvQ = load i64, i64* %lncvP, !tbaa !5
  %lncvR = inttoptr i64 %lncvQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvS = load i64*, i64** %Sp_Var
  %lncvT = load i64, i64* %R1_Var
  %lncvU = load i64, i64* %R2_Var
  %lncvV = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvR( i64* %Base_Arg, i64* %lncvS, i64* %Hp_Arg, i64 %lncvT, i64 %lncvU, i64 %lncvV, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cclx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclx_info$def to i8*)
define internal ghccc void @cclx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncvW:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7zC = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cclx
cclx:
  %lncvX = load i64, i64* %R1_Var
  %lncvY = and i64 %lncvX, 7
  switch i64 %lncvY, label %ccnp [i64 1, label %ccnp
i64 2, label %ccnq]
ccnp:
  %lncvZ = load i64*, i64** %Hp_Var
  %lncw0 = getelementptr inbounds i64, i64* %lncvZ, i32 3
  %lncw1 = ptrtoint i64* %lncw0 to i64
  %lncw2 = inttoptr i64 %lncw1 to i64*
  store i64* %lncw2, i64** %Hp_Var
  %lncw3 = load i64*, i64** %Hp_Var
  %lncw4 = ptrtoint i64* %lncw3 to i64
  %lncw5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncw6 = bitcast i64* %lncw5 to i64*
  %lncw7 = load i64, i64* %lncw6, !tbaa !5
  %lncw8 = icmp ugt i64 %lncw4, %lncw7
  %lncw9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncw8, i1 0 )
  br i1 %lncw9, label %ccnx, label %ccnw
ccnw:
  %lncwc = load i64, i64* %R1_Var
  %lncwd = add i64 %lncwc, 7
  %lncwe = inttoptr i64 %lncwd to i64*
  %lncwf = load i64, i64* %lncwe, !tbaa !4
  store i64 %lncwf, i64* %ls7zC
  %lncwh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7zL_info$def to i64
  %lncwg = load i64*, i64** %Hp_Var
  %lncwi = getelementptr inbounds i64, i64* %lncwg, i32 -2
  store i64 %lncwh, i64* %lncwi, !tbaa !3
  %lncwk = load i64, i64* %ls7zC
  %lncwj = load i64*, i64** %Hp_Var
  %lncwl = getelementptr inbounds i64, i64* %lncwj, i32 0
  store i64 %lncwk, i64* %lncwl, !tbaa !3
  %lncwm = ptrtoint %Main_infinity_closure_struct* @Main_infinity_closure$def to i64
  %lncwn = add i64 %lncwm, 1
  store i64 %lncwn, i64* %R2_Var
  %lncwo = load i64*, i64** %Hp_Var
  %lncwp = getelementptr inbounds i64, i64* %lncwo, i32 -2
  %lncwq = ptrtoint i64* %lncwp to i64
  store i64 %lncwq, i64* %R1_Var
  %lncwr = load i64*, i64** %Sp_Var
  %lncws = getelementptr inbounds i64, i64* %lncwr, i32 2
  %lncwt = ptrtoint i64* %lncws to i64
  %lncwu = inttoptr i64 %lncwt to i64*
  store i64* %lncwu, i64** %Sp_Var
  %lncwv = load i64*, i64** %Sp_Var
  %lncww = getelementptr inbounds i64, i64* %lncwv, i32 0
  %lncwx = bitcast i64* %lncww to i64*
  %lncwy = load i64, i64* %lncwx, !tbaa !2
  %lncwz = inttoptr i64 %lncwy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncwA = load i64*, i64** %Sp_Var
  %lncwB = load i64*, i64** %Hp_Var
  %lncwC = load i64, i64* %R1_Var
  %lncwD = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncwz( i64* %Base_Arg, i64* %lncwA, i64* %lncwB, i64 %lncwC, i64 %lncwD, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccnx:
  %lncwE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lncwE, !tbaa !5
  %lncwF = load i64, i64* %R1_Var
  store i64 %lncwF, i64* %R1_Var
  %lncwG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncwH = load i64*, i64** %Sp_Var
  %lncwI = load i64*, i64** %Hp_Var
  %lncwJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncwG( i64* %Base_Arg, i64* %lncwH, i64* %lncwI, i64 %lncwJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccnq:
  %lncwL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclV_info$def to i64
  %lncwK = load i64*, i64** %Sp_Var
  %lncwM = getelementptr inbounds i64, i64* %lncwK, i32 0
  store i64 %lncwL, i64* %lncwM, !tbaa !2
  %lncwP = load i64, i64* %R1_Var
  %lncwQ = add i64 %lncwP, 6
  %lncwR = inttoptr i64 %lncwQ to i64*
  %lncwS = load i64, i64* %lncwR, !tbaa !4
  store i64 %lncwS, i64* %R1_Var
  %lncwT = load i64, i64* %R1_Var
  %lncwU = and i64 %lncwT, 7
  %lncwV = icmp ne i64 %lncwU, 0
  br i1 %lncwV, label %ucnD, label %cclW
cclW:
  %lncwX = load i64, i64* %R1_Var
  %lncwY = inttoptr i64 %lncwX to i64*
  %lncwZ = load i64, i64* %lncwY, !tbaa !4
  %lncx0 = inttoptr i64 %lncwZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncx1 = load i64*, i64** %Sp_Var
  %lncx2 = load i64*, i64** %Hp_Var
  %lncx3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncx0( i64* %Base_Arg, i64* %lncx1, i64* %lncx2, i64 %lncx3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucnD:
  %lncx4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncx5 = load i64*, i64** %Sp_Var
  %lncx6 = load i64*, i64** %Hp_Var
  %lncx7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncx4( i64* %Base_Arg, i64* %lncx5, i64* %lncx6, i64 %lncx7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cclV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cclV_info$def to i8*)
define internal ghccc void @cclV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ncx8:
  %ls7zP = alloca i64, i32 1
  %ls7zQ = alloca i64, i32 1
  %ls7zR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cclV
cclV:
  %lncxa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm0_info$def to i64
  %lncx9 = load i64*, i64** %Sp_Var
  %lncxb = getelementptr inbounds i64, i64* %lncx9, i32 -2
  store i64 %lncxa, i64* %lncxb, !tbaa !2
  %lncxe = load i64, i64* %R1_Var
  %lncxf = add i64 %lncxe, 7
  %lncxg = inttoptr i64 %lncxf to i64*
  %lncxh = load i64, i64* %lncxg, !tbaa !4
  store i64 %lncxh, i64* %ls7zP
  %lncxk = load i64, i64* %R1_Var
  %lncxl = add i64 %lncxk, 15
  %lncxm = inttoptr i64 %lncxl to i64*
  %lncxn = load i64, i64* %lncxm, !tbaa !4
  store i64 %lncxn, i64* %ls7zQ
  %lncxq = load i64, i64* %R1_Var
  %lncxr = add i64 %lncxq, 23
  %lncxs = inttoptr i64 %lncxr to i64*
  %lncxt = load i64, i64* %lncxs, !tbaa !4
  store i64 %lncxt, i64* %ls7zR
  %lncxu = load i64*, i64** %Sp_Var
  %lncxv = getelementptr inbounds i64, i64* %lncxu, i32 1
  %lncxw = bitcast i64* %lncxv to i64*
  %lncxx = load i64, i64* %lncxw, !tbaa !2
  store i64 %lncxx, i64* %R1_Var
  %lncxz = load i64, i64* %ls7zR
  %lncxy = load i64*, i64** %Sp_Var
  %lncxA = getelementptr inbounds i64, i64* %lncxy, i32 -1
  store i64 %lncxz, i64* %lncxA, !tbaa !2
  %lncxC = load i64, i64* %ls7zQ
  %lncxB = load i64*, i64** %Sp_Var
  %lncxD = getelementptr inbounds i64, i64* %lncxB, i32 0
  store i64 %lncxC, i64* %lncxD, !tbaa !2
  %lncxF = load i64, i64* %ls7zP
  %lncxE = load i64*, i64** %Sp_Var
  %lncxG = getelementptr inbounds i64, i64* %lncxE, i32 1
  store i64 %lncxF, i64* %lncxG, !tbaa !2
  %lncxH = load i64*, i64** %Sp_Var
  %lncxI = getelementptr inbounds i64, i64* %lncxH, i32 -2
  %lncxJ = ptrtoint i64* %lncxI to i64
  %lncxK = inttoptr i64 %lncxJ to i64*
  store i64* %lncxK, i64** %Sp_Var
  %lncxL = load i64, i64* %R1_Var
  %lncxM = and i64 %lncxL, 7
  %lncxN = icmp ne i64 %lncxM, 0
  br i1 %lncxN, label %ucnE, label %ccm1
ccm1:
  %lncxP = load i64, i64* %R1_Var
  %lncxQ = inttoptr i64 %lncxP to i64*
  %lncxR = load i64, i64* %lncxQ, !tbaa !4
  %lncxS = inttoptr i64 %lncxR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncxT = load i64*, i64** %Sp_Var
  %lncxU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncxS( i64* %Base_Arg, i64* %lncxT, i64* %Hp_Arg, i64 %lncxU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucnE:
  %lncxV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm0_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncxW = load i64*, i64** %Sp_Var
  %lncxX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncxV( i64* %Base_Arg, i64* %lncxW, i64* %Hp_Arg, i64 %lncxX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccm0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccm0_info$def to i8*)
define internal ghccc void @ccm0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ncxY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7zT = alloca i64, i32 1
  %ls7zU = alloca i64, i32 1
  %ls7zV = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccm0
ccm0:
  %lncxZ = load i64*, i64** %Hp_Var
  %lncy0 = getelementptr inbounds i64, i64* %lncxZ, i32 12
  %lncy1 = ptrtoint i64* %lncy0 to i64
  %lncy2 = inttoptr i64 %lncy1 to i64*
  store i64* %lncy2, i64** %Hp_Var
  %lncy3 = load i64*, i64** %Hp_Var
  %lncy4 = ptrtoint i64* %lncy3 to i64
  %lncy5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncy6 = bitcast i64* %lncy5 to i64*
  %lncy7 = load i64, i64* %lncy6, !tbaa !5
  %lncy8 = icmp ugt i64 %lncy4, %lncy7
  %lncy9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncy8, i1 0 )
  br i1 %lncy9, label %ccnC, label %ccnB
ccnB:
  %lncyc = load i64, i64* %R1_Var
  %lncyd = add i64 %lncyc, 7
  %lncye = inttoptr i64 %lncyd to i64*
  %lncyf = load i64, i64* %lncye, !tbaa !4
  store i64 %lncyf, i64* %ls7zT
  %lncyi = load i64, i64* %R1_Var
  %lncyj = add i64 %lncyi, 15
  %lncyk = inttoptr i64 %lncyj to i64*
  %lncyl = load i64, i64* %lncyk, !tbaa !4
  store i64 %lncyl, i64* %ls7zU
  %lncyo = load i64, i64* %R1_Var
  %lncyp = add i64 %lncyo, 23
  %lncyq = inttoptr i64 %lncyp to i64*
  %lncyr = load i64, i64* %lncyq, !tbaa !4
  store i64 %lncyr, i64* %ls7zV
  %lncyt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ad_info$def to i64
  %lncys = load i64*, i64** %Hp_Var
  %lncyu = getelementptr inbounds i64, i64* %lncys, i32 -11
  store i64 %lncyt, i64* %lncyu, !tbaa !3
  %lncyw = load i64, i64* %ls7zV
  %lncyv = load i64*, i64** %Hp_Var
  %lncyx = getelementptr inbounds i64, i64* %lncyv, i32 -9
  store i64 %lncyw, i64* %lncyx, !tbaa !3
  %lncyz = load i64*, i64** %Sp_Var
  %lncyA = getelementptr inbounds i64, i64* %lncyz, i32 1
  %lncyB = bitcast i64* %lncyA to i64*
  %lncyC = load i64, i64* %lncyB, !tbaa !2
  %lncyy = load i64*, i64** %Hp_Var
  %lncyD = getelementptr inbounds i64, i64* %lncyy, i32 -8
  store i64 %lncyC, i64* %lncyD, !tbaa !3
  %lncyF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7A7_info$def to i64
  %lncyE = load i64*, i64** %Hp_Var
  %lncyG = getelementptr inbounds i64, i64* %lncyE, i32 -7
  store i64 %lncyF, i64* %lncyG, !tbaa !3
  %lncyI = load i64, i64* %ls7zU
  %lncyH = load i64*, i64** %Hp_Var
  %lncyJ = getelementptr inbounds i64, i64* %lncyH, i32 -5
  store i64 %lncyI, i64* %lncyJ, !tbaa !3
  %lncyL = load i64*, i64** %Sp_Var
  %lncyM = getelementptr inbounds i64, i64* %lncyL, i32 2
  %lncyN = bitcast i64* %lncyM to i64*
  %lncyO = load i64, i64* %lncyN, !tbaa !2
  %lncyK = load i64*, i64** %Hp_Var
  %lncyP = getelementptr inbounds i64, i64* %lncyK, i32 -4
  store i64 %lncyO, i64* %lncyP, !tbaa !3
  %lncyR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7A1_info$def to i64
  %lncyQ = load i64*, i64** %Hp_Var
  %lncyS = getelementptr inbounds i64, i64* %lncyQ, i32 -3
  store i64 %lncyR, i64* %lncyS, !tbaa !3
  %lncyU = load i64, i64* %ls7zT
  %lncyT = load i64*, i64** %Hp_Var
  %lncyV = getelementptr inbounds i64, i64* %lncyT, i32 -1
  store i64 %lncyU, i64* %lncyV, !tbaa !3
  %lncyX = load i64*, i64** %Sp_Var
  %lncyY = getelementptr inbounds i64, i64* %lncyX, i32 3
  %lncyZ = bitcast i64* %lncyY to i64*
  %lncz0 = load i64, i64* %lncyZ, !tbaa !2
  %lncyW = load i64*, i64** %Hp_Var
  %lncz1 = getelementptr inbounds i64, i64* %lncyW, i32 0
  store i64 %lncz0, i64* %lncz1, !tbaa !3
  %lncz2 = load i64*, i64** %Hp_Var
  %lncz3 = getelementptr inbounds i64, i64* %lncz2, i32 -11
  %lncz4 = ptrtoint i64* %lncz3 to i64
  store i64 %lncz4, i64* %R4_Var
  %lncz5 = load i64*, i64** %Hp_Var
  %lncz6 = getelementptr inbounds i64, i64* %lncz5, i32 -7
  %lncz7 = ptrtoint i64* %lncz6 to i64
  store i64 %lncz7, i64* %R3_Var
  %lncz8 = load i64*, i64** %Hp_Var
  %lncz9 = getelementptr inbounds i64, i64* %lncz8, i32 -3
  %lncza = ptrtoint i64* %lncz9 to i64
  store i64 %lncza, i64* %R2_Var
  %lnczb = load i64*, i64** %Sp_Var
  %lnczc = getelementptr inbounds i64, i64* %lnczb, i32 4
  %lnczd = ptrtoint i64* %lnczc to i64
  %lncze = inttoptr i64 %lnczd to i64*
  store i64* %lncze, i64** %Sp_Var
  %lnczf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwvecnorm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczg = load i64*, i64** %Sp_Var
  %lnczh = load i64*, i64** %Hp_Var
  %lnczi = load i64, i64* %R1_Var
  %lnczj = load i64, i64* %R2_Var
  %lnczk = load i64, i64* %R3_Var
  %lnczl = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczf( i64* %Base_Arg, i64* %lnczg, i64* %lnczh, i64 %lnczi, i64 %lnczj, i64 %lnczk, i64 %lnczl, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccnC:
  %lnczm = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %lnczm, !tbaa !5
  %lnczn = load i64, i64* %R1_Var
  store i64 %lnczn, i64* %R1_Var
  %lnczo = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczp = load i64*, i64** %Sp_Var
  %lnczq = load i64*, i64** %Hp_Var
  %lnczr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczo( i64* %Base_Arg, i64* %lnczp, i64* %lnczq, i64 %lnczr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lightdirection_closure_struct = type <{i64}>
@Main_lightdirection_closure$def = internal global %Main_lightdirection_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdirection_info$def to i64)}>
@Main_lightdirection_closure = alias i8, bitcast (%Main_lightdirection_closure_struct* @Main_lightdirection_closure$def to i8*)
@Main_lightdirection_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightdirection_info$def to i8*)
define ghccc void @Main_lightdirection_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934607, i64 0, i32 14, i32 0}>
{
nczF:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cczz
cczz:
  %lnczG = load i64*, i64** %Sp_Var
  %lnczH = getelementptr inbounds i64, i64* %lnczG, i32 -1
  %lnczI = ptrtoint i64* %lnczH to i64
  %lnczJ = icmp ult i64 %lnczI, %SpLim_Arg
  %lnczK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnczJ, i1 0 )
  br i1 %lnczK, label %cczA, label %cczB
cczB:
  %lnczM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cczw_info$def to i64
  %lnczL = load i64*, i64** %Sp_Var
  %lnczN = getelementptr inbounds i64, i64* %lnczL, i32 -1
  store i64 %lnczM, i64* %lnczN, !tbaa !2
  %lnczO = load i64, i64* %R3_Var
  store i64 %lnczO, i64* %R3_Var
  %lnczP = load i64, i64* %R2_Var
  store i64 %lnczP, i64* %R2_Var
  %lnczQ = load i64*, i64** %Sp_Var
  %lnczR = getelementptr inbounds i64, i64* %lnczQ, i32 -1
  %lnczS = ptrtoint i64* %lnczR to i64
  %lnczT = inttoptr i64 %lnczS to i64*
  store i64* %lnczT, i64** %Sp_Var
  %lnczU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightdirection_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczV = load i64*, i64** %Sp_Var
  %lnczW = load i64, i64* %R1_Var
  %lnczX = load i64, i64* %R2_Var
  %lnczY = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczU( i64* %Base_Arg, i64* %lnczV, i64* %Hp_Arg, i64 %lnczW, i64 %lnczX, i64 %lnczY, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cczA:
  %lnczZ = load i64, i64* %R3_Var
  store i64 %lnczZ, i64* %R3_Var
  %lncA0 = load i64, i64* %R2_Var
  store i64 %lncA0, i64* %R2_Var
  %lncA1 = ptrtoint %Main_lightdirection_closure_struct* @Main_lightdirection_closure$def to i64
  store i64 %lncA1, i64* %R1_Var
  %lncA2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncA3 = bitcast i64* %lncA2 to i64*
  %lncA4 = load i64, i64* %lncA3, !tbaa !5
  %lncA5 = inttoptr i64 %lncA4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncA6 = load i64*, i64** %Sp_Var
  %lncA7 = load i64, i64* %R1_Var
  %lncA8 = load i64, i64* %R2_Var
  %lncA9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncA5( i64* %Base_Arg, i64* %lncA6, i64* %Hp_Arg, i64 %lncA7, i64 %lncA8, i64 %lncA9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cczw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cczw_info$def to i8*)
define internal ghccc void @cczw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ncAa:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cczw
cczw:
  %lncAb = load i64*, i64** %Hp_Var
  %lncAc = getelementptr inbounds i64, i64* %lncAb, i32 3
  %lncAd = ptrtoint i64* %lncAc to i64
  %lncAe = inttoptr i64 %lncAd to i64*
  store i64* %lncAe, i64** %Hp_Var
  %lncAf = load i64*, i64** %Hp_Var
  %lncAg = ptrtoint i64* %lncAf to i64
  %lncAh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncAi = bitcast i64* %lncAh to i64*
  %lncAj = load i64, i64* %lncAi, !tbaa !5
  %lncAk = icmp ugt i64 %lncAg, %lncAj
  %lncAl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncAk, i1 0 )
  br i1 %lncAl, label %cczE, label %cczD
cczD:
  %lncAn = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lncAm = load i64*, i64** %Hp_Var
  %lncAo = getelementptr inbounds i64, i64* %lncAm, i32 -2
  store i64 %lncAn, i64* %lncAo, !tbaa !3
  %lncAq = load i64, i64* %R1_Var
  %lncAp = load i64*, i64** %Hp_Var
  %lncAr = getelementptr inbounds i64, i64* %lncAp, i32 -1
  store i64 %lncAq, i64* %lncAr, !tbaa !3
  %lncAt = load i64, i64* %R2_Var
  %lncAs = load i64*, i64** %Hp_Var
  %lncAu = getelementptr inbounds i64, i64* %lncAs, i32 0
  store i64 %lncAt, i64* %lncAu, !tbaa !3
  %lncAw = load i64*, i64** %Hp_Var
  %lncAx = ptrtoint i64* %lncAw to i64
  %lncAy = add i64 %lncAx, -15
  store i64 %lncAy, i64* %R1_Var
  %lncAz = load i64*, i64** %Sp_Var
  %lncAA = getelementptr inbounds i64, i64* %lncAz, i32 1
  %lncAB = ptrtoint i64* %lncAA to i64
  %lncAC = inttoptr i64 %lncAB to i64*
  store i64* %lncAC, i64** %Sp_Var
  %lncAD = load i64*, i64** %Sp_Var
  %lncAE = getelementptr inbounds i64, i64* %lncAD, i32 0
  %lncAF = bitcast i64* %lncAE to i64*
  %lncAG = load i64, i64* %lncAF, !tbaa !2
  %lncAH = inttoptr i64 %lncAG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncAI = load i64*, i64** %Sp_Var
  %lncAJ = load i64*, i64** %Hp_Var
  %lncAK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncAH( i64* %Base_Arg, i64* %lncAI, i64* %lncAJ, i64 %lncAK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cczE:
  %lncAL = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lncAL, !tbaa !5
  %lncAM = load i64, i64* %R2_Var
  store i64 %lncAM, i64* %R2_Var
  %lncAN = load i64, i64* %R1_Var
  store i64 %lncAN, i64* %R1_Var
  %lncAO = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncAP = load i64*, i64** %Sp_Var
  %lncAQ = load i64*, i64** %Hp_Var
  %lncAR = load i64, i64* %R1_Var
  %lncAS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncAO( i64* %Base_Arg, i64* %lncAP, i64* %lncAQ, i64 %lncAR, i64 %lncAS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwtrace_closure_struct = type <{i64, i64}>
@Main_zdwtrace_closure$def = internal global %Main_zdwtrace_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to i64), i64 0}>
@Main_zdwtrace_closure = alias i8, bitcast (%Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i8*)
@s7D6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7D6_info$def to i8*)
define internal ghccc void @s7D6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncGt:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccDp
ccDp:
  %lncGu = load i64*, i64** %Sp_Var
  %lncGv = getelementptr inbounds i64, i64* %lncGu, i32 -2
  %lncGw = ptrtoint i64* %lncGv to i64
  %lncGx = icmp ult i64 %lncGw, %SpLim_Arg
  %lncGy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncGx, i1 0 )
  br i1 %lncGy, label %ccDq, label %ccDr
ccDr:
  %lncGA = ptrtoint i8* @stg_upd_frame_info to i64
  %lncGz = load i64*, i64** %Sp_Var
  %lncGB = getelementptr inbounds i64, i64* %lncGz, i32 -2
  store i64 %lncGA, i64* %lncGB, !tbaa !2
  %lncGD = load i64, i64* %R1_Var
  %lncGC = load i64*, i64** %Sp_Var
  %lncGE = getelementptr inbounds i64, i64* %lncGC, i32 -1
  store i64 %lncGD, i64* %lncGE, !tbaa !2
  %lncGH = load i64, i64* %R1_Var
  %lncGI = add i64 %lncGH, 24
  %lncGJ = inttoptr i64 %lncGI to i64*
  %lncGK = load i64, i64* %lncGJ, !tbaa !4
  store i64 %lncGK, i64* %R2_Var
  %lncGN = load i64, i64* %R1_Var
  %lncGO = add i64 %lncGN, 16
  %lncGP = inttoptr i64 %lncGO to i64*
  %lncGQ = load i64, i64* %lncGP, !tbaa !4
  store i64 %lncGQ, i64* %R1_Var
  %lncGR = load i64*, i64** %Sp_Var
  %lncGS = getelementptr inbounds i64, i64* %lncGR, i32 -2
  %lncGT = ptrtoint i64* %lncGS to i64
  %lncGU = inttoptr i64 %lncGT to i64*
  store i64* %lncGU, i64** %Sp_Var
  %lncGV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7C3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncGW = load i64*, i64** %Sp_Var
  %lncGX = load i64, i64* %R1_Var
  %lncGY = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncGV( i64* %Base_Arg, i64* %lncGW, i64* %Hp_Arg, i64 %lncGX, i64 %lncGY, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccDq:
  %lncGZ = load i64, i64* %R1_Var
  store i64 %lncGZ, i64* %R1_Var
  %lncH0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncH1 = bitcast i64* %lncH0 to i64*
  %lncH2 = load i64, i64* %lncH1, !tbaa !5
  %lncH3 = inttoptr i64 %lncH2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncH4 = load i64*, i64** %Sp_Var
  %lncH5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncH3( i64* %Base_Arg, i64* %lncH4, i64* %Hp_Arg, i64 %lncH5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Dd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dd_info$def to i8*)
define internal ghccc void @s7Dd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncH6:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccDK
ccDK:
  %lncH7 = load i64*, i64** %Sp_Var
  %lncH8 = getelementptr inbounds i64, i64* %lncH7, i32 -2
  %lncH9 = ptrtoint i64* %lncH8 to i64
  %lncHa = icmp ult i64 %lncH9, %SpLim_Arg
  %lncHb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncHa, i1 0 )
  br i1 %lncHb, label %ccDL, label %ccDM
ccDM:
  %lncHd = ptrtoint i8* @stg_upd_frame_info to i64
  %lncHc = load i64*, i64** %Sp_Var
  %lncHe = getelementptr inbounds i64, i64* %lncHc, i32 -2
  store i64 %lncHd, i64* %lncHe, !tbaa !2
  %lncHg = load i64, i64* %R1_Var
  %lncHf = load i64*, i64** %Sp_Var
  %lncHh = getelementptr inbounds i64, i64* %lncHf, i32 -1
  store i64 %lncHg, i64* %lncHh, !tbaa !2
  %lncHk = load i64, i64* %R1_Var
  %lncHl = add i64 %lncHk, 24
  %lncHm = inttoptr i64 %lncHl to i64*
  %lncHn = load i64, i64* %lncHm, !tbaa !4
  store i64 %lncHn, i64* %R2_Var
  %lncHq = load i64, i64* %R1_Var
  %lncHr = add i64 %lncHq, 16
  %lncHs = inttoptr i64 %lncHr to i64*
  %lncHt = load i64, i64* %lncHs, !tbaa !4
  store i64 %lncHt, i64* %R1_Var
  %lncHu = load i64*, i64** %Sp_Var
  %lncHv = getelementptr inbounds i64, i64* %lncHu, i32 -2
  %lncHw = ptrtoint i64* %lncHv to i64
  %lncHx = inttoptr i64 %lncHw to i64*
  store i64* %lncHx, i64** %Sp_Var
  %lncHy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7C3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncHz = load i64*, i64** %Sp_Var
  %lncHA = load i64, i64* %R1_Var
  %lncHB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncHy( i64* %Base_Arg, i64* %lncHz, i64* %Hp_Arg, i64 %lncHA, i64 %lncHB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccDL:
  %lncHC = load i64, i64* %R1_Var
  store i64 %lncHC, i64* %R1_Var
  %lncHD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncHE = bitcast i64* %lncHD to i64*
  %lncHF = load i64, i64* %lncHE, !tbaa !5
  %lncHG = inttoptr i64 %lncHF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncHH = load i64*, i64** %Sp_Var
  %lncHI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncHG( i64* %Base_Arg, i64* %lncHH, i64* %Hp_Arg, i64 %lncHI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7C3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7C3_info$def to i8*)
define internal ghccc void @s7C3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 2, i32 11, i32 0}>
{
ncHJ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccDR
ccDR:
  %lncHK = load i64*, i64** %Sp_Var
  %lncHL = getelementptr inbounds i64, i64* %lncHK, i32 -13
  %lncHM = ptrtoint i64* %lncHL to i64
  %lncHN = icmp ult i64 %lncHM, %SpLim_Arg
  %lncHO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncHN, i1 0 )
  br i1 %lncHO, label %ccDS, label %ucEs
ucEs:
  %lncHQ = load i64, i64* %R1_Var
  %lncHP = load i64*, i64** %Sp_Var
  %lncHR = getelementptr inbounds i64, i64* %lncHP, i32 -2
  store i64 %lncHQ, i64* %lncHR, !tbaa !2
  %lncHT = load i64, i64* %R2_Var
  %lncHS = load i64*, i64** %Sp_Var
  %lncHU = getelementptr inbounds i64, i64* %lncHS, i32 -1
  store i64 %lncHT, i64* %lncHU, !tbaa !2
  %lncHV = load i64*, i64** %Sp_Var
  %lncHW = getelementptr inbounds i64, i64* %lncHV, i32 -2
  %lncHX = ptrtoint i64* %lncHW to i64
  %lncHY = inttoptr i64 %lncHX to i64*
  store i64* %lncHY, i64** %Sp_Var
  %lncHZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ccAZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncI0 = load i64*, i64** %Sp_Var
  %lncI1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncHZ( i64* %Base_Arg, i64* %lncI0, i64* %Hp_Arg, i64 %lncI1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccDS:
  %lncI2 = load i64, i64* %R2_Var
  store i64 %lncI2, i64* %R2_Var
  %lncI3 = load i64, i64* %R1_Var
  store i64 %lncI3, i64* %R1_Var
  %lncI4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncI5 = bitcast i64* %lncI4 to i64*
  %lncI6 = load i64, i64* %lncI5, !tbaa !5
  %lncI7 = inttoptr i64 %lncI6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncI8 = load i64*, i64** %Sp_Var
  %lncI9 = load i64, i64* %R1_Var
  %lncIa = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncI7( i64* %Base_Arg, i64* %lncI8, i64* %Hp_Arg, i64 %lncI9, i64 %lncIa, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_ccAZ = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ccAZ$def to i8*)
define internal ghccc void @_ccAZ$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ncIb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls7C3 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccAZ
ccAZ:
  %lncId = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB2_info$def to i64
  %lncIc = load i64*, i64** %Sp_Var
  %lncIe = getelementptr inbounds i64, i64* %lncIc, i32 -2
  store i64 %lncId, i64* %lncIe, !tbaa !2
  %lncIf = load i64*, i64** %Sp_Var
  %lncIg = getelementptr inbounds i64, i64* %lncIf, i32 1
  %lncIh = bitcast i64* %lncIg to i64*
  %lncIi = load i64, i64* %lncIh, !tbaa !2
  store i64 %lncIi, i64* %R1_Var
  %lncIj = load i64*, i64** %Sp_Var
  %lncIk = getelementptr inbounds i64, i64* %lncIj, i32 0
  %lncIl = bitcast i64* %lncIk to i64*
  %lncIm = load i64, i64* %lncIl, !tbaa !2
  store i64 %lncIm, i64* %ls7C3
  %lncIo = load i64, i64* %ls7C3
  %lncIp = add i64 %lncIo, 7
  %lncIq = inttoptr i64 %lncIp to i64*
  %lncIr = load i64, i64* %lncIq, !tbaa !1
  %lncIn = load i64*, i64** %Sp_Var
  %lncIs = getelementptr inbounds i64, i64* %lncIn, i32 -1
  store i64 %lncIr, i64* %lncIs, !tbaa !2
  %lncIu = load i64, i64* %ls7C3
  %lncIv = add i64 %lncIu, 15
  %lncIw = inttoptr i64 %lncIv to i64*
  %lncIx = load i64, i64* %lncIw, !tbaa !1
  %lncIt = load i64*, i64** %Sp_Var
  %lncIy = getelementptr inbounds i64, i64* %lncIt, i32 1
  store i64 %lncIx, i64* %lncIy, !tbaa !2
  %lncIz = load i64*, i64** %Sp_Var
  %lncIA = getelementptr inbounds i64, i64* %lncIz, i32 -2
  %lncIB = ptrtoint i64* %lncIA to i64
  %lncIC = inttoptr i64 %lncIB to i64*
  store i64* %lncIC, i64** %Sp_Var
  %lncID = load i64, i64* %R1_Var
  %lncIE = and i64 %lncID, 7
  %lncIF = icmp ne i64 %lncIE, 0
  br i1 %lncIF, label %ucEu, label %ccB3
ccB3:
  %lncIH = load i64, i64* %R1_Var
  %lncII = inttoptr i64 %lncIH to i64*
  %lncIJ = load i64, i64* %lncII, !tbaa !4
  %lncIK = inttoptr i64 %lncIJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncIL = load i64*, i64** %Sp_Var
  %lncIM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncIK( i64* %Base_Arg, i64* %lncIL, i64* %Hp_Arg, i64 %lncIM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEu:
  %lncIN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncIO = load i64*, i64** %Sp_Var
  %lncIP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncIN( i64* %Base_Arg, i64* %lncIO, i64* %Hp_Arg, i64 %lncIP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccB2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB2_info$def to i8*)
define internal ghccc void @ccB2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ncIQ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7C6 = alloca i64, i32 1
  %ls7C7 = alloca i64, i32 1
  br label %ccB2
ccB2:
  %lncIR = load i64, i64* %R1_Var
  %lncIS = and i64 %lncIR, 7
  switch i64 %lncIS, label %ccDO [i64 1, label %ccDO
i64 2, label %ccDP]
ccDO:
  %lncIT = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lncIU = add i64 %lncIT, 1
  store i64 %lncIU, i64* %R1_Var
  %lncIV = load i64*, i64** %Sp_Var
  %lncIW = getelementptr inbounds i64, i64* %lncIV, i32 4
  %lncIX = ptrtoint i64* %lncIW to i64
  %lncIY = inttoptr i64 %lncIX to i64*
  store i64* %lncIY, i64** %Sp_Var
  %lncIZ = load i64*, i64** %Sp_Var
  %lncJ0 = getelementptr inbounds i64, i64* %lncIZ, i32 0
  %lncJ1 = bitcast i64* %lncJ0 to i64*
  %lncJ2 = load i64, i64* %lncJ1, !tbaa !2
  %lncJ3 = inttoptr i64 %lncJ2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJ4 = load i64*, i64** %Sp_Var
  %lncJ5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJ3( i64* %Base_Arg, i64* %lncJ4, i64* %Hp_Arg, i64 %lncJ5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccDP:
  %lncJ7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB8_info$def to i64
  %lncJ6 = load i64*, i64** %Sp_Var
  %lncJ8 = getelementptr inbounds i64, i64* %lncJ6, i32 -1
  store i64 %lncJ7, i64* %lncJ8, !tbaa !2
  %lncJb = load i64, i64* %R1_Var
  %lncJc = add i64 %lncJb, 6
  %lncJd = inttoptr i64 %lncJc to i64*
  %lncJe = load i64, i64* %lncJd, !tbaa !4
  store i64 %lncJe, i64* %ls7C6
  %lncJh = load i64, i64* %R1_Var
  %lncJi = add i64 %lncJh, 14
  %lncJj = inttoptr i64 %lncJi to i64*
  %lncJk = load i64, i64* %lncJj, !tbaa !4
  store i64 %lncJk, i64* %ls7C7
  %lncJl = load i64*, i64** %Sp_Var
  %lncJm = getelementptr inbounds i64, i64* %lncJl, i32 3
  %lncJn = bitcast i64* %lncJm to i64*
  %lncJo = load i64, i64* %lncJn, !tbaa !2
  store i64 %lncJo, i64* %R1_Var
  %lncJq = load i64, i64* %ls7C7
  %lncJp = load i64*, i64** %Sp_Var
  %lncJr = getelementptr inbounds i64, i64* %lncJp, i32 0
  store i64 %lncJq, i64* %lncJr, !tbaa !2
  %lncJt = load i64, i64* %ls7C6
  %lncJs = load i64*, i64** %Sp_Var
  %lncJu = getelementptr inbounds i64, i64* %lncJs, i32 3
  store i64 %lncJt, i64* %lncJu, !tbaa !2
  %lncJv = load i64*, i64** %Sp_Var
  %lncJw = getelementptr inbounds i64, i64* %lncJv, i32 -1
  %lncJx = ptrtoint i64* %lncJw to i64
  %lncJy = inttoptr i64 %lncJx to i64*
  store i64* %lncJy, i64** %Sp_Var
  %lncJz = load i64, i64* %R1_Var
  %lncJA = and i64 %lncJz, 7
  %lncJB = icmp ne i64 %lncJA, 0
  br i1 %lncJB, label %ucEv, label %ccB9
ccB9:
  %lncJD = load i64, i64* %R1_Var
  %lncJE = inttoptr i64 %lncJD to i64*
  %lncJF = load i64, i64* %lncJE, !tbaa !4
  %lncJG = inttoptr i64 %lncJF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJH = load i64*, i64** %Sp_Var
  %lncJI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJG( i64* %Base_Arg, i64* %lncJH, i64* %Hp_Arg, i64 %lncJI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEv:
  %lncJJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJK = load i64*, i64** %Sp_Var
  %lncJL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJJ( i64* %Base_Arg, i64* %lncJK, i64* %Hp_Arg, i64 %lncJL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccB8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccB8_info$def to i8*)
define internal ghccc void @ccB8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
ncJM:
  %ls7Ca = alloca i64, i32 1
  %ls7Cb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccB8
ccB8:
  %lncJO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBd_info$def to i64
  %lncJN = load i64*, i64** %Sp_Var
  %lncJP = getelementptr inbounds i64, i64* %lncJN, i32 -2
  store i64 %lncJO, i64* %lncJP, !tbaa !2
  %lncJS = load i64, i64* %R1_Var
  %lncJT = add i64 %lncJS, 15
  %lncJU = inttoptr i64 %lncJT to i64*
  %lncJV = load i64, i64* %lncJU, !tbaa !4
  store i64 %lncJV, i64* %ls7Ca
  %lncJY = load i64, i64* %R1_Var
  %lncJZ = add i64 %lncJY, 23
  %lncK0 = inttoptr i64 %lncJZ to i64*
  %lncK1 = load i64, i64* %lncK0, !tbaa !4
  store i64 %lncK1, i64* %ls7Cb
  %lncK4 = load i64, i64* %R1_Var
  %lncK5 = add i64 %lncK4, 7
  %lncK6 = inttoptr i64 %lncK5 to i64*
  %lncK7 = load i64, i64* %lncK6, !tbaa !4
  store i64 %lncK7, i64* %R1_Var
  %lncK9 = load i64, i64* %ls7Cb
  %lncK8 = load i64*, i64** %Sp_Var
  %lncKa = getelementptr inbounds i64, i64* %lncK8, i32 -1
  store i64 %lncK9, i64* %lncKa, !tbaa !2
  %lncKc = load i64, i64* %ls7Ca
  %lncKb = load i64*, i64** %Sp_Var
  %lncKd = getelementptr inbounds i64, i64* %lncKb, i32 0
  store i64 %lncKc, i64* %lncKd, !tbaa !2
  %lncKe = load i64*, i64** %Sp_Var
  %lncKf = getelementptr inbounds i64, i64* %lncKe, i32 -2
  %lncKg = ptrtoint i64* %lncKf to i64
  %lncKh = inttoptr i64 %lncKg to i64*
  store i64* %lncKh, i64** %Sp_Var
  %lncKi = load i64, i64* %R1_Var
  %lncKj = and i64 %lncKi, 7
  %lncKk = icmp ne i64 %lncKj, 0
  br i1 %lncKk, label %ucEw, label %ccBe
ccBe:
  %lncKm = load i64, i64* %R1_Var
  %lncKn = inttoptr i64 %lncKm to i64*
  %lncKo = load i64, i64* %lncKn, !tbaa !4
  %lncKp = inttoptr i64 %lncKo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKq = load i64*, i64** %Sp_Var
  %lncKr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKp( i64* %Base_Arg, i64* %lncKq, i64* %Hp_Arg, i64 %lncKr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEw:
  %lncKs = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBd_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKt = load i64*, i64** %Sp_Var
  %lncKu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKs( i64* %Base_Arg, i64* %lncKt, i64* %Hp_Arg, i64 %lncKu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBd_info$def to i8*)
define internal ghccc void @ccBd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 0}>
{
ncKv:
  %ls7Cd = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBd
ccBd:
  %lncKw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBi_info$def to i64
  %lncKx = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncKw, i64* %lncKx, !tbaa !2
  %lncKA = load i64, i64* %R1_Var
  %lncKB = add i64 %lncKA, 7
  %lncKC = inttoptr i64 %lncKB to double*
  %lncKD = load double, double* %lncKC, !tbaa !4
  store double %lncKD, double* %ls7Cd
  %lncKE = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncKF = bitcast i64* %lncKE to i64*
  %lncKG = load i64, i64* %lncKF, !tbaa !2
  store i64 %lncKG, i64* %R1_Var
  %lncKH = load double, double* %ls7Cd
  %lncKI = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncKJ = bitcast i64* %lncKI to double*
  store double %lncKH, double* %lncKJ, !tbaa !2
  %lncKK = load i64, i64* %R1_Var
  %lncKL = and i64 %lncKK, 7
  %lncKM = icmp ne i64 %lncKL, 0
  br i1 %lncKM, label %ucEx, label %ccBj
ccBj:
  %lncKO = load i64, i64* %R1_Var
  %lncKP = inttoptr i64 %lncKO to i64*
  %lncKQ = load i64, i64* %lncKP, !tbaa !4
  %lncKR = inttoptr i64 %lncKQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncKS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEx:
  %lncKT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncKU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBi_info$def to i8*)
define internal ghccc void @ccBi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 134, i32 30, i32 0}>
{
ncKV:
  %ls7Cf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBi
ccBi:
  %lncKW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBn_info$def to i64
  %lncKX = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncKW, i64* %lncKX, !tbaa !2
  %lncL0 = load i64, i64* %R1_Var
  %lncL1 = add i64 %lncL0, 7
  %lncL2 = inttoptr i64 %lncL1 to double*
  %lncL3 = load double, double* %lncL2, !tbaa !4
  store double %lncL3, double* %ls7Cf
  %lncL4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncL5 = bitcast i64* %lncL4 to i64*
  %lncL6 = load i64, i64* %lncL5, !tbaa !2
  store i64 %lncL6, i64* %R1_Var
  %lncL7 = load double, double* %ls7Cf
  %lncL8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncL9 = bitcast i64* %lncL8 to double*
  store double %lncL7, double* %lncL9, !tbaa !2
  %lncLa = load i64, i64* %R1_Var
  %lncLb = and i64 %lncLa, 7
  %lncLc = icmp ne i64 %lncLb, 0
  br i1 %lncLc, label %ucEy, label %ccBo
ccBo:
  %lncLe = load i64, i64* %R1_Var
  %lncLf = inttoptr i64 %lncLe to i64*
  %lncLg = load i64, i64* %lncLf, !tbaa !4
  %lncLh = inttoptr i64 %lncLg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncLi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEy:
  %lncLj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncLk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBn_info$def to i8*)
define internal ghccc void @ccBn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 198, i32 30, i32 0}>
{
ncLl:
  %ls7Ch = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBn
ccBn:
  %lncLm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBs_info$def to i64
  %lncLn = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncLm, i64* %lncLn, !tbaa !2
  %lncLq = load i64, i64* %R1_Var
  %lncLr = add i64 %lncLq, 7
  %lncLs = inttoptr i64 %lncLr to double*
  %lncLt = load double, double* %lncLs, !tbaa !4
  store double %lncLt, double* %ls7Ch
  %lncLu = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lncLv = bitcast i64* %lncLu to i64*
  %lncLw = load i64, i64* %lncLv, !tbaa !2
  store i64 %lncLw, i64* %R1_Var
  %lncLx = load double, double* %ls7Ch
  %lncLy = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lncLz = bitcast i64* %lncLy to double*
  store double %lncLx, double* %lncLz, !tbaa !2
  %lncLA = load i64, i64* %R1_Var
  %lncLB = and i64 %lncLA, 7
  %lncLC = icmp ne i64 %lncLB, 0
  br i1 %lncLC, label %ucEz, label %ccBt
ccBt:
  %lncLE = load i64, i64* %R1_Var
  %lncLF = inttoptr i64 %lncLE to i64*
  %lncLG = load i64, i64* %lncLF, !tbaa !4
  %lncLH = inttoptr i64 %lncLG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncLI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEz:
  %lncLJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncLK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBs_info$def to i8*)
define internal ghccc void @ccBs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 710, i32 30, i32 0}>
{
ncLL:
  %ls7Ck = alloca i64, i32 1
  %ls7Cl = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccBs
ccBs:
  %lncLN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBx_info$def to i64
  %lncLM = load i64*, i64** %Sp_Var
  %lncLO = getelementptr inbounds i64, i64* %lncLM, i32 -2
  store i64 %lncLN, i64* %lncLO, !tbaa !2
  %lncLR = load i64, i64* %R1_Var
  %lncLS = add i64 %lncLR, 15
  %lncLT = inttoptr i64 %lncLS to i64*
  %lncLU = load i64, i64* %lncLT, !tbaa !4
  store i64 %lncLU, i64* %ls7Ck
  %lncLX = load i64, i64* %R1_Var
  %lncLY = add i64 %lncLX, 23
  %lncLZ = inttoptr i64 %lncLY to i64*
  %lncM0 = load i64, i64* %lncLZ, !tbaa !4
  store i64 %lncM0, i64* %ls7Cl
  %lncM3 = load i64, i64* %R1_Var
  %lncM4 = add i64 %lncM3, 7
  %lncM5 = inttoptr i64 %lncM4 to i64*
  %lncM6 = load i64, i64* %lncM5, !tbaa !4
  store i64 %lncM6, i64* %R1_Var
  %lncM8 = load i64, i64* %ls7Cl
  %lncM7 = load i64*, i64** %Sp_Var
  %lncM9 = getelementptr inbounds i64, i64* %lncM7, i32 -1
  store i64 %lncM8, i64* %lncM9, !tbaa !2
  %lncMb = load i64, i64* %ls7Ck
  %lncMa = load i64*, i64** %Sp_Var
  %lncMc = getelementptr inbounds i64, i64* %lncMa, i32 0
  store i64 %lncMb, i64* %lncMc, !tbaa !2
  %lncMd = load i64*, i64** %Sp_Var
  %lncMe = getelementptr inbounds i64, i64* %lncMd, i32 -2
  %lncMf = ptrtoint i64* %lncMe to i64
  %lncMg = inttoptr i64 %lncMf to i64*
  store i64* %lncMg, i64** %Sp_Var
  %lncMh = load i64, i64* %R1_Var
  %lncMi = and i64 %lncMh, 7
  %lncMj = icmp ne i64 %lncMi, 0
  br i1 %lncMj, label %ucEA, label %ccBy
ccBy:
  %lncMl = load i64, i64* %R1_Var
  %lncMm = inttoptr i64 %lncMl to i64*
  %lncMn = load i64, i64* %lncMm, !tbaa !4
  %lncMo = inttoptr i64 %lncMn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMp = load i64*, i64** %Sp_Var
  %lncMq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMo( i64* %Base_Arg, i64* %lncMp, i64* %Hp_Arg, i64 %lncMq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEA:
  %lncMr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMs = load i64*, i64** %Sp_Var
  %lncMt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMr( i64* %Base_Arg, i64* %lncMs, i64* %Hp_Arg, i64 %lncMt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBx_info$def to i8*)
define internal ghccc void @ccBx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2824, i32 30, i32 0}>
{
ncMu:
  %ls7Cn = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBx
ccBx:
  %lncMv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBC_info$def to i64
  %lncMw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncMv, i64* %lncMw, !tbaa !2
  %lncMz = load i64, i64* %R1_Var
  %lncMA = add i64 %lncMz, 7
  %lncMB = inttoptr i64 %lncMA to double*
  %lncMC = load double, double* %lncMB, !tbaa !4
  store double %lncMC, double* %ls7Cn
  %lncMD = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncME = bitcast i64* %lncMD to i64*
  %lncMF = load i64, i64* %lncME, !tbaa !2
  store i64 %lncMF, i64* %R1_Var
  %lncMG = load double, double* %ls7Cn
  %lncMH = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncMI = bitcast i64* %lncMH to double*
  store double %lncMG, double* %lncMI, !tbaa !2
  %lncMJ = load i64, i64* %R1_Var
  %lncMK = and i64 %lncMJ, 7
  %lncML = icmp ne i64 %lncMK, 0
  br i1 %lncML, label %ucEB, label %ccBD
ccBD:
  %lncMN = load i64, i64* %R1_Var
  %lncMO = inttoptr i64 %lncMN to i64*
  %lncMP = load i64, i64* %lncMO, !tbaa !4
  %lncMQ = inttoptr i64 %lncMP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncMR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEB:
  %lncMS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBC_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncMT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBC_info$def to i8*)
define internal ghccc void @ccBC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2952, i32 30, i32 0}>
{
ncMU:
  %ls7Cp = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBC
ccBC:
  %lncMV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBH_info$def to i64
  %lncMW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncMV, i64* %lncMW, !tbaa !2
  %lncMZ = load i64, i64* %R1_Var
  %lncN0 = add i64 %lncMZ, 7
  %lncN1 = inttoptr i64 %lncN0 to double*
  %lncN2 = load double, double* %lncN1, !tbaa !4
  store double %lncN2, double* %ls7Cp
  %lncN3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncN4 = bitcast i64* %lncN3 to i64*
  %lncN5 = load i64, i64* %lncN4, !tbaa !2
  store i64 %lncN5, i64* %R1_Var
  %lncN6 = load double, double* %ls7Cp
  %lncN7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncN8 = bitcast i64* %lncN7 to double*
  store double %lncN6, double* %lncN8, !tbaa !2
  %lncN9 = load i64, i64* %R1_Var
  %lncNa = and i64 %lncN9, 7
  %lncNb = icmp ne i64 %lncNa, 0
  br i1 %lncNb, label %ucEC, label %ccBI
ccBI:
  %lncNd = load i64, i64* %R1_Var
  %lncNe = inttoptr i64 %lncNd to i64*
  %lncNf = load i64, i64* %lncNe, !tbaa !4
  %lncNg = inttoptr i64 %lncNf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncNh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEC:
  %lncNi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncNj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBH_info$def to i8*)
define internal ghccc void @ccBH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3016, i32 30, i32 0}>
{
ncNk:
  %ls7Cr = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBH
ccBH:
  %lncNl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBM_info$def to i64
  %lncNm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncNl, i64* %lncNm, !tbaa !2
  %lncNp = load i64, i64* %R1_Var
  %lncNq = add i64 %lncNp, 7
  %lncNr = inttoptr i64 %lncNq to double*
  %lncNs = load double, double* %lncNr, !tbaa !4
  store double %lncNs, double* %ls7Cr
  %lncNt = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lncNu = bitcast i64* %lncNt to i64*
  %lncNv = load i64, i64* %lncNu, !tbaa !2
  store i64 %lncNv, i64* %R1_Var
  %lncNw = load double, double* %ls7Cr
  %lncNx = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lncNy = bitcast i64* %lncNx to double*
  store double %lncNw, double* %lncNy, !tbaa !2
  %lncNz = load i64, i64* %R1_Var
  %lncNA = and i64 %lncNz, 7
  %lncNB = icmp ne i64 %lncNA, 0
  br i1 %lncNB, label %ucED, label %ccBN
ccBN:
  %lncND = load i64, i64* %R1_Var
  %lncNE = inttoptr i64 %lncND to i64*
  %lncNF = load i64, i64* %lncNE, !tbaa !4
  %lncNG = inttoptr i64 %lncNF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncNH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucED:
  %lncNI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncNJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBM_info$def to i8*)
define internal ghccc void @ccBM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 11208, i32 30, i32 0}>
{
ncNK:
  %ls7Cs = alloca i64, i32 1
  %ls7Cu = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccBM
ccBM:
  %lncNM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBR_info$def to i64
  %lncNL = load i64*, i64** %Sp_Var
  %lncNN = getelementptr inbounds i64, i64* %lncNL, i32 -2
  store i64 %lncNM, i64* %lncNN, !tbaa !2
  %lncNO = load i64, i64* %R1_Var
  store i64 %lncNO, i64* %ls7Cs
  %lncNR = load i64, i64* %R1_Var
  %lncNS = add i64 %lncNR, 15
  %lncNT = inttoptr i64 %lncNS to i64*
  %lncNU = load i64, i64* %lncNT, !tbaa !4
  store i64 %lncNU, i64* %ls7Cu
  %lncNX = load i64, i64* %R1_Var
  %lncNY = add i64 %lncNX, 7
  %lncNZ = inttoptr i64 %lncNY to i64*
  %lncO0 = load i64, i64* %lncNZ, !tbaa !4
  store i64 %lncO0, i64* %R1_Var
  %lncO2 = load i64, i64* %ls7Cu
  %lncO1 = load i64*, i64** %Sp_Var
  %lncO3 = getelementptr inbounds i64, i64* %lncO1, i32 -1
  store i64 %lncO2, i64* %lncO3, !tbaa !2
  %lncO5 = load i64, i64* %ls7Cs
  %lncO4 = load i64*, i64** %Sp_Var
  %lncO6 = getelementptr inbounds i64, i64* %lncO4, i32 0
  store i64 %lncO5, i64* %lncO6, !tbaa !2
  %lncO7 = load i64*, i64** %Sp_Var
  %lncO8 = getelementptr inbounds i64, i64* %lncO7, i32 -2
  %lncO9 = ptrtoint i64* %lncO8 to i64
  %lncOa = inttoptr i64 %lncO9 to i64*
  store i64* %lncOa, i64** %Sp_Var
  %lncOb = load i64, i64* %R1_Var
  %lncOc = and i64 %lncOb, 7
  %lncOd = icmp ne i64 %lncOc, 0
  br i1 %lncOd, label %ucEE, label %ccBS
ccBS:
  %lncOf = load i64, i64* %R1_Var
  %lncOg = inttoptr i64 %lncOf to i64*
  %lncOh = load i64, i64* %lncOg, !tbaa !4
  %lncOi = inttoptr i64 %lncOh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncOj = load i64*, i64** %Sp_Var
  %lncOk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncOi( i64* %Base_Arg, i64* %lncOj, i64* %Hp_Arg, i64 %lncOk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEE:
  %lncOl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncOm = load i64*, i64** %Sp_Var
  %lncOn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncOl( i64* %Base_Arg, i64* %lncOm, i64* %Hp_Arg, i64 %lncOn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBR_info$def to i8*)
define internal ghccc void @ccBR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 44810, i32 30, i32 0}>
{
ncOo:
  %ls7Cy = alloca i64, i32 1
  %ls7Cz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccBR
ccBR:
  %lncOq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBW_info$def to i64
  %lncOp = load i64*, i64** %Sp_Var
  %lncOr = getelementptr inbounds i64, i64* %lncOp, i32 -2
  store i64 %lncOq, i64* %lncOr, !tbaa !2
  %lncOu = load i64, i64* %R1_Var
  %lncOv = add i64 %lncOu, 15
  %lncOw = inttoptr i64 %lncOv to i64*
  %lncOx = load i64, i64* %lncOw, !tbaa !4
  store i64 %lncOx, i64* %ls7Cy
  %lncOA = load i64, i64* %R1_Var
  %lncOB = add i64 %lncOA, 23
  %lncOC = inttoptr i64 %lncOB to i64*
  %lncOD = load i64, i64* %lncOC, !tbaa !4
  store i64 %lncOD, i64* %ls7Cz
  %lncOG = load i64, i64* %R1_Var
  %lncOH = add i64 %lncOG, 7
  %lncOI = inttoptr i64 %lncOH to i64*
  %lncOJ = load i64, i64* %lncOI, !tbaa !4
  store i64 %lncOJ, i64* %R1_Var
  %lncOL = load i64, i64* %ls7Cz
  %lncOK = load i64*, i64** %Sp_Var
  %lncOM = getelementptr inbounds i64, i64* %lncOK, i32 -1
  store i64 %lncOL, i64* %lncOM, !tbaa !2
  %lncOO = load i64, i64* %ls7Cy
  %lncON = load i64*, i64** %Sp_Var
  %lncOP = getelementptr inbounds i64, i64* %lncON, i32 0
  store i64 %lncOO, i64* %lncOP, !tbaa !2
  %lncOQ = load i64*, i64** %Sp_Var
  %lncOR = getelementptr inbounds i64, i64* %lncOQ, i32 -2
  %lncOS = ptrtoint i64* %lncOR to i64
  %lncOT = inttoptr i64 %lncOS to i64*
  store i64* %lncOT, i64** %Sp_Var
  %lncOU = load i64, i64* %R1_Var
  %lncOV = and i64 %lncOU, 7
  %lncOW = icmp ne i64 %lncOV, 0
  br i1 %lncOW, label %ucEF, label %ccBX
ccBX:
  %lncOY = load i64, i64* %R1_Var
  %lncOZ = inttoptr i64 %lncOY to i64*
  %lncP0 = load i64, i64* %lncOZ, !tbaa !4
  %lncP1 = inttoptr i64 %lncP0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncP2 = load i64*, i64** %Sp_Var
  %lncP3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncP1( i64* %Base_Arg, i64* %lncP2, i64* %Hp_Arg, i64 %lncP3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEF:
  %lncP4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncP5 = load i64*, i64** %Sp_Var
  %lncP6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncP4( i64* %Base_Arg, i64* %lncP5, i64* %Hp_Arg, i64 %lncP6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccBW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccBW_info$def to i8*)
define internal ghccc void @ccBW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 179212, i32 30, i32 0}>
{
ncP7:
  %ls7CB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccBW
ccBW:
  %lncP8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC1_info$def to i64
  %lncP9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncP8, i64* %lncP9, !tbaa !2
  %lncPc = load i64, i64* %R1_Var
  %lncPd = add i64 %lncPc, 7
  %lncPe = inttoptr i64 %lncPd to double*
  %lncPf = load double, double* %lncPe, !tbaa !4
  store double %lncPf, double* %ls7CB
  %lncPg = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncPh = bitcast i64* %lncPg to i64*
  %lncPi = load i64, i64* %lncPh, !tbaa !2
  store i64 %lncPi, i64* %R1_Var
  %lncPj = load double, double* %ls7CB
  %lncPk = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncPl = bitcast i64* %lncPk to double*
  store double %lncPj, double* %lncPl, !tbaa !2
  %lncPm = load i64, i64* %R1_Var
  %lncPn = and i64 %lncPm, 7
  %lncPo = icmp ne i64 %lncPn, 0
  br i1 %lncPo, label %ucEG, label %ccC2
ccC2:
  %lncPq = load i64, i64* %R1_Var
  %lncPr = inttoptr i64 %lncPq to i64*
  %lncPs = load i64, i64* %lncPr, !tbaa !4
  %lncPt = inttoptr i64 %lncPs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncPu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEG:
  %lncPv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPv( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncPw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccC1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC1_info$def to i8*)
define internal ghccc void @ccC1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 179340, i32 30, i32 0}>
{
ncPx:
  %ls7CD = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccC1
ccC1:
  %lncPy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC6_info$def to i64
  %lncPz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncPy, i64* %lncPz, !tbaa !2
  %lncPC = load i64, i64* %R1_Var
  %lncPD = add i64 %lncPC, 7
  %lncPE = inttoptr i64 %lncPD to double*
  %lncPF = load double, double* %lncPE, !tbaa !4
  store double %lncPF, double* %ls7CD
  %lncPG = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncPH = bitcast i64* %lncPG to i64*
  %lncPI = load i64, i64* %lncPH, !tbaa !2
  store i64 %lncPI, i64* %R1_Var
  %lncPJ = load double, double* %ls7CD
  %lncPK = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncPL = bitcast i64* %lncPK to double*
  store double %lncPJ, double* %lncPL, !tbaa !2
  %lncPM = load i64, i64* %R1_Var
  %lncPN = and i64 %lncPM, 7
  %lncPO = icmp ne i64 %lncPN, 0
  br i1 %lncPO, label %ucEH, label %ccC7
ccC7:
  %lncPQ = load i64, i64* %R1_Var
  %lncPR = inttoptr i64 %lncPQ to i64*
  %lncPS = load i64, i64* %lncPR, !tbaa !4
  %lncPT = inttoptr i64 %lncPS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncPU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEH:
  %lncPV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncPW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccC6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccC6_info$def to i8*)
define internal ghccc void @ccC6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 179404, i32 30, i32 0}>
{
ncPX:
  %ls7CF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccC6
ccC6:
  %lncPY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccCb_info$def to i64
  %lncPZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncPY, i64* %lncPZ, !tbaa !2
  %lncQ2 = load i64, i64* %R1_Var
  %lncQ3 = add i64 %lncQ2, 7
  %lncQ4 = inttoptr i64 %lncQ3 to double*
  %lncQ5 = load double, double* %lncQ4, !tbaa !4
  store double %lncQ5, double* %ls7CF
  %lncQ6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lncQ7 = bitcast i64* %lncQ6 to i64*
  %lncQ8 = load i64, i64* %lncQ7, !tbaa !2
  store i64 %lncQ8, i64* %R1_Var
  %lncQ9 = load double, double* %ls7CF
  %lncQa = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lncQb = bitcast i64* %lncQa to double*
  store double %lncQ9, double* %lncQb, !tbaa !2
  %lncQc = load i64, i64* %R1_Var
  %lncQd = and i64 %lncQc, 7
  %lncQe = icmp ne i64 %lncQd, 0
  br i1 %lncQe, label %ucEI, label %ccCc
ccCc:
  %lncQg = load i64, i64* %R1_Var
  %lncQh = inttoptr i64 %lncQg to i64*
  %lncQi = load i64, i64* %lncQh, !tbaa !4
  %lncQj = inttoptr i64 %lncQi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncQk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucEI:
  %lncQl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccCb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncQm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccCb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccCb_info$def to i8*)
define internal ghccc void @ccCb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 179660, i32 30, i32 0}>
{
ncQn:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7C7 = alloca i64, i32 1
  %ls7CH = alloca double, i32 1
  %ls7CI = alloca double, i32 1
  %ls7CJ = alloca double, i32 1
  %ls7CK = alloca double, i32 1
  %ls7CL = alloca double, i32 1
  %ls7CQ = alloca double, i32 1
  %ls7C3 = alloca i64, i32 1
  %ls7Cs = alloca i64, i32 1
  %lccD8 = alloca double, i32 1
  %ls7D0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lccDt = alloca double, i32 1
  %ls7D7 = alloca double, i32 1
  br label %ccCb
ccCb:
  %lncQo = load i64*, i64** %Hp_Var
  %lncQp = getelementptr inbounds i64, i64* %lncQo, i32 12
  %lncQq = ptrtoint i64* %lncQp to i64
  %lncQr = inttoptr i64 %lncQq to i64*
  store i64* %lncQr, i64** %Hp_Var
  %lncQs = load i64*, i64** %Hp_Var
  %lncQt = ptrtoint i64* %lncQs to i64
  %lncQu = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncQv = bitcast i64* %lncQu to i64*
  %lncQw = load i64, i64* %lncQv, !tbaa !5
  %lncQx = icmp ugt i64 %lncQt, %lncQw
  %lncQy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncQx, i1 0 )
  br i1 %lncQy, label %ccEc, label %ccEb
ccEb:
  %lncQz = load i64*, i64** %Sp_Var
  %lncQA = getelementptr inbounds i64, i64* %lncQz, i32 9
  %lncQB = bitcast i64* %lncQA to i64*
  %lncQC = load i64, i64* %lncQB, !tbaa !2
  store i64 %lncQC, i64* %ls7C7
  %lncQF = load i64, i64* %R1_Var
  %lncQG = add i64 %lncQF, 7
  %lncQH = inttoptr i64 %lncQG to double*
  %lncQI = load double, double* %lncQH, !tbaa !4
  store double %lncQI, double* %ls7CH
  %lncQJ = load i64*, i64** %Sp_Var
  %lncQK = getelementptr inbounds i64, i64* %lncQJ, i32 8
  %lncQL = bitcast i64* %lncQK to double*
  %lncQM = load double, double* %lncQL, !tbaa !2
  %lncQN = load i64*, i64** %Sp_Var
  %lncQO = getelementptr inbounds i64, i64* %lncQN, i32 2
  %lncQP = bitcast i64* %lncQO to double*
  %lncQQ = load double, double* %lncQP, !tbaa !2
  %lncQR = fsub double %lncQM, %lncQQ
  store double %lncQR, double* %ls7CI
  %lncQS = load i64*, i64** %Sp_Var
  %lncQT = getelementptr inbounds i64, i64* %lncQS, i32 7
  %lncQU = bitcast i64* %lncQT to double*
  %lncQV = load double, double* %lncQU, !tbaa !2
  %lncQW = load i64*, i64** %Sp_Var
  %lncQX = getelementptr inbounds i64, i64* %lncQW, i32 1
  %lncQY = bitcast i64* %lncQX to double*
  %lncQZ = load double, double* %lncQY, !tbaa !2
  %lncR0 = fsub double %lncQV, %lncQZ
  store double %lncR0, double* %ls7CJ
  %lncR1 = load i64*, i64** %Sp_Var
  %lncR2 = getelementptr inbounds i64, i64* %lncR1, i32 10
  %lncR3 = bitcast i64* %lncR2 to double*
  %lncR4 = load double, double* %lncR3, !tbaa !2
  %lncR5 = load i64*, i64** %Sp_Var
  %lncR6 = getelementptr inbounds i64, i64* %lncR5, i32 3
  %lncR7 = bitcast i64* %lncR6 to double*
  %lncR8 = load double, double* %lncR7, !tbaa !2
  %lncR9 = fsub double %lncR4, %lncR8
  store double %lncR9, double* %ls7CK
  %lncRa = load double, double* %ls7CI
  %lncRb = load i64*, i64** %Sp_Var
  %lncRc = getelementptr inbounds i64, i64* %lncRb, i32 6
  %lncRd = bitcast i64* %lncRc to double*
  %lncRe = load double, double* %lncRd, !tbaa !2
  %lncRf = fmul double %lncRa, %lncRe
  %lncRg = load double, double* %ls7CJ
  %lncRh = load i64*, i64** %Sp_Var
  %lncRi = getelementptr inbounds i64, i64* %lncRh, i32 5
  %lncRj = bitcast i64* %lncRi to double*
  %lncRk = load double, double* %lncRj, !tbaa !2
  %lncRl = fmul double %lncRg, %lncRk
  %lncRm = fadd double %lncRf, %lncRl
  %lncRn = load double, double* %ls7CK
  %lncRo = load i64*, i64** %Sp_Var
  %lncRp = getelementptr inbounds i64, i64* %lncRo, i32 12
  %lncRq = bitcast i64* %lncRp to double*
  %lncRr = load double, double* %lncRq, !tbaa !2
  %lncRs = fmul double %lncRn, %lncRr
  %lncRt = fadd double %lncRm, %lncRs
  store double %lncRt, double* %ls7CL
  %lncRu = load double, double* %ls7CL
  %lncRv = load double, double* %ls7CL
  %lncRw = fmul double %lncRu, %lncRv
  %lncRx = load double, double* %ls7CI
  %lncRy = load double, double* %ls7CI
  %lncRz = fmul double %lncRx, %lncRy
  %lncRA = load double, double* %ls7CJ
  %lncRB = load double, double* %ls7CJ
  %lncRC = fmul double %lncRA, %lncRB
  %lncRD = fadd double %lncRz, %lncRC
  %lncRE = load double, double* %ls7CK
  %lncRF = load double, double* %ls7CK
  %lncRG = fmul double %lncRE, %lncRF
  %lncRH = fadd double %lncRD, %lncRG
  %lncRI = fsub double %lncRw, %lncRH
  %lncRJ = load double, double* %ls7CH
  %lncRK = load double, double* %ls7CH
  %lncRL = fmul double %lncRJ, %lncRK
  %lncRM = fadd double %lncRI, %lncRL
  store double %lncRM, double* %ls7CQ
  %lncRN = load double, double* %ls7CQ
  %lncRO = fcmp olt double %lncRN, 0x0000000000000000
  %lncRP = zext i1 %lncRO to i64
  switch i64 %lncRP, label %ccEq [i64 1, label %ccEn]
ccEq:
  %lncRQ = load i64*, i64** %Sp_Var
  %lncRR = getelementptr inbounds i64, i64* %lncRQ, i32 11
  %lncRS = bitcast i64* %lncRR to i64*
  %lncRT = load i64, i64* %lncRS, !tbaa !2
  store i64 %lncRT, i64* %ls7C3
  %lncRU = load i64*, i64** %Sp_Var
  %lncRV = getelementptr inbounds i64, i64* %lncRU, i32 4
  %lncRW = bitcast i64* %lncRV to i64*
  %lncRX = load i64, i64* %lncRW, !tbaa !2
  store i64 %lncRX, i64* %ls7Cs
  %lncRY = load double, double* %ls7CQ
  %lncRZ = call ccc double (double) @llvm.sqrt.f64( double %lncRY ) nounwind
  store double %lncRZ, double* %lccD8
  %lncS0 = load double, double* %ls7CL
  %lncS1 = fsub double 0x8000000000000000, %lncS0
  %lncS2 = load double, double* %lccD8
  %lncS3 = fsub double %lncS1, %lncS2
  store double %lncS3, double* %ls7D0
  %lncS4 = load double, double* %ls7D0
  %lncS5 = fcmp olt double %lncS4, 0x0000000000000000
  %lncS6 = zext i1 %lncS5 to i64
  switch i64 %lncS6, label %ccEh [i64 1, label %ccEo]
ccEh:
  %lncS8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7D6_info$def to i64
  %lncS7 = load i64*, i64** %Hp_Var
  %lncS9 = getelementptr inbounds i64, i64* %lncS7, i32 -11
  store i64 %lncS8, i64* %lncS9, !tbaa !3
  %lncSb = load i64, i64* %ls7C3
  %lncSa = load i64*, i64** %Hp_Var
  %lncSc = getelementptr inbounds i64, i64* %lncSa, i32 -9
  store i64 %lncSb, i64* %lncSc, !tbaa !3
  %lncSe = load i64, i64* %ls7C7
  %lncSd = load i64*, i64** %Hp_Var
  %lncSf = getelementptr inbounds i64, i64* %lncSd, i32 -8
  store i64 %lncSe, i64* %lncSf, !tbaa !3
  %lncSh = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lncSg = load i64*, i64** %Hp_Var
  %lncSi = getelementptr inbounds i64, i64* %lncSg, i32 -7
  store i64 %lncSh, i64* %lncSi, !tbaa !3
  %lncSk = load double, double* %ls7D0
  %lncSj = load i64*, i64** %Hp_Var
  %lncSl = getelementptr inbounds i64, i64* %lncSj, i32 -6
  %lncSm = bitcast i64* %lncSl to double*
  store double %lncSk, double* %lncSm, !tbaa !3
  %lncSo = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lncSn = load i64*, i64** %Hp_Var
  %lncSp = getelementptr inbounds i64, i64* %lncSn, i32 -5
  store i64 %lncSo, i64* %lncSp, !tbaa !3
  %lncSs = load i64*, i64** %Hp_Var
  %lncSt = ptrtoint i64* %lncSs to i64
  %lncSu = add i64 %lncSt, -55
  %lncSq = load i64*, i64** %Hp_Var
  %lncSv = getelementptr inbounds i64, i64* %lncSq, i32 -4
  store i64 %lncSu, i64* %lncSv, !tbaa !3
  %lncSx = load i64, i64* %ls7Cs
  %lncSw = load i64*, i64** %Hp_Var
  %lncSy = getelementptr inbounds i64, i64* %lncSw, i32 -3
  store i64 %lncSx, i64* %lncSy, !tbaa !3
  %lncSA = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lncSz = load i64*, i64** %Hp_Var
  %lncSB = getelementptr inbounds i64, i64* %lncSz, i32 -2
  store i64 %lncSA, i64* %lncSB, !tbaa !3
  %lncSE = load i64*, i64** %Hp_Var
  %lncSF = ptrtoint i64* %lncSE to i64
  %lncSG = add i64 %lncSF, -39
  %lncSC = load i64*, i64** %Hp_Var
  %lncSH = getelementptr inbounds i64, i64* %lncSC, i32 -1
  store i64 %lncSG, i64* %lncSH, !tbaa !3
  %lncSJ = load i64*, i64** %Hp_Var
  %lncSK = getelementptr inbounds i64, i64* %lncSJ, i32 -11
  %lncSL = ptrtoint i64* %lncSK to i64
  %lncSI = load i64*, i64** %Hp_Var
  %lncSM = getelementptr inbounds i64, i64* %lncSI, i32 0
  store i64 %lncSL, i64* %lncSM, !tbaa !3
  %lncSO = load i64*, i64** %Hp_Var
  %lncSP = ptrtoint i64* %lncSO to i64
  %lncSQ = add i64 %lncSP, -14
  store i64 %lncSQ, i64* %R1_Var
  %lncSR = load i64*, i64** %Sp_Var
  %lncSS = getelementptr inbounds i64, i64* %lncSR, i32 13
  %lncST = ptrtoint i64* %lncSS to i64
  %lncSU = inttoptr i64 %lncST to i64*
  store i64* %lncSU, i64** %Sp_Var
  %lncSV = load i64*, i64** %Sp_Var
  %lncSW = getelementptr inbounds i64, i64* %lncSV, i32 0
  %lncSX = bitcast i64* %lncSW to i64*
  %lncSY = load i64, i64* %lncSX, !tbaa !2
  %lncSZ = inttoptr i64 %lncSY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncT0 = load i64*, i64** %Sp_Var
  %lncT1 = load i64*, i64** %Hp_Var
  %lncT2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncSZ( i64* %Base_Arg, i64* %lncT0, i64* %lncT1, i64 %lncT2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEo:
  %lncT3 = load double, double* %ls7CQ
  %lncT4 = call ccc double (double) @llvm.sqrt.f64( double %lncT3 ) nounwind
  store double %lncT4, double* %lccDt
  %lncT5 = load double, double* %ls7CL
  %lncT6 = fsub double 0x8000000000000000, %lncT5
  %lncT7 = load double, double* %lccDt
  %lncT8 = fadd double %lncT6, %lncT7
  store double %lncT8, double* %ls7D7
  %lncT9 = load double, double* %ls7D7
  %lncTa = fcmp olt double %lncT9, 0x0000000000000000
  %lncTb = zext i1 %lncTa to i64
  switch i64 %lncTb, label %ccEm [i64 1, label %ccEn]
ccEm:
  %lncTd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dd_info$def to i64
  %lncTc = load i64*, i64** %Hp_Var
  %lncTe = getelementptr inbounds i64, i64* %lncTc, i32 -11
  store i64 %lncTd, i64* %lncTe, !tbaa !3
  %lncTg = load i64, i64* %ls7C3
  %lncTf = load i64*, i64** %Hp_Var
  %lncTh = getelementptr inbounds i64, i64* %lncTf, i32 -9
  store i64 %lncTg, i64* %lncTh, !tbaa !3
  %lncTj = load i64, i64* %ls7C7
  %lncTi = load i64*, i64** %Hp_Var
  %lncTk = getelementptr inbounds i64, i64* %lncTi, i32 -8
  store i64 %lncTj, i64* %lncTk, !tbaa !3
  %lncTm = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lncTl = load i64*, i64** %Hp_Var
  %lncTn = getelementptr inbounds i64, i64* %lncTl, i32 -7
  store i64 %lncTm, i64* %lncTn, !tbaa !3
  %lncTp = load double, double* %ls7D7
  %lncTo = load i64*, i64** %Hp_Var
  %lncTq = getelementptr inbounds i64, i64* %lncTo, i32 -6
  %lncTr = bitcast i64* %lncTq to double*
  store double %lncTp, double* %lncTr, !tbaa !3
  %lncTt = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lncTs = load i64*, i64** %Hp_Var
  %lncTu = getelementptr inbounds i64, i64* %lncTs, i32 -5
  store i64 %lncTt, i64* %lncTu, !tbaa !3
  %lncTx = load i64*, i64** %Hp_Var
  %lncTy = ptrtoint i64* %lncTx to i64
  %lncTz = add i64 %lncTy, -55
  %lncTv = load i64*, i64** %Hp_Var
  %lncTA = getelementptr inbounds i64, i64* %lncTv, i32 -4
  store i64 %lncTz, i64* %lncTA, !tbaa !3
  %lncTC = load i64, i64* %ls7Cs
  %lncTB = load i64*, i64** %Hp_Var
  %lncTD = getelementptr inbounds i64, i64* %lncTB, i32 -3
  store i64 %lncTC, i64* %lncTD, !tbaa !3
  %lncTF = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lncTE = load i64*, i64** %Hp_Var
  %lncTG = getelementptr inbounds i64, i64* %lncTE, i32 -2
  store i64 %lncTF, i64* %lncTG, !tbaa !3
  %lncTJ = load i64*, i64** %Hp_Var
  %lncTK = ptrtoint i64* %lncTJ to i64
  %lncTL = add i64 %lncTK, -39
  %lncTH = load i64*, i64** %Hp_Var
  %lncTM = getelementptr inbounds i64, i64* %lncTH, i32 -1
  store i64 %lncTL, i64* %lncTM, !tbaa !3
  %lncTO = load i64*, i64** %Hp_Var
  %lncTP = getelementptr inbounds i64, i64* %lncTO, i32 -11
  %lncTQ = ptrtoint i64* %lncTP to i64
  %lncTN = load i64*, i64** %Hp_Var
  %lncTR = getelementptr inbounds i64, i64* %lncTN, i32 0
  store i64 %lncTQ, i64* %lncTR, !tbaa !3
  %lncTT = load i64*, i64** %Hp_Var
  %lncTU = ptrtoint i64* %lncTT to i64
  %lncTV = add i64 %lncTU, -14
  store i64 %lncTV, i64* %R1_Var
  %lncTW = load i64*, i64** %Sp_Var
  %lncTX = getelementptr inbounds i64, i64* %lncTW, i32 13
  %lncTY = ptrtoint i64* %lncTX to i64
  %lncTZ = inttoptr i64 %lncTY to i64*
  store i64* %lncTZ, i64** %Sp_Var
  %lncU0 = load i64*, i64** %Sp_Var
  %lncU1 = getelementptr inbounds i64, i64* %lncU0, i32 0
  %lncU2 = bitcast i64* %lncU1 to i64*
  %lncU3 = load i64, i64* %lncU2, !tbaa !2
  %lncU4 = inttoptr i64 %lncU3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncU5 = load i64*, i64** %Sp_Var
  %lncU6 = load i64*, i64** %Hp_Var
  %lncU7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncU4( i64* %Base_Arg, i64* %lncU5, i64* %lncU6, i64 %lncU7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEn:
  %lncU8 = load i64*, i64** %Hp_Var
  %lncU9 = getelementptr inbounds i64, i64* %lncU8, i32 -12
  %lncUa = ptrtoint i64* %lncU9 to i64
  %lncUb = inttoptr i64 %lncUa to i64*
  store i64* %lncUb, i64** %Hp_Var
  %lncUd = load i64, i64* %ls7C7
  %lncUc = load i64*, i64** %Sp_Var
  %lncUe = getelementptr inbounds i64, i64* %lncUc, i32 12
  store i64 %lncUd, i64* %lncUe, !tbaa !2
  %lncUf = load i64*, i64** %Sp_Var
  %lncUg = getelementptr inbounds i64, i64* %lncUf, i32 11
  %lncUh = ptrtoint i64* %lncUg to i64
  %lncUi = inttoptr i64 %lncUh to i64*
  store i64* %lncUi, i64** %Sp_Var
  %lncUj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_ccAZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncUk = load i64*, i64** %Sp_Var
  %lncUl = load i64*, i64** %Hp_Var
  %lncUm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncUj( i64* %Base_Arg, i64* %lncUk, i64* %lncUl, i64 %lncUm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEc:
  %lncUn = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %lncUn, !tbaa !5
  %lncUo = load i64, i64* %R1_Var
  store i64 %lncUo, i64* %R1_Var
  %lncUp = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncUq = load i64*, i64** %Sp_Var
  %lncUr = load i64*, i64** %Hp_Var
  %lncUs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncUp( i64* %Base_Arg, i64* %lncUq, i64* %lncUr, i64 %lncUs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Di_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Di_info$def to i8*)
define internal ghccc void @s7Di_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziList_badHead_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Di_info$def to i64)) to i32),i32 0)}>
{
ncUt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccF0
ccF0:
  %lncUu = load i64*, i64** %Sp_Var
  %lncUv = getelementptr inbounds i64, i64* %lncUu, i32 -3
  %lncUw = ptrtoint i64* %lncUv to i64
  %lncUx = icmp ult i64 %lncUw, %SpLim_Arg
  %lncUy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncUx, i1 0 )
  br i1 %lncUy, label %ccF1, label %ccF2
ccF2:
  %lncUA = ptrtoint i8* @stg_upd_frame_info to i64
  %lncUz = load i64*, i64** %Sp_Var
  %lncUB = getelementptr inbounds i64, i64* %lncUz, i32 -2
  store i64 %lncUA, i64* %lncUB, !tbaa !2
  %lncUD = load i64, i64* %R1_Var
  %lncUC = load i64*, i64** %Sp_Var
  %lncUE = getelementptr inbounds i64, i64* %lncUC, i32 -1
  store i64 %lncUD, i64* %lncUE, !tbaa !2
  %lncUG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccET_info$def to i64
  %lncUF = load i64*, i64** %Sp_Var
  %lncUH = getelementptr inbounds i64, i64* %lncUF, i32 -3
  store i64 %lncUG, i64* %lncUH, !tbaa !2
  %lncUK = load i64, i64* %R1_Var
  %lncUL = add i64 %lncUK, 16
  %lncUM = inttoptr i64 %lncUL to i64*
  %lncUN = load i64, i64* %lncUM, !tbaa !4
  store i64 %lncUN, i64* %R1_Var
  %lncUO = load i64*, i64** %Sp_Var
  %lncUP = getelementptr inbounds i64, i64* %lncUO, i32 -3
  %lncUQ = ptrtoint i64* %lncUP to i64
  %lncUR = inttoptr i64 %lncUQ to i64*
  store i64* %lncUR, i64** %Sp_Var
  %lncUS = load i64, i64* %R1_Var
  %lncUT = and i64 %lncUS, 7
  %lncUU = icmp ne i64 %lncUT, 0
  br i1 %lncUU, label %ucF9, label %ccEU
ccEU:
  %lncUW = load i64, i64* %R1_Var
  %lncUX = inttoptr i64 %lncUW to i64*
  %lncUY = load i64, i64* %lncUX, !tbaa !4
  %lncUZ = inttoptr i64 %lncUY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncV0 = load i64*, i64** %Sp_Var
  %lncV1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncUZ( i64* %Base_Arg, i64* %lncV0, i64* %Hp_Arg, i64 %lncV1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucF9:
  %lncV2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccET_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncV3 = load i64*, i64** %Sp_Var
  %lncV4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncV2( i64* %Base_Arg, i64* %lncV3, i64* %Hp_Arg, i64 %lncV4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccF1:
  %lncV5 = load i64, i64* %R1_Var
  store i64 %lncV5, i64* %R1_Var
  %lncV6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncV7 = bitcast i64* %lncV6 to i64*
  %lncV8 = load i64, i64* %lncV7, !tbaa !5
  %lncV9 = inttoptr i64 %lncV8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVa = load i64*, i64** %Sp_Var
  %lncVb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncV9( i64* %Base_Arg, i64* %lncVa, i64* %Hp_Arg, i64 %lncVb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccET_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccET_info$def to i8*)
define internal ghccc void @ccET_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziList_badHead_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccET_info$def to i64)) to i32),i32 0)}>
{
ncVc:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccET
ccET:
  %lncVd = load i64, i64* %R1_Var
  %lncVe = and i64 %lncVd, 7
  switch i64 %lncVe, label %ccEX [i64 1, label %ccEX
i64 2, label %ccEY]
ccEX:
  %lncVf = ptrtoint i8* @base_GHCziList_badHead_closure to i64
  store i64 %lncVf, i64* %R1_Var
  %lncVg = load i64*, i64** %Sp_Var
  %lncVh = getelementptr inbounds i64, i64* %lncVg, i32 1
  %lncVi = ptrtoint i64* %lncVh to i64
  %lncVj = inttoptr i64 %lncVi to i64*
  store i64* %lncVj, i64** %Sp_Var
  %lncVk = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVl = load i64*, i64** %Sp_Var
  %lncVm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncVk( i64* %Base_Arg, i64* %lncVl, i64* %Hp_Arg, i64 %lncVm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEY:
  %lncVp = load i64, i64* %R1_Var
  %lncVq = add i64 %lncVp, 6
  %lncVr = inttoptr i64 %lncVq to i64*
  %lncVs = load i64, i64* %lncVr, !tbaa !4
  %lncVt = and i64 %lncVs, -8
  store i64 %lncVt, i64* %R1_Var
  %lncVu = load i64*, i64** %Sp_Var
  %lncVv = getelementptr inbounds i64, i64* %lncVu, i32 1
  %lncVw = ptrtoint i64* %lncVv to i64
  %lncVx = inttoptr i64 %lncVw to i64*
  store i64* %lncVx, i64** %Sp_Var
  %lncVz = load i64, i64* %R1_Var
  %lncVA = inttoptr i64 %lncVz to i64*
  %lncVB = load i64, i64* %lncVA, !tbaa !4
  %lncVC = inttoptr i64 %lncVB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVD = load i64*, i64** %Sp_Var
  %lncVE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncVC( i64* %Base_Arg, i64* %lncVD, i64* %Hp_Arg, i64 %lncVE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Dm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dm_info$def to i8*)
define internal ghccc void @s7Dm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 1, i32 9, i32 0}>
{
ncVF:
  %ls7Dm = alloca i64, i32 1
  %ls7Dj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ccFs
ccFs:
  %lncVG = load i64*, i64** %Sp_Var
  %lncVH = getelementptr inbounds i64, i64* %lncVG, i32 -4
  %lncVI = ptrtoint i64* %lncVH to i64
  %lncVJ = icmp ult i64 %lncVI, %SpLim_Arg
  %lncVK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncVJ, i1 0 )
  br i1 %lncVK, label %ccFt, label %ccFu
ccFu:
  %lncVM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFl_info$def to i64
  %lncVL = load i64*, i64** %Sp_Var
  %lncVN = getelementptr inbounds i64, i64* %lncVL, i32 -3
  store i64 %lncVM, i64* %lncVN, !tbaa !2
  %lncVO = load i64, i64* %R1_Var
  store i64 %lncVO, i64* %ls7Dm
  %lncVR = load i64, i64* %R1_Var
  %lncVS = add i64 %lncVR, 7
  %lncVT = inttoptr i64 %lncVS to i64*
  %lncVU = load i64, i64* %lncVT, !tbaa !4
  store i64 %lncVU, i64* %ls7Dj
  %lncVV = load i64, i64* %R2_Var
  store i64 %lncVV, i64* %R1_Var
  %lncVX = load i64, i64* %ls7Dj
  %lncVW = load i64*, i64** %Sp_Var
  %lncVY = getelementptr inbounds i64, i64* %lncVW, i32 -2
  store i64 %lncVX, i64* %lncVY, !tbaa !2
  %lncW0 = load i64, i64* %ls7Dm
  %lncVZ = load i64*, i64** %Sp_Var
  %lncW1 = getelementptr inbounds i64, i64* %lncVZ, i32 -1
  store i64 %lncW0, i64* %lncW1, !tbaa !2
  %lncW2 = load i64*, i64** %Sp_Var
  %lncW3 = getelementptr inbounds i64, i64* %lncW2, i32 -3
  %lncW4 = ptrtoint i64* %lncW3 to i64
  %lncW5 = inttoptr i64 %lncW4 to i64*
  store i64* %lncW5, i64** %Sp_Var
  %lncW6 = load i64, i64* %R1_Var
  %lncW7 = and i64 %lncW6, 7
  %lncW8 = icmp ne i64 %lncW7, 0
  br i1 %lncW8, label %ucG4, label %ccFm
ccFm:
  %lncWa = load i64, i64* %R1_Var
  %lncWb = inttoptr i64 %lncWa to i64*
  %lncWc = load i64, i64* %lncWb, !tbaa !4
  %lncWd = inttoptr i64 %lncWc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncWe = load i64*, i64** %Sp_Var
  %lncWf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncWd( i64* %Base_Arg, i64* %lncWe, i64* %Hp_Arg, i64 %lncWf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucG4:
  %lncWg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncWh = load i64*, i64** %Sp_Var
  %lncWi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncWg( i64* %Base_Arg, i64* %lncWh, i64* %Hp_Arg, i64 %lncWi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFt:
  %lncWj = load i64, i64* %R2_Var
  store i64 %lncWj, i64* %R2_Var
  %lncWk = load i64, i64* %R1_Var
  store i64 %lncWk, i64* %R1_Var
  %lncWl = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncWm = bitcast i64* %lncWl to i64*
  %lncWn = load i64, i64* %lncWm, !tbaa !5
  %lncWo = inttoptr i64 %lncWn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncWp = load i64*, i64** %Sp_Var
  %lncWq = load i64, i64* %R1_Var
  %lncWr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncWo( i64* %Base_Arg, i64* %lncWp, i64* %Hp_Arg, i64 %lncWq, i64 %lncWr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFl_info$def to i8*)
define internal ghccc void @ccFl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
ncWs:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Dq = alloca i64, i32 1
  br label %ccFl
ccFl:
  %lncWt = load i64, i64* %R1_Var
  %lncWu = and i64 %lncWt, 7
  switch i64 %lncWu, label %ccFp [i64 1, label %ccFp
i64 2, label %ccFq]
ccFp:
  %lncWv = load i64*, i64** %Sp_Var
  %lncWw = getelementptr inbounds i64, i64* %lncWv, i32 1
  %lncWx = bitcast i64* %lncWw to i64*
  %lncWy = load i64, i64* %lncWx, !tbaa !2
  %lncWz = and i64 %lncWy, -8
  store i64 %lncWz, i64* %R1_Var
  %lncWA = load i64*, i64** %Sp_Var
  %lncWB = getelementptr inbounds i64, i64* %lncWA, i32 3
  %lncWC = ptrtoint i64* %lncWB to i64
  %lncWD = inttoptr i64 %lncWC to i64*
  store i64* %lncWD, i64** %Sp_Var
  %lncWF = load i64, i64* %R1_Var
  %lncWG = inttoptr i64 %lncWF to i64*
  %lncWH = load i64, i64* %lncWG, !tbaa !4
  %lncWI = inttoptr i64 %lncWH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncWJ = load i64*, i64** %Sp_Var
  %lncWK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncWI( i64* %Base_Arg, i64* %lncWJ, i64* %Hp_Arg, i64 %lncWK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFq:
  %lncWM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFA_info$def to i64
  %lncWL = load i64*, i64** %Sp_Var
  %lncWN = getelementptr inbounds i64, i64* %lncWL, i32 0
  store i64 %lncWM, i64* %lncWN, !tbaa !2
  %lncWQ = load i64, i64* %R1_Var
  %lncWR = add i64 %lncWQ, 14
  %lncWS = inttoptr i64 %lncWR to i64*
  %lncWT = load i64, i64* %lncWS, !tbaa !4
  store i64 %lncWT, i64* %ls7Dq
  %lncWW = load i64, i64* %R1_Var
  %lncWX = add i64 %lncWW, 6
  %lncWY = inttoptr i64 %lncWX to i64*
  %lncWZ = load i64, i64* %lncWY, !tbaa !4
  store i64 %lncWZ, i64* %R1_Var
  %lncX1 = load i64, i64* %ls7Dq
  %lncX0 = load i64*, i64** %Sp_Var
  %lncX2 = getelementptr inbounds i64, i64* %lncX0, i32 1
  store i64 %lncX1, i64* %lncX2, !tbaa !2
  %lncX3 = load i64, i64* %R1_Var
  %lncX4 = and i64 %lncX3, 7
  %lncX5 = icmp ne i64 %lncX4, 0
  br i1 %lncX5, label %ucG3, label %ccFB
ccFB:
  %lncX7 = load i64, i64* %R1_Var
  %lncX8 = inttoptr i64 %lncX7 to i64*
  %lncX9 = load i64, i64* %lncX8, !tbaa !4
  %lncXa = inttoptr i64 %lncX9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXb = load i64*, i64** %Sp_Var
  %lncXc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXa( i64* %Base_Arg, i64* %lncXb, i64* %Hp_Arg, i64 %lncXc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucG3:
  %lncXd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXe = load i64*, i64** %Sp_Var
  %lncXf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXd( i64* %Base_Arg, i64* %lncXe, i64* %Hp_Arg, i64 %lncXf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFA_info$def to i8*)
define internal ghccc void @ccFA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
ncXg:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ls7Dr = alloca i64, i32 1
  %ls7Ds = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccFA
ccFA:
  %lncXh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFF_info$def to i64
  %lncXi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncXh, i64* %lncXi, !tbaa !2
  %lncXj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncXk = bitcast i64* %lncXj to i64*
  %lncXl = load i64, i64* %lncXk, !tbaa !2
  store i64 %lncXl, i64* %R2_Var
  %lncXm = load i64, i64* %R1_Var
  store i64 %lncXm, i64* %ls7Dr
  %lncXp = load i64, i64* %R1_Var
  %lncXq = add i64 %lncXp, 7
  %lncXr = inttoptr i64 %lncXq to i64*
  %lncXs = load i64, i64* %lncXr, !tbaa !4
  store i64 %lncXs, i64* %ls7Ds
  %lncXt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncXu = bitcast i64* %lncXt to i64*
  %lncXv = load i64, i64* %lncXu, !tbaa !2
  store i64 %lncXv, i64* %R1_Var
  %lncXw = load i64, i64* %ls7Ds
  %lncXx = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lncXw, i64* %lncXx, !tbaa !2
  %lncXy = load i64, i64* %ls7Dr
  %lncXz = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lncXy, i64* %lncXz, !tbaa !2
  %lncXA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXB = load i64, i64* %R1_Var
  %lncXC = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncXB, i64 %lncXC, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFF_info$def to i8*)
define internal ghccc void @ccFF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
ncXD:
  %ls7Du = alloca i64, i32 1
  %ls7Dv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccFF
ccFF:
  %lncXF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFJ_info$def to i64
  %lncXE = load i64*, i64** %Sp_Var
  %lncXG = getelementptr inbounds i64, i64* %lncXE, i32 -1
  store i64 %lncXF, i64* %lncXG, !tbaa !2
  %lncXH = load i64, i64* %R1_Var
  store i64 %lncXH, i64* %ls7Du
  %lncXK = load i64, i64* %R1_Var
  %lncXL = add i64 %lncXK, 7
  %lncXM = inttoptr i64 %lncXL to i64*
  %lncXN = load i64, i64* %lncXM, !tbaa !4
  store i64 %lncXN, i64* %ls7Dv
  %lncXO = load i64*, i64** %Sp_Var
  %lncXP = getelementptr inbounds i64, i64* %lncXO, i32 1
  %lncXQ = bitcast i64* %lncXP to i64*
  %lncXR = load i64, i64* %lncXQ, !tbaa !2
  store i64 %lncXR, i64* %R1_Var
  %lncXT = load i64, i64* %ls7Dv
  %lncXS = load i64*, i64** %Sp_Var
  %lncXU = getelementptr inbounds i64, i64* %lncXS, i32 0
  store i64 %lncXT, i64* %lncXU, !tbaa !2
  %lncXW = load i64, i64* %ls7Du
  %lncXV = load i64*, i64** %Sp_Var
  %lncXX = getelementptr inbounds i64, i64* %lncXV, i32 1
  store i64 %lncXW, i64* %lncXX, !tbaa !2
  %lncXY = load i64*, i64** %Sp_Var
  %lncXZ = getelementptr inbounds i64, i64* %lncXY, i32 -1
  %lncY0 = ptrtoint i64* %lncXZ to i64
  %lncY1 = inttoptr i64 %lncY0 to i64*
  store i64* %lncY1, i64** %Sp_Var
  %lncY2 = load i64, i64* %R1_Var
  %lncY3 = and i64 %lncY2, 7
  %lncY4 = icmp ne i64 %lncY3, 0
  br i1 %lncY4, label %ucG5, label %ccFK
ccFK:
  %lncY6 = load i64, i64* %R1_Var
  %lncY7 = inttoptr i64 %lncY6 to i64*
  %lncY8 = load i64, i64* %lncY7, !tbaa !4
  %lncY9 = inttoptr i64 %lncY8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncYa = load i64*, i64** %Sp_Var
  %lncYb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncY9( i64* %Base_Arg, i64* %lncYa, i64* %Hp_Arg, i64 %lncYb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucG5:
  %lncYc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncYd = load i64*, i64** %Sp_Var
  %lncYe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncYc( i64* %Base_Arg, i64* %lncYd, i64* %Hp_Arg, i64 %lncYe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFJ_info$def to i8*)
define internal ghccc void @ccFJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ncYf:
  %ls7Dy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ccFJ
ccFJ:
  %lncYg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFO_info$def to i64
  %lncYh = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncYg, i64* %lncYh, !tbaa !2
  %lncYk = load i64, i64* %R1_Var
  %lncYl = add i64 %lncYk, 7
  %lncYm = inttoptr i64 %lncYl to double*
  %lncYn = load double, double* %lncYm, !tbaa !4
  store double %lncYn, double* %ls7Dy
  %lncYo = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncYp = bitcast i64* %lncYo to i64*
  %lncYq = load i64, i64* %lncYp, !tbaa !2
  store i64 %lncYq, i64* %R1_Var
  %lncYr = load double, double* %ls7Dy
  %lncYs = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lncYt = bitcast i64* %lncYs to double*
  store double %lncYr, double* %lncYt, !tbaa !2
  %lncYu = load i64, i64* %R1_Var
  %lncYv = and i64 %lncYu, 7
  %lncYw = icmp ne i64 %lncYv, 0
  br i1 %lncYw, label %ucG6, label %ccFT
ccFT:
  %lncYy = load i64, i64* %R1_Var
  %lncYz = inttoptr i64 %lncYy to i64*
  %lncYA = load i64, i64* %lncYz, !tbaa !4
  %lncYB = inttoptr i64 %lncYA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncYC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncYB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncYC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucG6:
  %lncYD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncYE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncYD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncYE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFO_info$def to i8*)
define internal ghccc void @ccFO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 67, i32 30, i32 0}>
{
ncYF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccFO
ccFO:
  %lncYG = load i64*, i64** %Sp_Var
  %lncYH = getelementptr inbounds i64, i64* %lncYG, i32 1
  %lncYI = bitcast i64* %lncYH to double*
  %lncYJ = load double, double* %lncYI, !tbaa !2
  %lncYM = load i64, i64* %R1_Var
  %lncYN = add i64 %lncYM, 7
  %lncYO = inttoptr i64 %lncYN to double*
  %lncYP = load double, double* %lncYO, !tbaa !4
  %lncYQ = fcmp olt double %lncYJ, %lncYP
  %lncYR = zext i1 %lncYQ to i64
  switch i64 %lncYR, label %ccG1 [i64 1, label %ccG2]
ccG1:
  %lncYS = load i64*, i64** %Sp_Var
  %lncYT = getelementptr inbounds i64, i64* %lncYS, i32 2
  %lncYU = bitcast i64* %lncYT to i64*
  %lncYV = load i64, i64* %lncYU, !tbaa !2
  %lncYW = and i64 %lncYV, -8
  store i64 %lncYW, i64* %R1_Var
  %lncYX = load i64*, i64** %Sp_Var
  %lncYY = getelementptr inbounds i64, i64* %lncYX, i32 4
  %lncYZ = ptrtoint i64* %lncYY to i64
  %lncZ0 = inttoptr i64 %lncYZ to i64*
  store i64* %lncZ0, i64** %Sp_Var
  %lncZ2 = load i64, i64* %R1_Var
  %lncZ3 = inttoptr i64 %lncZ2 to i64*
  %lncZ4 = load i64, i64* %lncZ3, !tbaa !4
  %lncZ5 = inttoptr i64 %lncZ4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZ6 = load i64*, i64** %Sp_Var
  %lncZ7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZ5( i64* %Base_Arg, i64* %lncZ6, i64* %Hp_Arg, i64 %lncZ7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccG2:
  %lncZ8 = load i64*, i64** %Sp_Var
  %lncZ9 = getelementptr inbounds i64, i64* %lncZ8, i32 3
  %lncZa = bitcast i64* %lncZ9 to i64*
  %lncZb = load i64, i64* %lncZa, !tbaa !2
  %lncZc = and i64 %lncZb, -8
  store i64 %lncZc, i64* %R1_Var
  %lncZd = load i64*, i64** %Sp_Var
  %lncZe = getelementptr inbounds i64, i64* %lncZd, i32 4
  %lncZf = ptrtoint i64* %lncZe to i64
  %lncZg = inttoptr i64 %lncZf to i64*
  store i64* %lncZg, i64** %Sp_Var
  %lncZi = load i64, i64* %R1_Var
  %lncZj = inttoptr i64 %lncZi to i64*
  %lncZk = load i64, i64* %lncZj, !tbaa !4
  %lncZl = inttoptr i64 %lncZk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZm = load i64*, i64** %Sp_Var
  %lncZn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZl( i64* %Base_Arg, i64* %lncZm, i64* %Hp_Arg, i64 %lncZn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Dl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dl_info$def to i8*)
define internal ghccc void @s7Dl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ncZo:
  %ls7Dl = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Dj = alloca i64, i32 1
  %ls7Dk = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ccG7
ccG7:
  %lncZp = load i64, i64* %R1_Var
  store i64 %lncZp, i64* %ls7Dl
  %lncZq = load i64*, i64** %Sp_Var
  %lncZr = getelementptr inbounds i64, i64* %lncZq, i32 -2
  %lncZs = ptrtoint i64* %lncZr to i64
  %lncZt = icmp ult i64 %lncZs, %SpLim_Arg
  %lncZu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncZt, i1 0 )
  br i1 %lncZu, label %ccG8, label %ccG9
ccG9:
  %lncZv = load i64*, i64** %Hp_Var
  %lncZw = getelementptr inbounds i64, i64* %lncZv, i32 2
  %lncZx = ptrtoint i64* %lncZw to i64
  %lncZy = inttoptr i64 %lncZx to i64*
  store i64* %lncZy, i64** %Hp_Var
  %lncZz = load i64*, i64** %Hp_Var
  %lncZA = ptrtoint i64* %lncZz to i64
  %lncZB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncZC = bitcast i64* %lncZB to i64*
  %lncZD = load i64, i64* %lncZC, !tbaa !5
  %lncZE = icmp ugt i64 %lncZA, %lncZD
  %lncZF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lncZE, i1 0 )
  br i1 %lncZF, label %ccGb, label %ccGa
ccGa:
  %lncZH = ptrtoint i8* @stg_upd_frame_info to i64
  %lncZG = load i64*, i64** %Sp_Var
  %lncZI = getelementptr inbounds i64, i64* %lncZG, i32 -2
  store i64 %lncZH, i64* %lncZI, !tbaa !2
  %lncZK = load i64, i64* %ls7Dl
  %lncZJ = load i64*, i64** %Sp_Var
  %lncZL = getelementptr inbounds i64, i64* %lncZJ, i32 -1
  store i64 %lncZK, i64* %lncZL, !tbaa !2
  %lncZM = load i64, i64* %ls7Dl
  %lncZN = add i64 %lncZM, 16
  %lncZO = inttoptr i64 %lncZN to i64*
  %lncZP = load i64, i64* %lncZO, !tbaa !1
  store i64 %lncZP, i64* %ls7Dj
  %lncZQ = load i64, i64* %ls7Dl
  %lncZR = add i64 %lncZQ, 24
  %lncZS = inttoptr i64 %lncZR to i64*
  %lncZT = load i64, i64* %lncZS, !tbaa !1
  store i64 %lncZT, i64* %ls7Dk
  %lncZV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dm_info$def to i64
  %lncZU = load i64*, i64** %Hp_Var
  %lncZW = getelementptr inbounds i64, i64* %lncZU, i32 -1
  store i64 %lncZV, i64* %lncZW, !tbaa !3
  %lncZY = load i64, i64* %ls7Dj
  %lncZX = load i64*, i64** %Hp_Var
  %lncZZ = getelementptr inbounds i64, i64* %lncZX, i32 0
  store i64 %lncZY, i64* %lncZZ, !tbaa !3
  %lnd00 = load i64, i64* %ls7Dk
  store i64 %lnd00, i64* %R2_Var
  %lnd02 = load i64*, i64** %Hp_Var
  %lnd03 = ptrtoint i64* %lnd02 to i64
  %lnd04 = add i64 %lnd03, -7
  store i64 %lnd04, i64* %R1_Var
  %lnd05 = load i64*, i64** %Sp_Var
  %lnd06 = getelementptr inbounds i64, i64* %lnd05, i32 -2
  %lnd07 = ptrtoint i64* %lnd06 to i64
  %lnd08 = inttoptr i64 %lnd07 to i64*
  store i64* %lnd08, i64** %Sp_Var
  %lnd09 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd0a = load i64*, i64** %Sp_Var
  %lnd0b = load i64*, i64** %Hp_Var
  %lnd0c = load i64, i64* %R1_Var
  %lnd0d = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd09( i64* %Base_Arg, i64* %lnd0a, i64* %lnd0b, i64 %lnd0c, i64 %lnd0d, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGb:
  %lnd0e = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnd0e, !tbaa !5
  br label %ccG8
ccG8:
  %lnd0f = load i64, i64* %ls7Dl
  store i64 %lnd0f, i64* %R1_Var
  %lnd0g = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnd0h = bitcast i64* %lnd0g to i64*
  %lnd0i = load i64, i64* %lnd0h, !tbaa !5
  %lnd0j = inttoptr i64 %lnd0i to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd0k = load i64*, i64** %Sp_Var
  %lnd0l = load i64*, i64** %Hp_Var
  %lnd0m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd0j( i64* %Base_Arg, i64* %lnd0k, i64* %lnd0l, i64 %lnd0m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwtrace_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to i8*)
define ghccc void @Main_zdwtrace_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziList_badHead_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to i64)) to i32),i32 0)}>
{
nd0n:
  %ls7C2 = alloca i64, i32 1
  %ls7C1 = alloca i64, i32 1
  %ls7C0 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  br label %ccGg
ccGg:
  %lnd0o = load i64, i64* %R4_Var
  store i64 %lnd0o, i64* %ls7C2
  %lnd0p = load i64, i64* %R3_Var
  store i64 %lnd0p, i64* %ls7C1
  %lnd0q = load i64, i64* %R2_Var
  store i64 %lnd0q, i64* %ls7C0
  %lnd0r = load i64*, i64** %Sp_Var
  %lnd0s = getelementptr inbounds i64, i64* %lnd0r, i32 -2
  %lnd0t = ptrtoint i64* %lnd0s to i64
  %lnd0u = icmp ult i64 %lnd0t, %SpLim_Arg
  %lnd0v = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd0u, i1 0 )
  br i1 %lnd0v, label %ccGh, label %ccGi
ccGi:
  %lnd0w = load i64*, i64** %Hp_Var
  %lnd0x = getelementptr inbounds i64, i64* %lnd0w, i32 3
  %lnd0y = ptrtoint i64* %lnd0x to i64
  %lnd0z = inttoptr i64 %lnd0y to i64*
  store i64* %lnd0z, i64** %Hp_Var
  %lnd0A = load i64*, i64** %Hp_Var
  %lnd0B = ptrtoint i64* %lnd0A to i64
  %lnd0C = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd0D = bitcast i64* %lnd0C to i64*
  %lnd0E = load i64, i64* %lnd0D, !tbaa !5
  %lnd0F = icmp ugt i64 %lnd0B, %lnd0E
  %lnd0G = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd0F, i1 0 )
  br i1 %lnd0G, label %ccGk, label %ccGj
ccGj:
  %lnd0I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7C3_info$def to i64
  %lnd0H = load i64*, i64** %Hp_Var
  %lnd0J = getelementptr inbounds i64, i64* %lnd0H, i32 -2
  store i64 %lnd0I, i64* %lnd0J, !tbaa !3
  %lnd0L = load i64, i64* %ls7C2
  %lnd0K = load i64*, i64** %Hp_Var
  %lnd0M = getelementptr inbounds i64, i64* %lnd0K, i32 -1
  store i64 %lnd0L, i64* %lnd0M, !tbaa !3
  %lnd0O = load i64, i64* %ls7C1
  %lnd0N = load i64*, i64** %Hp_Var
  %lnd0P = getelementptr inbounds i64, i64* %lnd0N, i32 0
  store i64 %lnd0O, i64* %lnd0P, !tbaa !3
  %lnd0R = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccEL_info$def to i64
  %lnd0Q = load i64*, i64** %Sp_Var
  %lnd0S = getelementptr inbounds i64, i64* %lnd0Q, i32 -2
  store i64 %lnd0R, i64* %lnd0S, !tbaa !2
  %lnd0T = load i64, i64* %ls7C0
  store i64 %lnd0T, i64* %R2_Var
  %lnd0V = load i64*, i64** %Hp_Var
  %lnd0W = ptrtoint i64* %lnd0V to i64
  %lnd0X = add i64 %lnd0W, -15
  store i64 %lnd0X, i64* %R1_Var
  %lnd0Z = load i64, i64* %ls7C0
  %lnd0Y = load i64*, i64** %Sp_Var
  %lnd10 = getelementptr inbounds i64, i64* %lnd0Y, i32 -1
  store i64 %lnd0Z, i64* %lnd10, !tbaa !2
  %lnd11 = load i64*, i64** %Sp_Var
  %lnd12 = getelementptr inbounds i64, i64* %lnd11, i32 -2
  %lnd13 = ptrtoint i64* %lnd12 to i64
  %lnd14 = inttoptr i64 %lnd13 to i64*
  store i64* %lnd14, i64** %Sp_Var
  %lnd15 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7C3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd16 = load i64*, i64** %Sp_Var
  %lnd17 = load i64*, i64** %Hp_Var
  %lnd18 = load i64, i64* %R1_Var
  %lnd19 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd15( i64* %Base_Arg, i64* %lnd16, i64* %lnd17, i64 %lnd18, i64 %lnd19, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGk:
  %lnd1a = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnd1a, !tbaa !5
  br label %ccGh
ccGh:
  %lnd1b = load i64, i64* %ls7C2
  store i64 %lnd1b, i64* %R4_Var
  %lnd1c = load i64, i64* %ls7C1
  store i64 %lnd1c, i64* %R3_Var
  %lnd1d = load i64, i64* %ls7C0
  store i64 %lnd1d, i64* %R2_Var
  %lnd1e = ptrtoint %Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i64
  store i64 %lnd1e, i64* %R1_Var
  %lnd1f = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnd1g = bitcast i64* %lnd1f to i64*
  %lnd1h = load i64, i64* %lnd1g, !tbaa !5
  %lnd1i = inttoptr i64 %lnd1h to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd1j = load i64*, i64** %Sp_Var
  %lnd1k = load i64*, i64** %Hp_Var
  %lnd1l = load i64, i64* %R1_Var
  %lnd1m = load i64, i64* %R2_Var
  %lnd1n = load i64, i64* %R3_Var
  %lnd1o = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd1i( i64* %Base_Arg, i64* %lnd1j, i64* %lnd1k, i64 %lnd1l, i64 %lnd1m, i64 %lnd1n, i64 %lnd1o, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccEL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccEL_info$def to i8*)
define internal ghccc void @ccEL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziList_badHead_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccEL_info$def to i64)) to i32),i32 0)}>
{
nd1p:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Dj = alloca i64, i32 1
  %ls7Dk = alloca i64, i32 1
  %lccFc = alloca i64, i32 1
  br label %ccEL
ccEL:
  %lnd1q = load i64, i64* %R1_Var
  %lnd1r = and i64 %lnd1q, 7
  switch i64 %lnd1r, label %ccGd [i64 1, label %ccGd
i64 2, label %ccGe]
ccGd:
  %lnd1s = load i64*, i64** %Hp_Var
  %lnd1t = getelementptr inbounds i64, i64* %lnd1s, i32 3
  %lnd1u = ptrtoint i64* %lnd1t to i64
  %lnd1v = inttoptr i64 %lnd1u to i64*
  store i64* %lnd1v, i64** %Hp_Var
  %lnd1w = load i64*, i64** %Hp_Var
  %lnd1x = ptrtoint i64* %lnd1w to i64
  %lnd1y = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd1z = bitcast i64* %lnd1y to i64*
  %lnd1A = load i64, i64* %lnd1z, !tbaa !5
  %lnd1B = icmp ugt i64 %lnd1x, %lnd1A
  %lnd1C = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd1B, i1 0 )
  br i1 %lnd1C, label %ccGn, label %ccGm
ccGm:
  %lnd1E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Di_info$def to i64
  %lnd1D = load i64*, i64** %Hp_Var
  %lnd1F = getelementptr inbounds i64, i64* %lnd1D, i32 -2
  store i64 %lnd1E, i64* %lnd1F, !tbaa !3
  %lnd1H = load i64*, i64** %Sp_Var
  %lnd1I = getelementptr inbounds i64, i64* %lnd1H, i32 1
  %lnd1J = bitcast i64* %lnd1I to i64*
  %lnd1K = load i64, i64* %lnd1J, !tbaa !2
  %lnd1G = load i64*, i64** %Hp_Var
  %lnd1L = getelementptr inbounds i64, i64* %lnd1G, i32 0
  store i64 %lnd1K, i64* %lnd1L, !tbaa !3
  %lnd1M = load i64*, i64** %Hp_Var
  %lnd1N = getelementptr inbounds i64, i64* %lnd1M, i32 -2
  %lnd1O = ptrtoint i64* %lnd1N to i64
  store i64 %lnd1O, i64* %R3_Var
  %lnd1P = ptrtoint %Main_infinity_closure_struct* @Main_infinity_closure$def to i64
  %lnd1Q = add i64 %lnd1P, 1
  store i64 %lnd1Q, i64* %R2_Var
  %lnd1R = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnd1S = add i64 %lnd1R, 1
  store i64 %lnd1S, i64* %R1_Var
  %lnd1T = load i64*, i64** %Sp_Var
  %lnd1U = getelementptr inbounds i64, i64* %lnd1T, i32 2
  %lnd1V = ptrtoint i64* %lnd1U to i64
  %lnd1W = inttoptr i64 %lnd1V to i64*
  store i64* %lnd1W, i64** %Sp_Var
  %lnd1X = load i64*, i64** %Sp_Var
  %lnd1Y = getelementptr inbounds i64, i64* %lnd1X, i32 0
  %lnd1Z = bitcast i64* %lnd1Y to i64*
  %lnd20 = load i64, i64* %lnd1Z, !tbaa !2
  %lnd21 = inttoptr i64 %lnd20 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd22 = load i64*, i64** %Sp_Var
  %lnd23 = load i64*, i64** %Hp_Var
  %lnd24 = load i64, i64* %R1_Var
  %lnd25 = load i64, i64* %R2_Var
  %lnd26 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd21( i64* %Base_Arg, i64* %lnd22, i64* %lnd23, i64 %lnd24, i64 %lnd25, i64 %lnd26, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGn:
  %lnd27 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnd27, !tbaa !5
  %lnd28 = load i64, i64* %R1_Var
  store i64 %lnd28, i64* %R1_Var
  %lnd29 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd2a = load i64*, i64** %Sp_Var
  %lnd2b = load i64*, i64** %Hp_Var
  %lnd2c = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd29( i64* %Base_Arg, i64* %lnd2a, i64* %lnd2b, i64 %lnd2c, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGe:
  %lnd2d = load i64*, i64** %Hp_Var
  %lnd2e = getelementptr inbounds i64, i64* %lnd2d, i32 10
  %lnd2f = ptrtoint i64* %lnd2e to i64
  %lnd2g = inttoptr i64 %lnd2f to i64*
  store i64* %lnd2g, i64** %Hp_Var
  %lnd2h = load i64*, i64** %Hp_Var
  %lnd2i = ptrtoint i64* %lnd2h to i64
  %lnd2j = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd2k = bitcast i64* %lnd2j to i64*
  %lnd2l = load i64, i64* %lnd2k, !tbaa !5
  %lnd2m = icmp ugt i64 %lnd2i, %lnd2l
  %lnd2n = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd2m, i1 0 )
  br i1 %lnd2n, label %ccGs, label %ccGr
ccGr:
  %lnd2q = load i64, i64* %R1_Var
  %lnd2r = add i64 %lnd2q, 6
  %lnd2s = inttoptr i64 %lnd2r to i64*
  %lnd2t = load i64, i64* %lnd2s, !tbaa !4
  store i64 %lnd2t, i64* %ls7Dj
  %lnd2w = load i64, i64* %R1_Var
  %lnd2x = add i64 %lnd2w, 14
  %lnd2y = inttoptr i64 %lnd2x to i64*
  %lnd2z = load i64, i64* %lnd2y, !tbaa !4
  store i64 %lnd2z, i64* %ls7Dk
  %lnd2B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Dl_info$def to i64
  %lnd2A = load i64*, i64** %Hp_Var
  %lnd2C = getelementptr inbounds i64, i64* %lnd2A, i32 -9
  store i64 %lnd2B, i64* %lnd2C, !tbaa !3
  %lnd2E = load i64, i64* %ls7Dj
  %lnd2D = load i64*, i64** %Hp_Var
  %lnd2F = getelementptr inbounds i64, i64* %lnd2D, i32 -7
  store i64 %lnd2E, i64* %lnd2F, !tbaa !3
  %lnd2H = load i64, i64* %ls7Dk
  %lnd2G = load i64*, i64** %Hp_Var
  %lnd2I = getelementptr inbounds i64, i64* %lnd2G, i32 -6
  store i64 %lnd2H, i64* %lnd2I, !tbaa !3
  %lnd2K = ptrtoint i8* @stg_sel_1_upd_info to i64
  %lnd2J = load i64*, i64** %Hp_Var
  %lnd2L = getelementptr inbounds i64, i64* %lnd2J, i32 -5
  store i64 %lnd2K, i64* %lnd2L, !tbaa !3
  %lnd2M = load i64*, i64** %Hp_Var
  %lnd2N = getelementptr inbounds i64, i64* %lnd2M, i32 -9
  %lnd2O = ptrtoint i64* %lnd2N to i64
  store i64 %lnd2O, i64* %lccFc
  %lnd2Q = load i64, i64* %lccFc
  %lnd2P = load i64*, i64** %Hp_Var
  %lnd2R = getelementptr inbounds i64, i64* %lnd2P, i32 -3
  store i64 %lnd2Q, i64* %lnd2R, !tbaa !3
  %lnd2T = ptrtoint i8* @stg_sel_0_upd_info to i64
  %lnd2S = load i64*, i64** %Hp_Var
  %lnd2U = getelementptr inbounds i64, i64* %lnd2S, i32 -2
  store i64 %lnd2T, i64* %lnd2U, !tbaa !3
  %lnd2W = load i64, i64* %lccFc
  %lnd2V = load i64*, i64** %Hp_Var
  %lnd2X = getelementptr inbounds i64, i64* %lnd2V, i32 0
  store i64 %lnd2W, i64* %lnd2X, !tbaa !3
  %lnd2Y = load i64*, i64** %Hp_Var
  %lnd2Z = getelementptr inbounds i64, i64* %lnd2Y, i32 -5
  %lnd30 = ptrtoint i64* %lnd2Z to i64
  store i64 %lnd30, i64* %R3_Var
  %lnd31 = load i64*, i64** %Hp_Var
  %lnd32 = getelementptr inbounds i64, i64* %lnd31, i32 -2
  %lnd33 = ptrtoint i64* %lnd32 to i64
  store i64 %lnd33, i64* %R2_Var
  %lnd34 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnd35 = add i64 %lnd34, 2
  store i64 %lnd35, i64* %R1_Var
  %lnd36 = load i64*, i64** %Sp_Var
  %lnd37 = getelementptr inbounds i64, i64* %lnd36, i32 2
  %lnd38 = ptrtoint i64* %lnd37 to i64
  %lnd39 = inttoptr i64 %lnd38 to i64*
  store i64* %lnd39, i64** %Sp_Var
  %lnd3a = load i64*, i64** %Sp_Var
  %lnd3b = getelementptr inbounds i64, i64* %lnd3a, i32 0
  %lnd3c = bitcast i64* %lnd3b to i64*
  %lnd3d = load i64, i64* %lnd3c, !tbaa !2
  %lnd3e = inttoptr i64 %lnd3d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3f = load i64*, i64** %Sp_Var
  %lnd3g = load i64*, i64** %Hp_Var
  %lnd3h = load i64, i64* %R1_Var
  %lnd3i = load i64, i64* %R2_Var
  %lnd3j = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3e( i64* %Base_Arg, i64* %lnd3f, i64* %lnd3g, i64 %lnd3h, i64 %lnd3i, i64 %lnd3j, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGs:
  %lnd3k = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 80, i64* %lnd3k, !tbaa !5
  %lnd3l = load i64, i64* %R1_Var
  store i64 %lnd3l, i64* %R1_Var
  %lnd3m = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3n = load i64*, i64** %Sp_Var
  %lnd3o = load i64*, i64** %Hp_Var
  %lnd3p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3m( i64* %Base_Arg, i64* %lnd3n, i64* %lnd3o, i64 %lnd3p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_trace_closure_struct = type <{i64, i64}>
@Main_trace_closure$def = internal global %Main_trace_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_trace_info$def to i64), i64 0}>
@Main_trace_closure = alias i8, bitcast (%Main_trace_closure_struct* @Main_trace_closure$def to i8*)
@Main_trace_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_trace_info$def to i8*)
define ghccc void @Main_trace_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_trace_info$def to i64)) to i32),i32 0)}>
{
nd3D:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd3x
cd3x:
  %lnd3E = load i64*, i64** %Sp_Var
  %lnd3F = getelementptr inbounds i64, i64* %lnd3E, i32 -1
  %lnd3G = ptrtoint i64* %lnd3F to i64
  %lnd3H = icmp ult i64 %lnd3G, %SpLim_Arg
  %lnd3I = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd3H, i1 0 )
  br i1 %lnd3I, label %cd3y, label %cd3z
cd3z:
  %lnd3K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd3u_info$def to i64
  %lnd3J = load i64*, i64** %Sp_Var
  %lnd3L = getelementptr inbounds i64, i64* %lnd3J, i32 -1
  store i64 %lnd3K, i64* %lnd3L, !tbaa !2
  %lnd3M = load i64, i64* %R4_Var
  store i64 %lnd3M, i64* %R4_Var
  %lnd3N = load i64, i64* %R3_Var
  store i64 %lnd3N, i64* %R3_Var
  %lnd3O = load i64, i64* %R2_Var
  store i64 %lnd3O, i64* %R2_Var
  %lnd3P = load i64*, i64** %Sp_Var
  %lnd3Q = getelementptr inbounds i64, i64* %lnd3P, i32 -1
  %lnd3R = ptrtoint i64* %lnd3Q to i64
  %lnd3S = inttoptr i64 %lnd3R to i64*
  store i64* %lnd3S, i64** %Sp_Var
  %lnd3T = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3U = load i64*, i64** %Sp_Var
  %lnd3V = load i64, i64* %R1_Var
  %lnd3W = load i64, i64* %R2_Var
  %lnd3X = load i64, i64* %R3_Var
  %lnd3Y = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3T( i64* %Base_Arg, i64* %lnd3U, i64* %Hp_Arg, i64 %lnd3V, i64 %lnd3W, i64 %lnd3X, i64 %lnd3Y, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd3y:
  %lnd3Z = load i64, i64* %R4_Var
  store i64 %lnd3Z, i64* %R4_Var
  %lnd40 = load i64, i64* %R3_Var
  store i64 %lnd40, i64* %R3_Var
  %lnd41 = load i64, i64* %R2_Var
  store i64 %lnd41, i64* %R2_Var
  %lnd42 = ptrtoint %Main_trace_closure_struct* @Main_trace_closure$def to i64
  store i64 %lnd42, i64* %R1_Var
  %lnd43 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnd44 = bitcast i64* %lnd43 to i64*
  %lnd45 = load i64, i64* %lnd44, !tbaa !5
  %lnd46 = inttoptr i64 %lnd45 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd47 = load i64*, i64** %Sp_Var
  %lnd48 = load i64, i64* %R1_Var
  %lnd49 = load i64, i64* %R2_Var
  %lnd4a = load i64, i64* %R3_Var
  %lnd4b = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd46( i64* %Base_Arg, i64* %lnd47, i64* %Hp_Arg, i64 %lnd48, i64 %lnd49, i64 %lnd4a, i64 %lnd4b, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd3u_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd3u_info$def to i8*)
define internal ghccc void @cd3u_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nd4c:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cd3u
cd3u:
  %lnd4d = load i64*, i64** %Hp_Var
  %lnd4e = getelementptr inbounds i64, i64* %lnd4d, i32 4
  %lnd4f = ptrtoint i64* %lnd4e to i64
  %lnd4g = inttoptr i64 %lnd4f to i64*
  store i64* %lnd4g, i64** %Hp_Var
  %lnd4h = load i64*, i64** %Hp_Var
  %lnd4i = ptrtoint i64* %lnd4h to i64
  %lnd4j = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd4k = bitcast i64* %lnd4j to i64*
  %lnd4l = load i64, i64* %lnd4k, !tbaa !5
  %lnd4m = icmp ugt i64 %lnd4i, %lnd4l
  %lnd4n = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd4m, i1 0 )
  br i1 %lnd4n, label %cd3C, label %cd3B
cd3B:
  %lnd4p = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnd4o = load i64*, i64** %Hp_Var
  %lnd4q = getelementptr inbounds i64, i64* %lnd4o, i32 -3
  store i64 %lnd4p, i64* %lnd4q, !tbaa !3
  %lnd4s = load i64, i64* %R1_Var
  %lnd4r = load i64*, i64** %Hp_Var
  %lnd4t = getelementptr inbounds i64, i64* %lnd4r, i32 -2
  store i64 %lnd4s, i64* %lnd4t, !tbaa !3
  %lnd4v = load i64, i64* %R2_Var
  %lnd4u = load i64*, i64** %Hp_Var
  %lnd4w = getelementptr inbounds i64, i64* %lnd4u, i32 -1
  store i64 %lnd4v, i64* %lnd4w, !tbaa !3
  %lnd4y = load i64, i64* %R3_Var
  %lnd4x = load i64*, i64** %Hp_Var
  %lnd4z = getelementptr inbounds i64, i64* %lnd4x, i32 0
  store i64 %lnd4y, i64* %lnd4z, !tbaa !3
  %lnd4B = load i64*, i64** %Hp_Var
  %lnd4C = ptrtoint i64* %lnd4B to i64
  %lnd4D = add i64 %lnd4C, -23
  store i64 %lnd4D, i64* %R1_Var
  %lnd4E = load i64*, i64** %Sp_Var
  %lnd4F = getelementptr inbounds i64, i64* %lnd4E, i32 1
  %lnd4G = ptrtoint i64* %lnd4F to i64
  %lnd4H = inttoptr i64 %lnd4G to i64*
  store i64* %lnd4H, i64** %Sp_Var
  %lnd4I = load i64*, i64** %Sp_Var
  %lnd4J = getelementptr inbounds i64, i64* %lnd4I, i32 0
  %lnd4K = bitcast i64* %lnd4J to i64*
  %lnd4L = load i64, i64* %lnd4K, !tbaa !2
  %lnd4M = inttoptr i64 %lnd4L to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd4N = load i64*, i64** %Sp_Var
  %lnd4O = load i64*, i64** %Hp_Var
  %lnd4P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd4M( i64* %Base_Arg, i64* %lnd4N, i64* %lnd4O, i64 %lnd4P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd3C:
  %lnd4Q = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnd4Q, !tbaa !5
  %lnd4R = load i64, i64* %R3_Var
  store i64 %lnd4R, i64* %R3_Var
  %lnd4S = load i64, i64* %R2_Var
  store i64 %lnd4S, i64* %R2_Var
  %lnd4T = load i64, i64* %R1_Var
  store i64 %lnd4T, i64* %R1_Var
  %lnd4U = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd4V = load i64*, i64** %Sp_Var
  %lnd4W = load i64*, i64** %Hp_Var
  %lnd4X = load i64, i64* %R1_Var
  %lnd4Y = load i64, i64* %R2_Var
  %lnd4Z = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd4U( i64* %Base_Arg, i64* %lnd4V, i64* %lnd4W, i64 %lnd4X, i64 %lnd4Y, i64 %lnd4Z, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwshadowed_closure_struct = type <{i64, i64}>
@Main_zdwshadowed_closure$def = internal global %Main_zdwshadowed_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshadowed_info$def to i64), i64 0}>
@Main_zdwshadowed_closure = alias i8, bitcast (%Main_zdwshadowed_closure_struct* @Main_zdwshadowed_closure$def to i8*)
@s7Em_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Em_info$def to i8*)
define internal ghccc void @s7Em_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nd79:
  %ls7E1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd5p
cd5p:
  %lnd7a = load i64*, i64** %Sp_Var
  %lnd7b = getelementptr inbounds i64, i64* %lnd7a, i32 -4
  %lnd7c = ptrtoint i64* %lnd7b to i64
  %lnd7d = icmp ult i64 %lnd7c, %SpLim_Arg
  %lnd7e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd7d, i1 0 )
  br i1 %lnd7e, label %cd5E, label %cd5F
cd5F:
  %lnd7g = ptrtoint i8* @stg_upd_frame_info to i64
  %lnd7f = load i64*, i64** %Sp_Var
  %lnd7h = getelementptr inbounds i64, i64* %lnd7f, i32 -2
  store i64 %lnd7g, i64* %lnd7h, !tbaa !2
  %lnd7j = load i64, i64* %R1_Var
  %lnd7i = load i64*, i64** %Sp_Var
  %lnd7k = getelementptr inbounds i64, i64* %lnd7i, i32 -1
  store i64 %lnd7j, i64* %lnd7k, !tbaa !2
  %lnd7m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5m_info$def to i64
  %lnd7l = load i64*, i64** %Sp_Var
  %lnd7n = getelementptr inbounds i64, i64* %lnd7l, i32 -4
  store i64 %lnd7m, i64* %lnd7n, !tbaa !2
  %lnd7q = load i64, i64* %R1_Var
  %lnd7r = add i64 %lnd7q, 16
  %lnd7s = inttoptr i64 %lnd7r to i64*
  %lnd7t = load i64, i64* %lnd7s, !tbaa !4
  store i64 %lnd7t, i64* %ls7E1
  %lnd7w = load i64, i64* %R1_Var
  %lnd7x = add i64 %lnd7w, 24
  %lnd7y = inttoptr i64 %lnd7x to i64*
  %lnd7z = load i64, i64* %lnd7y, !tbaa !4
  store i64 %lnd7z, i64* %R1_Var
  %lnd7B = load i64, i64* %ls7E1
  %lnd7A = load i64*, i64** %Sp_Var
  %lnd7C = getelementptr inbounds i64, i64* %lnd7A, i32 -3
  store i64 %lnd7B, i64* %lnd7C, !tbaa !2
  %lnd7D = load i64*, i64** %Sp_Var
  %lnd7E = getelementptr inbounds i64, i64* %lnd7D, i32 -4
  %lnd7F = ptrtoint i64* %lnd7E to i64
  %lnd7G = inttoptr i64 %lnd7F to i64*
  store i64* %lnd7G, i64** %Sp_Var
  %lnd7H = load i64, i64* %R1_Var
  %lnd7I = and i64 %lnd7H, 7
  %lnd7J = icmp ne i64 %lnd7I, 0
  br i1 %lnd7J, label %ud5L, label %cd5n
cd5n:
  %lnd7L = load i64, i64* %R1_Var
  %lnd7M = inttoptr i64 %lnd7L to i64*
  %lnd7N = load i64, i64* %lnd7M, !tbaa !4
  %lnd7O = inttoptr i64 %lnd7N to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd7P = load i64*, i64** %Sp_Var
  %lnd7Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd7O( i64* %Base_Arg, i64* %lnd7P, i64* %Hp_Arg, i64 %lnd7Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud5L:
  %lnd7R = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5m_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd7S = load i64*, i64** %Sp_Var
  %lnd7T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd7R( i64* %Base_Arg, i64* %lnd7S, i64* %Hp_Arg, i64 %lnd7T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd5E:
  %lnd7U = load i64, i64* %R1_Var
  store i64 %lnd7U, i64* %R1_Var
  %lnd7V = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnd7W = bitcast i64* %lnd7V to i64*
  %lnd7X = load i64, i64* %lnd7W, !tbaa !5
  %lnd7Y = inttoptr i64 %lnd7X to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd7Z = load i64*, i64** %Sp_Var
  %lnd80 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd7Y( i64* %Base_Arg, i64* %lnd7Z, i64* %Hp_Arg, i64 %lnd80, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd5m_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5m_info$def to i8*)
define internal ghccc void @cd5m_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nd81:
  %ls7Eh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd5m
cd5m:
  %lnd82 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5s_info$def to i64
  %lnd83 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnd82, i64* %lnd83, !tbaa !2
  %lnd86 = load i64, i64* %R1_Var
  %lnd87 = add i64 %lnd86, 7
  %lnd88 = inttoptr i64 %lnd87 to double*
  %lnd89 = load double, double* %lnd88, !tbaa !4
  store double %lnd89, double* %ls7Eh
  %lnd8a = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnd8b = bitcast i64* %lnd8a to i64*
  %lnd8c = load i64, i64* %lnd8b, !tbaa !2
  store i64 %lnd8c, i64* %R1_Var
  %lnd8d = load double, double* %ls7Eh
  %lnd8e = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnd8f = bitcast i64* %lnd8e to double*
  store double %lnd8d, double* %lnd8f, !tbaa !2
  %lnd8g = load i64, i64* %R1_Var
  %lnd8h = and i64 %lnd8g, 7
  %lnd8i = icmp ne i64 %lnd8h, 0
  br i1 %lnd8i, label %ud5K, label %cd5t
cd5t:
  %lnd8k = load i64, i64* %R1_Var
  %lnd8l = inttoptr i64 %lnd8k to i64*
  %lnd8m = load i64, i64* %lnd8l, !tbaa !4
  %lnd8n = inttoptr i64 %lnd8m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd8o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd8n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd8o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud5K:
  %lnd8p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5s_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd8q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd8p( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd8q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd5s_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5s_info$def to i8*)
define internal ghccc void @cd5s_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nd8r:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7El = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd5s
cd5s:
  %lnd8s = load i64*, i64** %Hp_Var
  %lnd8t = getelementptr inbounds i64, i64* %lnd8s, i32 2
  %lnd8u = ptrtoint i64* %lnd8t to i64
  %lnd8v = inttoptr i64 %lnd8u to i64*
  store i64* %lnd8v, i64** %Hp_Var
  %lnd8w = load i64*, i64** %Hp_Var
  %lnd8x = ptrtoint i64* %lnd8w to i64
  %lnd8y = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd8z = bitcast i64* %lnd8y to i64*
  %lnd8A = load i64, i64* %lnd8z, !tbaa !5
  %lnd8B = icmp ugt i64 %lnd8x, %lnd8A
  %lnd8C = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd8B, i1 0 )
  br i1 %lnd8C, label %cd5J, label %cd5I
cd5I:
  %lnd8D = load i64*, i64** %Sp_Var
  %lnd8E = getelementptr inbounds i64, i64* %lnd8D, i32 1
  %lnd8F = bitcast i64* %lnd8E to double*
  %lnd8G = load double, double* %lnd8F, !tbaa !2
  %lnd8J = load i64, i64* %R1_Var
  %lnd8K = add i64 %lnd8J, 7
  %lnd8L = inttoptr i64 %lnd8K to double*
  %lnd8M = load double, double* %lnd8L, !tbaa !4
  %lnd8N = fmul double %lnd8M, 0x3EB0C6F7A0B5ED8D
  %lnd8O = fadd double %lnd8G, %lnd8N
  store double %lnd8O, double* %ls7El
  %lnd8Q = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnd8P = load i64*, i64** %Hp_Var
  %lnd8R = getelementptr inbounds i64, i64* %lnd8P, i32 -1
  store i64 %lnd8Q, i64* %lnd8R, !tbaa !3
  %lnd8T = load double, double* %ls7El
  %lnd8S = load i64*, i64** %Hp_Var
  %lnd8U = getelementptr inbounds i64, i64* %lnd8S, i32 0
  %lnd8V = bitcast i64* %lnd8U to double*
  store double %lnd8T, double* %lnd8V, !tbaa !3
  %lnd8X = load i64*, i64** %Hp_Var
  %lnd8Y = ptrtoint i64* %lnd8X to i64
  %lnd8Z = add i64 %lnd8Y, -7
  store i64 %lnd8Z, i64* %R1_Var
  %lnd90 = load i64*, i64** %Sp_Var
  %lnd91 = getelementptr inbounds i64, i64* %lnd90, i32 2
  %lnd92 = ptrtoint i64* %lnd91 to i64
  %lnd93 = inttoptr i64 %lnd92 to i64*
  store i64* %lnd93, i64** %Sp_Var
  %lnd94 = load i64*, i64** %Sp_Var
  %lnd95 = getelementptr inbounds i64, i64* %lnd94, i32 0
  %lnd96 = bitcast i64* %lnd95 to i64*
  %lnd97 = load i64, i64* %lnd96, !tbaa !2
  %lnd98 = inttoptr i64 %lnd97 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd99 = load i64*, i64** %Sp_Var
  %lnd9a = load i64*, i64** %Hp_Var
  %lnd9b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd98( i64* %Base_Arg, i64* %lnd99, i64* %lnd9a, i64 %lnd9b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd5J:
  %lnd9c = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnd9c, !tbaa !5
  %lnd9d = load i64, i64* %R1_Var
  store i64 %lnd9d, i64* %R1_Var
  %lnd9e = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd9f = load i64*, i64** %Sp_Var
  %lnd9g = load i64*, i64** %Hp_Var
  %lnd9h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd9e( i64* %Base_Arg, i64* %lnd9f, i64* %lnd9g, i64 %lnd9h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ef_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ef_info$def to i8*)
define internal ghccc void @s7Ef_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nd9i:
  %ls7E0 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd5T
cd5T:
  %lnd9j = load i64*, i64** %Sp_Var
  %lnd9k = getelementptr inbounds i64, i64* %lnd9j, i32 -4
  %lnd9l = ptrtoint i64* %lnd9k to i64
  %lnd9m = icmp ult i64 %lnd9l, %SpLim_Arg
  %lnd9n = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnd9m, i1 0 )
  br i1 %lnd9n, label %cd68, label %cd69
cd69:
  %lnd9p = ptrtoint i8* @stg_upd_frame_info to i64
  %lnd9o = load i64*, i64** %Sp_Var
  %lnd9q = getelementptr inbounds i64, i64* %lnd9o, i32 -2
  store i64 %lnd9p, i64* %lnd9q, !tbaa !2
  %lnd9s = load i64, i64* %R1_Var
  %lnd9r = load i64*, i64** %Sp_Var
  %lnd9t = getelementptr inbounds i64, i64* %lnd9r, i32 -1
  store i64 %lnd9s, i64* %lnd9t, !tbaa !2
  %lnd9v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5Q_info$def to i64
  %lnd9u = load i64*, i64** %Sp_Var
  %lnd9w = getelementptr inbounds i64, i64* %lnd9u, i32 -4
  store i64 %lnd9v, i64* %lnd9w, !tbaa !2
  %lnd9z = load i64, i64* %R1_Var
  %lnd9A = add i64 %lnd9z, 16
  %lnd9B = inttoptr i64 %lnd9A to i64*
  %lnd9C = load i64, i64* %lnd9B, !tbaa !4
  store i64 %lnd9C, i64* %ls7E0
  %lnd9F = load i64, i64* %R1_Var
  %lnd9G = add i64 %lnd9F, 24
  %lnd9H = inttoptr i64 %lnd9G to i64*
  %lnd9I = load i64, i64* %lnd9H, !tbaa !4
  store i64 %lnd9I, i64* %R1_Var
  %lnd9K = load i64, i64* %ls7E0
  %lnd9J = load i64*, i64** %Sp_Var
  %lnd9L = getelementptr inbounds i64, i64* %lnd9J, i32 -3
  store i64 %lnd9K, i64* %lnd9L, !tbaa !2
  %lnd9M = load i64*, i64** %Sp_Var
  %lnd9N = getelementptr inbounds i64, i64* %lnd9M, i32 -4
  %lnd9O = ptrtoint i64* %lnd9N to i64
  %lnd9P = inttoptr i64 %lnd9O to i64*
  store i64* %lnd9P, i64** %Sp_Var
  %lnd9Q = load i64, i64* %R1_Var
  %lnd9R = and i64 %lnd9Q, 7
  %lnd9S = icmp ne i64 %lnd9R, 0
  br i1 %lnd9S, label %ud6f, label %cd5R
cd5R:
  %lnd9U = load i64, i64* %R1_Var
  %lnd9V = inttoptr i64 %lnd9U to i64*
  %lnd9W = load i64, i64* %lnd9V, !tbaa !4
  %lnd9X = inttoptr i64 %lnd9W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd9Y = load i64*, i64** %Sp_Var
  %lnd9Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd9X( i64* %Base_Arg, i64* %lnd9Y, i64* %Hp_Arg, i64 %lnd9Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6f:
  %lnda0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5Q_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnda1 = load i64*, i64** %Sp_Var
  %lnda2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnda0( i64* %Base_Arg, i64* %lnda1, i64* %Hp_Arg, i64 %lnda2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd68:
  %lnda3 = load i64, i64* %R1_Var
  store i64 %lnda3, i64* %R1_Var
  %lnda4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnda5 = bitcast i64* %lnda4 to i64*
  %lnda6 = load i64, i64* %lnda5, !tbaa !5
  %lnda7 = inttoptr i64 %lnda6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnda8 = load i64*, i64** %Sp_Var
  %lnda9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnda7( i64* %Base_Arg, i64* %lnda8, i64* %Hp_Arg, i64 %lnda9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd5Q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5Q_info$def to i8*)
define internal ghccc void @cd5Q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ndaa:
  %ls7Ea = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd5Q
cd5Q:
  %lndab = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5W_info$def to i64
  %lndac = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndab, i64* %lndac, !tbaa !2
  %lndaf = load i64, i64* %R1_Var
  %lndag = add i64 %lndaf, 7
  %lndah = inttoptr i64 %lndag to double*
  %lndai = load double, double* %lndah, !tbaa !4
  store double %lndai, double* %ls7Ea
  %lndaj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lndak = bitcast i64* %lndaj to i64*
  %lndal = load i64, i64* %lndak, !tbaa !2
  store i64 %lndal, i64* %R1_Var
  %lndam = load double, double* %ls7Ea
  %lndan = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lndao = bitcast i64* %lndan to double*
  store double %lndam, double* %lndao, !tbaa !2
  %lndap = load i64, i64* %R1_Var
  %lndaq = and i64 %lndap, 7
  %lndar = icmp ne i64 %lndaq, 0
  br i1 %lndar, label %ud6e, label %cd5X
cd5X:
  %lndat = load i64, i64* %R1_Var
  %lndau = inttoptr i64 %lndat to i64*
  %lndav = load i64, i64* %lndau, !tbaa !4
  %lndaw = inttoptr i64 %lndav to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndax = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndaw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndax, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6e:
  %lnday = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5W_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndaz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnday( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndaz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd5W_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5W_info$def to i8*)
define internal ghccc void @cd5W_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ndaA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ee = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd5W
cd5W:
  %lndaB = load i64*, i64** %Hp_Var
  %lndaC = getelementptr inbounds i64, i64* %lndaB, i32 2
  %lndaD = ptrtoint i64* %lndaC to i64
  %lndaE = inttoptr i64 %lndaD to i64*
  store i64* %lndaE, i64** %Hp_Var
  %lndaF = load i64*, i64** %Hp_Var
  %lndaG = ptrtoint i64* %lndaF to i64
  %lndaH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndaI = bitcast i64* %lndaH to i64*
  %lndaJ = load i64, i64* %lndaI, !tbaa !5
  %lndaK = icmp ugt i64 %lndaG, %lndaJ
  %lndaL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndaK, i1 0 )
  br i1 %lndaL, label %cd6d, label %cd6c
cd6c:
  %lndaM = load i64*, i64** %Sp_Var
  %lndaN = getelementptr inbounds i64, i64* %lndaM, i32 1
  %lndaO = bitcast i64* %lndaN to double*
  %lndaP = load double, double* %lndaO, !tbaa !2
  %lndaS = load i64, i64* %R1_Var
  %lndaT = add i64 %lndaS, 7
  %lndaU = inttoptr i64 %lndaT to double*
  %lndaV = load double, double* %lndaU, !tbaa !4
  %lndaW = fmul double %lndaV, 0x3EB0C6F7A0B5ED8D
  %lndaX = fadd double %lndaP, %lndaW
  store double %lndaX, double* %ls7Ee
  %lndaZ = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndaY = load i64*, i64** %Hp_Var
  %lndb0 = getelementptr inbounds i64, i64* %lndaY, i32 -1
  store i64 %lndaZ, i64* %lndb0, !tbaa !3
  %lndb2 = load double, double* %ls7Ee
  %lndb1 = load i64*, i64** %Hp_Var
  %lndb3 = getelementptr inbounds i64, i64* %lndb1, i32 0
  %lndb4 = bitcast i64* %lndb3 to double*
  store double %lndb2, double* %lndb4, !tbaa !3
  %lndb6 = load i64*, i64** %Hp_Var
  %lndb7 = ptrtoint i64* %lndb6 to i64
  %lndb8 = add i64 %lndb7, -7
  store i64 %lndb8, i64* %R1_Var
  %lndb9 = load i64*, i64** %Sp_Var
  %lndba = getelementptr inbounds i64, i64* %lndb9, i32 2
  %lndbb = ptrtoint i64* %lndba to i64
  %lndbc = inttoptr i64 %lndbb to i64*
  store i64* %lndbc, i64** %Sp_Var
  %lndbd = load i64*, i64** %Sp_Var
  %lndbe = getelementptr inbounds i64, i64* %lndbd, i32 0
  %lndbf = bitcast i64* %lndbe to i64*
  %lndbg = load i64, i64* %lndbf, !tbaa !2
  %lndbh = inttoptr i64 %lndbg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndbi = load i64*, i64** %Sp_Var
  %lndbj = load i64*, i64** %Hp_Var
  %lndbk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndbh( i64* %Base_Arg, i64* %lndbi, i64* %lndbj, i64 %lndbk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd6d:
  %lndbl = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndbl, !tbaa !5
  %lndbm = load i64, i64* %R1_Var
  store i64 %lndbm, i64* %R1_Var
  %lndbn = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndbo = load i64*, i64** %Sp_Var
  %lndbp = load i64*, i64** %Hp_Var
  %lndbq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndbn( i64* %Base_Arg, i64* %lndbo, i64* %lndbp, i64 %lndbq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7E8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7E8_info$def to i8*)
define internal ghccc void @s7E8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ndbr:
  %ls7DZ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd6n
cd6n:
  %lndbs = load i64*, i64** %Sp_Var
  %lndbt = getelementptr inbounds i64, i64* %lndbs, i32 -4
  %lndbu = ptrtoint i64* %lndbt to i64
  %lndbv = icmp ult i64 %lndbu, %SpLim_Arg
  %lndbw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndbv, i1 0 )
  br i1 %lndbw, label %cd6C, label %cd6D
cd6D:
  %lndby = ptrtoint i8* @stg_upd_frame_info to i64
  %lndbx = load i64*, i64** %Sp_Var
  %lndbz = getelementptr inbounds i64, i64* %lndbx, i32 -2
  store i64 %lndby, i64* %lndbz, !tbaa !2
  %lndbB = load i64, i64* %R1_Var
  %lndbA = load i64*, i64** %Sp_Var
  %lndbC = getelementptr inbounds i64, i64* %lndbA, i32 -1
  store i64 %lndbB, i64* %lndbC, !tbaa !2
  %lndbE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6k_info$def to i64
  %lndbD = load i64*, i64** %Sp_Var
  %lndbF = getelementptr inbounds i64, i64* %lndbD, i32 -4
  store i64 %lndbE, i64* %lndbF, !tbaa !2
  %lndbI = load i64, i64* %R1_Var
  %lndbJ = add i64 %lndbI, 16
  %lndbK = inttoptr i64 %lndbJ to i64*
  %lndbL = load i64, i64* %lndbK, !tbaa !4
  store i64 %lndbL, i64* %ls7DZ
  %lndbO = load i64, i64* %R1_Var
  %lndbP = add i64 %lndbO, 24
  %lndbQ = inttoptr i64 %lndbP to i64*
  %lndbR = load i64, i64* %lndbQ, !tbaa !4
  store i64 %lndbR, i64* %R1_Var
  %lndbT = load i64, i64* %ls7DZ
  %lndbS = load i64*, i64** %Sp_Var
  %lndbU = getelementptr inbounds i64, i64* %lndbS, i32 -3
  store i64 %lndbT, i64* %lndbU, !tbaa !2
  %lndbV = load i64*, i64** %Sp_Var
  %lndbW = getelementptr inbounds i64, i64* %lndbV, i32 -4
  %lndbX = ptrtoint i64* %lndbW to i64
  %lndbY = inttoptr i64 %lndbX to i64*
  store i64* %lndbY, i64** %Sp_Var
  %lndbZ = load i64, i64* %R1_Var
  %lndc0 = and i64 %lndbZ, 7
  %lndc1 = icmp ne i64 %lndc0, 0
  br i1 %lndc1, label %ud6J, label %cd6l
cd6l:
  %lndc3 = load i64, i64* %R1_Var
  %lndc4 = inttoptr i64 %lndc3 to i64*
  %lndc5 = load i64, i64* %lndc4, !tbaa !4
  %lndc6 = inttoptr i64 %lndc5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndc7 = load i64*, i64** %Sp_Var
  %lndc8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndc6( i64* %Base_Arg, i64* %lndc7, i64* %Hp_Arg, i64 %lndc8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6J:
  %lndc9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6k_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndca = load i64*, i64** %Sp_Var
  %lndcb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndc9( i64* %Base_Arg, i64* %lndca, i64* %Hp_Arg, i64 %lndcb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd6C:
  %lndcc = load i64, i64* %R1_Var
  store i64 %lndcc, i64* %R1_Var
  %lndcd = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndce = bitcast i64* %lndcd to i64*
  %lndcf = load i64, i64* %lndce, !tbaa !5
  %lndcg = inttoptr i64 %lndcf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndch = load i64*, i64** %Sp_Var
  %lndci = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndcg( i64* %Base_Arg, i64* %lndch, i64* %Hp_Arg, i64 %lndci, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd6k_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6k_info$def to i8*)
define internal ghccc void @cd6k_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ndcj:
  %ls7E3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd6k
cd6k:
  %lndck = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6q_info$def to i64
  %lndcl = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndck, i64* %lndcl, !tbaa !2
  %lndco = load i64, i64* %R1_Var
  %lndcp = add i64 %lndco, 7
  %lndcq = inttoptr i64 %lndcp to double*
  %lndcr = load double, double* %lndcq, !tbaa !4
  store double %lndcr, double* %ls7E3
  %lndcs = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lndct = bitcast i64* %lndcs to i64*
  %lndcu = load i64, i64* %lndct, !tbaa !2
  store i64 %lndcu, i64* %R1_Var
  %lndcv = load double, double* %ls7E3
  %lndcw = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lndcx = bitcast i64* %lndcw to double*
  store double %lndcv, double* %lndcx, !tbaa !2
  %lndcy = load i64, i64* %R1_Var
  %lndcz = and i64 %lndcy, 7
  %lndcA = icmp ne i64 %lndcz, 0
  br i1 %lndcA, label %ud6I, label %cd6r
cd6r:
  %lndcC = load i64, i64* %R1_Var
  %lndcD = inttoptr i64 %lndcC to i64*
  %lndcE = load i64, i64* %lndcD, !tbaa !4
  %lndcF = inttoptr i64 %lndcE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndcG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndcF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndcG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6I:
  %lndcH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6q_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndcI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndcH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndcI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd6q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6q_info$def to i8*)
define internal ghccc void @cd6q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ndcJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7E7 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd6q
cd6q:
  %lndcK = load i64*, i64** %Hp_Var
  %lndcL = getelementptr inbounds i64, i64* %lndcK, i32 2
  %lndcM = ptrtoint i64* %lndcL to i64
  %lndcN = inttoptr i64 %lndcM to i64*
  store i64* %lndcN, i64** %Hp_Var
  %lndcO = load i64*, i64** %Hp_Var
  %lndcP = ptrtoint i64* %lndcO to i64
  %lndcQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndcR = bitcast i64* %lndcQ to i64*
  %lndcS = load i64, i64* %lndcR, !tbaa !5
  %lndcT = icmp ugt i64 %lndcP, %lndcS
  %lndcU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndcT, i1 0 )
  br i1 %lndcU, label %cd6H, label %cd6G
cd6G:
  %lndcV = load i64*, i64** %Sp_Var
  %lndcW = getelementptr inbounds i64, i64* %lndcV, i32 1
  %lndcX = bitcast i64* %lndcW to double*
  %lndcY = load double, double* %lndcX, !tbaa !2
  %lndd1 = load i64, i64* %R1_Var
  %lndd2 = add i64 %lndd1, 7
  %lndd3 = inttoptr i64 %lndd2 to double*
  %lndd4 = load double, double* %lndd3, !tbaa !4
  %lndd5 = fmul double %lndd4, 0x3EB0C6F7A0B5ED8D
  %lndd6 = fadd double %lndcY, %lndd5
  store double %lndd6, double* %ls7E7
  %lndd8 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndd7 = load i64*, i64** %Hp_Var
  %lndd9 = getelementptr inbounds i64, i64* %lndd7, i32 -1
  store i64 %lndd8, i64* %lndd9, !tbaa !3
  %lnddb = load double, double* %ls7E7
  %lndda = load i64*, i64** %Hp_Var
  %lnddc = getelementptr inbounds i64, i64* %lndda, i32 0
  %lnddd = bitcast i64* %lnddc to double*
  store double %lnddb, double* %lnddd, !tbaa !3
  %lnddf = load i64*, i64** %Hp_Var
  %lnddg = ptrtoint i64* %lnddf to i64
  %lnddh = add i64 %lnddg, -7
  store i64 %lnddh, i64* %R1_Var
  %lnddi = load i64*, i64** %Sp_Var
  %lnddj = getelementptr inbounds i64, i64* %lnddi, i32 2
  %lnddk = ptrtoint i64* %lnddj to i64
  %lnddl = inttoptr i64 %lnddk to i64*
  store i64* %lnddl, i64** %Sp_Var
  %lnddm = load i64*, i64** %Sp_Var
  %lnddn = getelementptr inbounds i64, i64* %lnddm, i32 0
  %lnddo = bitcast i64* %lnddn to i64*
  %lnddp = load i64, i64* %lnddo, !tbaa !2
  %lnddq = inttoptr i64 %lnddp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnddr = load i64*, i64** %Sp_Var
  %lndds = load i64*, i64** %Hp_Var
  %lnddt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnddq( i64* %Base_Arg, i64* %lnddr, i64* %lndds, i64 %lnddt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd6H:
  %lnddu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnddu, !tbaa !5
  %lnddv = load i64, i64* %R1_Var
  store i64 %lnddv, i64* %R1_Var
  %lnddw = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnddx = load i64*, i64** %Sp_Var
  %lnddy = load i64*, i64** %Hp_Var
  %lnddz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnddw( i64* %Base_Arg, i64* %lnddx, i64* %lnddy, i64 %lnddz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7En_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7En_info$def to i8*)
define internal ghccc void @s7En_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nddA:
  %ls7DS = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd6K
cd6K:
  %lnddB = load i64*, i64** %Sp_Var
  %lnddC = getelementptr inbounds i64, i64* %lnddB, i32 -6
  %lnddD = ptrtoint i64* %lnddC to i64
  %lnddE = icmp ult i64 %lnddD, %SpLim_Arg
  %lnddF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnddE, i1 0 )
  br i1 %lnddF, label %cd6M, label %cd6N
cd6N:
  %lnddH = ptrtoint i8* @stg_upd_frame_info to i64
  %lnddG = load i64*, i64** %Sp_Var
  %lnddI = getelementptr inbounds i64, i64* %lnddG, i32 -2
  store i64 %lnddH, i64* %lnddI, !tbaa !2
  %lnddK = load i64, i64* %R1_Var
  %lnddJ = load i64*, i64** %Sp_Var
  %lnddL = getelementptr inbounds i64, i64* %lnddJ, i32 -1
  store i64 %lnddK, i64* %lnddL, !tbaa !2
  %lnddN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd58_info$def to i64
  %lnddM = load i64*, i64** %Sp_Var
  %lnddO = getelementptr inbounds i64, i64* %lnddM, i32 -4
  store i64 %lnddN, i64* %lnddO, !tbaa !2
  %lnddR = load i64, i64* %R1_Var
  %lnddS = add i64 %lnddR, 16
  %lnddT = inttoptr i64 %lnddS to i64*
  %lnddU = load i64, i64* %lnddT, !tbaa !4
  store i64 %lnddU, i64* %ls7DS
  %lnddX = load i64, i64* %R1_Var
  %lnddY = add i64 %lnddX, 24
  %lnddZ = inttoptr i64 %lnddY to i64*
  %lnde0 = load i64, i64* %lnddZ, !tbaa !4
  store i64 %lnde0, i64* %R1_Var
  %lnde2 = load i64, i64* %ls7DS
  %lnde1 = load i64*, i64** %Sp_Var
  %lnde3 = getelementptr inbounds i64, i64* %lnde1, i32 -3
  store i64 %lnde2, i64* %lnde3, !tbaa !2
  %lnde4 = load i64*, i64** %Sp_Var
  %lnde5 = getelementptr inbounds i64, i64* %lnde4, i32 -4
  %lnde6 = ptrtoint i64* %lnde5 to i64
  %lnde7 = inttoptr i64 %lnde6 to i64*
  store i64* %lnde7, i64** %Sp_Var
  %lnde8 = load i64, i64* %R1_Var
  %lnde9 = and i64 %lnde8, 7
  %lndea = icmp ne i64 %lnde9, 0
  br i1 %lndea, label %ud6T, label %cd59
cd59:
  %lndec = load i64, i64* %R1_Var
  %lnded = inttoptr i64 %lndec to i64*
  %lndee = load i64, i64* %lnded, !tbaa !4
  %lndef = inttoptr i64 %lndee to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndeg = load i64*, i64** %Sp_Var
  %lndeh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndef( i64* %Base_Arg, i64* %lndeg, i64* %Hp_Arg, i64 %lndeh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6T:
  %lndei = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd58_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndej = load i64*, i64** %Sp_Var
  %lndek = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndei( i64* %Base_Arg, i64* %lndej, i64* %Hp_Arg, i64 %lndek, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd6M:
  %lndel = load i64, i64* %R1_Var
  store i64 %lndel, i64* %R1_Var
  %lndem = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnden = bitcast i64* %lndem to i64*
  %lndeo = load i64, i64* %lnden, !tbaa !5
  %lndep = inttoptr i64 %lndeo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndeq = load i64*, i64** %Sp_Var
  %lnder = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndep( i64* %Base_Arg, i64* %lndeq, i64* %Hp_Arg, i64 %lnder, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd58_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd58_info$def to i8*)
define internal ghccc void @cd58_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ndes:
  %ls7DV = alloca i64, i32 1
  %ls7DW = alloca i64, i32 1
  %ls7DX = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd58
cd58:
  %lndeu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5d_info$def to i64
  %lndet = load i64*, i64** %Sp_Var
  %lndev = getelementptr inbounds i64, i64* %lndet, i32 -2
  store i64 %lndeu, i64* %lndev, !tbaa !2
  %lndey = load i64, i64* %R1_Var
  %lndez = add i64 %lndey, 7
  %lndeA = inttoptr i64 %lndez to i64*
  %lndeB = load i64, i64* %lndeA, !tbaa !4
  store i64 %lndeB, i64* %ls7DV
  %lndeE = load i64, i64* %R1_Var
  %lndeF = add i64 %lndeE, 15
  %lndeG = inttoptr i64 %lndeF to i64*
  %lndeH = load i64, i64* %lndeG, !tbaa !4
  store i64 %lndeH, i64* %ls7DW
  %lndeK = load i64, i64* %R1_Var
  %lndeL = add i64 %lndeK, 23
  %lndeM = inttoptr i64 %lndeL to i64*
  %lndeN = load i64, i64* %lndeM, !tbaa !4
  store i64 %lndeN, i64* %ls7DX
  %lndeO = load i64*, i64** %Sp_Var
  %lndeP = getelementptr inbounds i64, i64* %lndeO, i32 1
  %lndeQ = bitcast i64* %lndeP to i64*
  %lndeR = load i64, i64* %lndeQ, !tbaa !2
  store i64 %lndeR, i64* %R1_Var
  %lndeT = load i64, i64* %ls7DX
  %lndeS = load i64*, i64** %Sp_Var
  %lndeU = getelementptr inbounds i64, i64* %lndeS, i32 -1
  store i64 %lndeT, i64* %lndeU, !tbaa !2
  %lndeW = load i64, i64* %ls7DW
  %lndeV = load i64*, i64** %Sp_Var
  %lndeX = getelementptr inbounds i64, i64* %lndeV, i32 0
  store i64 %lndeW, i64* %lndeX, !tbaa !2
  %lndeZ = load i64, i64* %ls7DV
  %lndeY = load i64*, i64** %Sp_Var
  %lndf0 = getelementptr inbounds i64, i64* %lndeY, i32 1
  store i64 %lndeZ, i64* %lndf0, !tbaa !2
  %lndf1 = load i64*, i64** %Sp_Var
  %lndf2 = getelementptr inbounds i64, i64* %lndf1, i32 -2
  %lndf3 = ptrtoint i64* %lndf2 to i64
  %lndf4 = inttoptr i64 %lndf3 to i64*
  store i64* %lndf4, i64** %Sp_Var
  %lndf5 = load i64, i64* %R1_Var
  %lndf6 = and i64 %lndf5, 7
  %lndf7 = icmp ne i64 %lndf6, 0
  br i1 %lndf7, label %ud6S, label %cd5e
cd5e:
  %lndf9 = load i64, i64* %R1_Var
  %lndfa = inttoptr i64 %lndf9 to i64*
  %lndfb = load i64, i64* %lndfa, !tbaa !4
  %lndfc = inttoptr i64 %lndfb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndfd = load i64*, i64** %Sp_Var
  %lndfe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndfc( i64* %Base_Arg, i64* %lndfd, i64* %Hp_Arg, i64 %lndfe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud6S:
  %lndff = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5d_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndfg = load i64*, i64** %Sp_Var
  %lndfh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndff( i64* %Base_Arg, i64* %lndfg, i64* %Hp_Arg, i64 %lndfh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd5d_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd5d_info$def to i8*)
define internal ghccc void @cd5d_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ndfi:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7DZ = alloca i64, i32 1
  %ls7E0 = alloca i64, i32 1
  %ls7E1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd5d
cd5d:
  %lndfj = load i64*, i64** %Hp_Var
  %lndfk = getelementptr inbounds i64, i64* %lndfj, i32 16
  %lndfl = ptrtoint i64* %lndfk to i64
  %lndfm = inttoptr i64 %lndfl to i64*
  store i64* %lndfm, i64** %Hp_Var
  %lndfn = load i64*, i64** %Hp_Var
  %lndfo = ptrtoint i64* %lndfn to i64
  %lndfp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndfq = bitcast i64* %lndfp to i64*
  %lndfr = load i64, i64* %lndfq, !tbaa !5
  %lndfs = icmp ugt i64 %lndfo, %lndfr
  %lndft = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndfs, i1 0 )
  br i1 %lndft, label %cd6R, label %cd6Q
cd6Q:
  %lndfw = load i64, i64* %R1_Var
  %lndfx = add i64 %lndfw, 7
  %lndfy = inttoptr i64 %lndfx to i64*
  %lndfz = load i64, i64* %lndfy, !tbaa !4
  store i64 %lndfz, i64* %ls7DZ
  %lndfC = load i64, i64* %R1_Var
  %lndfD = add i64 %lndfC, 15
  %lndfE = inttoptr i64 %lndfD to i64*
  %lndfF = load i64, i64* %lndfE, !tbaa !4
  store i64 %lndfF, i64* %ls7E0
  %lndfI = load i64, i64* %R1_Var
  %lndfJ = add i64 %lndfI, 23
  %lndfK = inttoptr i64 %lndfJ to i64*
  %lndfL = load i64, i64* %lndfK, !tbaa !4
  store i64 %lndfL, i64* %ls7E1
  %lndfN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Em_info$def to i64
  %lndfM = load i64*, i64** %Hp_Var
  %lndfO = getelementptr inbounds i64, i64* %lndfM, i32 -15
  store i64 %lndfN, i64* %lndfO, !tbaa !3
  %lndfQ = load i64, i64* %ls7E1
  %lndfP = load i64*, i64** %Hp_Var
  %lndfR = getelementptr inbounds i64, i64* %lndfP, i32 -13
  store i64 %lndfQ, i64* %lndfR, !tbaa !3
  %lndfT = load i64*, i64** %Sp_Var
  %lndfU = getelementptr inbounds i64, i64* %lndfT, i32 1
  %lndfV = bitcast i64* %lndfU to i64*
  %lndfW = load i64, i64* %lndfV, !tbaa !2
  %lndfS = load i64*, i64** %Hp_Var
  %lndfX = getelementptr inbounds i64, i64* %lndfS, i32 -12
  store i64 %lndfW, i64* %lndfX, !tbaa !3
  %lndfZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ef_info$def to i64
  %lndfY = load i64*, i64** %Hp_Var
  %lndg0 = getelementptr inbounds i64, i64* %lndfY, i32 -11
  store i64 %lndfZ, i64* %lndg0, !tbaa !3
  %lndg2 = load i64, i64* %ls7E0
  %lndg1 = load i64*, i64** %Hp_Var
  %lndg3 = getelementptr inbounds i64, i64* %lndg1, i32 -9
  store i64 %lndg2, i64* %lndg3, !tbaa !3
  %lndg5 = load i64*, i64** %Sp_Var
  %lndg6 = getelementptr inbounds i64, i64* %lndg5, i32 2
  %lndg7 = bitcast i64* %lndg6 to i64*
  %lndg8 = load i64, i64* %lndg7, !tbaa !2
  %lndg4 = load i64*, i64** %Hp_Var
  %lndg9 = getelementptr inbounds i64, i64* %lndg4, i32 -8
  store i64 %lndg8, i64* %lndg9, !tbaa !3
  %lndgb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7E8_info$def to i64
  %lndga = load i64*, i64** %Hp_Var
  %lndgc = getelementptr inbounds i64, i64* %lndga, i32 -7
  store i64 %lndgb, i64* %lndgc, !tbaa !3
  %lndge = load i64, i64* %ls7DZ
  %lndgd = load i64*, i64** %Hp_Var
  %lndgf = getelementptr inbounds i64, i64* %lndgd, i32 -5
  store i64 %lndge, i64* %lndgf, !tbaa !3
  %lndgh = load i64*, i64** %Sp_Var
  %lndgi = getelementptr inbounds i64, i64* %lndgh, i32 3
  %lndgj = bitcast i64* %lndgi to i64*
  %lndgk = load i64, i64* %lndgj, !tbaa !2
  %lndgg = load i64*, i64** %Hp_Var
  %lndgl = getelementptr inbounds i64, i64* %lndgg, i32 -4
  store i64 %lndgk, i64* %lndgl, !tbaa !3
  %lndgn = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lndgm = load i64*, i64** %Hp_Var
  %lndgo = getelementptr inbounds i64, i64* %lndgm, i32 -3
  store i64 %lndgn, i64* %lndgo, !tbaa !3
  %lndgq = load i64*, i64** %Hp_Var
  %lndgr = getelementptr inbounds i64, i64* %lndgq, i32 -7
  %lndgs = ptrtoint i64* %lndgr to i64
  %lndgp = load i64*, i64** %Hp_Var
  %lndgt = getelementptr inbounds i64, i64* %lndgp, i32 -2
  store i64 %lndgs, i64* %lndgt, !tbaa !3
  %lndgv = load i64*, i64** %Hp_Var
  %lndgw = getelementptr inbounds i64, i64* %lndgv, i32 -11
  %lndgx = ptrtoint i64* %lndgw to i64
  %lndgu = load i64*, i64** %Hp_Var
  %lndgy = getelementptr inbounds i64, i64* %lndgu, i32 -1
  store i64 %lndgx, i64* %lndgy, !tbaa !3
  %lndgA = load i64*, i64** %Hp_Var
  %lndgB = getelementptr inbounds i64, i64* %lndgA, i32 -15
  %lndgC = ptrtoint i64* %lndgB to i64
  %lndgz = load i64*, i64** %Hp_Var
  %lndgD = getelementptr inbounds i64, i64* %lndgz, i32 0
  store i64 %lndgC, i64* %lndgD, !tbaa !3
  %lndgF = load i64*, i64** %Hp_Var
  %lndgG = ptrtoint i64* %lndgF to i64
  %lndgH = add i64 %lndgG, -23
  store i64 %lndgH, i64* %R1_Var
  %lndgI = load i64*, i64** %Sp_Var
  %lndgJ = getelementptr inbounds i64, i64* %lndgI, i32 4
  %lndgK = ptrtoint i64* %lndgJ to i64
  %lndgL = inttoptr i64 %lndgK to i64*
  store i64* %lndgL, i64** %Sp_Var
  %lndgM = load i64*, i64** %Sp_Var
  %lndgN = getelementptr inbounds i64, i64* %lndgM, i32 0
  %lndgO = bitcast i64* %lndgN to i64*
  %lndgP = load i64, i64* %lndgO, !tbaa !2
  %lndgQ = inttoptr i64 %lndgP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndgR = load i64*, i64** %Sp_Var
  %lndgS = load i64*, i64** %Hp_Var
  %lndgT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndgQ( i64* %Base_Arg, i64* %lndgR, i64* %lndgS, i64 %lndgT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd6R:
  %lndgU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lndgU, !tbaa !5
  %lndgV = load i64, i64* %R1_Var
  store i64 %lndgV, i64* %R1_Var
  %lndgW = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndgX = load i64*, i64** %Sp_Var
  %lndgY = load i64*, i64** %Hp_Var
  %lndgZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndgW( i64* %Base_Arg, i64* %lndgX, i64* %lndgY, i64 %lndgZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwshadowed_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshadowed_info$def to i8*)
define ghccc void @Main_zdwshadowed_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshadowed_info$def to i64)) to i32),i32 0)}>
{
ndh0:
  %ls7DT = alloca i64, i32 1
  %ls7DS = alloca i64, i32 1
  %ls7DR = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd6Z
cd6Z:
  %lndh1 = load i64, i64* %R4_Var
  store i64 %lndh1, i64* %ls7DT
  %lndh2 = load i64, i64* %R3_Var
  store i64 %lndh2, i64* %ls7DS
  %lndh3 = load i64, i64* %R2_Var
  store i64 %lndh3, i64* %ls7DR
  %lndh4 = load i64*, i64** %Sp_Var
  %lndh5 = getelementptr inbounds i64, i64* %lndh4, i32 -2
  %lndh6 = ptrtoint i64* %lndh5 to i64
  %lndh7 = icmp ult i64 %lndh6, %SpLim_Arg
  %lndh8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndh7, i1 0 )
  br i1 %lndh8, label %cd70, label %cd71
cd71:
  %lndh9 = load i64*, i64** %Hp_Var
  %lndha = getelementptr inbounds i64, i64* %lndh9, i32 4
  %lndhb = ptrtoint i64* %lndha to i64
  %lndhc = inttoptr i64 %lndhb to i64*
  store i64* %lndhc, i64** %Hp_Var
  %lndhd = load i64*, i64** %Hp_Var
  %lndhe = ptrtoint i64* %lndhd to i64
  %lndhf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndhg = bitcast i64* %lndhf to i64*
  %lndhh = load i64, i64* %lndhg, !tbaa !5
  %lndhi = icmp ugt i64 %lndhe, %lndhh
  %lndhj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndhi, i1 0 )
  br i1 %lndhj, label %cd73, label %cd72
cd72:
  %lndhl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7En_info$def to i64
  %lndhk = load i64*, i64** %Hp_Var
  %lndhm = getelementptr inbounds i64, i64* %lndhk, i32 -3
  store i64 %lndhl, i64* %lndhm, !tbaa !3
  %lndho = load i64, i64* %ls7DS
  %lndhn = load i64*, i64** %Hp_Var
  %lndhp = getelementptr inbounds i64, i64* %lndhn, i32 -1
  store i64 %lndho, i64* %lndhp, !tbaa !3
  %lndhr = load i64, i64* %ls7DR
  %lndhq = load i64*, i64** %Hp_Var
  %lndhs = getelementptr inbounds i64, i64* %lndhq, i32 0
  store i64 %lndhr, i64* %lndhs, !tbaa !3
  %lndhu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6U_info$def to i64
  %lndht = load i64*, i64** %Sp_Var
  %lndhv = getelementptr inbounds i64, i64* %lndht, i32 -2
  store i64 %lndhu, i64* %lndhv, !tbaa !2
  %lndhw = load i64, i64* %ls7DS
  store i64 %lndhw, i64* %R4_Var
  %lndhx = load i64*, i64** %Hp_Var
  %lndhy = getelementptr inbounds i64, i64* %lndhx, i32 -3
  %lndhz = ptrtoint i64* %lndhy to i64
  store i64 %lndhz, i64* %R3_Var
  %lndhA = ptrtoint %Main_testspheres_closure_struct* @Main_testspheres_closure$def to i64
  %lndhB = add i64 %lndhA, 2
  store i64 %lndhB, i64* %R2_Var
  %lndhD = load i64, i64* %ls7DT
  %lndhC = load i64*, i64** %Sp_Var
  %lndhE = getelementptr inbounds i64, i64* %lndhC, i32 -1
  store i64 %lndhD, i64* %lndhE, !tbaa !2
  %lndhF = load i64*, i64** %Sp_Var
  %lndhG = getelementptr inbounds i64, i64* %lndhF, i32 -2
  %lndhH = ptrtoint i64* %lndhG to i64
  %lndhI = inttoptr i64 %lndhH to i64*
  store i64* %lndhI, i64** %Sp_Var
  %lndhJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndhK = load i64*, i64** %Sp_Var
  %lndhL = load i64*, i64** %Hp_Var
  %lndhM = load i64, i64* %R1_Var
  %lndhN = load i64, i64* %R2_Var
  %lndhO = load i64, i64* %R3_Var
  %lndhP = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndhJ( i64* %Base_Arg, i64* %lndhK, i64* %lndhL, i64 %lndhM, i64 %lndhN, i64 %lndhO, i64 %lndhP, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd73:
  %lndhQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lndhQ, !tbaa !5
  br label %cd70
cd70:
  %lndhR = load i64, i64* %ls7DT
  store i64 %lndhR, i64* %R4_Var
  %lndhS = load i64, i64* %ls7DS
  store i64 %lndhS, i64* %R3_Var
  %lndhT = load i64, i64* %ls7DR
  store i64 %lndhT, i64* %R2_Var
  %lndhU = ptrtoint %Main_zdwshadowed_closure_struct* @Main_zdwshadowed_closure$def to i64
  store i64 %lndhU, i64* %R1_Var
  %lndhV = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndhW = bitcast i64* %lndhV to i64*
  %lndhX = load i64, i64* %lndhW, !tbaa !5
  %lndhY = inttoptr i64 %lndhX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndhZ = load i64*, i64** %Sp_Var
  %lndi0 = load i64*, i64** %Hp_Var
  %lndi1 = load i64, i64* %R1_Var
  %lndi2 = load i64, i64* %R2_Var
  %lndi3 = load i64, i64* %R3_Var
  %lndi4 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndhY( i64* %Base_Arg, i64* %lndhZ, i64* %lndi0, i64 %lndi1, i64 %lndi2, i64 %lndi3, i64 %lndi4, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd6U_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6U_info$def to i8*)
define internal ghccc void @cd6U_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ndi5:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cd6U
cd6U:
  %lndi6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6W_info$def to i64
  %lndi7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndi6, i64* %lndi7, !tbaa !2
  %lndi8 = load i64, i64* %R1_Var
  store i64 %lndi8, i64* %R1_Var
  %lndi9 = load i64, i64* %R1_Var
  %lndia = and i64 %lndi9, 7
  %lndib = icmp ne i64 %lndia, 0
  br i1 %lndib, label %ud78, label %cd6X
cd6X:
  %lndid = load i64, i64* %R1_Var
  %lndie = inttoptr i64 %lndid to i64*
  %lndif = load i64, i64* %lndie, !tbaa !4
  %lndig = inttoptr i64 %lndif to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndih = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndig( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndih, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud78:
  %lndii = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6W_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndij = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndii( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndij, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd6W_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd6W_info$def to i8*)
define internal ghccc void @cd6W_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ndik:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cd6W
cd6W:
  %lndil = load i64*, i64** %Sp_Var
  %lndim = getelementptr inbounds i64, i64* %lndil, i32 1
  %lndin = bitcast i64* %lndim to i64*
  %lndio = load i64, i64* %lndin, !tbaa !2
  store i64 %lndio, i64* %R2_Var
  %lndip = load i64, i64* %R1_Var
  store i64 %lndip, i64* %R1_Var
  %lndiq = load i64*, i64** %Sp_Var
  %lndir = getelementptr inbounds i64, i64* %lndiq, i32 2
  %lndis = ptrtoint i64* %lndir to i64
  %lndit = inttoptr i64 %lndis to i64*
  store i64* %lndit, i64** %Sp_Var
  %lndiu = load i64*, i64** %Sp_Var
  %lndiv = getelementptr inbounds i64, i64* %lndiu, i32 0
  %lndiw = bitcast i64* %lndiv to i64*
  %lndix = load i64, i64* %lndiw, !tbaa !2
  %lndiy = inttoptr i64 %lndix to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndiz = load i64*, i64** %Sp_Var
  %lndiA = load i64, i64* %R1_Var
  %lndiB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndiy( i64* %Base_Arg, i64* %lndiz, i64* %Hp_Arg, i64 %lndiA, i64 %lndiB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_shadowed_closure_struct = type <{i64, i64}>
@Main_shadowed_closure$def = internal global %Main_shadowed_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shadowed_info$def to i64), i64 0}>
@Main_shadowed_closure = alias i8, bitcast (%Main_shadowed_closure_struct* @Main_shadowed_closure$def to i8*)
@Main_shadowed_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shadowed_info$def to i8*)
define ghccc void @Main_shadowed_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 12884901911, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshadowed_closure_struct* @Main_zdwshadowed_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shadowed_info$def to i64)) to i32),i32 0)}>
{
ndiP:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdiJ
cdiJ:
  %lndiQ = load i64*, i64** %Sp_Var
  %lndiR = getelementptr inbounds i64, i64* %lndiQ, i32 -1
  %lndiS = ptrtoint i64* %lndiR to i64
  %lndiT = icmp ult i64 %lndiS, %SpLim_Arg
  %lndiU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndiT, i1 0 )
  br i1 %lndiU, label %cdiK, label %cdiL
cdiL:
  %lndiW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdiG_info$def to i64
  %lndiV = load i64*, i64** %Sp_Var
  %lndiX = getelementptr inbounds i64, i64* %lndiV, i32 -1
  store i64 %lndiW, i64* %lndiX, !tbaa !2
  %lndiY = load i64, i64* %R4_Var
  store i64 %lndiY, i64* %R4_Var
  %lndiZ = load i64, i64* %R3_Var
  store i64 %lndiZ, i64* %R3_Var
  %lndj0 = load i64, i64* %R2_Var
  store i64 %lndj0, i64* %R2_Var
  %lndj1 = load i64*, i64** %Sp_Var
  %lndj2 = getelementptr inbounds i64, i64* %lndj1, i32 -1
  %lndj3 = ptrtoint i64* %lndj2 to i64
  %lndj4 = inttoptr i64 %lndj3 to i64*
  store i64* %lndj4, i64** %Sp_Var
  %lndj5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshadowed_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndj6 = load i64*, i64** %Sp_Var
  %lndj7 = load i64, i64* %R1_Var
  %lndj8 = load i64, i64* %R2_Var
  %lndj9 = load i64, i64* %R3_Var
  %lndja = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndj5( i64* %Base_Arg, i64* %lndj6, i64* %Hp_Arg, i64 %lndj7, i64 %lndj8, i64 %lndj9, i64 %lndja, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdiK:
  %lndjb = load i64, i64* %R4_Var
  store i64 %lndjb, i64* %R4_Var
  %lndjc = load i64, i64* %R3_Var
  store i64 %lndjc, i64* %R3_Var
  %lndjd = load i64, i64* %R2_Var
  store i64 %lndjd, i64* %R2_Var
  %lndje = ptrtoint %Main_shadowed_closure_struct* @Main_shadowed_closure$def to i64
  store i64 %lndje, i64* %R1_Var
  %lndjf = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndjg = bitcast i64* %lndjf to i64*
  %lndjh = load i64, i64* %lndjg, !tbaa !5
  %lndji = inttoptr i64 %lndjh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndjj = load i64*, i64** %Sp_Var
  %lndjk = load i64, i64* %R1_Var
  %lndjl = load i64, i64* %R2_Var
  %lndjm = load i64, i64* %R3_Var
  %lndjn = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndji( i64* %Base_Arg, i64* %lndjj, i64* %Hp_Arg, i64 %lndjk, i64 %lndjl, i64 %lndjm, i64 %lndjn, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdiG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdiG_info$def to i8*)
define internal ghccc void @cdiG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ndjo:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cdiG
cdiG:
  %lndjp = load i64*, i64** %Hp_Var
  %lndjq = getelementptr inbounds i64, i64* %lndjp, i32 3
  %lndjr = ptrtoint i64* %lndjq to i64
  %lndjs = inttoptr i64 %lndjr to i64*
  store i64* %lndjs, i64** %Hp_Var
  %lndjt = load i64*, i64** %Hp_Var
  %lndju = ptrtoint i64* %lndjt to i64
  %lndjv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndjw = bitcast i64* %lndjv to i64*
  %lndjx = load i64, i64* %lndjw, !tbaa !5
  %lndjy = icmp ugt i64 %lndju, %lndjx
  %lndjz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndjy, i1 0 )
  br i1 %lndjz, label %cdiO, label %cdiN
cdiN:
  %lndjB = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lndjA = load i64*, i64** %Hp_Var
  %lndjC = getelementptr inbounds i64, i64* %lndjA, i32 -2
  store i64 %lndjB, i64* %lndjC, !tbaa !3
  %lndjE = load i64, i64* %R1_Var
  %lndjD = load i64*, i64** %Hp_Var
  %lndjF = getelementptr inbounds i64, i64* %lndjD, i32 -1
  store i64 %lndjE, i64* %lndjF, !tbaa !3
  %lndjH = load i64, i64* %R2_Var
  %lndjG = load i64*, i64** %Hp_Var
  %lndjI = getelementptr inbounds i64, i64* %lndjG, i32 0
  store i64 %lndjH, i64* %lndjI, !tbaa !3
  %lndjK = load i64*, i64** %Hp_Var
  %lndjL = ptrtoint i64* %lndjK to i64
  %lndjM = add i64 %lndjL, -15
  store i64 %lndjM, i64* %R1_Var
  %lndjN = load i64*, i64** %Sp_Var
  %lndjO = getelementptr inbounds i64, i64* %lndjN, i32 1
  %lndjP = ptrtoint i64* %lndjO to i64
  %lndjQ = inttoptr i64 %lndjP to i64*
  store i64* %lndjQ, i64** %Sp_Var
  %lndjR = load i64*, i64** %Sp_Var
  %lndjS = getelementptr inbounds i64, i64* %lndjR, i32 0
  %lndjT = bitcast i64* %lndjS to i64*
  %lndjU = load i64, i64* %lndjT, !tbaa !2
  %lndjV = inttoptr i64 %lndjU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndjW = load i64*, i64** %Sp_Var
  %lndjX = load i64*, i64** %Hp_Var
  %lndjY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndjV( i64* %Base_Arg, i64* %lndjW, i64* %lndjX, i64 %lndjY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdiO:
  %lndjZ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lndjZ, !tbaa !5
  %lndk0 = load i64, i64* %R2_Var
  store i64 %lndk0, i64* %R2_Var
  %lndk1 = load i64, i64* %R1_Var
  store i64 %lndk1, i64* %R1_Var
  %lndk2 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndk3 = load i64*, i64** %Sp_Var
  %lndk4 = load i64*, i64** %Hp_Var
  %lndk5 = load i64, i64* %R1_Var
  %lndk6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndk2( i64* %Base_Arg, i64* %lndk3, i64* %lndk4, i64 %lndk5, i64 %lndk6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwlightray_closure_struct = type <{i64, i64}>
@Main_zdwlightray_closure$def = internal global %Main_zdwlightray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightray_info$def to i64), i64 0}>
@Main_zdwlightray_closure = alias i8, bitcast (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i8*)
@s7EE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7EE_info$def to i8*)
define internal ghccc void @s7EE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ndDo:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdkh
cdkh:
  %lndDp = load i64*, i64** %Sp_Var
  %lndDq = getelementptr inbounds i64, i64* %lndDp, i32 -3
  %lndDr = ptrtoint i64* %lndDq to i64
  %lndDs = icmp ult i64 %lndDr, %SpLim_Arg
  %lndDt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndDs, i1 0 )
  br i1 %lndDt, label %cdki, label %cdkj
cdkj:
  %lndDv = ptrtoint i8* @stg_upd_frame_info to i64
  %lndDu = load i64*, i64** %Sp_Var
  %lndDw = getelementptr inbounds i64, i64* %lndDu, i32 -2
  store i64 %lndDv, i64* %lndDw, !tbaa !2
  %lndDy = load i64, i64* %R1_Var
  %lndDx = load i64*, i64** %Sp_Var
  %lndDz = getelementptr inbounds i64, i64* %lndDx, i32 -1
  store i64 %lndDy, i64* %lndDz, !tbaa !2
  %lndDB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkf_info$def to i64
  %lndDA = load i64*, i64** %Sp_Var
  %lndDC = getelementptr inbounds i64, i64* %lndDA, i32 -3
  store i64 %lndDB, i64* %lndDC, !tbaa !2
  %lndDF = load i64, i64* %R1_Var
  %lndDG = add i64 %lndDF, 24
  %lndDH = inttoptr i64 %lndDG to i64*
  %lndDI = load i64, i64* %lndDH, !tbaa !4
  store i64 %lndDI, i64* %R3_Var
  %lndDL = load i64, i64* %R1_Var
  %lndDM = add i64 %lndDL, 16
  %lndDN = inttoptr i64 %lndDM to i64*
  %lndDO = load i64, i64* %lndDN, !tbaa !4
  store i64 %lndDO, i64* %R2_Var
  %lndDP = load i64*, i64** %Sp_Var
  %lndDQ = getelementptr inbounds i64, i64* %lndDP, i32 -3
  %lndDR = ptrtoint i64* %lndDQ to i64
  %lndDS = inttoptr i64 %lndDR to i64*
  store i64* %lndDS, i64** %Sp_Var
  %lndDT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightdirection_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndDU = load i64*, i64** %Sp_Var
  %lndDV = load i64, i64* %R1_Var
  %lndDW = load i64, i64* %R2_Var
  %lndDX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndDT( i64* %Base_Arg, i64* %lndDU, i64* %Hp_Arg, i64 %lndDV, i64 %lndDW, i64 %lndDX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdki:
  %lndDY = load i64, i64* %R1_Var
  store i64 %lndDY, i64* %R1_Var
  %lndDZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndE0 = bitcast i64* %lndDZ to i64*
  %lndE1 = load i64, i64* %lndE0, !tbaa !5
  %lndE2 = inttoptr i64 %lndE1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndE3 = load i64*, i64** %Sp_Var
  %lndE4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndE2( i64* %Base_Arg, i64* %lndE3, i64* %Hp_Arg, i64 %lndE4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkf_info$def to i8*)
define internal ghccc void @cdkf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ndE5:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkf
cdkf:
  %lndE6 = load i64, i64* %R1_Var
  %lndE7 = and i64 %lndE6, -8
  store i64 %lndE7, i64* %R1_Var
  %lndE8 = load i64*, i64** %Sp_Var
  %lndE9 = getelementptr inbounds i64, i64* %lndE8, i32 1
  %lndEa = ptrtoint i64* %lndE9 to i64
  %lndEb = inttoptr i64 %lndEa to i64*
  store i64* %lndEb, i64** %Sp_Var
  %lndEd = load i64, i64* %R1_Var
  %lndEe = inttoptr i64 %lndEd to i64*
  %lndEf = load i64, i64* %lndEe, !tbaa !4
  %lndEg = inttoptr i64 %lndEf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndEh = load i64*, i64** %Sp_Var
  %lndEi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEg( i64* %Base_Arg, i64* %lndEh, i64* %Hp_Arg, i64 %lndEi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7EN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7EN_info$def to i8*)
define internal ghccc void @s7EN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
ndEj:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkw
cdkw:
  %lndEk = load i64*, i64** %Sp_Var
  %lndEl = getelementptr inbounds i64, i64* %lndEk, i32 -3
  %lndEm = ptrtoint i64* %lndEl to i64
  %lndEn = icmp ult i64 %lndEm, %SpLim_Arg
  %lndEo = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndEn, i1 0 )
  br i1 %lndEo, label %cdkx, label %cdky
cdky:
  %lndEq = ptrtoint i8* @stg_upd_frame_info to i64
  %lndEp = load i64*, i64** %Sp_Var
  %lndEr = getelementptr inbounds i64, i64* %lndEp, i32 -2
  store i64 %lndEq, i64* %lndEr, !tbaa !2
  %lndEt = load i64, i64* %R1_Var
  %lndEs = load i64*, i64** %Sp_Var
  %lndEu = getelementptr inbounds i64, i64* %lndEs, i32 -1
  store i64 %lndEt, i64* %lndEu, !tbaa !2
  %lndEw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkp_info$def to i64
  %lndEv = load i64*, i64** %Sp_Var
  %lndEx = getelementptr inbounds i64, i64* %lndEv, i32 -3
  store i64 %lndEw, i64* %lndEx, !tbaa !2
  %lndEA = load i64, i64* %R1_Var
  %lndEB = add i64 %lndEA, 16
  %lndEC = inttoptr i64 %lndEB to i64*
  %lndED = load i64, i64* %lndEC, !tbaa !4
  store i64 %lndED, i64* %R1_Var
  %lndEE = load i64*, i64** %Sp_Var
  %lndEF = getelementptr inbounds i64, i64* %lndEE, i32 -3
  %lndEG = ptrtoint i64* %lndEF to i64
  %lndEH = inttoptr i64 %lndEG to i64*
  store i64* %lndEH, i64** %Sp_Var
  %lndEI = load i64, i64* %R1_Var
  %lndEJ = and i64 %lndEI, 7
  %lndEK = icmp ne i64 %lndEJ, 0
  br i1 %lndEK, label %udkF, label %cdkq
cdkq:
  %lndEM = load i64, i64* %R1_Var
  %lndEN = inttoptr i64 %lndEM to i64*
  %lndEO = load i64, i64* %lndEN, !tbaa !4
  %lndEP = inttoptr i64 %lndEO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndEQ = load i64*, i64** %Sp_Var
  %lndER = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEP( i64* %Base_Arg, i64* %lndEQ, i64* %Hp_Arg, i64 %lndER, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udkF:
  %lndES = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndET = load i64*, i64** %Sp_Var
  %lndEU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndES( i64* %Base_Arg, i64* %lndET, i64* %Hp_Arg, i64 %lndEU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdkx:
  %lndEV = load i64, i64* %R1_Var
  store i64 %lndEV, i64* %R1_Var
  %lndEW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndEX = bitcast i64* %lndEW to i64*
  %lndEY = load i64, i64* %lndEX, !tbaa !5
  %lndEZ = inttoptr i64 %lndEY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndF0 = load i64*, i64** %Sp_Var
  %lndF1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEZ( i64* %Base_Arg, i64* %lndF0, i64* %Hp_Arg, i64 %lndF1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkp_info$def to i8*)
define internal ghccc void @cdkp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
ndF2:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkp
cdkp:
  %lndF3 = load i64, i64* %R1_Var
  %lndF4 = and i64 %lndF3, 7
  switch i64 %lndF4, label %cdkt [i64 1, label %cdkt
i64 2, label %cdku]
cdkt:
  %lndF7 = load i64, i64* %R1_Var
  %lndF8 = add i64 %lndF7, 15
  %lndF9 = inttoptr i64 %lndF8 to i64*
  %lndFa = load i64, i64* %lndF9, !tbaa !4
  %lndFb = and i64 %lndFa, -8
  store i64 %lndFb, i64* %R1_Var
  %lndFc = load i64*, i64** %Sp_Var
  %lndFd = getelementptr inbounds i64, i64* %lndFc, i32 1
  %lndFe = ptrtoint i64* %lndFd to i64
  %lndFf = inttoptr i64 %lndFe to i64*
  store i64* %lndFf, i64** %Sp_Var
  %lndFh = load i64, i64* %R1_Var
  %lndFi = inttoptr i64 %lndFh to i64*
  %lndFj = load i64, i64* %lndFi, !tbaa !4
  %lndFk = inttoptr i64 %lndFj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndFl = load i64*, i64** %Sp_Var
  %lndFm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndFk( i64* %Base_Arg, i64* %lndFl, i64* %Hp_Arg, i64 %lndFm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdku:
  %lndFp = load i64, i64* %R1_Var
  %lndFq = add i64 %lndFp, 14
  %lndFr = inttoptr i64 %lndFq to i64*
  %lndFs = load i64, i64* %lndFr, !tbaa !4
  %lndFt = and i64 %lndFs, -8
  store i64 %lndFt, i64* %R1_Var
  %lndFu = load i64*, i64** %Sp_Var
  %lndFv = getelementptr inbounds i64, i64* %lndFu, i32 1
  %lndFw = ptrtoint i64* %lndFv to i64
  %lndFx = inttoptr i64 %lndFw to i64*
  store i64* %lndFx, i64** %Sp_Var
  %lndFz = load i64, i64* %R1_Var
  %lndFA = inttoptr i64 %lndFz to i64*
  %lndFB = load i64, i64* %lndFA, !tbaa !4
  %lndFC = inttoptr i64 %lndFB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndFD = load i64*, i64** %Sp_Var
  %lndFE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndFC( i64* %Base_Arg, i64* %lndFD, i64* %Hp_Arg, i64 %lndFE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7FK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7FK_info$def to i8*)
define internal ghccc void @s7FK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
ndFF:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdmK
cdmK:
  %lndFG = load i64*, i64** %Sp_Var
  %lndFH = getelementptr inbounds i64, i64* %lndFG, i32 -5
  %lndFI = ptrtoint i64* %lndFH to i64
  %lndFJ = icmp ult i64 %lndFI, %SpLim_Arg
  %lndFK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndFJ, i1 0 )
  br i1 %lndFK, label %cdmL, label %cdnI
cdnI:
  %lndFM = ptrtoint i8* @stg_upd_frame_info to i64
  %lndFL = load i64*, i64** %Sp_Var
  %lndFN = getelementptr inbounds i64, i64* %lndFL, i32 -2
  store i64 %lndFM, i64* %lndFN, !tbaa !2
  %lndFP = load i64, i64* %R1_Var
  %lndFO = load i64*, i64** %Sp_Var
  %lndFQ = getelementptr inbounds i64, i64* %lndFO, i32 -1
  store i64 %lndFP, i64* %lndFQ, !tbaa !2
  %lndFU = load i64, i64* %R1_Var
  %lndFV = add i64 %lndFU, 24
  %lndFW = inttoptr i64 %lndFV to double*
  %lndFX = load double, double* %lndFW, !tbaa !4
  %lndFR = load i64*, i64** %Sp_Var
  %lndFY = getelementptr inbounds i64, i64* %lndFR, i32 -4
  %lndFZ = bitcast i64* %lndFY to double*
  store double %lndFX, double* %lndFZ, !tbaa !2
  %lndG3 = load i64, i64* %R1_Var
  %lndG4 = add i64 %lndG3, 16
  %lndG5 = inttoptr i64 %lndG4 to i64*
  %lndG6 = load i64, i64* %lndG5, !tbaa !4
  %lndG0 = load i64*, i64** %Sp_Var
  %lndG7 = getelementptr inbounds i64, i64* %lndG0, i32 -3
  store i64 %lndG6, i64* %lndG7, !tbaa !2
  %lndG8 = load i64*, i64** %Sp_Var
  %lndG9 = getelementptr inbounds i64, i64* %lndG8, i32 -4
  %lndGa = ptrtoint i64* %lndG9 to i64
  %lndGb = inttoptr i64 %lndGa to i64*
  store i64* %lndGb, i64** %Sp_Var
  %lndGc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdnh$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGd = load i64*, i64** %Sp_Var
  %lndGe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGc( i64* %Base_Arg, i64* %lndGd, i64* %Hp_Arg, i64 %lndGe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdmL:
  %lndGf = load i64, i64* %R1_Var
  store i64 %lndGf, i64* %R1_Var
  %lndGg = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndGh = bitcast i64* %lndGg to i64*
  %lndGi = load i64, i64* %lndGh, !tbaa !5
  %lndGj = inttoptr i64 %lndGi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGk = load i64*, i64** %Sp_Var
  %lndGl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGj( i64* %Base_Arg, i64* %lndGk, i64* %Hp_Arg, i64 %lndGl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdnh = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdnh$def to i8*)
define internal ghccc void @_cdnh$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ndGm:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdnh
cdnh:
  %lndGo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnj_info$def to i64
  %lndGn = load i64*, i64** %Sp_Var
  %lndGp = getelementptr inbounds i64, i64* %lndGn, i32 -1
  store i64 %lndGo, i64* %lndGp, !tbaa !2
  %lndGq = load i64*, i64** %Sp_Var
  %lndGr = getelementptr inbounds i64, i64* %lndGq, i32 1
  %lndGs = bitcast i64* %lndGr to i64*
  %lndGt = load i64, i64* %lndGs, !tbaa !2
  store i64 %lndGt, i64* %R1_Var
  %lndGu = load i64*, i64** %Sp_Var
  %lndGv = getelementptr inbounds i64, i64* %lndGu, i32 -1
  %lndGw = ptrtoint i64* %lndGv to i64
  %lndGx = inttoptr i64 %lndGw to i64*
  store i64* %lndGx, i64** %Sp_Var
  %lndGy = load i64, i64* %R1_Var
  %lndGz = and i64 %lndGy, 7
  %lndGA = icmp ne i64 %lndGz, 0
  br i1 %lndGA, label %udnO, label %cdnl
cdnl:
  %lndGC = load i64, i64* %R1_Var
  %lndGD = inttoptr i64 %lndGC to i64*
  %lndGE = load i64, i64* %lndGD, !tbaa !4
  %lndGF = inttoptr i64 %lndGE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGG = load i64*, i64** %Sp_Var
  %lndGH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGF( i64* %Base_Arg, i64* %lndGG, i64* %Hp_Arg, i64 %lndGH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udnO:
  %lndGI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGJ = load i64*, i64** %Sp_Var
  %lndGK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGI( i64* %Base_Arg, i64* %lndGJ, i64* %Hp_Arg, i64 %lndGK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdnj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnj_info$def to i8*)
define internal ghccc void @cdnj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ndGL:
  %ls7FW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdnj
cdnj:
  %lndGM = load i64, i64* %R1_Var
  %lndGN = and i64 %lndGM, 7
  switch i64 %lndGN, label %udnP [i64 1, label %udnP
i64 2, label %cdnw]
udnP:
  %lndGO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdmN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndGP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdnw:
  %lndGQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnu_info$def to i64
  %lndGR = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndGQ, i64* %lndGR, !tbaa !2
  %lndGU = load i64, i64* %R1_Var
  %lndGV = add i64 %lndGU, 14
  %lndGW = inttoptr i64 %lndGV to i64*
  %lndGX = load i64, i64* %lndGW, !tbaa !4
  store i64 %lndGX, i64* %ls7FW
  %lndH0 = load i64, i64* %R1_Var
  %lndH1 = add i64 %lndH0, 6
  %lndH2 = inttoptr i64 %lndH1 to i64*
  %lndH3 = load i64, i64* %lndH2, !tbaa !4
  store i64 %lndH3, i64* %R1_Var
  %lndH4 = load i64, i64* %ls7FW
  %lndH5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lndH4, i64* %lndH5, !tbaa !2
  %lndH6 = load i64, i64* %R1_Var
  %lndH7 = and i64 %lndH6, 7
  %lndH8 = icmp ne i64 %lndH7, 0
  br i1 %lndH8, label %udnQ, label %cdnx
cdnx:
  %lndHa = load i64, i64* %R1_Var
  %lndHb = inttoptr i64 %lndHa to i64*
  %lndHc = load i64, i64* %lndHb, !tbaa !4
  %lndHd = inttoptr i64 %lndHc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndHe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udnQ:
  %lndHf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndHg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdnu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnu_info$def to i8*)
define internal ghccc void @cdnu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ndHh:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdnu
cdnu:
  %lndHi = load i64, i64* %R1_Var
  %lndHj = and i64 %lndHi, 7
  switch i64 %lndHj, label %cdnD [i64 4, label %cdnH]
cdnD:
  %lndHl = load i64*, i64** %Sp_Var
  %lndHm = getelementptr inbounds i64, i64* %lndHl, i32 2
  %lndHn = bitcast i64* %lndHm to i64*
  %lndHo = load i64, i64* %lndHn, !tbaa !2
  %lndHk = load i64*, i64** %Sp_Var
  %lndHp = getelementptr inbounds i64, i64* %lndHk, i32 2
  store i64 %lndHo, i64* %lndHp, !tbaa !2
  %lndHq = load i64*, i64** %Sp_Var
  %lndHr = getelementptr inbounds i64, i64* %lndHq, i32 1
  %lndHs = ptrtoint i64* %lndHr to i64
  %lndHt = inttoptr i64 %lndHs to i64*
  store i64* %lndHt, i64** %Sp_Var
  %lndHu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdnh$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHv = load i64*, i64** %Sp_Var
  %lndHw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHu( i64* %Base_Arg, i64* %lndHv, i64* %Hp_Arg, i64 %lndHw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdnH:
  %lndHy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdn1_info$def to i64
  %lndHx = load i64*, i64** %Sp_Var
  %lndHz = getelementptr inbounds i64, i64* %lndHx, i32 0
  store i64 %lndHy, i64* %lndHz, !tbaa !2
  %lndHC = load i64, i64* %R1_Var
  %lndHD = add i64 %lndHC, 4
  %lndHE = inttoptr i64 %lndHD to i64*
  %lndHF = load i64, i64* %lndHE, !tbaa !4
  store i64 %lndHF, i64* %R1_Var
  %lndHG = load i64, i64* %R1_Var
  %lndHH = and i64 %lndHG, 7
  %lndHI = icmp ne i64 %lndHH, 0
  br i1 %lndHI, label %udnR, label %cdn2
cdn2:
  %lndHK = load i64, i64* %R1_Var
  %lndHL = inttoptr i64 %lndHK to i64*
  %lndHM = load i64, i64* %lndHL, !tbaa !4
  %lndHN = inttoptr i64 %lndHM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHO = load i64*, i64** %Sp_Var
  %lndHP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHN( i64* %Base_Arg, i64* %lndHO, i64* %Hp_Arg, i64 %lndHP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udnR:
  %lndHQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdn1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHR = load i64*, i64** %Sp_Var
  %lndHS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHQ( i64* %Base_Arg, i64* %lndHR, i64* %Hp_Arg, i64 %lndHS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdn1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdn1_info$def to i8*)
define internal ghccc void @cdn1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ndHT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lcdn6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdn1
cdn1:
  %lndHU = load i64*, i64** %Hp_Var
  %lndHV = getelementptr inbounds i64, i64* %lndHU, i32 2
  %lndHW = ptrtoint i64* %lndHV to i64
  %lndHX = inttoptr i64 %lndHW to i64*
  store i64* %lndHX, i64** %Hp_Var
  %lndHY = load i64*, i64** %Hp_Var
  %lndHZ = ptrtoint i64* %lndHY to i64
  %lndI0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndI1 = bitcast i64* %lndI0 to i64*
  %lndI2 = load i64, i64* %lndI1, !tbaa !5
  %lndI3 = icmp ugt i64 %lndHZ, %lndI2
  %lndI4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndI3, i1 0 )
  br i1 %lndI4, label %cdnf, label %cdne
cdne:
  %lndI5 = load i64*, i64** %Sp_Var
  %lndI6 = getelementptr inbounds i64, i64* %lndI5, i32 1
  %lndI7 = bitcast i64* %lndI6 to double*
  %lndI8 = load double, double* %lndI7, !tbaa !2
  %lndIb = load i64, i64* %R1_Var
  %lndIc = add i64 %lndIb, 7
  %lndId = inttoptr i64 %lndIc to double*
  %lndIe = load double, double* %lndId, !tbaa !4
  %lndIg = call ccc double (double, double) @llvm.pow.f64( double %lndI8, double %lndIe ) nounwind
  store double %lndIg, double* %lcdn6
  %lndIi = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndIh = load i64*, i64** %Hp_Var
  %lndIj = getelementptr inbounds i64, i64* %lndIh, i32 -1
  store i64 %lndIi, i64* %lndIj, !tbaa !3
  %lndIl = load double, double* %lcdn6
  %lndIk = load i64*, i64** %Hp_Var
  %lndIm = getelementptr inbounds i64, i64* %lndIk, i32 0
  %lndIn = bitcast i64* %lndIm to double*
  store double %lndIl, double* %lndIn, !tbaa !3
  %lndIp = load i64*, i64** %Hp_Var
  %lndIq = ptrtoint i64* %lndIp to i64
  %lndIr = add i64 %lndIq, -7
  store i64 %lndIr, i64* %R1_Var
  %lndIs = load i64*, i64** %Sp_Var
  %lndIt = getelementptr inbounds i64, i64* %lndIs, i32 3
  %lndIu = ptrtoint i64* %lndIt to i64
  %lndIv = inttoptr i64 %lndIu to i64*
  store i64* %lndIv, i64** %Sp_Var
  %lndIw = load i64*, i64** %Sp_Var
  %lndIx = getelementptr inbounds i64, i64* %lndIw, i32 0
  %lndIy = bitcast i64* %lndIx to i64*
  %lndIz = load i64, i64* %lndIy, !tbaa !2
  %lndIA = inttoptr i64 %lndIz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndIB = load i64*, i64** %Sp_Var
  %lndIC = load i64*, i64** %Hp_Var
  %lndID = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndIA( i64* %Base_Arg, i64* %lndIB, i64* %lndIC, i64 %lndID, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdnf:
  %lndIE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndIE, !tbaa !5
  %lndIF = load i64, i64* %R1_Var
  store i64 %lndIF, i64* %R1_Var
  %lndIG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndIH = load i64*, i64** %Sp_Var
  %lndII = load i64*, i64** %Hp_Var
  %lndIJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndIG( i64* %Base_Arg, i64* %lndIH, i64* %lndII, i64 %lndIJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc double @llvm.pow.f64(double, double) align 8
@cdmN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdmN_info$def to i8*)
define internal ghccc void @cdmN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ndIK:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lcdmP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdmN
cdmN:
  %lndIL = load i64*, i64** %Hp_Var
  %lndIM = getelementptr inbounds i64, i64* %lndIL, i32 2
  %lndIN = ptrtoint i64* %lndIM to i64
  %lndIO = inttoptr i64 %lndIN to i64*
  store i64* %lndIO, i64** %Hp_Var
  %lndIP = load i64*, i64** %Hp_Var
  %lndIQ = ptrtoint i64* %lndIP to i64
  %lndIR = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndIS = bitcast i64* %lndIR to i64*
  %lndIT = load i64, i64* %lndIS, !tbaa !5
  %lndIU = icmp ugt i64 %lndIQ, %lndIT
  %lndIV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndIU, i1 0 )
  br i1 %lndIV, label %cdmX, label %cdmW
cdmW:
  %lndIW = load i64*, i64** %Sp_Var
  %lndIX = getelementptr inbounds i64, i64* %lndIW, i32 1
  %lndIY = bitcast i64* %lndIX to double*
  %lndIZ = load double, double* %lndIY, !tbaa !2
  %lndJ0 = call ccc double (double, double) @llvm.pow.f64( double %lndIZ, double 0x4020000000000000 ) nounwind
  store double %lndJ0, double* %lcdmP
  %lndJ2 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndJ1 = load i64*, i64** %Hp_Var
  %lndJ3 = getelementptr inbounds i64, i64* %lndJ1, i32 -1
  store i64 %lndJ2, i64* %lndJ3, !tbaa !3
  %lndJ5 = load double, double* %lcdmP
  %lndJ4 = load i64*, i64** %Hp_Var
  %lndJ6 = getelementptr inbounds i64, i64* %lndJ4, i32 0
  %lndJ7 = bitcast i64* %lndJ6 to double*
  store double %lndJ5, double* %lndJ7, !tbaa !3
  %lndJ9 = load i64*, i64** %Hp_Var
  %lndJa = ptrtoint i64* %lndJ9 to i64
  %lndJb = add i64 %lndJa, -7
  store i64 %lndJb, i64* %R1_Var
  %lndJc = load i64*, i64** %Sp_Var
  %lndJd = getelementptr inbounds i64, i64* %lndJc, i32 3
  %lndJe = ptrtoint i64* %lndJd to i64
  %lndJf = inttoptr i64 %lndJe to i64*
  store i64* %lndJf, i64** %Sp_Var
  %lndJg = load i64*, i64** %Sp_Var
  %lndJh = getelementptr inbounds i64, i64* %lndJg, i32 0
  %lndJi = bitcast i64* %lndJh to i64*
  %lndJj = load i64, i64* %lndJi, !tbaa !2
  %lndJk = inttoptr i64 %lndJj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJl = load i64*, i64** %Sp_Var
  %lndJm = load i64*, i64** %Hp_Var
  %lndJn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJk( i64* %Base_Arg, i64* %lndJl, i64* %lndJm, i64 %lndJn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdmX:
  %lndJo = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndJo, !tbaa !5
  %lndJq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdmN_info$def to i64
  %lndJp = load i64*, i64** %Sp_Var
  %lndJr = getelementptr inbounds i64, i64* %lndJp, i32 0
  store i64 %lndJq, i64* %lndJr, !tbaa !2
  %lndJs = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJt = load i64*, i64** %Sp_Var
  %lndJu = load i64*, i64** %Hp_Var
  %lndJv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJs( i64* %Base_Arg, i64* %lndJt, i64* %lndJu, i64 %lndJv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7GE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7GE_info$def to i8*)
define internal ghccc void @s7GE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ndJw:
  %ls7FJ = alloca i64, i32 1
  %ls7FK = alloca i64, i32 1
  %ls7Fp = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdo0
cdo0:
  %lndJx = load i64*, i64** %Sp_Var
  %lndJy = getelementptr inbounds i64, i64* %lndJx, i32 -7
  %lndJz = ptrtoint i64* %lndJy to i64
  %lndJA = icmp ult i64 %lndJz, %SpLim_Arg
  %lndJB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndJA, i1 0 )
  br i1 %lndJB, label %cdoy, label %cdoz
cdoz:
  %lndJD = ptrtoint i8* @stg_upd_frame_info to i64
  %lndJC = load i64*, i64** %Sp_Var
  %lndJE = getelementptr inbounds i64, i64* %lndJC, i32 -2
  store i64 %lndJD, i64* %lndJE, !tbaa !2
  %lndJG = load i64, i64* %R1_Var
  %lndJF = load i64*, i64** %Sp_Var
  %lndJH = getelementptr inbounds i64, i64* %lndJF, i32 -1
  store i64 %lndJG, i64* %lndJH, !tbaa !2
  %lndJJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnX_info$def to i64
  %lndJI = load i64*, i64** %Sp_Var
  %lndJK = getelementptr inbounds i64, i64* %lndJI, i32 -7
  store i64 %lndJJ, i64* %lndJK, !tbaa !2
  %lndJN = load i64, i64* %R1_Var
  %lndJO = add i64 %lndJN, 16
  %lndJP = inttoptr i64 %lndJO to i64*
  %lndJQ = load i64, i64* %lndJP, !tbaa !4
  store i64 %lndJQ, i64* %ls7FJ
  %lndJT = load i64, i64* %R1_Var
  %lndJU = add i64 %lndJT, 24
  %lndJV = inttoptr i64 %lndJU to i64*
  %lndJW = load i64, i64* %lndJV, !tbaa !4
  store i64 %lndJW, i64* %ls7FK
  %lndJZ = load i64, i64* %R1_Var
  %lndK0 = add i64 %lndJZ, 32
  %lndK1 = inttoptr i64 %lndK0 to i64*
  %lndK2 = load i64, i64* %lndK1, !tbaa !4
  store i64 %lndK2, i64* %ls7Fp
  %lndK5 = load i64, i64* %R1_Var
  %lndK6 = add i64 %lndK5, 48
  %lndK7 = inttoptr i64 %lndK6 to double*
  %lndK8 = load double, double* %lndK7, !tbaa !4
  store double %lndK8, double* %ls7Fc
  %lndKb = load i64, i64* %R1_Var
  %lndKc = add i64 %lndKb, 40
  %lndKd = inttoptr i64 %lndKc to i64*
  %lndKe = load i64, i64* %lndKd, !tbaa !4
  store i64 %lndKe, i64* %R1_Var
  %lndKg = load double, double* %ls7Fc
  %lndKf = load i64*, i64** %Sp_Var
  %lndKh = getelementptr inbounds i64, i64* %lndKf, i32 -6
  %lndKi = bitcast i64* %lndKh to double*
  store double %lndKg, double* %lndKi, !tbaa !2
  %lndKk = load i64, i64* %ls7Fp
  %lndKj = load i64*, i64** %Sp_Var
  %lndKl = getelementptr inbounds i64, i64* %lndKj, i32 -5
  store i64 %lndKk, i64* %lndKl, !tbaa !2
  %lndKn = load i64, i64* %ls7FJ
  %lndKm = load i64*, i64** %Sp_Var
  %lndKo = getelementptr inbounds i64, i64* %lndKm, i32 -4
  store i64 %lndKn, i64* %lndKo, !tbaa !2
  %lndKq = load i64, i64* %ls7FK
  %lndKp = load i64*, i64** %Sp_Var
  %lndKr = getelementptr inbounds i64, i64* %lndKp, i32 -3
  store i64 %lndKq, i64* %lndKr, !tbaa !2
  %lndKs = load i64*, i64** %Sp_Var
  %lndKt = getelementptr inbounds i64, i64* %lndKs, i32 -7
  %lndKu = ptrtoint i64* %lndKt to i64
  %lndKv = inttoptr i64 %lndKu to i64*
  store i64* %lndKv, i64** %Sp_Var
  %lndKw = load i64, i64* %R1_Var
  %lndKx = and i64 %lndKw, 7
  %lndKy = icmp ne i64 %lndKx, 0
  br i1 %lndKy, label %udoH, label %cdnY
cdnY:
  %lndKA = load i64, i64* %R1_Var
  %lndKB = inttoptr i64 %lndKA to i64*
  %lndKC = load i64, i64* %lndKB, !tbaa !4
  %lndKD = inttoptr i64 %lndKC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKE = load i64*, i64** %Sp_Var
  %lndKF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKD( i64* %Base_Arg, i64* %lndKE, i64* %Hp_Arg, i64 %lndKF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udoH:
  %lndKG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKH = load i64*, i64** %Sp_Var
  %lndKI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKG( i64* %Base_Arg, i64* %lndKH, i64* %Hp_Arg, i64 %lndKI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdoy:
  %lndKJ = load i64, i64* %R1_Var
  store i64 %lndKJ, i64* %R1_Var
  %lndKK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndKL = bitcast i64* %lndKK to i64*
  %lndKM = load i64, i64* %lndKL, !tbaa !5
  %lndKN = inttoptr i64 %lndKM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKO = load i64*, i64** %Sp_Var
  %lndKP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKN( i64* %Base_Arg, i64* %lndKO, i64* %Hp_Arg, i64 %lndKP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdnX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdnX_info$def to i8*)
define internal ghccc void @cdnX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
ndKQ:
  %ls7Gs = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdnX
cdnX:
  %lndKR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo3_info$def to i64
  %lndKS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndKR, i64* %lndKS, !tbaa !2
  %lndKV = load i64, i64* %R1_Var
  %lndKW = add i64 %lndKV, 7
  %lndKX = inttoptr i64 %lndKW to double*
  %lndKY = load double, double* %lndKX, !tbaa !4
  store double %lndKY, double* %ls7Gs
  %lndKZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndL0 = bitcast i64* %lndKZ to i64*
  %lndL1 = load i64, i64* %lndL0, !tbaa !2
  store i64 %lndL1, i64* %R1_Var
  %lndL2 = load double, double* %ls7Gs
  %lndL3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndL4 = bitcast i64* %lndL3 to double*
  store double %lndL2, double* %lndL4, !tbaa !2
  %lndL5 = load i64, i64* %R1_Var
  %lndL6 = and i64 %lndL5, 7
  %lndL7 = icmp ne i64 %lndL6, 0
  br i1 %lndL7, label %udoG, label %cdo4
cdo4:
  %lndL9 = load i64, i64* %R1_Var
  %lndLa = inttoptr i64 %lndL9 to i64*
  %lndLb = load i64, i64* %lndLa, !tbaa !4
  %lndLc = inttoptr i64 %lndLb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndLd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udoG:
  %lndLe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndLf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdo3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo3_info$def to i8*)
define internal ghccc void @cdo3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
ndLg:
  %ls7Gu = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdo3
cdo3:
  %lndLh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo8_info$def to i64
  %lndLi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndLh, i64* %lndLi, !tbaa !2
  %lndLl = load i64, i64* %R1_Var
  %lndLm = add i64 %lndLl, 7
  %lndLn = inttoptr i64 %lndLm to double*
  %lndLo = load double, double* %lndLn, !tbaa !4
  store double %lndLo, double* %ls7Gu
  %lndLp = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndLq = bitcast i64* %lndLp to i64*
  %lndLr = load i64, i64* %lndLq, !tbaa !2
  store i64 %lndLr, i64* %R1_Var
  %lndLs = load double, double* %ls7Gu
  %lndLt = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndLu = bitcast i64* %lndLt to double*
  store double %lndLs, double* %lndLu, !tbaa !2
  %lndLv = load i64, i64* %R1_Var
  %lndLw = and i64 %lndLv, 7
  %lndLx = icmp ne i64 %lndLw, 0
  br i1 %lndLx, label %udoI, label %cdo9
cdo9:
  %lndLz = load i64, i64* %R1_Var
  %lndLA = inttoptr i64 %lndLz to i64*
  %lndLB = load i64, i64* %lndLA, !tbaa !4
  %lndLC = inttoptr i64 %lndLB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndLD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udoI:
  %lndLE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndLF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdo8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdo8_info$def to i8*)
define internal ghccc void @cdo8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
ndLG:
  %ls7Gw = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdo8
cdo8:
  %lndLH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdod_info$def to i64
  %lndLI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndLH, i64* %lndLI, !tbaa !2
  %lndLL = load i64, i64* %R1_Var
  %lndLM = add i64 %lndLL, 7
  %lndLN = inttoptr i64 %lndLM to double*
  %lndLO = load double, double* %lndLN, !tbaa !4
  store double %lndLO, double* %ls7Gw
  %lndLP = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndLQ = bitcast i64* %lndLP to i64*
  %lndLR = load i64, i64* %lndLQ, !tbaa !2
  store i64 %lndLR, i64* %R1_Var
  %lndLS = load double, double* %ls7Gw
  %lndLT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndLU = bitcast i64* %lndLT to double*
  store double %lndLS, double* %lndLU, !tbaa !2
  %lndLV = load i64, i64* %R1_Var
  %lndLW = and i64 %lndLV, 7
  %lndLX = icmp ne i64 %lndLW, 0
  br i1 %lndLX, label %udoJ, label %cdoe
cdoe:
  %lndLZ = load i64, i64* %R1_Var
  %lndM0 = inttoptr i64 %lndLZ to i64*
  %lndM1 = load i64, i64* %lndM0, !tbaa !4
  %lndM2 = inttoptr i64 %lndM1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndM3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndM2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndM3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udoJ:
  %lndM4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdod_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndM5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndM4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndM5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdod_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdod_info$def to i8*)
define internal ghccc void @cdod_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
ndM6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Gu = alloca double, i32 1
  %ls7GD = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdod
cdod:
  %lndM7 = load i64*, i64** %Hp_Var
  %lndM8 = getelementptr inbounds i64, i64* %lndM7, i32 2
  %lndM9 = ptrtoint i64* %lndM8 to i64
  %lndMa = inttoptr i64 %lndM9 to i64*
  store i64* %lndMa, i64** %Hp_Var
  %lndMb = load i64*, i64** %Hp_Var
  %lndMc = ptrtoint i64* %lndMb to i64
  %lndMd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndMe = bitcast i64* %lndMd to i64*
  %lndMf = load i64, i64* %lndMe, !tbaa !5
  %lndMg = icmp ugt i64 %lndMc, %lndMf
  %lndMh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndMg, i1 0 )
  br i1 %lndMh, label %cdoF, label %cdoE
cdoE:
  %lndMi = load i64*, i64** %Sp_Var
  %lndMj = getelementptr inbounds i64, i64* %lndMi, i32 4
  %lndMk = bitcast i64* %lndMj to double*
  %lndMl = load double, double* %lndMk, !tbaa !2
  store double %lndMl, double* %ls7Gu
  %lndMm = load i64*, i64** %Sp_Var
  %lndMn = getelementptr inbounds i64, i64* %lndMm, i32 1
  %lndMo = bitcast i64* %lndMn to double*
  %lndMp = load double, double* %lndMo, !tbaa !2
  %lndMq = load i64*, i64** %Sp_Var
  %lndMr = getelementptr inbounds i64, i64* %lndMq, i32 2
  %lndMs = bitcast i64* %lndMr to double*
  %lndMt = load double, double* %lndMs, !tbaa !2
  %lndMu = fmul double %lndMp, %lndMt
  %lndMv = load double, double* %ls7Gu
  %lndMw = fmul double %lndMu, %lndMv
  %lndMx = load i64*, i64** %Sp_Var
  %lndMy = getelementptr inbounds i64, i64* %lndMx, i32 3
  %lndMz = bitcast i64* %lndMy to double*
  %lndMA = load double, double* %lndMz, !tbaa !2
  %lndMD = load i64, i64* %R1_Var
  %lndME = add i64 %lndMD, 7
  %lndMF = inttoptr i64 %lndME to double*
  %lndMG = load double, double* %lndMF, !tbaa !4
  %lndMH = fmul double %lndMA, %lndMG
  %lndMI = load double, double* %ls7Gu
  %lndMJ = fmul double %lndMH, %lndMI
  %lndMK = fadd double %lndMw, %lndMJ
  store double %lndMK, double* %ls7GD
  %lndMM = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndML = load i64*, i64** %Hp_Var
  %lndMN = getelementptr inbounds i64, i64* %lndML, i32 -1
  store i64 %lndMM, i64* %lndMN, !tbaa !3
  %lndMP = load double, double* %ls7GD
  %lndMO = load i64*, i64** %Hp_Var
  %lndMQ = getelementptr inbounds i64, i64* %lndMO, i32 0
  %lndMR = bitcast i64* %lndMQ to double*
  store double %lndMP, double* %lndMR, !tbaa !3
  %lndMT = load i64*, i64** %Hp_Var
  %lndMU = ptrtoint i64* %lndMT to i64
  %lndMV = add i64 %lndMU, -7
  store i64 %lndMV, i64* %R1_Var
  %lndMW = load i64*, i64** %Sp_Var
  %lndMX = getelementptr inbounds i64, i64* %lndMW, i32 5
  %lndMY = ptrtoint i64* %lndMX to i64
  %lndMZ = inttoptr i64 %lndMY to i64*
  store i64* %lndMZ, i64** %Sp_Var
  %lndN0 = load i64*, i64** %Sp_Var
  %lndN1 = getelementptr inbounds i64, i64* %lndN0, i32 0
  %lndN2 = bitcast i64* %lndN1 to i64*
  %lndN3 = load i64, i64* %lndN2, !tbaa !2
  %lndN4 = inttoptr i64 %lndN3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndN5 = load i64*, i64** %Sp_Var
  %lndN6 = load i64*, i64** %Hp_Var
  %lndN7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndN4( i64* %Base_Arg, i64* %lndN5, i64* %lndN6, i64 %lndN7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdoF:
  %lndN8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndN8, !tbaa !5
  %lndN9 = load i64, i64* %R1_Var
  store i64 %lndN9, i64* %R1_Var
  %lndNa = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndNb = load i64*, i64** %Sp_Var
  %lndNc = load i64*, i64** %Hp_Var
  %lndNd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndNa( i64* %Base_Arg, i64* %lndNb, i64* %lndNc, i64 %lndNd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Gq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Gq_info$def to i8*)
define internal ghccc void @s7Gq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ndNe:
  %ls7FI = alloca i64, i32 1
  %ls7FK = alloca i64, i32 1
  %ls7Fo = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdoR
cdoR:
  %lndNf = load i64*, i64** %Sp_Var
  %lndNg = getelementptr inbounds i64, i64* %lndNf, i32 -7
  %lndNh = ptrtoint i64* %lndNg to i64
  %lndNi = icmp ult i64 %lndNh, %SpLim_Arg
  %lndNj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndNi, i1 0 )
  br i1 %lndNj, label %cdpp, label %cdpq
cdpq:
  %lndNl = ptrtoint i8* @stg_upd_frame_info to i64
  %lndNk = load i64*, i64** %Sp_Var
  %lndNm = getelementptr inbounds i64, i64* %lndNk, i32 -2
  store i64 %lndNl, i64* %lndNm, !tbaa !2
  %lndNo = load i64, i64* %R1_Var
  %lndNn = load i64*, i64** %Sp_Var
  %lndNp = getelementptr inbounds i64, i64* %lndNn, i32 -1
  store i64 %lndNo, i64* %lndNp, !tbaa !2
  %lndNr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoO_info$def to i64
  %lndNq = load i64*, i64** %Sp_Var
  %lndNs = getelementptr inbounds i64, i64* %lndNq, i32 -7
  store i64 %lndNr, i64* %lndNs, !tbaa !2
  %lndNv = load i64, i64* %R1_Var
  %lndNw = add i64 %lndNv, 16
  %lndNx = inttoptr i64 %lndNw to i64*
  %lndNy = load i64, i64* %lndNx, !tbaa !4
  store i64 %lndNy, i64* %ls7FI
  %lndNB = load i64, i64* %R1_Var
  %lndNC = add i64 %lndNB, 24
  %lndND = inttoptr i64 %lndNC to i64*
  %lndNE = load i64, i64* %lndND, !tbaa !4
  store i64 %lndNE, i64* %ls7FK
  %lndNH = load i64, i64* %R1_Var
  %lndNI = add i64 %lndNH, 32
  %lndNJ = inttoptr i64 %lndNI to i64*
  %lndNK = load i64, i64* %lndNJ, !tbaa !4
  store i64 %lndNK, i64* %ls7Fo
  %lndNN = load i64, i64* %R1_Var
  %lndNO = add i64 %lndNN, 48
  %lndNP = inttoptr i64 %lndNO to double*
  %lndNQ = load double, double* %lndNP, !tbaa !4
  store double %lndNQ, double* %ls7Fc
  %lndNT = load i64, i64* %R1_Var
  %lndNU = add i64 %lndNT, 40
  %lndNV = inttoptr i64 %lndNU to i64*
  %lndNW = load i64, i64* %lndNV, !tbaa !4
  store i64 %lndNW, i64* %R1_Var
  %lndNY = load double, double* %ls7Fc
  %lndNX = load i64*, i64** %Sp_Var
  %lndNZ = getelementptr inbounds i64, i64* %lndNX, i32 -6
  %lndO0 = bitcast i64* %lndNZ to double*
  store double %lndNY, double* %lndO0, !tbaa !2
  %lndO2 = load i64, i64* %ls7Fo
  %lndO1 = load i64*, i64** %Sp_Var
  %lndO3 = getelementptr inbounds i64, i64* %lndO1, i32 -5
  store i64 %lndO2, i64* %lndO3, !tbaa !2
  %lndO5 = load i64, i64* %ls7FI
  %lndO4 = load i64*, i64** %Sp_Var
  %lndO6 = getelementptr inbounds i64, i64* %lndO4, i32 -4
  store i64 %lndO5, i64* %lndO6, !tbaa !2
  %lndO8 = load i64, i64* %ls7FK
  %lndO7 = load i64*, i64** %Sp_Var
  %lndO9 = getelementptr inbounds i64, i64* %lndO7, i32 -3
  store i64 %lndO8, i64* %lndO9, !tbaa !2
  %lndOa = load i64*, i64** %Sp_Var
  %lndOb = getelementptr inbounds i64, i64* %lndOa, i32 -7
  %lndOc = ptrtoint i64* %lndOb to i64
  %lndOd = inttoptr i64 %lndOc to i64*
  store i64* %lndOd, i64** %Sp_Var
  %lndOe = load i64, i64* %R1_Var
  %lndOf = and i64 %lndOe, 7
  %lndOg = icmp ne i64 %lndOf, 0
  br i1 %lndOg, label %udpy, label %cdoP
cdoP:
  %lndOi = load i64, i64* %R1_Var
  %lndOj = inttoptr i64 %lndOi to i64*
  %lndOk = load i64, i64* %lndOj, !tbaa !4
  %lndOl = inttoptr i64 %lndOk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOm = load i64*, i64** %Sp_Var
  %lndOn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOl( i64* %Base_Arg, i64* %lndOm, i64* %Hp_Arg, i64 %lndOn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udpy:
  %lndOo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOp = load i64*, i64** %Sp_Var
  %lndOq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOo( i64* %Base_Arg, i64* %lndOp, i64* %Hp_Arg, i64 %lndOq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdpp:
  %lndOr = load i64, i64* %R1_Var
  store i64 %lndOr, i64* %R1_Var
  %lndOs = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndOt = bitcast i64* %lndOs to i64*
  %lndOu = load i64, i64* %lndOt, !tbaa !5
  %lndOv = inttoptr i64 %lndOu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOw = load i64*, i64** %Sp_Var
  %lndOx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOv( i64* %Base_Arg, i64* %lndOw, i64* %Hp_Arg, i64 %lndOx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdoO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoO_info$def to i8*)
define internal ghccc void @cdoO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
ndOy:
  %ls7Ge = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdoO
cdoO:
  %lndOz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoU_info$def to i64
  %lndOA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndOz, i64* %lndOA, !tbaa !2
  %lndOD = load i64, i64* %R1_Var
  %lndOE = add i64 %lndOD, 7
  %lndOF = inttoptr i64 %lndOE to double*
  %lndOG = load double, double* %lndOF, !tbaa !4
  store double %lndOG, double* %ls7Ge
  %lndOH = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndOI = bitcast i64* %lndOH to i64*
  %lndOJ = load i64, i64* %lndOI, !tbaa !2
  store i64 %lndOJ, i64* %R1_Var
  %lndOK = load double, double* %ls7Ge
  %lndOL = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndOM = bitcast i64* %lndOL to double*
  store double %lndOK, double* %lndOM, !tbaa !2
  %lndON = load i64, i64* %R1_Var
  %lndOO = and i64 %lndON, 7
  %lndOP = icmp ne i64 %lndOO, 0
  br i1 %lndOP, label %udpx, label %cdoV
cdoV:
  %lndOR = load i64, i64* %R1_Var
  %lndOS = inttoptr i64 %lndOR to i64*
  %lndOT = load i64, i64* %lndOS, !tbaa !4
  %lndOU = inttoptr i64 %lndOT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndOV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udpx:
  %lndOW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndOX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdoU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoU_info$def to i8*)
define internal ghccc void @cdoU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
ndOY:
  %ls7Gg = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdoU
cdoU:
  %lndOZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoZ_info$def to i64
  %lndP0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndOZ, i64* %lndP0, !tbaa !2
  %lndP3 = load i64, i64* %R1_Var
  %lndP4 = add i64 %lndP3, 7
  %lndP5 = inttoptr i64 %lndP4 to double*
  %lndP6 = load double, double* %lndP5, !tbaa !4
  store double %lndP6, double* %ls7Gg
  %lndP7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndP8 = bitcast i64* %lndP7 to i64*
  %lndP9 = load i64, i64* %lndP8, !tbaa !2
  store i64 %lndP9, i64* %R1_Var
  %lndPa = load double, double* %ls7Gg
  %lndPb = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndPc = bitcast i64* %lndPb to double*
  store double %lndPa, double* %lndPc, !tbaa !2
  %lndPd = load i64, i64* %R1_Var
  %lndPe = and i64 %lndPd, 7
  %lndPf = icmp ne i64 %lndPe, 0
  br i1 %lndPf, label %udpz, label %cdp0
cdp0:
  %lndPh = load i64, i64* %R1_Var
  %lndPi = inttoptr i64 %lndPh to i64*
  %lndPj = load i64, i64* %lndPi, !tbaa !4
  %lndPk = inttoptr i64 %lndPj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndPl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndPk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndPl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udpz:
  %lndPm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndPn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndPm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndPn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdoZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdoZ_info$def to i8*)
define internal ghccc void @cdoZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
ndPo:
  %ls7Gi = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdoZ
cdoZ:
  %lndPp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdp4_info$def to i64
  %lndPq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndPp, i64* %lndPq, !tbaa !2
  %lndPt = load i64, i64* %R1_Var
  %lndPu = add i64 %lndPt, 7
  %lndPv = inttoptr i64 %lndPu to double*
  %lndPw = load double, double* %lndPv, !tbaa !4
  store double %lndPw, double* %ls7Gi
  %lndPx = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndPy = bitcast i64* %lndPx to i64*
  %lndPz = load i64, i64* %lndPy, !tbaa !2
  store i64 %lndPz, i64* %R1_Var
  %lndPA = load double, double* %ls7Gi
  %lndPB = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndPC = bitcast i64* %lndPB to double*
  store double %lndPA, double* %lndPC, !tbaa !2
  %lndPD = load i64, i64* %R1_Var
  %lndPE = and i64 %lndPD, 7
  %lndPF = icmp ne i64 %lndPE, 0
  br i1 %lndPF, label %udpA, label %cdp5
cdp5:
  %lndPH = load i64, i64* %R1_Var
  %lndPI = inttoptr i64 %lndPH to i64*
  %lndPJ = load i64, i64* %lndPI, !tbaa !4
  %lndPK = inttoptr i64 %lndPJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndPL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndPK( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndPL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udpA:
  %lndPM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdp4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndPN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndPM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndPN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdp4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdp4_info$def to i8*)
define internal ghccc void @cdp4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
ndPO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Gg = alloca double, i32 1
  %ls7Gp = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdp4
cdp4:
  %lndPP = load i64*, i64** %Hp_Var
  %lndPQ = getelementptr inbounds i64, i64* %lndPP, i32 2
  %lndPR = ptrtoint i64* %lndPQ to i64
  %lndPS = inttoptr i64 %lndPR to i64*
  store i64* %lndPS, i64** %Hp_Var
  %lndPT = load i64*, i64** %Hp_Var
  %lndPU = ptrtoint i64* %lndPT to i64
  %lndPV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndPW = bitcast i64* %lndPV to i64*
  %lndPX = load i64, i64* %lndPW, !tbaa !5
  %lndPY = icmp ugt i64 %lndPU, %lndPX
  %lndPZ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndPY, i1 0 )
  br i1 %lndPZ, label %cdpw, label %cdpv
cdpv:
  %lndQ0 = load i64*, i64** %Sp_Var
  %lndQ1 = getelementptr inbounds i64, i64* %lndQ0, i32 4
  %lndQ2 = bitcast i64* %lndQ1 to double*
  %lndQ3 = load double, double* %lndQ2, !tbaa !2
  store double %lndQ3, double* %ls7Gg
  %lndQ4 = load i64*, i64** %Sp_Var
  %lndQ5 = getelementptr inbounds i64, i64* %lndQ4, i32 1
  %lndQ6 = bitcast i64* %lndQ5 to double*
  %lndQ7 = load double, double* %lndQ6, !tbaa !2
  %lndQ8 = load i64*, i64** %Sp_Var
  %lndQ9 = getelementptr inbounds i64, i64* %lndQ8, i32 2
  %lndQa = bitcast i64* %lndQ9 to double*
  %lndQb = load double, double* %lndQa, !tbaa !2
  %lndQc = fmul double %lndQ7, %lndQb
  %lndQd = load double, double* %ls7Gg
  %lndQe = fmul double %lndQc, %lndQd
  %lndQf = load i64*, i64** %Sp_Var
  %lndQg = getelementptr inbounds i64, i64* %lndQf, i32 3
  %lndQh = bitcast i64* %lndQg to double*
  %lndQi = load double, double* %lndQh, !tbaa !2
  %lndQl = load i64, i64* %R1_Var
  %lndQm = add i64 %lndQl, 7
  %lndQn = inttoptr i64 %lndQm to double*
  %lndQo = load double, double* %lndQn, !tbaa !4
  %lndQp = fmul double %lndQi, %lndQo
  %lndQq = load double, double* %ls7Gg
  %lndQr = fmul double %lndQp, %lndQq
  %lndQs = fadd double %lndQe, %lndQr
  store double %lndQs, double* %ls7Gp
  %lndQu = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndQt = load i64*, i64** %Hp_Var
  %lndQv = getelementptr inbounds i64, i64* %lndQt, i32 -1
  store i64 %lndQu, i64* %lndQv, !tbaa !3
  %lndQx = load double, double* %ls7Gp
  %lndQw = load i64*, i64** %Hp_Var
  %lndQy = getelementptr inbounds i64, i64* %lndQw, i32 0
  %lndQz = bitcast i64* %lndQy to double*
  store double %lndQx, double* %lndQz, !tbaa !3
  %lndQB = load i64*, i64** %Hp_Var
  %lndQC = ptrtoint i64* %lndQB to i64
  %lndQD = add i64 %lndQC, -7
  store i64 %lndQD, i64* %R1_Var
  %lndQE = load i64*, i64** %Sp_Var
  %lndQF = getelementptr inbounds i64, i64* %lndQE, i32 5
  %lndQG = ptrtoint i64* %lndQF to i64
  %lndQH = inttoptr i64 %lndQG to i64*
  store i64* %lndQH, i64** %Sp_Var
  %lndQI = load i64*, i64** %Sp_Var
  %lndQJ = getelementptr inbounds i64, i64* %lndQI, i32 0
  %lndQK = bitcast i64* %lndQJ to i64*
  %lndQL = load i64, i64* %lndQK, !tbaa !2
  %lndQM = inttoptr i64 %lndQL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndQN = load i64*, i64** %Sp_Var
  %lndQO = load i64*, i64** %Hp_Var
  %lndQP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndQM( i64* %Base_Arg, i64* %lndQN, i64* %lndQO, i64 %lndQP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdpw:
  %lndQQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndQQ, !tbaa !5
  %lndQR = load i64, i64* %R1_Var
  store i64 %lndQR, i64* %R1_Var
  %lndQS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndQT = load i64*, i64** %Sp_Var
  %lndQU = load i64*, i64** %Hp_Var
  %lndQV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndQS( i64* %Base_Arg, i64* %lndQT, i64* %lndQU, i64 %lndQV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Gc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Gc_info$def to i8*)
define internal ghccc void @s7Gc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ndQW:
  %ls7FH = alloca i64, i32 1
  %ls7FK = alloca i64, i32 1
  %ls7Fn = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdpI
cdpI:
  %lndQX = load i64*, i64** %Sp_Var
  %lndQY = getelementptr inbounds i64, i64* %lndQX, i32 -7
  %lndQZ = ptrtoint i64* %lndQY to i64
  %lndR0 = icmp ult i64 %lndQZ, %SpLim_Arg
  %lndR1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndR0, i1 0 )
  br i1 %lndR1, label %cdqg, label %cdqh
cdqh:
  %lndR3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lndR2 = load i64*, i64** %Sp_Var
  %lndR4 = getelementptr inbounds i64, i64* %lndR2, i32 -2
  store i64 %lndR3, i64* %lndR4, !tbaa !2
  %lndR6 = load i64, i64* %R1_Var
  %lndR5 = load i64*, i64** %Sp_Var
  %lndR7 = getelementptr inbounds i64, i64* %lndR5, i32 -1
  store i64 %lndR6, i64* %lndR7, !tbaa !2
  %lndR9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpF_info$def to i64
  %lndR8 = load i64*, i64** %Sp_Var
  %lndRa = getelementptr inbounds i64, i64* %lndR8, i32 -7
  store i64 %lndR9, i64* %lndRa, !tbaa !2
  %lndRd = load i64, i64* %R1_Var
  %lndRe = add i64 %lndRd, 16
  %lndRf = inttoptr i64 %lndRe to i64*
  %lndRg = load i64, i64* %lndRf, !tbaa !4
  store i64 %lndRg, i64* %ls7FH
  %lndRj = load i64, i64* %R1_Var
  %lndRk = add i64 %lndRj, 24
  %lndRl = inttoptr i64 %lndRk to i64*
  %lndRm = load i64, i64* %lndRl, !tbaa !4
  store i64 %lndRm, i64* %ls7FK
  %lndRp = load i64, i64* %R1_Var
  %lndRq = add i64 %lndRp, 32
  %lndRr = inttoptr i64 %lndRq to i64*
  %lndRs = load i64, i64* %lndRr, !tbaa !4
  store i64 %lndRs, i64* %ls7Fn
  %lndRv = load i64, i64* %R1_Var
  %lndRw = add i64 %lndRv, 48
  %lndRx = inttoptr i64 %lndRw to double*
  %lndRy = load double, double* %lndRx, !tbaa !4
  store double %lndRy, double* %ls7Fc
  %lndRB = load i64, i64* %R1_Var
  %lndRC = add i64 %lndRB, 40
  %lndRD = inttoptr i64 %lndRC to i64*
  %lndRE = load i64, i64* %lndRD, !tbaa !4
  store i64 %lndRE, i64* %R1_Var
  %lndRG = load double, double* %ls7Fc
  %lndRF = load i64*, i64** %Sp_Var
  %lndRH = getelementptr inbounds i64, i64* %lndRF, i32 -6
  %lndRI = bitcast i64* %lndRH to double*
  store double %lndRG, double* %lndRI, !tbaa !2
  %lndRK = load i64, i64* %ls7Fn
  %lndRJ = load i64*, i64** %Sp_Var
  %lndRL = getelementptr inbounds i64, i64* %lndRJ, i32 -5
  store i64 %lndRK, i64* %lndRL, !tbaa !2
  %lndRN = load i64, i64* %ls7FH
  %lndRM = load i64*, i64** %Sp_Var
  %lndRO = getelementptr inbounds i64, i64* %lndRM, i32 -4
  store i64 %lndRN, i64* %lndRO, !tbaa !2
  %lndRQ = load i64, i64* %ls7FK
  %lndRP = load i64*, i64** %Sp_Var
  %lndRR = getelementptr inbounds i64, i64* %lndRP, i32 -3
  store i64 %lndRQ, i64* %lndRR, !tbaa !2
  %lndRS = load i64*, i64** %Sp_Var
  %lndRT = getelementptr inbounds i64, i64* %lndRS, i32 -7
  %lndRU = ptrtoint i64* %lndRT to i64
  %lndRV = inttoptr i64 %lndRU to i64*
  store i64* %lndRV, i64** %Sp_Var
  %lndRW = load i64, i64* %R1_Var
  %lndRX = and i64 %lndRW, 7
  %lndRY = icmp ne i64 %lndRX, 0
  br i1 %lndRY, label %udqp, label %cdpG
cdpG:
  %lndS0 = load i64, i64* %R1_Var
  %lndS1 = inttoptr i64 %lndS0 to i64*
  %lndS2 = load i64, i64* %lndS1, !tbaa !4
  %lndS3 = inttoptr i64 %lndS2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndS4 = load i64*, i64** %Sp_Var
  %lndS5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndS3( i64* %Base_Arg, i64* %lndS4, i64* %Hp_Arg, i64 %lndS5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqp:
  %lndS6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndS7 = load i64*, i64** %Sp_Var
  %lndS8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndS6( i64* %Base_Arg, i64* %lndS7, i64* %Hp_Arg, i64 %lndS8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdqg:
  %lndS9 = load i64, i64* %R1_Var
  store i64 %lndS9, i64* %R1_Var
  %lndSa = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndSb = bitcast i64* %lndSa to i64*
  %lndSc = load i64, i64* %lndSb, !tbaa !5
  %lndSd = inttoptr i64 %lndSc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndSe = load i64*, i64** %Sp_Var
  %lndSf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndSd( i64* %Base_Arg, i64* %lndSe, i64* %Hp_Arg, i64 %lndSf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdpF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpF_info$def to i8*)
define internal ghccc void @cdpF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
ndSg:
  %ls7G0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdpF
cdpF:
  %lndSh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpL_info$def to i64
  %lndSi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndSh, i64* %lndSi, !tbaa !2
  %lndSl = load i64, i64* %R1_Var
  %lndSm = add i64 %lndSl, 7
  %lndSn = inttoptr i64 %lndSm to double*
  %lndSo = load double, double* %lndSn, !tbaa !4
  store double %lndSo, double* %ls7G0
  %lndSp = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndSq = bitcast i64* %lndSp to i64*
  %lndSr = load i64, i64* %lndSq, !tbaa !2
  store i64 %lndSr, i64* %R1_Var
  %lndSs = load double, double* %ls7G0
  %lndSt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndSu = bitcast i64* %lndSt to double*
  store double %lndSs, double* %lndSu, !tbaa !2
  %lndSv = load i64, i64* %R1_Var
  %lndSw = and i64 %lndSv, 7
  %lndSx = icmp ne i64 %lndSw, 0
  br i1 %lndSx, label %udqo, label %cdpM
cdpM:
  %lndSz = load i64, i64* %R1_Var
  %lndSA = inttoptr i64 %lndSz to i64*
  %lndSB = load i64, i64* %lndSA, !tbaa !4
  %lndSC = inttoptr i64 %lndSB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndSD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndSC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndSD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqo:
  %lndSE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndSF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndSE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndSF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdpL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpL_info$def to i8*)
define internal ghccc void @cdpL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
ndSG:
  %ls7G2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdpL
cdpL:
  %lndSH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpQ_info$def to i64
  %lndSI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndSH, i64* %lndSI, !tbaa !2
  %lndSL = load i64, i64* %R1_Var
  %lndSM = add i64 %lndSL, 7
  %lndSN = inttoptr i64 %lndSM to double*
  %lndSO = load double, double* %lndSN, !tbaa !4
  store double %lndSO, double* %ls7G2
  %lndSP = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndSQ = bitcast i64* %lndSP to i64*
  %lndSR = load i64, i64* %lndSQ, !tbaa !2
  store i64 %lndSR, i64* %R1_Var
  %lndSS = load double, double* %ls7G2
  %lndST = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lndSU = bitcast i64* %lndST to double*
  store double %lndSS, double* %lndSU, !tbaa !2
  %lndSV = load i64, i64* %R1_Var
  %lndSW = and i64 %lndSV, 7
  %lndSX = icmp ne i64 %lndSW, 0
  br i1 %lndSX, label %udqq, label %cdpR
cdpR:
  %lndSZ = load i64, i64* %R1_Var
  %lndT0 = inttoptr i64 %lndSZ to i64*
  %lndT1 = load i64, i64* %lndT0, !tbaa !4
  %lndT2 = inttoptr i64 %lndT1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndT3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndT2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndT3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqq:
  %lndT4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndT5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndT4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndT5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdpQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpQ_info$def to i8*)
define internal ghccc void @cdpQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
ndT6:
  %ls7G4 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdpQ
cdpQ:
  %lndT7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpV_info$def to i64
  %lndT8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndT7, i64* %lndT8, !tbaa !2
  %lndTb = load i64, i64* %R1_Var
  %lndTc = add i64 %lndTb, 7
  %lndTd = inttoptr i64 %lndTc to double*
  %lndTe = load double, double* %lndTd, !tbaa !4
  store double %lndTe, double* %ls7G4
  %lndTf = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndTg = bitcast i64* %lndTf to i64*
  %lndTh = load i64, i64* %lndTg, !tbaa !2
  store i64 %lndTh, i64* %R1_Var
  %lndTi = load double, double* %ls7G4
  %lndTj = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lndTk = bitcast i64* %lndTj to double*
  store double %lndTi, double* %lndTk, !tbaa !2
  %lndTl = load i64, i64* %R1_Var
  %lndTm = and i64 %lndTl, 7
  %lndTn = icmp ne i64 %lndTm, 0
  br i1 %lndTn, label %udqr, label %cdpW
cdpW:
  %lndTp = load i64, i64* %R1_Var
  %lndTq = inttoptr i64 %lndTp to i64*
  %lndTr = load i64, i64* %lndTq, !tbaa !4
  %lndTs = inttoptr i64 %lndTr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndTt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndTs( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndTt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqr:
  %lndTu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndTv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndTu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndTv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdpV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdpV_info$def to i8*)
define internal ghccc void @cdpV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
ndTw:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7G2 = alloca double, i32 1
  %ls7Gb = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdpV
cdpV:
  %lndTx = load i64*, i64** %Hp_Var
  %lndTy = getelementptr inbounds i64, i64* %lndTx, i32 2
  %lndTz = ptrtoint i64* %lndTy to i64
  %lndTA = inttoptr i64 %lndTz to i64*
  store i64* %lndTA, i64** %Hp_Var
  %lndTB = load i64*, i64** %Hp_Var
  %lndTC = ptrtoint i64* %lndTB to i64
  %lndTD = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndTE = bitcast i64* %lndTD to i64*
  %lndTF = load i64, i64* %lndTE, !tbaa !5
  %lndTG = icmp ugt i64 %lndTC, %lndTF
  %lndTH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndTG, i1 0 )
  br i1 %lndTH, label %cdqn, label %cdqm
cdqm:
  %lndTI = load i64*, i64** %Sp_Var
  %lndTJ = getelementptr inbounds i64, i64* %lndTI, i32 4
  %lndTK = bitcast i64* %lndTJ to double*
  %lndTL = load double, double* %lndTK, !tbaa !2
  store double %lndTL, double* %ls7G2
  %lndTM = load i64*, i64** %Sp_Var
  %lndTN = getelementptr inbounds i64, i64* %lndTM, i32 1
  %lndTO = bitcast i64* %lndTN to double*
  %lndTP = load double, double* %lndTO, !tbaa !2
  %lndTQ = load i64*, i64** %Sp_Var
  %lndTR = getelementptr inbounds i64, i64* %lndTQ, i32 2
  %lndTS = bitcast i64* %lndTR to double*
  %lndTT = load double, double* %lndTS, !tbaa !2
  %lndTU = fmul double %lndTP, %lndTT
  %lndTV = load double, double* %ls7G2
  %lndTW = fmul double %lndTU, %lndTV
  %lndTX = load i64*, i64** %Sp_Var
  %lndTY = getelementptr inbounds i64, i64* %lndTX, i32 3
  %lndTZ = bitcast i64* %lndTY to double*
  %lndU0 = load double, double* %lndTZ, !tbaa !2
  %lndU3 = load i64, i64* %R1_Var
  %lndU4 = add i64 %lndU3, 7
  %lndU5 = inttoptr i64 %lndU4 to double*
  %lndU6 = load double, double* %lndU5, !tbaa !4
  %lndU7 = fmul double %lndU0, %lndU6
  %lndU8 = load double, double* %ls7G2
  %lndU9 = fmul double %lndU7, %lndU8
  %lndUa = fadd double %lndTW, %lndU9
  store double %lndUa, double* %ls7Gb
  %lndUc = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndUb = load i64*, i64** %Hp_Var
  %lndUd = getelementptr inbounds i64, i64* %lndUb, i32 -1
  store i64 %lndUc, i64* %lndUd, !tbaa !3
  %lndUf = load double, double* %ls7Gb
  %lndUe = load i64*, i64** %Hp_Var
  %lndUg = getelementptr inbounds i64, i64* %lndUe, i32 0
  %lndUh = bitcast i64* %lndUg to double*
  store double %lndUf, double* %lndUh, !tbaa !3
  %lndUj = load i64*, i64** %Hp_Var
  %lndUk = ptrtoint i64* %lndUj to i64
  %lndUl = add i64 %lndUk, -7
  store i64 %lndUl, i64* %R1_Var
  %lndUm = load i64*, i64** %Sp_Var
  %lndUn = getelementptr inbounds i64, i64* %lndUm, i32 5
  %lndUo = ptrtoint i64* %lndUn to i64
  %lndUp = inttoptr i64 %lndUo to i64*
  store i64* %lndUp, i64** %Sp_Var
  %lndUq = load i64*, i64** %Sp_Var
  %lndUr = getelementptr inbounds i64, i64* %lndUq, i32 0
  %lndUs = bitcast i64* %lndUr to i64*
  %lndUt = load i64, i64* %lndUs, !tbaa !2
  %lndUu = inttoptr i64 %lndUt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndUv = load i64*, i64** %Sp_Var
  %lndUw = load i64*, i64** %Hp_Var
  %lndUx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndUu( i64* %Base_Arg, i64* %lndUv, i64* %lndUw, i64 %lndUx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdqn:
  %lndUy = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndUy, !tbaa !5
  %lndUz = load i64, i64* %R1_Var
  store i64 %lndUz, i64* %R1_Var
  %lndUA = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndUB = load i64*, i64** %Sp_Var
  %lndUC = load i64*, i64** %Hp_Var
  %lndUD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndUA( i64* %Base_Arg, i64* %lndUB, i64* %lndUC, i64 %lndUD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Hd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Hd_info$def to i8*)
define internal ghccc void @s7Hd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
ndUE:
  %ls7Fp = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdqA
cdqA:
  %lndUF = load i64*, i64** %Sp_Var
  %lndUG = getelementptr inbounds i64, i64* %lndUF, i32 -5
  %lndUH = ptrtoint i64* %lndUG to i64
  %lndUI = icmp ult i64 %lndUH, %SpLim_Arg
  %lndUJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndUI, i1 0 )
  br i1 %lndUJ, label %cdqP, label %cdqQ
cdqQ:
  %lndUL = ptrtoint i8* @stg_upd_frame_info to i64
  %lndUK = load i64*, i64** %Sp_Var
  %lndUM = getelementptr inbounds i64, i64* %lndUK, i32 -2
  store i64 %lndUL, i64* %lndUM, !tbaa !2
  %lndUO = load i64, i64* %R1_Var
  %lndUN = load i64*, i64** %Sp_Var
  %lndUP = getelementptr inbounds i64, i64* %lndUN, i32 -1
  store i64 %lndUO, i64* %lndUP, !tbaa !2
  %lndUR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqx_info$def to i64
  %lndUQ = load i64*, i64** %Sp_Var
  %lndUS = getelementptr inbounds i64, i64* %lndUQ, i32 -5
  store i64 %lndUR, i64* %lndUS, !tbaa !2
  %lndUV = load i64, i64* %R1_Var
  %lndUW = add i64 %lndUV, 16
  %lndUX = inttoptr i64 %lndUW to i64*
  %lndUY = load i64, i64* %lndUX, !tbaa !4
  store i64 %lndUY, i64* %ls7Fp
  %lndV1 = load i64, i64* %R1_Var
  %lndV2 = add i64 %lndV1, 32
  %lndV3 = inttoptr i64 %lndV2 to double*
  %lndV4 = load double, double* %lndV3, !tbaa !4
  store double %lndV4, double* %ls7Fc
  %lndV7 = load i64, i64* %R1_Var
  %lndV8 = add i64 %lndV7, 24
  %lndV9 = inttoptr i64 %lndV8 to i64*
  %lndVa = load i64, i64* %lndV9, !tbaa !4
  store i64 %lndVa, i64* %R1_Var
  %lndVc = load double, double* %ls7Fc
  %lndVb = load i64*, i64** %Sp_Var
  %lndVd = getelementptr inbounds i64, i64* %lndVb, i32 -4
  %lndVe = bitcast i64* %lndVd to double*
  store double %lndVc, double* %lndVe, !tbaa !2
  %lndVg = load i64, i64* %ls7Fp
  %lndVf = load i64*, i64** %Sp_Var
  %lndVh = getelementptr inbounds i64, i64* %lndVf, i32 -3
  store i64 %lndVg, i64* %lndVh, !tbaa !2
  %lndVi = load i64*, i64** %Sp_Var
  %lndVj = getelementptr inbounds i64, i64* %lndVi, i32 -5
  %lndVk = ptrtoint i64* %lndVj to i64
  %lndVl = inttoptr i64 %lndVk to i64*
  store i64* %lndVl, i64** %Sp_Var
  %lndVm = load i64, i64* %R1_Var
  %lndVn = and i64 %lndVm, 7
  %lndVo = icmp ne i64 %lndVn, 0
  br i1 %lndVo, label %udqW, label %cdqy
cdqy:
  %lndVq = load i64, i64* %R1_Var
  %lndVr = inttoptr i64 %lndVq to i64*
  %lndVs = load i64, i64* %lndVr, !tbaa !4
  %lndVt = inttoptr i64 %lndVs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVu = load i64*, i64** %Sp_Var
  %lndVv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVt( i64* %Base_Arg, i64* %lndVu, i64* %Hp_Arg, i64 %lndVv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqW:
  %lndVw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVx = load i64*, i64** %Sp_Var
  %lndVy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVw( i64* %Base_Arg, i64* %lndVx, i64* %Hp_Arg, i64 %lndVy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdqP:
  %lndVz = load i64, i64* %R1_Var
  store i64 %lndVz, i64* %R1_Var
  %lndVA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndVB = bitcast i64* %lndVA to i64*
  %lndVC = load i64, i64* %lndVB, !tbaa !5
  %lndVD = inttoptr i64 %lndVC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVE = load i64*, i64** %Sp_Var
  %lndVF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVD( i64* %Base_Arg, i64* %lndVE, i64* %Hp_Arg, i64 %lndVF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdqx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqx_info$def to i8*)
define internal ghccc void @cdqx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ndVG:
  %ls7H8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdqx
cdqx:
  %lndVH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqD_info$def to i64
  %lndVI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndVH, i64* %lndVI, !tbaa !2
  %lndVL = load i64, i64* %R1_Var
  %lndVM = add i64 %lndVL, 7
  %lndVN = inttoptr i64 %lndVM to double*
  %lndVO = load double, double* %lndVN, !tbaa !4
  store double %lndVO, double* %ls7H8
  %lndVP = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndVQ = bitcast i64* %lndVP to i64*
  %lndVR = load i64, i64* %lndVQ, !tbaa !2
  store i64 %lndVR, i64* %R1_Var
  %lndVS = load double, double* %ls7H8
  %lndVT = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndVU = bitcast i64* %lndVT to double*
  store double %lndVS, double* %lndVU, !tbaa !2
  %lndVV = load i64, i64* %R1_Var
  %lndVW = and i64 %lndVV, 7
  %lndVX = icmp ne i64 %lndVW, 0
  br i1 %lndVX, label %udqV, label %cdqE
cdqE:
  %lndVZ = load i64, i64* %R1_Var
  %lndW0 = inttoptr i64 %lndVZ to i64*
  %lndW1 = load i64, i64* %lndW0, !tbaa !4
  %lndW2 = inttoptr i64 %lndW1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndW3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndW2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndW3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udqV:
  %lndW4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndW5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndW4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndW5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdqD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqD_info$def to i8*)
define internal ghccc void @cdqD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ndW6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Hc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdqD
cdqD:
  %lndW7 = load i64*, i64** %Hp_Var
  %lndW8 = getelementptr inbounds i64, i64* %lndW7, i32 2
  %lndW9 = ptrtoint i64* %lndW8 to i64
  %lndWa = inttoptr i64 %lndW9 to i64*
  store i64* %lndWa, i64** %Hp_Var
  %lndWb = load i64*, i64** %Hp_Var
  %lndWc = ptrtoint i64* %lndWb to i64
  %lndWd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndWe = bitcast i64* %lndWd to i64*
  %lndWf = load i64, i64* %lndWe, !tbaa !5
  %lndWg = icmp ugt i64 %lndWc, %lndWf
  %lndWh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndWg, i1 0 )
  br i1 %lndWh, label %cdqU, label %cdqT
cdqT:
  %lndWi = load i64*, i64** %Sp_Var
  %lndWj = getelementptr inbounds i64, i64* %lndWi, i32 1
  %lndWk = bitcast i64* %lndWj to double*
  %lndWl = load double, double* %lndWk, !tbaa !2
  %lndWm = load i64*, i64** %Sp_Var
  %lndWn = getelementptr inbounds i64, i64* %lndWm, i32 2
  %lndWo = bitcast i64* %lndWn to double*
  %lndWp = load double, double* %lndWo, !tbaa !2
  %lndWq = fmul double %lndWl, %lndWp
  %lndWt = load i64, i64* %R1_Var
  %lndWu = add i64 %lndWt, 7
  %lndWv = inttoptr i64 %lndWu to double*
  %lndWw = load double, double* %lndWv, !tbaa !4
  %lndWx = fmul double %lndWq, %lndWw
  store double %lndWx, double* %ls7Hc
  %lndWz = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndWy = load i64*, i64** %Hp_Var
  %lndWA = getelementptr inbounds i64, i64* %lndWy, i32 -1
  store i64 %lndWz, i64* %lndWA, !tbaa !3
  %lndWC = load double, double* %ls7Hc
  %lndWB = load i64*, i64** %Hp_Var
  %lndWD = getelementptr inbounds i64, i64* %lndWB, i32 0
  %lndWE = bitcast i64* %lndWD to double*
  store double %lndWC, double* %lndWE, !tbaa !3
  %lndWG = load i64*, i64** %Hp_Var
  %lndWH = ptrtoint i64* %lndWG to i64
  %lndWI = add i64 %lndWH, -7
  store i64 %lndWI, i64* %R1_Var
  %lndWJ = load i64*, i64** %Sp_Var
  %lndWK = getelementptr inbounds i64, i64* %lndWJ, i32 3
  %lndWL = ptrtoint i64* %lndWK to i64
  %lndWM = inttoptr i64 %lndWL to i64*
  store i64* %lndWM, i64** %Sp_Var
  %lndWN = load i64*, i64** %Sp_Var
  %lndWO = getelementptr inbounds i64, i64* %lndWN, i32 0
  %lndWP = bitcast i64* %lndWO to i64*
  %lndWQ = load i64, i64* %lndWP, !tbaa !2
  %lndWR = inttoptr i64 %lndWQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWS = load i64*, i64** %Sp_Var
  %lndWT = load i64*, i64** %Hp_Var
  %lndWU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWR( i64* %Base_Arg, i64* %lndWS, i64* %lndWT, i64 %lndWU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdqU:
  %lndWV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndWV, !tbaa !5
  %lndWW = load i64, i64* %R1_Var
  store i64 %lndWW, i64* %R1_Var
  %lndWX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWY = load i64*, i64** %Sp_Var
  %lndWZ = load i64*, i64** %Hp_Var
  %lndX0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWX( i64* %Base_Arg, i64* %lndWY, i64* %lndWZ, i64 %lndX0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7H6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7H6_info$def to i8*)
define internal ghccc void @s7H6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
ndX1:
  %ls7Fo = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdr4
cdr4:
  %lndX2 = load i64*, i64** %Sp_Var
  %lndX3 = getelementptr inbounds i64, i64* %lndX2, i32 -5
  %lndX4 = ptrtoint i64* %lndX3 to i64
  %lndX5 = icmp ult i64 %lndX4, %SpLim_Arg
  %lndX6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndX5, i1 0 )
  br i1 %lndX6, label %cdrj, label %cdrk
cdrk:
  %lndX8 = ptrtoint i8* @stg_upd_frame_info to i64
  %lndX7 = load i64*, i64** %Sp_Var
  %lndX9 = getelementptr inbounds i64, i64* %lndX7, i32 -2
  store i64 %lndX8, i64* %lndX9, !tbaa !2
  %lndXb = load i64, i64* %R1_Var
  %lndXa = load i64*, i64** %Sp_Var
  %lndXc = getelementptr inbounds i64, i64* %lndXa, i32 -1
  store i64 %lndXb, i64* %lndXc, !tbaa !2
  %lndXe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr1_info$def to i64
  %lndXd = load i64*, i64** %Sp_Var
  %lndXf = getelementptr inbounds i64, i64* %lndXd, i32 -5
  store i64 %lndXe, i64* %lndXf, !tbaa !2
  %lndXi = load i64, i64* %R1_Var
  %lndXj = add i64 %lndXi, 16
  %lndXk = inttoptr i64 %lndXj to i64*
  %lndXl = load i64, i64* %lndXk, !tbaa !4
  store i64 %lndXl, i64* %ls7Fo
  %lndXo = load i64, i64* %R1_Var
  %lndXp = add i64 %lndXo, 32
  %lndXq = inttoptr i64 %lndXp to double*
  %lndXr = load double, double* %lndXq, !tbaa !4
  store double %lndXr, double* %ls7Fc
  %lndXu = load i64, i64* %R1_Var
  %lndXv = add i64 %lndXu, 24
  %lndXw = inttoptr i64 %lndXv to i64*
  %lndXx = load i64, i64* %lndXw, !tbaa !4
  store i64 %lndXx, i64* %R1_Var
  %lndXz = load double, double* %ls7Fc
  %lndXy = load i64*, i64** %Sp_Var
  %lndXA = getelementptr inbounds i64, i64* %lndXy, i32 -4
  %lndXB = bitcast i64* %lndXA to double*
  store double %lndXz, double* %lndXB, !tbaa !2
  %lndXD = load i64, i64* %ls7Fo
  %lndXC = load i64*, i64** %Sp_Var
  %lndXE = getelementptr inbounds i64, i64* %lndXC, i32 -3
  store i64 %lndXD, i64* %lndXE, !tbaa !2
  %lndXF = load i64*, i64** %Sp_Var
  %lndXG = getelementptr inbounds i64, i64* %lndXF, i32 -5
  %lndXH = ptrtoint i64* %lndXG to i64
  %lndXI = inttoptr i64 %lndXH to i64*
  store i64* %lndXI, i64** %Sp_Var
  %lndXJ = load i64, i64* %R1_Var
  %lndXK = and i64 %lndXJ, 7
  %lndXL = icmp ne i64 %lndXK, 0
  br i1 %lndXL, label %udrq, label %cdr2
cdr2:
  %lndXN = load i64, i64* %R1_Var
  %lndXO = inttoptr i64 %lndXN to i64*
  %lndXP = load i64, i64* %lndXO, !tbaa !4
  %lndXQ = inttoptr i64 %lndXP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndXR = load i64*, i64** %Sp_Var
  %lndXS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndXQ( i64* %Base_Arg, i64* %lndXR, i64* %Hp_Arg, i64 %lndXS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udrq:
  %lndXT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndXU = load i64*, i64** %Sp_Var
  %lndXV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndXT( i64* %Base_Arg, i64* %lndXU, i64* %Hp_Arg, i64 %lndXV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdrj:
  %lndXW = load i64, i64* %R1_Var
  store i64 %lndXW, i64* %R1_Var
  %lndXX = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndXY = bitcast i64* %lndXX to i64*
  %lndXZ = load i64, i64* %lndXY, !tbaa !5
  %lndY0 = inttoptr i64 %lndXZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndY1 = load i64*, i64** %Sp_Var
  %lndY2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndY0( i64* %Base_Arg, i64* %lndY1, i64* %Hp_Arg, i64 %lndY2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdr1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr1_info$def to i8*)
define internal ghccc void @cdr1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ndY3:
  %ls7H1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdr1
cdr1:
  %lndY4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr7_info$def to i64
  %lndY5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndY4, i64* %lndY5, !tbaa !2
  %lndY8 = load i64, i64* %R1_Var
  %lndY9 = add i64 %lndY8, 7
  %lndYa = inttoptr i64 %lndY9 to double*
  %lndYb = load double, double* %lndYa, !tbaa !4
  store double %lndYb, double* %ls7H1
  %lndYc = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndYd = bitcast i64* %lndYc to i64*
  %lndYe = load i64, i64* %lndYd, !tbaa !2
  store i64 %lndYe, i64* %R1_Var
  %lndYf = load double, double* %ls7H1
  %lndYg = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndYh = bitcast i64* %lndYg to double*
  store double %lndYf, double* %lndYh, !tbaa !2
  %lndYi = load i64, i64* %R1_Var
  %lndYj = and i64 %lndYi, 7
  %lndYk = icmp ne i64 %lndYj, 0
  br i1 %lndYk, label %udrp, label %cdr8
cdr8:
  %lndYm = load i64, i64* %R1_Var
  %lndYn = inttoptr i64 %lndYm to i64*
  %lndYo = load i64, i64* %lndYn, !tbaa !4
  %lndYp = inttoptr i64 %lndYo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndYq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udrp:
  %lndYr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lndYs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdr7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr7_info$def to i8*)
define internal ghccc void @cdr7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ndYt:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7H5 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdr7
cdr7:
  %lndYu = load i64*, i64** %Hp_Var
  %lndYv = getelementptr inbounds i64, i64* %lndYu, i32 2
  %lndYw = ptrtoint i64* %lndYv to i64
  %lndYx = inttoptr i64 %lndYw to i64*
  store i64* %lndYx, i64** %Hp_Var
  %lndYy = load i64*, i64** %Hp_Var
  %lndYz = ptrtoint i64* %lndYy to i64
  %lndYA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndYB = bitcast i64* %lndYA to i64*
  %lndYC = load i64, i64* %lndYB, !tbaa !5
  %lndYD = icmp ugt i64 %lndYz, %lndYC
  %lndYE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndYD, i1 0 )
  br i1 %lndYE, label %cdro, label %cdrn
cdrn:
  %lndYF = load i64*, i64** %Sp_Var
  %lndYG = getelementptr inbounds i64, i64* %lndYF, i32 1
  %lndYH = bitcast i64* %lndYG to double*
  %lndYI = load double, double* %lndYH, !tbaa !2
  %lndYJ = load i64*, i64** %Sp_Var
  %lndYK = getelementptr inbounds i64, i64* %lndYJ, i32 2
  %lndYL = bitcast i64* %lndYK to double*
  %lndYM = load double, double* %lndYL, !tbaa !2
  %lndYN = fmul double %lndYI, %lndYM
  %lndYQ = load i64, i64* %R1_Var
  %lndYR = add i64 %lndYQ, 7
  %lndYS = inttoptr i64 %lndYR to double*
  %lndYT = load double, double* %lndYS, !tbaa !4
  %lndYU = fmul double %lndYN, %lndYT
  store double %lndYU, double* %ls7H5
  %lndYW = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lndYV = load i64*, i64** %Hp_Var
  %lndYX = getelementptr inbounds i64, i64* %lndYV, i32 -1
  store i64 %lndYW, i64* %lndYX, !tbaa !3
  %lndYZ = load double, double* %ls7H5
  %lndYY = load i64*, i64** %Hp_Var
  %lndZ0 = getelementptr inbounds i64, i64* %lndYY, i32 0
  %lndZ1 = bitcast i64* %lndZ0 to double*
  store double %lndYZ, double* %lndZ1, !tbaa !3
  %lndZ3 = load i64*, i64** %Hp_Var
  %lndZ4 = ptrtoint i64* %lndZ3 to i64
  %lndZ5 = add i64 %lndZ4, -7
  store i64 %lndZ5, i64* %R1_Var
  %lndZ6 = load i64*, i64** %Sp_Var
  %lndZ7 = getelementptr inbounds i64, i64* %lndZ6, i32 3
  %lndZ8 = ptrtoint i64* %lndZ7 to i64
  %lndZ9 = inttoptr i64 %lndZ8 to i64*
  store i64* %lndZ9, i64** %Sp_Var
  %lndZa = load i64*, i64** %Sp_Var
  %lndZb = getelementptr inbounds i64, i64* %lndZa, i32 0
  %lndZc = bitcast i64* %lndZb to i64*
  %lndZd = load i64, i64* %lndZc, !tbaa !2
  %lndZe = inttoptr i64 %lndZd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndZf = load i64*, i64** %Sp_Var
  %lndZg = load i64*, i64** %Hp_Var
  %lndZh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndZe( i64* %Base_Arg, i64* %lndZf, i64* %lndZg, i64 %lndZh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdro:
  %lndZi = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndZi, !tbaa !5
  %lndZj = load i64, i64* %R1_Var
  store i64 %lndZj, i64* %R1_Var
  %lndZk = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndZl = load i64*, i64** %Sp_Var
  %lndZm = load i64*, i64** %Hp_Var
  %lndZn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndZk( i64* %Base_Arg, i64* %lndZl, i64* %lndZm, i64 %lndZn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7GZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7GZ_info$def to i8*)
define internal ghccc void @s7GZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
ndZo:
  %ls7Fn = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdry
cdry:
  %lndZp = load i64*, i64** %Sp_Var
  %lndZq = getelementptr inbounds i64, i64* %lndZp, i32 -5
  %lndZr = ptrtoint i64* %lndZq to i64
  %lndZs = icmp ult i64 %lndZr, %SpLim_Arg
  %lndZt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lndZs, i1 0 )
  br i1 %lndZt, label %cdrN, label %cdrO
cdrO:
  %lndZv = ptrtoint i8* @stg_upd_frame_info to i64
  %lndZu = load i64*, i64** %Sp_Var
  %lndZw = getelementptr inbounds i64, i64* %lndZu, i32 -2
  store i64 %lndZv, i64* %lndZw, !tbaa !2
  %lndZy = load i64, i64* %R1_Var
  %lndZx = load i64*, i64** %Sp_Var
  %lndZz = getelementptr inbounds i64, i64* %lndZx, i32 -1
  store i64 %lndZy, i64* %lndZz, !tbaa !2
  %lndZB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrv_info$def to i64
  %lndZA = load i64*, i64** %Sp_Var
  %lndZC = getelementptr inbounds i64, i64* %lndZA, i32 -5
  store i64 %lndZB, i64* %lndZC, !tbaa !2
  %lndZF = load i64, i64* %R1_Var
  %lndZG = add i64 %lndZF, 16
  %lndZH = inttoptr i64 %lndZG to i64*
  %lndZI = load i64, i64* %lndZH, !tbaa !4
  store i64 %lndZI, i64* %ls7Fn
  %lndZL = load i64, i64* %R1_Var
  %lndZM = add i64 %lndZL, 32
  %lndZN = inttoptr i64 %lndZM to double*
  %lndZO = load double, double* %lndZN, !tbaa !4
  store double %lndZO, double* %ls7Fc
  %lndZR = load i64, i64* %R1_Var
  %lndZS = add i64 %lndZR, 24
  %lndZT = inttoptr i64 %lndZS to i64*
  %lndZU = load i64, i64* %lndZT, !tbaa !4
  store i64 %lndZU, i64* %R1_Var
  %lndZW = load double, double* %ls7Fc
  %lndZV = load i64*, i64** %Sp_Var
  %lndZX = getelementptr inbounds i64, i64* %lndZV, i32 -4
  %lndZY = bitcast i64* %lndZX to double*
  store double %lndZW, double* %lndZY, !tbaa !2
  %lne00 = load i64, i64* %ls7Fn
  %lndZZ = load i64*, i64** %Sp_Var
  %lne01 = getelementptr inbounds i64, i64* %lndZZ, i32 -3
  store i64 %lne00, i64* %lne01, !tbaa !2
  %lne02 = load i64*, i64** %Sp_Var
  %lne03 = getelementptr inbounds i64, i64* %lne02, i32 -5
  %lne04 = ptrtoint i64* %lne03 to i64
  %lne05 = inttoptr i64 %lne04 to i64*
  store i64* %lne05, i64** %Sp_Var
  %lne06 = load i64, i64* %R1_Var
  %lne07 = and i64 %lne06, 7
  %lne08 = icmp ne i64 %lne07, 0
  br i1 %lne08, label %udrU, label %cdrw
cdrw:
  %lne0a = load i64, i64* %R1_Var
  %lne0b = inttoptr i64 %lne0a to i64*
  %lne0c = load i64, i64* %lne0b, !tbaa !4
  %lne0d = inttoptr i64 %lne0c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0e = load i64*, i64** %Sp_Var
  %lne0f = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0d( i64* %Base_Arg, i64* %lne0e, i64* %Hp_Arg, i64 %lne0f, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udrU:
  %lne0g = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0h = load i64*, i64** %Sp_Var
  %lne0i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0g( i64* %Base_Arg, i64* %lne0h, i64* %Hp_Arg, i64 %lne0i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdrN:
  %lne0j = load i64, i64* %R1_Var
  store i64 %lne0j, i64* %R1_Var
  %lne0k = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lne0l = bitcast i64* %lne0k to i64*
  %lne0m = load i64, i64* %lne0l, !tbaa !5
  %lne0n = inttoptr i64 %lne0m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0o = load i64*, i64** %Sp_Var
  %lne0p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0n( i64* %Base_Arg, i64* %lne0o, i64* %Hp_Arg, i64 %lne0p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdrv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrv_info$def to i8*)
define internal ghccc void @cdrv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ne0q:
  %ls7GU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdrv
cdrv:
  %lne0r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrB_info$def to i64
  %lne0s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne0r, i64* %lne0s, !tbaa !2
  %lne0v = load i64, i64* %R1_Var
  %lne0w = add i64 %lne0v, 7
  %lne0x = inttoptr i64 %lne0w to double*
  %lne0y = load double, double* %lne0x, !tbaa !4
  store double %lne0y, double* %ls7GU
  %lne0z = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lne0A = bitcast i64* %lne0z to i64*
  %lne0B = load i64, i64* %lne0A, !tbaa !2
  store i64 %lne0B, i64* %R1_Var
  %lne0C = load double, double* %ls7GU
  %lne0D = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lne0E = bitcast i64* %lne0D to double*
  store double %lne0C, double* %lne0E, !tbaa !2
  %lne0F = load i64, i64* %R1_Var
  %lne0G = and i64 %lne0F, 7
  %lne0H = icmp ne i64 %lne0G, 0
  br i1 %lne0H, label %udrT, label %cdrC
cdrC:
  %lne0J = load i64, i64* %R1_Var
  %lne0K = inttoptr i64 %lne0J to i64*
  %lne0L = load i64, i64* %lne0K, !tbaa !4
  %lne0M = inttoptr i64 %lne0L to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0M( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne0N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udrT:
  %lne0O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0O( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne0P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdrB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdrB_info$def to i8*)
define internal ghccc void @cdrB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ne0Q:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7GY = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdrB
cdrB:
  %lne0R = load i64*, i64** %Hp_Var
  %lne0S = getelementptr inbounds i64, i64* %lne0R, i32 2
  %lne0T = ptrtoint i64* %lne0S to i64
  %lne0U = inttoptr i64 %lne0T to i64*
  store i64* %lne0U, i64** %Hp_Var
  %lne0V = load i64*, i64** %Hp_Var
  %lne0W = ptrtoint i64* %lne0V to i64
  %lne0X = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne0Y = bitcast i64* %lne0X to i64*
  %lne0Z = load i64, i64* %lne0Y, !tbaa !5
  %lne10 = icmp ugt i64 %lne0W, %lne0Z
  %lne11 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne10, i1 0 )
  br i1 %lne11, label %cdrS, label %cdrR
cdrR:
  %lne12 = load i64*, i64** %Sp_Var
  %lne13 = getelementptr inbounds i64, i64* %lne12, i32 1
  %lne14 = bitcast i64* %lne13 to double*
  %lne15 = load double, double* %lne14, !tbaa !2
  %lne16 = load i64*, i64** %Sp_Var
  %lne17 = getelementptr inbounds i64, i64* %lne16, i32 2
  %lne18 = bitcast i64* %lne17 to double*
  %lne19 = load double, double* %lne18, !tbaa !2
  %lne1a = fmul double %lne15, %lne19
  %lne1d = load i64, i64* %R1_Var
  %lne1e = add i64 %lne1d, 7
  %lne1f = inttoptr i64 %lne1e to double*
  %lne1g = load double, double* %lne1f, !tbaa !4
  %lne1h = fmul double %lne1a, %lne1g
  store double %lne1h, double* %ls7GY
  %lne1j = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lne1i = load i64*, i64** %Hp_Var
  %lne1k = getelementptr inbounds i64, i64* %lne1i, i32 -1
  store i64 %lne1j, i64* %lne1k, !tbaa !3
  %lne1m = load double, double* %ls7GY
  %lne1l = load i64*, i64** %Hp_Var
  %lne1n = getelementptr inbounds i64, i64* %lne1l, i32 0
  %lne1o = bitcast i64* %lne1n to double*
  store double %lne1m, double* %lne1o, !tbaa !3
  %lne1q = load i64*, i64** %Hp_Var
  %lne1r = ptrtoint i64* %lne1q to i64
  %lne1s = add i64 %lne1r, -7
  store i64 %lne1s, i64* %R1_Var
  %lne1t = load i64*, i64** %Sp_Var
  %lne1u = getelementptr inbounds i64, i64* %lne1t, i32 3
  %lne1v = ptrtoint i64* %lne1u to i64
  %lne1w = inttoptr i64 %lne1v to i64*
  store i64* %lne1w, i64** %Sp_Var
  %lne1x = load i64*, i64** %Sp_Var
  %lne1y = getelementptr inbounds i64, i64* %lne1x, i32 0
  %lne1z = bitcast i64* %lne1y to i64*
  %lne1A = load i64, i64* %lne1z, !tbaa !2
  %lne1B = inttoptr i64 %lne1A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne1C = load i64*, i64** %Sp_Var
  %lne1D = load i64*, i64** %Hp_Var
  %lne1E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne1B( i64* %Base_Arg, i64* %lne1C, i64* %lne1D, i64 %lne1E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdrS:
  %lne1F = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne1F, !tbaa !5
  %lne1G = load i64, i64* %R1_Var
  store i64 %lne1G, i64* %R1_Var
  %lne1H = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne1I = load i64*, i64** %Sp_Var
  %lne1J = load i64*, i64** %Hp_Var
  %lne1K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne1H( i64* %Base_Arg, i64* %lne1I, i64* %lne1J, i64 %lne1K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7HW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7HW_info$def to i8*)
define internal ghccc void @s7HW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
ne1L:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdt3
cdt3:
  %lne1M = load i64*, i64** %Sp_Var
  %lne1N = getelementptr inbounds i64, i64* %lne1M, i32 -5
  %lne1O = ptrtoint i64* %lne1N to i64
  %lne1P = icmp ult i64 %lne1O, %SpLim_Arg
  %lne1Q = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne1P, i1 0 )
  br i1 %lne1Q, label %cdt4, label %cdu1
cdu1:
  %lne1S = ptrtoint i8* @stg_upd_frame_info to i64
  %lne1R = load i64*, i64** %Sp_Var
  %lne1T = getelementptr inbounds i64, i64* %lne1R, i32 -2
  store i64 %lne1S, i64* %lne1T, !tbaa !2
  %lne1V = load i64, i64* %R1_Var
  %lne1U = load i64*, i64** %Sp_Var
  %lne1W = getelementptr inbounds i64, i64* %lne1U, i32 -1
  store i64 %lne1V, i64* %lne1W, !tbaa !2
  %lne20 = load i64, i64* %R1_Var
  %lne21 = add i64 %lne20, 24
  %lne22 = inttoptr i64 %lne21 to double*
  %lne23 = load double, double* %lne22, !tbaa !4
  %lne1X = load i64*, i64** %Sp_Var
  %lne24 = getelementptr inbounds i64, i64* %lne1X, i32 -4
  %lne25 = bitcast i64* %lne24 to double*
  store double %lne23, double* %lne25, !tbaa !2
  %lne29 = load i64, i64* %R1_Var
  %lne2a = add i64 %lne29, 16
  %lne2b = inttoptr i64 %lne2a to i64*
  %lne2c = load i64, i64* %lne2b, !tbaa !4
  %lne26 = load i64*, i64** %Sp_Var
  %lne2d = getelementptr inbounds i64, i64* %lne26, i32 -3
  store i64 %lne2c, i64* %lne2d, !tbaa !2
  %lne2e = load i64*, i64** %Sp_Var
  %lne2f = getelementptr inbounds i64, i64* %lne2e, i32 -4
  %lne2g = ptrtoint i64* %lne2f to i64
  %lne2h = inttoptr i64 %lne2g to i64*
  store i64* %lne2h, i64** %Sp_Var
  %lne2i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdtA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2j = load i64*, i64** %Sp_Var
  %lne2k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2i( i64* %Base_Arg, i64* %lne2j, i64* %Hp_Arg, i64 %lne2k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdt4:
  %lne2l = load i64, i64* %R1_Var
  store i64 %lne2l, i64* %R1_Var
  %lne2m = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lne2n = bitcast i64* %lne2m to i64*
  %lne2o = load i64, i64* %lne2n, !tbaa !5
  %lne2p = inttoptr i64 %lne2o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2q = load i64*, i64** %Sp_Var
  %lne2r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2p( i64* %Base_Arg, i64* %lne2q, i64* %Hp_Arg, i64 %lne2r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdtA = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdtA$def to i8*)
define internal ghccc void @_cdtA$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ne2s:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdtA
cdtA:
  %lne2u = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtC_info$def to i64
  %lne2t = load i64*, i64** %Sp_Var
  %lne2v = getelementptr inbounds i64, i64* %lne2t, i32 -1
  store i64 %lne2u, i64* %lne2v, !tbaa !2
  %lne2w = load i64*, i64** %Sp_Var
  %lne2x = getelementptr inbounds i64, i64* %lne2w, i32 1
  %lne2y = bitcast i64* %lne2x to i64*
  %lne2z = load i64, i64* %lne2y, !tbaa !2
  store i64 %lne2z, i64* %R1_Var
  %lne2A = load i64*, i64** %Sp_Var
  %lne2B = getelementptr inbounds i64, i64* %lne2A, i32 -1
  %lne2C = ptrtoint i64* %lne2B to i64
  %lne2D = inttoptr i64 %lne2C to i64*
  store i64* %lne2D, i64** %Sp_Var
  %lne2E = load i64, i64* %R1_Var
  %lne2F = and i64 %lne2E, 7
  %lne2G = icmp ne i64 %lne2F, 0
  br i1 %lne2G, label %udu7, label %cdtE
cdtE:
  %lne2I = load i64, i64* %R1_Var
  %lne2J = inttoptr i64 %lne2I to i64*
  %lne2K = load i64, i64* %lne2J, !tbaa !4
  %lne2L = inttoptr i64 %lne2K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2M = load i64*, i64** %Sp_Var
  %lne2N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2L( i64* %Base_Arg, i64* %lne2M, i64* %Hp_Arg, i64 %lne2N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udu7:
  %lne2O = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtC_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2P = load i64*, i64** %Sp_Var
  %lne2Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2O( i64* %Base_Arg, i64* %lne2P, i64* %Hp_Arg, i64 %lne2Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdtC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtC_info$def to i8*)
define internal ghccc void @cdtC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ne2R:
  %ls7I8 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdtC
cdtC:
  %lne2S = load i64, i64* %R1_Var
  %lne2T = and i64 %lne2S, 7
  switch i64 %lne2T, label %udu8 [i64 1, label %udu8
i64 2, label %cdtP]
udu8:
  %lne2U = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdt6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2U( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne2V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdtP:
  %lne2W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtN_info$def to i64
  %lne2X = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne2W, i64* %lne2X, !tbaa !2
  %lne30 = load i64, i64* %R1_Var
  %lne31 = add i64 %lne30, 14
  %lne32 = inttoptr i64 %lne31 to i64*
  %lne33 = load i64, i64* %lne32, !tbaa !4
  store i64 %lne33, i64* %ls7I8
  %lne36 = load i64, i64* %R1_Var
  %lne37 = add i64 %lne36, 6
  %lne38 = inttoptr i64 %lne37 to i64*
  %lne39 = load i64, i64* %lne38, !tbaa !4
  store i64 %lne39, i64* %R1_Var
  %lne3a = load i64, i64* %ls7I8
  %lne3b = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lne3a, i64* %lne3b, !tbaa !2
  %lne3c = load i64, i64* %R1_Var
  %lne3d = and i64 %lne3c, 7
  %lne3e = icmp ne i64 %lne3d, 0
  br i1 %lne3e, label %udu9, label %cdtQ
cdtQ:
  %lne3g = load i64, i64* %R1_Var
  %lne3h = inttoptr i64 %lne3g to i64*
  %lne3i = load i64, i64* %lne3h, !tbaa !4
  %lne3j = inttoptr i64 %lne3i to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3j( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne3k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udu9:
  %lne3l = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3l( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne3m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdtN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtN_info$def to i8*)
define internal ghccc void @cdtN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ne3n:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdtN
cdtN:
  %lne3o = load i64, i64* %R1_Var
  %lne3p = and i64 %lne3o, 7
  switch i64 %lne3p, label %cdtW [i64 4, label %cdu0]
cdtW:
  %lne3r = load i64*, i64** %Sp_Var
  %lne3s = getelementptr inbounds i64, i64* %lne3r, i32 2
  %lne3t = bitcast i64* %lne3s to i64*
  %lne3u = load i64, i64* %lne3t, !tbaa !2
  %lne3q = load i64*, i64** %Sp_Var
  %lne3v = getelementptr inbounds i64, i64* %lne3q, i32 2
  store i64 %lne3u, i64* %lne3v, !tbaa !2
  %lne3w = load i64*, i64** %Sp_Var
  %lne3x = getelementptr inbounds i64, i64* %lne3w, i32 1
  %lne3y = ptrtoint i64* %lne3x to i64
  %lne3z = inttoptr i64 %lne3y to i64*
  store i64* %lne3z, i64** %Sp_Var
  %lne3A = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdtA$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3B = load i64*, i64** %Sp_Var
  %lne3C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3A( i64* %Base_Arg, i64* %lne3B, i64* %Hp_Arg, i64 %lne3C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdu0:
  %lne3E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtk_info$def to i64
  %lne3D = load i64*, i64** %Sp_Var
  %lne3F = getelementptr inbounds i64, i64* %lne3D, i32 0
  store i64 %lne3E, i64* %lne3F, !tbaa !2
  %lne3I = load i64, i64* %R1_Var
  %lne3J = add i64 %lne3I, 4
  %lne3K = inttoptr i64 %lne3J to i64*
  %lne3L = load i64, i64* %lne3K, !tbaa !4
  store i64 %lne3L, i64* %R1_Var
  %lne3M = load i64, i64* %R1_Var
  %lne3N = and i64 %lne3M, 7
  %lne3O = icmp ne i64 %lne3N, 0
  br i1 %lne3O, label %udua, label %cdtl
cdtl:
  %lne3Q = load i64, i64* %R1_Var
  %lne3R = inttoptr i64 %lne3Q to i64*
  %lne3S = load i64, i64* %lne3R, !tbaa !4
  %lne3T = inttoptr i64 %lne3S to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3U = load i64*, i64** %Sp_Var
  %lne3V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3T( i64* %Base_Arg, i64* %lne3U, i64* %Hp_Arg, i64 %lne3V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udua:
  %lne3W = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3X = load i64*, i64** %Sp_Var
  %lne3Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3W( i64* %Base_Arg, i64* %lne3X, i64* %Hp_Arg, i64 %lne3Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdtk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdtk_info$def to i8*)
define internal ghccc void @cdtk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ne3Z:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lcdtp = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdtk
cdtk:
  %lne40 = load i64*, i64** %Hp_Var
  %lne41 = getelementptr inbounds i64, i64* %lne40, i32 2
  %lne42 = ptrtoint i64* %lne41 to i64
  %lne43 = inttoptr i64 %lne42 to i64*
  store i64* %lne43, i64** %Hp_Var
  %lne44 = load i64*, i64** %Hp_Var
  %lne45 = ptrtoint i64* %lne44 to i64
  %lne46 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne47 = bitcast i64* %lne46 to i64*
  %lne48 = load i64, i64* %lne47, !tbaa !5
  %lne49 = icmp ugt i64 %lne45, %lne48
  %lne4a = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne49, i1 0 )
  br i1 %lne4a, label %cdty, label %cdtx
cdtx:
  %lne4b = load i64*, i64** %Sp_Var
  %lne4c = getelementptr inbounds i64, i64* %lne4b, i32 1
  %lne4d = bitcast i64* %lne4c to double*
  %lne4e = load double, double* %lne4d, !tbaa !2
  %lne4h = load i64, i64* %R1_Var
  %lne4i = add i64 %lne4h, 7
  %lne4j = inttoptr i64 %lne4i to double*
  %lne4k = load double, double* %lne4j, !tbaa !4
  %lne4l = call ccc double (double, double) @llvm.pow.f64( double %lne4e, double %lne4k ) nounwind
  store double %lne4l, double* %lcdtp
  %lne4n = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lne4m = load i64*, i64** %Hp_Var
  %lne4o = getelementptr inbounds i64, i64* %lne4m, i32 -1
  store i64 %lne4n, i64* %lne4o, !tbaa !3
  %lne4q = load double, double* %lcdtp
  %lne4p = load i64*, i64** %Hp_Var
  %lne4r = getelementptr inbounds i64, i64* %lne4p, i32 0
  %lne4s = bitcast i64* %lne4r to double*
  store double %lne4q, double* %lne4s, !tbaa !3
  %lne4u = load i64*, i64** %Hp_Var
  %lne4v = ptrtoint i64* %lne4u to i64
  %lne4w = add i64 %lne4v, -7
  store i64 %lne4w, i64* %R1_Var
  %lne4x = load i64*, i64** %Sp_Var
  %lne4y = getelementptr inbounds i64, i64* %lne4x, i32 3
  %lne4z = ptrtoint i64* %lne4y to i64
  %lne4A = inttoptr i64 %lne4z to i64*
  store i64* %lne4A, i64** %Sp_Var
  %lne4B = load i64*, i64** %Sp_Var
  %lne4C = getelementptr inbounds i64, i64* %lne4B, i32 0
  %lne4D = bitcast i64* %lne4C to i64*
  %lne4E = load i64, i64* %lne4D, !tbaa !2
  %lne4F = inttoptr i64 %lne4E to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4G = load i64*, i64** %Sp_Var
  %lne4H = load i64*, i64** %Hp_Var
  %lne4I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4F( i64* %Base_Arg, i64* %lne4G, i64* %lne4H, i64 %lne4I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdty:
  %lne4J = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne4J, !tbaa !5
  %lne4K = load i64, i64* %R1_Var
  store i64 %lne4K, i64* %R1_Var
  %lne4L = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4M = load i64*, i64** %Sp_Var
  %lne4N = load i64*, i64** %Hp_Var
  %lne4O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4L( i64* %Base_Arg, i64* %lne4M, i64* %lne4N, i64 %lne4O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdt6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdt6_info$def to i8*)
define internal ghccc void @cdt6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ne4P:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lcdt8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdt6
cdt6:
  %lne4Q = load i64*, i64** %Hp_Var
  %lne4R = getelementptr inbounds i64, i64* %lne4Q, i32 2
  %lne4S = ptrtoint i64* %lne4R to i64
  %lne4T = inttoptr i64 %lne4S to i64*
  store i64* %lne4T, i64** %Hp_Var
  %lne4U = load i64*, i64** %Hp_Var
  %lne4V = ptrtoint i64* %lne4U to i64
  %lne4W = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne4X = bitcast i64* %lne4W to i64*
  %lne4Y = load i64, i64* %lne4X, !tbaa !5
  %lne4Z = icmp ugt i64 %lne4V, %lne4Y
  %lne50 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne4Z, i1 0 )
  br i1 %lne50, label %cdtg, label %cdtf
cdtf:
  %lne51 = load i64*, i64** %Sp_Var
  %lne52 = getelementptr inbounds i64, i64* %lne51, i32 1
  %lne53 = bitcast i64* %lne52 to double*
  %lne54 = load double, double* %lne53, !tbaa !2
  %lne55 = call ccc double (double, double) @llvm.pow.f64( double %lne54, double 0x4020000000000000 ) nounwind
  store double %lne55, double* %lcdt8
  %lne57 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lne56 = load i64*, i64** %Hp_Var
  %lne58 = getelementptr inbounds i64, i64* %lne56, i32 -1
  store i64 %lne57, i64* %lne58, !tbaa !3
  %lne5a = load double, double* %lcdt8
  %lne59 = load i64*, i64** %Hp_Var
  %lne5b = getelementptr inbounds i64, i64* %lne59, i32 0
  %lne5c = bitcast i64* %lne5b to double*
  store double %lne5a, double* %lne5c, !tbaa !3
  %lne5e = load i64*, i64** %Hp_Var
  %lne5f = ptrtoint i64* %lne5e to i64
  %lne5g = add i64 %lne5f, -7
  store i64 %lne5g, i64* %R1_Var
  %lne5h = load i64*, i64** %Sp_Var
  %lne5i = getelementptr inbounds i64, i64* %lne5h, i32 3
  %lne5j = ptrtoint i64* %lne5i to i64
  %lne5k = inttoptr i64 %lne5j to i64*
  store i64* %lne5k, i64** %Sp_Var
  %lne5l = load i64*, i64** %Sp_Var
  %lne5m = getelementptr inbounds i64, i64* %lne5l, i32 0
  %lne5n = bitcast i64* %lne5m to i64*
  %lne5o = load i64, i64* %lne5n, !tbaa !2
  %lne5p = inttoptr i64 %lne5o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne5q = load i64*, i64** %Sp_Var
  %lne5r = load i64*, i64** %Hp_Var
  %lne5s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne5p( i64* %Base_Arg, i64* %lne5q, i64* %lne5r, i64 %lne5s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdtg:
  %lne5t = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne5t, !tbaa !5
  %lne5v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdt6_info$def to i64
  %lne5u = load i64*, i64** %Sp_Var
  %lne5w = getelementptr inbounds i64, i64* %lne5u, i32 0
  store i64 %lne5v, i64* %lne5w, !tbaa !2
  %lne5x = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne5y = load i64*, i64** %Sp_Var
  %lne5z = load i64*, i64** %Hp_Var
  %lne5A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne5x( i64* %Base_Arg, i64* %lne5y, i64* %lne5z, i64 %lne5A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7IQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7IQ_info$def to i8*)
define internal ghccc void @s7IQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ne5B:
  %ls7HV = alloca i64, i32 1
  %ls7HW = alloca i64, i32 1
  %ls7Hz = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cduj
cduj:
  %lne5C = load i64*, i64** %Sp_Var
  %lne5D = getelementptr inbounds i64, i64* %lne5C, i32 -7
  %lne5E = ptrtoint i64* %lne5D to i64
  %lne5F = icmp ult i64 %lne5E, %SpLim_Arg
  %lne5G = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne5F, i1 0 )
  br i1 %lne5G, label %cduR, label %cduS
cduS:
  %lne5I = ptrtoint i8* @stg_upd_frame_info to i64
  %lne5H = load i64*, i64** %Sp_Var
  %lne5J = getelementptr inbounds i64, i64* %lne5H, i32 -2
  store i64 %lne5I, i64* %lne5J, !tbaa !2
  %lne5L = load i64, i64* %R1_Var
  %lne5K = load i64*, i64** %Sp_Var
  %lne5M = getelementptr inbounds i64, i64* %lne5K, i32 -1
  store i64 %lne5L, i64* %lne5M, !tbaa !2
  %lne5O = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdug_info$def to i64
  %lne5N = load i64*, i64** %Sp_Var
  %lne5P = getelementptr inbounds i64, i64* %lne5N, i32 -7
  store i64 %lne5O, i64* %lne5P, !tbaa !2
  %lne5S = load i64, i64* %R1_Var
  %lne5T = add i64 %lne5S, 16
  %lne5U = inttoptr i64 %lne5T to i64*
  %lne5V = load i64, i64* %lne5U, !tbaa !4
  store i64 %lne5V, i64* %ls7HV
  %lne5Y = load i64, i64* %R1_Var
  %lne5Z = add i64 %lne5Y, 24
  %lne60 = inttoptr i64 %lne5Z to i64*
  %lne61 = load i64, i64* %lne60, !tbaa !4
  store i64 %lne61, i64* %ls7HW
  %lne64 = load i64, i64* %R1_Var
  %lne65 = add i64 %lne64, 32
  %lne66 = inttoptr i64 %lne65 to i64*
  %lne67 = load i64, i64* %lne66, !tbaa !4
  store i64 %lne67, i64* %ls7Hz
  %lne6a = load i64, i64* %R1_Var
  %lne6b = add i64 %lne6a, 48
  %lne6c = inttoptr i64 %lne6b to double*
  %lne6d = load double, double* %lne6c, !tbaa !4
  store double %lne6d, double* %ls7HQ
  %lne6g = load i64, i64* %R1_Var
  %lne6h = add i64 %lne6g, 40
  %lne6i = inttoptr i64 %lne6h to i64*
  %lne6j = load i64, i64* %lne6i, !tbaa !4
  store i64 %lne6j, i64* %R1_Var
  %lne6l = load i64, i64* %ls7Hz
  %lne6k = load i64*, i64** %Sp_Var
  %lne6m = getelementptr inbounds i64, i64* %lne6k, i32 -6
  store i64 %lne6l, i64* %lne6m, !tbaa !2
  %lne6o = load double, double* %ls7HQ
  %lne6n = load i64*, i64** %Sp_Var
  %lne6p = getelementptr inbounds i64, i64* %lne6n, i32 -5
  %lne6q = bitcast i64* %lne6p to double*
  store double %lne6o, double* %lne6q, !tbaa !2
  %lne6s = load i64, i64* %ls7HV
  %lne6r = load i64*, i64** %Sp_Var
  %lne6t = getelementptr inbounds i64, i64* %lne6r, i32 -4
  store i64 %lne6s, i64* %lne6t, !tbaa !2
  %lne6v = load i64, i64* %ls7HW
  %lne6u = load i64*, i64** %Sp_Var
  %lne6w = getelementptr inbounds i64, i64* %lne6u, i32 -3
  store i64 %lne6v, i64* %lne6w, !tbaa !2
  %lne6x = load i64*, i64** %Sp_Var
  %lne6y = getelementptr inbounds i64, i64* %lne6x, i32 -7
  %lne6z = ptrtoint i64* %lne6y to i64
  %lne6A = inttoptr i64 %lne6z to i64*
  store i64* %lne6A, i64** %Sp_Var
  %lne6B = load i64, i64* %R1_Var
  %lne6C = and i64 %lne6B, 7
  %lne6D = icmp ne i64 %lne6C, 0
  br i1 %lne6D, label %udv0, label %cduh
cduh:
  %lne6F = load i64, i64* %R1_Var
  %lne6G = inttoptr i64 %lne6F to i64*
  %lne6H = load i64, i64* %lne6G, !tbaa !4
  %lne6I = inttoptr i64 %lne6H to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne6J = load i64*, i64** %Sp_Var
  %lne6K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne6I( i64* %Base_Arg, i64* %lne6J, i64* %Hp_Arg, i64 %lne6K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udv0:
  %lne6L = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdug_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne6M = load i64*, i64** %Sp_Var
  %lne6N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne6L( i64* %Base_Arg, i64* %lne6M, i64* %Hp_Arg, i64 %lne6N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cduR:
  %lne6O = load i64, i64* %R1_Var
  store i64 %lne6O, i64* %R1_Var
  %lne6P = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lne6Q = bitcast i64* %lne6P to i64*
  %lne6R = load i64, i64* %lne6Q, !tbaa !5
  %lne6S = inttoptr i64 %lne6R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne6T = load i64*, i64** %Sp_Var
  %lne6U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne6S( i64* %Base_Arg, i64* %lne6T, i64* %Hp_Arg, i64 %lne6U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdug_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdug_info$def to i8*)
define internal ghccc void @cdug_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 132, i32 30, i32 0}>
{
ne6V:
  %ls7IE = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdug
cdug:
  %lne6W = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdum_info$def to i64
  %lne6X = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne6W, i64* %lne6X, !tbaa !2
  %lne70 = load i64, i64* %R1_Var
  %lne71 = add i64 %lne70, 7
  %lne72 = inttoptr i64 %lne71 to double*
  %lne73 = load double, double* %lne72, !tbaa !4
  store double %lne73, double* %ls7IE
  %lne74 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lne75 = bitcast i64* %lne74 to i64*
  %lne76 = load i64, i64* %lne75, !tbaa !2
  store i64 %lne76, i64* %R1_Var
  %lne77 = load double, double* %ls7IE
  %lne78 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lne79 = bitcast i64* %lne78 to double*
  store double %lne77, double* %lne79, !tbaa !2
  %lne7a = load i64, i64* %R1_Var
  %lne7b = and i64 %lne7a, 7
  %lne7c = icmp ne i64 %lne7b, 0
  br i1 %lne7c, label %uduZ, label %cdun
cdun:
  %lne7e = load i64, i64* %R1_Var
  %lne7f = inttoptr i64 %lne7e to i64*
  %lne7g = load i64, i64* %lne7f, !tbaa !4
  %lne7h = inttoptr i64 %lne7g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne7i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne7h( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne7i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uduZ:
  %lne7j = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdum_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne7k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne7j( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne7k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdum_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdum_info$def to i8*)
define internal ghccc void @cdum_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
ne7l:
  %ls7IG = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdum
cdum:
  %lne7m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdur_info$def to i64
  %lne7n = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne7m, i64* %lne7n, !tbaa !2
  %lne7q = load i64, i64* %R1_Var
  %lne7r = add i64 %lne7q, 7
  %lne7s = inttoptr i64 %lne7r to double*
  %lne7t = load double, double* %lne7s, !tbaa !4
  store double %lne7t, double* %ls7IG
  %lne7u = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lne7v = bitcast i64* %lne7u to i64*
  %lne7w = load i64, i64* %lne7v, !tbaa !2
  store i64 %lne7w, i64* %R1_Var
  %lne7x = load double, double* %ls7IG
  %lne7y = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lne7z = bitcast i64* %lne7y to double*
  store double %lne7x, double* %lne7z, !tbaa !2
  %lne7A = load i64, i64* %R1_Var
  %lne7B = and i64 %lne7A, 7
  %lne7C = icmp ne i64 %lne7B, 0
  br i1 %lne7C, label %udv1, label %cdus
cdus:
  %lne7E = load i64, i64* %R1_Var
  %lne7F = inttoptr i64 %lne7E to i64*
  %lne7G = load i64, i64* %lne7F, !tbaa !4
  %lne7H = inttoptr i64 %lne7G to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne7I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne7H( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne7I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udv1:
  %lne7J = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdur_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne7K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne7J( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne7K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdur_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdur_info$def to i8*)
define internal ghccc void @cdur_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
ne7L:
  %ls7II = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdur
cdur:
  %lne7M = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cduw_info$def to i64
  %lne7N = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne7M, i64* %lne7N, !tbaa !2
  %lne7Q = load i64, i64* %R1_Var
  %lne7R = add i64 %lne7Q, 7
  %lne7S = inttoptr i64 %lne7R to double*
  %lne7T = load double, double* %lne7S, !tbaa !4
  store double %lne7T, double* %ls7II
  %lne7U = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lne7V = bitcast i64* %lne7U to i64*
  %lne7W = load i64, i64* %lne7V, !tbaa !2
  store i64 %lne7W, i64* %R1_Var
  %lne7X = load double, double* %ls7II
  %lne7Y = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lne7Z = bitcast i64* %lne7Y to double*
  store double %lne7X, double* %lne7Z, !tbaa !2
  %lne80 = load i64, i64* %R1_Var
  %lne81 = and i64 %lne80, 7
  %lne82 = icmp ne i64 %lne81, 0
  br i1 %lne82, label %udv2, label %cdux
cdux:
  %lne84 = load i64, i64* %R1_Var
  %lne85 = inttoptr i64 %lne84 to i64*
  %lne86 = load i64, i64* %lne85, !tbaa !4
  %lne87 = inttoptr i64 %lne86 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne88 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne87( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne88, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udv2:
  %lne89 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cduw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne8a = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne89( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne8a, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cduw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cduw_info$def to i8*)
define internal ghccc void @cduw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
ne8b:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7IG = alloca double, i32 1
  %ls7IP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cduw
cduw:
  %lne8c = load i64*, i64** %Hp_Var
  %lne8d = getelementptr inbounds i64, i64* %lne8c, i32 2
  %lne8e = ptrtoint i64* %lne8d to i64
  %lne8f = inttoptr i64 %lne8e to i64*
  store i64* %lne8f, i64** %Hp_Var
  %lne8g = load i64*, i64** %Hp_Var
  %lne8h = ptrtoint i64* %lne8g to i64
  %lne8i = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne8j = bitcast i64* %lne8i to i64*
  %lne8k = load i64, i64* %lne8j, !tbaa !5
  %lne8l = icmp ugt i64 %lne8h, %lne8k
  %lne8m = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne8l, i1 0 )
  br i1 %lne8m, label %cduY, label %cduX
cduX:
  %lne8n = load i64*, i64** %Sp_Var
  %lne8o = getelementptr inbounds i64, i64* %lne8n, i32 4
  %lne8p = bitcast i64* %lne8o to double*
  %lne8q = load double, double* %lne8p, !tbaa !2
  store double %lne8q, double* %ls7IG
  %lne8r = load i64*, i64** %Sp_Var
  %lne8s = getelementptr inbounds i64, i64* %lne8r, i32 2
  %lne8t = bitcast i64* %lne8s to double*
  %lne8u = load double, double* %lne8t, !tbaa !2
  %lne8v = load i64*, i64** %Sp_Var
  %lne8w = getelementptr inbounds i64, i64* %lne8v, i32 1
  %lne8x = bitcast i64* %lne8w to double*
  %lne8y = load double, double* %lne8x, !tbaa !2
  %lne8z = fmul double %lne8u, %lne8y
  %lne8A = load double, double* %ls7IG
  %lne8B = fmul double %lne8z, %lne8A
  %lne8C = load i64*, i64** %Sp_Var
  %lne8D = getelementptr inbounds i64, i64* %lne8C, i32 3
  %lne8E = bitcast i64* %lne8D to double*
  %lne8F = load double, double* %lne8E, !tbaa !2
  %lne8I = load i64, i64* %R1_Var
  %lne8J = add i64 %lne8I, 7
  %lne8K = inttoptr i64 %lne8J to double*
  %lne8L = load double, double* %lne8K, !tbaa !4
  %lne8M = fmul double %lne8F, %lne8L
  %lne8N = load double, double* %ls7IG
  %lne8O = fmul double %lne8M, %lne8N
  %lne8P = fadd double %lne8B, %lne8O
  store double %lne8P, double* %ls7IP
  %lne8R = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lne8Q = load i64*, i64** %Hp_Var
  %lne8S = getelementptr inbounds i64, i64* %lne8Q, i32 -1
  store i64 %lne8R, i64* %lne8S, !tbaa !3
  %lne8U = load double, double* %ls7IP
  %lne8T = load i64*, i64** %Hp_Var
  %lne8V = getelementptr inbounds i64, i64* %lne8T, i32 0
  %lne8W = bitcast i64* %lne8V to double*
  store double %lne8U, double* %lne8W, !tbaa !3
  %lne8Y = load i64*, i64** %Hp_Var
  %lne8Z = ptrtoint i64* %lne8Y to i64
  %lne90 = add i64 %lne8Z, -7
  store i64 %lne90, i64* %R1_Var
  %lne91 = load i64*, i64** %Sp_Var
  %lne92 = getelementptr inbounds i64, i64* %lne91, i32 5
  %lne93 = ptrtoint i64* %lne92 to i64
  %lne94 = inttoptr i64 %lne93 to i64*
  store i64* %lne94, i64** %Sp_Var
  %lne95 = load i64*, i64** %Sp_Var
  %lne96 = getelementptr inbounds i64, i64* %lne95, i32 0
  %lne97 = bitcast i64* %lne96 to i64*
  %lne98 = load i64, i64* %lne97, !tbaa !2
  %lne99 = inttoptr i64 %lne98 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne9a = load i64*, i64** %Sp_Var
  %lne9b = load i64*, i64** %Hp_Var
  %lne9c = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne99( i64* %Base_Arg, i64* %lne9a, i64* %lne9b, i64 %lne9c, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cduY:
  %lne9d = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne9d, !tbaa !5
  %lne9e = load i64, i64* %R1_Var
  store i64 %lne9e, i64* %R1_Var
  %lne9f = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne9g = load i64*, i64** %Sp_Var
  %lne9h = load i64*, i64** %Hp_Var
  %lne9i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne9f( i64* %Base_Arg, i64* %lne9g, i64* %lne9h, i64 %lne9i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7IC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7IC_info$def to i8*)
define internal ghccc void @s7IC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ne9j:
  %ls7HU = alloca i64, i32 1
  %ls7HW = alloca i64, i32 1
  %ls7Hy = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdva
cdva:
  %lne9k = load i64*, i64** %Sp_Var
  %lne9l = getelementptr inbounds i64, i64* %lne9k, i32 -7
  %lne9m = ptrtoint i64* %lne9l to i64
  %lne9n = icmp ult i64 %lne9m, %SpLim_Arg
  %lne9o = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lne9n, i1 0 )
  br i1 %lne9o, label %cdvI, label %cdvJ
cdvJ:
  %lne9q = ptrtoint i8* @stg_upd_frame_info to i64
  %lne9p = load i64*, i64** %Sp_Var
  %lne9r = getelementptr inbounds i64, i64* %lne9p, i32 -2
  store i64 %lne9q, i64* %lne9r, !tbaa !2
  %lne9t = load i64, i64* %R1_Var
  %lne9s = load i64*, i64** %Sp_Var
  %lne9u = getelementptr inbounds i64, i64* %lne9s, i32 -1
  store i64 %lne9t, i64* %lne9u, !tbaa !2
  %lne9w = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdv7_info$def to i64
  %lne9v = load i64*, i64** %Sp_Var
  %lne9x = getelementptr inbounds i64, i64* %lne9v, i32 -7
  store i64 %lne9w, i64* %lne9x, !tbaa !2
  %lne9A = load i64, i64* %R1_Var
  %lne9B = add i64 %lne9A, 16
  %lne9C = inttoptr i64 %lne9B to i64*
  %lne9D = load i64, i64* %lne9C, !tbaa !4
  store i64 %lne9D, i64* %ls7HU
  %lne9G = load i64, i64* %R1_Var
  %lne9H = add i64 %lne9G, 24
  %lne9I = inttoptr i64 %lne9H to i64*
  %lne9J = load i64, i64* %lne9I, !tbaa !4
  store i64 %lne9J, i64* %ls7HW
  %lne9M = load i64, i64* %R1_Var
  %lne9N = add i64 %lne9M, 32
  %lne9O = inttoptr i64 %lne9N to i64*
  %lne9P = load i64, i64* %lne9O, !tbaa !4
  store i64 %lne9P, i64* %ls7Hy
  %lne9S = load i64, i64* %R1_Var
  %lne9T = add i64 %lne9S, 48
  %lne9U = inttoptr i64 %lne9T to double*
  %lne9V = load double, double* %lne9U, !tbaa !4
  store double %lne9V, double* %ls7HQ
  %lne9Y = load i64, i64* %R1_Var
  %lne9Z = add i64 %lne9Y, 40
  %lnea0 = inttoptr i64 %lne9Z to i64*
  %lnea1 = load i64, i64* %lnea0, !tbaa !4
  store i64 %lnea1, i64* %R1_Var
  %lnea3 = load i64, i64* %ls7Hy
  %lnea2 = load i64*, i64** %Sp_Var
  %lnea4 = getelementptr inbounds i64, i64* %lnea2, i32 -6
  store i64 %lnea3, i64* %lnea4, !tbaa !2
  %lnea6 = load double, double* %ls7HQ
  %lnea5 = load i64*, i64** %Sp_Var
  %lnea7 = getelementptr inbounds i64, i64* %lnea5, i32 -5
  %lnea8 = bitcast i64* %lnea7 to double*
  store double %lnea6, double* %lnea8, !tbaa !2
  %lneaa = load i64, i64* %ls7HU
  %lnea9 = load i64*, i64** %Sp_Var
  %lneab = getelementptr inbounds i64, i64* %lnea9, i32 -4
  store i64 %lneaa, i64* %lneab, !tbaa !2
  %lnead = load i64, i64* %ls7HW
  %lneac = load i64*, i64** %Sp_Var
  %lneae = getelementptr inbounds i64, i64* %lneac, i32 -3
  store i64 %lnead, i64* %lneae, !tbaa !2
  %lneaf = load i64*, i64** %Sp_Var
  %lneag = getelementptr inbounds i64, i64* %lneaf, i32 -7
  %lneah = ptrtoint i64* %lneag to i64
  %lneai = inttoptr i64 %lneah to i64*
  store i64* %lneai, i64** %Sp_Var
  %lneaj = load i64, i64* %R1_Var
  %lneak = and i64 %lneaj, 7
  %lneal = icmp ne i64 %lneak, 0
  br i1 %lneal, label %udvR, label %cdv8
cdv8:
  %lnean = load i64, i64* %R1_Var
  %lneao = inttoptr i64 %lnean to i64*
  %lneap = load i64, i64* %lneao, !tbaa !4
  %lneaq = inttoptr i64 %lneap to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnear = load i64*, i64** %Sp_Var
  %lneas = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneaq( i64* %Base_Arg, i64* %lnear, i64* %Hp_Arg, i64 %lneas, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udvR:
  %lneat = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdv7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneau = load i64*, i64** %Sp_Var
  %lneav = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneat( i64* %Base_Arg, i64* %lneau, i64* %Hp_Arg, i64 %lneav, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdvI:
  %lneaw = load i64, i64* %R1_Var
  store i64 %lneaw, i64* %R1_Var
  %lneax = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lneay = bitcast i64* %lneax to i64*
  %lneaz = load i64, i64* %lneay, !tbaa !5
  %lneaA = inttoptr i64 %lneaz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneaB = load i64*, i64** %Sp_Var
  %lneaC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneaA( i64* %Base_Arg, i64* %lneaB, i64* %Hp_Arg, i64 %lneaC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdv7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdv7_info$def to i8*)
define internal ghccc void @cdv7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 132, i32 30, i32 0}>
{
neaD:
  %ls7Iq = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdv7
cdv7:
  %lneaE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvd_info$def to i64
  %lneaF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneaE, i64* %lneaF, !tbaa !2
  %lneaI = load i64, i64* %R1_Var
  %lneaJ = add i64 %lneaI, 7
  %lneaK = inttoptr i64 %lneaJ to double*
  %lneaL = load double, double* %lneaK, !tbaa !4
  store double %lneaL, double* %ls7Iq
  %lneaM = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneaN = bitcast i64* %lneaM to i64*
  %lneaO = load i64, i64* %lneaN, !tbaa !2
  store i64 %lneaO, i64* %R1_Var
  %lneaP = load double, double* %ls7Iq
  %lneaQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneaR = bitcast i64* %lneaQ to double*
  store double %lneaP, double* %lneaR, !tbaa !2
  %lneaS = load i64, i64* %R1_Var
  %lneaT = and i64 %lneaS, 7
  %lneaU = icmp ne i64 %lneaT, 0
  br i1 %lneaU, label %udvQ, label %cdve
cdve:
  %lneaW = load i64, i64* %R1_Var
  %lneaX = inttoptr i64 %lneaW to i64*
  %lneaY = load i64, i64* %lneaX, !tbaa !4
  %lneaZ = inttoptr i64 %lneaY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneb0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneaZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneb0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udvQ:
  %lneb1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvd_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneb2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneb1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneb2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdvd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvd_info$def to i8*)
define internal ghccc void @cdvd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
neb3:
  %ls7Is = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdvd
cdvd:
  %lneb4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvi_info$def to i64
  %lneb5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneb4, i64* %lneb5, !tbaa !2
  %lneb8 = load i64, i64* %R1_Var
  %lneb9 = add i64 %lneb8, 7
  %lneba = inttoptr i64 %lneb9 to double*
  %lnebb = load double, double* %lneba, !tbaa !4
  store double %lnebb, double* %ls7Is
  %lnebc = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnebd = bitcast i64* %lnebc to i64*
  %lnebe = load i64, i64* %lnebd, !tbaa !2
  store i64 %lnebe, i64* %R1_Var
  %lnebf = load double, double* %ls7Is
  %lnebg = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnebh = bitcast i64* %lnebg to double*
  store double %lnebf, double* %lnebh, !tbaa !2
  %lnebi = load i64, i64* %R1_Var
  %lnebj = and i64 %lnebi, 7
  %lnebk = icmp ne i64 %lnebj, 0
  br i1 %lnebk, label %udvS, label %cdvj
cdvj:
  %lnebm = load i64, i64* %R1_Var
  %lnebn = inttoptr i64 %lnebm to i64*
  %lnebo = load i64, i64* %lnebn, !tbaa !4
  %lnebp = inttoptr i64 %lnebo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnebq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnebp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnebq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udvS:
  %lnebr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnebs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnebr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnebs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdvi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvi_info$def to i8*)
define internal ghccc void @cdvi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
nebt:
  %ls7Iu = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdvi
cdvi:
  %lnebu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvn_info$def to i64
  %lnebv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnebu, i64* %lnebv, !tbaa !2
  %lneby = load i64, i64* %R1_Var
  %lnebz = add i64 %lneby, 7
  %lnebA = inttoptr i64 %lnebz to double*
  %lnebB = load double, double* %lnebA, !tbaa !4
  store double %lnebB, double* %ls7Iu
  %lnebC = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnebD = bitcast i64* %lnebC to i64*
  %lnebE = load i64, i64* %lnebD, !tbaa !2
  store i64 %lnebE, i64* %R1_Var
  %lnebF = load double, double* %ls7Iu
  %lnebG = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnebH = bitcast i64* %lnebG to double*
  store double %lnebF, double* %lnebH, !tbaa !2
  %lnebI = load i64, i64* %R1_Var
  %lnebJ = and i64 %lnebI, 7
  %lnebK = icmp ne i64 %lnebJ, 0
  br i1 %lnebK, label %udvT, label %cdvo
cdvo:
  %lnebM = load i64, i64* %R1_Var
  %lnebN = inttoptr i64 %lnebM to i64*
  %lnebO = load i64, i64* %lnebN, !tbaa !4
  %lnebP = inttoptr i64 %lnebO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnebQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnebP( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnebQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udvT:
  %lnebR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnebS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnebR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnebS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdvn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvn_info$def to i8*)
define internal ghccc void @cdvn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
nebT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Is = alloca double, i32 1
  %ls7IB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdvn
cdvn:
  %lnebU = load i64*, i64** %Hp_Var
  %lnebV = getelementptr inbounds i64, i64* %lnebU, i32 2
  %lnebW = ptrtoint i64* %lnebV to i64
  %lnebX = inttoptr i64 %lnebW to i64*
  store i64* %lnebX, i64** %Hp_Var
  %lnebY = load i64*, i64** %Hp_Var
  %lnebZ = ptrtoint i64* %lnebY to i64
  %lnec0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnec1 = bitcast i64* %lnec0 to i64*
  %lnec2 = load i64, i64* %lnec1, !tbaa !5
  %lnec3 = icmp ugt i64 %lnebZ, %lnec2
  %lnec4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnec3, i1 0 )
  br i1 %lnec4, label %cdvP, label %cdvO
cdvO:
  %lnec5 = load i64*, i64** %Sp_Var
  %lnec6 = getelementptr inbounds i64, i64* %lnec5, i32 4
  %lnec7 = bitcast i64* %lnec6 to double*
  %lnec8 = load double, double* %lnec7, !tbaa !2
  store double %lnec8, double* %ls7Is
  %lnec9 = load i64*, i64** %Sp_Var
  %lneca = getelementptr inbounds i64, i64* %lnec9, i32 2
  %lnecb = bitcast i64* %lneca to double*
  %lnecc = load double, double* %lnecb, !tbaa !2
  %lnecd = load i64*, i64** %Sp_Var
  %lnece = getelementptr inbounds i64, i64* %lnecd, i32 1
  %lnecf = bitcast i64* %lnece to double*
  %lnecg = load double, double* %lnecf, !tbaa !2
  %lnech = fmul double %lnecc, %lnecg
  %lneci = load double, double* %ls7Is
  %lnecj = fmul double %lnech, %lneci
  %lneck = load i64*, i64** %Sp_Var
  %lnecl = getelementptr inbounds i64, i64* %lneck, i32 3
  %lnecm = bitcast i64* %lnecl to double*
  %lnecn = load double, double* %lnecm, !tbaa !2
  %lnecq = load i64, i64* %R1_Var
  %lnecr = add i64 %lnecq, 7
  %lnecs = inttoptr i64 %lnecr to double*
  %lnect = load double, double* %lnecs, !tbaa !4
  %lnecu = fmul double %lnecn, %lnect
  %lnecv = load double, double* %ls7Is
  %lnecw = fmul double %lnecu, %lnecv
  %lnecx = fadd double %lnecj, %lnecw
  store double %lnecx, double* %ls7IB
  %lnecz = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnecy = load i64*, i64** %Hp_Var
  %lnecA = getelementptr inbounds i64, i64* %lnecy, i32 -1
  store i64 %lnecz, i64* %lnecA, !tbaa !3
  %lnecC = load double, double* %ls7IB
  %lnecB = load i64*, i64** %Hp_Var
  %lnecD = getelementptr inbounds i64, i64* %lnecB, i32 0
  %lnecE = bitcast i64* %lnecD to double*
  store double %lnecC, double* %lnecE, !tbaa !3
  %lnecG = load i64*, i64** %Hp_Var
  %lnecH = ptrtoint i64* %lnecG to i64
  %lnecI = add i64 %lnecH, -7
  store i64 %lnecI, i64* %R1_Var
  %lnecJ = load i64*, i64** %Sp_Var
  %lnecK = getelementptr inbounds i64, i64* %lnecJ, i32 5
  %lnecL = ptrtoint i64* %lnecK to i64
  %lnecM = inttoptr i64 %lnecL to i64*
  store i64* %lnecM, i64** %Sp_Var
  %lnecN = load i64*, i64** %Sp_Var
  %lnecO = getelementptr inbounds i64, i64* %lnecN, i32 0
  %lnecP = bitcast i64* %lnecO to i64*
  %lnecQ = load i64, i64* %lnecP, !tbaa !2
  %lnecR = inttoptr i64 %lnecQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnecS = load i64*, i64** %Sp_Var
  %lnecT = load i64*, i64** %Hp_Var
  %lnecU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnecR( i64* %Base_Arg, i64* %lnecS, i64* %lnecT, i64 %lnecU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdvP:
  %lnecV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnecV, !tbaa !5
  %lnecW = load i64, i64* %R1_Var
  store i64 %lnecW, i64* %R1_Var
  %lnecX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnecY = load i64*, i64** %Sp_Var
  %lnecZ = load i64*, i64** %Hp_Var
  %lned0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnecX( i64* %Base_Arg, i64* %lnecY, i64* %lnecZ, i64 %lned0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Io_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Io_info$def to i8*)
define internal ghccc void @s7Io_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 0}>
{
ned1:
  %ls7HT = alloca i64, i32 1
  %ls7HW = alloca i64, i32 1
  %ls7Hx = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdw1
cdw1:
  %lned2 = load i64*, i64** %Sp_Var
  %lned3 = getelementptr inbounds i64, i64* %lned2, i32 -7
  %lned4 = ptrtoint i64* %lned3 to i64
  %lned5 = icmp ult i64 %lned4, %SpLim_Arg
  %lned6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lned5, i1 0 )
  br i1 %lned6, label %cdwz, label %cdwA
cdwA:
  %lned8 = ptrtoint i8* @stg_upd_frame_info to i64
  %lned7 = load i64*, i64** %Sp_Var
  %lned9 = getelementptr inbounds i64, i64* %lned7, i32 -2
  store i64 %lned8, i64* %lned9, !tbaa !2
  %lnedb = load i64, i64* %R1_Var
  %lneda = load i64*, i64** %Sp_Var
  %lnedc = getelementptr inbounds i64, i64* %lneda, i32 -1
  store i64 %lnedb, i64* %lnedc, !tbaa !2
  %lnede = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvY_info$def to i64
  %lnedd = load i64*, i64** %Sp_Var
  %lnedf = getelementptr inbounds i64, i64* %lnedd, i32 -7
  store i64 %lnede, i64* %lnedf, !tbaa !2
  %lnedi = load i64, i64* %R1_Var
  %lnedj = add i64 %lnedi, 16
  %lnedk = inttoptr i64 %lnedj to i64*
  %lnedl = load i64, i64* %lnedk, !tbaa !4
  store i64 %lnedl, i64* %ls7HT
  %lnedo = load i64, i64* %R1_Var
  %lnedp = add i64 %lnedo, 24
  %lnedq = inttoptr i64 %lnedp to i64*
  %lnedr = load i64, i64* %lnedq, !tbaa !4
  store i64 %lnedr, i64* %ls7HW
  %lnedu = load i64, i64* %R1_Var
  %lnedv = add i64 %lnedu, 32
  %lnedw = inttoptr i64 %lnedv to i64*
  %lnedx = load i64, i64* %lnedw, !tbaa !4
  store i64 %lnedx, i64* %ls7Hx
  %lnedA = load i64, i64* %R1_Var
  %lnedB = add i64 %lnedA, 48
  %lnedC = inttoptr i64 %lnedB to double*
  %lnedD = load double, double* %lnedC, !tbaa !4
  store double %lnedD, double* %ls7HQ
  %lnedG = load i64, i64* %R1_Var
  %lnedH = add i64 %lnedG, 40
  %lnedI = inttoptr i64 %lnedH to i64*
  %lnedJ = load i64, i64* %lnedI, !tbaa !4
  store i64 %lnedJ, i64* %R1_Var
  %lnedL = load i64, i64* %ls7Hx
  %lnedK = load i64*, i64** %Sp_Var
  %lnedM = getelementptr inbounds i64, i64* %lnedK, i32 -6
  store i64 %lnedL, i64* %lnedM, !tbaa !2
  %lnedO = load double, double* %ls7HQ
  %lnedN = load i64*, i64** %Sp_Var
  %lnedP = getelementptr inbounds i64, i64* %lnedN, i32 -5
  %lnedQ = bitcast i64* %lnedP to double*
  store double %lnedO, double* %lnedQ, !tbaa !2
  %lnedS = load i64, i64* %ls7HT
  %lnedR = load i64*, i64** %Sp_Var
  %lnedT = getelementptr inbounds i64, i64* %lnedR, i32 -4
  store i64 %lnedS, i64* %lnedT, !tbaa !2
  %lnedV = load i64, i64* %ls7HW
  %lnedU = load i64*, i64** %Sp_Var
  %lnedW = getelementptr inbounds i64, i64* %lnedU, i32 -3
  store i64 %lnedV, i64* %lnedW, !tbaa !2
  %lnedX = load i64*, i64** %Sp_Var
  %lnedY = getelementptr inbounds i64, i64* %lnedX, i32 -7
  %lnedZ = ptrtoint i64* %lnedY to i64
  %lnee0 = inttoptr i64 %lnedZ to i64*
  store i64* %lnee0, i64** %Sp_Var
  %lnee1 = load i64, i64* %R1_Var
  %lnee2 = and i64 %lnee1, 7
  %lnee3 = icmp ne i64 %lnee2, 0
  br i1 %lnee3, label %udwI, label %cdvZ
cdvZ:
  %lnee5 = load i64, i64* %R1_Var
  %lnee6 = inttoptr i64 %lnee5 to i64*
  %lnee7 = load i64, i64* %lnee6, !tbaa !4
  %lnee8 = inttoptr i64 %lnee7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnee9 = load i64*, i64** %Sp_Var
  %lneea = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnee8( i64* %Base_Arg, i64* %lnee9, i64* %Hp_Arg, i64 %lneea, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udwI:
  %lneeb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneec = load i64*, i64** %Sp_Var
  %lneed = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneeb( i64* %Base_Arg, i64* %lneec, i64* %Hp_Arg, i64 %lneed, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdwz:
  %lneee = load i64, i64* %R1_Var
  store i64 %lneee, i64* %R1_Var
  %lneef = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lneeg = bitcast i64* %lneef to i64*
  %lneeh = load i64, i64* %lneeg, !tbaa !5
  %lneei = inttoptr i64 %lneeh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneej = load i64*, i64** %Sp_Var
  %lneek = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneei( i64* %Base_Arg, i64* %lneej, i64* %Hp_Arg, i64 %lneek, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdvY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdvY_info$def to i8*)
define internal ghccc void @cdvY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 132, i32 30, i32 0}>
{
neel:
  %ls7Ic = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdvY
cdvY:
  %lneem = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw4_info$def to i64
  %lneen = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneem, i64* %lneen, !tbaa !2
  %lneeq = load i64, i64* %R1_Var
  %lneer = add i64 %lneeq, 7
  %lnees = inttoptr i64 %lneer to double*
  %lneet = load double, double* %lnees, !tbaa !4
  store double %lneet, double* %ls7Ic
  %lneeu = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneev = bitcast i64* %lneeu to i64*
  %lneew = load i64, i64* %lneev, !tbaa !2
  store i64 %lneew, i64* %R1_Var
  %lneex = load double, double* %ls7Ic
  %lneey = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneez = bitcast i64* %lneey to double*
  store double %lneex, double* %lneez, !tbaa !2
  %lneeA = load i64, i64* %R1_Var
  %lneeB = and i64 %lneeA, 7
  %lneeC = icmp ne i64 %lneeB, 0
  br i1 %lneeC, label %udwH, label %cdw5
cdw5:
  %lneeE = load i64, i64* %R1_Var
  %lneeF = inttoptr i64 %lneeE to i64*
  %lneeG = load i64, i64* %lneeF, !tbaa !4
  %lneeH = inttoptr i64 %lneeG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneeI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneeH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneeI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udwH:
  %lneeJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneeK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneeJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneeK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdw4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw4_info$def to i8*)
define internal ghccc void @cdw4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 196, i32 30, i32 0}>
{
neeL:
  %ls7Ie = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdw4
cdw4:
  %lneeM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw9_info$def to i64
  %lneeN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneeM, i64* %lneeN, !tbaa !2
  %lneeQ = load i64, i64* %R1_Var
  %lneeR = add i64 %lneeQ, 7
  %lneeS = inttoptr i64 %lneeR to double*
  %lneeT = load double, double* %lneeS, !tbaa !4
  store double %lneeT, double* %ls7Ie
  %lneeU = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lneeV = bitcast i64* %lneeU to i64*
  %lneeW = load i64, i64* %lneeV, !tbaa !2
  store i64 %lneeW, i64* %R1_Var
  %lneeX = load double, double* %ls7Ie
  %lneeY = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lneeZ = bitcast i64* %lneeY to double*
  store double %lneeX, double* %lneeZ, !tbaa !2
  %lnef0 = load i64, i64* %R1_Var
  %lnef1 = and i64 %lnef0, 7
  %lnef2 = icmp ne i64 %lnef1, 0
  br i1 %lnef2, label %udwJ, label %cdwa
cdwa:
  %lnef4 = load i64, i64* %R1_Var
  %lnef5 = inttoptr i64 %lnef4 to i64*
  %lnef6 = load i64, i64* %lnef5, !tbaa !4
  %lnef7 = inttoptr i64 %lnef6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnef8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnef7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnef8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udwJ:
  %lnef9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnefa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnef9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnefa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdw9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdw9_info$def to i8*)
define internal ghccc void @cdw9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 708, i32 30, i32 0}>
{
nefb:
  %ls7Ig = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdw9
cdw9:
  %lnefc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwe_info$def to i64
  %lnefd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnefc, i64* %lnefd, !tbaa !2
  %lnefg = load i64, i64* %R1_Var
  %lnefh = add i64 %lnefg, 7
  %lnefi = inttoptr i64 %lnefh to double*
  %lnefj = load double, double* %lnefi, !tbaa !4
  store double %lnefj, double* %ls7Ig
  %lnefk = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnefl = bitcast i64* %lnefk to i64*
  %lnefm = load i64, i64* %lnefl, !tbaa !2
  store i64 %lnefm, i64* %R1_Var
  %lnefn = load double, double* %ls7Ig
  %lnefo = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnefp = bitcast i64* %lnefo to double*
  store double %lnefn, double* %lnefp, !tbaa !2
  %lnefq = load i64, i64* %R1_Var
  %lnefr = and i64 %lnefq, 7
  %lnefs = icmp ne i64 %lnefr, 0
  br i1 %lnefs, label %udwK, label %cdwf
cdwf:
  %lnefu = load i64, i64* %R1_Var
  %lnefv = inttoptr i64 %lnefu to i64*
  %lnefw = load i64, i64* %lnefv, !tbaa !4
  %lnefx = inttoptr i64 %lnefw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnefy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnefx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnefy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udwK:
  %lnefz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnefA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnefz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnefA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwe_info$def to i8*)
define internal ghccc void @cdwe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
nefB:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ie = alloca double, i32 1
  %ls7In = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdwe
cdwe:
  %lnefC = load i64*, i64** %Hp_Var
  %lnefD = getelementptr inbounds i64, i64* %lnefC, i32 2
  %lnefE = ptrtoint i64* %lnefD to i64
  %lnefF = inttoptr i64 %lnefE to i64*
  store i64* %lnefF, i64** %Hp_Var
  %lnefG = load i64*, i64** %Hp_Var
  %lnefH = ptrtoint i64* %lnefG to i64
  %lnefI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnefJ = bitcast i64* %lnefI to i64*
  %lnefK = load i64, i64* %lnefJ, !tbaa !5
  %lnefL = icmp ugt i64 %lnefH, %lnefK
  %lnefM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnefL, i1 0 )
  br i1 %lnefM, label %cdwG, label %cdwF
cdwF:
  %lnefN = load i64*, i64** %Sp_Var
  %lnefO = getelementptr inbounds i64, i64* %lnefN, i32 4
  %lnefP = bitcast i64* %lnefO to double*
  %lnefQ = load double, double* %lnefP, !tbaa !2
  store double %lnefQ, double* %ls7Ie
  %lnefR = load i64*, i64** %Sp_Var
  %lnefS = getelementptr inbounds i64, i64* %lnefR, i32 2
  %lnefT = bitcast i64* %lnefS to double*
  %lnefU = load double, double* %lnefT, !tbaa !2
  %lnefV = load i64*, i64** %Sp_Var
  %lnefW = getelementptr inbounds i64, i64* %lnefV, i32 1
  %lnefX = bitcast i64* %lnefW to double*
  %lnefY = load double, double* %lnefX, !tbaa !2
  %lnefZ = fmul double %lnefU, %lnefY
  %lneg0 = load double, double* %ls7Ie
  %lneg1 = fmul double %lnefZ, %lneg0
  %lneg2 = load i64*, i64** %Sp_Var
  %lneg3 = getelementptr inbounds i64, i64* %lneg2, i32 3
  %lneg4 = bitcast i64* %lneg3 to double*
  %lneg5 = load double, double* %lneg4, !tbaa !2
  %lneg8 = load i64, i64* %R1_Var
  %lneg9 = add i64 %lneg8, 7
  %lnega = inttoptr i64 %lneg9 to double*
  %lnegb = load double, double* %lnega, !tbaa !4
  %lnegc = fmul double %lneg5, %lnegb
  %lnegd = load double, double* %ls7Ie
  %lnege = fmul double %lnegc, %lnegd
  %lnegf = fadd double %lneg1, %lnege
  store double %lnegf, double* %ls7In
  %lnegh = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnegg = load i64*, i64** %Hp_Var
  %lnegi = getelementptr inbounds i64, i64* %lnegg, i32 -1
  store i64 %lnegh, i64* %lnegi, !tbaa !3
  %lnegk = load double, double* %ls7In
  %lnegj = load i64*, i64** %Hp_Var
  %lnegl = getelementptr inbounds i64, i64* %lnegj, i32 0
  %lnegm = bitcast i64* %lnegl to double*
  store double %lnegk, double* %lnegm, !tbaa !3
  %lnego = load i64*, i64** %Hp_Var
  %lnegp = ptrtoint i64* %lnego to i64
  %lnegq = add i64 %lnegp, -7
  store i64 %lnegq, i64* %R1_Var
  %lnegr = load i64*, i64** %Sp_Var
  %lnegs = getelementptr inbounds i64, i64* %lnegr, i32 5
  %lnegt = ptrtoint i64* %lnegs to i64
  %lnegu = inttoptr i64 %lnegt to i64*
  store i64* %lnegu, i64** %Sp_Var
  %lnegv = load i64*, i64** %Sp_Var
  %lnegw = getelementptr inbounds i64, i64* %lnegv, i32 0
  %lnegx = bitcast i64* %lnegw to i64*
  %lnegy = load i64, i64* %lnegx, !tbaa !2
  %lnegz = inttoptr i64 %lnegy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnegA = load i64*, i64** %Sp_Var
  %lnegB = load i64*, i64** %Hp_Var
  %lnegC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnegz( i64* %Base_Arg, i64* %lnegA, i64* %lnegB, i64 %lnegC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdwG:
  %lnegD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnegD, !tbaa !5
  %lnegE = load i64, i64* %R1_Var
  store i64 %lnegE, i64* %R1_Var
  %lnegF = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnegG = load i64*, i64** %Sp_Var
  %lnegH = load i64*, i64** %Hp_Var
  %lnegI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnegF( i64* %Base_Arg, i64* %lnegG, i64* %lnegH, i64 %lnegI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Jp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Jp_info$def to i8*)
define internal ghccc void @s7Jp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
negJ:
  %ls7Hz = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdwT
cdwT:
  %lnegK = load i64*, i64** %Sp_Var
  %lnegL = getelementptr inbounds i64, i64* %lnegK, i32 -5
  %lnegM = ptrtoint i64* %lnegL to i64
  %lnegN = icmp ult i64 %lnegM, %SpLim_Arg
  %lnegO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnegN, i1 0 )
  br i1 %lnegO, label %cdx8, label %cdx9
cdx9:
  %lnegQ = ptrtoint i8* @stg_upd_frame_info to i64
  %lnegP = load i64*, i64** %Sp_Var
  %lnegR = getelementptr inbounds i64, i64* %lnegP, i32 -2
  store i64 %lnegQ, i64* %lnegR, !tbaa !2
  %lnegT = load i64, i64* %R1_Var
  %lnegS = load i64*, i64** %Sp_Var
  %lnegU = getelementptr inbounds i64, i64* %lnegS, i32 -1
  store i64 %lnegT, i64* %lnegU, !tbaa !2
  %lnegW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to i64
  %lnegV = load i64*, i64** %Sp_Var
  %lnegX = getelementptr inbounds i64, i64* %lnegV, i32 -5
  store i64 %lnegW, i64* %lnegX, !tbaa !2
  %lneh0 = load i64, i64* %R1_Var
  %lneh1 = add i64 %lneh0, 16
  %lneh2 = inttoptr i64 %lneh1 to i64*
  %lneh3 = load i64, i64* %lneh2, !tbaa !4
  store i64 %lneh3, i64* %ls7Hz
  %lneh6 = load i64, i64* %R1_Var
  %lneh7 = add i64 %lneh6, 32
  %lneh8 = inttoptr i64 %lneh7 to double*
  %lneh9 = load double, double* %lneh8, !tbaa !4
  store double %lneh9, double* %ls7HQ
  %lnehc = load i64, i64* %R1_Var
  %lnehd = add i64 %lnehc, 24
  %lnehe = inttoptr i64 %lnehd to i64*
  %lnehf = load i64, i64* %lnehe, !tbaa !4
  store i64 %lnehf, i64* %R1_Var
  %lnehh = load i64, i64* %ls7Hz
  %lnehg = load i64*, i64** %Sp_Var
  %lnehi = getelementptr inbounds i64, i64* %lnehg, i32 -4
  store i64 %lnehh, i64* %lnehi, !tbaa !2
  %lnehk = load double, double* %ls7HQ
  %lnehj = load i64*, i64** %Sp_Var
  %lnehl = getelementptr inbounds i64, i64* %lnehj, i32 -3
  %lnehm = bitcast i64* %lnehl to double*
  store double %lnehk, double* %lnehm, !tbaa !2
  %lnehn = load i64*, i64** %Sp_Var
  %lneho = getelementptr inbounds i64, i64* %lnehn, i32 -5
  %lnehp = ptrtoint i64* %lneho to i64
  %lnehq = inttoptr i64 %lnehp to i64*
  store i64* %lnehq, i64** %Sp_Var
  %lnehr = load i64, i64* %R1_Var
  %lnehs = and i64 %lnehr, 7
  %lneht = icmp ne i64 %lnehs, 0
  br i1 %lneht, label %udxf, label %cdwR
cdwR:
  %lnehv = load i64, i64* %R1_Var
  %lnehw = inttoptr i64 %lnehv to i64*
  %lnehx = load i64, i64* %lnehw, !tbaa !4
  %lnehy = inttoptr i64 %lnehx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnehz = load i64*, i64** %Sp_Var
  %lnehA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnehy( i64* %Base_Arg, i64* %lnehz, i64* %Hp_Arg, i64 %lnehA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udxf:
  %lnehB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnehC = load i64*, i64** %Sp_Var
  %lnehD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnehB( i64* %Base_Arg, i64* %lnehC, i64* %Hp_Arg, i64 %lnehD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdx8:
  %lnehE = load i64, i64* %R1_Var
  store i64 %lnehE, i64* %R1_Var
  %lnehF = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnehG = bitcast i64* %lnehF to i64*
  %lnehH = load i64, i64* %lnehG, !tbaa !5
  %lnehI = inttoptr i64 %lnehH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnehJ = load i64*, i64** %Sp_Var
  %lnehK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnehI( i64* %Base_Arg, i64* %lnehJ, i64* %Hp_Arg, i64 %lnehK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to i8*)
define internal ghccc void @cdwQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nehL:
  %ls7Jk = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdwQ
cdwQ:
  %lnehM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwW_info$def to i64
  %lnehN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnehM, i64* %lnehN, !tbaa !2
  %lnehQ = load i64, i64* %R1_Var
  %lnehR = add i64 %lnehQ, 7
  %lnehS = inttoptr i64 %lnehR to double*
  %lnehT = load double, double* %lnehS, !tbaa !4
  store double %lnehT, double* %ls7Jk
  %lnehU = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnehV = bitcast i64* %lnehU to i64*
  %lnehW = load i64, i64* %lnehV, !tbaa !2
  store i64 %lnehW, i64* %R1_Var
  %lnehX = load double, double* %ls7Jk
  %lnehY = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnehZ = bitcast i64* %lnehY to double*
  store double %lnehX, double* %lnehZ, !tbaa !2
  %lnei0 = load i64, i64* %R1_Var
  %lnei1 = and i64 %lnei0, 7
  %lnei2 = icmp ne i64 %lnei1, 0
  br i1 %lnei2, label %udxe, label %cdwX
cdwX:
  %lnei4 = load i64, i64* %R1_Var
  %lnei5 = inttoptr i64 %lnei4 to i64*
  %lnei6 = load i64, i64* %lnei5, !tbaa !4
  %lnei7 = inttoptr i64 %lnei6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnei8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnei7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnei8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udxe:
  %lnei9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneia = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnei9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneia, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwW_info$def to i8*)
define internal ghccc void @cdwW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
neib:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Jo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdwW
cdwW:
  %lneic = load i64*, i64** %Hp_Var
  %lneid = getelementptr inbounds i64, i64* %lneic, i32 2
  %lneie = ptrtoint i64* %lneid to i64
  %lneif = inttoptr i64 %lneie to i64*
  store i64* %lneif, i64** %Hp_Var
  %lneig = load i64*, i64** %Hp_Var
  %lneih = ptrtoint i64* %lneig to i64
  %lneii = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneij = bitcast i64* %lneii to i64*
  %lneik = load i64, i64* %lneij, !tbaa !5
  %lneil = icmp ugt i64 %lneih, %lneik
  %lneim = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneil, i1 0 )
  br i1 %lneim, label %cdxd, label %cdxc
cdxc:
  %lnein = load i64*, i64** %Sp_Var
  %lneio = getelementptr inbounds i64, i64* %lnein, i32 2
  %lneip = bitcast i64* %lneio to double*
  %lneiq = load double, double* %lneip, !tbaa !2
  %lneir = load i64*, i64** %Sp_Var
  %lneis = getelementptr inbounds i64, i64* %lneir, i32 1
  %lneit = bitcast i64* %lneis to double*
  %lneiu = load double, double* %lneit, !tbaa !2
  %lneiv = fmul double %lneiq, %lneiu
  %lneiy = load i64, i64* %R1_Var
  %lneiz = add i64 %lneiy, 7
  %lneiA = inttoptr i64 %lneiz to double*
  %lneiB = load double, double* %lneiA, !tbaa !4
  %lneiC = fmul double %lneiv, %lneiB
  store double %lneiC, double* %ls7Jo
  %lneiE = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lneiD = load i64*, i64** %Hp_Var
  %lneiF = getelementptr inbounds i64, i64* %lneiD, i32 -1
  store i64 %lneiE, i64* %lneiF, !tbaa !3
  %lneiH = load double, double* %ls7Jo
  %lneiG = load i64*, i64** %Hp_Var
  %lneiI = getelementptr inbounds i64, i64* %lneiG, i32 0
  %lneiJ = bitcast i64* %lneiI to double*
  store double %lneiH, double* %lneiJ, !tbaa !3
  %lneiL = load i64*, i64** %Hp_Var
  %lneiM = ptrtoint i64* %lneiL to i64
  %lneiN = add i64 %lneiM, -7
  store i64 %lneiN, i64* %R1_Var
  %lneiO = load i64*, i64** %Sp_Var
  %lneiP = getelementptr inbounds i64, i64* %lneiO, i32 3
  %lneiQ = ptrtoint i64* %lneiP to i64
  %lneiR = inttoptr i64 %lneiQ to i64*
  store i64* %lneiR, i64** %Sp_Var
  %lneiS = load i64*, i64** %Sp_Var
  %lneiT = getelementptr inbounds i64, i64* %lneiS, i32 0
  %lneiU = bitcast i64* %lneiT to i64*
  %lneiV = load i64, i64* %lneiU, !tbaa !2
  %lneiW = inttoptr i64 %lneiV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneiX = load i64*, i64** %Sp_Var
  %lneiY = load i64*, i64** %Hp_Var
  %lneiZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneiW( i64* %Base_Arg, i64* %lneiX, i64* %lneiY, i64 %lneiZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxd:
  %lnej0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnej0, !tbaa !5
  %lnej1 = load i64, i64* %R1_Var
  store i64 %lnej1, i64* %R1_Var
  %lnej2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnej3 = load i64*, i64** %Sp_Var
  %lnej4 = load i64*, i64** %Hp_Var
  %lnej5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnej2( i64* %Base_Arg, i64* %lnej3, i64* %lnej4, i64 %lnej5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ji_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ji_info$def to i8*)
define internal ghccc void @s7Ji_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
nej6:
  %ls7Hy = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdxn
cdxn:
  %lnej7 = load i64*, i64** %Sp_Var
  %lnej8 = getelementptr inbounds i64, i64* %lnej7, i32 -5
  %lnej9 = ptrtoint i64* %lnej8 to i64
  %lneja = icmp ult i64 %lnej9, %SpLim_Arg
  %lnejb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneja, i1 0 )
  br i1 %lnejb, label %cdxC, label %cdxD
cdxD:
  %lnejd = ptrtoint i8* @stg_upd_frame_info to i64
  %lnejc = load i64*, i64** %Sp_Var
  %lneje = getelementptr inbounds i64, i64* %lnejc, i32 -2
  store i64 %lnejd, i64* %lneje, !tbaa !2
  %lnejg = load i64, i64* %R1_Var
  %lnejf = load i64*, i64** %Sp_Var
  %lnejh = getelementptr inbounds i64, i64* %lnejf, i32 -1
  store i64 %lnejg, i64* %lnejh, !tbaa !2
  %lnejj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxk_info$def to i64
  %lneji = load i64*, i64** %Sp_Var
  %lnejk = getelementptr inbounds i64, i64* %lneji, i32 -5
  store i64 %lnejj, i64* %lnejk, !tbaa !2
  %lnejn = load i64, i64* %R1_Var
  %lnejo = add i64 %lnejn, 16
  %lnejp = inttoptr i64 %lnejo to i64*
  %lnejq = load i64, i64* %lnejp, !tbaa !4
  store i64 %lnejq, i64* %ls7Hy
  %lnejt = load i64, i64* %R1_Var
  %lneju = add i64 %lnejt, 32
  %lnejv = inttoptr i64 %lneju to double*
  %lnejw = load double, double* %lnejv, !tbaa !4
  store double %lnejw, double* %ls7HQ
  %lnejz = load i64, i64* %R1_Var
  %lnejA = add i64 %lnejz, 24
  %lnejB = inttoptr i64 %lnejA to i64*
  %lnejC = load i64, i64* %lnejB, !tbaa !4
  store i64 %lnejC, i64* %R1_Var
  %lnejE = load i64, i64* %ls7Hy
  %lnejD = load i64*, i64** %Sp_Var
  %lnejF = getelementptr inbounds i64, i64* %lnejD, i32 -4
  store i64 %lnejE, i64* %lnejF, !tbaa !2
  %lnejH = load double, double* %ls7HQ
  %lnejG = load i64*, i64** %Sp_Var
  %lnejI = getelementptr inbounds i64, i64* %lnejG, i32 -3
  %lnejJ = bitcast i64* %lnejI to double*
  store double %lnejH, double* %lnejJ, !tbaa !2
  %lnejK = load i64*, i64** %Sp_Var
  %lnejL = getelementptr inbounds i64, i64* %lnejK, i32 -5
  %lnejM = ptrtoint i64* %lnejL to i64
  %lnejN = inttoptr i64 %lnejM to i64*
  store i64* %lnejN, i64** %Sp_Var
  %lnejO = load i64, i64* %R1_Var
  %lnejP = and i64 %lnejO, 7
  %lnejQ = icmp ne i64 %lnejP, 0
  br i1 %lnejQ, label %udxJ, label %cdxl
cdxl:
  %lnejS = load i64, i64* %R1_Var
  %lnejT = inttoptr i64 %lnejS to i64*
  %lnejU = load i64, i64* %lnejT, !tbaa !4
  %lnejV = inttoptr i64 %lnejU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnejW = load i64*, i64** %Sp_Var
  %lnejX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnejV( i64* %Base_Arg, i64* %lnejW, i64* %Hp_Arg, i64 %lnejX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udxJ:
  %lnejY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnejZ = load i64*, i64** %Sp_Var
  %lnek0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnejY( i64* %Base_Arg, i64* %lnejZ, i64* %Hp_Arg, i64 %lnek0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxC:
  %lnek1 = load i64, i64* %R1_Var
  store i64 %lnek1, i64* %R1_Var
  %lnek2 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnek3 = bitcast i64* %lnek2 to i64*
  %lnek4 = load i64, i64* %lnek3, !tbaa !5
  %lnek5 = inttoptr i64 %lnek4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnek6 = load i64*, i64** %Sp_Var
  %lnek7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnek5( i64* %Base_Arg, i64* %lnek6, i64* %Hp_Arg, i64 %lnek7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxk_info$def to i8*)
define internal ghccc void @cdxk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nek8:
  %ls7Jd = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdxk
cdxk:
  %lnek9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxq_info$def to i64
  %lneka = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnek9, i64* %lneka, !tbaa !2
  %lnekd = load i64, i64* %R1_Var
  %lneke = add i64 %lnekd, 7
  %lnekf = inttoptr i64 %lneke to double*
  %lnekg = load double, double* %lnekf, !tbaa !4
  store double %lnekg, double* %ls7Jd
  %lnekh = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneki = bitcast i64* %lnekh to i64*
  %lnekj = load i64, i64* %lneki, !tbaa !2
  store i64 %lnekj, i64* %R1_Var
  %lnekk = load double, double* %ls7Jd
  %lnekl = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnekm = bitcast i64* %lnekl to double*
  store double %lnekk, double* %lnekm, !tbaa !2
  %lnekn = load i64, i64* %R1_Var
  %lneko = and i64 %lnekn, 7
  %lnekp = icmp ne i64 %lneko, 0
  br i1 %lnekp, label %udxI, label %cdxr
cdxr:
  %lnekr = load i64, i64* %R1_Var
  %lneks = inttoptr i64 %lnekr to i64*
  %lnekt = load i64, i64* %lneks, !tbaa !4
  %lneku = inttoptr i64 %lnekt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnekv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneku( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnekv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udxI:
  %lnekw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnekx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnekw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnekx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxq_info$def to i8*)
define internal ghccc void @cdxq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
neky:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Jh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdxq
cdxq:
  %lnekz = load i64*, i64** %Hp_Var
  %lnekA = getelementptr inbounds i64, i64* %lnekz, i32 2
  %lnekB = ptrtoint i64* %lnekA to i64
  %lnekC = inttoptr i64 %lnekB to i64*
  store i64* %lnekC, i64** %Hp_Var
  %lnekD = load i64*, i64** %Hp_Var
  %lnekE = ptrtoint i64* %lnekD to i64
  %lnekF = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnekG = bitcast i64* %lnekF to i64*
  %lnekH = load i64, i64* %lnekG, !tbaa !5
  %lnekI = icmp ugt i64 %lnekE, %lnekH
  %lnekJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnekI, i1 0 )
  br i1 %lnekJ, label %cdxH, label %cdxG
cdxG:
  %lnekK = load i64*, i64** %Sp_Var
  %lnekL = getelementptr inbounds i64, i64* %lnekK, i32 2
  %lnekM = bitcast i64* %lnekL to double*
  %lnekN = load double, double* %lnekM, !tbaa !2
  %lnekO = load i64*, i64** %Sp_Var
  %lnekP = getelementptr inbounds i64, i64* %lnekO, i32 1
  %lnekQ = bitcast i64* %lnekP to double*
  %lnekR = load double, double* %lnekQ, !tbaa !2
  %lnekS = fmul double %lnekN, %lnekR
  %lnekV = load i64, i64* %R1_Var
  %lnekW = add i64 %lnekV, 7
  %lnekX = inttoptr i64 %lnekW to double*
  %lnekY = load double, double* %lnekX, !tbaa !4
  %lnekZ = fmul double %lnekS, %lnekY
  store double %lnekZ, double* %ls7Jh
  %lnel1 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnel0 = load i64*, i64** %Hp_Var
  %lnel2 = getelementptr inbounds i64, i64* %lnel0, i32 -1
  store i64 %lnel1, i64* %lnel2, !tbaa !3
  %lnel4 = load double, double* %ls7Jh
  %lnel3 = load i64*, i64** %Hp_Var
  %lnel5 = getelementptr inbounds i64, i64* %lnel3, i32 0
  %lnel6 = bitcast i64* %lnel5 to double*
  store double %lnel4, double* %lnel6, !tbaa !3
  %lnel8 = load i64*, i64** %Hp_Var
  %lnel9 = ptrtoint i64* %lnel8 to i64
  %lnela = add i64 %lnel9, -7
  store i64 %lnela, i64* %R1_Var
  %lnelb = load i64*, i64** %Sp_Var
  %lnelc = getelementptr inbounds i64, i64* %lnelb, i32 3
  %lneld = ptrtoint i64* %lnelc to i64
  %lnele = inttoptr i64 %lneld to i64*
  store i64* %lnele, i64** %Sp_Var
  %lnelf = load i64*, i64** %Sp_Var
  %lnelg = getelementptr inbounds i64, i64* %lnelf, i32 0
  %lnelh = bitcast i64* %lnelg to i64*
  %lneli = load i64, i64* %lnelh, !tbaa !2
  %lnelj = inttoptr i64 %lneli to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnelk = load i64*, i64** %Sp_Var
  %lnell = load i64*, i64** %Hp_Var
  %lnelm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnelj( i64* %Base_Arg, i64* %lnelk, i64* %lnell, i64 %lnelm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxH:
  %lneln = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lneln, !tbaa !5
  %lnelo = load i64, i64* %R1_Var
  store i64 %lnelo, i64* %R1_Var
  %lnelp = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnelq = load i64*, i64** %Sp_Var
  %lnelr = load i64*, i64** %Hp_Var
  %lnels = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnelp( i64* %Base_Arg, i64* %lnelq, i64* %lnelr, i64 %lnels, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Jb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Jb_info$def to i8*)
define internal ghccc void @s7Jb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
nelt:
  %ls7Hx = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdxR
cdxR:
  %lnelu = load i64*, i64** %Sp_Var
  %lnelv = getelementptr inbounds i64, i64* %lnelu, i32 -5
  %lnelw = ptrtoint i64* %lnelv to i64
  %lnelx = icmp ult i64 %lnelw, %SpLim_Arg
  %lnely = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnelx, i1 0 )
  br i1 %lnely, label %cdy6, label %cdy7
cdy7:
  %lnelA = ptrtoint i8* @stg_upd_frame_info to i64
  %lnelz = load i64*, i64** %Sp_Var
  %lnelB = getelementptr inbounds i64, i64* %lnelz, i32 -2
  store i64 %lnelA, i64* %lnelB, !tbaa !2
  %lnelD = load i64, i64* %R1_Var
  %lnelC = load i64*, i64** %Sp_Var
  %lnelE = getelementptr inbounds i64, i64* %lnelC, i32 -1
  store i64 %lnelD, i64* %lnelE, !tbaa !2
  %lnelG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxO_info$def to i64
  %lnelF = load i64*, i64** %Sp_Var
  %lnelH = getelementptr inbounds i64, i64* %lnelF, i32 -5
  store i64 %lnelG, i64* %lnelH, !tbaa !2
  %lnelK = load i64, i64* %R1_Var
  %lnelL = add i64 %lnelK, 16
  %lnelM = inttoptr i64 %lnelL to i64*
  %lnelN = load i64, i64* %lnelM, !tbaa !4
  store i64 %lnelN, i64* %ls7Hx
  %lnelQ = load i64, i64* %R1_Var
  %lnelR = add i64 %lnelQ, 32
  %lnelS = inttoptr i64 %lnelR to double*
  %lnelT = load double, double* %lnelS, !tbaa !4
  store double %lnelT, double* %ls7HQ
  %lnelW = load i64, i64* %R1_Var
  %lnelX = add i64 %lnelW, 24
  %lnelY = inttoptr i64 %lnelX to i64*
  %lnelZ = load i64, i64* %lnelY, !tbaa !4
  store i64 %lnelZ, i64* %R1_Var
  %lnem1 = load i64, i64* %ls7Hx
  %lnem0 = load i64*, i64** %Sp_Var
  %lnem2 = getelementptr inbounds i64, i64* %lnem0, i32 -4
  store i64 %lnem1, i64* %lnem2, !tbaa !2
  %lnem4 = load double, double* %ls7HQ
  %lnem3 = load i64*, i64** %Sp_Var
  %lnem5 = getelementptr inbounds i64, i64* %lnem3, i32 -3
  %lnem6 = bitcast i64* %lnem5 to double*
  store double %lnem4, double* %lnem6, !tbaa !2
  %lnem7 = load i64*, i64** %Sp_Var
  %lnem8 = getelementptr inbounds i64, i64* %lnem7, i32 -5
  %lnem9 = ptrtoint i64* %lnem8 to i64
  %lnema = inttoptr i64 %lnem9 to i64*
  store i64* %lnema, i64** %Sp_Var
  %lnemb = load i64, i64* %R1_Var
  %lnemc = and i64 %lnemb, 7
  %lnemd = icmp ne i64 %lnemc, 0
  br i1 %lnemd, label %udyd, label %cdxP
cdxP:
  %lnemf = load i64, i64* %R1_Var
  %lnemg = inttoptr i64 %lnemf to i64*
  %lnemh = load i64, i64* %lnemg, !tbaa !4
  %lnemi = inttoptr i64 %lnemh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnemj = load i64*, i64** %Sp_Var
  %lnemk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnemi( i64* %Base_Arg, i64* %lnemj, i64* %Hp_Arg, i64 %lnemk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udyd:
  %lneml = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnemm = load i64*, i64** %Sp_Var
  %lnemn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneml( i64* %Base_Arg, i64* %lnemm, i64* %Hp_Arg, i64 %lnemn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdy6:
  %lnemo = load i64, i64* %R1_Var
  store i64 %lnemo, i64* %R1_Var
  %lnemp = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnemq = bitcast i64* %lnemp to i64*
  %lnemr = load i64, i64* %lnemq, !tbaa !5
  %lnems = inttoptr i64 %lnemr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnemt = load i64*, i64** %Sp_Var
  %lnemu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnems( i64* %Base_Arg, i64* %lnemt, i64* %Hp_Arg, i64 %lnemu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxO_info$def to i8*)
define internal ghccc void @cdxO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nemv:
  %ls7J6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdxO
cdxO:
  %lnemw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxU_info$def to i64
  %lnemx = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnemw, i64* %lnemx, !tbaa !2
  %lnemA = load i64, i64* %R1_Var
  %lnemB = add i64 %lnemA, 7
  %lnemC = inttoptr i64 %lnemB to double*
  %lnemD = load double, double* %lnemC, !tbaa !4
  store double %lnemD, double* %ls7J6
  %lnemE = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnemF = bitcast i64* %lnemE to i64*
  %lnemG = load i64, i64* %lnemF, !tbaa !2
  store i64 %lnemG, i64* %R1_Var
  %lnemH = load double, double* %ls7J6
  %lnemI = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnemJ = bitcast i64* %lnemI to double*
  store double %lnemH, double* %lnemJ, !tbaa !2
  %lnemK = load i64, i64* %R1_Var
  %lnemL = and i64 %lnemK, 7
  %lnemM = icmp ne i64 %lnemL, 0
  br i1 %lnemM, label %udyc, label %cdxV
cdxV:
  %lnemO = load i64, i64* %R1_Var
  %lnemP = inttoptr i64 %lnemO to i64*
  %lnemQ = load i64, i64* %lnemP, !tbaa !4
  %lnemR = inttoptr i64 %lnemQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnemS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnemR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnemS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udyc:
  %lnemT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnemU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnemT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnemU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxU_info$def to i8*)
define internal ghccc void @cdxU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nemV:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ja = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdxU
cdxU:
  %lnemW = load i64*, i64** %Hp_Var
  %lnemX = getelementptr inbounds i64, i64* %lnemW, i32 2
  %lnemY = ptrtoint i64* %lnemX to i64
  %lnemZ = inttoptr i64 %lnemY to i64*
  store i64* %lnemZ, i64** %Hp_Var
  %lnen0 = load i64*, i64** %Hp_Var
  %lnen1 = ptrtoint i64* %lnen0 to i64
  %lnen2 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnen3 = bitcast i64* %lnen2 to i64*
  %lnen4 = load i64, i64* %lnen3, !tbaa !5
  %lnen5 = icmp ugt i64 %lnen1, %lnen4
  %lnen6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnen5, i1 0 )
  br i1 %lnen6, label %cdyb, label %cdya
cdya:
  %lnen7 = load i64*, i64** %Sp_Var
  %lnen8 = getelementptr inbounds i64, i64* %lnen7, i32 2
  %lnen9 = bitcast i64* %lnen8 to double*
  %lnena = load double, double* %lnen9, !tbaa !2
  %lnenb = load i64*, i64** %Sp_Var
  %lnenc = getelementptr inbounds i64, i64* %lnenb, i32 1
  %lnend = bitcast i64* %lnenc to double*
  %lnene = load double, double* %lnend, !tbaa !2
  %lnenf = fmul double %lnena, %lnene
  %lneni = load i64, i64* %R1_Var
  %lnenj = add i64 %lneni, 7
  %lnenk = inttoptr i64 %lnenj to double*
  %lnenl = load double, double* %lnenk, !tbaa !4
  %lnenm = fmul double %lnenf, %lnenl
  store double %lnenm, double* %ls7Ja
  %lneno = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnenn = load i64*, i64** %Hp_Var
  %lnenp = getelementptr inbounds i64, i64* %lnenn, i32 -1
  store i64 %lneno, i64* %lnenp, !tbaa !3
  %lnenr = load double, double* %ls7Ja
  %lnenq = load i64*, i64** %Hp_Var
  %lnens = getelementptr inbounds i64, i64* %lnenq, i32 0
  %lnent = bitcast i64* %lnens to double*
  store double %lnenr, double* %lnent, !tbaa !3
  %lnenv = load i64*, i64** %Hp_Var
  %lnenw = ptrtoint i64* %lnenv to i64
  %lnenx = add i64 %lnenw, -7
  store i64 %lnenx, i64* %R1_Var
  %lneny = load i64*, i64** %Sp_Var
  %lnenz = getelementptr inbounds i64, i64* %lneny, i32 3
  %lnenA = ptrtoint i64* %lnenz to i64
  %lnenB = inttoptr i64 %lnenA to i64*
  store i64* %lnenB, i64** %Sp_Var
  %lnenC = load i64*, i64** %Sp_Var
  %lnenD = getelementptr inbounds i64, i64* %lnenC, i32 0
  %lnenE = bitcast i64* %lnenD to i64*
  %lnenF = load i64, i64* %lnenE, !tbaa !2
  %lnenG = inttoptr i64 %lnenF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnenH = load i64*, i64** %Sp_Var
  %lnenI = load i64*, i64** %Hp_Var
  %lnenJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnenG( i64* %Base_Arg, i64* %lnenH, i64* %lnenI, i64 %lnenJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyb:
  %lnenK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnenK, !tbaa !5
  %lnenL = load i64, i64* %R1_Var
  store i64 %lnenL, i64* %R1_Var
  %lnenM = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnenN = load i64*, i64** %Sp_Var
  %lnenO = load i64*, i64** %Hp_Var
  %lnenP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnenM( i64* %Base_Arg, i64* %lnenN, i64* %lnenO, i64 %lnenP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwlightray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightray_info$def to i8*)
define ghccc void @Main_zdwlightray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 21474836505, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshadowed_closure_struct* @Main_zdwshadowed_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightray_info$def to i64)) to i32),i32 0)}>
{
nenQ:
  %ls7ED = alloca i64, i32 1
  %ls7EC = alloca i64, i32 1
  %ls7EB = alloca i64, i32 1
  %ls7EA = alloca i64, i32 1
  %ls7Ez = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %lcdkb = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdyi
cdyi:
  %lnenR = load i64, i64* %R6_Var
  store i64 %lnenR, i64* %ls7ED
  %lnenS = load i64, i64* %R5_Var
  store i64 %lnenS, i64* %ls7EC
  %lnenT = load i64, i64* %R4_Var
  store i64 %lnenT, i64* %ls7EB
  %lnenU = load i64, i64* %R3_Var
  store i64 %lnenU, i64* %ls7EA
  %lnenV = load i64, i64* %R2_Var
  store i64 %lnenV, i64* %ls7Ez
  %lnenW = load i64*, i64** %Sp_Var
  %lnenX = getelementptr inbounds i64, i64* %lnenW, i32 -14
  %lnenY = ptrtoint i64* %lnenX to i64
  %lnenZ = icmp ult i64 %lnenY, %SpLim_Arg
  %lneo0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnenZ, i1 0 )
  br i1 %lneo0, label %cdyj, label %cdyk
cdyk:
  %lneo1 = load i64*, i64** %Hp_Var
  %lneo2 = getelementptr inbounds i64, i64* %lneo1, i32 7
  %lneo3 = ptrtoint i64* %lneo2 to i64
  %lneo4 = inttoptr i64 %lneo3 to i64*
  store i64* %lneo4, i64** %Hp_Var
  %lneo5 = load i64*, i64** %Hp_Var
  %lneo6 = ptrtoint i64* %lneo5 to i64
  %lneo7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneo8 = bitcast i64* %lneo7 to i64*
  %lneo9 = load i64, i64* %lneo8, !tbaa !5
  %lneoa = icmp ugt i64 %lneo6, %lneo9
  %lneob = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneoa, i1 0 )
  br i1 %lneob, label %cdym, label %cdyl
cdyl:
  %lneod = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7EE_info$def to i64
  %lneoc = load i64*, i64** %Hp_Var
  %lneoe = getelementptr inbounds i64, i64* %lneoc, i32 -6
  store i64 %lneod, i64* %lneoe, !tbaa !3
  %lneog = load i64, i64* %ls7Ez
  %lneof = load i64*, i64** %Hp_Var
  %lneoh = getelementptr inbounds i64, i64* %lneof, i32 -4
  store i64 %lneog, i64* %lneoh, !tbaa !3
  %lneoj = load i64, i64* %ls7EA
  %lneoi = load i64*, i64** %Hp_Var
  %lneok = getelementptr inbounds i64, i64* %lneoi, i32 -3
  store i64 %lneoj, i64* %lneok, !tbaa !3
  %lneom = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7EN_info$def to i64
  %lneol = load i64*, i64** %Hp_Var
  %lneon = getelementptr inbounds i64, i64* %lneol, i32 -2
  store i64 %lneom, i64* %lneon, !tbaa !3
  %lneop = load i64, i64* %ls7Ez
  %lneoo = load i64*, i64** %Hp_Var
  %lneoq = getelementptr inbounds i64, i64* %lneoo, i32 0
  store i64 %lneop, i64* %lneoq, !tbaa !3
  %lneos = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkG_info$def to i64
  %lneor = load i64*, i64** %Sp_Var
  %lneot = getelementptr inbounds i64, i64* %lneor, i32 -5
  store i64 %lneos, i64* %lneot, !tbaa !2
  %lneou = load i64*, i64** %Hp_Var
  %lneov = getelementptr inbounds i64, i64* %lneou, i32 -2
  %lneow = ptrtoint i64* %lneov to i64
  store i64 %lneow, i64* %R4_Var
  %lneox = load i64*, i64** %Hp_Var
  %lneoy = getelementptr inbounds i64, i64* %lneox, i32 -6
  %lneoz = ptrtoint i64* %lneoy to i64
  store i64 %lneoz, i64* %lcdkb
  %lneoA = load i64, i64* %lcdkb
  store i64 %lneoA, i64* %R3_Var
  %lneoB = load i64, i64* %ls7EA
  store i64 %lneoB, i64* %R2_Var
  %lneoD = load i64, i64* %lcdkb
  %lneoC = load i64*, i64** %Sp_Var
  %lneoE = getelementptr inbounds i64, i64* %lneoC, i32 -4
  store i64 %lneoD, i64* %lneoE, !tbaa !2
  %lneoG = load i64, i64* %ls7EB
  %lneoF = load i64*, i64** %Sp_Var
  %lneoH = getelementptr inbounds i64, i64* %lneoF, i32 -3
  store i64 %lneoG, i64* %lneoH, !tbaa !2
  %lneoJ = load i64, i64* %ls7EC
  %lneoI = load i64*, i64** %Sp_Var
  %lneoK = getelementptr inbounds i64, i64* %lneoI, i32 -2
  store i64 %lneoJ, i64* %lneoK, !tbaa !2
  %lneoM = load i64, i64* %ls7ED
  %lneoL = load i64*, i64** %Sp_Var
  %lneoN = getelementptr inbounds i64, i64* %lneoL, i32 -1
  store i64 %lneoM, i64* %lneoN, !tbaa !2
  %lneoO = load i64*, i64** %Sp_Var
  %lneoP = getelementptr inbounds i64, i64* %lneoO, i32 -5
  %lneoQ = ptrtoint i64* %lneoP to i64
  %lneoR = inttoptr i64 %lneoQ to i64*
  store i64* %lneoR, i64** %Sp_Var
  %lneoS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshadowed_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneoT = load i64*, i64** %Sp_Var
  %lneoU = load i64*, i64** %Hp_Var
  %lneoV = load i64, i64* %R1_Var
  %lneoW = load i64, i64* %R2_Var
  %lneoX = load i64, i64* %R3_Var
  %lneoY = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneoS( i64* %Base_Arg, i64* %lneoT, i64* %lneoU, i64 %lneoV, i64 %lneoW, i64 %lneoX, i64 %lneoY, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdym:
  %lneoZ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lneoZ, !tbaa !5
  br label %cdyj
cdyj:
  %lnep0 = load i64, i64* %ls7ED
  store i64 %lnep0, i64* %R6_Var
  %lnep1 = load i64, i64* %ls7EC
  store i64 %lnep1, i64* %R5_Var
  %lnep2 = load i64, i64* %ls7EB
  store i64 %lnep2, i64* %R4_Var
  %lnep3 = load i64, i64* %ls7EA
  store i64 %lnep3, i64* %R3_Var
  %lnep4 = load i64, i64* %ls7Ez
  store i64 %lnep4, i64* %R2_Var
  %lnep5 = ptrtoint %Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64
  store i64 %lnep5, i64* %R1_Var
  %lnep6 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnep7 = bitcast i64* %lnep6 to i64*
  %lnep8 = load i64, i64* %lnep7, !tbaa !5
  %lnep9 = inttoptr i64 %lnep8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnepa = load i64*, i64** %Sp_Var
  %lnepb = load i64*, i64** %Hp_Var
  %lnepc = load i64, i64* %R1_Var
  %lnepd = load i64, i64* %R2_Var
  %lnepe = load i64, i64* %R3_Var
  %lnepf = load i64, i64* %R4_Var
  %lnepg = load i64, i64* %R5_Var
  %lneph = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnep9( i64* %Base_Arg, i64* %lnepa, i64* %lnepb, i64 %lnepc, i64 %lnepd, i64 %lnepe, i64 %lnepf, i64 %lnepg, i64 %lneph, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkG_info$def to i8*)
define internal ghccc void @cdkG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nepi:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkG
cdkG:
  %lnepk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkI_info$def to i64
  %lnepj = load i64*, i64** %Sp_Var
  %lnepl = getelementptr inbounds i64, i64* %lnepj, i32 -1
  store i64 %lnepk, i64* %lnepl, !tbaa !2
  %lnepm = load i64, i64* %R1_Var
  store i64 %lnepm, i64* %R1_Var
  %lnepn = load i64*, i64** %Sp_Var
  %lnepo = getelementptr inbounds i64, i64* %lnepn, i32 0
  store i64 %R2_Arg, i64* %lnepo, !tbaa !2
  %lnepp = load i64*, i64** %Sp_Var
  %lnepq = getelementptr inbounds i64, i64* %lnepp, i32 -1
  %lnepr = ptrtoint i64* %lnepq to i64
  %lneps = inttoptr i64 %lnepr to i64*
  store i64* %lneps, i64** %Sp_Var
  %lnept = load i64, i64* %R1_Var
  %lnepu = and i64 %lnept, 7
  %lnepv = icmp ne i64 %lnepu, 0
  br i1 %lnepv, label %udCB, label %cdkJ
cdkJ:
  %lnepx = load i64, i64* %R1_Var
  %lnepy = inttoptr i64 %lnepx to i64*
  %lnepz = load i64, i64* %lnepy, !tbaa !4
  %lnepA = inttoptr i64 %lnepz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnepB = load i64*, i64** %Sp_Var
  %lnepC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnepA( i64* %Base_Arg, i64* %lnepB, i64* %Hp_Arg, i64 %lnepC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCB:
  %lnepD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnepE = load i64*, i64** %Sp_Var
  %lnepF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnepD( i64* %Base_Arg, i64* %lnepE, i64* %Hp_Arg, i64 %lnepF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkI_info$def to i8*)
define internal ghccc void @cdkI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
nepG:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkI
cdkI:
  %lnepH = load i64, i64* %R1_Var
  %lnepI = and i64 %lnepH, 7
  switch i64 %lnepI, label %cdyf [i64 1, label %cdyf
i64 2, label %cdyg]
cdyf:
  %lnepK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkN_info$def to i64
  %lnepJ = load i64*, i64** %Sp_Var
  %lnepL = getelementptr inbounds i64, i64* %lnepJ, i32 0
  store i64 %lnepK, i64* %lnepL, !tbaa !2
  %lnepM = load i64*, i64** %Sp_Var
  %lnepN = getelementptr inbounds i64, i64* %lnepM, i32 2
  %lnepO = bitcast i64* %lnepN to i64*
  %lnepP = load i64, i64* %lnepO, !tbaa !2
  store i64 %lnepP, i64* %R1_Var
  %lnepQ = load i64, i64* %R1_Var
  %lnepR = and i64 %lnepQ, 7
  %lnepS = icmp ne i64 %lnepR, 0
  br i1 %lnepS, label %udCC, label %cdkO
cdkO:
  %lnepU = load i64, i64* %R1_Var
  %lnepV = inttoptr i64 %lnepU to i64*
  %lnepW = load i64, i64* %lnepV, !tbaa !4
  %lnepX = inttoptr i64 %lnepW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnepY = load i64*, i64** %Sp_Var
  %lnepZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnepX( i64* %Base_Arg, i64* %lnepY, i64* %Hp_Arg, i64 %lnepZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCC:
  %lneq0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneq1 = load i64*, i64** %Sp_Var
  %lneq2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneq0( i64* %Base_Arg, i64* %lneq1, i64* %Hp_Arg, i64 %lneq2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyg:
  %lneq3 = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneq4 = add i64 %lneq3, 1
  store i64 %lneq4, i64* %R3_Var
  %lneq5 = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneq6 = add i64 %lneq5, 1
  store i64 %lneq6, i64* %R2_Var
  %lneq7 = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneq8 = add i64 %lneq7, 1
  store i64 %lneq8, i64* %R1_Var
  %lneq9 = load i64*, i64** %Sp_Var
  %lneqa = getelementptr inbounds i64, i64* %lneq9, i32 6
  %lneqb = ptrtoint i64* %lneqa to i64
  %lneqc = inttoptr i64 %lneqb to i64*
  store i64* %lneqc, i64** %Sp_Var
  %lneqd = load i64*, i64** %Sp_Var
  %lneqe = getelementptr inbounds i64, i64* %lneqd, i32 0
  %lneqf = bitcast i64* %lneqe to i64*
  %lneqg = load i64, i64* %lneqf, !tbaa !2
  %lneqh = inttoptr i64 %lneqg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneqi = load i64*, i64** %Sp_Var
  %lneqj = load i64, i64* %R1_Var
  %lneqk = load i64, i64* %R2_Var
  %lneql = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneqh( i64* %Base_Arg, i64* %lneqi, i64* %Hp_Arg, i64 %lneqj, i64 %lneqk, i64 %lneql, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkN_info$def to i8*)
define internal ghccc void @cdkN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 133, i32 30, i32 0}>
{
neqm:
  %ls7ET = alloca i64, i32 1
  %ls7EU = alloca i64, i32 1
  %ls7EV = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkN
cdkN:
  %lneqo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkS_info$def to i64
  %lneqn = load i64*, i64** %Sp_Var
  %lneqp = getelementptr inbounds i64, i64* %lneqn, i32 -1
  store i64 %lneqo, i64* %lneqp, !tbaa !2
  %lneqs = load i64, i64* %R1_Var
  %lneqt = add i64 %lneqs, 7
  %lnequ = inttoptr i64 %lneqt to i64*
  %lneqv = load i64, i64* %lnequ, !tbaa !4
  store i64 %lneqv, i64* %ls7ET
  %lneqy = load i64, i64* %R1_Var
  %lneqz = add i64 %lneqy, 15
  %lneqA = inttoptr i64 %lneqz to i64*
  %lneqB = load i64, i64* %lneqA, !tbaa !4
  store i64 %lneqB, i64* %ls7EU
  %lneqE = load i64, i64* %R1_Var
  %lneqF = add i64 %lneqE, 23
  %lneqG = inttoptr i64 %lneqF to i64*
  %lneqH = load i64, i64* %lneqG, !tbaa !4
  store i64 %lneqH, i64* %ls7EV
  %lneqI = load i64*, i64** %Sp_Var
  %lneqJ = getelementptr inbounds i64, i64* %lneqI, i32 3
  %lneqK = bitcast i64* %lneqJ to i64*
  %lneqL = load i64, i64* %lneqK, !tbaa !2
  store i64 %lneqL, i64* %R1_Var
  %lneqN = load i64, i64* %ls7EV
  %lneqM = load i64*, i64** %Sp_Var
  %lneqO = getelementptr inbounds i64, i64* %lneqM, i32 0
  store i64 %lneqN, i64* %lneqO, !tbaa !2
  %lneqQ = load i64, i64* %ls7EU
  %lneqP = load i64*, i64** %Sp_Var
  %lneqR = getelementptr inbounds i64, i64* %lneqP, i32 2
  store i64 %lneqQ, i64* %lneqR, !tbaa !2
  %lneqT = load i64, i64* %ls7ET
  %lneqS = load i64*, i64** %Sp_Var
  %lneqU = getelementptr inbounds i64, i64* %lneqS, i32 3
  store i64 %lneqT, i64* %lneqU, !tbaa !2
  %lneqV = load i64*, i64** %Sp_Var
  %lneqW = getelementptr inbounds i64, i64* %lneqV, i32 -1
  %lneqX = ptrtoint i64* %lneqW to i64
  %lneqY = inttoptr i64 %lneqX to i64*
  store i64* %lneqY, i64** %Sp_Var
  %lneqZ = load i64, i64* %R1_Var
  %lner0 = and i64 %lneqZ, 7
  %lner1 = icmp ne i64 %lner0, 0
  br i1 %lner1, label %udCD, label %cdkT
cdkT:
  %lner3 = load i64, i64* %R1_Var
  %lner4 = inttoptr i64 %lner3 to i64*
  %lner5 = load i64, i64* %lner4, !tbaa !4
  %lner6 = inttoptr i64 %lner5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lner7 = load i64*, i64** %Sp_Var
  %lner8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lner6( i64* %Base_Arg, i64* %lner7, i64* %Hp_Arg, i64 %lner8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCD:
  %lner9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnera = load i64*, i64** %Sp_Var
  %lnerb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lner9( i64* %Base_Arg, i64* %lnera, i64* %Hp_Arg, i64 %lnerb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkS_info$def to i8*)
define internal ghccc void @cdkS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 0}>
{
nerc:
  %ls7EX = alloca i64, i32 1
  %ls7EY = alloca i64, i32 1
  %ls7EZ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdkS
cdkS:
  %lnere = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkX_info$def to i64
  %lnerd = load i64*, i64** %Sp_Var
  %lnerf = getelementptr inbounds i64, i64* %lnerd, i32 -2
  store i64 %lnere, i64* %lnerf, !tbaa !2
  %lneri = load i64, i64* %R1_Var
  %lnerj = add i64 %lneri, 7
  %lnerk = inttoptr i64 %lnerj to i64*
  %lnerl = load i64, i64* %lnerk, !tbaa !4
  store i64 %lnerl, i64* %ls7EX
  %lnero = load i64, i64* %R1_Var
  %lnerp = add i64 %lnero, 15
  %lnerq = inttoptr i64 %lnerp to i64*
  %lnerr = load i64, i64* %lnerq, !tbaa !4
  store i64 %lnerr, i64* %ls7EY
  %lneru = load i64, i64* %R1_Var
  %lnerv = add i64 %lneru, 23
  %lnerw = inttoptr i64 %lnerv to i64*
  %lnerx = load i64, i64* %lnerw, !tbaa !4
  store i64 %lnerx, i64* %ls7EZ
  %lnery = load i64*, i64** %Sp_Var
  %lnerz = getelementptr inbounds i64, i64* %lnery, i32 4
  %lnerA = bitcast i64* %lnerz to i64*
  %lnerB = load i64, i64* %lnerA, !tbaa !2
  store i64 %lnerB, i64* %R1_Var
  %lnerD = load i64, i64* %ls7EZ
  %lnerC = load i64*, i64** %Sp_Var
  %lnerE = getelementptr inbounds i64, i64* %lnerC, i32 -1
  store i64 %lnerD, i64* %lnerE, !tbaa !2
  %lnerG = load i64, i64* %ls7EY
  %lnerF = load i64*, i64** %Sp_Var
  %lnerH = getelementptr inbounds i64, i64* %lnerF, i32 0
  store i64 %lnerG, i64* %lnerH, !tbaa !2
  %lnerJ = load i64, i64* %ls7EX
  %lnerI = load i64*, i64** %Sp_Var
  %lnerK = getelementptr inbounds i64, i64* %lnerI, i32 4
  store i64 %lnerJ, i64* %lnerK, !tbaa !2
  %lnerL = load i64*, i64** %Sp_Var
  %lnerM = getelementptr inbounds i64, i64* %lnerL, i32 -2
  %lnerN = ptrtoint i64* %lnerM to i64
  %lnerO = inttoptr i64 %lnerN to i64*
  store i64* %lnerO, i64** %Sp_Var
  %lnerP = load i64, i64* %R1_Var
  %lnerQ = and i64 %lnerP, 7
  %lnerR = icmp ne i64 %lnerQ, 0
  br i1 %lnerR, label %udCE, label %cdkY
cdkY:
  %lnerT = load i64, i64* %R1_Var
  %lnerU = inttoptr i64 %lnerT to i64*
  %lnerV = load i64, i64* %lnerU, !tbaa !4
  %lnerW = inttoptr i64 %lnerV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnerX = load i64*, i64** %Sp_Var
  %lnerY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnerW( i64* %Base_Arg, i64* %lnerX, i64* %Hp_Arg, i64 %lnerY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCE:
  %lnerZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnes0 = load i64*, i64** %Sp_Var
  %lnes1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnerZ( i64* %Base_Arg, i64* %lnes0, i64* %Hp_Arg, i64 %lnes1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdkX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdkX_info$def to i8*)
define internal ghccc void @cdkX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8, i32 30, i32 0}>
{
nes2:
  %ls7F1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdkX
cdkX:
  %lnes3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl2_info$def to i64
  %lnes4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnes3, i64* %lnes4, !tbaa !2
  %lnes7 = load i64, i64* %R1_Var
  %lnes8 = add i64 %lnes7, 7
  %lnes9 = inttoptr i64 %lnes8 to double*
  %lnesa = load double, double* %lnes9, !tbaa !4
  store double %lnesa, double* %ls7F1
  %lnesb = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %lnesc = bitcast i64* %lnesb to i64*
  %lnesd = load i64, i64* %lnesc, !tbaa !2
  store i64 %lnesd, i64* %R1_Var
  %lnese = load double, double* %ls7F1
  %lnesf = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %lnesg = bitcast i64* %lnesf to double*
  store double %lnese, double* %lnesg, !tbaa !2
  %lnesh = load i64, i64* %R1_Var
  %lnesi = and i64 %lnesh, 7
  %lnesj = icmp ne i64 %lnesi, 0
  br i1 %lnesj, label %udCF, label %cdl3
cdl3:
  %lnesl = load i64, i64* %R1_Var
  %lnesm = inttoptr i64 %lnesl to i64*
  %lnesn = load i64, i64* %lnesm, !tbaa !4
  %lneso = inttoptr i64 %lnesn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnesp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneso( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnesp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCF:
  %lnesq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnesr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnesq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnesr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdl2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl2_info$def to i8*)
define internal ghccc void @cdl2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2056, i32 30, i32 0}>
{
ness:
  %ls7F3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdl2
cdl2:
  %lnest = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl7_info$def to i64
  %lnesu = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnest, i64* %lnesu, !tbaa !2
  %lnesx = load i64, i64* %R1_Var
  %lnesy = add i64 %lnesx, 7
  %lnesz = inttoptr i64 %lnesy to double*
  %lnesA = load double, double* %lnesz, !tbaa !4
  store double %lnesA, double* %ls7F3
  %lnesB = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnesC = bitcast i64* %lnesB to i64*
  %lnesD = load i64, i64* %lnesC, !tbaa !2
  store i64 %lnesD, i64* %R1_Var
  %lnesE = load double, double* %ls7F3
  %lnesF = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnesG = bitcast i64* %lnesF to double*
  store double %lnesE, double* %lnesG, !tbaa !2
  %lnesH = load i64, i64* %R1_Var
  %lnesI = and i64 %lnesH, 7
  %lnesJ = icmp ne i64 %lnesI, 0
  br i1 %lnesJ, label %udCG, label %cdl8
cdl8:
  %lnesL = load i64, i64* %R1_Var
  %lnesM = inttoptr i64 %lnesL to i64*
  %lnesN = load i64, i64* %lnesM, !tbaa !4
  %lnesO = inttoptr i64 %lnesN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnesP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnesO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnesP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCG:
  %lnesQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnesR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnesQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnesR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdl7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdl7_info$def to i8*)
define internal ghccc void @cdl7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3080, i32 30, i32 0}>
{
nesS:
  %ls7F5 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdl7
cdl7:
  %lnesT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlc_info$def to i64
  %lnesU = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnesT, i64* %lnesU, !tbaa !2
  %lnesX = load i64, i64* %R1_Var
  %lnesY = add i64 %lnesX, 7
  %lnesZ = inttoptr i64 %lnesY to double*
  %lnet0 = load double, double* %lnesZ, !tbaa !4
  store double %lnet0, double* %ls7F5
  %lnet1 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnet2 = bitcast i64* %lnet1 to i64*
  %lnet3 = load i64, i64* %lnet2, !tbaa !2
  store i64 %lnet3, i64* %R1_Var
  %lnet4 = load double, double* %ls7F5
  %lnet5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnet6 = bitcast i64* %lnet5 to double*
  store double %lnet4, double* %lnet6, !tbaa !2
  %lnet7 = load i64, i64* %R1_Var
  %lnet8 = and i64 %lnet7, 7
  %lnet9 = icmp ne i64 %lnet8, 0
  br i1 %lnet9, label %udCH, label %cdld
cdld:
  %lnetb = load i64, i64* %R1_Var
  %lnetc = inttoptr i64 %lnetb to i64*
  %lnetd = load i64, i64* %lnetc, !tbaa !4
  %lnete = inttoptr i64 %lnetd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnetf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnete( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnetf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCH:
  %lnetg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneth = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnetg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneth, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlc_info$def to i8*)
define internal ghccc void @cdlc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3208, i32 30, i32 0}>
{
neti:
  %ls7F7 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdlc
cdlc:
  %lnetj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlh_info$def to i64
  %lnetk = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnetj, i64* %lnetk, !tbaa !2
  %lnetn = load i64, i64* %R1_Var
  %lneto = add i64 %lnetn, 7
  %lnetp = inttoptr i64 %lneto to double*
  %lnetq = load double, double* %lnetp, !tbaa !4
  store double %lnetq, double* %ls7F7
  %lnetr = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnets = bitcast i64* %lnetr to i64*
  %lnett = load i64, i64* %lnets, !tbaa !2
  store i64 %lnett, i64* %R1_Var
  %lnetu = load double, double* %ls7F7
  %lnetv = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnetw = bitcast i64* %lnetv to double*
  store double %lnetu, double* %lnetw, !tbaa !2
  %lnetx = load i64, i64* %R1_Var
  %lnety = and i64 %lnetx, 7
  %lnetz = icmp ne i64 %lnety, 0
  br i1 %lnetz, label %udCI, label %cdli
cdli:
  %lnetB = load i64, i64* %R1_Var
  %lnetC = inttoptr i64 %lnetB to i64*
  %lnetD = load i64, i64* %lnetC, !tbaa !4
  %lnetE = inttoptr i64 %lnetD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnetF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnetE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnetF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCI:
  %lnetG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnetH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnetG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnetH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlh_info$def to i8*)
define internal ghccc void @cdlh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3464, i32 30, i32 0}>
{
netI:
  %ls7F9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdlh
cdlh:
  %lnetJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlm_info$def to i64
  %lnetK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnetJ, i64* %lnetK, !tbaa !2
  %lnetN = load i64, i64* %R1_Var
  %lnetO = add i64 %lnetN, 7
  %lnetP = inttoptr i64 %lnetO to double*
  %lnetQ = load double, double* %lnetP, !tbaa !4
  store double %lnetQ, double* %ls7F9
  %lnetR = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnetS = bitcast i64* %lnetR to i64*
  %lnetT = load i64, i64* %lnetS, !tbaa !2
  store i64 %lnetT, i64* %R1_Var
  %lnetU = load double, double* %ls7F9
  %lnetV = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnetW = bitcast i64* %lnetV to double*
  store double %lnetU, double* %lnetW, !tbaa !2
  %lnetX = load i64, i64* %R1_Var
  %lnetY = and i64 %lnetX, 7
  %lnetZ = icmp ne i64 %lnetY, 0
  br i1 %lnetZ, label %udCJ, label %cdln
cdln:
  %lneu1 = load i64, i64* %R1_Var
  %lneu2 = inttoptr i64 %lneu1 to i64*
  %lneu3 = load i64, i64* %lneu2, !tbaa !4
  %lneu4 = inttoptr i64 %lneu3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneu5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneu4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneu5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCJ:
  %lneu6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneu7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneu6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneu7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlm_info$def to i8*)
define internal ghccc void @cdlm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3528, i32 30, i32 0}>
{
neu8:
  %ls7ED = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdlm
cdlm:
  %lneu9 = load i64*, i64** %Sp_Var
  %lneua = getelementptr inbounds i64, i64* %lneu9, i32 8
  %lneub = bitcast i64* %lneua to i64*
  %lneuc = load i64, i64* %lneub, !tbaa !2
  store i64 %lneuc, i64* %ls7ED
  %lneud = load i64*, i64** %Sp_Var
  %lneue = getelementptr inbounds i64, i64* %lneud, i32 6
  %lneuf = bitcast i64* %lneue to double*
  %lneug = load double, double* %lneuf, !tbaa !2
  %lneuh = load i64*, i64** %Sp_Var
  %lneui = getelementptr inbounds i64, i64* %lneuh, i32 5
  %lneuj = bitcast i64* %lneui to double*
  %lneuk = load double, double* %lneuj, !tbaa !2
  %lneul = fmul double %lneug, %lneuk
  %lneum = load i64*, i64** %Sp_Var
  %lneun = getelementptr inbounds i64, i64* %lneum, i32 2
  %lneuo = bitcast i64* %lneun to double*
  %lneup = load double, double* %lneuo, !tbaa !2
  %lneuq = load i64*, i64** %Sp_Var
  %lneur = getelementptr inbounds i64, i64* %lneuq, i32 3
  %lneus = bitcast i64* %lneur to double*
  %lneut = load double, double* %lneus, !tbaa !2
  %lneuu = fmul double %lneup, %lneut
  %lneuv = fadd double %lneul, %lneuu
  %lneuw = load i64*, i64** %Sp_Var
  %lneux = getelementptr inbounds i64, i64* %lneuw, i32 1
  %lneuy = bitcast i64* %lneux to double*
  %lneuz = load double, double* %lneuy, !tbaa !2
  %lneuA = add i64 %R1_Arg, 7
  %lneuB = inttoptr i64 %lneuA to double*
  %lneuC = load double, double* %lneuB, !tbaa !4
  %lneuD = fmul double %lneuz, %lneuC
  %lneuE = fadd double %lneuv, %lneuD
  store double %lneuE, double* %ls7Fc
  %lneuF = load double, double* %ls7Fc
  %lneuG = fcmp ole double %lneuF, 0x0000000000000000
  %lneuH = zext i1 %lneuG to i64
  switch i64 %lneuH, label %cdAk [i64 1, label %cdC7]
cdAk:
  %lneuJ = load i64, i64* %ls7ED
  %lneuI = load i64*, i64** %Sp_Var
  %lneuK = getelementptr inbounds i64, i64* %lneuI, i32 3
  store i64 %lneuJ, i64* %lneuK, !tbaa !2
  %lneuM = load double, double* %ls7Fc
  %lneuL = load i64*, i64** %Sp_Var
  %lneuN = getelementptr inbounds i64, i64* %lneuL, i32 5
  %lneuO = bitcast i64* %lneuN to double*
  store double %lneuM, double* %lneuO, !tbaa !2
  %lneuP = load i64*, i64** %Sp_Var
  %lneuQ = getelementptr inbounds i64, i64* %lneuP, i32 1
  %lneuR = ptrtoint i64* %lneuQ to i64
  %lneuS = inttoptr i64 %lneuR to i64*
  store i64* %lneuS, i64** %Sp_Var
  %lneuT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdzS$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneuU = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneuT( i64* %Base_Arg, i64* %lneuU, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdC7:
  %lneuW = load i64, i64* %ls7ED
  %lneuV = load i64*, i64** %Sp_Var
  %lneuX = getelementptr inbounds i64, i64* %lneuV, i32 3
  store i64 %lneuW, i64* %lneuX, !tbaa !2
  %lneuZ = load double, double* %ls7Fc
  %lneuY = load i64*, i64** %Sp_Var
  %lnev0 = getelementptr inbounds i64, i64* %lneuY, i32 5
  %lnev1 = bitcast i64* %lnev0 to double*
  store double %lneuZ, double* %lnev1, !tbaa !2
  %lnev2 = load i64*, i64** %Sp_Var
  %lnev3 = getelementptr inbounds i64, i64* %lnev2, i32 1
  %lnev4 = ptrtoint i64* %lnev3 to i64
  %lnev5 = inttoptr i64 %lnev4 to i64*
  store i64* %lnev5, i64** %Sp_Var
  %lnev6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdBG$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnev7 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnev6( i64* %Base_Arg, i64* %lnev7, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdBG = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdBG$def to i8*)
define internal ghccc void @_cdBG$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nev8:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdBG
cdBG:
  %lneva = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBI_info$def to i64
  %lnev9 = load i64*, i64** %Sp_Var
  %lnevb = getelementptr inbounds i64, i64* %lnev9, i32 -1
  store i64 %lneva, i64* %lnevb, !tbaa !2
  %lnevc = load i64*, i64** %Sp_Var
  %lnevd = getelementptr inbounds i64, i64* %lnevc, i32 2
  %lneve = bitcast i64* %lnevd to i64*
  %lnevf = load i64, i64* %lneve, !tbaa !2
  store i64 %lnevf, i64* %R1_Var
  %lnevg = load i64*, i64** %Sp_Var
  %lnevh = getelementptr inbounds i64, i64* %lnevg, i32 -1
  %lnevi = ptrtoint i64* %lnevh to i64
  %lnevj = inttoptr i64 %lnevi to i64*
  store i64* %lnevj, i64** %Sp_Var
  %lnevk = load i64, i64* %R1_Var
  %lnevl = and i64 %lnevk, 7
  %lnevm = icmp ne i64 %lnevl, 0
  br i1 %lnevm, label %udDh, label %cdBK
cdBK:
  %lnevo = load i64, i64* %R1_Var
  %lnevp = inttoptr i64 %lnevo to i64*
  %lnevq = load i64, i64* %lnevp, !tbaa !4
  %lnevr = inttoptr i64 %lnevq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnevs = load i64*, i64** %Sp_Var
  %lnevt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnevr( i64* %Base_Arg, i64* %lnevs, i64* %Hp_Arg, i64 %lnevt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDh:
  %lnevu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnevv = load i64*, i64** %Sp_Var
  %lnevw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnevu( i64* %Base_Arg, i64* %lnevv, i64* %Hp_Arg, i64 %lnevw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBI_info$def to i8*)
define internal ghccc void @cdBI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3528, i32 30, i32 0}>
{
nevx:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7JB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdBI
cdBI:
  %lnevy = load i64, i64* %R1_Var
  %lnevz = and i64 %lnevy, 7
  switch i64 %lnevz, label %cdBQ [i64 1, label %cdBQ
i64 2, label %cdBV]
cdBQ:
  %lnevB = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnevC = add i64 %lnevB, 1
  %lnevA = load i64*, i64** %Sp_Var
  %lnevD = getelementptr inbounds i64, i64* %lnevA, i32 3
  store i64 %lnevC, i64* %lnevD, !tbaa !2
  %lnevF = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnevG = add i64 %lnevF, 1
  %lnevE = load i64*, i64** %Sp_Var
  %lnevH = getelementptr inbounds i64, i64* %lnevE, i32 0
  store i64 %lnevG, i64* %lnevH, !tbaa !2
  %lnevJ = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnevK = add i64 %lnevJ, 1
  %lnevI = load i64*, i64** %Sp_Var
  %lnevL = getelementptr inbounds i64, i64* %lnevI, i32 -1
  store i64 %lnevK, i64* %lnevL, !tbaa !2
  %lnevM = load i64*, i64** %Sp_Var
  %lnevN = getelementptr inbounds i64, i64* %lnevM, i32 -1
  %lnevO = ptrtoint i64* %lnevN to i64
  %lnevP = inttoptr i64 %lnevO to i64*
  store i64* %lnevP, i64** %Sp_Var
  %lnevQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Hs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnevR = load i64*, i64** %Sp_Var
  %lnevS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnevQ( i64* %Base_Arg, i64* %lnevR, i64* %Hp_Arg, i64 %lnevS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBV:
  %lnevU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBT_info$def to i64
  %lnevT = load i64*, i64** %Sp_Var
  %lnevV = getelementptr inbounds i64, i64* %lnevT, i32 0
  store i64 %lnevU, i64* %lnevV, !tbaa !2
  %lnevY = load i64, i64* %R1_Var
  %lnevZ = add i64 %lnevY, 14
  %lnew0 = inttoptr i64 %lnevZ to i64*
  %lnew1 = load i64, i64* %lnew0, !tbaa !4
  store i64 %lnew1, i64* %ls7JB
  %lnew4 = load i64, i64* %R1_Var
  %lnew5 = add i64 %lnew4, 6
  %lnew6 = inttoptr i64 %lnew5 to i64*
  %lnew7 = load i64, i64* %lnew6, !tbaa !4
  store i64 %lnew7, i64* %R1_Var
  %lnew9 = load i64, i64* %ls7JB
  %lnew8 = load i64*, i64** %Sp_Var
  %lnewa = getelementptr inbounds i64, i64* %lnew8, i32 3
  store i64 %lnew9, i64* %lnewa, !tbaa !2
  %lnewb = load i64, i64* %R1_Var
  %lnewc = and i64 %lnewb, 7
  %lnewd = icmp ne i64 %lnewc, 0
  br i1 %lnewd, label %udDi, label %cdBW
cdBW:
  %lnewf = load i64, i64* %R1_Var
  %lnewg = inttoptr i64 %lnewf to i64*
  %lnewh = load i64, i64* %lnewg, !tbaa !4
  %lnewi = inttoptr i64 %lnewh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnewj = load i64*, i64** %Sp_Var
  %lnewk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnewi( i64* %Base_Arg, i64* %lnewj, i64* %Hp_Arg, i64 %lnewk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDi:
  %lnewl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnewm = load i64*, i64** %Sp_Var
  %lnewn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnewl( i64* %Base_Arg, i64* %lnewm, i64* %Hp_Arg, i64 %lnewn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBT_info$def to i8*)
define internal ghccc void @cdBT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3272, i32 30, i32 0}>
{
newo:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdBT
cdBT:
  %lnewp = load i64, i64* %R1_Var
  %lnewq = and i64 %lnewp, 7
  switch i64 %lnewq, label %cdC2 [i64 2, label %cdC6]
cdC2:
  %lnews = load i64*, i64** %Sp_Var
  %lnewt = getelementptr inbounds i64, i64* %lnews, i32 3
  %lnewu = bitcast i64* %lnewt to i64*
  %lnewv = load i64, i64* %lnewu, !tbaa !2
  %lnewr = load i64*, i64** %Sp_Var
  %lneww = getelementptr inbounds i64, i64* %lnewr, i32 3
  store i64 %lnewv, i64* %lneww, !tbaa !2
  %lnewx = load i64*, i64** %Sp_Var
  %lnewy = getelementptr inbounds i64, i64* %lnewx, i32 1
  %lnewz = ptrtoint i64* %lnewy to i64
  %lnewA = inttoptr i64 %lnewz to i64*
  store i64* %lnewA, i64** %Sp_Var
  %lnewB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdBG$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnewC = load i64*, i64** %Sp_Var
  %lnewD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnewB( i64* %Base_Arg, i64* %lnewC, i64* %Hp_Arg, i64 %lnewD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdC6:
  %lnewF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBw_info$def to i64
  %lnewE = load i64*, i64** %Sp_Var
  %lnewG = getelementptr inbounds i64, i64* %lnewE, i32 0
  store i64 %lnewF, i64* %lnewG, !tbaa !2
  %lnewJ = load i64, i64* %R1_Var
  %lnewK = add i64 %lnewJ, 6
  %lnewL = inttoptr i64 %lnewK to i64*
  %lnewM = load i64, i64* %lnewL, !tbaa !4
  store i64 %lnewM, i64* %R1_Var
  %lnewN = load i64, i64* %R1_Var
  %lnewO = and i64 %lnewN, 7
  %lnewP = icmp ne i64 %lnewO, 0
  br i1 %lnewP, label %udDk, label %cdBy
cdBy:
  %lnewR = load i64, i64* %R1_Var
  %lnewS = inttoptr i64 %lnewR to i64*
  %lnewT = load i64, i64* %lnewS, !tbaa !4
  %lnewU = inttoptr i64 %lnewT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnewV = load i64*, i64** %Sp_Var
  %lnewW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnewU( i64* %Base_Arg, i64* %lnewV, i64* %Hp_Arg, i64 %lnewW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDk:
  %lnewX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnewY = load i64*, i64** %Sp_Var
  %lnewZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnewX( i64* %Base_Arg, i64* %lnewY, i64* %Hp_Arg, i64 %lnewZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBw_info$def to i8*)
define internal ghccc void @cdBw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3528, i32 30, i32 0}>
{
nex0:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdBw
cdBw:
  %lnex2 = add i64 %R1_Arg, 23
  %lnex3 = inttoptr i64 %lnex2 to i64*
  %lnex4 = load i64, i64* %lnex3, !tbaa !4
  %lnex1 = load i64*, i64** %Sp_Var
  %lnex5 = getelementptr inbounds i64, i64* %lnex1, i32 -1
  store i64 %lnex4, i64* %lnex5, !tbaa !2
  %lnex7 = add i64 %R1_Arg, 15
  %lnex8 = inttoptr i64 %lnex7 to i64*
  %lnex9 = load i64, i64* %lnex8, !tbaa !4
  %lnex6 = load i64*, i64** %Sp_Var
  %lnexa = getelementptr inbounds i64, i64* %lnex6, i32 0
  store i64 %lnex9, i64* %lnexa, !tbaa !2
  %lnexc = add i64 %R1_Arg, 7
  %lnexd = inttoptr i64 %lnexc to i64*
  %lnexe = load i64, i64* %lnexd, !tbaa !4
  %lnexb = load i64*, i64** %Sp_Var
  %lnexf = getelementptr inbounds i64, i64* %lnexb, i32 3
  store i64 %lnexe, i64* %lnexf, !tbaa !2
  %lnexg = load i64*, i64** %Sp_Var
  %lnexh = getelementptr inbounds i64, i64* %lnexg, i32 -1
  %lnexi = ptrtoint i64* %lnexh to i64
  %lnexj = inttoptr i64 %lnexi to i64*
  store i64* %lnexj, i64** %Sp_Var
  %lnexk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Hs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnexl = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnexk( i64* %Base_Arg, i64* %lnexl, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s7Hs = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Hs$def to i8*)
define internal ghccc void @_s7Hs$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nexm:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s7Hs
s7Hs:
  %lnexo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds1_info$def to i64
  %lnexn = load i64*, i64** %Sp_Var
  %lnexp = getelementptr inbounds i64, i64* %lnexn, i32 -1
  store i64 %lnexo, i64* %lnexp, !tbaa !2
  %lnexq = load i64*, i64** %Sp_Var
  %lnexr = getelementptr inbounds i64, i64* %lnexq, i32 5
  %lnexs = bitcast i64* %lnexr to i64*
  %lnext = load i64, i64* %lnexs, !tbaa !2
  store i64 %lnext, i64* %R1_Var
  %lnexu = load i64*, i64** %Sp_Var
  %lnexv = getelementptr inbounds i64, i64* %lnexu, i32 -1
  %lnexw = ptrtoint i64* %lnexv to i64
  %lnexx = inttoptr i64 %lnexw to i64*
  store i64* %lnexx, i64** %Sp_Var
  %lnexy = load i64, i64* %R1_Var
  %lnexz = and i64 %lnexy, 7
  %lnexA = icmp ne i64 %lnexz, 0
  br i1 %lnexA, label %udDn, label %cds2
cds2:
  %lnexC = load i64, i64* %R1_Var
  %lnexD = inttoptr i64 %lnexC to i64*
  %lnexE = load i64, i64* %lnexD, !tbaa !4
  %lnexF = inttoptr i64 %lnexE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnexG = load i64*, i64** %Sp_Var
  %lnexH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnexF( i64* %Base_Arg, i64* %lnexG, i64* %Hp_Arg, i64 %lnexH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDn:
  %lnexI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnexJ = load i64*, i64** %Sp_Var
  %lnexK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnexI( i64* %Base_Arg, i64* %lnexJ, i64* %Hp_Arg, i64 %lnexK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cds1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds1_info$def to i8*)
define internal ghccc void @cds1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 15114, i32 30, i32 0}>
{
nexL:
  %ls7Hx = alloca i64, i32 1
  %ls7Hy = alloca i64, i32 1
  %ls7Hz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cds1
cds1:
  %lnexN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds6_info$def to i64
  %lnexM = load i64*, i64** %Sp_Var
  %lnexO = getelementptr inbounds i64, i64* %lnexM, i32 -1
  store i64 %lnexN, i64* %lnexO, !tbaa !2
  %lnexR = load i64, i64* %R1_Var
  %lnexS = add i64 %lnexR, 7
  %lnexT = inttoptr i64 %lnexS to i64*
  %lnexU = load i64, i64* %lnexT, !tbaa !4
  store i64 %lnexU, i64* %ls7Hx
  %lnexX = load i64, i64* %R1_Var
  %lnexY = add i64 %lnexX, 15
  %lnexZ = inttoptr i64 %lnexY to i64*
  %lney0 = load i64, i64* %lnexZ, !tbaa !4
  store i64 %lney0, i64* %ls7Hy
  %lney3 = load i64, i64* %R1_Var
  %lney4 = add i64 %lney3, 23
  %lney5 = inttoptr i64 %lney4 to i64*
  %lney6 = load i64, i64* %lney5, !tbaa !4
  store i64 %lney6, i64* %ls7Hz
  %lney7 = load i64*, i64** %Sp_Var
  %lney8 = getelementptr inbounds i64, i64* %lney7, i32 9
  %lney9 = bitcast i64* %lney8 to i64*
  %lneya = load i64, i64* %lney9, !tbaa !2
  store i64 %lneya, i64* %R1_Var
  %lneyc = load i64, i64* %ls7Hz
  %lneyb = load i64*, i64** %Sp_Var
  %lneyd = getelementptr inbounds i64, i64* %lneyb, i32 0
  store i64 %lneyc, i64* %lneyd, !tbaa !2
  %lneyf = load i64, i64* %ls7Hy
  %lneye = load i64*, i64** %Sp_Var
  %lneyg = getelementptr inbounds i64, i64* %lneye, i32 6
  store i64 %lneyf, i64* %lneyg, !tbaa !2
  %lneyi = load i64, i64* %ls7Hx
  %lneyh = load i64*, i64** %Sp_Var
  %lneyj = getelementptr inbounds i64, i64* %lneyh, i32 9
  store i64 %lneyi, i64* %lneyj, !tbaa !2
  %lneyk = load i64*, i64** %Sp_Var
  %lneyl = getelementptr inbounds i64, i64* %lneyk, i32 -1
  %lneym = ptrtoint i64* %lneyl to i64
  %lneyn = inttoptr i64 %lneym to i64*
  store i64* %lneyn, i64** %Sp_Var
  %lneyo = load i64, i64* %R1_Var
  %lneyp = and i64 %lneyo, 7
  %lneyq = icmp ne i64 %lneyp, 0
  br i1 %lneyq, label %udCS, label %cds7
cds7:
  %lneys = load i64, i64* %R1_Var
  %lneyt = inttoptr i64 %lneys to i64*
  %lneyu = load i64, i64* %lneyt, !tbaa !4
  %lneyv = inttoptr i64 %lneyu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneyw = load i64*, i64** %Sp_Var
  %lneyx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneyv( i64* %Base_Arg, i64* %lneyw, i64* %Hp_Arg, i64 %lneyx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCS:
  %lneyy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneyz = load i64*, i64** %Sp_Var
  %lneyA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneyy( i64* %Base_Arg, i64* %lneyz, i64* %Hp_Arg, i64 %lneyA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cds6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cds6_info$def to i8*)
define internal ghccc void @cds6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neyB:
  %ls7HC = alloca i64, i32 1
  %ls7HD = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cds6
cds6:
  %lneyD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsb_info$def to i64
  %lneyC = load i64*, i64** %Sp_Var
  %lneyE = getelementptr inbounds i64, i64* %lneyC, i32 -2
  store i64 %lneyD, i64* %lneyE, !tbaa !2
  %lneyH = load i64, i64* %R1_Var
  %lneyI = add i64 %lneyH, 15
  %lneyJ = inttoptr i64 %lneyI to i64*
  %lneyK = load i64, i64* %lneyJ, !tbaa !4
  store i64 %lneyK, i64* %ls7HC
  %lneyN = load i64, i64* %R1_Var
  %lneyO = add i64 %lneyN, 23
  %lneyP = inttoptr i64 %lneyO to i64*
  %lneyQ = load i64, i64* %lneyP, !tbaa !4
  store i64 %lneyQ, i64* %ls7HD
  %lneyT = load i64, i64* %R1_Var
  %lneyU = add i64 %lneyT, 7
  %lneyV = inttoptr i64 %lneyU to i64*
  %lneyW = load i64, i64* %lneyV, !tbaa !4
  store i64 %lneyW, i64* %R1_Var
  %lneyY = load i64, i64* %ls7HD
  %lneyX = load i64*, i64** %Sp_Var
  %lneyZ = getelementptr inbounds i64, i64* %lneyX, i32 -1
  store i64 %lneyY, i64* %lneyZ, !tbaa !2
  %lnez1 = load i64, i64* %ls7HC
  %lnez0 = load i64*, i64** %Sp_Var
  %lnez2 = getelementptr inbounds i64, i64* %lnez0, i32 0
  store i64 %lnez1, i64* %lnez2, !tbaa !2
  %lnez3 = load i64*, i64** %Sp_Var
  %lnez4 = getelementptr inbounds i64, i64* %lnez3, i32 -2
  %lnez5 = ptrtoint i64* %lnez4 to i64
  %lnez6 = inttoptr i64 %lnez5 to i64*
  store i64* %lnez6, i64** %Sp_Var
  %lnez7 = load i64, i64* %R1_Var
  %lnez8 = and i64 %lnez7, 7
  %lnez9 = icmp ne i64 %lnez8, 0
  br i1 %lnez9, label %udCT, label %cdsc
cdsc:
  %lnezb = load i64, i64* %R1_Var
  %lnezc = inttoptr i64 %lnezb to i64*
  %lnezd = load i64, i64* %lnezc, !tbaa !4
  %lneze = inttoptr i64 %lnezd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnezf = load i64*, i64** %Sp_Var
  %lnezg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneze( i64* %Base_Arg, i64* %lnezf, i64* %Hp_Arg, i64 %lnezg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCT:
  %lnezh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnezi = load i64*, i64** %Sp_Var
  %lnezj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnezh( i64* %Base_Arg, i64* %lnezi, i64* %Hp_Arg, i64 %lnezj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdsb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsb_info$def to i8*)
define internal ghccc void @cdsb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104461, i32 30, i32 0}>
{
nezk:
  %ls7HF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdsb
cdsb:
  %lnezl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsg_info$def to i64
  %lnezm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnezl, i64* %lnezm, !tbaa !2
  %lnezp = load i64, i64* %R1_Var
  %lnezq = add i64 %lnezp, 7
  %lnezr = inttoptr i64 %lnezq to double*
  %lnezs = load double, double* %lnezr, !tbaa !4
  store double %lnezs, double* %ls7HF
  %lnezt = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnezu = bitcast i64* %lnezt to i64*
  %lnezv = load i64, i64* %lnezu, !tbaa !2
  store i64 %lnezv, i64* %R1_Var
  %lnezw = load double, double* %ls7HF
  %lnezx = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnezy = bitcast i64* %lnezx to double*
  store double %lnezw, double* %lnezy, !tbaa !2
  %lnezz = load i64, i64* %R1_Var
  %lnezA = and i64 %lnezz, 7
  %lnezB = icmp ne i64 %lnezA, 0
  br i1 %lnezB, label %udCU, label %cdsh
cdsh:
  %lnezD = load i64, i64* %R1_Var
  %lnezE = inttoptr i64 %lnezD to i64*
  %lnezF = load i64, i64* %lnezE, !tbaa !4
  %lnezG = inttoptr i64 %lnezF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnezH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnezG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnezH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCU:
  %lnezI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnezJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnezI( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnezJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdsg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsg_info$def to i8*)
define internal ghccc void @cdsg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104589, i32 30, i32 0}>
{
nezK:
  %ls7HH = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdsg
cdsg:
  %lnezL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsl_info$def to i64
  %lnezM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnezL, i64* %lnezM, !tbaa !2
  %lnezP = load i64, i64* %R1_Var
  %lnezQ = add i64 %lnezP, 7
  %lnezR = inttoptr i64 %lnezQ to double*
  %lnezS = load double, double* %lnezR, !tbaa !4
  store double %lnezS, double* %ls7HH
  %lnezT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnezU = bitcast i64* %lnezT to i64*
  %lnezV = load i64, i64* %lnezU, !tbaa !2
  store i64 %lnezV, i64* %R1_Var
  %lnezW = load double, double* %ls7HH
  %lnezX = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnezY = bitcast i64* %lnezX to double*
  store double %lnezW, double* %lnezY, !tbaa !2
  %lnezZ = load i64, i64* %R1_Var
  %lneA0 = and i64 %lnezZ, 7
  %lneA1 = icmp ne i64 %lneA0, 0
  br i1 %lneA1, label %udCV, label %cdsm
cdsm:
  %lneA3 = load i64, i64* %R1_Var
  %lneA4 = inttoptr i64 %lneA3 to i64*
  %lneA5 = load i64, i64* %lneA4, !tbaa !4
  %lneA6 = inttoptr i64 %lneA5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneA7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneA6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneA7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCV:
  %lneA8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneA9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneA8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneA9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdsl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsl_info$def to i8*)
define internal ghccc void @cdsl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104653, i32 30, i32 0}>
{
neAa:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7HK = alloca double, i32 1
  %ls7HQ = alloca double, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdsl
cdsl:
  %lneAb = load i64*, i64** %Hp_Var
  %lneAc = getelementptr inbounds i64, i64* %lneAb, i32 15
  %lneAd = ptrtoint i64* %lneAc to i64
  %lneAe = inttoptr i64 %lneAd to i64*
  store i64* %lneAe, i64** %Hp_Var
  %lneAf = load i64*, i64** %Hp_Var
  %lneAg = ptrtoint i64* %lneAf to i64
  %lneAh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneAi = bitcast i64* %lneAh to i64*
  %lneAj = load i64, i64* %lneAi, !tbaa !5
  %lneAk = icmp ugt i64 %lneAg, %lneAj
  %lneAl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneAk, i1 0 )
  br i1 %lneAl, label %cdAs, label %cdAr
cdAr:
  %lneAm = load i64*, i64** %Sp_Var
  %lneAn = getelementptr inbounds i64, i64* %lneAm, i32 2
  %lneAo = bitcast i64* %lneAn to double*
  %lneAp = load double, double* %lneAo, !tbaa !2
  %lneAq = load i64*, i64** %Sp_Var
  %lneAr = getelementptr inbounds i64, i64* %lneAq, i32 11
  %lneAs = bitcast i64* %lneAr to double*
  %lneAt = load double, double* %lneAs, !tbaa !2
  %lneAu = fmul double %lneAp, %lneAt
  %lneAv = load i64*, i64** %Sp_Var
  %lneAw = getelementptr inbounds i64, i64* %lneAv, i32 1
  %lneAx = bitcast i64* %lneAw to double*
  %lneAy = load double, double* %lneAx, !tbaa !2
  %lneAz = load i64*, i64** %Sp_Var
  %lneAA = getelementptr inbounds i64, i64* %lneAz, i32 7
  %lneAB = bitcast i64* %lneAA to double*
  %lneAC = load double, double* %lneAB, !tbaa !2
  %lneAD = fmul double %lneAy, %lneAC
  %lneAE = fadd double %lneAu, %lneAD
  %lneAH = load i64, i64* %R1_Var
  %lneAI = add i64 %lneAH, 7
  %lneAJ = inttoptr i64 %lneAI to double*
  %lneAK = load double, double* %lneAJ, !tbaa !4
  %lneAL = load i64*, i64** %Sp_Var
  %lneAM = getelementptr inbounds i64, i64* %lneAL, i32 6
  %lneAN = bitcast i64* %lneAM to double*
  %lneAO = load double, double* %lneAN, !tbaa !2
  %lneAP = fmul double %lneAK, %lneAO
  %lneAQ = fadd double %lneAE, %lneAP
  %lneAR = fsub double 0x8000000000000000, %lneAQ
  store double %lneAR, double* %ls7HK
  %lneAS = load i64*, i64** %Sp_Var
  %lneAT = getelementptr inbounds i64, i64* %lneAS, i32 10
  %lneAU = bitcast i64* %lneAT to double*
  %lneAV = load double, double* %lneAU, !tbaa !2
  %lneAW = fsub double 0x8000000000000000, %lneAV
  store double %lneAW, double* %ls7HQ
  %lneAX = load double, double* %ls7HK
  %lneAY = fcmp ole double %lneAX, 0x0000000000000000
  %lneAZ = zext i1 %lneAY to i64
  switch i64 %lneAZ, label %cdBj [i64 1, label %cdBk]
cdBj:
  %lneB0 = load i64*, i64** %Hp_Var
  %lneB1 = getelementptr inbounds i64, i64* %lneB0, i32 -15
  %lneB2 = ptrtoint i64* %lneB1 to i64
  %lneB3 = inttoptr i64 %lneB2 to i64*
  store i64* %lneB3, i64** %Hp_Var
  %lneB5 = load i64*, i64** %Sp_Var
  %lneB6 = getelementptr inbounds i64, i64* %lneB5, i32 13
  %lneB7 = bitcast i64* %lneB6 to i64*
  %lneB8 = load i64, i64* %lneB7, !tbaa !2
  %lneB4 = load i64*, i64** %Sp_Var
  %lneB9 = getelementptr inbounds i64, i64* %lneB4, i32 7
  store i64 %lneB8, i64* %lneB9, !tbaa !2
  %lneBb = load double, double* %ls7HQ
  %lneBa = load i64*, i64** %Sp_Var
  %lneBc = getelementptr inbounds i64, i64* %lneBa, i32 10
  %lneBd = bitcast i64* %lneBc to double*
  store double %lneBb, double* %lneBd, !tbaa !2
  %lneBf = load double, double* %ls7HK
  %lneBe = load i64*, i64** %Sp_Var
  %lneBg = getelementptr inbounds i64, i64* %lneBe, i32 11
  %lneBh = bitcast i64* %lneBg to double*
  store double %lneBf, double* %lneBh, !tbaa !2
  %lneBi = load i64*, i64** %Sp_Var
  %lneBj = getelementptr inbounds i64, i64* %lneBi, i32 3
  %lneBk = ptrtoint i64* %lneBj to i64
  %lneBl = inttoptr i64 %lneBk to i64*
  store i64* %lneBl, i64** %Sp_Var
  %lneBm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdAR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneBn = load i64*, i64** %Sp_Var
  %lneBo = load i64*, i64** %Hp_Var
  %lneBp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneBm( i64* %Base_Arg, i64* %lneBn, i64* %lneBo, i64 %lneBp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBk:
  %lneBr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Jp_info$def to i64
  %lneBq = load i64*, i64** %Hp_Var
  %lneBs = getelementptr inbounds i64, i64* %lneBq, i32 -14
  store i64 %lneBr, i64* %lneBs, !tbaa !3
  %lneBu = load i64*, i64** %Sp_Var
  %lneBv = getelementptr inbounds i64, i64* %lneBu, i32 3
  %lneBw = bitcast i64* %lneBv to i64*
  %lneBx = load i64, i64* %lneBw, !tbaa !2
  %lneBt = load i64*, i64** %Hp_Var
  %lneBy = getelementptr inbounds i64, i64* %lneBt, i32 -12
  store i64 %lneBx, i64* %lneBy, !tbaa !3
  %lneBA = load i64*, i64** %Sp_Var
  %lneBB = getelementptr inbounds i64, i64* %lneBA, i32 4
  %lneBC = bitcast i64* %lneBB to i64*
  %lneBD = load i64, i64* %lneBC, !tbaa !2
  %lneBz = load i64*, i64** %Hp_Var
  %lneBE = getelementptr inbounds i64, i64* %lneBz, i32 -11
  store i64 %lneBD, i64* %lneBE, !tbaa !3
  %lneBG = load double, double* %ls7HQ
  %lneBF = load i64*, i64** %Hp_Var
  %lneBH = getelementptr inbounds i64, i64* %lneBF, i32 -10
  %lneBI = bitcast i64* %lneBH to double*
  store double %lneBG, double* %lneBI, !tbaa !3
  %lneBK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ji_info$def to i64
  %lneBJ = load i64*, i64** %Hp_Var
  %lneBL = getelementptr inbounds i64, i64* %lneBJ, i32 -9
  store i64 %lneBK, i64* %lneBL, !tbaa !3
  %lneBN = load i64*, i64** %Sp_Var
  %lneBO = getelementptr inbounds i64, i64* %lneBN, i32 9
  %lneBP = bitcast i64* %lneBO to i64*
  %lneBQ = load i64, i64* %lneBP, !tbaa !2
  %lneBM = load i64*, i64** %Hp_Var
  %lneBR = getelementptr inbounds i64, i64* %lneBM, i32 -7
  store i64 %lneBQ, i64* %lneBR, !tbaa !3
  %lneBT = load i64*, i64** %Sp_Var
  %lneBU = getelementptr inbounds i64, i64* %lneBT, i32 5
  %lneBV = bitcast i64* %lneBU to i64*
  %lneBW = load i64, i64* %lneBV, !tbaa !2
  %lneBS = load i64*, i64** %Hp_Var
  %lneBX = getelementptr inbounds i64, i64* %lneBS, i32 -6
  store i64 %lneBW, i64* %lneBX, !tbaa !3
  %lneBZ = load double, double* %ls7HQ
  %lneBY = load i64*, i64** %Hp_Var
  %lneC0 = getelementptr inbounds i64, i64* %lneBY, i32 -5
  %lneC1 = bitcast i64* %lneC0 to double*
  store double %lneBZ, double* %lneC1, !tbaa !3
  %lneC3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Jb_info$def to i64
  %lneC2 = load i64*, i64** %Hp_Var
  %lneC4 = getelementptr inbounds i64, i64* %lneC2, i32 -4
  store i64 %lneC3, i64* %lneC4, !tbaa !3
  %lneC6 = load i64*, i64** %Sp_Var
  %lneC7 = getelementptr inbounds i64, i64* %lneC6, i32 12
  %lneC8 = bitcast i64* %lneC7 to i64*
  %lneC9 = load i64, i64* %lneC8, !tbaa !2
  %lneC5 = load i64*, i64** %Hp_Var
  %lneCa = getelementptr inbounds i64, i64* %lneC5, i32 -2
  store i64 %lneC9, i64* %lneCa, !tbaa !3
  %lneCc = load i64*, i64** %Sp_Var
  %lneCd = getelementptr inbounds i64, i64* %lneCc, i32 8
  %lneCe = bitcast i64* %lneCd to i64*
  %lneCf = load i64, i64* %lneCe, !tbaa !2
  %lneCb = load i64*, i64** %Hp_Var
  %lneCg = getelementptr inbounds i64, i64* %lneCb, i32 -1
  store i64 %lneCf, i64* %lneCg, !tbaa !3
  %lneCi = load double, double* %ls7HQ
  %lneCh = load i64*, i64** %Hp_Var
  %lneCj = getelementptr inbounds i64, i64* %lneCh, i32 0
  %lneCk = bitcast i64* %lneCj to double*
  store double %lneCi, double* %lneCk, !tbaa !3
  %lneCl = load i64*, i64** %Hp_Var
  %lneCm = getelementptr inbounds i64, i64* %lneCl, i32 -14
  %lneCn = ptrtoint i64* %lneCm to i64
  store i64 %lneCn, i64* %R3_Var
  %lneCo = load i64*, i64** %Hp_Var
  %lneCp = getelementptr inbounds i64, i64* %lneCo, i32 -9
  %lneCq = ptrtoint i64* %lneCp to i64
  store i64 %lneCq, i64* %R2_Var
  %lneCr = load i64*, i64** %Hp_Var
  %lneCs = getelementptr inbounds i64, i64* %lneCr, i32 -4
  %lneCt = ptrtoint i64* %lneCs to i64
  store i64 %lneCt, i64* %R1_Var
  %lneCu = load i64*, i64** %Sp_Var
  %lneCv = getelementptr inbounds i64, i64* %lneCu, i32 14
  %lneCw = ptrtoint i64* %lneCv to i64
  %lneCx = inttoptr i64 %lneCw to i64*
  store i64* %lneCx, i64** %Sp_Var
  %lneCy = load i64*, i64** %Sp_Var
  %lneCz = getelementptr inbounds i64, i64* %lneCy, i32 0
  %lneCA = bitcast i64* %lneCz to i64*
  %lneCB = load i64, i64* %lneCA, !tbaa !2
  %lneCC = inttoptr i64 %lneCB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneCD = load i64*, i64** %Sp_Var
  %lneCE = load i64*, i64** %Hp_Var
  %lneCF = load i64, i64* %R1_Var
  %lneCG = load i64, i64* %R2_Var
  %lneCH = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneCC( i64* %Base_Arg, i64* %lneCD, i64* %lneCE, i64 %lneCF, i64 %lneCG, i64 %lneCH, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAs:
  %lneCI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %lneCI, !tbaa !5
  %lneCJ = load i64, i64* %R1_Var
  store i64 %lneCJ, i64* %R1_Var
  %lneCK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneCL = load i64*, i64** %Sp_Var
  %lneCM = load i64*, i64** %Hp_Var
  %lneCN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneCK( i64* %Base_Arg, i64* %lneCL, i64* %lneCM, i64 %lneCN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdAR = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdAR$def to i8*)
define internal ghccc void @_cdAR$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neCO:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdAR
cdAR:
  %lneCQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAT_info$def to i64
  %lneCP = load i64*, i64** %Sp_Var
  %lneCR = getelementptr inbounds i64, i64* %lneCP, i32 -1
  store i64 %lneCQ, i64* %lneCR, !tbaa !2
  %lneCS = load i64*, i64** %Sp_Var
  %lneCT = getelementptr inbounds i64, i64* %lneCS, i32 4
  %lneCU = bitcast i64* %lneCT to i64*
  %lneCV = load i64, i64* %lneCU, !tbaa !2
  store i64 %lneCV, i64* %R1_Var
  %lneCW = load i64*, i64** %Sp_Var
  %lneCX = getelementptr inbounds i64, i64* %lneCW, i32 -1
  %lneCY = ptrtoint i64* %lneCX to i64
  %lneCZ = inttoptr i64 %lneCY to i64*
  store i64* %lneCZ, i64** %Sp_Var
  %lneD0 = load i64, i64* %R1_Var
  %lneD1 = and i64 %lneD0, 7
  %lneD2 = icmp ne i64 %lneD1, 0
  br i1 %lneD2, label %udDb, label %cdAV
cdAV:
  %lneD4 = load i64, i64* %R1_Var
  %lneD5 = inttoptr i64 %lneD4 to i64*
  %lneD6 = load i64, i64* %lneD5, !tbaa !4
  %lneD7 = inttoptr i64 %lneD6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneD8 = load i64*, i64** %Sp_Var
  %lneD9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneD7( i64* %Base_Arg, i64* %lneD8, i64* %Hp_Arg, i64 %lneD9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDb:
  %lneDa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneDb = load i64*, i64** %Sp_Var
  %lneDc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneDa( i64* %Base_Arg, i64* %lneDb, i64* %Hp_Arg, i64 %lneDc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdAT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAT_info$def to i8*)
define internal ghccc void @cdAT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neDd:
  %ls7J2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdAT
cdAT:
  %lneDe = load i64, i64* %R1_Var
  %lneDf = and i64 %lneDe, 7
  switch i64 %lneDf, label %cdB1 [i64 1, label %cdB1
i64 2, label %cdB6]
cdB1:
  %lneDg = ptrtoint %Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64
  %lneDh = add i64 %lneDg, 1
  %lneDi = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lneDh, i64* %lneDi, !tbaa !2
  %lneDj = ptrtoint %Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64
  %lneDk = add i64 %lneDj, 1
  %lneDl = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %lneDk, i64* %lneDl, !tbaa !2
  %lneDm = ptrtoint %Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i64
  %lneDn = add i64 %lneDm, 1
  %lneDo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneDn, i64* %lneDo, !tbaa !2
  %lneDp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdsR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneDq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneDp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneDq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdB6:
  %lneDr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdB4_info$def to i64
  %lneDs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneDr, i64* %lneDs, !tbaa !2
  %lneDv = load i64, i64* %R1_Var
  %lneDw = add i64 %lneDv, 14
  %lneDx = inttoptr i64 %lneDw to i64*
  %lneDy = load i64, i64* %lneDx, !tbaa !4
  store i64 %lneDy, i64* %ls7J2
  %lneDB = load i64, i64* %R1_Var
  %lneDC = add i64 %lneDB, 6
  %lneDD = inttoptr i64 %lneDC to i64*
  %lneDE = load i64, i64* %lneDD, !tbaa !4
  store i64 %lneDE, i64* %R1_Var
  %lneDF = load i64, i64* %ls7J2
  %lneDG = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lneDF, i64* %lneDG, !tbaa !2
  %lneDH = load i64, i64* %R1_Var
  %lneDI = and i64 %lneDH, 7
  %lneDJ = icmp ne i64 %lneDI, 0
  br i1 %lneDJ, label %udDc, label %cdB7
cdB7:
  %lneDL = load i64, i64* %R1_Var
  %lneDM = inttoptr i64 %lneDL to i64*
  %lneDN = load i64, i64* %lneDM, !tbaa !4
  %lneDO = inttoptr i64 %lneDN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneDP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneDO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneDP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDc:
  %lneDQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdB4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneDR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneDQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneDR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdB4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdB4_info$def to i8*)
define internal ghccc void @cdB4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 25099, i32 30, i32 0}>
{
neDS:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdB4
cdB4:
  %lneDT = load i64, i64* %R1_Var
  %lneDU = and i64 %lneDT, -8
  %lneDV = inttoptr i64 %lneDU to i64*
  %lneDW = load i64, i64* %lneDV, !tbaa !1
  %lneDX = add i64 %lneDW, -4
  %lneDY = inttoptr i64 %lneDX to i32*
  %lneDZ = load i32, i32* %lneDY, !tbaa !1
  %lneE0 = zext i32 %lneDZ to i64
  switch i64 %lneE0, label %cdBd [i64 7, label %cdBh]
cdBd:
  %lneE2 = load i64*, i64** %Sp_Var
  %lneE3 = getelementptr inbounds i64, i64* %lneE2, i32 5
  %lneE4 = bitcast i64* %lneE3 to i64*
  %lneE5 = load i64, i64* %lneE4, !tbaa !2
  %lneE1 = load i64*, i64** %Sp_Var
  %lneE6 = getelementptr inbounds i64, i64* %lneE1, i32 5
  store i64 %lneE5, i64* %lneE6, !tbaa !2
  %lneE7 = load i64*, i64** %Sp_Var
  %lneE8 = getelementptr inbounds i64, i64* %lneE7, i32 1
  %lneE9 = ptrtoint i64* %lneE8 to i64
  %lneEa = inttoptr i64 %lneE9 to i64*
  store i64* %lneEa, i64** %Sp_Var
  %lneEb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdAR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneEc = load i64*, i64** %Sp_Var
  %lneEd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneEb( i64* %Base_Arg, i64* %lneEc, i64* %Hp_Arg, i64 %lneEd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBh:
  %lneEf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAH_info$def to i64
  %lneEe = load i64*, i64** %Sp_Var
  %lneEg = getelementptr inbounds i64, i64* %lneEe, i32 0
  store i64 %lneEf, i64* %lneEg, !tbaa !2
  %lneEj = load i64, i64* %R1_Var
  %lneEk = add i64 %lneEj, 1
  %lneEl = inttoptr i64 %lneEk to i64*
  %lneEm = load i64, i64* %lneEl, !tbaa !4
  store i64 %lneEm, i64* %R1_Var
  %lneEn = load i64, i64* %R1_Var
  %lneEo = and i64 %lneEn, 7
  %lneEp = icmp ne i64 %lneEo, 0
  br i1 %lneEp, label %udDe, label %cdAJ
cdAJ:
  %lneEr = load i64, i64* %R1_Var
  %lneEs = inttoptr i64 %lneEr to i64*
  %lneEt = load i64, i64* %lneEs, !tbaa !4
  %lneEu = inttoptr i64 %lneEt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneEv = load i64*, i64** %Sp_Var
  %lneEw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneEu( i64* %Base_Arg, i64* %lneEv, i64* %Hp_Arg, i64 %lneEw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDe:
  %lneEx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneEy = load i64*, i64** %Sp_Var
  %lneEz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneEx( i64* %Base_Arg, i64* %lneEy, i64* %Hp_Arg, i64 %lneEz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdAH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAH_info$def to i8*)
define internal ghccc void @cdAH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neEA:
  br label %cdAH
cdAH:
  %lneEB = add i64 %R1_Arg, 23
  %lneEC = inttoptr i64 %lneEB to i64*
  %lneED = load i64, i64* %lneEC, !tbaa !4
  %lneEE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneED, i64* %lneEE, !tbaa !2
  %lneEF = add i64 %R1_Arg, 15
  %lneEG = inttoptr i64 %lneEF to i64*
  %lneEH = load i64, i64* %lneEG, !tbaa !4
  %lneEI = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %lneEH, i64* %lneEI, !tbaa !2
  %lneEJ = add i64 %R1_Arg, 7
  %lneEK = inttoptr i64 %lneEJ to i64*
  %lneEL = load i64, i64* %lneEK, !tbaa !4
  %lneEM = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lneEL, i64* %lneEM, !tbaa !2
  %lneEN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdsR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneEN( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdsR = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdsR$def to i8*)
define internal ghccc void @_cdsR$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neEO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7HT = alloca i64, i32 1
  %ls7HU = alloca i64, i32 1
  %ls7HV = alloca i64, i32 1
  %lcdsT = alloca i64, i32 1
  %ls7HQ = alloca double, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdsR
cdsR:
  %lneEP = load i64*, i64** %Hp_Var
  %lneEQ = getelementptr inbounds i64, i64* %lneEP, i32 25
  %lneER = ptrtoint i64* %lneEQ to i64
  %lneES = inttoptr i64 %lneER to i64*
  store i64* %lneES, i64** %Hp_Var
  %lneET = load i64*, i64** %Sp_Var
  %lneEU = getelementptr inbounds i64, i64* %lneET, i32 5
  %lneEV = bitcast i64* %lneEU to i64*
  %lneEW = load i64, i64* %lneEV, !tbaa !2
  store i64 %lneEW, i64* %ls7HT
  %lneEX = load i64*, i64** %Sp_Var
  %lneEY = getelementptr inbounds i64, i64* %lneEX, i32 4
  %lneEZ = bitcast i64* %lneEY to i64*
  %lneF0 = load i64, i64* %lneEZ, !tbaa !2
  store i64 %lneF0, i64* %ls7HU
  %lneF1 = load i64*, i64** %Sp_Var
  %lneF2 = getelementptr inbounds i64, i64* %lneF1, i32 0
  %lneF3 = bitcast i64* %lneF2 to i64*
  %lneF4 = load i64, i64* %lneF3, !tbaa !2
  store i64 %lneF4, i64* %ls7HV
  %lneF5 = load i64*, i64** %Hp_Var
  %lneF6 = ptrtoint i64* %lneF5 to i64
  %lneF7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneF8 = bitcast i64* %lneF7 to i64*
  %lneF9 = load i64, i64* %lneF8, !tbaa !5
  %lneFa = icmp ugt i64 %lneF6, %lneF9
  %lneFb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneFa, i1 0 )
  br i1 %lneFb, label %cdAv, label %cdAu
cdAu:
  %lneFd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7HW_info$def to i64
  %lneFc = load i64*, i64** %Hp_Var
  %lneFe = getelementptr inbounds i64, i64* %lneFc, i32 -24
  store i64 %lneFd, i64* %lneFe, !tbaa !3
  %lneFg = load i64*, i64** %Sp_Var
  %lneFh = getelementptr inbounds i64, i64* %lneFg, i32 11
  %lneFi = bitcast i64* %lneFh to i64*
  %lneFj = load i64, i64* %lneFi, !tbaa !2
  %lneFf = load i64*, i64** %Hp_Var
  %lneFk = getelementptr inbounds i64, i64* %lneFf, i32 -22
  store i64 %lneFj, i64* %lneFk, !tbaa !3
  %lneFm = load i64*, i64** %Sp_Var
  %lneFn = getelementptr inbounds i64, i64* %lneFm, i32 9
  %lneFo = bitcast i64* %lneFn to double*
  %lneFp = load double, double* %lneFo, !tbaa !2
  %lneFl = load i64*, i64** %Hp_Var
  %lneFq = getelementptr inbounds i64, i64* %lneFl, i32 -21
  %lneFr = bitcast i64* %lneFq to double*
  store double %lneFp, double* %lneFr, !tbaa !3
  %lneFt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7IQ_info$def to i64
  %lneFs = load i64*, i64** %Hp_Var
  %lneFu = getelementptr inbounds i64, i64* %lneFs, i32 -20
  store i64 %lneFt, i64* %lneFu, !tbaa !3
  %lneFw = load i64, i64* %ls7HV
  %lneFv = load i64*, i64** %Hp_Var
  %lneFx = getelementptr inbounds i64, i64* %lneFv, i32 -18
  store i64 %lneFw, i64* %lneFx, !tbaa !3
  %lneFy = load i64*, i64** %Hp_Var
  %lneFz = getelementptr inbounds i64, i64* %lneFy, i32 -24
  %lneFA = ptrtoint i64* %lneFz to i64
  store i64 %lneFA, i64* %lcdsT
  %lneFC = load i64, i64* %lcdsT
  %lneFB = load i64*, i64** %Hp_Var
  %lneFD = getelementptr inbounds i64, i64* %lneFB, i32 -17
  store i64 %lneFC, i64* %lneFD, !tbaa !3
  %lneFF = load i64*, i64** %Sp_Var
  %lneFG = getelementptr inbounds i64, i64* %lneFF, i32 1
  %lneFH = bitcast i64* %lneFG to i64*
  %lneFI = load i64, i64* %lneFH, !tbaa !2
  %lneFE = load i64*, i64** %Hp_Var
  %lneFJ = getelementptr inbounds i64, i64* %lneFE, i32 -16
  store i64 %lneFI, i64* %lneFJ, !tbaa !3
  %lneFL = load i64*, i64** %Sp_Var
  %lneFM = getelementptr inbounds i64, i64* %lneFL, i32 2
  %lneFN = bitcast i64* %lneFM to i64*
  %lneFO = load i64, i64* %lneFN, !tbaa !2
  %lneFK = load i64*, i64** %Hp_Var
  %lneFP = getelementptr inbounds i64, i64* %lneFK, i32 -15
  store i64 %lneFO, i64* %lneFP, !tbaa !3
  %lneFQ = load i64*, i64** %Sp_Var
  %lneFR = getelementptr inbounds i64, i64* %lneFQ, i32 8
  %lneFS = bitcast i64* %lneFR to double*
  %lneFT = load double, double* %lneFS, !tbaa !2
  store double %lneFT, double* %ls7HQ
  %lneFV = load double, double* %ls7HQ
  %lneFU = load i64*, i64** %Hp_Var
  %lneFW = getelementptr inbounds i64, i64* %lneFU, i32 -14
  %lneFX = bitcast i64* %lneFW to double*
  store double %lneFV, double* %lneFX, !tbaa !3
  %lneFZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7IC_info$def to i64
  %lneFY = load i64*, i64** %Hp_Var
  %lneG0 = getelementptr inbounds i64, i64* %lneFY, i32 -13
  store i64 %lneFZ, i64* %lneG0, !tbaa !3
  %lneG2 = load i64, i64* %ls7HU
  %lneG1 = load i64*, i64** %Hp_Var
  %lneG3 = getelementptr inbounds i64, i64* %lneG1, i32 -11
  store i64 %lneG2, i64* %lneG3, !tbaa !3
  %lneG5 = load i64, i64* %lcdsT
  %lneG4 = load i64*, i64** %Hp_Var
  %lneG6 = getelementptr inbounds i64, i64* %lneG4, i32 -10
  store i64 %lneG5, i64* %lneG6, !tbaa !3
  %lneG8 = load i64*, i64** %Sp_Var
  %lneG9 = getelementptr inbounds i64, i64* %lneG8, i32 7
  %lneGa = bitcast i64* %lneG9 to i64*
  %lneGb = load i64, i64* %lneGa, !tbaa !2
  %lneG7 = load i64*, i64** %Hp_Var
  %lneGc = getelementptr inbounds i64, i64* %lneG7, i32 -9
  store i64 %lneGb, i64* %lneGc, !tbaa !3
  %lneGe = load i64*, i64** %Sp_Var
  %lneGf = getelementptr inbounds i64, i64* %lneGe, i32 3
  %lneGg = bitcast i64* %lneGf to i64*
  %lneGh = load i64, i64* %lneGg, !tbaa !2
  %lneGd = load i64*, i64** %Hp_Var
  %lneGi = getelementptr inbounds i64, i64* %lneGd, i32 -8
  store i64 %lneGh, i64* %lneGi, !tbaa !3
  %lneGk = load double, double* %ls7HQ
  %lneGj = load i64*, i64** %Hp_Var
  %lneGl = getelementptr inbounds i64, i64* %lneGj, i32 -7
  %lneGm = bitcast i64* %lneGl to double*
  store double %lneGk, double* %lneGm, !tbaa !3
  %lneGo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Io_info$def to i64
  %lneGn = load i64*, i64** %Hp_Var
  %lneGp = getelementptr inbounds i64, i64* %lneGn, i32 -6
  store i64 %lneGo, i64* %lneGp, !tbaa !3
  %lneGr = load i64, i64* %ls7HT
  %lneGq = load i64*, i64** %Hp_Var
  %lneGs = getelementptr inbounds i64, i64* %lneGq, i32 -4
  store i64 %lneGr, i64* %lneGs, !tbaa !3
  %lneGu = load i64, i64* %lcdsT
  %lneGt = load i64*, i64** %Hp_Var
  %lneGv = getelementptr inbounds i64, i64* %lneGt, i32 -3
  store i64 %lneGu, i64* %lneGv, !tbaa !3
  %lneGx = load i64*, i64** %Sp_Var
  %lneGy = getelementptr inbounds i64, i64* %lneGx, i32 10
  %lneGz = bitcast i64* %lneGy to i64*
  %lneGA = load i64, i64* %lneGz, !tbaa !2
  %lneGw = load i64*, i64** %Hp_Var
  %lneGB = getelementptr inbounds i64, i64* %lneGw, i32 -2
  store i64 %lneGA, i64* %lneGB, !tbaa !3
  %lneGD = load i64*, i64** %Sp_Var
  %lneGE = getelementptr inbounds i64, i64* %lneGD, i32 6
  %lneGF = bitcast i64* %lneGE to i64*
  %lneGG = load i64, i64* %lneGF, !tbaa !2
  %lneGC = load i64*, i64** %Hp_Var
  %lneGH = getelementptr inbounds i64, i64* %lneGC, i32 -1
  store i64 %lneGG, i64* %lneGH, !tbaa !3
  %lneGJ = load double, double* %ls7HQ
  %lneGI = load i64*, i64** %Hp_Var
  %lneGK = getelementptr inbounds i64, i64* %lneGI, i32 0
  %lneGL = bitcast i64* %lneGK to double*
  store double %lneGJ, double* %lneGL, !tbaa !3
  %lneGM = load i64*, i64** %Hp_Var
  %lneGN = getelementptr inbounds i64, i64* %lneGM, i32 -20
  %lneGO = ptrtoint i64* %lneGN to i64
  store i64 %lneGO, i64* %R3_Var
  %lneGP = load i64*, i64** %Hp_Var
  %lneGQ = getelementptr inbounds i64, i64* %lneGP, i32 -13
  %lneGR = ptrtoint i64* %lneGQ to i64
  store i64 %lneGR, i64* %R2_Var
  %lneGS = load i64*, i64** %Hp_Var
  %lneGT = getelementptr inbounds i64, i64* %lneGS, i32 -6
  %lneGU = ptrtoint i64* %lneGT to i64
  store i64 %lneGU, i64* %R1_Var
  %lneGV = load i64*, i64** %Sp_Var
  %lneGW = getelementptr inbounds i64, i64* %lneGV, i32 12
  %lneGX = ptrtoint i64* %lneGW to i64
  %lneGY = inttoptr i64 %lneGX to i64*
  store i64* %lneGY, i64** %Sp_Var
  %lneGZ = load i64*, i64** %Sp_Var
  %lneH0 = getelementptr inbounds i64, i64* %lneGZ, i32 0
  %lneH1 = bitcast i64* %lneH0 to i64*
  %lneH2 = load i64, i64* %lneH1, !tbaa !2
  %lneH3 = inttoptr i64 %lneH2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneH4 = load i64*, i64** %Sp_Var
  %lneH5 = load i64*, i64** %Hp_Var
  %lneH6 = load i64, i64* %R1_Var
  %lneH7 = load i64, i64* %R2_Var
  %lneH8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneH3( i64* %Base_Arg, i64* %lneH4, i64* %lneH5, i64 %lneH6, i64 %lneH7, i64 %lneH8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAv:
  %lneH9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 200, i64* %lneH9, !tbaa !5
  %lneHb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsQ_info$def to i64
  %lneHa = load i64*, i64** %Sp_Var
  %lneHc = getelementptr inbounds i64, i64* %lneHa, i32 0
  store i64 %lneHb, i64* %lneHc, !tbaa !2
  %lneHd = load i64, i64* %ls7HV
  store i64 %lneHd, i64* %R3_Var
  %lneHe = load i64, i64* %ls7HU
  store i64 %lneHe, i64* %R2_Var
  %lneHf = load i64, i64* %ls7HT
  store i64 %lneHf, i64* %R1_Var
  %lneHg = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneHh = load i64*, i64** %Sp_Var
  %lneHi = load i64*, i64** %Hp_Var
  %lneHj = load i64, i64* %R1_Var
  %lneHk = load i64, i64* %R2_Var
  %lneHl = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneHg( i64* %Base_Arg, i64* %lneHh, i64* %lneHi, i64 %lneHj, i64 %lneHk, i64 %lneHl, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdsQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdsQ_info$def to i8*)
define internal ghccc void @cdsQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neHm:
  br label %cdsQ
cdsQ:
  %lneHn = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %R1_Arg, i64* %lneHn, !tbaa !2
  %lneHo = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %R2_Arg, i64* %lneHo, !tbaa !2
  %lneHp = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R3_Arg, i64* %lneHp, !tbaa !2
  %lneHq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdsR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneHq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdzS = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdzS$def to i8*)
define internal ghccc void @_cdzS$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neHr:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdzS
cdzS:
  %lneHt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzU_info$def to i64
  %lneHs = load i64*, i64** %Sp_Var
  %lneHu = getelementptr inbounds i64, i64* %lneHs, i32 -1
  store i64 %lneHt, i64* %lneHu, !tbaa !2
  %lneHv = load i64*, i64** %Sp_Var
  %lneHw = getelementptr inbounds i64, i64* %lneHv, i32 2
  %lneHx = bitcast i64* %lneHw to i64*
  %lneHy = load i64, i64* %lneHx, !tbaa !2
  store i64 %lneHy, i64* %R1_Var
  %lneHz = load i64*, i64** %Sp_Var
  %lneHA = getelementptr inbounds i64, i64* %lneHz, i32 -1
  %lneHB = ptrtoint i64* %lneHA to i64
  %lneHC = inttoptr i64 %lneHB to i64*
  store i64* %lneHC, i64** %Sp_Var
  %lneHD = load i64, i64* %R1_Var
  %lneHE = and i64 %lneHD, 7
  %lneHF = icmp ne i64 %lneHE, 0
  br i1 %lneHF, label %udD5, label %cdzW
cdzW:
  %lneHH = load i64, i64* %R1_Var
  %lneHI = inttoptr i64 %lneHH to i64*
  %lneHJ = load i64, i64* %lneHI, !tbaa !4
  %lneHK = inttoptr i64 %lneHJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneHL = load i64*, i64** %Sp_Var
  %lneHM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneHK( i64* %Base_Arg, i64* %lneHL, i64* %Hp_Arg, i64 %lneHM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD5:
  %lneHN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneHO = load i64*, i64** %Sp_Var
  %lneHP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneHN( i64* %Base_Arg, i64* %lneHO, i64* %Hp_Arg, i64 %lneHP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzU_info$def to i8*)
define internal ghccc void @cdzU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3528, i32 30, i32 0}>
{
neHQ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Hp = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdzU
cdzU:
  %lneHR = load i64, i64* %R1_Var
  %lneHS = and i64 %lneHR, 7
  switch i64 %lneHS, label %cdA2 [i64 1, label %cdA2
i64 2, label %cdA7]
cdA2:
  %lneHU = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneHV = add i64 %lneHU, 1
  %lneHT = load i64*, i64** %Sp_Var
  %lneHW = getelementptr inbounds i64, i64* %lneHT, i32 3
  store i64 %lneHV, i64* %lneHW, !tbaa !2
  %lneHY = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneHZ = add i64 %lneHY, 1
  %lneHX = load i64*, i64** %Sp_Var
  %lneI0 = getelementptr inbounds i64, i64* %lneHX, i32 0
  store i64 %lneHZ, i64* %lneI0, !tbaa !2
  %lneI2 = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lneI3 = add i64 %lneI2, 1
  %lneI1 = load i64*, i64** %Sp_Var
  %lneI4 = getelementptr inbounds i64, i64* %lneI1, i32 -1
  store i64 %lneI3, i64* %lneI4, !tbaa !2
  %lneI5 = load i64*, i64** %Sp_Var
  %lneI6 = getelementptr inbounds i64, i64* %lneI5, i32 -1
  %lneI7 = ptrtoint i64* %lneI6 to i64
  %lneI8 = inttoptr i64 %lneI7 to i64*
  store i64* %lneI8, i64** %Sp_Var
  %lneI9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Fi$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneIa = load i64*, i64** %Sp_Var
  %lneIb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneI9( i64* %Base_Arg, i64* %lneIa, i64* %Hp_Arg, i64 %lneIb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdA7:
  %lneId = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to i64
  %lneIc = load i64*, i64** %Sp_Var
  %lneIe = getelementptr inbounds i64, i64* %lneIc, i32 0
  store i64 %lneId, i64* %lneIe, !tbaa !2
  %lneIh = load i64, i64* %R1_Var
  %lneIi = add i64 %lneIh, 14
  %lneIj = inttoptr i64 %lneIi to i64*
  %lneIk = load i64, i64* %lneIj, !tbaa !4
  store i64 %lneIk, i64* %ls7Hp
  %lneIn = load i64, i64* %R1_Var
  %lneIo = add i64 %lneIn, 6
  %lneIp = inttoptr i64 %lneIo to i64*
  %lneIq = load i64, i64* %lneIp, !tbaa !4
  store i64 %lneIq, i64* %R1_Var
  %lneIs = load i64, i64* %ls7Hp
  %lneIr = load i64*, i64** %Sp_Var
  %lneIt = getelementptr inbounds i64, i64* %lneIr, i32 3
  store i64 %lneIs, i64* %lneIt, !tbaa !2
  %lneIu = load i64, i64* %R1_Var
  %lneIv = and i64 %lneIu, 7
  %lneIw = icmp ne i64 %lneIv, 0
  br i1 %lneIw, label %udD6, label %cdA8
cdA8:
  %lneIy = load i64, i64* %R1_Var
  %lneIz = inttoptr i64 %lneIy to i64*
  %lneIA = load i64, i64* %lneIz, !tbaa !4
  %lneIB = inttoptr i64 %lneIA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneIC = load i64*, i64** %Sp_Var
  %lneID = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneIB( i64* %Base_Arg, i64* %lneIC, i64* %Hp_Arg, i64 %lneID, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD6:
  %lneIE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneIF = load i64*, i64** %Sp_Var
  %lneIG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneIE( i64* %Base_Arg, i64* %lneIF, i64* %Hp_Arg, i64 %lneIG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdA5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to i8*)
define internal ghccc void @cdA5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3272, i32 30, i32 0}>
{
neIH:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdA5
cdA5:
  %lneII = load i64, i64* %R1_Var
  %lneIJ = and i64 %lneII, 7
  switch i64 %lneIJ, label %cdAe [i64 2, label %cdAi]
cdAe:
  %lneIL = load i64*, i64** %Sp_Var
  %lneIM = getelementptr inbounds i64, i64* %lneIL, i32 3
  %lneIN = bitcast i64* %lneIM to i64*
  %lneIO = load i64, i64* %lneIN, !tbaa !2
  %lneIK = load i64*, i64** %Sp_Var
  %lneIP = getelementptr inbounds i64, i64* %lneIK, i32 3
  store i64 %lneIO, i64* %lneIP, !tbaa !2
  %lneIQ = load i64*, i64** %Sp_Var
  %lneIR = getelementptr inbounds i64, i64* %lneIQ, i32 1
  %lneIS = ptrtoint i64* %lneIR to i64
  %lneIT = inttoptr i64 %lneIS to i64*
  store i64* %lneIT, i64** %Sp_Var
  %lneIU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdzS$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneIV = load i64*, i64** %Sp_Var
  %lneIW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneIU( i64* %Base_Arg, i64* %lneIV, i64* %Hp_Arg, i64 %lneIW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAi:
  %lneIY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzI_info$def to i64
  %lneIX = load i64*, i64** %Sp_Var
  %lneIZ = getelementptr inbounds i64, i64* %lneIX, i32 0
  store i64 %lneIY, i64* %lneIZ, !tbaa !2
  %lneJ2 = load i64, i64* %R1_Var
  %lneJ3 = add i64 %lneJ2, 6
  %lneJ4 = inttoptr i64 %lneJ3 to i64*
  %lneJ5 = load i64, i64* %lneJ4, !tbaa !4
  store i64 %lneJ5, i64* %R1_Var
  %lneJ6 = load i64, i64* %R1_Var
  %lneJ7 = and i64 %lneJ6, 7
  %lneJ8 = icmp ne i64 %lneJ7, 0
  br i1 %lneJ8, label %udD8, label %cdzK
cdzK:
  %lneJa = load i64, i64* %R1_Var
  %lneJb = inttoptr i64 %lneJa to i64*
  %lneJc = load i64, i64* %lneJb, !tbaa !4
  %lneJd = inttoptr i64 %lneJc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneJe = load i64*, i64** %Sp_Var
  %lneJf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneJd( i64* %Base_Arg, i64* %lneJe, i64* %Hp_Arg, i64 %lneJf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD8:
  %lneJg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneJh = load i64*, i64** %Sp_Var
  %lneJi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneJg( i64* %Base_Arg, i64* %lneJh, i64* %Hp_Arg, i64 %lneJi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzI_info$def to i8*)
define internal ghccc void @cdzI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3528, i32 30, i32 0}>
{
neJj:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdzI
cdzI:
  %lneJl = add i64 %R1_Arg, 23
  %lneJm = inttoptr i64 %lneJl to i64*
  %lneJn = load i64, i64* %lneJm, !tbaa !4
  %lneJk = load i64*, i64** %Sp_Var
  %lneJo = getelementptr inbounds i64, i64* %lneJk, i32 -1
  store i64 %lneJn, i64* %lneJo, !tbaa !2
  %lneJq = add i64 %R1_Arg, 15
  %lneJr = inttoptr i64 %lneJq to i64*
  %lneJs = load i64, i64* %lneJr, !tbaa !4
  %lneJp = load i64*, i64** %Sp_Var
  %lneJt = getelementptr inbounds i64, i64* %lneJp, i32 0
  store i64 %lneJs, i64* %lneJt, !tbaa !2
  %lneJv = add i64 %R1_Arg, 7
  %lneJw = inttoptr i64 %lneJv to i64*
  %lneJx = load i64, i64* %lneJw, !tbaa !4
  %lneJu = load i64*, i64** %Sp_Var
  %lneJy = getelementptr inbounds i64, i64* %lneJu, i32 3
  store i64 %lneJx, i64* %lneJy, !tbaa !2
  %lneJz = load i64*, i64** %Sp_Var
  %lneJA = getelementptr inbounds i64, i64* %lneJz, i32 -1
  %lneJB = ptrtoint i64* %lneJA to i64
  %lneJC = inttoptr i64 %lneJB to i64*
  store i64* %lneJC, i64** %Sp_Var
  %lneJD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Fi$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneJE = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneJD( i64* %Base_Arg, i64* %lneJE, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s7Fi = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Fi$def to i8*)
define internal ghccc void @_s7Fi$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neJF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s7Fi
s7Fi:
  %lneJH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlO_info$def to i64
  %lneJG = load i64*, i64** %Sp_Var
  %lneJI = getelementptr inbounds i64, i64* %lneJG, i32 -1
  store i64 %lneJH, i64* %lneJI, !tbaa !2
  %lneJJ = load i64*, i64** %Sp_Var
  %lneJK = getelementptr inbounds i64, i64* %lneJJ, i32 5
  %lneJL = bitcast i64* %lneJK to i64*
  %lneJM = load i64, i64* %lneJL, !tbaa !2
  store i64 %lneJM, i64* %R1_Var
  %lneJN = load i64*, i64** %Sp_Var
  %lneJO = getelementptr inbounds i64, i64* %lneJN, i32 -1
  %lneJP = ptrtoint i64* %lneJO to i64
  %lneJQ = inttoptr i64 %lneJP to i64*
  store i64* %lneJQ, i64** %Sp_Var
  %lneJR = load i64, i64* %R1_Var
  %lneJS = and i64 %lneJR, 7
  %lneJT = icmp ne i64 %lneJS, 0
  br i1 %lneJT, label %udDm, label %cdlP
cdlP:
  %lneJV = load i64, i64* %R1_Var
  %lneJW = inttoptr i64 %lneJV to i64*
  %lneJX = load i64, i64* %lneJW, !tbaa !4
  %lneJY = inttoptr i64 %lneJX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneJZ = load i64*, i64** %Sp_Var
  %lneK0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneJY( i64* %Base_Arg, i64* %lneJZ, i64* %Hp_Arg, i64 %lneK0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDm:
  %lneK1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneK2 = load i64*, i64** %Sp_Var
  %lneK3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneK1( i64* %Base_Arg, i64* %lneK2, i64* %Hp_Arg, i64 %lneK3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlO_info$def to i8*)
define internal ghccc void @cdlO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 15114, i32 30, i32 0}>
{
neK4:
  %ls7Fn = alloca i64, i32 1
  %ls7Fo = alloca i64, i32 1
  %ls7Fp = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdlO
cdlO:
  %lneK6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlT_info$def to i64
  %lneK5 = load i64*, i64** %Sp_Var
  %lneK7 = getelementptr inbounds i64, i64* %lneK5, i32 -1
  store i64 %lneK6, i64* %lneK7, !tbaa !2
  %lneKa = load i64, i64* %R1_Var
  %lneKb = add i64 %lneKa, 7
  %lneKc = inttoptr i64 %lneKb to i64*
  %lneKd = load i64, i64* %lneKc, !tbaa !4
  store i64 %lneKd, i64* %ls7Fn
  %lneKg = load i64, i64* %R1_Var
  %lneKh = add i64 %lneKg, 15
  %lneKi = inttoptr i64 %lneKh to i64*
  %lneKj = load i64, i64* %lneKi, !tbaa !4
  store i64 %lneKj, i64* %ls7Fo
  %lneKm = load i64, i64* %R1_Var
  %lneKn = add i64 %lneKm, 23
  %lneKo = inttoptr i64 %lneKn to i64*
  %lneKp = load i64, i64* %lneKo, !tbaa !4
  store i64 %lneKp, i64* %ls7Fp
  %lneKq = load i64*, i64** %Sp_Var
  %lneKr = getelementptr inbounds i64, i64* %lneKq, i32 9
  %lneKs = bitcast i64* %lneKr to i64*
  %lneKt = load i64, i64* %lneKs, !tbaa !2
  store i64 %lneKt, i64* %R1_Var
  %lneKv = load i64, i64* %ls7Fp
  %lneKu = load i64*, i64** %Sp_Var
  %lneKw = getelementptr inbounds i64, i64* %lneKu, i32 0
  store i64 %lneKv, i64* %lneKw, !tbaa !2
  %lneKy = load i64, i64* %ls7Fo
  %lneKx = load i64*, i64** %Sp_Var
  %lneKz = getelementptr inbounds i64, i64* %lneKx, i32 6
  store i64 %lneKy, i64* %lneKz, !tbaa !2
  %lneKB = load i64, i64* %ls7Fn
  %lneKA = load i64*, i64** %Sp_Var
  %lneKC = getelementptr inbounds i64, i64* %lneKA, i32 9
  store i64 %lneKB, i64* %lneKC, !tbaa !2
  %lneKD = load i64*, i64** %Sp_Var
  %lneKE = getelementptr inbounds i64, i64* %lneKD, i32 -1
  %lneKF = ptrtoint i64* %lneKE to i64
  %lneKG = inttoptr i64 %lneKF to i64*
  store i64* %lneKG, i64** %Sp_Var
  %lneKH = load i64, i64* %R1_Var
  %lneKI = and i64 %lneKH, 7
  %lneKJ = icmp ne i64 %lneKI, 0
  br i1 %lneKJ, label %udCM, label %cdlU
cdlU:
  %lneKL = load i64, i64* %R1_Var
  %lneKM = inttoptr i64 %lneKL to i64*
  %lneKN = load i64, i64* %lneKM, !tbaa !4
  %lneKO = inttoptr i64 %lneKN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneKP = load i64*, i64** %Sp_Var
  %lneKQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneKO( i64* %Base_Arg, i64* %lneKP, i64* %Hp_Arg, i64 %lneKQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCM:
  %lneKR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneKS = load i64*, i64** %Sp_Var
  %lneKT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneKR( i64* %Base_Arg, i64* %lneKS, i64* %Hp_Arg, i64 %lneKT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlT_info$def to i8*)
define internal ghccc void @cdlT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neKU:
  %ls7Fs = alloca i64, i32 1
  %ls7Ft = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdlT
cdlT:
  %lneKW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlY_info$def to i64
  %lneKV = load i64*, i64** %Sp_Var
  %lneKX = getelementptr inbounds i64, i64* %lneKV, i32 -2
  store i64 %lneKW, i64* %lneKX, !tbaa !2
  %lneL0 = load i64, i64* %R1_Var
  %lneL1 = add i64 %lneL0, 15
  %lneL2 = inttoptr i64 %lneL1 to i64*
  %lneL3 = load i64, i64* %lneL2, !tbaa !4
  store i64 %lneL3, i64* %ls7Fs
  %lneL6 = load i64, i64* %R1_Var
  %lneL7 = add i64 %lneL6, 23
  %lneL8 = inttoptr i64 %lneL7 to i64*
  %lneL9 = load i64, i64* %lneL8, !tbaa !4
  store i64 %lneL9, i64* %ls7Ft
  %lneLc = load i64, i64* %R1_Var
  %lneLd = add i64 %lneLc, 7
  %lneLe = inttoptr i64 %lneLd to i64*
  %lneLf = load i64, i64* %lneLe, !tbaa !4
  store i64 %lneLf, i64* %R1_Var
  %lneLh = load i64, i64* %ls7Ft
  %lneLg = load i64*, i64** %Sp_Var
  %lneLi = getelementptr inbounds i64, i64* %lneLg, i32 -1
  store i64 %lneLh, i64* %lneLi, !tbaa !2
  %lneLk = load i64, i64* %ls7Fs
  %lneLj = load i64*, i64** %Sp_Var
  %lneLl = getelementptr inbounds i64, i64* %lneLj, i32 0
  store i64 %lneLk, i64* %lneLl, !tbaa !2
  %lneLm = load i64*, i64** %Sp_Var
  %lneLn = getelementptr inbounds i64, i64* %lneLm, i32 -2
  %lneLo = ptrtoint i64* %lneLn to i64
  %lneLp = inttoptr i64 %lneLo to i64*
  store i64* %lneLp, i64** %Sp_Var
  %lneLq = load i64, i64* %R1_Var
  %lneLr = and i64 %lneLq, 7
  %lneLs = icmp ne i64 %lneLr, 0
  br i1 %lneLs, label %udCN, label %cdlZ
cdlZ:
  %lneLu = load i64, i64* %R1_Var
  %lneLv = inttoptr i64 %lneLu to i64*
  %lneLw = load i64, i64* %lneLv, !tbaa !4
  %lneLx = inttoptr i64 %lneLw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneLy = load i64*, i64** %Sp_Var
  %lneLz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneLx( i64* %Base_Arg, i64* %lneLy, i64* %Hp_Arg, i64 %lneLz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCN:
  %lneLA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneLB = load i64*, i64** %Sp_Var
  %lneLC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneLA( i64* %Base_Arg, i64* %lneLB, i64* %Hp_Arg, i64 %lneLC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdlY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdlY_info$def to i8*)
define internal ghccc void @cdlY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104461, i32 30, i32 0}>
{
neLD:
  %ls7Fv = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdlY
cdlY:
  %lneLE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm3_info$def to i64
  %lneLF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneLE, i64* %lneLF, !tbaa !2
  %lneLI = load i64, i64* %R1_Var
  %lneLJ = add i64 %lneLI, 7
  %lneLK = inttoptr i64 %lneLJ to double*
  %lneLL = load double, double* %lneLK, !tbaa !4
  store double %lneLL, double* %ls7Fv
  %lneLM = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lneLN = bitcast i64* %lneLM to i64*
  %lneLO = load i64, i64* %lneLN, !tbaa !2
  store i64 %lneLO, i64* %R1_Var
  %lneLP = load double, double* %ls7Fv
  %lneLQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lneLR = bitcast i64* %lneLQ to double*
  store double %lneLP, double* %lneLR, !tbaa !2
  %lneLS = load i64, i64* %R1_Var
  %lneLT = and i64 %lneLS, 7
  %lneLU = icmp ne i64 %lneLT, 0
  br i1 %lneLU, label %udCO, label %cdm4
cdm4:
  %lneLW = load i64, i64* %R1_Var
  %lneLX = inttoptr i64 %lneLW to i64*
  %lneLY = load i64, i64* %lneLX, !tbaa !4
  %lneLZ = inttoptr i64 %lneLY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneM0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneLZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneM0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCO:
  %lneM1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneM2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneM1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneM2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdm3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm3_info$def to i8*)
define internal ghccc void @cdm3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104589, i32 30, i32 0}>
{
neM3:
  %ls7Fx = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdm3
cdm3:
  %lneM4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm8_info$def to i64
  %lneM5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneM4, i64* %lneM5, !tbaa !2
  %lneM8 = load i64, i64* %R1_Var
  %lneM9 = add i64 %lneM8, 7
  %lneMa = inttoptr i64 %lneM9 to double*
  %lneMb = load double, double* %lneMa, !tbaa !4
  store double %lneMb, double* %ls7Fx
  %lneMc = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneMd = bitcast i64* %lneMc to i64*
  %lneMe = load i64, i64* %lneMd, !tbaa !2
  store i64 %lneMe, i64* %R1_Var
  %lneMf = load double, double* %ls7Fx
  %lneMg = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lneMh = bitcast i64* %lneMg to double*
  store double %lneMf, double* %lneMh, !tbaa !2
  %lneMi = load i64, i64* %R1_Var
  %lneMj = and i64 %lneMi, 7
  %lneMk = icmp ne i64 %lneMj, 0
  br i1 %lneMk, label %udCP, label %cdm9
cdm9:
  %lneMm = load i64, i64* %R1_Var
  %lneMn = inttoptr i64 %lneMm to i64*
  %lneMo = load i64, i64* %lneMn, !tbaa !4
  %lneMp = inttoptr i64 %lneMo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneMq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneMp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneMq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCP:
  %lneMr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneMs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneMr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneMs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdm8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdm8_info$def to i8*)
define internal ghccc void @cdm8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 104653, i32 30, i32 0}>
{
neMt:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7FA = alloca double, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Fc = alloca double, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdm8
cdm8:
  %lneMu = load i64*, i64** %Hp_Var
  %lneMv = getelementptr inbounds i64, i64* %lneMu, i32 15
  %lneMw = ptrtoint i64* %lneMv to i64
  %lneMx = inttoptr i64 %lneMw to i64*
  store i64* %lneMx, i64** %Hp_Var
  %lneMy = load i64*, i64** %Hp_Var
  %lneMz = ptrtoint i64* %lneMy to i64
  %lneMA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneMB = bitcast i64* %lneMA to i64*
  %lneMC = load i64, i64* %lneMB, !tbaa !5
  %lneMD = icmp ugt i64 %lneMz, %lneMC
  %lneME = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneMD, i1 0 )
  br i1 %lneME, label %cdyE, label %cdyD
cdyD:
  %lneMF = load i64*, i64** %Sp_Var
  %lneMG = getelementptr inbounds i64, i64* %lneMF, i32 2
  %lneMH = bitcast i64* %lneMG to double*
  %lneMI = load double, double* %lneMH, !tbaa !2
  %lneMJ = load i64*, i64** %Sp_Var
  %lneMK = getelementptr inbounds i64, i64* %lneMJ, i32 11
  %lneML = bitcast i64* %lneMK to double*
  %lneMM = load double, double* %lneML, !tbaa !2
  %lneMN = fmul double %lneMI, %lneMM
  %lneMO = load i64*, i64** %Sp_Var
  %lneMP = getelementptr inbounds i64, i64* %lneMO, i32 1
  %lneMQ = bitcast i64* %lneMP to double*
  %lneMR = load double, double* %lneMQ, !tbaa !2
  %lneMS = load i64*, i64** %Sp_Var
  %lneMT = getelementptr inbounds i64, i64* %lneMS, i32 7
  %lneMU = bitcast i64* %lneMT to double*
  %lneMV = load double, double* %lneMU, !tbaa !2
  %lneMW = fmul double %lneMR, %lneMV
  %lneMX = fadd double %lneMN, %lneMW
  %lneN0 = load i64, i64* %R1_Var
  %lneN1 = add i64 %lneN0, 7
  %lneN2 = inttoptr i64 %lneN1 to double*
  %lneN3 = load double, double* %lneN2, !tbaa !4
  %lneN4 = load i64*, i64** %Sp_Var
  %lneN5 = getelementptr inbounds i64, i64* %lneN4, i32 6
  %lneN6 = bitcast i64* %lneN5 to double*
  %lneN7 = load double, double* %lneN6, !tbaa !2
  %lneN8 = fmul double %lneN3, %lneN7
  %lneN9 = fadd double %lneMX, %lneN8
  store double %lneN9, double* %ls7FA
  %lneNa = load double, double* %ls7FA
  %lneNb = fcmp ole double %lneNa, 0x0000000000000000
  %lneNc = zext i1 %lneNb to i64
  switch i64 %lneNc, label %cdzv [i64 1, label %cdzw]
cdzv:
  %lneNd = load i64*, i64** %Hp_Var
  %lneNe = getelementptr inbounds i64, i64* %lneNd, i32 -15
  %lneNf = ptrtoint i64* %lneNe to i64
  %lneNg = inttoptr i64 %lneNf to i64*
  store i64* %lneNg, i64** %Hp_Var
  %lneNi = load i64*, i64** %Sp_Var
  %lneNj = getelementptr inbounds i64, i64* %lneNi, i32 13
  %lneNk = bitcast i64* %lneNj to i64*
  %lneNl = load i64, i64* %lneNk, !tbaa !2
  %lneNh = load i64*, i64** %Sp_Var
  %lneNm = getelementptr inbounds i64, i64* %lneNh, i32 7
  store i64 %lneNl, i64* %lneNm, !tbaa !2
  %lneNo = load double, double* %ls7FA
  %lneNn = load i64*, i64** %Sp_Var
  %lneNp = getelementptr inbounds i64, i64* %lneNn, i32 11
  %lneNq = bitcast i64* %lneNp to double*
  store double %lneNo, double* %lneNq, !tbaa !2
  %lneNr = load i64*, i64** %Sp_Var
  %lneNs = getelementptr inbounds i64, i64* %lneNr, i32 3
  %lneNt = ptrtoint i64* %lneNs to i64
  %lneNu = inttoptr i64 %lneNt to i64*
  store i64* %lneNu, i64** %Sp_Var
  %lneNv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdz3$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneNw = load i64*, i64** %Sp_Var
  %lneNx = load i64*, i64** %Hp_Var
  %lneNy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneNv( i64* %Base_Arg, i64* %lneNw, i64* %lneNx, i64 %lneNy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzw:
  %lneNA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Hd_info$def to i64
  %lneNz = load i64*, i64** %Hp_Var
  %lneNB = getelementptr inbounds i64, i64* %lneNz, i32 -14
  store i64 %lneNA, i64* %lneNB, !tbaa !3
  %lneND = load i64*, i64** %Sp_Var
  %lneNE = getelementptr inbounds i64, i64* %lneND, i32 3
  %lneNF = bitcast i64* %lneNE to i64*
  %lneNG = load i64, i64* %lneNF, !tbaa !2
  %lneNC = load i64*, i64** %Hp_Var
  %lneNH = getelementptr inbounds i64, i64* %lneNC, i32 -12
  store i64 %lneNG, i64* %lneNH, !tbaa !3
  %lneNJ = load i64*, i64** %Sp_Var
  %lneNK = getelementptr inbounds i64, i64* %lneNJ, i32 4
  %lneNL = bitcast i64* %lneNK to i64*
  %lneNM = load i64, i64* %lneNL, !tbaa !2
  %lneNI = load i64*, i64** %Hp_Var
  %lneNN = getelementptr inbounds i64, i64* %lneNI, i32 -11
  store i64 %lneNM, i64* %lneNN, !tbaa !3
  %lneNO = load i64*, i64** %Sp_Var
  %lneNP = getelementptr inbounds i64, i64* %lneNO, i32 10
  %lneNQ = bitcast i64* %lneNP to double*
  %lneNR = load double, double* %lneNQ, !tbaa !2
  store double %lneNR, double* %ls7Fc
  %lneNT = load double, double* %ls7Fc
  %lneNS = load i64*, i64** %Hp_Var
  %lneNU = getelementptr inbounds i64, i64* %lneNS, i32 -10
  %lneNV = bitcast i64* %lneNU to double*
  store double %lneNT, double* %lneNV, !tbaa !3
  %lneNX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7H6_info$def to i64
  %lneNW = load i64*, i64** %Hp_Var
  %lneNY = getelementptr inbounds i64, i64* %lneNW, i32 -9
  store i64 %lneNX, i64* %lneNY, !tbaa !3
  %lneO0 = load i64*, i64** %Sp_Var
  %lneO1 = getelementptr inbounds i64, i64* %lneO0, i32 9
  %lneO2 = bitcast i64* %lneO1 to i64*
  %lneO3 = load i64, i64* %lneO2, !tbaa !2
  %lneNZ = load i64*, i64** %Hp_Var
  %lneO4 = getelementptr inbounds i64, i64* %lneNZ, i32 -7
  store i64 %lneO3, i64* %lneO4, !tbaa !3
  %lneO6 = load i64*, i64** %Sp_Var
  %lneO7 = getelementptr inbounds i64, i64* %lneO6, i32 5
  %lneO8 = bitcast i64* %lneO7 to i64*
  %lneO9 = load i64, i64* %lneO8, !tbaa !2
  %lneO5 = load i64*, i64** %Hp_Var
  %lneOa = getelementptr inbounds i64, i64* %lneO5, i32 -6
  store i64 %lneO9, i64* %lneOa, !tbaa !3
  %lneOc = load double, double* %ls7Fc
  %lneOb = load i64*, i64** %Hp_Var
  %lneOd = getelementptr inbounds i64, i64* %lneOb, i32 -5
  %lneOe = bitcast i64* %lneOd to double*
  store double %lneOc, double* %lneOe, !tbaa !3
  %lneOg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7GZ_info$def to i64
  %lneOf = load i64*, i64** %Hp_Var
  %lneOh = getelementptr inbounds i64, i64* %lneOf, i32 -4
  store i64 %lneOg, i64* %lneOh, !tbaa !3
  %lneOj = load i64*, i64** %Sp_Var
  %lneOk = getelementptr inbounds i64, i64* %lneOj, i32 12
  %lneOl = bitcast i64* %lneOk to i64*
  %lneOm = load i64, i64* %lneOl, !tbaa !2
  %lneOi = load i64*, i64** %Hp_Var
  %lneOn = getelementptr inbounds i64, i64* %lneOi, i32 -2
  store i64 %lneOm, i64* %lneOn, !tbaa !3
  %lneOp = load i64*, i64** %Sp_Var
  %lneOq = getelementptr inbounds i64, i64* %lneOp, i32 8
  %lneOr = bitcast i64* %lneOq to i64*
  %lneOs = load i64, i64* %lneOr, !tbaa !2
  %lneOo = load i64*, i64** %Hp_Var
  %lneOt = getelementptr inbounds i64, i64* %lneOo, i32 -1
  store i64 %lneOs, i64* %lneOt, !tbaa !3
  %lneOv = load double, double* %ls7Fc
  %lneOu = load i64*, i64** %Hp_Var
  %lneOw = getelementptr inbounds i64, i64* %lneOu, i32 0
  %lneOx = bitcast i64* %lneOw to double*
  store double %lneOv, double* %lneOx, !tbaa !3
  %lneOy = load i64*, i64** %Hp_Var
  %lneOz = getelementptr inbounds i64, i64* %lneOy, i32 -14
  %lneOA = ptrtoint i64* %lneOz to i64
  store i64 %lneOA, i64* %R3_Var
  %lneOB = load i64*, i64** %Hp_Var
  %lneOC = getelementptr inbounds i64, i64* %lneOB, i32 -9
  %lneOD = ptrtoint i64* %lneOC to i64
  store i64 %lneOD, i64* %R2_Var
  %lneOE = load i64*, i64** %Hp_Var
  %lneOF = getelementptr inbounds i64, i64* %lneOE, i32 -4
  %lneOG = ptrtoint i64* %lneOF to i64
  store i64 %lneOG, i64* %R1_Var
  %lneOH = load i64*, i64** %Sp_Var
  %lneOI = getelementptr inbounds i64, i64* %lneOH, i32 14
  %lneOJ = ptrtoint i64* %lneOI to i64
  %lneOK = inttoptr i64 %lneOJ to i64*
  store i64* %lneOK, i64** %Sp_Var
  %lneOL = load i64*, i64** %Sp_Var
  %lneOM = getelementptr inbounds i64, i64* %lneOL, i32 0
  %lneON = bitcast i64* %lneOM to i64*
  %lneOO = load i64, i64* %lneON, !tbaa !2
  %lneOP = inttoptr i64 %lneOO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneOQ = load i64*, i64** %Sp_Var
  %lneOR = load i64*, i64** %Hp_Var
  %lneOS = load i64, i64* %R1_Var
  %lneOT = load i64, i64* %R2_Var
  %lneOU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneOP( i64* %Base_Arg, i64* %lneOQ, i64* %lneOR, i64 %lneOS, i64 %lneOT, i64 %lneOU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyE:
  %lneOV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %lneOV, !tbaa !5
  %lneOW = load i64, i64* %R1_Var
  store i64 %lneOW, i64* %R1_Var
  %lneOX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneOY = load i64*, i64** %Sp_Var
  %lneOZ = load i64*, i64** %Hp_Var
  %lneP0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneOX( i64* %Base_Arg, i64* %lneOY, i64* %lneOZ, i64 %lneP0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdz3 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdz3$def to i8*)
define internal ghccc void @_cdz3$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neP1:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdz3
cdz3:
  %lneP3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdz5_info$def to i64
  %lneP2 = load i64*, i64** %Sp_Var
  %lneP4 = getelementptr inbounds i64, i64* %lneP2, i32 -1
  store i64 %lneP3, i64* %lneP4, !tbaa !2
  %lneP5 = load i64*, i64** %Sp_Var
  %lneP6 = getelementptr inbounds i64, i64* %lneP5, i32 4
  %lneP7 = bitcast i64* %lneP6 to i64*
  %lneP8 = load i64, i64* %lneP7, !tbaa !2
  store i64 %lneP8, i64* %R1_Var
  %lneP9 = load i64*, i64** %Sp_Var
  %lnePa = getelementptr inbounds i64, i64* %lneP9, i32 -1
  %lnePb = ptrtoint i64* %lnePa to i64
  %lnePc = inttoptr i64 %lnePb to i64*
  store i64* %lnePc, i64** %Sp_Var
  %lnePd = load i64, i64* %R1_Var
  %lnePe = and i64 %lnePd, 7
  %lnePf = icmp ne i64 %lnePe, 0
  br i1 %lnePf, label %udCZ, label %cdz7
cdz7:
  %lnePh = load i64, i64* %R1_Var
  %lnePi = inttoptr i64 %lnePh to i64*
  %lnePj = load i64, i64* %lnePi, !tbaa !4
  %lnePk = inttoptr i64 %lnePj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnePl = load i64*, i64** %Sp_Var
  %lnePm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnePk( i64* %Base_Arg, i64* %lnePl, i64* %Hp_Arg, i64 %lnePm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCZ:
  %lnePn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdz5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnePo = load i64*, i64** %Sp_Var
  %lnePp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnePn( i64* %Base_Arg, i64* %lnePo, i64* %Hp_Arg, i64 %lnePp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdz5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdz5_info$def to i8*)
define internal ghccc void @cdz5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
nePq:
  %ls7GQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdz5
cdz5:
  %lnePr = load i64, i64* %R1_Var
  %lnePs = and i64 %lnePr, 7
  switch i64 %lnePs, label %cdzd [i64 1, label %cdzd
i64 2, label %cdzi]
cdzd:
  %lnePt = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnePu = add i64 %lnePt, 1
  %lnePv = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lnePu, i64* %lnePv, !tbaa !2
  %lnePw = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnePx = add i64 %lnePw, 1
  %lnePy = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %lnePx, i64* %lnePy, !tbaa !2
  %lnePz = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnePA = add i64 %lnePz, 1
  %lnePB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnePA, i64* %lnePB, !tbaa !2
  %lnePC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdmy$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnePD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnePC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnePD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzi:
  %lnePE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzg_info$def to i64
  %lnePF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnePE, i64* %lnePF, !tbaa !2
  %lnePI = load i64, i64* %R1_Var
  %lnePJ = add i64 %lnePI, 14
  %lnePK = inttoptr i64 %lnePJ to i64*
  %lnePL = load i64, i64* %lnePK, !tbaa !4
  store i64 %lnePL, i64* %ls7GQ
  %lnePO = load i64, i64* %R1_Var
  %lnePP = add i64 %lnePO, 6
  %lnePQ = inttoptr i64 %lnePP to i64*
  %lnePR = load i64, i64* %lnePQ, !tbaa !4
  store i64 %lnePR, i64* %R1_Var
  %lnePS = load i64, i64* %ls7GQ
  %lnePT = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lnePS, i64* %lnePT, !tbaa !2
  %lnePU = load i64, i64* %R1_Var
  %lnePV = and i64 %lnePU, 7
  %lnePW = icmp ne i64 %lnePV, 0
  br i1 %lnePW, label %udD0, label %cdzj
cdzj:
  %lnePY = load i64, i64* %R1_Var
  %lnePZ = inttoptr i64 %lnePY to i64*
  %lneQ0 = load i64, i64* %lnePZ, !tbaa !4
  %lneQ1 = inttoptr i64 %lneQ0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneQ2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQ1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneQ2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD0:
  %lneQ3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneQ4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQ3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lneQ4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzg_info$def to i8*)
define internal ghccc void @cdzg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 25099, i32 30, i32 0}>
{
neQ5:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cdzg
cdzg:
  %lneQ6 = load i64, i64* %R1_Var
  %lneQ7 = and i64 %lneQ6, 7
  switch i64 %lneQ7, label %cdzp [i64 3, label %cdzt]
cdzp:
  %lneQ9 = load i64*, i64** %Sp_Var
  %lneQa = getelementptr inbounds i64, i64* %lneQ9, i32 5
  %lneQb = bitcast i64* %lneQa to i64*
  %lneQc = load i64, i64* %lneQb, !tbaa !2
  %lneQ8 = load i64*, i64** %Sp_Var
  %lneQd = getelementptr inbounds i64, i64* %lneQ8, i32 5
  store i64 %lneQc, i64* %lneQd, !tbaa !2
  %lneQe = load i64*, i64** %Sp_Var
  %lneQf = getelementptr inbounds i64, i64* %lneQe, i32 1
  %lneQg = ptrtoint i64* %lneQf to i64
  %lneQh = inttoptr i64 %lneQg to i64*
  store i64* %lneQh, i64** %Sp_Var
  %lneQi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdz3$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneQj = load i64*, i64** %Sp_Var
  %lneQk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQi( i64* %Base_Arg, i64* %lneQj, i64* %Hp_Arg, i64 %lneQk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzt:
  %lneQm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyT_info$def to i64
  %lneQl = load i64*, i64** %Sp_Var
  %lneQn = getelementptr inbounds i64, i64* %lneQl, i32 0
  store i64 %lneQm, i64* %lneQn, !tbaa !2
  %lneQq = load i64, i64* %R1_Var
  %lneQr = add i64 %lneQq, 5
  %lneQs = inttoptr i64 %lneQr to i64*
  %lneQt = load i64, i64* %lneQs, !tbaa !4
  store i64 %lneQt, i64* %R1_Var
  %lneQu = load i64, i64* %R1_Var
  %lneQv = and i64 %lneQu, 7
  %lneQw = icmp ne i64 %lneQv, 0
  br i1 %lneQw, label %udD2, label %cdyV
cdyV:
  %lneQy = load i64, i64* %R1_Var
  %lneQz = inttoptr i64 %lneQy to i64*
  %lneQA = load i64, i64* %lneQz, !tbaa !4
  %lneQB = inttoptr i64 %lneQA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneQC = load i64*, i64** %Sp_Var
  %lneQD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQB( i64* %Base_Arg, i64* %lneQC, i64* %Hp_Arg, i64 %lneQD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD2:
  %lneQE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneQF = load i64*, i64** %Sp_Var
  %lneQG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQE( i64* %Base_Arg, i64* %lneQF, i64* %Hp_Arg, i64 %lneQG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdyT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyT_info$def to i8*)
define internal ghccc void @cdyT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neQH:
  br label %cdyT
cdyT:
  %lneQI = add i64 %R1_Arg, 23
  %lneQJ = inttoptr i64 %lneQI to i64*
  %lneQK = load i64, i64* %lneQJ, !tbaa !4
  %lneQL = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lneQK, i64* %lneQL, !tbaa !2
  %lneQM = add i64 %R1_Arg, 15
  %lneQN = inttoptr i64 %lneQM to i64*
  %lneQO = load i64, i64* %lneQN, !tbaa !4
  %lneQP = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %lneQO, i64* %lneQP, !tbaa !2
  %lneQQ = add i64 %R1_Arg, 7
  %lneQR = inttoptr i64 %lneQQ to i64*
  %lneQS = load i64, i64* %lneQR, !tbaa !4
  %lneQT = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lneQS, i64* %lneQT, !tbaa !2
  %lneQU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdmy$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneQU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cdmy = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdmy$def to i8*)
define internal ghccc void @_cdmy$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
neQV:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7FH = alloca i64, i32 1
  %ls7FI = alloca i64, i32 1
  %ls7FJ = alloca i64, i32 1
  %lcdmA = alloca i64, i32 1
  %ls7Fc = alloca double, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cdmy
cdmy:
  %lneQW = load i64*, i64** %Hp_Var
  %lneQX = getelementptr inbounds i64, i64* %lneQW, i32 25
  %lneQY = ptrtoint i64* %lneQX to i64
  %lneQZ = inttoptr i64 %lneQY to i64*
  store i64* %lneQZ, i64** %Hp_Var
  %lneR0 = load i64*, i64** %Sp_Var
  %lneR1 = getelementptr inbounds i64, i64* %lneR0, i32 5
  %lneR2 = bitcast i64* %lneR1 to i64*
  %lneR3 = load i64, i64* %lneR2, !tbaa !2
  store i64 %lneR3, i64* %ls7FH
  %lneR4 = load i64*, i64** %Sp_Var
  %lneR5 = getelementptr inbounds i64, i64* %lneR4, i32 4
  %lneR6 = bitcast i64* %lneR5 to i64*
  %lneR7 = load i64, i64* %lneR6, !tbaa !2
  store i64 %lneR7, i64* %ls7FI
  %lneR8 = load i64*, i64** %Sp_Var
  %lneR9 = getelementptr inbounds i64, i64* %lneR8, i32 0
  %lneRa = bitcast i64* %lneR9 to i64*
  %lneRb = load i64, i64* %lneRa, !tbaa !2
  store i64 %lneRb, i64* %ls7FJ
  %lneRc = load i64*, i64** %Hp_Var
  %lneRd = ptrtoint i64* %lneRc to i64
  %lneRe = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneRf = bitcast i64* %lneRe to i64*
  %lneRg = load i64, i64* %lneRf, !tbaa !5
  %lneRh = icmp ugt i64 %lneRd, %lneRg
  %lneRi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneRh, i1 0 )
  br i1 %lneRi, label %cdyH, label %cdyG
cdyG:
  %lneRk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7FK_info$def to i64
  %lneRj = load i64*, i64** %Hp_Var
  %lneRl = getelementptr inbounds i64, i64* %lneRj, i32 -24
  store i64 %lneRk, i64* %lneRl, !tbaa !3
  %lneRn = load i64*, i64** %Sp_Var
  %lneRo = getelementptr inbounds i64, i64* %lneRn, i32 11
  %lneRp = bitcast i64* %lneRo to i64*
  %lneRq = load i64, i64* %lneRp, !tbaa !2
  %lneRm = load i64*, i64** %Hp_Var
  %lneRr = getelementptr inbounds i64, i64* %lneRm, i32 -22
  store i64 %lneRq, i64* %lneRr, !tbaa !3
  %lneRt = load i64*, i64** %Sp_Var
  %lneRu = getelementptr inbounds i64, i64* %lneRt, i32 9
  %lneRv = bitcast i64* %lneRu to double*
  %lneRw = load double, double* %lneRv, !tbaa !2
  %lneRs = load i64*, i64** %Hp_Var
  %lneRx = getelementptr inbounds i64, i64* %lneRs, i32 -21
  %lneRy = bitcast i64* %lneRx to double*
  store double %lneRw, double* %lneRy, !tbaa !3
  %lneRA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7GE_info$def to i64
  %lneRz = load i64*, i64** %Hp_Var
  %lneRB = getelementptr inbounds i64, i64* %lneRz, i32 -20
  store i64 %lneRA, i64* %lneRB, !tbaa !3
  %lneRD = load i64, i64* %ls7FJ
  %lneRC = load i64*, i64** %Hp_Var
  %lneRE = getelementptr inbounds i64, i64* %lneRC, i32 -18
  store i64 %lneRD, i64* %lneRE, !tbaa !3
  %lneRF = load i64*, i64** %Hp_Var
  %lneRG = getelementptr inbounds i64, i64* %lneRF, i32 -24
  %lneRH = ptrtoint i64* %lneRG to i64
  store i64 %lneRH, i64* %lcdmA
  %lneRJ = load i64, i64* %lcdmA
  %lneRI = load i64*, i64** %Hp_Var
  %lneRK = getelementptr inbounds i64, i64* %lneRI, i32 -17
  store i64 %lneRJ, i64* %lneRK, !tbaa !3
  %lneRM = load i64*, i64** %Sp_Var
  %lneRN = getelementptr inbounds i64, i64* %lneRM, i32 1
  %lneRO = bitcast i64* %lneRN to i64*
  %lneRP = load i64, i64* %lneRO, !tbaa !2
  %lneRL = load i64*, i64** %Hp_Var
  %lneRQ = getelementptr inbounds i64, i64* %lneRL, i32 -16
  store i64 %lneRP, i64* %lneRQ, !tbaa !3
  %lneRS = load i64*, i64** %Sp_Var
  %lneRT = getelementptr inbounds i64, i64* %lneRS, i32 2
  %lneRU = bitcast i64* %lneRT to i64*
  %lneRV = load i64, i64* %lneRU, !tbaa !2
  %lneRR = load i64*, i64** %Hp_Var
  %lneRW = getelementptr inbounds i64, i64* %lneRR, i32 -15
  store i64 %lneRV, i64* %lneRW, !tbaa !3
  %lneRX = load i64*, i64** %Sp_Var
  %lneRY = getelementptr inbounds i64, i64* %lneRX, i32 8
  %lneRZ = bitcast i64* %lneRY to double*
  %lneS0 = load double, double* %lneRZ, !tbaa !2
  store double %lneS0, double* %ls7Fc
  %lneS2 = load double, double* %ls7Fc
  %lneS1 = load i64*, i64** %Hp_Var
  %lneS3 = getelementptr inbounds i64, i64* %lneS1, i32 -14
  %lneS4 = bitcast i64* %lneS3 to double*
  store double %lneS2, double* %lneS4, !tbaa !3
  %lneS6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Gq_info$def to i64
  %lneS5 = load i64*, i64** %Hp_Var
  %lneS7 = getelementptr inbounds i64, i64* %lneS5, i32 -13
  store i64 %lneS6, i64* %lneS7, !tbaa !3
  %lneS9 = load i64, i64* %ls7FI
  %lneS8 = load i64*, i64** %Hp_Var
  %lneSa = getelementptr inbounds i64, i64* %lneS8, i32 -11
  store i64 %lneS9, i64* %lneSa, !tbaa !3
  %lneSc = load i64, i64* %lcdmA
  %lneSb = load i64*, i64** %Hp_Var
  %lneSd = getelementptr inbounds i64, i64* %lneSb, i32 -10
  store i64 %lneSc, i64* %lneSd, !tbaa !3
  %lneSf = load i64*, i64** %Sp_Var
  %lneSg = getelementptr inbounds i64, i64* %lneSf, i32 7
  %lneSh = bitcast i64* %lneSg to i64*
  %lneSi = load i64, i64* %lneSh, !tbaa !2
  %lneSe = load i64*, i64** %Hp_Var
  %lneSj = getelementptr inbounds i64, i64* %lneSe, i32 -9
  store i64 %lneSi, i64* %lneSj, !tbaa !3
  %lneSl = load i64*, i64** %Sp_Var
  %lneSm = getelementptr inbounds i64, i64* %lneSl, i32 3
  %lneSn = bitcast i64* %lneSm to i64*
  %lneSo = load i64, i64* %lneSn, !tbaa !2
  %lneSk = load i64*, i64** %Hp_Var
  %lneSp = getelementptr inbounds i64, i64* %lneSk, i32 -8
  store i64 %lneSo, i64* %lneSp, !tbaa !3
  %lneSr = load double, double* %ls7Fc
  %lneSq = load i64*, i64** %Hp_Var
  %lneSs = getelementptr inbounds i64, i64* %lneSq, i32 -7
  %lneSt = bitcast i64* %lneSs to double*
  store double %lneSr, double* %lneSt, !tbaa !3
  %lneSv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Gc_info$def to i64
  %lneSu = load i64*, i64** %Hp_Var
  %lneSw = getelementptr inbounds i64, i64* %lneSu, i32 -6
  store i64 %lneSv, i64* %lneSw, !tbaa !3
  %lneSy = load i64, i64* %ls7FH
  %lneSx = load i64*, i64** %Hp_Var
  %lneSz = getelementptr inbounds i64, i64* %lneSx, i32 -4
  store i64 %lneSy, i64* %lneSz, !tbaa !3
  %lneSB = load i64, i64* %lcdmA
  %lneSA = load i64*, i64** %Hp_Var
  %lneSC = getelementptr inbounds i64, i64* %lneSA, i32 -3
  store i64 %lneSB, i64* %lneSC, !tbaa !3
  %lneSE = load i64*, i64** %Sp_Var
  %lneSF = getelementptr inbounds i64, i64* %lneSE, i32 10
  %lneSG = bitcast i64* %lneSF to i64*
  %lneSH = load i64, i64* %lneSG, !tbaa !2
  %lneSD = load i64*, i64** %Hp_Var
  %lneSI = getelementptr inbounds i64, i64* %lneSD, i32 -2
  store i64 %lneSH, i64* %lneSI, !tbaa !3
  %lneSK = load i64*, i64** %Sp_Var
  %lneSL = getelementptr inbounds i64, i64* %lneSK, i32 6
  %lneSM = bitcast i64* %lneSL to i64*
  %lneSN = load i64, i64* %lneSM, !tbaa !2
  %lneSJ = load i64*, i64** %Hp_Var
  %lneSO = getelementptr inbounds i64, i64* %lneSJ, i32 -1
  store i64 %lneSN, i64* %lneSO, !tbaa !3
  %lneSQ = load double, double* %ls7Fc
  %lneSP = load i64*, i64** %Hp_Var
  %lneSR = getelementptr inbounds i64, i64* %lneSP, i32 0
  %lneSS = bitcast i64* %lneSR to double*
  store double %lneSQ, double* %lneSS, !tbaa !3
  %lneST = load i64*, i64** %Hp_Var
  %lneSU = getelementptr inbounds i64, i64* %lneST, i32 -20
  %lneSV = ptrtoint i64* %lneSU to i64
  store i64 %lneSV, i64* %R3_Var
  %lneSW = load i64*, i64** %Hp_Var
  %lneSX = getelementptr inbounds i64, i64* %lneSW, i32 -13
  %lneSY = ptrtoint i64* %lneSX to i64
  store i64 %lneSY, i64* %R2_Var
  %lneSZ = load i64*, i64** %Hp_Var
  %lneT0 = getelementptr inbounds i64, i64* %lneSZ, i32 -6
  %lneT1 = ptrtoint i64* %lneT0 to i64
  store i64 %lneT1, i64* %R1_Var
  %lneT2 = load i64*, i64** %Sp_Var
  %lneT3 = getelementptr inbounds i64, i64* %lneT2, i32 12
  %lneT4 = ptrtoint i64* %lneT3 to i64
  %lneT5 = inttoptr i64 %lneT4 to i64*
  store i64* %lneT5, i64** %Sp_Var
  %lneT6 = load i64*, i64** %Sp_Var
  %lneT7 = getelementptr inbounds i64, i64* %lneT6, i32 0
  %lneT8 = bitcast i64* %lneT7 to i64*
  %lneT9 = load i64, i64* %lneT8, !tbaa !2
  %lneTa = inttoptr i64 %lneT9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneTb = load i64*, i64** %Sp_Var
  %lneTc = load i64*, i64** %Hp_Var
  %lneTd = load i64, i64* %R1_Var
  %lneTe = load i64, i64* %R2_Var
  %lneTf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneTa( i64* %Base_Arg, i64* %lneTb, i64* %lneTc, i64 %lneTd, i64 %lneTe, i64 %lneTf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyH:
  %lneTg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 200, i64* %lneTg, !tbaa !5
  %lneTi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdmx_info$def to i64
  %lneTh = load i64*, i64** %Sp_Var
  %lneTj = getelementptr inbounds i64, i64* %lneTh, i32 0
  store i64 %lneTi, i64* %lneTj, !tbaa !2
  %lneTk = load i64, i64* %ls7FJ
  store i64 %lneTk, i64* %R3_Var
  %lneTl = load i64, i64* %ls7FI
  store i64 %lneTl, i64* %R2_Var
  %lneTm = load i64, i64* %ls7FH
  store i64 %lneTm, i64* %R1_Var
  %lneTn = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneTo = load i64*, i64** %Sp_Var
  %lneTp = load i64*, i64** %Hp_Var
  %lneTq = load i64, i64* %R1_Var
  %lneTr = load i64, i64* %R2_Var
  %lneTs = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneTn( i64* %Base_Arg, i64* %lneTo, i64* %lneTp, i64 %lneTq, i64 %lneTr, i64 %lneTs, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdmx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdmx_info$def to i8*)
define internal ghccc void @cdmx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 26123, i32 30, i32 0}>
{
neTt:
  br label %cdmx
cdmx:
  %lneTu = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %R1_Arg, i64* %lneTu, !tbaa !2
  %lneTv = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %R2_Arg, i64* %lneTv, !tbaa !2
  %lneTw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R3_Arg, i64* %lneTw, !tbaa !2
  %lneTx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cdmy$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneTx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_lightray_closure_struct = type <{i64, i64}>
@Main_lightray_closure$def = internal global %Main_lightray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightray_info$def to i64), i64 0}>
@Main_lightray_closure = alias i8, bitcast (%Main_lightray_closure_struct* @Main_lightray_closure$def to i8*)
@Main_lightray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightray_info$def to i8*)
define ghccc void @Main_lightray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 21474836505, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_lightray_info$def to i64)) to i32),i32 0)}>
{
neTL:
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceTF
ceTF:
  %lneTM = load i64*, i64** %Sp_Var
  %lneTN = getelementptr inbounds i64, i64* %lneTM, i32 -1
  %lneTO = ptrtoint i64* %lneTN to i64
  %lneTP = icmp ult i64 %lneTO, %SpLim_Arg
  %lneTQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneTP, i1 0 )
  br i1 %lneTQ, label %ceTG, label %ceTH
ceTH:
  %lneTS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceTC_info$def to i64
  %lneTR = load i64*, i64** %Sp_Var
  %lneTT = getelementptr inbounds i64, i64* %lneTR, i32 -1
  store i64 %lneTS, i64* %lneTT, !tbaa !2
  %lneTU = load i64, i64* %R6_Var
  store i64 %lneTU, i64* %R6_Var
  %lneTV = load i64, i64* %R5_Var
  store i64 %lneTV, i64* %R5_Var
  %lneTW = load i64, i64* %R4_Var
  store i64 %lneTW, i64* %R4_Var
  %lneTX = load i64, i64* %R3_Var
  store i64 %lneTX, i64* %R3_Var
  %lneTY = load i64, i64* %R2_Var
  store i64 %lneTY, i64* %R2_Var
  %lneTZ = load i64*, i64** %Sp_Var
  %lneU0 = getelementptr inbounds i64, i64* %lneTZ, i32 -1
  %lneU1 = ptrtoint i64* %lneU0 to i64
  %lneU2 = inttoptr i64 %lneU1 to i64*
  store i64* %lneU2, i64** %Sp_Var
  %lneU3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneU4 = load i64*, i64** %Sp_Var
  %lneU5 = load i64, i64* %R1_Var
  %lneU6 = load i64, i64* %R2_Var
  %lneU7 = load i64, i64* %R3_Var
  %lneU8 = load i64, i64* %R4_Var
  %lneU9 = load i64, i64* %R5_Var
  %lneUa = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneU3( i64* %Base_Arg, i64* %lneU4, i64* %Hp_Arg, i64 %lneU5, i64 %lneU6, i64 %lneU7, i64 %lneU8, i64 %lneU9, i64 %lneUa, i64 %SpLim_Arg ) nounwind
  ret void
ceTG:
  %lneUb = load i64, i64* %R6_Var
  store i64 %lneUb, i64* %R6_Var
  %lneUc = load i64, i64* %R5_Var
  store i64 %lneUc, i64* %R5_Var
  %lneUd = load i64, i64* %R4_Var
  store i64 %lneUd, i64* %R4_Var
  %lneUe = load i64, i64* %R3_Var
  store i64 %lneUe, i64* %R3_Var
  %lneUf = load i64, i64* %R2_Var
  store i64 %lneUf, i64* %R2_Var
  %lneUg = ptrtoint %Main_lightray_closure_struct* @Main_lightray_closure$def to i64
  store i64 %lneUg, i64* %R1_Var
  %lneUh = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lneUi = bitcast i64* %lneUh to i64*
  %lneUj = load i64, i64* %lneUi, !tbaa !5
  %lneUk = inttoptr i64 %lneUj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneUl = load i64*, i64** %Sp_Var
  %lneUm = load i64, i64* %R1_Var
  %lneUn = load i64, i64* %R2_Var
  %lneUo = load i64, i64* %R3_Var
  %lneUp = load i64, i64* %R4_Var
  %lneUq = load i64, i64* %R5_Var
  %lneUr = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneUk( i64* %Base_Arg, i64* %lneUl, i64* %Hp_Arg, i64 %lneUm, i64 %lneUn, i64 %lneUo, i64 %lneUp, i64 %lneUq, i64 %lneUr, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceTC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceTC_info$def to i8*)
define internal ghccc void @ceTC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
neUs:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ceTC
ceTC:
  %lneUt = load i64*, i64** %Hp_Var
  %lneUu = getelementptr inbounds i64, i64* %lneUt, i32 4
  %lneUv = ptrtoint i64* %lneUu to i64
  %lneUw = inttoptr i64 %lneUv to i64*
  store i64* %lneUw, i64** %Hp_Var
  %lneUx = load i64*, i64** %Hp_Var
  %lneUy = ptrtoint i64* %lneUx to i64
  %lneUz = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lneUA = bitcast i64* %lneUz to i64*
  %lneUB = load i64, i64* %lneUA, !tbaa !5
  %lneUC = icmp ugt i64 %lneUy, %lneUB
  %lneUD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lneUC, i1 0 )
  br i1 %lneUD, label %ceTK, label %ceTJ
ceTJ:
  %lneUF = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lneUE = load i64*, i64** %Hp_Var
  %lneUG = getelementptr inbounds i64, i64* %lneUE, i32 -3
  store i64 %lneUF, i64* %lneUG, !tbaa !3
  %lneUI = load i64, i64* %R1_Var
  %lneUH = load i64*, i64** %Hp_Var
  %lneUJ = getelementptr inbounds i64, i64* %lneUH, i32 -2
  store i64 %lneUI, i64* %lneUJ, !tbaa !3
  %lneUL = load i64, i64* %R2_Var
  %lneUK = load i64*, i64** %Hp_Var
  %lneUM = getelementptr inbounds i64, i64* %lneUK, i32 -1
  store i64 %lneUL, i64* %lneUM, !tbaa !3
  %lneUO = load i64, i64* %R3_Var
  %lneUN = load i64*, i64** %Hp_Var
  %lneUP = getelementptr inbounds i64, i64* %lneUN, i32 0
  store i64 %lneUO, i64* %lneUP, !tbaa !3
  %lneUR = load i64*, i64** %Hp_Var
  %lneUS = ptrtoint i64* %lneUR to i64
  %lneUT = add i64 %lneUS, -23
  store i64 %lneUT, i64* %R1_Var
  %lneUU = load i64*, i64** %Sp_Var
  %lneUV = getelementptr inbounds i64, i64* %lneUU, i32 1
  %lneUW = ptrtoint i64* %lneUV to i64
  %lneUX = inttoptr i64 %lneUW to i64*
  store i64* %lneUX, i64** %Sp_Var
  %lneUY = load i64*, i64** %Sp_Var
  %lneUZ = getelementptr inbounds i64, i64* %lneUY, i32 0
  %lneV0 = bitcast i64* %lneUZ to i64*
  %lneV1 = load i64, i64* %lneV0, !tbaa !2
  %lneV2 = inttoptr i64 %lneV1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneV3 = load i64*, i64** %Sp_Var
  %lneV4 = load i64*, i64** %Hp_Var
  %lneV5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneV2( i64* %Base_Arg, i64* %lneV3, i64* %lneV4, i64 %lneV5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceTK:
  %lneV6 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lneV6, !tbaa !5
  %lneV7 = load i64, i64* %R3_Var
  store i64 %lneV7, i64* %R3_Var
  %lneV8 = load i64, i64* %R2_Var
  store i64 %lneV8, i64* %R2_Var
  %lneV9 = load i64, i64* %R1_Var
  store i64 %lneV9, i64* %R1_Var
  %lneVa = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lneVb = load i64*, i64** %Sp_Var
  %lneVc = load i64*, i64** %Hp_Var
  %lneVd = load i64, i64* %R1_Var
  %lneVe = load i64, i64* %R2_Var
  %lneVf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lneVa( i64* %Base_Arg, i64* %lneVb, i64* %lneVc, i64 %lneVd, i64 %lneVe, i64 %lneVf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_reflectray_closure_struct = type <{i64, i64}>
%Main_transmitray_closure_struct = type <{i64, i64}>
%Main_zdwshade_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Main_reflectray_closure$def = internal global %Main_reflectray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to i64), i64 0}>
@Main_reflectray_closure = alias i8, bitcast (%Main_reflectray_closure_struct* @Main_reflectray_closure$def to i8*)
@Main_transmitray_closure$def = internal global %Main_transmitray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to i64), i64 0}>
@Main_transmitray_closure = alias i8, bitcast (%Main_transmitray_closure_struct* @Main_transmitray_closure$def to i8*)
@Main_zdwshade_closure$def = internal global %Main_zdwshade_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to i64), i64 ptrtoint (i8* @Main_transmitray_closure to i64), i64 ptrtoint (i8* @Main_reflectray_closure to i64), i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64), i64 ptrtoint (%Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i64), i64 0}>
@Main_zdwshade_closure = alias i8, bitcast (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i8*)
@s7K6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7K6_info$def to i8*)
define internal ghccc void @s7K6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfzy:
  %ls7JZ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceVO
ceVO:
  %lnfzz = load i64*, i64** %Sp_Var
  %lnfzA = getelementptr inbounds i64, i64* %lnfzz, i32 -4
  %lnfzB = ptrtoint i64* %lnfzA to i64
  %lnfzC = icmp ult i64 %lnfzB, %SpLim_Arg
  %lnfzD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfzC, i1 0 )
  br i1 %lnfzD, label %ceW0, label %ceW1
ceW1:
  %lnfzF = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfzE = load i64*, i64** %Sp_Var
  %lnfzG = getelementptr inbounds i64, i64* %lnfzE, i32 -2
  store i64 %lnfzF, i64* %lnfzG, !tbaa !2
  %lnfzI = load i64, i64* %R1_Var
  %lnfzH = load i64*, i64** %Sp_Var
  %lnfzJ = getelementptr inbounds i64, i64* %lnfzH, i32 -1
  store i64 %lnfzI, i64* %lnfzJ, !tbaa !2
  %lnfzL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVL_info$def to i64
  %lnfzK = load i64*, i64** %Sp_Var
  %lnfzM = getelementptr inbounds i64, i64* %lnfzK, i32 -4
  store i64 %lnfzL, i64* %lnfzM, !tbaa !2
  %lnfzP = load i64, i64* %R1_Var
  %lnfzQ = add i64 %lnfzP, 16
  %lnfzR = inttoptr i64 %lnfzQ to i64*
  %lnfzS = load i64, i64* %lnfzR, !tbaa !4
  store i64 %lnfzS, i64* %ls7JZ
  %lnfzV = load i64, i64* %R1_Var
  %lnfzW = add i64 %lnfzV, 24
  %lnfzX = inttoptr i64 %lnfzW to i64*
  %lnfzY = load i64, i64* %lnfzX, !tbaa !4
  store i64 %lnfzY, i64* %R1_Var
  %lnfA0 = load i64, i64* %ls7JZ
  %lnfzZ = load i64*, i64** %Sp_Var
  %lnfA1 = getelementptr inbounds i64, i64* %lnfzZ, i32 -3
  store i64 %lnfA0, i64* %lnfA1, !tbaa !2
  %lnfA2 = load i64*, i64** %Sp_Var
  %lnfA3 = getelementptr inbounds i64, i64* %lnfA2, i32 -4
  %lnfA4 = ptrtoint i64* %lnfA3 to i64
  %lnfA5 = inttoptr i64 %lnfA4 to i64*
  store i64* %lnfA5, i64** %Sp_Var
  %lnfA6 = load i64, i64* %R1_Var
  %lnfA7 = and i64 %lnfA6, 7
  %lnfA8 = icmp ne i64 %lnfA7, 0
  br i1 %lnfA8, label %ueW7, label %ceVM
ceVM:
  %lnfAa = load i64, i64* %R1_Var
  %lnfAb = inttoptr i64 %lnfAa to i64*
  %lnfAc = load i64, i64* %lnfAb, !tbaa !4
  %lnfAd = inttoptr i64 %lnfAc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfAe = load i64*, i64** %Sp_Var
  %lnfAf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfAd( i64* %Base_Arg, i64* %lnfAe, i64* %Hp_Arg, i64 %lnfAf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueW7:
  %lnfAg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfAh = load i64*, i64** %Sp_Var
  %lnfAi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfAg( i64* %Base_Arg, i64* %lnfAh, i64* %Hp_Arg, i64 %lnfAi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceW0:
  %lnfAj = load i64, i64* %R1_Var
  store i64 %lnfAj, i64* %R1_Var
  %lnfAk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfAl = bitcast i64* %lnfAk to i64*
  %lnfAm = load i64, i64* %lnfAl, !tbaa !5
  %lnfAn = inttoptr i64 %lnfAm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfAo = load i64*, i64** %Sp_Var
  %lnfAp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfAn( i64* %Base_Arg, i64* %lnfAo, i64* %Hp_Arg, i64 %lnfAp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVL_info$def to i8*)
define internal ghccc void @ceVL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfAq:
  %ls7K8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceVL
ceVL:
  %lnfAr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVR_info$def to i64
  %lnfAs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfAr, i64* %lnfAs, !tbaa !2
  %lnfAv = load i64, i64* %R1_Var
  %lnfAw = add i64 %lnfAv, 7
  %lnfAx = inttoptr i64 %lnfAw to double*
  %lnfAy = load double, double* %lnfAx, !tbaa !4
  store double %lnfAy, double* %ls7K8
  %lnfAz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfAA = bitcast i64* %lnfAz to i64*
  %lnfAB = load i64, i64* %lnfAA, !tbaa !2
  store i64 %lnfAB, i64* %R1_Var
  %lnfAC = load double, double* %ls7K8
  %lnfAD = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfAE = bitcast i64* %lnfAD to double*
  store double %lnfAC, double* %lnfAE, !tbaa !2
  %lnfAF = load i64, i64* %R1_Var
  %lnfAG = and i64 %lnfAF, 7
  %lnfAH = icmp ne i64 %lnfAG, 0
  br i1 %lnfAH, label %ueW6, label %ceVS
ceVS:
  %lnfAJ = load i64, i64* %R1_Var
  %lnfAK = inttoptr i64 %lnfAJ to i64*
  %lnfAL = load i64, i64* %lnfAK, !tbaa !4
  %lnfAM = inttoptr i64 %lnfAL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfAN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfAM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfAN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueW6:
  %lnfAO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfAP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfAO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfAP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVR_info$def to i8*)
define internal ghccc void @ceVR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfAQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Kb = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceVR
ceVR:
  %lnfAR = load i64*, i64** %Hp_Var
  %lnfAS = getelementptr inbounds i64, i64* %lnfAR, i32 2
  %lnfAT = ptrtoint i64* %lnfAS to i64
  %lnfAU = inttoptr i64 %lnfAT to i64*
  store i64* %lnfAU, i64** %Hp_Var
  %lnfAV = load i64*, i64** %Hp_Var
  %lnfAW = ptrtoint i64* %lnfAV to i64
  %lnfAX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfAY = bitcast i64* %lnfAX to i64*
  %lnfAZ = load i64, i64* %lnfAY, !tbaa !5
  %lnfB0 = icmp ugt i64 %lnfAW, %lnfAZ
  %lnfB1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfB0, i1 0 )
  br i1 %lnfB1, label %ceW5, label %ceW4
ceW4:
  %lnfB2 = load i64*, i64** %Sp_Var
  %lnfB3 = getelementptr inbounds i64, i64* %lnfB2, i32 1
  %lnfB4 = bitcast i64* %lnfB3 to double*
  %lnfB5 = load double, double* %lnfB4, !tbaa !2
  %lnfB8 = load i64, i64* %R1_Var
  %lnfB9 = add i64 %lnfB8, 7
  %lnfBa = inttoptr i64 %lnfB9 to double*
  %lnfBb = load double, double* %lnfBa, !tbaa !4
  %lnfBc = fmul double %lnfB5, %lnfBb
  store double %lnfBc, double* %ls7Kb
  %lnfBe = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfBd = load i64*, i64** %Hp_Var
  %lnfBf = getelementptr inbounds i64, i64* %lnfBd, i32 -1
  store i64 %lnfBe, i64* %lnfBf, !tbaa !3
  %lnfBh = load double, double* %ls7Kb
  %lnfBg = load i64*, i64** %Hp_Var
  %lnfBi = getelementptr inbounds i64, i64* %lnfBg, i32 0
  %lnfBj = bitcast i64* %lnfBi to double*
  store double %lnfBh, double* %lnfBj, !tbaa !3
  %lnfBl = load i64*, i64** %Hp_Var
  %lnfBm = ptrtoint i64* %lnfBl to i64
  %lnfBn = add i64 %lnfBm, -7
  store i64 %lnfBn, i64* %R1_Var
  %lnfBo = load i64*, i64** %Sp_Var
  %lnfBp = getelementptr inbounds i64, i64* %lnfBo, i32 2
  %lnfBq = ptrtoint i64* %lnfBp to i64
  %lnfBr = inttoptr i64 %lnfBq to i64*
  store i64* %lnfBr, i64** %Sp_Var
  %lnfBs = load i64*, i64** %Sp_Var
  %lnfBt = getelementptr inbounds i64, i64* %lnfBs, i32 0
  %lnfBu = bitcast i64* %lnfBt to i64*
  %lnfBv = load i64, i64* %lnfBu, !tbaa !2
  %lnfBw = inttoptr i64 %lnfBv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfBx = load i64*, i64** %Sp_Var
  %lnfBy = load i64*, i64** %Hp_Var
  %lnfBz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfBw( i64* %Base_Arg, i64* %lnfBx, i64* %lnfBy, i64 %lnfBz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceW5:
  %lnfBA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfBA, !tbaa !5
  %lnfBB = load i64, i64* %R1_Var
  store i64 %lnfBB, i64* %R1_Var
  %lnfBC = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfBD = load i64*, i64** %Sp_Var
  %lnfBE = load i64*, i64** %Hp_Var
  %lnfBF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfBC( i64* %Base_Arg, i64* %lnfBD, i64* %lnfBE, i64 %lnfBF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Kc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Kc_info$def to i8*)
define internal ghccc void @s7Kc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfBG:
  %ls7K0 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceWf
ceWf:
  %lnfBH = load i64*, i64** %Sp_Var
  %lnfBI = getelementptr inbounds i64, i64* %lnfBH, i32 -4
  %lnfBJ = ptrtoint i64* %lnfBI to i64
  %lnfBK = icmp ult i64 %lnfBJ, %SpLim_Arg
  %lnfBL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfBK, i1 0 )
  br i1 %lnfBL, label %ceWr, label %ceWs
ceWs:
  %lnfBN = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfBM = load i64*, i64** %Sp_Var
  %lnfBO = getelementptr inbounds i64, i64* %lnfBM, i32 -2
  store i64 %lnfBN, i64* %lnfBO, !tbaa !2
  %lnfBQ = load i64, i64* %R1_Var
  %lnfBP = load i64*, i64** %Sp_Var
  %lnfBR = getelementptr inbounds i64, i64* %lnfBP, i32 -1
  store i64 %lnfBQ, i64* %lnfBR, !tbaa !2
  %lnfBT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWc_info$def to i64
  %lnfBS = load i64*, i64** %Sp_Var
  %lnfBU = getelementptr inbounds i64, i64* %lnfBS, i32 -4
  store i64 %lnfBT, i64* %lnfBU, !tbaa !2
  %lnfBX = load i64, i64* %R1_Var
  %lnfBY = add i64 %lnfBX, 16
  %lnfBZ = inttoptr i64 %lnfBY to i64*
  %lnfC0 = load i64, i64* %lnfBZ, !tbaa !4
  store i64 %lnfC0, i64* %ls7K0
  %lnfC3 = load i64, i64* %R1_Var
  %lnfC4 = add i64 %lnfC3, 24
  %lnfC5 = inttoptr i64 %lnfC4 to i64*
  %lnfC6 = load i64, i64* %lnfC5, !tbaa !4
  store i64 %lnfC6, i64* %R1_Var
  %lnfC8 = load i64, i64* %ls7K0
  %lnfC7 = load i64*, i64** %Sp_Var
  %lnfC9 = getelementptr inbounds i64, i64* %lnfC7, i32 -3
  store i64 %lnfC8, i64* %lnfC9, !tbaa !2
  %lnfCa = load i64*, i64** %Sp_Var
  %lnfCb = getelementptr inbounds i64, i64* %lnfCa, i32 -4
  %lnfCc = ptrtoint i64* %lnfCb to i64
  %lnfCd = inttoptr i64 %lnfCc to i64*
  store i64* %lnfCd, i64** %Sp_Var
  %lnfCe = load i64, i64* %R1_Var
  %lnfCf = and i64 %lnfCe, 7
  %lnfCg = icmp ne i64 %lnfCf, 0
  br i1 %lnfCg, label %ueWy, label %ceWd
ceWd:
  %lnfCi = load i64, i64* %R1_Var
  %lnfCj = inttoptr i64 %lnfCi to i64*
  %lnfCk = load i64, i64* %lnfCj, !tbaa !4
  %lnfCl = inttoptr i64 %lnfCk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfCm = load i64*, i64** %Sp_Var
  %lnfCn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfCl( i64* %Base_Arg, i64* %lnfCm, i64* %Hp_Arg, i64 %lnfCn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueWy:
  %lnfCo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfCp = load i64*, i64** %Sp_Var
  %lnfCq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfCo( i64* %Base_Arg, i64* %lnfCp, i64* %Hp_Arg, i64 %lnfCq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceWr:
  %lnfCr = load i64, i64* %R1_Var
  store i64 %lnfCr, i64* %R1_Var
  %lnfCs = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfCt = bitcast i64* %lnfCs to i64*
  %lnfCu = load i64, i64* %lnfCt, !tbaa !5
  %lnfCv = inttoptr i64 %lnfCu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfCw = load i64*, i64** %Sp_Var
  %lnfCx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfCv( i64* %Base_Arg, i64* %lnfCw, i64* %Hp_Arg, i64 %lnfCx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceWc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWc_info$def to i8*)
define internal ghccc void @ceWc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfCy:
  %ls7Ke = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceWc
ceWc:
  %lnfCz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWi_info$def to i64
  %lnfCA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfCz, i64* %lnfCA, !tbaa !2
  %lnfCD = load i64, i64* %R1_Var
  %lnfCE = add i64 %lnfCD, 7
  %lnfCF = inttoptr i64 %lnfCE to double*
  %lnfCG = load double, double* %lnfCF, !tbaa !4
  store double %lnfCG, double* %ls7Ke
  %lnfCH = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfCI = bitcast i64* %lnfCH to i64*
  %lnfCJ = load i64, i64* %lnfCI, !tbaa !2
  store i64 %lnfCJ, i64* %R1_Var
  %lnfCK = load double, double* %ls7Ke
  %lnfCL = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfCM = bitcast i64* %lnfCL to double*
  store double %lnfCK, double* %lnfCM, !tbaa !2
  %lnfCN = load i64, i64* %R1_Var
  %lnfCO = and i64 %lnfCN, 7
  %lnfCP = icmp ne i64 %lnfCO, 0
  br i1 %lnfCP, label %ueWx, label %ceWj
ceWj:
  %lnfCR = load i64, i64* %R1_Var
  %lnfCS = inttoptr i64 %lnfCR to i64*
  %lnfCT = load i64, i64* %lnfCS, !tbaa !4
  %lnfCU = inttoptr i64 %lnfCT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfCV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfCU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfCV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueWx:
  %lnfCW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfCX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfCW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfCX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceWi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWi_info$def to i8*)
define internal ghccc void @ceWi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfCY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Kh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceWi
ceWi:
  %lnfCZ = load i64*, i64** %Hp_Var
  %lnfD0 = getelementptr inbounds i64, i64* %lnfCZ, i32 2
  %lnfD1 = ptrtoint i64* %lnfD0 to i64
  %lnfD2 = inttoptr i64 %lnfD1 to i64*
  store i64* %lnfD2, i64** %Hp_Var
  %lnfD3 = load i64*, i64** %Hp_Var
  %lnfD4 = ptrtoint i64* %lnfD3 to i64
  %lnfD5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfD6 = bitcast i64* %lnfD5 to i64*
  %lnfD7 = load i64, i64* %lnfD6, !tbaa !5
  %lnfD8 = icmp ugt i64 %lnfD4, %lnfD7
  %lnfD9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfD8, i1 0 )
  br i1 %lnfD9, label %ceWw, label %ceWv
ceWv:
  %lnfDa = load i64*, i64** %Sp_Var
  %lnfDb = getelementptr inbounds i64, i64* %lnfDa, i32 1
  %lnfDc = bitcast i64* %lnfDb to double*
  %lnfDd = load double, double* %lnfDc, !tbaa !2
  %lnfDg = load i64, i64* %R1_Var
  %lnfDh = add i64 %lnfDg, 7
  %lnfDi = inttoptr i64 %lnfDh to double*
  %lnfDj = load double, double* %lnfDi, !tbaa !4
  %lnfDk = fmul double %lnfDd, %lnfDj
  store double %lnfDk, double* %ls7Kh
  %lnfDm = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfDl = load i64*, i64** %Hp_Var
  %lnfDn = getelementptr inbounds i64, i64* %lnfDl, i32 -1
  store i64 %lnfDm, i64* %lnfDn, !tbaa !3
  %lnfDp = load double, double* %ls7Kh
  %lnfDo = load i64*, i64** %Hp_Var
  %lnfDq = getelementptr inbounds i64, i64* %lnfDo, i32 0
  %lnfDr = bitcast i64* %lnfDq to double*
  store double %lnfDp, double* %lnfDr, !tbaa !3
  %lnfDt = load i64*, i64** %Hp_Var
  %lnfDu = ptrtoint i64* %lnfDt to i64
  %lnfDv = add i64 %lnfDu, -7
  store i64 %lnfDv, i64* %R1_Var
  %lnfDw = load i64*, i64** %Sp_Var
  %lnfDx = getelementptr inbounds i64, i64* %lnfDw, i32 2
  %lnfDy = ptrtoint i64* %lnfDx to i64
  %lnfDz = inttoptr i64 %lnfDy to i64*
  store i64* %lnfDz, i64** %Sp_Var
  %lnfDA = load i64*, i64** %Sp_Var
  %lnfDB = getelementptr inbounds i64, i64* %lnfDA, i32 0
  %lnfDC = bitcast i64* %lnfDB to i64*
  %lnfDD = load i64, i64* %lnfDC, !tbaa !2
  %lnfDE = inttoptr i64 %lnfDD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfDF = load i64*, i64** %Sp_Var
  %lnfDG = load i64*, i64** %Hp_Var
  %lnfDH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfDE( i64* %Base_Arg, i64* %lnfDF, i64* %lnfDG, i64 %lnfDH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceWw:
  %lnfDI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfDI, !tbaa !5
  %lnfDJ = load i64, i64* %R1_Var
  store i64 %lnfDJ, i64* %R1_Var
  %lnfDK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfDL = load i64*, i64** %Sp_Var
  %lnfDM = load i64*, i64** %Hp_Var
  %lnfDN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfDK( i64* %Base_Arg, i64* %lnfDL, i64* %lnfDM, i64 %lnfDN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7KQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KQ_info$def to i8*)
define internal ghccc void @s7KQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfDO:
  %ls7Kv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceX4
ceX4:
  %lnfDP = load i64*, i64** %Sp_Var
  %lnfDQ = getelementptr inbounds i64, i64* %lnfDP, i32 -4
  %lnfDR = ptrtoint i64* %lnfDQ to i64
  %lnfDS = icmp ult i64 %lnfDR, %SpLim_Arg
  %lnfDT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfDS, i1 0 )
  br i1 %lnfDT, label %ceXj, label %ceXk
ceXk:
  %lnfDV = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfDU = load i64*, i64** %Sp_Var
  %lnfDW = getelementptr inbounds i64, i64* %lnfDU, i32 -2
  store i64 %lnfDV, i64* %lnfDW, !tbaa !2
  %lnfDY = load i64, i64* %R1_Var
  %lnfDX = load i64*, i64** %Sp_Var
  %lnfDZ = getelementptr inbounds i64, i64* %lnfDX, i32 -1
  store i64 %lnfDY, i64* %lnfDZ, !tbaa !2
  %lnfE1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX1_info$def to i64
  %lnfE0 = load i64*, i64** %Sp_Var
  %lnfE2 = getelementptr inbounds i64, i64* %lnfE0, i32 -4
  store i64 %lnfE1, i64* %lnfE2, !tbaa !2
  %lnfE5 = load i64, i64* %R1_Var
  %lnfE6 = add i64 %lnfE5, 16
  %lnfE7 = inttoptr i64 %lnfE6 to i64*
  %lnfE8 = load i64, i64* %lnfE7, !tbaa !4
  store i64 %lnfE8, i64* %ls7Kv
  %lnfEb = load i64, i64* %R1_Var
  %lnfEc = add i64 %lnfEb, 24
  %lnfEd = inttoptr i64 %lnfEc to i64*
  %lnfEe = load i64, i64* %lnfEd, !tbaa !4
  store i64 %lnfEe, i64* %R1_Var
  %lnfEg = load i64, i64* %ls7Kv
  %lnfEf = load i64*, i64** %Sp_Var
  %lnfEh = getelementptr inbounds i64, i64* %lnfEf, i32 -3
  store i64 %lnfEg, i64* %lnfEh, !tbaa !2
  %lnfEi = load i64*, i64** %Sp_Var
  %lnfEj = getelementptr inbounds i64, i64* %lnfEi, i32 -4
  %lnfEk = ptrtoint i64* %lnfEj to i64
  %lnfEl = inttoptr i64 %lnfEk to i64*
  store i64* %lnfEl, i64** %Sp_Var
  %lnfEm = load i64, i64* %R1_Var
  %lnfEn = and i64 %lnfEm, 7
  %lnfEo = icmp ne i64 %lnfEn, 0
  br i1 %lnfEo, label %ueXq, label %ceX2
ceX2:
  %lnfEq = load i64, i64* %R1_Var
  %lnfEr = inttoptr i64 %lnfEq to i64*
  %lnfEs = load i64, i64* %lnfEr, !tbaa !4
  %lnfEt = inttoptr i64 %lnfEs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfEu = load i64*, i64** %Sp_Var
  %lnfEv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfEt( i64* %Base_Arg, i64* %lnfEu, i64* %Hp_Arg, i64 %lnfEv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueXq:
  %lnfEw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfEx = load i64*, i64** %Sp_Var
  %lnfEy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfEw( i64* %Base_Arg, i64* %lnfEx, i64* %Hp_Arg, i64 %lnfEy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceXj:
  %lnfEz = load i64, i64* %R1_Var
  store i64 %lnfEz, i64* %R1_Var
  %lnfEA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfEB = bitcast i64* %lnfEA to i64*
  %lnfEC = load i64, i64* %lnfEB, !tbaa !5
  %lnfED = inttoptr i64 %lnfEC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfEE = load i64*, i64** %Sp_Var
  %lnfEF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfED( i64* %Base_Arg, i64* %lnfEE, i64* %Hp_Arg, i64 %lnfEF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceX1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX1_info$def to i8*)
define internal ghccc void @ceX1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfEG:
  %ls7KL = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceX1
ceX1:
  %lnfEH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX7_info$def to i64
  %lnfEI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfEH, i64* %lnfEI, !tbaa !2
  %lnfEL = load i64, i64* %R1_Var
  %lnfEM = add i64 %lnfEL, 7
  %lnfEN = inttoptr i64 %lnfEM to double*
  %lnfEO = load double, double* %lnfEN, !tbaa !4
  store double %lnfEO, double* %ls7KL
  %lnfEP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfEQ = bitcast i64* %lnfEP to i64*
  %lnfER = load i64, i64* %lnfEQ, !tbaa !2
  store i64 %lnfER, i64* %R1_Var
  %lnfES = load double, double* %ls7KL
  %lnfET = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfEU = bitcast i64* %lnfET to double*
  store double %lnfES, double* %lnfEU, !tbaa !2
  %lnfEV = load i64, i64* %R1_Var
  %lnfEW = and i64 %lnfEV, 7
  %lnfEX = icmp ne i64 %lnfEW, 0
  br i1 %lnfEX, label %ueXp, label %ceX8
ceX8:
  %lnfEZ = load i64, i64* %R1_Var
  %lnfF0 = inttoptr i64 %lnfEZ to i64*
  %lnfF1 = load i64, i64* %lnfF0, !tbaa !4
  %lnfF2 = inttoptr i64 %lnfF1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfF3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfF2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfF3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueXp:
  %lnfF4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfF5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfF4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfF5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceX7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceX7_info$def to i8*)
define internal ghccc void @ceX7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfF6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7KP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceX7
ceX7:
  %lnfF7 = load i64*, i64** %Hp_Var
  %lnfF8 = getelementptr inbounds i64, i64* %lnfF7, i32 2
  %lnfF9 = ptrtoint i64* %lnfF8 to i64
  %lnfFa = inttoptr i64 %lnfF9 to i64*
  store i64* %lnfFa, i64** %Hp_Var
  %lnfFb = load i64*, i64** %Hp_Var
  %lnfFc = ptrtoint i64* %lnfFb to i64
  %lnfFd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfFe = bitcast i64* %lnfFd to i64*
  %lnfFf = load i64, i64* %lnfFe, !tbaa !5
  %lnfFg = icmp ugt i64 %lnfFc, %lnfFf
  %lnfFh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfFg, i1 0 )
  br i1 %lnfFh, label %ceXo, label %ceXn
ceXn:
  %lnfFi = load i64*, i64** %Sp_Var
  %lnfFj = getelementptr inbounds i64, i64* %lnfFi, i32 1
  %lnfFk = bitcast i64* %lnfFj to double*
  %lnfFl = load double, double* %lnfFk, !tbaa !2
  %lnfFo = load i64, i64* %R1_Var
  %lnfFp = add i64 %lnfFo, 7
  %lnfFq = inttoptr i64 %lnfFp to double*
  %lnfFr = load double, double* %lnfFq, !tbaa !4
  %lnfFs = fmul double %lnfFr, 0x3EB0C6F7A0B5ED8D
  %lnfFt = fadd double %lnfFl, %lnfFs
  store double %lnfFt, double* %ls7KP
  %lnfFv = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfFu = load i64*, i64** %Hp_Var
  %lnfFw = getelementptr inbounds i64, i64* %lnfFu, i32 -1
  store i64 %lnfFv, i64* %lnfFw, !tbaa !3
  %lnfFy = load double, double* %ls7KP
  %lnfFx = load i64*, i64** %Hp_Var
  %lnfFz = getelementptr inbounds i64, i64* %lnfFx, i32 0
  %lnfFA = bitcast i64* %lnfFz to double*
  store double %lnfFy, double* %lnfFA, !tbaa !3
  %lnfFC = load i64*, i64** %Hp_Var
  %lnfFD = ptrtoint i64* %lnfFC to i64
  %lnfFE = add i64 %lnfFD, -7
  store i64 %lnfFE, i64* %R1_Var
  %lnfFF = load i64*, i64** %Sp_Var
  %lnfFG = getelementptr inbounds i64, i64* %lnfFF, i32 2
  %lnfFH = ptrtoint i64* %lnfFG to i64
  %lnfFI = inttoptr i64 %lnfFH to i64*
  store i64* %lnfFI, i64** %Sp_Var
  %lnfFJ = load i64*, i64** %Sp_Var
  %lnfFK = getelementptr inbounds i64, i64* %lnfFJ, i32 0
  %lnfFL = bitcast i64* %lnfFK to i64*
  %lnfFM = load i64, i64* %lnfFL, !tbaa !2
  %lnfFN = inttoptr i64 %lnfFM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfFO = load i64*, i64** %Sp_Var
  %lnfFP = load i64*, i64** %Hp_Var
  %lnfFQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfFN( i64* %Base_Arg, i64* %lnfFO, i64* %lnfFP, i64 %lnfFQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceXo:
  %lnfFR = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfFR, !tbaa !5
  %lnfFS = load i64, i64* %R1_Var
  store i64 %lnfFS, i64* %R1_Var
  %lnfFT = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfFU = load i64*, i64** %Sp_Var
  %lnfFV = load i64*, i64** %Hp_Var
  %lnfFW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfFT( i64* %Base_Arg, i64* %lnfFU, i64* %lnfFV, i64 %lnfFW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7KJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KJ_info$def to i8*)
define internal ghccc void @s7KJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfFX:
  %ls7Ku = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceXy
ceXy:
  %lnfFY = load i64*, i64** %Sp_Var
  %lnfFZ = getelementptr inbounds i64, i64* %lnfFY, i32 -4
  %lnfG0 = ptrtoint i64* %lnfFZ to i64
  %lnfG1 = icmp ult i64 %lnfG0, %SpLim_Arg
  %lnfG2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfG1, i1 0 )
  br i1 %lnfG2, label %ceXN, label %ceXO
ceXO:
  %lnfG4 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfG3 = load i64*, i64** %Sp_Var
  %lnfG5 = getelementptr inbounds i64, i64* %lnfG3, i32 -2
  store i64 %lnfG4, i64* %lnfG5, !tbaa !2
  %lnfG7 = load i64, i64* %R1_Var
  %lnfG6 = load i64*, i64** %Sp_Var
  %lnfG8 = getelementptr inbounds i64, i64* %lnfG6, i32 -1
  store i64 %lnfG7, i64* %lnfG8, !tbaa !2
  %lnfGa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXv_info$def to i64
  %lnfG9 = load i64*, i64** %Sp_Var
  %lnfGb = getelementptr inbounds i64, i64* %lnfG9, i32 -4
  store i64 %lnfGa, i64* %lnfGb, !tbaa !2
  %lnfGe = load i64, i64* %R1_Var
  %lnfGf = add i64 %lnfGe, 16
  %lnfGg = inttoptr i64 %lnfGf to i64*
  %lnfGh = load i64, i64* %lnfGg, !tbaa !4
  store i64 %lnfGh, i64* %ls7Ku
  %lnfGk = load i64, i64* %R1_Var
  %lnfGl = add i64 %lnfGk, 24
  %lnfGm = inttoptr i64 %lnfGl to i64*
  %lnfGn = load i64, i64* %lnfGm, !tbaa !4
  store i64 %lnfGn, i64* %R1_Var
  %lnfGp = load i64, i64* %ls7Ku
  %lnfGo = load i64*, i64** %Sp_Var
  %lnfGq = getelementptr inbounds i64, i64* %lnfGo, i32 -3
  store i64 %lnfGp, i64* %lnfGq, !tbaa !2
  %lnfGr = load i64*, i64** %Sp_Var
  %lnfGs = getelementptr inbounds i64, i64* %lnfGr, i32 -4
  %lnfGt = ptrtoint i64* %lnfGs to i64
  %lnfGu = inttoptr i64 %lnfGt to i64*
  store i64* %lnfGu, i64** %Sp_Var
  %lnfGv = load i64, i64* %R1_Var
  %lnfGw = and i64 %lnfGv, 7
  %lnfGx = icmp ne i64 %lnfGw, 0
  br i1 %lnfGx, label %ueXU, label %ceXw
ceXw:
  %lnfGz = load i64, i64* %R1_Var
  %lnfGA = inttoptr i64 %lnfGz to i64*
  %lnfGB = load i64, i64* %lnfGA, !tbaa !4
  %lnfGC = inttoptr i64 %lnfGB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfGD = load i64*, i64** %Sp_Var
  %lnfGE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfGC( i64* %Base_Arg, i64* %lnfGD, i64* %Hp_Arg, i64 %lnfGE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueXU:
  %lnfGF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfGG = load i64*, i64** %Sp_Var
  %lnfGH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfGF( i64* %Base_Arg, i64* %lnfGG, i64* %Hp_Arg, i64 %lnfGH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceXN:
  %lnfGI = load i64, i64* %R1_Var
  store i64 %lnfGI, i64* %R1_Var
  %lnfGJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfGK = bitcast i64* %lnfGJ to i64*
  %lnfGL = load i64, i64* %lnfGK, !tbaa !5
  %lnfGM = inttoptr i64 %lnfGL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfGN = load i64*, i64** %Sp_Var
  %lnfGO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfGM( i64* %Base_Arg, i64* %lnfGN, i64* %Hp_Arg, i64 %lnfGO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceXv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXv_info$def to i8*)
define internal ghccc void @ceXv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfGP:
  %ls7KE = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceXv
ceXv:
  %lnfGQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXB_info$def to i64
  %lnfGR = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfGQ, i64* %lnfGR, !tbaa !2
  %lnfGU = load i64, i64* %R1_Var
  %lnfGV = add i64 %lnfGU, 7
  %lnfGW = inttoptr i64 %lnfGV to double*
  %lnfGX = load double, double* %lnfGW, !tbaa !4
  store double %lnfGX, double* %ls7KE
  %lnfGY = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfGZ = bitcast i64* %lnfGY to i64*
  %lnfH0 = load i64, i64* %lnfGZ, !tbaa !2
  store i64 %lnfH0, i64* %R1_Var
  %lnfH1 = load double, double* %ls7KE
  %lnfH2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfH3 = bitcast i64* %lnfH2 to double*
  store double %lnfH1, double* %lnfH3, !tbaa !2
  %lnfH4 = load i64, i64* %R1_Var
  %lnfH5 = and i64 %lnfH4, 7
  %lnfH6 = icmp ne i64 %lnfH5, 0
  br i1 %lnfH6, label %ueXT, label %ceXC
ceXC:
  %lnfH8 = load i64, i64* %R1_Var
  %lnfH9 = inttoptr i64 %lnfH8 to i64*
  %lnfHa = load i64, i64* %lnfH9, !tbaa !4
  %lnfHb = inttoptr i64 %lnfHa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfHc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfHb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfHc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueXT:
  %lnfHd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfHe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfHd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfHe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceXB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXB_info$def to i8*)
define internal ghccc void @ceXB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfHf:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7KI = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceXB
ceXB:
  %lnfHg = load i64*, i64** %Hp_Var
  %lnfHh = getelementptr inbounds i64, i64* %lnfHg, i32 2
  %lnfHi = ptrtoint i64* %lnfHh to i64
  %lnfHj = inttoptr i64 %lnfHi to i64*
  store i64* %lnfHj, i64** %Hp_Var
  %lnfHk = load i64*, i64** %Hp_Var
  %lnfHl = ptrtoint i64* %lnfHk to i64
  %lnfHm = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfHn = bitcast i64* %lnfHm to i64*
  %lnfHo = load i64, i64* %lnfHn, !tbaa !5
  %lnfHp = icmp ugt i64 %lnfHl, %lnfHo
  %lnfHq = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfHp, i1 0 )
  br i1 %lnfHq, label %ceXS, label %ceXR
ceXR:
  %lnfHr = load i64*, i64** %Sp_Var
  %lnfHs = getelementptr inbounds i64, i64* %lnfHr, i32 1
  %lnfHt = bitcast i64* %lnfHs to double*
  %lnfHu = load double, double* %lnfHt, !tbaa !2
  %lnfHx = load i64, i64* %R1_Var
  %lnfHy = add i64 %lnfHx, 7
  %lnfHz = inttoptr i64 %lnfHy to double*
  %lnfHA = load double, double* %lnfHz, !tbaa !4
  %lnfHB = fmul double %lnfHA, 0x3EB0C6F7A0B5ED8D
  %lnfHC = fadd double %lnfHu, %lnfHB
  store double %lnfHC, double* %ls7KI
  %lnfHE = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfHD = load i64*, i64** %Hp_Var
  %lnfHF = getelementptr inbounds i64, i64* %lnfHD, i32 -1
  store i64 %lnfHE, i64* %lnfHF, !tbaa !3
  %lnfHH = load double, double* %ls7KI
  %lnfHG = load i64*, i64** %Hp_Var
  %lnfHI = getelementptr inbounds i64, i64* %lnfHG, i32 0
  %lnfHJ = bitcast i64* %lnfHI to double*
  store double %lnfHH, double* %lnfHJ, !tbaa !3
  %lnfHL = load i64*, i64** %Hp_Var
  %lnfHM = ptrtoint i64* %lnfHL to i64
  %lnfHN = add i64 %lnfHM, -7
  store i64 %lnfHN, i64* %R1_Var
  %lnfHO = load i64*, i64** %Sp_Var
  %lnfHP = getelementptr inbounds i64, i64* %lnfHO, i32 2
  %lnfHQ = ptrtoint i64* %lnfHP to i64
  %lnfHR = inttoptr i64 %lnfHQ to i64*
  store i64* %lnfHR, i64** %Sp_Var
  %lnfHS = load i64*, i64** %Sp_Var
  %lnfHT = getelementptr inbounds i64, i64* %lnfHS, i32 0
  %lnfHU = bitcast i64* %lnfHT to i64*
  %lnfHV = load i64, i64* %lnfHU, !tbaa !2
  %lnfHW = inttoptr i64 %lnfHV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfHX = load i64*, i64** %Sp_Var
  %lnfHY = load i64*, i64** %Hp_Var
  %lnfHZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfHW( i64* %Base_Arg, i64* %lnfHX, i64* %lnfHY, i64 %lnfHZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceXS:
  %lnfI0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfI0, !tbaa !5
  %lnfI1 = load i64, i64* %R1_Var
  store i64 %lnfI1, i64* %R1_Var
  %lnfI2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfI3 = load i64*, i64** %Sp_Var
  %lnfI4 = load i64*, i64** %Hp_Var
  %lnfI5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfI2( i64* %Base_Arg, i64* %lnfI3, i64* %lnfI4, i64 %lnfI5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7KC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KC_info$def to i8*)
define internal ghccc void @s7KC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfI6:
  %ls7Kt = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceY2
ceY2:
  %lnfI7 = load i64*, i64** %Sp_Var
  %lnfI8 = getelementptr inbounds i64, i64* %lnfI7, i32 -4
  %lnfI9 = ptrtoint i64* %lnfI8 to i64
  %lnfIa = icmp ult i64 %lnfI9, %SpLim_Arg
  %lnfIb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfIa, i1 0 )
  br i1 %lnfIb, label %ceYh, label %ceYi
ceYi:
  %lnfId = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfIc = load i64*, i64** %Sp_Var
  %lnfIe = getelementptr inbounds i64, i64* %lnfIc, i32 -2
  store i64 %lnfId, i64* %lnfIe, !tbaa !2
  %lnfIg = load i64, i64* %R1_Var
  %lnfIf = load i64*, i64** %Sp_Var
  %lnfIh = getelementptr inbounds i64, i64* %lnfIf, i32 -1
  store i64 %lnfIg, i64* %lnfIh, !tbaa !2
  %lnfIj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXZ_info$def to i64
  %lnfIi = load i64*, i64** %Sp_Var
  %lnfIk = getelementptr inbounds i64, i64* %lnfIi, i32 -4
  store i64 %lnfIj, i64* %lnfIk, !tbaa !2
  %lnfIn = load i64, i64* %R1_Var
  %lnfIo = add i64 %lnfIn, 16
  %lnfIp = inttoptr i64 %lnfIo to i64*
  %lnfIq = load i64, i64* %lnfIp, !tbaa !4
  store i64 %lnfIq, i64* %ls7Kt
  %lnfIt = load i64, i64* %R1_Var
  %lnfIu = add i64 %lnfIt, 24
  %lnfIv = inttoptr i64 %lnfIu to i64*
  %lnfIw = load i64, i64* %lnfIv, !tbaa !4
  store i64 %lnfIw, i64* %R1_Var
  %lnfIy = load i64, i64* %ls7Kt
  %lnfIx = load i64*, i64** %Sp_Var
  %lnfIz = getelementptr inbounds i64, i64* %lnfIx, i32 -3
  store i64 %lnfIy, i64* %lnfIz, !tbaa !2
  %lnfIA = load i64*, i64** %Sp_Var
  %lnfIB = getelementptr inbounds i64, i64* %lnfIA, i32 -4
  %lnfIC = ptrtoint i64* %lnfIB to i64
  %lnfID = inttoptr i64 %lnfIC to i64*
  store i64* %lnfID, i64** %Sp_Var
  %lnfIE = load i64, i64* %R1_Var
  %lnfIF = and i64 %lnfIE, 7
  %lnfIG = icmp ne i64 %lnfIF, 0
  br i1 %lnfIG, label %ueYo, label %ceY0
ceY0:
  %lnfII = load i64, i64* %R1_Var
  %lnfIJ = inttoptr i64 %lnfII to i64*
  %lnfIK = load i64, i64* %lnfIJ, !tbaa !4
  %lnfIL = inttoptr i64 %lnfIK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfIM = load i64*, i64** %Sp_Var
  %lnfIN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfIL( i64* %Base_Arg, i64* %lnfIM, i64* %Hp_Arg, i64 %lnfIN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueYo:
  %lnfIO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfIP = load i64*, i64** %Sp_Var
  %lnfIQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfIO( i64* %Base_Arg, i64* %lnfIP, i64* %Hp_Arg, i64 %lnfIQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceYh:
  %lnfIR = load i64, i64* %R1_Var
  store i64 %lnfIR, i64* %R1_Var
  %lnfIS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfIT = bitcast i64* %lnfIS to i64*
  %lnfIU = load i64, i64* %lnfIT, !tbaa !5
  %lnfIV = inttoptr i64 %lnfIU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfIW = load i64*, i64** %Sp_Var
  %lnfIX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfIV( i64* %Base_Arg, i64* %lnfIW, i64* %Hp_Arg, i64 %lnfIX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceXZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceXZ_info$def to i8*)
define internal ghccc void @ceXZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfIY:
  %ls7Kx = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceXZ
ceXZ:
  %lnfIZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceY5_info$def to i64
  %lnfJ0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfIZ, i64* %lnfJ0, !tbaa !2
  %lnfJ3 = load i64, i64* %R1_Var
  %lnfJ4 = add i64 %lnfJ3, 7
  %lnfJ5 = inttoptr i64 %lnfJ4 to double*
  %lnfJ6 = load double, double* %lnfJ5, !tbaa !4
  store double %lnfJ6, double* %ls7Kx
  %lnfJ7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfJ8 = bitcast i64* %lnfJ7 to i64*
  %lnfJ9 = load i64, i64* %lnfJ8, !tbaa !2
  store i64 %lnfJ9, i64* %R1_Var
  %lnfJa = load double, double* %ls7Kx
  %lnfJb = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfJc = bitcast i64* %lnfJb to double*
  store double %lnfJa, double* %lnfJc, !tbaa !2
  %lnfJd = load i64, i64* %R1_Var
  %lnfJe = and i64 %lnfJd, 7
  %lnfJf = icmp ne i64 %lnfJe, 0
  br i1 %lnfJf, label %ueYn, label %ceY6
ceY6:
  %lnfJh = load i64, i64* %R1_Var
  %lnfJi = inttoptr i64 %lnfJh to i64*
  %lnfJj = load i64, i64* %lnfJi, !tbaa !4
  %lnfJk = inttoptr i64 %lnfJj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfJl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfJk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfJl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueYn:
  %lnfJm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceY5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfJn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfJm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfJn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceY5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceY5_info$def to i8*)
define internal ghccc void @ceY5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfJo:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7KB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceY5
ceY5:
  %lnfJp = load i64*, i64** %Hp_Var
  %lnfJq = getelementptr inbounds i64, i64* %lnfJp, i32 2
  %lnfJr = ptrtoint i64* %lnfJq to i64
  %lnfJs = inttoptr i64 %lnfJr to i64*
  store i64* %lnfJs, i64** %Hp_Var
  %lnfJt = load i64*, i64** %Hp_Var
  %lnfJu = ptrtoint i64* %lnfJt to i64
  %lnfJv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfJw = bitcast i64* %lnfJv to i64*
  %lnfJx = load i64, i64* %lnfJw, !tbaa !5
  %lnfJy = icmp ugt i64 %lnfJu, %lnfJx
  %lnfJz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfJy, i1 0 )
  br i1 %lnfJz, label %ceYm, label %ceYl
ceYl:
  %lnfJA = load i64*, i64** %Sp_Var
  %lnfJB = getelementptr inbounds i64, i64* %lnfJA, i32 1
  %lnfJC = bitcast i64* %lnfJB to double*
  %lnfJD = load double, double* %lnfJC, !tbaa !2
  %lnfJG = load i64, i64* %R1_Var
  %lnfJH = add i64 %lnfJG, 7
  %lnfJI = inttoptr i64 %lnfJH to double*
  %lnfJJ = load double, double* %lnfJI, !tbaa !4
  %lnfJK = fmul double %lnfJJ, 0x3EB0C6F7A0B5ED8D
  %lnfJL = fadd double %lnfJD, %lnfJK
  store double %lnfJL, double* %ls7KB
  %lnfJN = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfJM = load i64*, i64** %Hp_Var
  %lnfJO = getelementptr inbounds i64, i64* %lnfJM, i32 -1
  store i64 %lnfJN, i64* %lnfJO, !tbaa !3
  %lnfJQ = load double, double* %ls7KB
  %lnfJP = load i64*, i64** %Hp_Var
  %lnfJR = getelementptr inbounds i64, i64* %lnfJP, i32 0
  %lnfJS = bitcast i64* %lnfJR to double*
  store double %lnfJQ, double* %lnfJS, !tbaa !3
  %lnfJU = load i64*, i64** %Hp_Var
  %lnfJV = ptrtoint i64* %lnfJU to i64
  %lnfJW = add i64 %lnfJV, -7
  store i64 %lnfJW, i64* %R1_Var
  %lnfJX = load i64*, i64** %Sp_Var
  %lnfJY = getelementptr inbounds i64, i64* %lnfJX, i32 2
  %lnfJZ = ptrtoint i64* %lnfJY to i64
  %lnfK0 = inttoptr i64 %lnfJZ to i64*
  store i64* %lnfK0, i64** %Sp_Var
  %lnfK1 = load i64*, i64** %Sp_Var
  %lnfK2 = getelementptr inbounds i64, i64* %lnfK1, i32 0
  %lnfK3 = bitcast i64* %lnfK2 to i64*
  %lnfK4 = load i64, i64* %lnfK3, !tbaa !2
  %lnfK5 = inttoptr i64 %lnfK4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfK6 = load i64*, i64** %Sp_Var
  %lnfK7 = load i64*, i64** %Hp_Var
  %lnfK8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfK5( i64* %Base_Arg, i64* %lnfK6, i64* %lnfK7, i64 %lnfK8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceYm:
  %lnfK9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfK9, !tbaa !5
  %lnfKa = load i64, i64* %R1_Var
  store i64 %lnfKa, i64* %R1_Var
  %lnfKb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfKc = load i64*, i64** %Sp_Var
  %lnfKd = load i64*, i64** %Hp_Var
  %lnfKe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfKb( i64* %Base_Arg, i64* %lnfKc, i64* %lnfKd, i64 %lnfKe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Kn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Kn_info$def to i8*)
define internal ghccc void @s7Kn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfKf:
  %ls7JO = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceYp
ceYp:
  %lnfKg = load i64*, i64** %Sp_Var
  %lnfKh = getelementptr inbounds i64, i64* %lnfKg, i32 -6
  %lnfKi = ptrtoint i64* %lnfKh to i64
  %lnfKj = icmp ult i64 %lnfKi, %SpLim_Arg
  %lnfKk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfKj, i1 0 )
  br i1 %lnfKk, label %ceYr, label %ceYs
ceYs:
  %lnfKm = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfKl = load i64*, i64** %Sp_Var
  %lnfKn = getelementptr inbounds i64, i64* %lnfKl, i32 -2
  store i64 %lnfKm, i64* %lnfKn, !tbaa !2
  %lnfKp = load i64, i64* %R1_Var
  %lnfKo = load i64*, i64** %Sp_Var
  %lnfKq = getelementptr inbounds i64, i64* %lnfKo, i32 -1
  store i64 %lnfKp, i64* %lnfKq, !tbaa !2
  %lnfKs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWN_info$def to i64
  %lnfKr = load i64*, i64** %Sp_Var
  %lnfKt = getelementptr inbounds i64, i64* %lnfKr, i32 -4
  store i64 %lnfKs, i64* %lnfKt, !tbaa !2
  %lnfKw = load i64, i64* %R1_Var
  %lnfKx = add i64 %lnfKw, 16
  %lnfKy = inttoptr i64 %lnfKx to i64*
  %lnfKz = load i64, i64* %lnfKy, !tbaa !4
  store i64 %lnfKz, i64* %ls7JO
  %lnfKC = load i64, i64* %R1_Var
  %lnfKD = add i64 %lnfKC, 24
  %lnfKE = inttoptr i64 %lnfKD to i64*
  %lnfKF = load i64, i64* %lnfKE, !tbaa !4
  store i64 %lnfKF, i64* %R1_Var
  %lnfKH = load i64, i64* %ls7JO
  %lnfKG = load i64*, i64** %Sp_Var
  %lnfKI = getelementptr inbounds i64, i64* %lnfKG, i32 -3
  store i64 %lnfKH, i64* %lnfKI, !tbaa !2
  %lnfKJ = load i64*, i64** %Sp_Var
  %lnfKK = getelementptr inbounds i64, i64* %lnfKJ, i32 -4
  %lnfKL = ptrtoint i64* %lnfKK to i64
  %lnfKM = inttoptr i64 %lnfKL to i64*
  store i64* %lnfKM, i64** %Sp_Var
  %lnfKN = load i64, i64* %R1_Var
  %lnfKO = and i64 %lnfKN, 7
  %lnfKP = icmp ne i64 %lnfKO, 0
  br i1 %lnfKP, label %ueYy, label %ceWO
ceWO:
  %lnfKR = load i64, i64* %R1_Var
  %lnfKS = inttoptr i64 %lnfKR to i64*
  %lnfKT = load i64, i64* %lnfKS, !tbaa !4
  %lnfKU = inttoptr i64 %lnfKT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfKV = load i64*, i64** %Sp_Var
  %lnfKW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfKU( i64* %Base_Arg, i64* %lnfKV, i64* %Hp_Arg, i64 %lnfKW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueYy:
  %lnfKX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfKY = load i64*, i64** %Sp_Var
  %lnfKZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfKX( i64* %Base_Arg, i64* %lnfKY, i64* %Hp_Arg, i64 %lnfKZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceYr:
  %lnfL0 = load i64, i64* %R1_Var
  store i64 %lnfL0, i64* %R1_Var
  %lnfL1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfL2 = bitcast i64* %lnfL1 to i64*
  %lnfL3 = load i64, i64* %lnfL2, !tbaa !5
  %lnfL4 = inttoptr i64 %lnfL3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfL5 = load i64*, i64** %Sp_Var
  %lnfL6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfL4( i64* %Base_Arg, i64* %lnfL5, i64* %Hp_Arg, i64 %lnfL6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceWN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWN_info$def to i8*)
define internal ghccc void @ceWN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfL7:
  %ls7Kp = alloca i64, i32 1
  %ls7Kq = alloca i64, i32 1
  %ls7Kr = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceWN
ceWN:
  %lnfL9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWS_info$def to i64
  %lnfL8 = load i64*, i64** %Sp_Var
  %lnfLa = getelementptr inbounds i64, i64* %lnfL8, i32 -2
  store i64 %lnfL9, i64* %lnfLa, !tbaa !2
  %lnfLd = load i64, i64* %R1_Var
  %lnfLe = add i64 %lnfLd, 7
  %lnfLf = inttoptr i64 %lnfLe to i64*
  %lnfLg = load i64, i64* %lnfLf, !tbaa !4
  store i64 %lnfLg, i64* %ls7Kp
  %lnfLj = load i64, i64* %R1_Var
  %lnfLk = add i64 %lnfLj, 15
  %lnfLl = inttoptr i64 %lnfLk to i64*
  %lnfLm = load i64, i64* %lnfLl, !tbaa !4
  store i64 %lnfLm, i64* %ls7Kq
  %lnfLp = load i64, i64* %R1_Var
  %lnfLq = add i64 %lnfLp, 23
  %lnfLr = inttoptr i64 %lnfLq to i64*
  %lnfLs = load i64, i64* %lnfLr, !tbaa !4
  store i64 %lnfLs, i64* %ls7Kr
  %lnfLt = load i64*, i64** %Sp_Var
  %lnfLu = getelementptr inbounds i64, i64* %lnfLt, i32 1
  %lnfLv = bitcast i64* %lnfLu to i64*
  %lnfLw = load i64, i64* %lnfLv, !tbaa !2
  store i64 %lnfLw, i64* %R1_Var
  %lnfLy = load i64, i64* %ls7Kr
  %lnfLx = load i64*, i64** %Sp_Var
  %lnfLz = getelementptr inbounds i64, i64* %lnfLx, i32 -1
  store i64 %lnfLy, i64* %lnfLz, !tbaa !2
  %lnfLB = load i64, i64* %ls7Kq
  %lnfLA = load i64*, i64** %Sp_Var
  %lnfLC = getelementptr inbounds i64, i64* %lnfLA, i32 0
  store i64 %lnfLB, i64* %lnfLC, !tbaa !2
  %lnfLE = load i64, i64* %ls7Kp
  %lnfLD = load i64*, i64** %Sp_Var
  %lnfLF = getelementptr inbounds i64, i64* %lnfLD, i32 1
  store i64 %lnfLE, i64* %lnfLF, !tbaa !2
  %lnfLG = load i64*, i64** %Sp_Var
  %lnfLH = getelementptr inbounds i64, i64* %lnfLG, i32 -2
  %lnfLI = ptrtoint i64* %lnfLH to i64
  %lnfLJ = inttoptr i64 %lnfLI to i64*
  store i64* %lnfLJ, i64** %Sp_Var
  %lnfLK = load i64, i64* %R1_Var
  %lnfLL = and i64 %lnfLK, 7
  %lnfLM = icmp ne i64 %lnfLL, 0
  br i1 %lnfLM, label %ueYx, label %ceWT
ceWT:
  %lnfLO = load i64, i64* %R1_Var
  %lnfLP = inttoptr i64 %lnfLO to i64*
  %lnfLQ = load i64, i64* %lnfLP, !tbaa !4
  %lnfLR = inttoptr i64 %lnfLQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfLS = load i64*, i64** %Sp_Var
  %lnfLT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfLR( i64* %Base_Arg, i64* %lnfLS, i64* %Hp_Arg, i64 %lnfLT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueYx:
  %lnfLU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfLV = load i64*, i64** %Sp_Var
  %lnfLW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfLU( i64* %Base_Arg, i64* %lnfLV, i64* %Hp_Arg, i64 %lnfLW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceWS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWS_info$def to i8*)
define internal ghccc void @ceWS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nfLX:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Kt = alloca i64, i32 1
  %ls7Ku = alloca i64, i32 1
  %ls7Kv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceWS
ceWS:
  %lnfLY = load i64*, i64** %Hp_Var
  %lnfLZ = getelementptr inbounds i64, i64* %lnfLY, i32 16
  %lnfM0 = ptrtoint i64* %lnfLZ to i64
  %lnfM1 = inttoptr i64 %lnfM0 to i64*
  store i64* %lnfM1, i64** %Hp_Var
  %lnfM2 = load i64*, i64** %Hp_Var
  %lnfM3 = ptrtoint i64* %lnfM2 to i64
  %lnfM4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfM5 = bitcast i64* %lnfM4 to i64*
  %lnfM6 = load i64, i64* %lnfM5, !tbaa !5
  %lnfM7 = icmp ugt i64 %lnfM3, %lnfM6
  %lnfM8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfM7, i1 0 )
  br i1 %lnfM8, label %ceYw, label %ceYv
ceYv:
  %lnfMb = load i64, i64* %R1_Var
  %lnfMc = add i64 %lnfMb, 7
  %lnfMd = inttoptr i64 %lnfMc to i64*
  %lnfMe = load i64, i64* %lnfMd, !tbaa !4
  store i64 %lnfMe, i64* %ls7Kt
  %lnfMh = load i64, i64* %R1_Var
  %lnfMi = add i64 %lnfMh, 15
  %lnfMj = inttoptr i64 %lnfMi to i64*
  %lnfMk = load i64, i64* %lnfMj, !tbaa !4
  store i64 %lnfMk, i64* %ls7Ku
  %lnfMn = load i64, i64* %R1_Var
  %lnfMo = add i64 %lnfMn, 23
  %lnfMp = inttoptr i64 %lnfMo to i64*
  %lnfMq = load i64, i64* %lnfMp, !tbaa !4
  store i64 %lnfMq, i64* %ls7Kv
  %lnfMs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KQ_info$def to i64
  %lnfMr = load i64*, i64** %Hp_Var
  %lnfMt = getelementptr inbounds i64, i64* %lnfMr, i32 -15
  store i64 %lnfMs, i64* %lnfMt, !tbaa !3
  %lnfMv = load i64, i64* %ls7Kv
  %lnfMu = load i64*, i64** %Hp_Var
  %lnfMw = getelementptr inbounds i64, i64* %lnfMu, i32 -13
  store i64 %lnfMv, i64* %lnfMw, !tbaa !3
  %lnfMy = load i64*, i64** %Sp_Var
  %lnfMz = getelementptr inbounds i64, i64* %lnfMy, i32 1
  %lnfMA = bitcast i64* %lnfMz to i64*
  %lnfMB = load i64, i64* %lnfMA, !tbaa !2
  %lnfMx = load i64*, i64** %Hp_Var
  %lnfMC = getelementptr inbounds i64, i64* %lnfMx, i32 -12
  store i64 %lnfMB, i64* %lnfMC, !tbaa !3
  %lnfME = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KJ_info$def to i64
  %lnfMD = load i64*, i64** %Hp_Var
  %lnfMF = getelementptr inbounds i64, i64* %lnfMD, i32 -11
  store i64 %lnfME, i64* %lnfMF, !tbaa !3
  %lnfMH = load i64, i64* %ls7Ku
  %lnfMG = load i64*, i64** %Hp_Var
  %lnfMI = getelementptr inbounds i64, i64* %lnfMG, i32 -9
  store i64 %lnfMH, i64* %lnfMI, !tbaa !3
  %lnfMK = load i64*, i64** %Sp_Var
  %lnfML = getelementptr inbounds i64, i64* %lnfMK, i32 2
  %lnfMM = bitcast i64* %lnfML to i64*
  %lnfMN = load i64, i64* %lnfMM, !tbaa !2
  %lnfMJ = load i64*, i64** %Hp_Var
  %lnfMO = getelementptr inbounds i64, i64* %lnfMJ, i32 -8
  store i64 %lnfMN, i64* %lnfMO, !tbaa !3
  %lnfMQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7KC_info$def to i64
  %lnfMP = load i64*, i64** %Hp_Var
  %lnfMR = getelementptr inbounds i64, i64* %lnfMP, i32 -7
  store i64 %lnfMQ, i64* %lnfMR, !tbaa !3
  %lnfMT = load i64, i64* %ls7Kt
  %lnfMS = load i64*, i64** %Hp_Var
  %lnfMU = getelementptr inbounds i64, i64* %lnfMS, i32 -5
  store i64 %lnfMT, i64* %lnfMU, !tbaa !3
  %lnfMW = load i64*, i64** %Sp_Var
  %lnfMX = getelementptr inbounds i64, i64* %lnfMW, i32 3
  %lnfMY = bitcast i64* %lnfMX to i64*
  %lnfMZ = load i64, i64* %lnfMY, !tbaa !2
  %lnfMV = load i64*, i64** %Hp_Var
  %lnfN0 = getelementptr inbounds i64, i64* %lnfMV, i32 -4
  store i64 %lnfMZ, i64* %lnfN0, !tbaa !3
  %lnfN2 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnfN1 = load i64*, i64** %Hp_Var
  %lnfN3 = getelementptr inbounds i64, i64* %lnfN1, i32 -3
  store i64 %lnfN2, i64* %lnfN3, !tbaa !3
  %lnfN5 = load i64*, i64** %Hp_Var
  %lnfN6 = getelementptr inbounds i64, i64* %lnfN5, i32 -7
  %lnfN7 = ptrtoint i64* %lnfN6 to i64
  %lnfN4 = load i64*, i64** %Hp_Var
  %lnfN8 = getelementptr inbounds i64, i64* %lnfN4, i32 -2
  store i64 %lnfN7, i64* %lnfN8, !tbaa !3
  %lnfNa = load i64*, i64** %Hp_Var
  %lnfNb = getelementptr inbounds i64, i64* %lnfNa, i32 -11
  %lnfNc = ptrtoint i64* %lnfNb to i64
  %lnfN9 = load i64*, i64** %Hp_Var
  %lnfNd = getelementptr inbounds i64, i64* %lnfN9, i32 -1
  store i64 %lnfNc, i64* %lnfNd, !tbaa !3
  %lnfNf = load i64*, i64** %Hp_Var
  %lnfNg = getelementptr inbounds i64, i64* %lnfNf, i32 -15
  %lnfNh = ptrtoint i64* %lnfNg to i64
  %lnfNe = load i64*, i64** %Hp_Var
  %lnfNi = getelementptr inbounds i64, i64* %lnfNe, i32 0
  store i64 %lnfNh, i64* %lnfNi, !tbaa !3
  %lnfNk = load i64*, i64** %Hp_Var
  %lnfNl = ptrtoint i64* %lnfNk to i64
  %lnfNm = add i64 %lnfNl, -23
  store i64 %lnfNm, i64* %R1_Var
  %lnfNn = load i64*, i64** %Sp_Var
  %lnfNo = getelementptr inbounds i64, i64* %lnfNn, i32 4
  %lnfNp = ptrtoint i64* %lnfNo to i64
  %lnfNq = inttoptr i64 %lnfNp to i64*
  store i64* %lnfNq, i64** %Sp_Var
  %lnfNr = load i64*, i64** %Sp_Var
  %lnfNs = getelementptr inbounds i64, i64* %lnfNr, i32 0
  %lnfNt = bitcast i64* %lnfNs to i64*
  %lnfNu = load i64, i64* %lnfNt, !tbaa !2
  %lnfNv = inttoptr i64 %lnfNu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfNw = load i64*, i64** %Sp_Var
  %lnfNx = load i64*, i64** %Hp_Var
  %lnfNy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfNv( i64* %Base_Arg, i64* %lnfNw, i64* %lnfNx, i64 %lnfNy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceYw:
  %lnfNz = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnfNz, !tbaa !5
  %lnfNA = load i64, i64* %R1_Var
  store i64 %lnfNA, i64* %R1_Var
  %lnfNB = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfNC = load i64*, i64** %Sp_Var
  %lnfND = load i64*, i64** %Hp_Var
  %lnfNE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfNB( i64* %Base_Arg, i64* %lnfNC, i64* %lnfND, i64 %lnfNE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Le_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Le_info$def to i8*)
define internal ghccc void @s7Le_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfNF:
  %ls7JW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceYN
ceYN:
  %lnfNG = load i64*, i64** %Sp_Var
  %lnfNH = getelementptr inbounds i64, i64* %lnfNG, i32 -4
  %lnfNI = ptrtoint i64* %lnfNH to i64
  %lnfNJ = icmp ult i64 %lnfNI, %SpLim_Arg
  %lnfNK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfNJ, i1 0 )
  br i1 %lnfNK, label %ceZ2, label %ceZ3
ceZ3:
  %lnfNM = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfNL = load i64*, i64** %Sp_Var
  %lnfNN = getelementptr inbounds i64, i64* %lnfNL, i32 -2
  store i64 %lnfNM, i64* %lnfNN, !tbaa !2
  %lnfNP = load i64, i64* %R1_Var
  %lnfNO = load i64*, i64** %Sp_Var
  %lnfNQ = getelementptr inbounds i64, i64* %lnfNO, i32 -1
  store i64 %lnfNP, i64* %lnfNQ, !tbaa !2
  %lnfNS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYK_info$def to i64
  %lnfNR = load i64*, i64** %Sp_Var
  %lnfNT = getelementptr inbounds i64, i64* %lnfNR, i32 -4
  store i64 %lnfNS, i64* %lnfNT, !tbaa !2
  %lnfNW = load i64, i64* %R1_Var
  %lnfNX = add i64 %lnfNW, 16
  %lnfNY = inttoptr i64 %lnfNX to i64*
  %lnfNZ = load i64, i64* %lnfNY, !tbaa !4
  store i64 %lnfNZ, i64* %ls7JW
  %lnfO2 = load i64, i64* %R1_Var
  %lnfO3 = add i64 %lnfO2, 24
  %lnfO4 = inttoptr i64 %lnfO3 to i64*
  %lnfO5 = load i64, i64* %lnfO4, !tbaa !4
  store i64 %lnfO5, i64* %R1_Var
  %lnfO7 = load i64, i64* %ls7JW
  %lnfO6 = load i64*, i64** %Sp_Var
  %lnfO8 = getelementptr inbounds i64, i64* %lnfO6, i32 -3
  store i64 %lnfO7, i64* %lnfO8, !tbaa !2
  %lnfO9 = load i64*, i64** %Sp_Var
  %lnfOa = getelementptr inbounds i64, i64* %lnfO9, i32 -4
  %lnfOb = ptrtoint i64* %lnfOa to i64
  %lnfOc = inttoptr i64 %lnfOb to i64*
  store i64* %lnfOc, i64** %Sp_Var
  %lnfOd = load i64, i64* %R1_Var
  %lnfOe = and i64 %lnfOd, 7
  %lnfOf = icmp ne i64 %lnfOe, 0
  br i1 %lnfOf, label %ueZ9, label %ceYL
ceYL:
  %lnfOh = load i64, i64* %R1_Var
  %lnfOi = inttoptr i64 %lnfOh to i64*
  %lnfOj = load i64, i64* %lnfOi, !tbaa !4
  %lnfOk = inttoptr i64 %lnfOj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfOl = load i64*, i64** %Sp_Var
  %lnfOm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfOk( i64* %Base_Arg, i64* %lnfOl, i64* %Hp_Arg, i64 %lnfOm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueZ9:
  %lnfOn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfOo = load i64*, i64** %Sp_Var
  %lnfOp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfOn( i64* %Base_Arg, i64* %lnfOo, i64* %Hp_Arg, i64 %lnfOp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZ2:
  %lnfOq = load i64, i64* %R1_Var
  store i64 %lnfOq, i64* %R1_Var
  %lnfOr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfOs = bitcast i64* %lnfOr to i64*
  %lnfOt = load i64, i64* %lnfOs, !tbaa !5
  %lnfOu = inttoptr i64 %lnfOt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfOv = load i64*, i64** %Sp_Var
  %lnfOw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfOu( i64* %Base_Arg, i64* %lnfOv, i64* %Hp_Arg, i64 %lnfOw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceYK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYK_info$def to i8*)
define internal ghccc void @ceYK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfOx:
  %ls7L9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceYK
ceYK:
  %lnfOy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYQ_info$def to i64
  %lnfOz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfOy, i64* %lnfOz, !tbaa !2
  %lnfOC = load i64, i64* %R1_Var
  %lnfOD = add i64 %lnfOC, 7
  %lnfOE = inttoptr i64 %lnfOD to double*
  %lnfOF = load double, double* %lnfOE, !tbaa !4
  store double %lnfOF, double* %ls7L9
  %lnfOG = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfOH = bitcast i64* %lnfOG to i64*
  %lnfOI = load i64, i64* %lnfOH, !tbaa !2
  store i64 %lnfOI, i64* %R1_Var
  %lnfOJ = load double, double* %ls7L9
  %lnfOK = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfOL = bitcast i64* %lnfOK to double*
  store double %lnfOJ, double* %lnfOL, !tbaa !2
  %lnfOM = load i64, i64* %R1_Var
  %lnfON = and i64 %lnfOM, 7
  %lnfOO = icmp ne i64 %lnfON, 0
  br i1 %lnfOO, label %ueZ8, label %ceYR
ceYR:
  %lnfOQ = load i64, i64* %R1_Var
  %lnfOR = inttoptr i64 %lnfOQ to i64*
  %lnfOS = load i64, i64* %lnfOR, !tbaa !4
  %lnfOT = inttoptr i64 %lnfOS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfOU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfOT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfOU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueZ8:
  %lnfOV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfOW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfOV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfOW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceYQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYQ_info$def to i8*)
define internal ghccc void @ceYQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfOX:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ld = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceYQ
ceYQ:
  %lnfOY = load i64*, i64** %Hp_Var
  %lnfOZ = getelementptr inbounds i64, i64* %lnfOY, i32 2
  %lnfP0 = ptrtoint i64* %lnfOZ to i64
  %lnfP1 = inttoptr i64 %lnfP0 to i64*
  store i64* %lnfP1, i64** %Hp_Var
  %lnfP2 = load i64*, i64** %Hp_Var
  %lnfP3 = ptrtoint i64* %lnfP2 to i64
  %lnfP4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfP5 = bitcast i64* %lnfP4 to i64*
  %lnfP6 = load i64, i64* %lnfP5, !tbaa !5
  %lnfP7 = icmp ugt i64 %lnfP3, %lnfP6
  %lnfP8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfP7, i1 0 )
  br i1 %lnfP8, label %ceZ7, label %ceZ6
ceZ6:
  %lnfP9 = load i64*, i64** %Sp_Var
  %lnfPa = getelementptr inbounds i64, i64* %lnfP9, i32 1
  %lnfPb = bitcast i64* %lnfPa to double*
  %lnfPc = load double, double* %lnfPb, !tbaa !2
  %lnfPf = load i64, i64* %R1_Var
  %lnfPg = add i64 %lnfPf, 7
  %lnfPh = inttoptr i64 %lnfPg to double*
  %lnfPi = load double, double* %lnfPh, !tbaa !4
  %lnfPj = fmul double %lnfPi, 0x3FE8189374BC6A7F
  %lnfPk = fadd double %lnfPc, %lnfPj
  store double %lnfPk, double* %ls7Ld
  %lnfPm = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfPl = load i64*, i64** %Hp_Var
  %lnfPn = getelementptr inbounds i64, i64* %lnfPl, i32 -1
  store i64 %lnfPm, i64* %lnfPn, !tbaa !3
  %lnfPp = load double, double* %ls7Ld
  %lnfPo = load i64*, i64** %Hp_Var
  %lnfPq = getelementptr inbounds i64, i64* %lnfPo, i32 0
  %lnfPr = bitcast i64* %lnfPq to double*
  store double %lnfPp, double* %lnfPr, !tbaa !3
  %lnfPt = load i64*, i64** %Hp_Var
  %lnfPu = ptrtoint i64* %lnfPt to i64
  %lnfPv = add i64 %lnfPu, -7
  store i64 %lnfPv, i64* %R1_Var
  %lnfPw = load i64*, i64** %Sp_Var
  %lnfPx = getelementptr inbounds i64, i64* %lnfPw, i32 2
  %lnfPy = ptrtoint i64* %lnfPx to i64
  %lnfPz = inttoptr i64 %lnfPy to i64*
  store i64* %lnfPz, i64** %Sp_Var
  %lnfPA = load i64*, i64** %Sp_Var
  %lnfPB = getelementptr inbounds i64, i64* %lnfPA, i32 0
  %lnfPC = bitcast i64* %lnfPB to i64*
  %lnfPD = load i64, i64* %lnfPC, !tbaa !2
  %lnfPE = inttoptr i64 %lnfPD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfPF = load i64*, i64** %Sp_Var
  %lnfPG = load i64*, i64** %Hp_Var
  %lnfPH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfPE( i64* %Base_Arg, i64* %lnfPF, i64* %lnfPG, i64 %lnfPH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZ7:
  %lnfPI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfPI, !tbaa !5
  %lnfPJ = load i64, i64* %R1_Var
  store i64 %lnfPJ, i64* %R1_Var
  %lnfPK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfPL = load i64*, i64** %Sp_Var
  %lnfPM = load i64*, i64** %Hp_Var
  %lnfPN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfPK( i64* %Base_Arg, i64* %lnfPL, i64* %lnfPM, i64 %lnfPN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7L7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7L7_info$def to i8*)
define internal ghccc void @s7L7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nfPO:
  %ls7JV = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceZh
ceZh:
  %lnfPP = load i64*, i64** %Sp_Var
  %lnfPQ = getelementptr inbounds i64, i64* %lnfPP, i32 -4
  %lnfPR = ptrtoint i64* %lnfPQ to i64
  %lnfPS = icmp ult i64 %lnfPR, %SpLim_Arg
  %lnfPT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfPS, i1 0 )
  br i1 %lnfPT, label %ceZw, label %ceZx
ceZx:
  %lnfPV = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfPU = load i64*, i64** %Sp_Var
  %lnfPW = getelementptr inbounds i64, i64* %lnfPU, i32 -2
  store i64 %lnfPV, i64* %lnfPW, !tbaa !2
  %lnfPY = load i64, i64* %R1_Var
  %lnfPX = load i64*, i64** %Sp_Var
  %lnfPZ = getelementptr inbounds i64, i64* %lnfPX, i32 -1
  store i64 %lnfPY, i64* %lnfPZ, !tbaa !2
  %lnfQ1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZe_info$def to i64
  %lnfQ0 = load i64*, i64** %Sp_Var
  %lnfQ2 = getelementptr inbounds i64, i64* %lnfQ0, i32 -4
  store i64 %lnfQ1, i64* %lnfQ2, !tbaa !2
  %lnfQ5 = load i64, i64* %R1_Var
  %lnfQ6 = add i64 %lnfQ5, 16
  %lnfQ7 = inttoptr i64 %lnfQ6 to i64*
  %lnfQ8 = load i64, i64* %lnfQ7, !tbaa !4
  store i64 %lnfQ8, i64* %ls7JV
  %lnfQb = load i64, i64* %R1_Var
  %lnfQc = add i64 %lnfQb, 24
  %lnfQd = inttoptr i64 %lnfQc to i64*
  %lnfQe = load i64, i64* %lnfQd, !tbaa !4
  store i64 %lnfQe, i64* %R1_Var
  %lnfQg = load i64, i64* %ls7JV
  %lnfQf = load i64*, i64** %Sp_Var
  %lnfQh = getelementptr inbounds i64, i64* %lnfQf, i32 -3
  store i64 %lnfQg, i64* %lnfQh, !tbaa !2
  %lnfQi = load i64*, i64** %Sp_Var
  %lnfQj = getelementptr inbounds i64, i64* %lnfQi, i32 -4
  %lnfQk = ptrtoint i64* %lnfQj to i64
  %lnfQl = inttoptr i64 %lnfQk to i64*
  store i64* %lnfQl, i64** %Sp_Var
  %lnfQm = load i64, i64* %R1_Var
  %lnfQn = and i64 %lnfQm, 7
  %lnfQo = icmp ne i64 %lnfQn, 0
  br i1 %lnfQo, label %ueZD, label %ceZf
ceZf:
  %lnfQq = load i64, i64* %R1_Var
  %lnfQr = inttoptr i64 %lnfQq to i64*
  %lnfQs = load i64, i64* %lnfQr, !tbaa !4
  %lnfQt = inttoptr i64 %lnfQs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfQu = load i64*, i64** %Sp_Var
  %lnfQv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfQt( i64* %Base_Arg, i64* %lnfQu, i64* %Hp_Arg, i64 %lnfQv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueZD:
  %lnfQw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfQx = load i64*, i64** %Sp_Var
  %lnfQy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfQw( i64* %Base_Arg, i64* %lnfQx, i64* %Hp_Arg, i64 %lnfQy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZw:
  %lnfQz = load i64, i64* %R1_Var
  store i64 %lnfQz, i64* %R1_Var
  %lnfQA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfQB = bitcast i64* %lnfQA to i64*
  %lnfQC = load i64, i64* %lnfQB, !tbaa !5
  %lnfQD = inttoptr i64 %lnfQC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfQE = load i64*, i64** %Sp_Var
  %lnfQF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfQD( i64* %Base_Arg, i64* %lnfQE, i64* %Hp_Arg, i64 %lnfQF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceZe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZe_info$def to i8*)
define internal ghccc void @ceZe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nfQG:
  %ls7L2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceZe
ceZe:
  %lnfQH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZk_info$def to i64
  %lnfQI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfQH, i64* %lnfQI, !tbaa !2
  %lnfQL = load i64, i64* %R1_Var
  %lnfQM = add i64 %lnfQL, 7
  %lnfQN = inttoptr i64 %lnfQM to double*
  %lnfQO = load double, double* %lnfQN, !tbaa !4
  store double %lnfQO, double* %ls7L2
  %lnfQP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfQQ = bitcast i64* %lnfQP to i64*
  %lnfQR = load i64, i64* %lnfQQ, !tbaa !2
  store i64 %lnfQR, i64* %R1_Var
  %lnfQS = load double, double* %ls7L2
  %lnfQT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfQU = bitcast i64* %lnfQT to double*
  store double %lnfQS, double* %lnfQU, !tbaa !2
  %lnfQV = load i64, i64* %R1_Var
  %lnfQW = and i64 %lnfQV, 7
  %lnfQX = icmp ne i64 %lnfQW, 0
  br i1 %lnfQX, label %ueZC, label %ceZl
ceZl:
  %lnfQZ = load i64, i64* %R1_Var
  %lnfR0 = inttoptr i64 %lnfQZ to i64*
  %lnfR1 = load i64, i64* %lnfR0, !tbaa !4
  %lnfR2 = inttoptr i64 %lnfR1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfR3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfR2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfR3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ueZC:
  %lnfR4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfR5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfR4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfR5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceZk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZk_info$def to i8*)
define internal ghccc void @ceZk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfR6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7L6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceZk
ceZk:
  %lnfR7 = load i64*, i64** %Hp_Var
  %lnfR8 = getelementptr inbounds i64, i64* %lnfR7, i32 2
  %lnfR9 = ptrtoint i64* %lnfR8 to i64
  %lnfRa = inttoptr i64 %lnfR9 to i64*
  store i64* %lnfRa, i64** %Hp_Var
  %lnfRb = load i64*, i64** %Hp_Var
  %lnfRc = ptrtoint i64* %lnfRb to i64
  %lnfRd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfRe = bitcast i64* %lnfRd to i64*
  %lnfRf = load i64, i64* %lnfRe, !tbaa !5
  %lnfRg = icmp ugt i64 %lnfRc, %lnfRf
  %lnfRh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfRg, i1 0 )
  br i1 %lnfRh, label %ceZB, label %ceZA
ceZA:
  %lnfRi = load i64*, i64** %Sp_Var
  %lnfRj = getelementptr inbounds i64, i64* %lnfRi, i32 1
  %lnfRk = bitcast i64* %lnfRj to double*
  %lnfRl = load double, double* %lnfRk, !tbaa !2
  %lnfRo = load i64, i64* %R1_Var
  %lnfRp = add i64 %lnfRo, 7
  %lnfRq = inttoptr i64 %lnfRp to double*
  %lnfRr = load double, double* %lnfRq, !tbaa !4
  %lnfRs = fmul double %lnfRr, 0x3FD71A9FBE76C8B4
  %lnfRt = fadd double %lnfRl, %lnfRs
  store double %lnfRt, double* %ls7L6
  %lnfRv = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfRu = load i64*, i64** %Hp_Var
  %lnfRw = getelementptr inbounds i64, i64* %lnfRu, i32 -1
  store i64 %lnfRv, i64* %lnfRw, !tbaa !3
  %lnfRy = load double, double* %ls7L6
  %lnfRx = load i64*, i64** %Hp_Var
  %lnfRz = getelementptr inbounds i64, i64* %lnfRx, i32 0
  %lnfRA = bitcast i64* %lnfRz to double*
  store double %lnfRy, double* %lnfRA, !tbaa !3
  %lnfRC = load i64*, i64** %Hp_Var
  %lnfRD = ptrtoint i64* %lnfRC to i64
  %lnfRE = add i64 %lnfRD, -7
  store i64 %lnfRE, i64* %R1_Var
  %lnfRF = load i64*, i64** %Sp_Var
  %lnfRG = getelementptr inbounds i64, i64* %lnfRF, i32 2
  %lnfRH = ptrtoint i64* %lnfRG to i64
  %lnfRI = inttoptr i64 %lnfRH to i64*
  store i64* %lnfRI, i64** %Sp_Var
  %lnfRJ = load i64*, i64** %Sp_Var
  %lnfRK = getelementptr inbounds i64, i64* %lnfRJ, i32 0
  %lnfRL = bitcast i64* %lnfRK to i64*
  %lnfRM = load i64, i64* %lnfRL, !tbaa !2
  %lnfRN = inttoptr i64 %lnfRM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfRO = load i64*, i64** %Sp_Var
  %lnfRP = load i64*, i64** %Hp_Var
  %lnfRQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfRN( i64* %Base_Arg, i64* %lnfRO, i64* %lnfRP, i64 %lnfRQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZB:
  %lnfRR = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfRR, !tbaa !5
  %lnfRS = load i64, i64* %R1_Var
  store i64 %lnfRS, i64* %R1_Var
  %lnfRT = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfRU = load i64*, i64** %Sp_Var
  %lnfRV = load i64*, i64** %Hp_Var
  %lnfRW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfRT( i64* %Base_Arg, i64* %lnfRU, i64* %lnfRV, i64 %lnfRW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7L0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7L0_info$def to i8*)
define internal ghccc void @s7L0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nfRX:
  %ls7K2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceZL
ceZL:
  %lnfRY = load i64*, i64** %Sp_Var
  %lnfRZ = getelementptr inbounds i64, i64* %lnfRY, i32 -4
  %lnfS0 = ptrtoint i64* %lnfRZ to i64
  %lnfS1 = icmp ult i64 %lnfS0, %SpLim_Arg
  %lnfS2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfS1, i1 0 )
  br i1 %lnfS2, label %ceZV, label %ceZW
ceZW:
  %lnfS4 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfS3 = load i64*, i64** %Sp_Var
  %lnfS5 = getelementptr inbounds i64, i64* %lnfS3, i32 -2
  store i64 %lnfS4, i64* %lnfS5, !tbaa !2
  %lnfS7 = load i64, i64* %R1_Var
  %lnfS6 = load i64*, i64** %Sp_Var
  %lnfS8 = getelementptr inbounds i64, i64* %lnfS6, i32 -1
  store i64 %lnfS7, i64* %lnfS8, !tbaa !2
  %lnfSa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZI_info$def to i64
  %lnfS9 = load i64*, i64** %Sp_Var
  %lnfSb = getelementptr inbounds i64, i64* %lnfS9, i32 -4
  store i64 %lnfSa, i64* %lnfSb, !tbaa !2
  %lnfSe = load i64, i64* %R1_Var
  %lnfSf = add i64 %lnfSe, 24
  %lnfSg = inttoptr i64 %lnfSf to double*
  %lnfSh = load double, double* %lnfSg, !tbaa !4
  store double %lnfSh, double* %ls7K2
  %lnfSk = load i64, i64* %R1_Var
  %lnfSl = add i64 %lnfSk, 16
  %lnfSm = inttoptr i64 %lnfSl to i64*
  %lnfSn = load i64, i64* %lnfSm, !tbaa !4
  store i64 %lnfSn, i64* %R1_Var
  %lnfSp = load double, double* %ls7K2
  %lnfSo = load i64*, i64** %Sp_Var
  %lnfSq = getelementptr inbounds i64, i64* %lnfSo, i32 -3
  %lnfSr = bitcast i64* %lnfSq to double*
  store double %lnfSp, double* %lnfSr, !tbaa !2
  %lnfSs = load i64*, i64** %Sp_Var
  %lnfSt = getelementptr inbounds i64, i64* %lnfSs, i32 -4
  %lnfSu = ptrtoint i64* %lnfSt to i64
  %lnfSv = inttoptr i64 %lnfSu to i64*
  store i64* %lnfSv, i64** %Sp_Var
  %lnfSw = load i64, i64* %R1_Var
  %lnfSx = and i64 %lnfSw, 7
  %lnfSy = icmp ne i64 %lnfSx, 0
  br i1 %lnfSy, label %uf00, label %ceZJ
ceZJ:
  %lnfSA = load i64, i64* %R1_Var
  %lnfSB = inttoptr i64 %lnfSA to i64*
  %lnfSC = load i64, i64* %lnfSB, !tbaa !4
  %lnfSD = inttoptr i64 %lnfSC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfSE = load i64*, i64** %Sp_Var
  %lnfSF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfSD( i64* %Base_Arg, i64* %lnfSE, i64* %Hp_Arg, i64 %lnfSF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf00:
  %lnfSG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfSH = load i64*, i64** %Sp_Var
  %lnfSI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfSG( i64* %Base_Arg, i64* %lnfSH, i64* %Hp_Arg, i64 %lnfSI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZV:
  %lnfSJ = load i64, i64* %R1_Var
  store i64 %lnfSJ, i64* %R1_Var
  %lnfSK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfSL = bitcast i64* %lnfSK to i64*
  %lnfSM = load i64, i64* %lnfSL, !tbaa !5
  %lnfSN = inttoptr i64 %lnfSM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfSO = load i64*, i64** %Sp_Var
  %lnfSP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfSN( i64* %Base_Arg, i64* %lnfSO, i64* %Hp_Arg, i64 %lnfSP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceZI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceZI_info$def to i8*)
define internal ghccc void @ceZI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nfSQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7KZ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceZI
ceZI:
  %lnfSR = load i64*, i64** %Hp_Var
  %lnfSS = getelementptr inbounds i64, i64* %lnfSR, i32 2
  %lnfST = ptrtoint i64* %lnfSS to i64
  %lnfSU = inttoptr i64 %lnfST to i64*
  store i64* %lnfSU, i64** %Hp_Var
  %lnfSV = load i64*, i64** %Hp_Var
  %lnfSW = ptrtoint i64* %lnfSV to i64
  %lnfSX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfSY = bitcast i64* %lnfSX to i64*
  %lnfSZ = load i64, i64* %lnfSY, !tbaa !5
  %lnfT0 = icmp ugt i64 %lnfSW, %lnfSZ
  %lnfT1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfT0, i1 0 )
  br i1 %lnfT1, label %ceZZ, label %ceZY
ceZY:
  %lnfT4 = load i64, i64* %R1_Var
  %lnfT5 = add i64 %lnfT4, 7
  %lnfT6 = inttoptr i64 %lnfT5 to double*
  %lnfT7 = load double, double* %lnfT6, !tbaa !4
  %lnfT8 = load i64*, i64** %Sp_Var
  %lnfT9 = getelementptr inbounds i64, i64* %lnfT8, i32 1
  %lnfTa = bitcast i64* %lnfT9 to double*
  %lnfTb = load double, double* %lnfTa, !tbaa !2
  %lnfTc = fmul double %lnfTb, 0x3FB3F7CED916872B
  %lnfTd = fadd double %lnfT7, %lnfTc
  store double %lnfTd, double* %ls7KZ
  %lnfTf = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfTe = load i64*, i64** %Hp_Var
  %lnfTg = getelementptr inbounds i64, i64* %lnfTe, i32 -1
  store i64 %lnfTf, i64* %lnfTg, !tbaa !3
  %lnfTi = load double, double* %ls7KZ
  %lnfTh = load i64*, i64** %Hp_Var
  %lnfTj = getelementptr inbounds i64, i64* %lnfTh, i32 0
  %lnfTk = bitcast i64* %lnfTj to double*
  store double %lnfTi, double* %lnfTk, !tbaa !3
  %lnfTm = load i64*, i64** %Hp_Var
  %lnfTn = ptrtoint i64* %lnfTm to i64
  %lnfTo = add i64 %lnfTn, -7
  store i64 %lnfTo, i64* %R1_Var
  %lnfTp = load i64*, i64** %Sp_Var
  %lnfTq = getelementptr inbounds i64, i64* %lnfTp, i32 2
  %lnfTr = ptrtoint i64* %lnfTq to i64
  %lnfTs = inttoptr i64 %lnfTr to i64*
  store i64* %lnfTs, i64** %Sp_Var
  %lnfTt = load i64*, i64** %Sp_Var
  %lnfTu = getelementptr inbounds i64, i64* %lnfTt, i32 0
  %lnfTv = bitcast i64* %lnfTu to i64*
  %lnfTw = load i64, i64* %lnfTv, !tbaa !2
  %lnfTx = inttoptr i64 %lnfTw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfTy = load i64*, i64** %Sp_Var
  %lnfTz = load i64*, i64** %Hp_Var
  %lnfTA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfTx( i64* %Base_Arg, i64* %lnfTy, i64* %lnfTz, i64 %lnfTA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ceZZ:
  %lnfTB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfTB, !tbaa !5
  %lnfTC = load i64, i64* %R1_Var
  store i64 %lnfTC, i64* %R1_Var
  %lnfTD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfTE = load i64*, i64** %Sp_Var
  %lnfTF = load i64*, i64** %Hp_Var
  %lnfTG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfTD( i64* %Base_Arg, i64* %lnfTE, i64* %lnfTF, i64 %lnfTG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7LN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7LN_info$def to i8*)
define internal ghccc void @s7LN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nfTH:
  %ls7JW = alloca i64, i32 1
  %ls7Lo = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf0j
cf0j:
  %lnfTI = load i64*, i64** %Sp_Var
  %lnfTJ = getelementptr inbounds i64, i64* %lnfTI, i32 -5
  %lnfTK = ptrtoint i64* %lnfTJ to i64
  %lnfTL = icmp ult i64 %lnfTK, %SpLim_Arg
  %lnfTM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfTL, i1 0 )
  br i1 %lnfTM, label %cf0D, label %cf0E
cf0E:
  %lnfTO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfTN = load i64*, i64** %Sp_Var
  %lnfTP = getelementptr inbounds i64, i64* %lnfTN, i32 -2
  store i64 %lnfTO, i64* %lnfTP, !tbaa !2
  %lnfTR = load i64, i64* %R1_Var
  %lnfTQ = load i64*, i64** %Sp_Var
  %lnfTS = getelementptr inbounds i64, i64* %lnfTQ, i32 -1
  store i64 %lnfTR, i64* %lnfTS, !tbaa !2
  %lnfTU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0g_info$def to i64
  %lnfTT = load i64*, i64** %Sp_Var
  %lnfTV = getelementptr inbounds i64, i64* %lnfTT, i32 -5
  store i64 %lnfTU, i64* %lnfTV, !tbaa !2
  %lnfTY = load i64, i64* %R1_Var
  %lnfTZ = add i64 %lnfTY, 16
  %lnfU0 = inttoptr i64 %lnfTZ to i64*
  %lnfU1 = load i64, i64* %lnfU0, !tbaa !4
  store i64 %lnfU1, i64* %ls7JW
  %lnfU4 = load i64, i64* %R1_Var
  %lnfU5 = add i64 %lnfU4, 24
  %lnfU6 = inttoptr i64 %lnfU5 to i64*
  %lnfU7 = load i64, i64* %lnfU6, !tbaa !4
  store i64 %lnfU7, i64* %ls7Lo
  %lnfUa = load i64, i64* %R1_Var
  %lnfUb = add i64 %lnfUa, 32
  %lnfUc = inttoptr i64 %lnfUb to i64*
  %lnfUd = load i64, i64* %lnfUc, !tbaa !4
  store i64 %lnfUd, i64* %R1_Var
  %lnfUf = load i64, i64* %ls7JW
  %lnfUe = load i64*, i64** %Sp_Var
  %lnfUg = getelementptr inbounds i64, i64* %lnfUe, i32 -4
  store i64 %lnfUf, i64* %lnfUg, !tbaa !2
  %lnfUi = load i64, i64* %ls7Lo
  %lnfUh = load i64*, i64** %Sp_Var
  %lnfUj = getelementptr inbounds i64, i64* %lnfUh, i32 -3
  store i64 %lnfUi, i64* %lnfUj, !tbaa !2
  %lnfUk = load i64*, i64** %Sp_Var
  %lnfUl = getelementptr inbounds i64, i64* %lnfUk, i32 -5
  %lnfUm = ptrtoint i64* %lnfUl to i64
  %lnfUn = inttoptr i64 %lnfUm to i64*
  store i64* %lnfUn, i64** %Sp_Var
  %lnfUo = load i64, i64* %R1_Var
  %lnfUp = and i64 %lnfUo, 7
  %lnfUq = icmp ne i64 %lnfUp, 0
  br i1 %lnfUq, label %uf0L, label %cf0h
cf0h:
  %lnfUs = load i64, i64* %R1_Var
  %lnfUt = inttoptr i64 %lnfUs to i64*
  %lnfUu = load i64, i64* %lnfUt, !tbaa !4
  %lnfUv = inttoptr i64 %lnfUu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfUw = load i64*, i64** %Sp_Var
  %lnfUx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfUv( i64* %Base_Arg, i64* %lnfUw, i64* %Hp_Arg, i64 %lnfUx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf0L:
  %lnfUy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0g_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfUz = load i64*, i64** %Sp_Var
  %lnfUA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfUy( i64* %Base_Arg, i64* %lnfUz, i64* %Hp_Arg, i64 %lnfUA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf0D:
  %lnfUB = load i64, i64* %R1_Var
  store i64 %lnfUB, i64* %R1_Var
  %lnfUC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfUD = bitcast i64* %lnfUC to i64*
  %lnfUE = load i64, i64* %lnfUD, !tbaa !5
  %lnfUF = inttoptr i64 %lnfUE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfUG = load i64*, i64** %Sp_Var
  %lnfUH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfUF( i64* %Base_Arg, i64* %lnfUG, i64* %Hp_Arg, i64 %lnfUH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0g_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0g_info$def to i8*)
define internal ghccc void @cf0g_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nfUI:
  %ls7LG = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf0g
cf0g:
  %lnfUJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0m_info$def to i64
  %lnfUK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfUJ, i64* %lnfUK, !tbaa !2
  %lnfUN = load i64, i64* %R1_Var
  %lnfUO = add i64 %lnfUN, 7
  %lnfUP = inttoptr i64 %lnfUO to double*
  %lnfUQ = load double, double* %lnfUP, !tbaa !4
  store double %lnfUQ, double* %ls7LG
  %lnfUR = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnfUS = bitcast i64* %lnfUR to i64*
  %lnfUT = load i64, i64* %lnfUS, !tbaa !2
  store i64 %lnfUT, i64* %R1_Var
  %lnfUU = load double, double* %ls7LG
  %lnfUV = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnfUW = bitcast i64* %lnfUV to double*
  store double %lnfUU, double* %lnfUW, !tbaa !2
  %lnfUX = load i64, i64* %R1_Var
  %lnfUY = and i64 %lnfUX, 7
  %lnfUZ = icmp ne i64 %lnfUY, 0
  br i1 %lnfUZ, label %uf0K, label %cf0n
cf0n:
  %lnfV1 = load i64, i64* %R1_Var
  %lnfV2 = inttoptr i64 %lnfV1 to i64*
  %lnfV3 = load i64, i64* %lnfV2, !tbaa !4
  %lnfV4 = inttoptr i64 %lnfV3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfV5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfV4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfV5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf0K:
  %lnfV6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0m_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfV7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfV6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfV7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0m_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0m_info$def to i8*)
define internal ghccc void @cf0m_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nfV8:
  %ls7LI = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf0m
cf0m:
  %lnfV9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0r_info$def to i64
  %lnfVa = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfV9, i64* %lnfVa, !tbaa !2
  %lnfVd = load i64, i64* %R1_Var
  %lnfVe = add i64 %lnfVd, 7
  %lnfVf = inttoptr i64 %lnfVe to double*
  %lnfVg = load double, double* %lnfVf, !tbaa !4
  store double %lnfVg, double* %ls7LI
  %lnfVh = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfVi = bitcast i64* %lnfVh to i64*
  %lnfVj = load i64, i64* %lnfVi, !tbaa !2
  store i64 %lnfVj, i64* %R1_Var
  %lnfVk = load double, double* %ls7LI
  %lnfVl = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfVm = bitcast i64* %lnfVl to double*
  store double %lnfVk, double* %lnfVm, !tbaa !2
  %lnfVn = load i64, i64* %R1_Var
  %lnfVo = and i64 %lnfVn, 7
  %lnfVp = icmp ne i64 %lnfVo, 0
  br i1 %lnfVp, label %uf0M, label %cf0s
cf0s:
  %lnfVr = load i64, i64* %R1_Var
  %lnfVs = inttoptr i64 %lnfVr to i64*
  %lnfVt = load i64, i64* %lnfVs, !tbaa !4
  %lnfVu = inttoptr i64 %lnfVt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfVv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfVu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfVv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf0M:
  %lnfVw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0r_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfVx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfVw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfVx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0r_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0r_info$def to i8*)
define internal ghccc void @cf0r_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nfVy:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7LM = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf0r
cf0r:
  %lnfVz = load i64*, i64** %Hp_Var
  %lnfVA = getelementptr inbounds i64, i64* %lnfVz, i32 2
  %lnfVB = ptrtoint i64* %lnfVA to i64
  %lnfVC = inttoptr i64 %lnfVB to i64*
  store i64* %lnfVC, i64** %Hp_Var
  %lnfVD = load i64*, i64** %Hp_Var
  %lnfVE = ptrtoint i64* %lnfVD to i64
  %lnfVF = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfVG = bitcast i64* %lnfVF to i64*
  %lnfVH = load i64, i64* %lnfVG, !tbaa !5
  %lnfVI = icmp ugt i64 %lnfVE, %lnfVH
  %lnfVJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfVI, i1 0 )
  br i1 %lnfVJ, label %cf0J, label %cf0I
cf0I:
  %lnfVK = load i64*, i64** %Sp_Var
  %lnfVL = getelementptr inbounds i64, i64* %lnfVK, i32 2
  %lnfVM = bitcast i64* %lnfVL to double*
  %lnfVN = load double, double* %lnfVM, !tbaa !2
  %lnfVO = load i64*, i64** %Sp_Var
  %lnfVP = getelementptr inbounds i64, i64* %lnfVO, i32 1
  %lnfVQ = bitcast i64* %lnfVP to double*
  %lnfVR = load double, double* %lnfVQ, !tbaa !2
  %lnfVU = load i64, i64* %R1_Var
  %lnfVV = add i64 %lnfVU, 7
  %lnfVW = inttoptr i64 %lnfVV to double*
  %lnfVX = load double, double* %lnfVW, !tbaa !4
  %lnfVY = fmul double %lnfVR, %lnfVX
  %lnfVZ = fadd double %lnfVN, %lnfVY
  store double %lnfVZ, double* %ls7LM
  %lnfW1 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfW0 = load i64*, i64** %Hp_Var
  %lnfW2 = getelementptr inbounds i64, i64* %lnfW0, i32 -1
  store i64 %lnfW1, i64* %lnfW2, !tbaa !3
  %lnfW4 = load double, double* %ls7LM
  %lnfW3 = load i64*, i64** %Hp_Var
  %lnfW5 = getelementptr inbounds i64, i64* %lnfW3, i32 0
  %lnfW6 = bitcast i64* %lnfW5 to double*
  store double %lnfW4, double* %lnfW6, !tbaa !3
  %lnfW8 = load i64*, i64** %Hp_Var
  %lnfW9 = ptrtoint i64* %lnfW8 to i64
  %lnfWa = add i64 %lnfW9, -7
  store i64 %lnfWa, i64* %R1_Var
  %lnfWb = load i64*, i64** %Sp_Var
  %lnfWc = getelementptr inbounds i64, i64* %lnfWb, i32 3
  %lnfWd = ptrtoint i64* %lnfWc to i64
  %lnfWe = inttoptr i64 %lnfWd to i64*
  store i64* %lnfWe, i64** %Sp_Var
  %lnfWf = load i64*, i64** %Sp_Var
  %lnfWg = getelementptr inbounds i64, i64* %lnfWf, i32 0
  %lnfWh = bitcast i64* %lnfWg to i64*
  %lnfWi = load i64, i64* %lnfWh, !tbaa !2
  %lnfWj = inttoptr i64 %lnfWi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfWk = load i64*, i64** %Sp_Var
  %lnfWl = load i64*, i64** %Hp_Var
  %lnfWm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfWj( i64* %Base_Arg, i64* %lnfWk, i64* %lnfWl, i64 %lnfWm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf0J:
  %lnfWn = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfWn, !tbaa !5
  %lnfWo = load i64, i64* %R1_Var
  store i64 %lnfWo, i64* %R1_Var
  %lnfWp = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfWq = load i64*, i64** %Sp_Var
  %lnfWr = load i64*, i64** %Hp_Var
  %lnfWs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfWp( i64* %Base_Arg, i64* %lnfWq, i64* %lnfWr, i64 %lnfWs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7LE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7LE_info$def to i8*)
define internal ghccc void @s7LE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nfWt:
  %ls7JV = alloca i64, i32 1
  %ls7Ln = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf0U
cf0U:
  %lnfWu = load i64*, i64** %Sp_Var
  %lnfWv = getelementptr inbounds i64, i64* %lnfWu, i32 -5
  %lnfWw = ptrtoint i64* %lnfWv to i64
  %lnfWx = icmp ult i64 %lnfWw, %SpLim_Arg
  %lnfWy = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfWx, i1 0 )
  br i1 %lnfWy, label %cf1e, label %cf1f
cf1f:
  %lnfWA = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfWz = load i64*, i64** %Sp_Var
  %lnfWB = getelementptr inbounds i64, i64* %lnfWz, i32 -2
  store i64 %lnfWA, i64* %lnfWB, !tbaa !2
  %lnfWD = load i64, i64* %R1_Var
  %lnfWC = load i64*, i64** %Sp_Var
  %lnfWE = getelementptr inbounds i64, i64* %lnfWC, i32 -1
  store i64 %lnfWD, i64* %lnfWE, !tbaa !2
  %lnfWG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0R_info$def to i64
  %lnfWF = load i64*, i64** %Sp_Var
  %lnfWH = getelementptr inbounds i64, i64* %lnfWF, i32 -5
  store i64 %lnfWG, i64* %lnfWH, !tbaa !2
  %lnfWK = load i64, i64* %R1_Var
  %lnfWL = add i64 %lnfWK, 16
  %lnfWM = inttoptr i64 %lnfWL to i64*
  %lnfWN = load i64, i64* %lnfWM, !tbaa !4
  store i64 %lnfWN, i64* %ls7JV
  %lnfWQ = load i64, i64* %R1_Var
  %lnfWR = add i64 %lnfWQ, 24
  %lnfWS = inttoptr i64 %lnfWR to i64*
  %lnfWT = load i64, i64* %lnfWS, !tbaa !4
  store i64 %lnfWT, i64* %ls7Ln
  %lnfWW = load i64, i64* %R1_Var
  %lnfWX = add i64 %lnfWW, 32
  %lnfWY = inttoptr i64 %lnfWX to i64*
  %lnfWZ = load i64, i64* %lnfWY, !tbaa !4
  store i64 %lnfWZ, i64* %R1_Var
  %lnfX1 = load i64, i64* %ls7JV
  %lnfX0 = load i64*, i64** %Sp_Var
  %lnfX2 = getelementptr inbounds i64, i64* %lnfX0, i32 -4
  store i64 %lnfX1, i64* %lnfX2, !tbaa !2
  %lnfX4 = load i64, i64* %ls7Ln
  %lnfX3 = load i64*, i64** %Sp_Var
  %lnfX5 = getelementptr inbounds i64, i64* %lnfX3, i32 -3
  store i64 %lnfX4, i64* %lnfX5, !tbaa !2
  %lnfX6 = load i64*, i64** %Sp_Var
  %lnfX7 = getelementptr inbounds i64, i64* %lnfX6, i32 -5
  %lnfX8 = ptrtoint i64* %lnfX7 to i64
  %lnfX9 = inttoptr i64 %lnfX8 to i64*
  store i64* %lnfX9, i64** %Sp_Var
  %lnfXa = load i64, i64* %R1_Var
  %lnfXb = and i64 %lnfXa, 7
  %lnfXc = icmp ne i64 %lnfXb, 0
  br i1 %lnfXc, label %uf1m, label %cf0S
cf0S:
  %lnfXe = load i64, i64* %R1_Var
  %lnfXf = inttoptr i64 %lnfXe to i64*
  %lnfXg = load i64, i64* %lnfXf, !tbaa !4
  %lnfXh = inttoptr i64 %lnfXg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfXi = load i64*, i64** %Sp_Var
  %lnfXj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfXh( i64* %Base_Arg, i64* %lnfXi, i64* %Hp_Arg, i64 %lnfXj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf1m:
  %lnfXk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0R_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfXl = load i64*, i64** %Sp_Var
  %lnfXm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfXk( i64* %Base_Arg, i64* %lnfXl, i64* %Hp_Arg, i64 %lnfXm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf1e:
  %lnfXn = load i64, i64* %R1_Var
  store i64 %lnfXn, i64* %R1_Var
  %lnfXo = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnfXp = bitcast i64* %lnfXo to i64*
  %lnfXq = load i64, i64* %lnfXp, !tbaa !5
  %lnfXr = inttoptr i64 %lnfXq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfXs = load i64*, i64** %Sp_Var
  %lnfXt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfXr( i64* %Base_Arg, i64* %lnfXs, i64* %Hp_Arg, i64 %lnfXt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0R_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0R_info$def to i8*)
define internal ghccc void @cf0R_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nfXu:
  %ls7Lx = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf0R
cf0R:
  %lnfXv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0X_info$def to i64
  %lnfXw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfXv, i64* %lnfXw, !tbaa !2
  %lnfXz = load i64, i64* %R1_Var
  %lnfXA = add i64 %lnfXz, 7
  %lnfXB = inttoptr i64 %lnfXA to double*
  %lnfXC = load double, double* %lnfXB, !tbaa !4
  store double %lnfXC, double* %ls7Lx
  %lnfXD = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnfXE = bitcast i64* %lnfXD to i64*
  %lnfXF = load i64, i64* %lnfXE, !tbaa !2
  store i64 %lnfXF, i64* %R1_Var
  %lnfXG = load double, double* %ls7Lx
  %lnfXH = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnfXI = bitcast i64* %lnfXH to double*
  store double %lnfXG, double* %lnfXI, !tbaa !2
  %lnfXJ = load i64, i64* %R1_Var
  %lnfXK = and i64 %lnfXJ, 7
  %lnfXL = icmp ne i64 %lnfXK, 0
  br i1 %lnfXL, label %uf1l, label %cf0Y
cf0Y:
  %lnfXN = load i64, i64* %R1_Var
  %lnfXO = inttoptr i64 %lnfXN to i64*
  %lnfXP = load i64, i64* %lnfXO, !tbaa !4
  %lnfXQ = inttoptr i64 %lnfXP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfXR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfXQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfXR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf1l:
  %lnfXS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0X_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfXT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfXS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfXT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0X_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0X_info$def to i8*)
define internal ghccc void @cf0X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nfXU:
  %ls7Lz = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf0X
cf0X:
  %lnfXV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf12_info$def to i64
  %lnfXW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnfXV, i64* %lnfXW, !tbaa !2
  %lnfXZ = load i64, i64* %R1_Var
  %lnfY0 = add i64 %lnfXZ, 7
  %lnfY1 = inttoptr i64 %lnfY0 to double*
  %lnfY2 = load double, double* %lnfY1, !tbaa !4
  store double %lnfY2, double* %ls7Lz
  %lnfY3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfY4 = bitcast i64* %lnfY3 to i64*
  %lnfY5 = load i64, i64* %lnfY4, !tbaa !2
  store i64 %lnfY5, i64* %R1_Var
  %lnfY6 = load double, double* %ls7Lz
  %lnfY7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnfY8 = bitcast i64* %lnfY7 to double*
  store double %lnfY6, double* %lnfY8, !tbaa !2
  %lnfY9 = load i64, i64* %R1_Var
  %lnfYa = and i64 %lnfY9, 7
  %lnfYb = icmp ne i64 %lnfYa, 0
  br i1 %lnfYb, label %uf1n, label %cf13
cf13:
  %lnfYd = load i64, i64* %R1_Var
  %lnfYe = inttoptr i64 %lnfYd to i64*
  %lnfYf = load i64, i64* %lnfYe, !tbaa !4
  %lnfYg = inttoptr i64 %lnfYf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfYh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfYg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfYh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf1n:
  %lnfYi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf12_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfYj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfYi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnfYj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf12_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf12_info$def to i8*)
define internal ghccc void @cf12_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nfYk:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7LD = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf12
cf12:
  %lnfYl = load i64*, i64** %Hp_Var
  %lnfYm = getelementptr inbounds i64, i64* %lnfYl, i32 2
  %lnfYn = ptrtoint i64* %lnfYm to i64
  %lnfYo = inttoptr i64 %lnfYn to i64*
  store i64* %lnfYo, i64** %Hp_Var
  %lnfYp = load i64*, i64** %Hp_Var
  %lnfYq = ptrtoint i64* %lnfYp to i64
  %lnfYr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnfYs = bitcast i64* %lnfYr to i64*
  %lnfYt = load i64, i64* %lnfYs, !tbaa !5
  %lnfYu = icmp ugt i64 %lnfYq, %lnfYt
  %lnfYv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfYu, i1 0 )
  br i1 %lnfYv, label %cf1k, label %cf1j
cf1j:
  %lnfYw = load i64*, i64** %Sp_Var
  %lnfYx = getelementptr inbounds i64, i64* %lnfYw, i32 2
  %lnfYy = bitcast i64* %lnfYx to double*
  %lnfYz = load double, double* %lnfYy, !tbaa !2
  %lnfYA = load i64*, i64** %Sp_Var
  %lnfYB = getelementptr inbounds i64, i64* %lnfYA, i32 1
  %lnfYC = bitcast i64* %lnfYB to double*
  %lnfYD = load double, double* %lnfYC, !tbaa !2
  %lnfYG = load i64, i64* %R1_Var
  %lnfYH = add i64 %lnfYG, 7
  %lnfYI = inttoptr i64 %lnfYH to double*
  %lnfYJ = load double, double* %lnfYI, !tbaa !4
  %lnfYK = fmul double %lnfYD, %lnfYJ
  %lnfYL = fadd double %lnfYz, %lnfYK
  store double %lnfYL, double* %ls7LD
  %lnfYN = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnfYM = load i64*, i64** %Hp_Var
  %lnfYO = getelementptr inbounds i64, i64* %lnfYM, i32 -1
  store i64 %lnfYN, i64* %lnfYO, !tbaa !3
  %lnfYQ = load double, double* %ls7LD
  %lnfYP = load i64*, i64** %Hp_Var
  %lnfYR = getelementptr inbounds i64, i64* %lnfYP, i32 0
  %lnfYS = bitcast i64* %lnfYR to double*
  store double %lnfYQ, double* %lnfYS, !tbaa !3
  %lnfYU = load i64*, i64** %Hp_Var
  %lnfYV = ptrtoint i64* %lnfYU to i64
  %lnfYW = add i64 %lnfYV, -7
  store i64 %lnfYW, i64* %R1_Var
  %lnfYX = load i64*, i64** %Sp_Var
  %lnfYY = getelementptr inbounds i64, i64* %lnfYX, i32 3
  %lnfYZ = ptrtoint i64* %lnfYY to i64
  %lnfZ0 = inttoptr i64 %lnfYZ to i64*
  store i64* %lnfZ0, i64** %Sp_Var
  %lnfZ1 = load i64*, i64** %Sp_Var
  %lnfZ2 = getelementptr inbounds i64, i64* %lnfZ1, i32 0
  %lnfZ3 = bitcast i64* %lnfZ2 to i64*
  %lnfZ4 = load i64, i64* %lnfZ3, !tbaa !2
  %lnfZ5 = inttoptr i64 %lnfZ4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfZ6 = load i64*, i64** %Sp_Var
  %lnfZ7 = load i64*, i64** %Hp_Var
  %lnfZ8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfZ5( i64* %Base_Arg, i64* %lnfZ6, i64* %lnfZ7, i64 %lnfZ8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf1k:
  %lnfZ9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnfZ9, !tbaa !5
  %lnfZa = load i64, i64* %R1_Var
  store i64 %lnfZa, i64* %R1_Var
  %lnfZb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnfZc = load i64*, i64** %Sp_Var
  %lnfZd = load i64*, i64** %Hp_Var
  %lnfZe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnfZb( i64* %Base_Arg, i64* %lnfZc, i64* %lnfZd, i64 %lnfZe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Lv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Lv_info$def to i8*)
define internal ghccc void @s7Lv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
nfZf:
  %ls7Lm = alloca i64, i32 1
  %ls7K2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf1v
cf1v:
  %lnfZg = load i64*, i64** %Sp_Var
  %lnfZh = getelementptr inbounds i64, i64* %lnfZg, i32 -5
  %lnfZi = ptrtoint i64* %lnfZh to i64
  %lnfZj = icmp ult i64 %lnfZi, %SpLim_Arg
  %lnfZk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnfZj, i1 0 )
  br i1 %lnfZk, label %cf1K, label %cf1L
cf1L:
  %lnfZm = ptrtoint i8* @stg_upd_frame_info to i64
  %lnfZl = load i64*, i64** %Sp_Var
  %lnfZn = getelementptr inbounds i64, i64* %lnfZl, i32 -2
  store i64 %lnfZm, i64* %lnfZn, !tbaa !2
  %lnfZp = load i64, i64* %R1_Var
  %lnfZo = load i64*, i64** %Sp_Var
  %lnfZq = getelementptr inbounds i64, i64* %lnfZo, i32 -1
  store i64 %lnfZp, i64* %lnfZq, !tbaa !2
  %lnfZs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1s_info$def to i64
  %lnfZr = load i64*, i64** %Sp_Var
  %lnfZt = getelementptr inbounds i64, i64* %lnfZr, i32 -5
  store i64 %lnfZs, i64* %lnfZt, !tbaa !2
  %lnfZw = load i64, i64* %R1_Var
  %lnfZx = add i64 %lnfZw, 16
  %lnfZy = inttoptr i64 %lnfZx to i64*
  %lnfZz = load i64, i64* %lnfZy, !tbaa !4
  store i64 %lnfZz, i64* %ls7Lm
  %lnfZC = load i64, i64* %R1_Var
  %lnfZD = add i64 %lnfZC, 32
  %lnfZE = inttoptr i64 %lnfZD to double*
  %lnfZF = load double, double* %lnfZE, !tbaa !4
  store double %lnfZF, double* %ls7K2
  %lnfZI = load i64, i64* %R1_Var
  %lnfZJ = add i64 %lnfZI, 24
  %lnfZK = inttoptr i64 %lnfZJ to i64*
  %lnfZL = load i64, i64* %lnfZK, !tbaa !4
  store i64 %lnfZL, i64* %R1_Var
  %lnfZN = load double, double* %ls7K2
  %lnfZM = load i64*, i64** %Sp_Var
  %lnfZO = getelementptr inbounds i64, i64* %lnfZM, i32 -4
  %lnfZP = bitcast i64* %lnfZO to double*
  store double %lnfZN, double* %lnfZP, !tbaa !2
  %lnfZR = load i64, i64* %ls7Lm
  %lnfZQ = load i64*, i64** %Sp_Var
  %lnfZS = getelementptr inbounds i64, i64* %lnfZQ, i32 -3
  store i64 %lnfZR, i64* %lnfZS, !tbaa !2
  %lnfZT = load i64*, i64** %Sp_Var
  %lnfZU = getelementptr inbounds i64, i64* %lnfZT, i32 -5
  %lnfZV = ptrtoint i64* %lnfZU to i64
  %lnfZW = inttoptr i64 %lnfZV to i64*
  store i64* %lnfZW, i64** %Sp_Var
  %lnfZX = load i64, i64* %R1_Var
  %lnfZY = and i64 %lnfZX, 7
  %lnfZZ = icmp ne i64 %lnfZY, 0
  br i1 %lnfZZ, label %uf1R, label %cf1t
cf1t:
  %lng01 = load i64, i64* %R1_Var
  %lng02 = inttoptr i64 %lng01 to i64*
  %lng03 = load i64, i64* %lng02, !tbaa !4
  %lng04 = inttoptr i64 %lng03 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng05 = load i64*, i64** %Sp_Var
  %lng06 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng04( i64* %Base_Arg, i64* %lng05, i64* %Hp_Arg, i64 %lng06, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf1R:
  %lng07 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1s_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng08 = load i64*, i64** %Sp_Var
  %lng09 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng07( i64* %Base_Arg, i64* %lng08, i64* %Hp_Arg, i64 %lng09, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf1K:
  %lng0a = load i64, i64* %R1_Var
  store i64 %lng0a, i64* %R1_Var
  %lng0b = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lng0c = bitcast i64* %lng0b to i64*
  %lng0d = load i64, i64* %lng0c, !tbaa !5
  %lng0e = inttoptr i64 %lng0d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng0f = load i64*, i64** %Sp_Var
  %lng0g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng0e( i64* %Base_Arg, i64* %lng0f, i64* %Hp_Arg, i64 %lng0g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf1s_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1s_info$def to i8*)
define internal ghccc void @cf1s_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ng0h:
  %ls7Lq = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf1s
cf1s:
  %lng0i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1y_info$def to i64
  %lng0j = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lng0i, i64* %lng0j, !tbaa !2
  %lng0m = load i64, i64* %R1_Var
  %lng0n = add i64 %lng0m, 7
  %lng0o = inttoptr i64 %lng0n to double*
  %lng0p = load double, double* %lng0o, !tbaa !4
  store double %lng0p, double* %ls7Lq
  %lng0q = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lng0r = bitcast i64* %lng0q to i64*
  %lng0s = load i64, i64* %lng0r, !tbaa !2
  store i64 %lng0s, i64* %R1_Var
  %lng0t = load double, double* %ls7Lq
  %lng0u = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lng0v = bitcast i64* %lng0u to double*
  store double %lng0t, double* %lng0v, !tbaa !2
  %lng0w = load i64, i64* %R1_Var
  %lng0x = and i64 %lng0w, 7
  %lng0y = icmp ne i64 %lng0x, 0
  br i1 %lng0y, label %uf1Q, label %cf1z
cf1z:
  %lng0A = load i64, i64* %R1_Var
  %lng0B = inttoptr i64 %lng0A to i64*
  %lng0C = load i64, i64* %lng0B, !tbaa !4
  %lng0D = inttoptr i64 %lng0C to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng0E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng0D( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lng0E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf1Q:
  %lng0F = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1y_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng0G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng0F( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lng0G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf1y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf1y_info$def to i8*)
define internal ghccc void @cf1y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ng0H:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Lu = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf1y
cf1y:
  %lng0I = load i64*, i64** %Hp_Var
  %lng0J = getelementptr inbounds i64, i64* %lng0I, i32 2
  %lng0K = ptrtoint i64* %lng0J to i64
  %lng0L = inttoptr i64 %lng0K to i64*
  store i64* %lng0L, i64** %Hp_Var
  %lng0M = load i64*, i64** %Hp_Var
  %lng0N = ptrtoint i64* %lng0M to i64
  %lng0O = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lng0P = bitcast i64* %lng0O to i64*
  %lng0Q = load i64, i64* %lng0P, !tbaa !5
  %lng0R = icmp ugt i64 %lng0N, %lng0Q
  %lng0S = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lng0R, i1 0 )
  br i1 %lng0S, label %cf1P, label %cf1O
cf1O:
  %lng0T = load i64*, i64** %Sp_Var
  %lng0U = getelementptr inbounds i64, i64* %lng0T, i32 2
  %lng0V = bitcast i64* %lng0U to double*
  %lng0W = load double, double* %lng0V, !tbaa !2
  %lng0Z = load i64, i64* %R1_Var
  %lng10 = add i64 %lng0Z, 7
  %lng11 = inttoptr i64 %lng10 to double*
  %lng12 = load double, double* %lng11, !tbaa !4
  %lng13 = load i64*, i64** %Sp_Var
  %lng14 = getelementptr inbounds i64, i64* %lng13, i32 1
  %lng15 = bitcast i64* %lng14 to double*
  %lng16 = load double, double* %lng15, !tbaa !2
  %lng17 = fmul double %lng12, %lng16
  %lng18 = fadd double %lng0W, %lng17
  store double %lng18, double* %ls7Lu
  %lng1a = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lng19 = load i64*, i64** %Hp_Var
  %lng1b = getelementptr inbounds i64, i64* %lng19, i32 -1
  store i64 %lng1a, i64* %lng1b, !tbaa !3
  %lng1d = load double, double* %ls7Lu
  %lng1c = load i64*, i64** %Hp_Var
  %lng1e = getelementptr inbounds i64, i64* %lng1c, i32 0
  %lng1f = bitcast i64* %lng1e to double*
  store double %lng1d, double* %lng1f, !tbaa !3
  %lng1h = load i64*, i64** %Hp_Var
  %lng1i = ptrtoint i64* %lng1h to i64
  %lng1j = add i64 %lng1i, -7
  store i64 %lng1j, i64* %R1_Var
  %lng1k = load i64*, i64** %Sp_Var
  %lng1l = getelementptr inbounds i64, i64* %lng1k, i32 3
  %lng1m = ptrtoint i64* %lng1l to i64
  %lng1n = inttoptr i64 %lng1m to i64*
  store i64* %lng1n, i64** %Sp_Var
  %lng1o = load i64*, i64** %Sp_Var
  %lng1p = getelementptr inbounds i64, i64* %lng1o, i32 0
  %lng1q = bitcast i64* %lng1p to i64*
  %lng1r = load i64, i64* %lng1q, !tbaa !2
  %lng1s = inttoptr i64 %lng1r to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng1t = load i64*, i64** %Sp_Var
  %lng1u = load i64*, i64** %Hp_Var
  %lng1v = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng1s( i64* %Base_Arg, i64* %lng1t, i64* %lng1u, i64 %lng1v, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf1P:
  %lng1w = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lng1w, !tbaa !5
  %lng1x = load i64, i64* %R1_Var
  store i64 %lng1x, i64* %R1_Var
  %lng1y = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng1z = load i64*, i64** %Sp_Var
  %lng1A = load i64*, i64** %Hp_Var
  %lng1B = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng1y( i64* %Base_Arg, i64* %lng1z, i64* %lng1A, i64 %lng1B, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_reflectray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to i8*)
define ghccc void @Main_reflectray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 25769803802, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to i64)) to i32),i32 0)}>
{
ng1C:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cf1S
cf1S:
  %lng1D = load i64*, i64** %Sp_Var
  %lng1E = getelementptr inbounds i64, i64* %lng1D, i32 -15
  %lng1F = ptrtoint i64* %lng1E to i64
  %lng1G = icmp ult i64 %lng1F, %SpLim_Arg
  %lng1H = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lng1G, i1 0 )
  br i1 %lng1H, label %cf1T, label %cf1U
cf1U:
  %lng1J = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVk_info$def to i64
  %lng1I = load i64*, i64** %Sp_Var
  %lng1K = getelementptr inbounds i64, i64* %lng1I, i32 -5
  store i64 %lng1J, i64* %lng1K, !tbaa !2
  %lng1L = load i64, i64* %R5_Var
  store i64 %lng1L, i64* %R1_Var
  %lng1N = load i64, i64* %R2_Var
  %lng1M = load i64*, i64** %Sp_Var
  %lng1O = getelementptr inbounds i64, i64* %lng1M, i32 -4
  store i64 %lng1N, i64* %lng1O, !tbaa !2
  %lng1Q = load i64, i64* %R3_Var
  %lng1P = load i64*, i64** %Sp_Var
  %lng1R = getelementptr inbounds i64, i64* %lng1P, i32 -3
  store i64 %lng1Q, i64* %lng1R, !tbaa !2
  %lng1T = load i64, i64* %R4_Var
  %lng1S = load i64*, i64** %Sp_Var
  %lng1U = getelementptr inbounds i64, i64* %lng1S, i32 -2
  store i64 %lng1T, i64* %lng1U, !tbaa !2
  %lng1W = load i64, i64* %R6_Var
  %lng1V = load i64*, i64** %Sp_Var
  %lng1X = getelementptr inbounds i64, i64* %lng1V, i32 -1
  store i64 %lng1W, i64* %lng1X, !tbaa !2
  %lng1Y = load i64*, i64** %Sp_Var
  %lng1Z = getelementptr inbounds i64, i64* %lng1Y, i32 -5
  %lng20 = ptrtoint i64* %lng1Z to i64
  %lng21 = inttoptr i64 %lng20 to i64*
  store i64* %lng21, i64** %Sp_Var
  %lng22 = load i64, i64* %R1_Var
  %lng23 = and i64 %lng22, 7
  %lng24 = icmp ne i64 %lng23, 0
  br i1 %lng24, label %uf31, label %ceVl
ceVl:
  %lng26 = load i64, i64* %R1_Var
  %lng27 = inttoptr i64 %lng26 to i64*
  %lng28 = load i64, i64* %lng27, !tbaa !4
  %lng29 = inttoptr i64 %lng28 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng2a = load i64*, i64** %Sp_Var
  %lng2b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng29( i64* %Base_Arg, i64* %lng2a, i64* %Hp_Arg, i64 %lng2b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf31:
  %lng2c = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng2d = load i64*, i64** %Sp_Var
  %lng2e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng2c( i64* %Base_Arg, i64* %lng2d, i64* %Hp_Arg, i64 %lng2e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf1T:
  %lng2f = load i64, i64* %R6_Var
  store i64 %lng2f, i64* %R6_Var
  %lng2g = load i64, i64* %R5_Var
  store i64 %lng2g, i64* %R5_Var
  %lng2h = load i64, i64* %R4_Var
  store i64 %lng2h, i64* %R4_Var
  %lng2i = load i64, i64* %R3_Var
  store i64 %lng2i, i64* %R3_Var
  %lng2j = load i64, i64* %R2_Var
  store i64 %lng2j, i64* %R2_Var
  %lng2k = ptrtoint %Main_reflectray_closure_struct* @Main_reflectray_closure$def to i64
  store i64 %lng2k, i64* %R1_Var
  %lng2l = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lng2m = bitcast i64* %lng2l to i64*
  %lng2n = load i64, i64* %lng2m, !tbaa !5
  %lng2o = inttoptr i64 %lng2n to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng2p = load i64*, i64** %Sp_Var
  %lng2q = load i64, i64* %R1_Var
  %lng2r = load i64, i64* %R2_Var
  %lng2s = load i64, i64* %R3_Var
  %lng2t = load i64, i64* %R4_Var
  %lng2u = load i64, i64* %R5_Var
  %lng2v = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng2o( i64* %Base_Arg, i64* %lng2p, i64* %Hp_Arg, i64 %lng2q, i64 %lng2r, i64 %lng2s, i64 %lng2t, i64 %lng2u, i64 %lng2v, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVk_info$def to i8*)
define internal ghccc void @ceVk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVk_info$def to i64)) to i32),i32 0)}>
{
ng2w:
  %ls7JU = alloca i64, i32 1
  %ls7JV = alloca i64, i32 1
  %ls7JW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceVk
ceVk:
  %lng2y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVp_info$def to i64
  %lng2x = load i64*, i64** %Sp_Var
  %lng2z = getelementptr inbounds i64, i64* %lng2x, i32 -2
  store i64 %lng2y, i64* %lng2z, !tbaa !2
  %lng2C = load i64, i64* %R1_Var
  %lng2D = add i64 %lng2C, 7
  %lng2E = inttoptr i64 %lng2D to i64*
  %lng2F = load i64, i64* %lng2E, !tbaa !4
  store i64 %lng2F, i64* %ls7JU
  %lng2I = load i64, i64* %R1_Var
  %lng2J = add i64 %lng2I, 15
  %lng2K = inttoptr i64 %lng2J to i64*
  %lng2L = load i64, i64* %lng2K, !tbaa !4
  store i64 %lng2L, i64* %ls7JV
  %lng2O = load i64, i64* %R1_Var
  %lng2P = add i64 %lng2O, 23
  %lng2Q = inttoptr i64 %lng2P to i64*
  %lng2R = load i64, i64* %lng2Q, !tbaa !4
  store i64 %lng2R, i64* %ls7JW
  %lng2S = load i64*, i64** %Sp_Var
  %lng2T = getelementptr inbounds i64, i64* %lng2S, i32 4
  %lng2U = bitcast i64* %lng2T to i64*
  %lng2V = load i64, i64* %lng2U, !tbaa !2
  store i64 %lng2V, i64* %R1_Var
  %lng2X = load i64, i64* %ls7JW
  %lng2W = load i64*, i64** %Sp_Var
  %lng2Y = getelementptr inbounds i64, i64* %lng2W, i32 -1
  store i64 %lng2X, i64* %lng2Y, !tbaa !2
  %lng30 = load i64, i64* %ls7JV
  %lng2Z = load i64*, i64** %Sp_Var
  %lng31 = getelementptr inbounds i64, i64* %lng2Z, i32 0
  store i64 %lng30, i64* %lng31, !tbaa !2
  %lng33 = load i64, i64* %ls7JU
  %lng32 = load i64*, i64** %Sp_Var
  %lng34 = getelementptr inbounds i64, i64* %lng32, i32 4
  store i64 %lng33, i64* %lng34, !tbaa !2
  %lng35 = load i64*, i64** %Sp_Var
  %lng36 = getelementptr inbounds i64, i64* %lng35, i32 -2
  %lng37 = ptrtoint i64* %lng36 to i64
  %lng38 = inttoptr i64 %lng37 to i64*
  store i64* %lng38, i64** %Sp_Var
  %lng39 = load i64, i64* %R1_Var
  %lng3a = and i64 %lng39, 7
  %lng3b = icmp ne i64 %lng3a, 0
  br i1 %lng3b, label %uf2U, label %ceVq
ceVq:
  %lng3d = load i64, i64* %R1_Var
  %lng3e = inttoptr i64 %lng3d to i64*
  %lng3f = load i64, i64* %lng3e, !tbaa !4
  %lng3g = inttoptr i64 %lng3f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng3h = load i64*, i64** %Sp_Var
  %lng3i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng3g( i64* %Base_Arg, i64* %lng3h, i64* %Hp_Arg, i64 %lng3i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf2U:
  %lng3j = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVp_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng3k = load i64*, i64** %Sp_Var
  %lng3l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng3j( i64* %Base_Arg, i64* %lng3k, i64* %Hp_Arg, i64 %lng3l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVp_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVp_info$def to i8*)
define internal ghccc void @ceVp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 7, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVp_info$def to i64)) to i32),i32 0)}>
{
ng3m:
  %ls7JY = alloca i64, i32 1
  %ls7JZ = alloca i64, i32 1
  %ls7K0 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceVp
ceVp:
  %lng3o = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVu_info$def to i64
  %lng3n = load i64*, i64** %Sp_Var
  %lng3p = getelementptr inbounds i64, i64* %lng3n, i32 -2
  store i64 %lng3o, i64* %lng3p, !tbaa !2
  %lng3s = load i64, i64* %R1_Var
  %lng3t = add i64 %lng3s, 7
  %lng3u = inttoptr i64 %lng3t to i64*
  %lng3v = load i64, i64* %lng3u, !tbaa !4
  store i64 %lng3v, i64* %ls7JY
  %lng3y = load i64, i64* %R1_Var
  %lng3z = add i64 %lng3y, 15
  %lng3A = inttoptr i64 %lng3z to i64*
  %lng3B = load i64, i64* %lng3A, !tbaa !4
  store i64 %lng3B, i64* %ls7JZ
  %lng3E = load i64, i64* %R1_Var
  %lng3F = add i64 %lng3E, 23
  %lng3G = inttoptr i64 %lng3F to i64*
  %lng3H = load i64, i64* %lng3G, !tbaa !4
  store i64 %lng3H, i64* %ls7K0
  %lng3I = load i64*, i64** %Sp_Var
  %lng3J = getelementptr inbounds i64, i64* %lng3I, i32 6
  %lng3K = bitcast i64* %lng3J to i64*
  %lng3L = load i64, i64* %lng3K, !tbaa !2
  store i64 %lng3L, i64* %R1_Var
  %lng3N = load i64, i64* %ls7K0
  %lng3M = load i64*, i64** %Sp_Var
  %lng3O = getelementptr inbounds i64, i64* %lng3M, i32 -1
  store i64 %lng3N, i64* %lng3O, !tbaa !2
  %lng3Q = load i64, i64* %ls7JZ
  %lng3P = load i64*, i64** %Sp_Var
  %lng3R = getelementptr inbounds i64, i64* %lng3P, i32 0
  store i64 %lng3Q, i64* %lng3R, !tbaa !2
  %lng3T = load i64, i64* %ls7JY
  %lng3S = load i64*, i64** %Sp_Var
  %lng3U = getelementptr inbounds i64, i64* %lng3S, i32 6
  store i64 %lng3T, i64* %lng3U, !tbaa !2
  %lng3V = load i64*, i64** %Sp_Var
  %lng3W = getelementptr inbounds i64, i64* %lng3V, i32 -2
  %lng3X = ptrtoint i64* %lng3W to i64
  %lng3Y = inttoptr i64 %lng3X to i64*
  store i64* %lng3Y, i64** %Sp_Var
  %lng3Z = load i64, i64* %R1_Var
  %lng40 = and i64 %lng3Z, 7
  %lng41 = icmp ne i64 %lng40, 0
  br i1 %lng41, label %uf2V, label %ceVv
ceVv:
  %lng43 = load i64, i64* %R1_Var
  %lng44 = inttoptr i64 %lng43 to i64*
  %lng45 = load i64, i64* %lng44, !tbaa !4
  %lng46 = inttoptr i64 %lng45 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng47 = load i64*, i64** %Sp_Var
  %lng48 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng46( i64* %Base_Arg, i64* %lng47, i64* %Hp_Arg, i64 %lng48, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf2V:
  %lng49 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng4a = load i64*, i64** %Sp_Var
  %lng4b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng49( i64* %Base_Arg, i64* %lng4a, i64* %Hp_Arg, i64 %lng4b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVu_info$def to i8*)
define internal ghccc void @ceVu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 9, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVu_info$def to i64)) to i32),i32 0)}>
{
ng4c:
  %ls7K2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceVu
ceVu:
  %lng4d = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVz_info$def to i64
  %lng4e = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lng4d, i64* %lng4e, !tbaa !2
  %lng4h = load i64, i64* %R1_Var
  %lng4i = add i64 %lng4h, 7
  %lng4j = inttoptr i64 %lng4i to double*
  %lng4k = load double, double* %lng4j, !tbaa !4
  store double %lng4k, double* %ls7K2
  %lng4l = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lng4m = bitcast i64* %lng4l to i64*
  %lng4n = load i64, i64* %lng4m, !tbaa !2
  store i64 %lng4n, i64* %R1_Var
  %lng4o = load double, double* %ls7K2
  %lng4p = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lng4q = bitcast i64* %lng4p to double*
  store double %lng4o, double* %lng4q, !tbaa !2
  %lng4r = load i64, i64* %R1_Var
  %lng4s = and i64 %lng4r, 7
  %lng4t = icmp ne i64 %lng4s, 0
  br i1 %lng4t, label %uf2W, label %ceVA
ceVA:
  %lng4v = load i64, i64* %R1_Var
  %lng4w = inttoptr i64 %lng4v to i64*
  %lng4x = load i64, i64* %lng4w, !tbaa !4
  %lng4y = inttoptr i64 %lng4x to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng4z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng4y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lng4z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf2W:
  %lng4A = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng4B = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng4A( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lng4B, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceVz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVz_info$def to i8*)
define internal ghccc void @ceVz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8201, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceVz_info$def to i64)) to i32),i32 0)}>
{
ng4C:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7K5 = alloca double, i32 1
  %lceVH = alloca i64, i32 1
  %lceW8 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceVz
ceVz:
  %lng4D = load i64*, i64** %Hp_Var
  %lng4E = getelementptr inbounds i64, i64* %lng4D, i32 8
  %lng4F = ptrtoint i64* %lng4E to i64
  %lng4G = inttoptr i64 %lng4F to i64*
  store i64* %lng4G, i64** %Hp_Var
  %lng4H = load i64*, i64** %Hp_Var
  %lng4I = ptrtoint i64* %lng4H to i64
  %lng4J = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lng4K = bitcast i64* %lng4J to i64*
  %lng4L = load i64, i64* %lng4K, !tbaa !5
  %lng4M = icmp ugt i64 %lng4I, %lng4L
  %lng4N = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lng4M, i1 0 )
  br i1 %lng4N, label %cf20, label %cf1Z
cf1Z:
  %lng4O = load i64*, i64** %Sp_Var
  %lng4P = getelementptr inbounds i64, i64* %lng4O, i32 8
  %lng4Q = bitcast i64* %lng4P to double*
  %lng4R = load double, double* %lng4Q, !tbaa !2
  %lng4U = load i64, i64* %R1_Var
  %lng4V = add i64 %lng4U, 7
  %lng4W = inttoptr i64 %lng4V to double*
  %lng4X = load double, double* %lng4W, !tbaa !4
  %lng4Y = fmul double %lng4R, %lng4X
  store double %lng4Y, double* %ls7K5
  %lng50 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7K6_info$def to i64
  %lng4Z = load i64*, i64** %Hp_Var
  %lng51 = getelementptr inbounds i64, i64* %lng4Z, i32 -7
  store i64 %lng50, i64* %lng51, !tbaa !3
  %lng53 = load i64*, i64** %Sp_Var
  %lng54 = getelementptr inbounds i64, i64* %lng53, i32 2
  %lng55 = bitcast i64* %lng54 to i64*
  %lng56 = load i64, i64* %lng55, !tbaa !2
  %lng52 = load i64*, i64** %Hp_Var
  %lng57 = getelementptr inbounds i64, i64* %lng52, i32 -5
  store i64 %lng56, i64* %lng57, !tbaa !3
  %lng59 = load i64*, i64** %Sp_Var
  %lng5a = getelementptr inbounds i64, i64* %lng59, i32 4
  %lng5b = bitcast i64* %lng5a to i64*
  %lng5c = load i64, i64* %lng5b, !tbaa !2
  %lng58 = load i64*, i64** %Hp_Var
  %lng5d = getelementptr inbounds i64, i64* %lng58, i32 -4
  store i64 %lng5c, i64* %lng5d, !tbaa !3
  %lng5f = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Kc_info$def to i64
  %lng5e = load i64*, i64** %Hp_Var
  %lng5g = getelementptr inbounds i64, i64* %lng5e, i32 -3
  store i64 %lng5f, i64* %lng5g, !tbaa !3
  %lng5i = load i64*, i64** %Sp_Var
  %lng5j = getelementptr inbounds i64, i64* %lng5i, i32 1
  %lng5k = bitcast i64* %lng5j to i64*
  %lng5l = load i64, i64* %lng5k, !tbaa !2
  %lng5h = load i64*, i64** %Hp_Var
  %lng5m = getelementptr inbounds i64, i64* %lng5h, i32 -1
  store i64 %lng5l, i64* %lng5m, !tbaa !3
  %lng5o = load i64*, i64** %Sp_Var
  %lng5p = getelementptr inbounds i64, i64* %lng5o, i32 3
  %lng5q = bitcast i64* %lng5p to i64*
  %lng5r = load i64, i64* %lng5q, !tbaa !2
  %lng5n = load i64*, i64** %Hp_Var
  %lng5s = getelementptr inbounds i64, i64* %lng5n, i32 0
  store i64 %lng5r, i64* %lng5s, !tbaa !3
  %lng5t = load i64*, i64** %Hp_Var
  %lng5u = getelementptr inbounds i64, i64* %lng5t, i32 -7
  %lng5v = ptrtoint i64* %lng5u to i64
  store i64 %lng5v, i64* %lceVH
  %lng5w = load i64*, i64** %Hp_Var
  %lng5x = getelementptr inbounds i64, i64* %lng5w, i32 -3
  %lng5y = ptrtoint i64* %lng5x to i64
  store i64 %lng5y, i64* %lceW8
  %lng5z = load double, double* %ls7K5
  %lng5A = fcmp olt double %lng5z, 0x3EB0C6F7A0B5ED8D
  %lng5B = zext i1 %lng5A to i64
  switch i64 %lng5B, label %uf2R [i64 1, label %cf2s]
uf2R:
  %lng5D = load double, double* %ls7K5
  %lng5C = load i64*, i64** %Sp_Var
  %lng5E = getelementptr inbounds i64, i64* %lng5C, i32 0
  %lng5F = bitcast i64* %lng5E to double*
  store double %lng5D, double* %lng5F, !tbaa !2
  %lng5H = load i64, i64* %lceW8
  %lng5G = load i64*, i64** %Sp_Var
  %lng5I = getelementptr inbounds i64, i64* %lng5G, i32 1
  store i64 %lng5H, i64* %lng5I, !tbaa !2
  %lng5K = load i64, i64* %lceVH
  %lng5J = load i64*, i64** %Sp_Var
  %lng5L = getelementptr inbounds i64, i64* %lng5J, i32 2
  store i64 %lng5K, i64* %lng5L, !tbaa !2
  %lng5M = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Ki$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng5N = load i64*, i64** %Sp_Var
  %lng5O = load i64*, i64** %Hp_Var
  %lng5P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng5M( i64* %Base_Arg, i64* %lng5N, i64* %lng5O, i64 %lng5P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2s:
  %lng5R = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2r_info$def to i64
  %lng5Q = load i64*, i64** %Sp_Var
  %lng5S = getelementptr inbounds i64, i64* %lng5Q, i32 -1
  store i64 %lng5R, i64* %lng5S, !tbaa !2
  %lng5T = load i64, i64* %lceVH
  store i64 %lng5T, i64* %R1_Var
  %lng5V = load double, double* %ls7K5
  %lng5U = load i64*, i64** %Sp_Var
  %lng5W = getelementptr inbounds i64, i64* %lng5U, i32 0
  %lng5X = bitcast i64* %lng5W to double*
  store double %lng5V, double* %lng5X, !tbaa !2
  %lng5Z = load i64, i64* %lceW8
  %lng5Y = load i64*, i64** %Sp_Var
  %lng60 = getelementptr inbounds i64, i64* %lng5Y, i32 1
  store i64 %lng5Z, i64* %lng60, !tbaa !2
  %lng62 = load i64, i64* %lceVH
  %lng61 = load i64*, i64** %Sp_Var
  %lng63 = getelementptr inbounds i64, i64* %lng61, i32 2
  store i64 %lng62, i64* %lng63, !tbaa !2
  %lng64 = load i64*, i64** %Sp_Var
  %lng65 = getelementptr inbounds i64, i64* %lng64, i32 -1
  %lng66 = ptrtoint i64* %lng65 to i64
  %lng67 = inttoptr i64 %lng66 to i64*
  store i64* %lng67, i64** %Sp_Var
  %lng68 = load i64, i64* %R1_Var
  %lng69 = and i64 %lng68, 7
  %lng6a = icmp ne i64 %lng69, 0
  br i1 %lng6a, label %uf2X, label %cf2t
cf2t:
  %lng6c = load i64, i64* %R1_Var
  %lng6d = inttoptr i64 %lng6c to i64*
  %lng6e = load i64, i64* %lng6d, !tbaa !4
  %lng6f = inttoptr i64 %lng6e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng6g = load i64*, i64** %Sp_Var
  %lng6h = load i64*, i64** %Hp_Var
  %lng6i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng6f( i64* %Base_Arg, i64* %lng6g, i64* %lng6h, i64 %lng6i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf2X:
  %lng6j = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2r_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng6k = load i64*, i64** %Sp_Var
  %lng6l = load i64*, i64** %Hp_Var
  %lng6m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng6j( i64* %Base_Arg, i64* %lng6k, i64* %lng6l, i64 %lng6m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf20:
  %lng6n = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %lng6n, !tbaa !5
  %lng6o = load i64, i64* %R1_Var
  store i64 %lng6o, i64* %R1_Var
  %lng6p = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng6q = load i64*, i64** %Sp_Var
  %lng6r = load i64*, i64** %Hp_Var
  %lng6s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng6p( i64* %Base_Arg, i64* %lng6q, i64* %lng6r, i64 %lng6s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf2r_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2r_info$def to i8*)
define internal ghccc void @cf2r_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 16458, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2r_info$def to i64)) to i32),i32 0)}>
{
ng6t:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf2r
cf2r:
  %lng6w = load i64, i64* %R1_Var
  %lng6x = add i64 %lng6w, 7
  %lng6y = inttoptr i64 %lng6x to double*
  %lng6z = load double, double* %lng6y, !tbaa !4
  %lng6A = fcmp olt double %lng6z, 0x3EB0C6F7A0B5ED8D
  %lng6B = zext i1 %lng6A to i64
  switch i64 %lng6B, label %uf2S [i64 1, label %cf2F]
uf2S:
  %lng6C = load i64*, i64** %Sp_Var
  %lng6D = getelementptr inbounds i64, i64* %lng6C, i32 1
  %lng6E = ptrtoint i64* %lng6D to i64
  %lng6F = inttoptr i64 %lng6E to i64*
  store i64* %lng6F, i64** %Sp_Var
  %lng6G = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Ki$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng6H = load i64*, i64** %Sp_Var
  %lng6I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng6G( i64* %Base_Arg, i64* %lng6H, i64* %Hp_Arg, i64 %lng6I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2F:
  %lng6K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2E_info$def to i64
  %lng6J = load i64*, i64** %Sp_Var
  %lng6L = getelementptr inbounds i64, i64* %lng6J, i32 0
  store i64 %lng6K, i64* %lng6L, !tbaa !2
  %lng6M = load i64*, i64** %Sp_Var
  %lng6N = getelementptr inbounds i64, i64* %lng6M, i32 2
  %lng6O = bitcast i64* %lng6N to i64*
  %lng6P = load i64, i64* %lng6O, !tbaa !2
  store i64 %lng6P, i64* %R1_Var
  %lng6Q = load i64, i64* %R1_Var
  %lng6R = and i64 %lng6Q, 7
  %lng6S = icmp ne i64 %lng6R, 0
  br i1 %lng6S, label %uf32, label %cf2G
cf2G:
  %lng6U = load i64, i64* %R1_Var
  %lng6V = inttoptr i64 %lng6U to i64*
  %lng6W = load i64, i64* %lng6V, !tbaa !4
  %lng6X = inttoptr i64 %lng6W to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng6Y = load i64*, i64** %Sp_Var
  %lng6Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng6X( i64* %Base_Arg, i64* %lng6Y, i64* %Hp_Arg, i64 %lng6Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf32:
  %lng70 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2E_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng71 = load i64*, i64** %Sp_Var
  %lng72 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng70( i64* %Base_Arg, i64* %lng71, i64* %Hp_Arg, i64 %lng72, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf2E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2E_info$def to i8*)
define internal ghccc void @cf2E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 16458, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf2E_info$def to i64)) to i32),i32 0)}>
{
ng73:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf2E
cf2E:
  %lng76 = load i64, i64* %R1_Var
  %lng77 = add i64 %lng76, 7
  %lng78 = inttoptr i64 %lng77 to double*
  %lng79 = load double, double* %lng78, !tbaa !4
  %lng7a = fcmp olt double %lng79, 0x3EB0C6F7A0B5ED8D
  %lng7b = zext i1 %lng7a to i64
  switch i64 %lng7b, label %uf2T [i64 1, label %cf2P]
uf2T:
  %lng7c = load i64*, i64** %Sp_Var
  %lng7d = getelementptr inbounds i64, i64* %lng7c, i32 1
  %lng7e = ptrtoint i64* %lng7d to i64
  %lng7f = inttoptr i64 %lng7e to i64*
  store i64* %lng7f, i64** %Sp_Var
  %lng7g = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Ki$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng7h = load i64*, i64** %Sp_Var
  %lng7i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng7g( i64* %Base_Arg, i64* %lng7h, i64* %Hp_Arg, i64 %lng7i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2P:
  %lng7j = load i64*, i64** %Sp_Var
  %lng7k = getelementptr inbounds i64, i64* %lng7j, i32 10
  %lng7l = bitcast i64* %lng7k to i64*
  %lng7m = load i64, i64* %lng7l, !tbaa !2
  %lng7n = and i64 %lng7m, -8
  store i64 %lng7n, i64* %R1_Var
  %lng7o = load i64*, i64** %Sp_Var
  %lng7p = getelementptr inbounds i64, i64* %lng7o, i32 11
  %lng7q = ptrtoint i64* %lng7p to i64
  %lng7r = inttoptr i64 %lng7q to i64*
  store i64* %lng7r, i64** %Sp_Var
  %lng7t = load i64, i64* %R1_Var
  %lng7u = inttoptr i64 %lng7t to i64*
  %lng7v = load i64, i64* %lng7u, !tbaa !4
  %lng7w = inttoptr i64 %lng7v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng7x = load i64*, i64** %Sp_Var
  %lng7y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng7w( i64* %Base_Arg, i64* %lng7x, i64* %Hp_Arg, i64 %lng7y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s7Ki = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7Ki$def to i8*)
define internal ghccc void @_s7Ki$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ng7z:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s7Ki
s7Ki:
  %lng7B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWE_info$def to i64
  %lng7A = load i64*, i64** %Sp_Var
  %lng7C = getelementptr inbounds i64, i64* %lng7A, i32 -1
  store i64 %lng7B, i64* %lng7C, !tbaa !2
  %lng7D = load i64*, i64** %Sp_Var
  %lng7E = getelementptr inbounds i64, i64* %lng7D, i32 9
  %lng7F = bitcast i64* %lng7E to i64*
  %lng7G = load i64, i64* %lng7F, !tbaa !2
  store i64 %lng7G, i64* %R1_Var
  %lng7H = load i64*, i64** %Sp_Var
  %lng7I = getelementptr inbounds i64, i64* %lng7H, i32 -1
  %lng7J = ptrtoint i64* %lng7I to i64
  %lng7K = inttoptr i64 %lng7J to i64*
  store i64* %lng7K, i64** %Sp_Var
  %lng7L = load i64, i64* %R1_Var
  %lng7M = and i64 %lng7L, 7
  %lng7N = icmp ne i64 %lng7M, 0
  br i1 %lng7N, label %uf35, label %ceWF
ceWF:
  %lng7P = load i64, i64* %R1_Var
  %lng7Q = inttoptr i64 %lng7P to i64*
  %lng7R = load i64, i64* %lng7Q, !tbaa !4
  %lng7S = inttoptr i64 %lng7R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng7T = load i64*, i64** %Sp_Var
  %lng7U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng7S( i64* %Base_Arg, i64* %lng7T, i64* %Hp_Arg, i64 %lng7U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf35:
  %lng7V = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng7W = load i64*, i64** %Sp_Var
  %lng7X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng7V( i64* %Base_Arg, i64* %lng7W, i64* %Hp_Arg, i64 %lng7X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceWE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWE_info$def to i8*)
define internal ghccc void @ceWE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 49226, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceWE_info$def to i64)) to i32),i32 0)}>
{
ng7Y:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Kk = alloca i64, i32 1
  %ls7Kl = alloca i64, i32 1
  %ls7Km = alloca i64, i32 1
  %ls7JO = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %lceWJ = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ceWE
ceWE:
  %lng7Z = load i64*, i64** %Hp_Var
  %lng80 = getelementptr inbounds i64, i64* %lng7Z, i32 4
  %lng81 = ptrtoint i64* %lng80 to i64
  %lng82 = inttoptr i64 %lng81 to i64*
  store i64* %lng82, i64** %Hp_Var
  %lng83 = load i64*, i64** %Hp_Var
  %lng84 = ptrtoint i64* %lng83 to i64
  %lng85 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lng86 = bitcast i64* %lng85 to i64*
  %lng87 = load i64, i64* %lng86, !tbaa !5
  %lng88 = icmp ugt i64 %lng84, %lng87
  %lng89 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lng88, i1 0 )
  br i1 %lng89, label %cf24, label %cf23
cf23:
  %lng8c = load i64, i64* %R1_Var
  %lng8d = add i64 %lng8c, 7
  %lng8e = inttoptr i64 %lng8d to i64*
  %lng8f = load i64, i64* %lng8e, !tbaa !4
  store i64 %lng8f, i64* %ls7Kk
  %lng8i = load i64, i64* %R1_Var
  %lng8j = add i64 %lng8i, 15
  %lng8k = inttoptr i64 %lng8j to i64*
  %lng8l = load i64, i64* %lng8k, !tbaa !4
  store i64 %lng8l, i64* %ls7Kl
  %lng8o = load i64, i64* %R1_Var
  %lng8p = add i64 %lng8o, 23
  %lng8q = inttoptr i64 %lng8p to i64*
  %lng8r = load i64, i64* %lng8q, !tbaa !4
  store i64 %lng8r, i64* %ls7Km
  %lng8t = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Kn_info$def to i64
  %lng8s = load i64*, i64** %Hp_Var
  %lng8u = getelementptr inbounds i64, i64* %lng8s, i32 -3
  store i64 %lng8t, i64* %lng8u, !tbaa !3
  %lng8v = load i64*, i64** %Sp_Var
  %lng8w = getelementptr inbounds i64, i64* %lng8v, i32 7
  %lng8x = bitcast i64* %lng8w to i64*
  %lng8y = load i64, i64* %lng8x, !tbaa !2
  store i64 %lng8y, i64* %ls7JO
  %lng8A = load i64, i64* %ls7JO
  %lng8z = load i64*, i64** %Hp_Var
  %lng8B = getelementptr inbounds i64, i64* %lng8z, i32 -1
  store i64 %lng8A, i64* %lng8B, !tbaa !3
  %lng8D = load i64*, i64** %Sp_Var
  %lng8E = getelementptr inbounds i64, i64* %lng8D, i32 6
  %lng8F = bitcast i64* %lng8E to i64*
  %lng8G = load i64, i64* %lng8F, !tbaa !2
  %lng8C = load i64*, i64** %Hp_Var
  %lng8H = getelementptr inbounds i64, i64* %lng8C, i32 0
  store i64 %lng8G, i64* %lng8H, !tbaa !3
  %lng8J = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYz_info$def to i64
  %lng8I = load i64*, i64** %Sp_Var
  %lng8K = getelementptr inbounds i64, i64* %lng8I, i32 -2
  store i64 %lng8J, i64* %lng8K, !tbaa !2
  %lng8L = load i64, i64* %ls7JO
  store i64 %lng8L, i64* %R4_Var
  %lng8M = load i64*, i64** %Hp_Var
  %lng8N = getelementptr inbounds i64, i64* %lng8M, i32 -3
  %lng8O = ptrtoint i64* %lng8N to i64
  store i64 %lng8O, i64* %lceWJ
  %lng8P = load i64, i64* %lceWJ
  store i64 %lng8P, i64* %R3_Var
  %lng8Q = ptrtoint %Main_testspheres_closure_struct* @Main_testspheres_closure$def to i64
  %lng8R = add i64 %lng8Q, 2
  store i64 %lng8R, i64* %R2_Var
  %lng8T = load i64, i64* %ls7Km
  %lng8S = load i64*, i64** %Sp_Var
  %lng8U = getelementptr inbounds i64, i64* %lng8S, i32 -1
  store i64 %lng8T, i64* %lng8U, !tbaa !2
  %lng8W = load i64, i64* %ls7Kl
  %lng8V = load i64*, i64** %Sp_Var
  %lng8X = getelementptr inbounds i64, i64* %lng8V, i32 0
  store i64 %lng8W, i64* %lng8X, !tbaa !2
  %lng8Z = load i64, i64* %ls7Kk
  %lng8Y = load i64*, i64** %Sp_Var
  %lng90 = getelementptr inbounds i64, i64* %lng8Y, i32 6
  store i64 %lng8Z, i64* %lng90, !tbaa !2
  %lng92 = load i64, i64* %lceWJ
  %lng91 = load i64*, i64** %Sp_Var
  %lng93 = getelementptr inbounds i64, i64* %lng91, i32 10
  store i64 %lng92, i64* %lng93, !tbaa !2
  %lng94 = load i64*, i64** %Sp_Var
  %lng95 = getelementptr inbounds i64, i64* %lng94, i32 -2
  %lng96 = ptrtoint i64* %lng95 to i64
  %lng97 = inttoptr i64 %lng96 to i64*
  store i64* %lng97, i64** %Sp_Var
  %lng98 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng99 = load i64*, i64** %Sp_Var
  %lng9a = load i64*, i64** %Hp_Var
  %lng9b = load i64, i64* %R1_Var
  %lng9c = load i64, i64* %R2_Var
  %lng9d = load i64, i64* %R3_Var
  %lng9e = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng98( i64* %Base_Arg, i64* %lng99, i64* %lng9a, i64 %lng9b, i64 %lng9c, i64 %lng9d, i64 %lng9e, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf24:
  %lng9f = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lng9f, !tbaa !5
  %lng9g = load i64, i64* %R1_Var
  store i64 %lng9g, i64* %R1_Var
  %lng9h = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng9i = load i64*, i64** %Sp_Var
  %lng9j = load i64*, i64** %Hp_Var
  %lng9k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng9h( i64* %Base_Arg, i64* %lng9i, i64* %lng9j, i64 %lng9k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceYz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYz_info$def to i8*)
define internal ghccc void @ceYz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65804, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYz_info$def to i64)) to i32),i32 0)}>
{
ng9l:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ceYz
ceYz:
  %lng9n = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYB_info$def to i64
  %lng9m = load i64*, i64** %Sp_Var
  %lng9o = getelementptr inbounds i64, i64* %lng9m, i32 -2
  store i64 %lng9n, i64* %lng9o, !tbaa !2
  %lng9p = load i64, i64* %R1_Var
  store i64 %lng9p, i64* %R1_Var
  %lng9q = load i64*, i64** %Sp_Var
  %lng9r = getelementptr inbounds i64, i64* %lng9q, i32 -1
  store i64 %R3_Arg, i64* %lng9r, !tbaa !2
  %lng9s = load i64*, i64** %Sp_Var
  %lng9t = getelementptr inbounds i64, i64* %lng9s, i32 0
  store i64 %R2_Arg, i64* %lng9t, !tbaa !2
  %lng9u = load i64*, i64** %Sp_Var
  %lng9v = getelementptr inbounds i64, i64* %lng9u, i32 -2
  %lng9w = ptrtoint i64* %lng9v to i64
  %lng9x = inttoptr i64 %lng9w to i64*
  store i64* %lng9x, i64** %Sp_Var
  %lng9y = load i64, i64* %R1_Var
  %lng9z = and i64 %lng9y, 7
  %lng9A = icmp ne i64 %lng9z, 0
  br i1 %lng9A, label %uf2Z, label %ceYC
ceYC:
  %lng9C = load i64, i64* %R1_Var
  %lng9D = inttoptr i64 %lng9C to i64*
  %lng9E = load i64, i64* %lng9D, !tbaa !4
  %lng9F = inttoptr i64 %lng9E to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng9G = load i64*, i64** %Sp_Var
  %lng9H = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng9F( i64* %Base_Arg, i64* %lng9G, i64* %Hp_Arg, i64 %lng9H, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf2Z:
  %lng9I = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lng9J = load i64*, i64** %Sp_Var
  %lng9K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lng9I( i64* %Base_Arg, i64* %lng9J, i64* %Hp_Arg, i64 %lng9K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ceYB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYB_info$def to i8*)
define internal ghccc void @ceYB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 263182, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ceYB_info$def to i64)) to i32),i32 0)}>
{
ng9L:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7KU = alloca i64, i32 1
  br label %ceYB
ceYB:
  %lng9M = load i64, i64* %R1_Var
  %lng9N = and i64 %lng9M, 7
  switch i64 %lng9N, label %cf28 [i64 1, label %cf28
i64 2, label %cf2e]
cf28:
  %lng9O = load i64*, i64** %Hp_Var
  %lng9P = getelementptr inbounds i64, i64* %lng9O, i32 16
  %lng9Q = ptrtoint i64* %lng9P to i64
  %lng9R = inttoptr i64 %lng9Q to i64*
  store i64* %lng9R, i64** %Hp_Var
  %lng9S = load i64*, i64** %Hp_Var
  %lng9T = ptrtoint i64* %lng9S to i64
  %lng9U = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lng9V = bitcast i64* %lng9U to i64*
  %lng9W = load i64, i64* %lng9V, !tbaa !5
  %lng9X = icmp ugt i64 %lng9T, %lng9W
  %lng9Y = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lng9X, i1 0 )
  br i1 %lng9Y, label %cf2b, label %cf2a
cf2a:
  %lnga0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Le_info$def to i64
  %lng9Z = load i64*, i64** %Hp_Var
  %lnga1 = getelementptr inbounds i64, i64* %lng9Z, i32 -15
  store i64 %lnga0, i64* %lnga1, !tbaa !3
  %lnga3 = load i64*, i64** %Sp_Var
  %lnga4 = getelementptr inbounds i64, i64* %lnga3, i32 8
  %lnga5 = bitcast i64* %lnga4 to i64*
  %lnga6 = load i64, i64* %lnga5, !tbaa !2
  %lnga2 = load i64*, i64** %Hp_Var
  %lnga7 = getelementptr inbounds i64, i64* %lnga2, i32 -13
  store i64 %lnga6, i64* %lnga7, !tbaa !3
  %lnga9 = load i64*, i64** %Sp_Var
  %lngaa = getelementptr inbounds i64, i64* %lnga9, i32 3
  %lngab = bitcast i64* %lngaa to i64*
  %lngac = load i64, i64* %lngab, !tbaa !2
  %lnga8 = load i64*, i64** %Hp_Var
  %lngad = getelementptr inbounds i64, i64* %lnga8, i32 -12
  store i64 %lngac, i64* %lngad, !tbaa !3
  %lngaf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7L7_info$def to i64
  %lngae = load i64*, i64** %Hp_Var
  %lngag = getelementptr inbounds i64, i64* %lngae, i32 -11
  store i64 %lngaf, i64* %lngag, !tbaa !3
  %lngai = load i64*, i64** %Sp_Var
  %lngaj = getelementptr inbounds i64, i64* %lngai, i32 9
  %lngak = bitcast i64* %lngaj to i64*
  %lngal = load i64, i64* %lngak, !tbaa !2
  %lngah = load i64*, i64** %Hp_Var
  %lngam = getelementptr inbounds i64, i64* %lngah, i32 -9
  store i64 %lngal, i64* %lngam, !tbaa !3
  %lngao = load i64*, i64** %Sp_Var
  %lngap = getelementptr inbounds i64, i64* %lngao, i32 4
  %lngaq = bitcast i64* %lngap to i64*
  %lngar = load i64, i64* %lngaq, !tbaa !2
  %lngan = load i64*, i64** %Hp_Var
  %lngas = getelementptr inbounds i64, i64* %lngan, i32 -8
  store i64 %lngar, i64* %lngas, !tbaa !3
  %lngau = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7L0_info$def to i64
  %lngat = load i64*, i64** %Hp_Var
  %lngav = getelementptr inbounds i64, i64* %lngat, i32 -7
  store i64 %lngau, i64* %lngav, !tbaa !3
  %lngax = load i64*, i64** %Sp_Var
  %lngay = getelementptr inbounds i64, i64* %lngax, i32 10
  %lngaz = bitcast i64* %lngay to i64*
  %lngaA = load i64, i64* %lngaz, !tbaa !2
  %lngaw = load i64*, i64** %Hp_Var
  %lngaB = getelementptr inbounds i64, i64* %lngaw, i32 -5
  store i64 %lngaA, i64* %lngaB, !tbaa !3
  %lngaD = load i64*, i64** %Sp_Var
  %lngaE = getelementptr inbounds i64, i64* %lngaD, i32 13
  %lngaF = bitcast i64* %lngaE to double*
  %lngaG = load double, double* %lngaF, !tbaa !2
  %lngaC = load i64*, i64** %Hp_Var
  %lngaH = getelementptr inbounds i64, i64* %lngaC, i32 -4
  %lngaI = bitcast i64* %lngaH to double*
  store double %lngaG, double* %lngaI, !tbaa !3
  %lngaK = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngaJ = load i64*, i64** %Hp_Var
  %lngaL = getelementptr inbounds i64, i64* %lngaJ, i32 -3
  store i64 %lngaK, i64* %lngaL, !tbaa !3
  %lngaN = load i64*, i64** %Hp_Var
  %lngaO = getelementptr inbounds i64, i64* %lngaN, i32 -7
  %lngaP = ptrtoint i64* %lngaO to i64
  %lngaM = load i64*, i64** %Hp_Var
  %lngaQ = getelementptr inbounds i64, i64* %lngaM, i32 -2
  store i64 %lngaP, i64* %lngaQ, !tbaa !3
  %lngaS = load i64*, i64** %Hp_Var
  %lngaT = getelementptr inbounds i64, i64* %lngaS, i32 -11
  %lngaU = ptrtoint i64* %lngaT to i64
  %lngaR = load i64*, i64** %Hp_Var
  %lngaV = getelementptr inbounds i64, i64* %lngaR, i32 -1
  store i64 %lngaU, i64* %lngaV, !tbaa !3
  %lngaX = load i64*, i64** %Hp_Var
  %lngaY = getelementptr inbounds i64, i64* %lngaX, i32 -15
  %lngaZ = ptrtoint i64* %lngaY to i64
  %lngaW = load i64*, i64** %Hp_Var
  %lngb0 = getelementptr inbounds i64, i64* %lngaW, i32 0
  store i64 %lngaZ, i64* %lngb0, !tbaa !3
  %lngb2 = load i64*, i64** %Hp_Var
  %lngb3 = ptrtoint i64* %lngb2 to i64
  %lngb4 = add i64 %lngb3, -23
  store i64 %lngb4, i64* %R1_Var
  %lngb5 = load i64*, i64** %Sp_Var
  %lngb6 = getelementptr inbounds i64, i64* %lngb5, i32 15
  %lngb7 = ptrtoint i64* %lngb6 to i64
  %lngb8 = inttoptr i64 %lngb7 to i64*
  store i64* %lngb8, i64** %Sp_Var
  %lngb9 = load i64*, i64** %Sp_Var
  %lngba = getelementptr inbounds i64, i64* %lngb9, i32 0
  %lngbb = bitcast i64* %lngba to i64*
  %lngbc = load i64, i64* %lngbb, !tbaa !2
  %lngbd = inttoptr i64 %lngbc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngbe = load i64*, i64** %Sp_Var
  %lngbf = load i64*, i64** %Hp_Var
  %lngbg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngbd( i64* %Base_Arg, i64* %lngbe, i64* %lngbf, i64 %lngbg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2b:
  %lngbh = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lngbh, !tbaa !5
  %lngbi = load i64, i64* %R1_Var
  store i64 %lngbi, i64* %R1_Var
  %lngbj = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngbk = load i64*, i64** %Sp_Var
  %lngbl = load i64*, i64** %Hp_Var
  %lngbm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngbj( i64* %Base_Arg, i64* %lngbk, i64* %lngbl, i64 %lngbm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2e:
  %lngbn = load i64*, i64** %Sp_Var
  %lngbo = getelementptr inbounds i64, i64* %lngbn, i32 1
  %lngbp = bitcast i64* %lngbo to i64*
  %lngbq = load i64, i64* %lngbp, !tbaa !2
  store i64 %lngbq, i64* %ls7KU
  %lngbs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf03_info$def to i64
  %lngbr = load i64*, i64** %Sp_Var
  %lngbt = getelementptr inbounds i64, i64* %lngbr, i32 1
  store i64 %lngbs, i64* %lngbt, !tbaa !2
  %lngbu = load i64, i64* %ls7KU
  store i64 %lngbu, i64* %R1_Var
  %lngbv = load i64*, i64** %Sp_Var
  %lngbw = getelementptr inbounds i64, i64* %lngbv, i32 1
  %lngbx = ptrtoint i64* %lngbw to i64
  %lngby = inttoptr i64 %lngbx to i64*
  store i64* %lngby, i64** %Sp_Var
  %lngbz = load i64, i64* %R1_Var
  %lngbA = and i64 %lngbz, 7
  %lngbB = icmp ne i64 %lngbA, 0
  br i1 %lngbB, label %uf30, label %cf04
cf04:
  %lngbD = load i64, i64* %R1_Var
  %lngbE = inttoptr i64 %lngbD to i64*
  %lngbF = load i64, i64* %lngbE, !tbaa !4
  %lngbG = inttoptr i64 %lngbF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngbH = load i64*, i64** %Sp_Var
  %lngbI = load i64*, i64** %Hp_Var
  %lngbJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngbG( i64* %Base_Arg, i64* %lngbH, i64* %lngbI, i64 %lngbJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf30:
  %lngbK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf03_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngbL = load i64*, i64** %Sp_Var
  %lngbM = load i64*, i64** %Hp_Var
  %lngbN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngbK( i64* %Base_Arg, i64* %lngbL, i64* %lngbM, i64 %lngbN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf03_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf03_info$def to i8*)
define internal ghccc void @cf03_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 131597, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf03_info$def to i64)) to i32),i32 0)}>
{
ngbO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Lg = alloca i64, i32 1
  %ls7Lh = alloca i64, i32 1
  %ls7Li = alloca i64, i32 1
  %ls7KT = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf03
cf03:
  %lngbP = load i64*, i64** %Hp_Var
  %lngbQ = getelementptr inbounds i64, i64* %lngbP, i32 6
  %lngbR = ptrtoint i64* %lngbQ to i64
  %lngbS = inttoptr i64 %lngbR to i64*
  store i64* %lngbS, i64** %Hp_Var
  %lngbT = load i64*, i64** %Hp_Var
  %lngbU = ptrtoint i64* %lngbT to i64
  %lngbV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngbW = bitcast i64* %lngbV to i64*
  %lngbX = load i64, i64* %lngbW, !tbaa !5
  %lngbY = icmp ugt i64 %lngbU, %lngbX
  %lngbZ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngbY, i1 0 )
  br i1 %lngbZ, label %cf2h, label %cf2g
cf2g:
  %lngc2 = load i64, i64* %R1_Var
  %lngc3 = add i64 %lngc2, 7
  %lngc4 = inttoptr i64 %lngc3 to i64*
  %lngc5 = load i64, i64* %lngc4, !tbaa !4
  store i64 %lngc5, i64* %ls7Lg
  %lngc8 = load i64, i64* %R1_Var
  %lngc9 = add i64 %lngc8, 15
  %lngca = inttoptr i64 %lngc9 to i64*
  %lngcb = load i64, i64* %lngca, !tbaa !4
  store i64 %lngcb, i64* %ls7Lh
  %lngce = load i64, i64* %R1_Var
  %lngcf = add i64 %lngce, 23
  %lngcg = inttoptr i64 %lngcf to i64*
  %lngch = load i64, i64* %lngcg, !tbaa !4
  store i64 %lngch, i64* %ls7Li
  %lngcj = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngci = load i64*, i64** %Hp_Var
  %lngck = getelementptr inbounds i64, i64* %lngci, i32 -5
  store i64 %lngcj, i64* %lngck, !tbaa !3
  %lngcm = load i64*, i64** %Sp_Var
  %lngcn = getelementptr inbounds i64, i64* %lngcm, i32 4
  %lngco = bitcast i64* %lngcn to double*
  %lngcp = load double, double* %lngco, !tbaa !2
  %lngcl = load i64*, i64** %Hp_Var
  %lngcq = getelementptr inbounds i64, i64* %lngcl, i32 -4
  %lngcr = bitcast i64* %lngcq to double*
  store double %lngcp, double* %lngcr, !tbaa !3
  %lngct = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngcs = load i64*, i64** %Hp_Var
  %lngcu = getelementptr inbounds i64, i64* %lngcs, i32 -3
  store i64 %lngct, i64* %lngcu, !tbaa !3
  %lngcx = load i64*, i64** %Hp_Var
  %lngcy = ptrtoint i64* %lngcx to i64
  %lngcz = add i64 %lngcy, -39
  %lngcv = load i64*, i64** %Hp_Var
  %lngcA = getelementptr inbounds i64, i64* %lngcv, i32 -2
  store i64 %lngcz, i64* %lngcA, !tbaa !3
  %lngcC = load i64*, i64** %Sp_Var
  %lngcD = getelementptr inbounds i64, i64* %lngcC, i32 6
  %lngcE = bitcast i64* %lngcD to i64*
  %lngcF = load i64, i64* %lngcE, !tbaa !2
  %lngcB = load i64*, i64** %Hp_Var
  %lngcG = getelementptr inbounds i64, i64* %lngcB, i32 -1
  store i64 %lngcF, i64* %lngcG, !tbaa !3
  %lngcI = load i64*, i64** %Sp_Var
  %lngcJ = getelementptr inbounds i64, i64* %lngcI, i32 5
  %lngcK = bitcast i64* %lngcJ to i64*
  %lngcL = load i64, i64* %lngcK, !tbaa !2
  %lngcH = load i64*, i64** %Hp_Var
  %lngcM = getelementptr inbounds i64, i64* %lngcH, i32 0
  store i64 %lngcL, i64* %lngcM, !tbaa !3
  %lngcN = load i64*, i64** %Sp_Var
  %lngcO = getelementptr inbounds i64, i64* %lngcN, i32 1
  %lngcP = bitcast i64* %lngcO to i64*
  %lngcQ = load i64, i64* %lngcP, !tbaa !2
  store i64 %lngcQ, i64* %ls7KT
  %lngcS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0a_info$def to i64
  %lngcR = load i64*, i64** %Sp_Var
  %lngcT = getelementptr inbounds i64, i64* %lngcR, i32 1
  store i64 %lngcS, i64* %lngcT, !tbaa !2
  %lngcU = load i64*, i64** %Sp_Var
  %lngcV = getelementptr inbounds i64, i64* %lngcU, i32 13
  %lngcW = bitcast i64* %lngcV to i64*
  %lngcX = load i64, i64* %lngcW, !tbaa !2
  store i64 %lngcX, i64* %R6_Var
  %lngcY = load i64, i64* %ls7Li
  store i64 %lngcY, i64* %R5_Var
  %lngcZ = load i64, i64* %ls7Lh
  store i64 %lngcZ, i64* %R4_Var
  %lngd0 = load i64, i64* %ls7Lg
  store i64 %lngd0, i64* %R3_Var
  %lngd1 = load i64*, i64** %Sp_Var
  %lngd2 = getelementptr inbounds i64, i64* %lngd1, i32 11
  %lngd3 = bitcast i64* %lngd2 to i64*
  %lngd4 = load i64, i64* %lngd3, !tbaa !2
  store i64 %lngd4, i64* %R2_Var
  %lngd6 = load i64*, i64** %Sp_Var
  %lngd7 = getelementptr inbounds i64, i64* %lngd6, i32 10
  %lngd8 = bitcast i64* %lngd7 to i64*
  %lngd9 = load i64, i64* %lngd8, !tbaa !2
  %lngd5 = load i64*, i64** %Sp_Var
  %lngda = getelementptr inbounds i64, i64* %lngd5, i32 -2
  store i64 %lngd9, i64* %lngda, !tbaa !2
  %lngdc = load i64, i64* %ls7KT
  %lngdb = load i64*, i64** %Sp_Var
  %lngdd = getelementptr inbounds i64, i64* %lngdb, i32 -1
  store i64 %lngdc, i64* %lngdd, !tbaa !2
  %lngdg = load i64*, i64** %Hp_Var
  %lngdh = ptrtoint i64* %lngdg to i64
  %lngdi = add i64 %lngdh, -23
  %lngde = load i64*, i64** %Sp_Var
  %lngdj = getelementptr inbounds i64, i64* %lngde, i32 0
  store i64 %lngdi, i64* %lngdj, !tbaa !2
  %lngdk = load i64*, i64** %Sp_Var
  %lngdl = getelementptr inbounds i64, i64* %lngdk, i32 -2
  %lngdm = ptrtoint i64* %lngdl to i64
  %lngdn = inttoptr i64 %lngdm to i64*
  store i64* %lngdn, i64** %Sp_Var
  %lngdo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngdp = load i64*, i64** %Sp_Var
  %lngdq = load i64*, i64** %Hp_Var
  %lngdr = load i64, i64* %R1_Var
  %lngds = load i64, i64* %R2_Var
  %lngdt = load i64, i64* %R3_Var
  %lngdu = load i64, i64* %R4_Var
  %lngdv = load i64, i64* %R5_Var
  %lngdw = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngdo( i64* %Base_Arg, i64* %lngdp, i64* %lngdq, i64 %lngdr, i64 %lngds, i64 %lngdt, i64 %lngdu, i64 %lngdv, i64 %lngdw, i64 %SpLim_Arg ) nounwind
  ret void
cf2h:
  %lngdx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lngdx, !tbaa !5
  %lngdy = load i64, i64* %R1_Var
  store i64 %lngdy, i64* %R1_Var
  %lngdz = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngdA = load i64*, i64** %Sp_Var
  %lngdB = load i64*, i64** %Hp_Var
  %lngdC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngdz( i64* %Base_Arg, i64* %lngdA, i64* %lngdB, i64 %lngdC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf0a_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf0a_info$def to i8*)
define internal ghccc void @cf0a_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 247564, i32 30, i32 0}>
{
ngdD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cf0a
cf0a:
  %lngdE = load i64*, i64** %Hp_Var
  %lngdF = getelementptr inbounds i64, i64* %lngdE, i32 19
  %lngdG = ptrtoint i64* %lngdF to i64
  %lngdH = inttoptr i64 %lngdG to i64*
  store i64* %lngdH, i64** %Hp_Var
  %lngdI = load i64*, i64** %Hp_Var
  %lngdJ = ptrtoint i64* %lngdI to i64
  %lngdK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngdL = bitcast i64* %lngdK to i64*
  %lngdM = load i64, i64* %lngdL, !tbaa !5
  %lngdN = icmp ugt i64 %lngdJ, %lngdM
  %lngdO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngdN, i1 0 )
  br i1 %lngdO, label %cf2k, label %cf2j
cf2j:
  %lngdQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7LN_info$def to i64
  %lngdP = load i64*, i64** %Hp_Var
  %lngdR = getelementptr inbounds i64, i64* %lngdP, i32 -18
  store i64 %lngdQ, i64* %lngdR, !tbaa !3
  %lngdT = load i64*, i64** %Sp_Var
  %lngdU = getelementptr inbounds i64, i64* %lngdT, i32 6
  %lngdV = bitcast i64* %lngdU to i64*
  %lngdW = load i64, i64* %lngdV, !tbaa !2
  %lngdS = load i64*, i64** %Hp_Var
  %lngdX = getelementptr inbounds i64, i64* %lngdS, i32 -16
  store i64 %lngdW, i64* %lngdX, !tbaa !3
  %lngdZ = load i64, i64* %R3_Var
  %lngdY = load i64*, i64** %Hp_Var
  %lnge0 = getelementptr inbounds i64, i64* %lngdY, i32 -15
  store i64 %lngdZ, i64* %lnge0, !tbaa !3
  %lnge2 = load i64*, i64** %Sp_Var
  %lnge3 = getelementptr inbounds i64, i64* %lnge2, i32 1
  %lnge4 = bitcast i64* %lnge3 to i64*
  %lnge5 = load i64, i64* %lnge4, !tbaa !2
  %lnge1 = load i64*, i64** %Hp_Var
  %lnge6 = getelementptr inbounds i64, i64* %lnge1, i32 -14
  store i64 %lnge5, i64* %lnge6, !tbaa !3
  %lnge8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7LE_info$def to i64
  %lnge7 = load i64*, i64** %Hp_Var
  %lnge9 = getelementptr inbounds i64, i64* %lnge7, i32 -13
  store i64 %lnge8, i64* %lnge9, !tbaa !3
  %lngeb = load i64*, i64** %Sp_Var
  %lngec = getelementptr inbounds i64, i64* %lngeb, i32 7
  %lnged = bitcast i64* %lngec to i64*
  %lngee = load i64, i64* %lnged, !tbaa !2
  %lngea = load i64*, i64** %Hp_Var
  %lngef = getelementptr inbounds i64, i64* %lngea, i32 -11
  store i64 %lngee, i64* %lngef, !tbaa !3
  %lngeh = load i64, i64* %R2_Var
  %lngeg = load i64*, i64** %Hp_Var
  %lngei = getelementptr inbounds i64, i64* %lngeg, i32 -10
  store i64 %lngeh, i64* %lngei, !tbaa !3
  %lngek = load i64*, i64** %Sp_Var
  %lngel = getelementptr inbounds i64, i64* %lngek, i32 2
  %lngem = bitcast i64* %lngel to i64*
  %lngen = load i64, i64* %lngem, !tbaa !2
  %lngej = load i64*, i64** %Hp_Var
  %lngeo = getelementptr inbounds i64, i64* %lngej, i32 -9
  store i64 %lngen, i64* %lngeo, !tbaa !3
  %lngeq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Lv_info$def to i64
  %lngep = load i64*, i64** %Hp_Var
  %lnger = getelementptr inbounds i64, i64* %lngep, i32 -8
  store i64 %lngeq, i64* %lnger, !tbaa !3
  %lnget = load i64, i64* %R1_Var
  %lnges = load i64*, i64** %Hp_Var
  %lngeu = getelementptr inbounds i64, i64* %lnges, i32 -6
  store i64 %lnget, i64* %lngeu, !tbaa !3
  %lngew = load i64*, i64** %Sp_Var
  %lngex = getelementptr inbounds i64, i64* %lngew, i32 8
  %lngey = bitcast i64* %lngex to i64*
  %lngez = load i64, i64* %lngey, !tbaa !2
  %lngev = load i64*, i64** %Hp_Var
  %lngeA = getelementptr inbounds i64, i64* %lngev, i32 -5
  store i64 %lngez, i64* %lngeA, !tbaa !3
  %lngeC = load i64*, i64** %Sp_Var
  %lngeD = getelementptr inbounds i64, i64* %lngeC, i32 11
  %lngeE = bitcast i64* %lngeD to double*
  %lngeF = load double, double* %lngeE, !tbaa !2
  %lngeB = load i64*, i64** %Hp_Var
  %lngeG = getelementptr inbounds i64, i64* %lngeB, i32 -4
  %lngeH = bitcast i64* %lngeG to double*
  store double %lngeF, double* %lngeH, !tbaa !3
  %lngeJ = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngeI = load i64*, i64** %Hp_Var
  %lngeK = getelementptr inbounds i64, i64* %lngeI, i32 -3
  store i64 %lngeJ, i64* %lngeK, !tbaa !3
  %lngeM = load i64*, i64** %Hp_Var
  %lngeN = getelementptr inbounds i64, i64* %lngeM, i32 -8
  %lngeO = ptrtoint i64* %lngeN to i64
  %lngeL = load i64*, i64** %Hp_Var
  %lngeP = getelementptr inbounds i64, i64* %lngeL, i32 -2
  store i64 %lngeO, i64* %lngeP, !tbaa !3
  %lngeR = load i64*, i64** %Hp_Var
  %lngeS = getelementptr inbounds i64, i64* %lngeR, i32 -13
  %lngeT = ptrtoint i64* %lngeS to i64
  %lngeQ = load i64*, i64** %Hp_Var
  %lngeU = getelementptr inbounds i64, i64* %lngeQ, i32 -1
  store i64 %lngeT, i64* %lngeU, !tbaa !3
  %lngeW = load i64*, i64** %Hp_Var
  %lngeX = getelementptr inbounds i64, i64* %lngeW, i32 -18
  %lngeY = ptrtoint i64* %lngeX to i64
  %lngeV = load i64*, i64** %Hp_Var
  %lngeZ = getelementptr inbounds i64, i64* %lngeV, i32 0
  store i64 %lngeY, i64* %lngeZ, !tbaa !3
  %lngf1 = load i64*, i64** %Hp_Var
  %lngf2 = ptrtoint i64* %lngf1 to i64
  %lngf3 = add i64 %lngf2, -23
  store i64 %lngf3, i64* %R1_Var
  %lngf4 = load i64*, i64** %Sp_Var
  %lngf5 = getelementptr inbounds i64, i64* %lngf4, i32 13
  %lngf6 = ptrtoint i64* %lngf5 to i64
  %lngf7 = inttoptr i64 %lngf6 to i64*
  store i64* %lngf7, i64** %Sp_Var
  %lngf8 = load i64*, i64** %Sp_Var
  %lngf9 = getelementptr inbounds i64, i64* %lngf8, i32 0
  %lngfa = bitcast i64* %lngf9 to i64*
  %lngfb = load i64, i64* %lngfa, !tbaa !2
  %lngfc = inttoptr i64 %lngfb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngfd = load i64*, i64** %Sp_Var
  %lngfe = load i64*, i64** %Hp_Var
  %lngff = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngfc( i64* %Base_Arg, i64* %lngfd, i64* %lngfe, i64 %lngff, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf2k:
  %lngfg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 152, i64* %lngfg, !tbaa !5
  %lngfh = load i64, i64* %R3_Var
  store i64 %lngfh, i64* %R3_Var
  %lngfi = load i64, i64* %R2_Var
  store i64 %lngfi, i64* %R2_Var
  %lngfj = load i64, i64* %R1_Var
  store i64 %lngfj, i64* %R1_Var
  %lngfk = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngfl = load i64*, i64** %Sp_Var
  %lngfm = load i64*, i64** %Hp_Var
  %lngfn = load i64, i64* %R1_Var
  %lngfo = load i64, i64* %R2_Var
  %lngfp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngfk( i64* %Base_Arg, i64* %lngfl, i64* %lngfm, i64 %lngfn, i64 %lngfo, i64 %lngfp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_transmitray_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_slow$def to i8*)
define ghccc void @Main_transmitray_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ngfq:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf37
cf37:
  %lngfr = load i64*, i64** %Sp_Var
  %lngfs = getelementptr inbounds i64, i64* %lngfr, i32 4
  %lngft = bitcast i64* %lngfs to i64*
  %lngfu = load i64, i64* %lngft, !tbaa !2
  store i64 %lngfu, i64* %R6_Var
  %lngfv = load i64*, i64** %Sp_Var
  %lngfw = getelementptr inbounds i64, i64* %lngfv, i32 3
  %lngfx = bitcast i64* %lngfw to i64*
  %lngfy = load i64, i64* %lngfx, !tbaa !2
  store i64 %lngfy, i64* %R5_Var
  %lngfz = load i64*, i64** %Sp_Var
  %lngfA = getelementptr inbounds i64, i64* %lngfz, i32 2
  %lngfB = bitcast i64* %lngfA to i64*
  %lngfC = load i64, i64* %lngfB, !tbaa !2
  store i64 %lngfC, i64* %R4_Var
  %lngfD = load i64*, i64** %Sp_Var
  %lngfE = getelementptr inbounds i64, i64* %lngfD, i32 1
  %lngfF = bitcast i64* %lngfE to i64*
  %lngfG = load i64, i64* %lngfF, !tbaa !2
  store i64 %lngfG, i64* %R3_Var
  %lngfH = load i64*, i64** %Sp_Var
  %lngfI = getelementptr inbounds i64, i64* %lngfH, i32 0
  %lngfJ = bitcast i64* %lngfI to i64*
  %lngfK = load i64, i64* %lngfJ, !tbaa !2
  store i64 %lngfK, i64* %R2_Var
  %lngfL = load i64, i64* %R1_Var
  store i64 %lngfL, i64* %R1_Var
  %lngfM = load i64*, i64** %Sp_Var
  %lngfN = getelementptr inbounds i64, i64* %lngfM, i32 5
  %lngfO = ptrtoint i64* %lngfN to i64
  %lngfP = inttoptr i64 %lngfO to i64*
  store i64* %lngfP, i64** %Sp_Var
  %lngfQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngfR = load i64*, i64** %Sp_Var
  %lngfS = load i64, i64* %R1_Var
  %lngfT = load i64, i64* %R2_Var
  %lngfU = load i64, i64* %R3_Var
  %lngfV = load i64, i64* %R4_Var
  %lngfW = load i64, i64* %R5_Var
  %lngfX = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngfQ( i64* %Base_Arg, i64* %lngfR, i64* %Hp_Arg, i64 %lngfS, i64 %lngfT, i64 %lngfU, i64 %lngfV, i64 %lngfW, i64 %lngfX, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Mg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mg_info$def to i8*)
define internal ghccc void @s7Mg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngfY:
  %ls7M9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf3F
cf3F:
  %lngfZ = load i64*, i64** %Sp_Var
  %lngg0 = getelementptr inbounds i64, i64* %lngfZ, i32 -4
  %lngg1 = ptrtoint i64* %lngg0 to i64
  %lngg2 = icmp ult i64 %lngg1, %SpLim_Arg
  %lngg3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngg2, i1 0 )
  br i1 %lngg3, label %cf3R, label %cf3S
cf3S:
  %lngg5 = ptrtoint i8* @stg_upd_frame_info to i64
  %lngg4 = load i64*, i64** %Sp_Var
  %lngg6 = getelementptr inbounds i64, i64* %lngg4, i32 -2
  store i64 %lngg5, i64* %lngg6, !tbaa !2
  %lngg8 = load i64, i64* %R1_Var
  %lngg7 = load i64*, i64** %Sp_Var
  %lngg9 = getelementptr inbounds i64, i64* %lngg7, i32 -1
  store i64 %lngg8, i64* %lngg9, !tbaa !2
  %lnggb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3C_info$def to i64
  %lngga = load i64*, i64** %Sp_Var
  %lnggc = getelementptr inbounds i64, i64* %lngga, i32 -4
  store i64 %lnggb, i64* %lnggc, !tbaa !2
  %lnggf = load i64, i64* %R1_Var
  %lnggg = add i64 %lnggf, 16
  %lnggh = inttoptr i64 %lnggg to i64*
  %lnggi = load i64, i64* %lnggh, !tbaa !4
  store i64 %lnggi, i64* %ls7M9
  %lnggl = load i64, i64* %R1_Var
  %lnggm = add i64 %lnggl, 24
  %lnggn = inttoptr i64 %lnggm to i64*
  %lnggo = load i64, i64* %lnggn, !tbaa !4
  store i64 %lnggo, i64* %R1_Var
  %lnggq = load i64, i64* %ls7M9
  %lnggp = load i64*, i64** %Sp_Var
  %lnggr = getelementptr inbounds i64, i64* %lnggp, i32 -3
  store i64 %lnggq, i64* %lnggr, !tbaa !2
  %lnggs = load i64*, i64** %Sp_Var
  %lnggt = getelementptr inbounds i64, i64* %lnggs, i32 -4
  %lnggu = ptrtoint i64* %lnggt to i64
  %lnggv = inttoptr i64 %lnggu to i64*
  store i64* %lnggv, i64** %Sp_Var
  %lnggw = load i64, i64* %R1_Var
  %lnggx = and i64 %lnggw, 7
  %lnggy = icmp ne i64 %lnggx, 0
  br i1 %lnggy, label %uf3Y, label %cf3D
cf3D:
  %lnggA = load i64, i64* %R1_Var
  %lnggB = inttoptr i64 %lnggA to i64*
  %lnggC = load i64, i64* %lnggB, !tbaa !4
  %lnggD = inttoptr i64 %lnggC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnggE = load i64*, i64** %Sp_Var
  %lnggF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnggD( i64* %Base_Arg, i64* %lnggE, i64* %Hp_Arg, i64 %lnggF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf3Y:
  %lnggG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3C_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnggH = load i64*, i64** %Sp_Var
  %lnggI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnggG( i64* %Base_Arg, i64* %lnggH, i64* %Hp_Arg, i64 %lnggI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf3R:
  %lnggJ = load i64, i64* %R1_Var
  store i64 %lnggJ, i64* %R1_Var
  %lnggK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnggL = bitcast i64* %lnggK to i64*
  %lnggM = load i64, i64* %lnggL, !tbaa !5
  %lnggN = inttoptr i64 %lnggM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnggO = load i64*, i64** %Sp_Var
  %lnggP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnggN( i64* %Base_Arg, i64* %lnggO, i64* %Hp_Arg, i64 %lnggP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3C_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3C_info$def to i8*)
define internal ghccc void @cf3C_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nggQ:
  %ls7Mi = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf3C
cf3C:
  %lnggR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3I_info$def to i64
  %lnggS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnggR, i64* %lnggS, !tbaa !2
  %lnggV = load i64, i64* %R1_Var
  %lnggW = add i64 %lnggV, 7
  %lnggX = inttoptr i64 %lnggW to double*
  %lnggY = load double, double* %lnggX, !tbaa !4
  store double %lnggY, double* %ls7Mi
  %lnggZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngh0 = bitcast i64* %lnggZ to i64*
  %lngh1 = load i64, i64* %lngh0, !tbaa !2
  store i64 %lngh1, i64* %R1_Var
  %lngh2 = load double, double* %ls7Mi
  %lngh3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngh4 = bitcast i64* %lngh3 to double*
  store double %lngh2, double* %lngh4, !tbaa !2
  %lngh5 = load i64, i64* %R1_Var
  %lngh6 = and i64 %lngh5, 7
  %lngh7 = icmp ne i64 %lngh6, 0
  br i1 %lngh7, label %uf3X, label %cf3J
cf3J:
  %lngh9 = load i64, i64* %R1_Var
  %lngha = inttoptr i64 %lngh9 to i64*
  %lnghb = load i64, i64* %lngha, !tbaa !4
  %lnghc = inttoptr i64 %lnghb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnghd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnghc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnghd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf3X:
  %lnghe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3I_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnghf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnghe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnghf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3I_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3I_info$def to i8*)
define internal ghccc void @cf3I_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nghg:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ml = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf3I
cf3I:
  %lnghh = load i64*, i64** %Hp_Var
  %lnghi = getelementptr inbounds i64, i64* %lnghh, i32 2
  %lnghj = ptrtoint i64* %lnghi to i64
  %lnghk = inttoptr i64 %lnghj to i64*
  store i64* %lnghk, i64** %Hp_Var
  %lnghl = load i64*, i64** %Hp_Var
  %lnghm = ptrtoint i64* %lnghl to i64
  %lnghn = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngho = bitcast i64* %lnghn to i64*
  %lnghp = load i64, i64* %lngho, !tbaa !5
  %lnghq = icmp ugt i64 %lnghm, %lnghp
  %lnghr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnghq, i1 0 )
  br i1 %lnghr, label %cf3W, label %cf3V
cf3V:
  %lnghs = load i64*, i64** %Sp_Var
  %lnght = getelementptr inbounds i64, i64* %lnghs, i32 1
  %lnghu = bitcast i64* %lnght to double*
  %lnghv = load double, double* %lnghu, !tbaa !2
  %lnghy = load i64, i64* %R1_Var
  %lnghz = add i64 %lnghy, 7
  %lnghA = inttoptr i64 %lnghz to double*
  %lnghB = load double, double* %lnghA, !tbaa !4
  %lnghC = fmul double %lnghv, %lnghB
  store double %lnghC, double* %ls7Ml
  %lnghE = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnghD = load i64*, i64** %Hp_Var
  %lnghF = getelementptr inbounds i64, i64* %lnghD, i32 -1
  store i64 %lnghE, i64* %lnghF, !tbaa !3
  %lnghH = load double, double* %ls7Ml
  %lnghG = load i64*, i64** %Hp_Var
  %lnghI = getelementptr inbounds i64, i64* %lnghG, i32 0
  %lnghJ = bitcast i64* %lnghI to double*
  store double %lnghH, double* %lnghJ, !tbaa !3
  %lnghL = load i64*, i64** %Hp_Var
  %lnghM = ptrtoint i64* %lnghL to i64
  %lnghN = add i64 %lnghM, -7
  store i64 %lnghN, i64* %R1_Var
  %lnghO = load i64*, i64** %Sp_Var
  %lnghP = getelementptr inbounds i64, i64* %lnghO, i32 2
  %lnghQ = ptrtoint i64* %lnghP to i64
  %lnghR = inttoptr i64 %lnghQ to i64*
  store i64* %lnghR, i64** %Sp_Var
  %lnghS = load i64*, i64** %Sp_Var
  %lnghT = getelementptr inbounds i64, i64* %lnghS, i32 0
  %lnghU = bitcast i64* %lnghT to i64*
  %lnghV = load i64, i64* %lnghU, !tbaa !2
  %lnghW = inttoptr i64 %lnghV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnghX = load i64*, i64** %Sp_Var
  %lnghY = load i64*, i64** %Hp_Var
  %lnghZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnghW( i64* %Base_Arg, i64* %lnghX, i64* %lnghY, i64 %lnghZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf3W:
  %lngi0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngi0, !tbaa !5
  %lngi1 = load i64, i64* %R1_Var
  store i64 %lngi1, i64* %R1_Var
  %lngi2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngi3 = load i64*, i64** %Sp_Var
  %lngi4 = load i64*, i64** %Hp_Var
  %lngi5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngi2( i64* %Base_Arg, i64* %lngi3, i64* %lngi4, i64 %lngi5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Mm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mm_info$def to i8*)
define internal ghccc void @s7Mm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngi6:
  %ls7Ma = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf46
cf46:
  %lngi7 = load i64*, i64** %Sp_Var
  %lngi8 = getelementptr inbounds i64, i64* %lngi7, i32 -4
  %lngi9 = ptrtoint i64* %lngi8 to i64
  %lngia = icmp ult i64 %lngi9, %SpLim_Arg
  %lngib = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngia, i1 0 )
  br i1 %lngib, label %cf4i, label %cf4j
cf4j:
  %lngid = ptrtoint i8* @stg_upd_frame_info to i64
  %lngic = load i64*, i64** %Sp_Var
  %lngie = getelementptr inbounds i64, i64* %lngic, i32 -2
  store i64 %lngid, i64* %lngie, !tbaa !2
  %lngig = load i64, i64* %R1_Var
  %lngif = load i64*, i64** %Sp_Var
  %lngih = getelementptr inbounds i64, i64* %lngif, i32 -1
  store i64 %lngig, i64* %lngih, !tbaa !2
  %lngij = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf43_info$def to i64
  %lngii = load i64*, i64** %Sp_Var
  %lngik = getelementptr inbounds i64, i64* %lngii, i32 -4
  store i64 %lngij, i64* %lngik, !tbaa !2
  %lngin = load i64, i64* %R1_Var
  %lngio = add i64 %lngin, 16
  %lngip = inttoptr i64 %lngio to i64*
  %lngiq = load i64, i64* %lngip, !tbaa !4
  store i64 %lngiq, i64* %ls7Ma
  %lngit = load i64, i64* %R1_Var
  %lngiu = add i64 %lngit, 24
  %lngiv = inttoptr i64 %lngiu to i64*
  %lngiw = load i64, i64* %lngiv, !tbaa !4
  store i64 %lngiw, i64* %R1_Var
  %lngiy = load i64, i64* %ls7Ma
  %lngix = load i64*, i64** %Sp_Var
  %lngiz = getelementptr inbounds i64, i64* %lngix, i32 -3
  store i64 %lngiy, i64* %lngiz, !tbaa !2
  %lngiA = load i64*, i64** %Sp_Var
  %lngiB = getelementptr inbounds i64, i64* %lngiA, i32 -4
  %lngiC = ptrtoint i64* %lngiB to i64
  %lngiD = inttoptr i64 %lngiC to i64*
  store i64* %lngiD, i64** %Sp_Var
  %lngiE = load i64, i64* %R1_Var
  %lngiF = and i64 %lngiE, 7
  %lngiG = icmp ne i64 %lngiF, 0
  br i1 %lngiG, label %uf4p, label %cf44
cf44:
  %lngiI = load i64, i64* %R1_Var
  %lngiJ = inttoptr i64 %lngiI to i64*
  %lngiK = load i64, i64* %lngiJ, !tbaa !4
  %lngiL = inttoptr i64 %lngiK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngiM = load i64*, i64** %Sp_Var
  %lngiN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngiL( i64* %Base_Arg, i64* %lngiM, i64* %Hp_Arg, i64 %lngiN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf4p:
  %lngiO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf43_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngiP = load i64*, i64** %Sp_Var
  %lngiQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngiO( i64* %Base_Arg, i64* %lngiP, i64* %Hp_Arg, i64 %lngiQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf4i:
  %lngiR = load i64, i64* %R1_Var
  store i64 %lngiR, i64* %R1_Var
  %lngiS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngiT = bitcast i64* %lngiS to i64*
  %lngiU = load i64, i64* %lngiT, !tbaa !5
  %lngiV = inttoptr i64 %lngiU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngiW = load i64*, i64** %Sp_Var
  %lngiX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngiV( i64* %Base_Arg, i64* %lngiW, i64* %Hp_Arg, i64 %lngiX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf43_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf43_info$def to i8*)
define internal ghccc void @cf43_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngiY:
  %ls7Mo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf43
cf43:
  %lngiZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf49_info$def to i64
  %lngj0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngiZ, i64* %lngj0, !tbaa !2
  %lngj3 = load i64, i64* %R1_Var
  %lngj4 = add i64 %lngj3, 7
  %lngj5 = inttoptr i64 %lngj4 to double*
  %lngj6 = load double, double* %lngj5, !tbaa !4
  store double %lngj6, double* %ls7Mo
  %lngj7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngj8 = bitcast i64* %lngj7 to i64*
  %lngj9 = load i64, i64* %lngj8, !tbaa !2
  store i64 %lngj9, i64* %R1_Var
  %lngja = load double, double* %ls7Mo
  %lngjb = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngjc = bitcast i64* %lngjb to double*
  store double %lngja, double* %lngjc, !tbaa !2
  %lngjd = load i64, i64* %R1_Var
  %lngje = and i64 %lngjd, 7
  %lngjf = icmp ne i64 %lngje, 0
  br i1 %lngjf, label %uf4o, label %cf4a
cf4a:
  %lngjh = load i64, i64* %R1_Var
  %lngji = inttoptr i64 %lngjh to i64*
  %lngjj = load i64, i64* %lngji, !tbaa !4
  %lngjk = inttoptr i64 %lngjj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngjl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngjk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngjl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf4o:
  %lngjm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf49_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngjn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngjm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngjn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf49_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf49_info$def to i8*)
define internal ghccc void @cf49_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngjo:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Mr = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf49
cf49:
  %lngjp = load i64*, i64** %Hp_Var
  %lngjq = getelementptr inbounds i64, i64* %lngjp, i32 2
  %lngjr = ptrtoint i64* %lngjq to i64
  %lngjs = inttoptr i64 %lngjr to i64*
  store i64* %lngjs, i64** %Hp_Var
  %lngjt = load i64*, i64** %Hp_Var
  %lngju = ptrtoint i64* %lngjt to i64
  %lngjv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngjw = bitcast i64* %lngjv to i64*
  %lngjx = load i64, i64* %lngjw, !tbaa !5
  %lngjy = icmp ugt i64 %lngju, %lngjx
  %lngjz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngjy, i1 0 )
  br i1 %lngjz, label %cf4n, label %cf4m
cf4m:
  %lngjA = load i64*, i64** %Sp_Var
  %lngjB = getelementptr inbounds i64, i64* %lngjA, i32 1
  %lngjC = bitcast i64* %lngjB to double*
  %lngjD = load double, double* %lngjC, !tbaa !2
  %lngjG = load i64, i64* %R1_Var
  %lngjH = add i64 %lngjG, 7
  %lngjI = inttoptr i64 %lngjH to double*
  %lngjJ = load double, double* %lngjI, !tbaa !4
  %lngjK = fmul double %lngjD, %lngjJ
  store double %lngjK, double* %ls7Mr
  %lngjM = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngjL = load i64*, i64** %Hp_Var
  %lngjN = getelementptr inbounds i64, i64* %lngjL, i32 -1
  store i64 %lngjM, i64* %lngjN, !tbaa !3
  %lngjP = load double, double* %ls7Mr
  %lngjO = load i64*, i64** %Hp_Var
  %lngjQ = getelementptr inbounds i64, i64* %lngjO, i32 0
  %lngjR = bitcast i64* %lngjQ to double*
  store double %lngjP, double* %lngjR, !tbaa !3
  %lngjT = load i64*, i64** %Hp_Var
  %lngjU = ptrtoint i64* %lngjT to i64
  %lngjV = add i64 %lngjU, -7
  store i64 %lngjV, i64* %R1_Var
  %lngjW = load i64*, i64** %Sp_Var
  %lngjX = getelementptr inbounds i64, i64* %lngjW, i32 2
  %lngjY = ptrtoint i64* %lngjX to i64
  %lngjZ = inttoptr i64 %lngjY to i64*
  store i64* %lngjZ, i64** %Sp_Var
  %lngk0 = load i64*, i64** %Sp_Var
  %lngk1 = getelementptr inbounds i64, i64* %lngk0, i32 0
  %lngk2 = bitcast i64* %lngk1 to i64*
  %lngk3 = load i64, i64* %lngk2, !tbaa !2
  %lngk4 = inttoptr i64 %lngk3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngk5 = load i64*, i64** %Sp_Var
  %lngk6 = load i64*, i64** %Hp_Var
  %lngk7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngk4( i64* %Base_Arg, i64* %lngk5, i64* %lngk6, i64 %lngk7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf4n:
  %lngk8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngk8, !tbaa !5
  %lngk9 = load i64, i64* %R1_Var
  store i64 %lngk9, i64* %R1_Var
  %lngka = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngkb = load i64*, i64** %Sp_Var
  %lngkc = load i64*, i64** %Hp_Var
  %lngkd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngka( i64* %Base_Arg, i64* %lngkb, i64* %lngkc, i64 %lngkd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Mt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mt_info$def to i8*)
define internal ghccc void @s7Mt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
ngke:
  %ls7M2 = alloca i64, i32 1
  %ls7LY = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf4G
cf4G:
  %lngkf = load i64*, i64** %Sp_Var
  %lngkg = getelementptr inbounds i64, i64* %lngkf, i32 -9
  %lngkh = ptrtoint i64* %lngkg to i64
  %lngki = icmp ult i64 %lngkh, %SpLim_Arg
  %lngkj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngki, i1 0 )
  br i1 %lngkj, label %cf5j, label %cf5k
cf5k:
  %lngkl = ptrtoint i8* @stg_upd_frame_info to i64
  %lngkk = load i64*, i64** %Sp_Var
  %lngkm = getelementptr inbounds i64, i64* %lngkk, i32 -2
  store i64 %lngkl, i64* %lngkm, !tbaa !2
  %lngko = load i64, i64* %R1_Var
  %lngkn = load i64*, i64** %Sp_Var
  %lngkp = getelementptr inbounds i64, i64* %lngkn, i32 -1
  store i64 %lngko, i64* %lngkp, !tbaa !2
  %lngkr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4D_info$def to i64
  %lngkq = load i64*, i64** %Sp_Var
  %lngks = getelementptr inbounds i64, i64* %lngkq, i32 -5
  store i64 %lngkr, i64* %lngks, !tbaa !2
  %lngkv = load i64, i64* %R1_Var
  %lngkw = add i64 %lngkv, 16
  %lngkx = inttoptr i64 %lngkw to i64*
  %lngky = load i64, i64* %lngkx, !tbaa !4
  store i64 %lngky, i64* %ls7M2
  %lngkB = load i64, i64* %R1_Var
  %lngkC = add i64 %lngkB, 24
  %lngkD = inttoptr i64 %lngkC to i64*
  %lngkE = load i64, i64* %lngkD, !tbaa !4
  store i64 %lngkE, i64* %ls7LY
  %lngkH = load i64, i64* %R1_Var
  %lngkI = add i64 %lngkH, 32
  %lngkJ = inttoptr i64 %lngkI to i64*
  %lngkK = load i64, i64* %lngkJ, !tbaa !4
  store i64 %lngkK, i64* %R1_Var
  %lngkM = load i64, i64* %ls7LY
  %lngkL = load i64*, i64** %Sp_Var
  %lngkN = getelementptr inbounds i64, i64* %lngkL, i32 -4
  store i64 %lngkM, i64* %lngkN, !tbaa !2
  %lngkP = load i64, i64* %ls7M2
  %lngkO = load i64*, i64** %Sp_Var
  %lngkQ = getelementptr inbounds i64, i64* %lngkO, i32 -3
  store i64 %lngkP, i64* %lngkQ, !tbaa !2
  %lngkR = load i64*, i64** %Sp_Var
  %lngkS = getelementptr inbounds i64, i64* %lngkR, i32 -5
  %lngkT = ptrtoint i64* %lngkS to i64
  %lngkU = inttoptr i64 %lngkT to i64*
  store i64* %lngkU, i64** %Sp_Var
  %lngkV = load i64, i64* %R1_Var
  %lngkW = and i64 %lngkV, 7
  %lngkX = icmp ne i64 %lngkW, 0
  br i1 %lngkX, label %uf8f, label %cf4E
cf4E:
  %lngkZ = load i64, i64* %R1_Var
  %lngl0 = inttoptr i64 %lngkZ to i64*
  %lngl1 = load i64, i64* %lngl0, !tbaa !4
  %lngl2 = inttoptr i64 %lngl1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngl3 = load i64*, i64** %Sp_Var
  %lngl4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngl2( i64* %Base_Arg, i64* %lngl3, i64* %Hp_Arg, i64 %lngl4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8f:
  %lngl5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4D_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngl6 = load i64*, i64** %Sp_Var
  %lngl7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngl5( i64* %Base_Arg, i64* %lngl6, i64* %Hp_Arg, i64 %lngl7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf5j:
  %lngl8 = load i64, i64* %R1_Var
  store i64 %lngl8, i64* %R1_Var
  %lngl9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngla = bitcast i64* %lngl9 to i64*
  %lnglb = load i64, i64* %lngla, !tbaa !5
  %lnglc = inttoptr i64 %lnglb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngld = load i64*, i64** %Sp_Var
  %lngle = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnglc( i64* %Base_Arg, i64* %lngld, i64* %Hp_Arg, i64 %lngle, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4D_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4D_info$def to i8*)
define internal ghccc void @cf4D_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nglf:
  %ls7Mv = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf4D
cf4D:
  %lnglg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4J_info$def to i64
  %lnglh = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnglg, i64* %lnglh, !tbaa !2
  %lnglk = load i64, i64* %R1_Var
  %lngll = add i64 %lnglk, 7
  %lnglm = inttoptr i64 %lngll to double*
  %lngln = load double, double* %lnglm, !tbaa !4
  store double %lngln, double* %ls7Mv
  %lnglo = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnglp = bitcast i64* %lnglo to i64*
  %lnglq = load i64, i64* %lnglp, !tbaa !2
  store i64 %lnglq, i64* %R1_Var
  %lnglr = load double, double* %ls7Mv
  %lngls = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnglt = bitcast i64* %lngls to double*
  store double %lnglr, double* %lnglt, !tbaa !2
  %lnglu = load i64, i64* %R1_Var
  %lnglv = and i64 %lnglu, 7
  %lnglw = icmp ne i64 %lnglv, 0
  br i1 %lnglw, label %uf8e, label %cf4K
cf4K:
  %lngly = load i64, i64* %R1_Var
  %lnglz = inttoptr i64 %lngly to i64*
  %lnglA = load i64, i64* %lnglz, !tbaa !4
  %lnglB = inttoptr i64 %lnglA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnglC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnglB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnglC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8e:
  %lnglD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4J_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnglE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnglD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnglE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4J_info$def to i8*)
define internal ghccc void @cf4J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nglF:
  %ls7My = alloca i64, i32 1
  %ls7Mz = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf4J
cf4J:
  %lnglH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4O_info$def to i64
  %lnglG = load i64*, i64** %Sp_Var
  %lnglI = getelementptr inbounds i64, i64* %lnglG, i32 -2
  store i64 %lnglH, i64* %lnglI, !tbaa !2
  %lnglL = load i64, i64* %R1_Var
  %lnglM = add i64 %lnglL, 15
  %lnglN = inttoptr i64 %lnglM to i64*
  %lnglO = load i64, i64* %lnglN, !tbaa !4
  store i64 %lnglO, i64* %ls7My
  %lnglR = load i64, i64* %R1_Var
  %lnglS = add i64 %lnglR, 23
  %lnglT = inttoptr i64 %lnglS to i64*
  %lnglU = load i64, i64* %lnglT, !tbaa !4
  store i64 %lnglU, i64* %ls7Mz
  %lnglX = load i64, i64* %R1_Var
  %lnglY = add i64 %lnglX, 7
  %lnglZ = inttoptr i64 %lnglY to i64*
  %lngm0 = load i64, i64* %lnglZ, !tbaa !4
  store i64 %lngm0, i64* %R1_Var
  %lngm2 = load i64, i64* %ls7Mz
  %lngm1 = load i64*, i64** %Sp_Var
  %lngm3 = getelementptr inbounds i64, i64* %lngm1, i32 -1
  store i64 %lngm2, i64* %lngm3, !tbaa !2
  %lngm5 = load i64, i64* %ls7My
  %lngm4 = load i64*, i64** %Sp_Var
  %lngm6 = getelementptr inbounds i64, i64* %lngm4, i32 0
  store i64 %lngm5, i64* %lngm6, !tbaa !2
  %lngm7 = load i64*, i64** %Sp_Var
  %lngm8 = getelementptr inbounds i64, i64* %lngm7, i32 -2
  %lngm9 = ptrtoint i64* %lngm8 to i64
  %lngma = inttoptr i64 %lngm9 to i64*
  store i64* %lngma, i64** %Sp_Var
  %lngmb = load i64, i64* %R1_Var
  %lngmc = and i64 %lngmb, 7
  %lngmd = icmp ne i64 %lngmc, 0
  br i1 %lngmd, label %uf8g, label %cf4P
cf4P:
  %lngmf = load i64, i64* %R1_Var
  %lngmg = inttoptr i64 %lngmf to i64*
  %lngmh = load i64, i64* %lngmg, !tbaa !4
  %lngmi = inttoptr i64 %lngmh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngmj = load i64*, i64** %Sp_Var
  %lngmk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngmi( i64* %Base_Arg, i64* %lngmj, i64* %Hp_Arg, i64 %lngmk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8g:
  %lngml = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4O_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngmm = load i64*, i64** %Sp_Var
  %lngmn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngml( i64* %Base_Arg, i64* %lngmm, i64* %Hp_Arg, i64 %lngmn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4O_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4O_info$def to i8*)
define internal ghccc void @cf4O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 260, i32 30, i32 0}>
{
ngmo:
  %ls7MB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf4O
cf4O:
  %lngmp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4T_info$def to i64
  %lngmq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngmp, i64* %lngmq, !tbaa !2
  %lngmt = load i64, i64* %R1_Var
  %lngmu = add i64 %lngmt, 7
  %lngmv = inttoptr i64 %lngmu to double*
  %lngmw = load double, double* %lngmv, !tbaa !4
  store double %lngmw, double* %ls7MB
  %lngmx = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngmy = bitcast i64* %lngmx to i64*
  %lngmz = load i64, i64* %lngmy, !tbaa !2
  store i64 %lngmz, i64* %R1_Var
  %lngmA = load double, double* %ls7MB
  %lngmB = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngmC = bitcast i64* %lngmB to double*
  store double %lngmA, double* %lngmC, !tbaa !2
  %lngmD = load i64, i64* %R1_Var
  %lngmE = and i64 %lngmD, 7
  %lngmF = icmp ne i64 %lngmE, 0
  br i1 %lngmF, label %uf8h, label %cf4U
cf4U:
  %lngmH = load i64, i64* %R1_Var
  %lngmI = inttoptr i64 %lngmH to i64*
  %lngmJ = load i64, i64* %lngmI, !tbaa !4
  %lngmK = inttoptr i64 %lngmJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngmL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngmK( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngmL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8h:
  %lngmM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4T_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngmN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngmM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngmN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4T_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4T_info$def to i8*)
define internal ghccc void @cf4T_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 388, i32 30, i32 0}>
{
ngmO:
  %ls7MD = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf4T
cf4T:
  %lngmP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4Y_info$def to i64
  %lngmQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngmP, i64* %lngmQ, !tbaa !2
  %lngmT = load i64, i64* %R1_Var
  %lngmU = add i64 %lngmT, 7
  %lngmV = inttoptr i64 %lngmU to double*
  %lngmW = load double, double* %lngmV, !tbaa !4
  store double %lngmW, double* %ls7MD
  %lngmX = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngmY = bitcast i64* %lngmX to i64*
  %lngmZ = load i64, i64* %lngmY, !tbaa !2
  store i64 %lngmZ, i64* %R1_Var
  %lngn0 = load double, double* %ls7MD
  %lngn1 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngn2 = bitcast i64* %lngn1 to double*
  store double %lngn0, double* %lngn2, !tbaa !2
  %lngn3 = load i64, i64* %R1_Var
  %lngn4 = and i64 %lngn3, 7
  %lngn5 = icmp ne i64 %lngn4, 0
  br i1 %lngn5, label %uf8i, label %cf4Z
cf4Z:
  %lngn7 = load i64, i64* %R1_Var
  %lngn8 = inttoptr i64 %lngn7 to i64*
  %lngn9 = load i64, i64* %lngn8, !tbaa !4
  %lngna = inttoptr i64 %lngn9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngnb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngna( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngnb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8i:
  %lngnc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4Y_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngnd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngnc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngnd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4Y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4Y_info$def to i8*)
define internal ghccc void @cf4Y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
ngne:
  %ls7MF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf4Y
cf4Y:
  %lngnf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf53_info$def to i64
  %lngng = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngnf, i64* %lngng, !tbaa !2
  %lngnj = load i64, i64* %R1_Var
  %lngnk = add i64 %lngnj, 7
  %lngnl = inttoptr i64 %lngnk to double*
  %lngnm = load double, double* %lngnl, !tbaa !4
  store double %lngnm, double* %ls7MF
  %lngnn = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lngno = bitcast i64* %lngnn to i64*
  %lngnp = load i64, i64* %lngno, !tbaa !2
  store i64 %lngnp, i64* %R1_Var
  %lngnq = load double, double* %ls7MF
  %lngnr = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lngns = bitcast i64* %lngnr to double*
  store double %lngnq, double* %lngns, !tbaa !2
  %lngnt = load i64, i64* %R1_Var
  %lngnu = and i64 %lngnt, 7
  %lngnv = icmp ne i64 %lngnu, 0
  br i1 %lngnv, label %uf8j, label %cf54
cf54:
  %lngnx = load i64, i64* %R1_Var
  %lngny = inttoptr i64 %lngnx to i64*
  %lngnz = load i64, i64* %lngny, !tbaa !4
  %lngnA = inttoptr i64 %lngnz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngnB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngnA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngnB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8j:
  %lngnC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf53_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngnD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngnC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngnD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf53_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf53_info$def to i8*)
define internal ghccc void @cf53_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
ngnE:
  %ls7MI = alloca i64, i32 1
  %ls7MJ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf53
cf53:
  %lngnG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf58_info$def to i64
  %lngnF = load i64*, i64** %Sp_Var
  %lngnH = getelementptr inbounds i64, i64* %lngnF, i32 -2
  store i64 %lngnG, i64* %lngnH, !tbaa !2
  %lngnK = load i64, i64* %R1_Var
  %lngnL = add i64 %lngnK, 15
  %lngnM = inttoptr i64 %lngnL to i64*
  %lngnN = load i64, i64* %lngnM, !tbaa !4
  store i64 %lngnN, i64* %ls7MI
  %lngnQ = load i64, i64* %R1_Var
  %lngnR = add i64 %lngnQ, 23
  %lngnS = inttoptr i64 %lngnR to i64*
  %lngnT = load i64, i64* %lngnS, !tbaa !4
  store i64 %lngnT, i64* %ls7MJ
  %lngnW = load i64, i64* %R1_Var
  %lngnX = add i64 %lngnW, 7
  %lngnY = inttoptr i64 %lngnX to i64*
  %lngnZ = load i64, i64* %lngnY, !tbaa !4
  store i64 %lngnZ, i64* %R1_Var
  %lngo1 = load i64, i64* %ls7MJ
  %lngo0 = load i64*, i64** %Sp_Var
  %lngo2 = getelementptr inbounds i64, i64* %lngo0, i32 -1
  store i64 %lngo1, i64* %lngo2, !tbaa !2
  %lngo4 = load i64, i64* %ls7MI
  %lngo3 = load i64*, i64** %Sp_Var
  %lngo5 = getelementptr inbounds i64, i64* %lngo3, i32 0
  store i64 %lngo4, i64* %lngo5, !tbaa !2
  %lngo6 = load i64*, i64** %Sp_Var
  %lngo7 = getelementptr inbounds i64, i64* %lngo6, i32 -2
  %lngo8 = ptrtoint i64* %lngo7 to i64
  %lngo9 = inttoptr i64 %lngo8 to i64*
  store i64* %lngo9, i64** %Sp_Var
  %lngoa = load i64, i64* %R1_Var
  %lngob = and i64 %lngoa, 7
  %lngoc = icmp ne i64 %lngob, 0
  br i1 %lngoc, label %uf8k, label %cf59
cf59:
  %lngoe = load i64, i64* %R1_Var
  %lngof = inttoptr i64 %lngoe to i64*
  %lngog = load i64, i64* %lngof, !tbaa !4
  %lngoh = inttoptr i64 %lngog to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngoi = load i64*, i64** %Sp_Var
  %lngoj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngoh( i64* %Base_Arg, i64* %lngoi, i64* %Hp_Arg, i64 %lngoj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8k:
  %lngok = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf58_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngol = load i64*, i64** %Sp_Var
  %lngom = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngok( i64* %Base_Arg, i64* %lngol, i64* %Hp_Arg, i64 %lngom, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf58_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf58_info$def to i8*)
define internal ghccc void @cf58_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3846, i32 30, i32 0}>
{
ngon:
  %ls7ML = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf58
cf58:
  %lngoo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5d_info$def to i64
  %lngop = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngoo, i64* %lngop, !tbaa !2
  %lngos = load i64, i64* %R1_Var
  %lngot = add i64 %lngos, 7
  %lngou = inttoptr i64 %lngot to double*
  %lngov = load double, double* %lngou, !tbaa !4
  store double %lngov, double* %ls7ML
  %lngow = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngox = bitcast i64* %lngow to i64*
  %lngoy = load i64, i64* %lngox, !tbaa !2
  store i64 %lngoy, i64* %R1_Var
  %lngoz = load double, double* %ls7ML
  %lngoA = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngoB = bitcast i64* %lngoA to double*
  store double %lngoz, double* %lngoB, !tbaa !2
  %lngoC = load i64, i64* %R1_Var
  %lngoD = and i64 %lngoC, 7
  %lngoE = icmp ne i64 %lngoD, 0
  br i1 %lngoE, label %uf8l, label %cf5e
cf5e:
  %lngoG = load i64, i64* %R1_Var
  %lngoH = inttoptr i64 %lngoG to i64*
  %lngoI = load i64, i64* %lngoH, !tbaa !4
  %lngoJ = inttoptr i64 %lngoI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngoK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngoJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngoK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8l:
  %lngoL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5d_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngoM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngoL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngoM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf5d_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5d_info$def to i8*)
define internal ghccc void @cf5d_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3974, i32 30, i32 0}>
{
ngoN:
  %ls7MN = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf5d
cf5d:
  %lngoO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5i_info$def to i64
  %lngoP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngoO, i64* %lngoP, !tbaa !2
  %lngoS = load i64, i64* %R1_Var
  %lngoT = add i64 %lngoS, 7
  %lngoU = inttoptr i64 %lngoT to double*
  %lngoV = load double, double* %lngoU, !tbaa !4
  store double %lngoV, double* %ls7MN
  %lngoW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngoX = bitcast i64* %lngoW to i64*
  %lngoY = load i64, i64* %lngoX, !tbaa !2
  store i64 %lngoY, i64* %R1_Var
  %lngoZ = load double, double* %ls7MN
  %lngp0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngp1 = bitcast i64* %lngp0 to double*
  store double %lngoZ, double* %lngp1, !tbaa !2
  %lngp2 = load i64, i64* %R1_Var
  %lngp3 = and i64 %lngp2, 7
  %lngp4 = icmp ne i64 %lngp3, 0
  br i1 %lngp4, label %uf8m, label %cf5t
cf5t:
  %lngp6 = load i64, i64* %R1_Var
  %lngp7 = inttoptr i64 %lngp6 to i64*
  %lngp8 = load i64, i64* %lngp7, !tbaa !4
  %lngp9 = inttoptr i64 %lngp8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngpa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngp9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngpa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf8m:
  %lngpb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngpc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngpb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngpc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf5i_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf5i_info$def to i8*)
define internal ghccc void @cf5i_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4038, i32 30, i32 0}>
{
ngpd:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Mv = alloca double, i32 1
  %ls7MB = alloca double, i32 1
  %ls7MD = alloca double, i32 1
  %ls7MF = alloca double, i32 1
  %ls7ML = alloca double, i32 1
  %ls7MN = alloca double, i32 1
  %ls7MP = alloca double, i32 1
  %ls7MQ = alloca double, i32 1
  %ls7MX = alloca double, i32 1
  %lcf6d = alloca double, i32 1
  %ls7N3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Ni = alloca double, i32 1
  %ls7Nj = alloca double, i32 1
  %ls7Nk = alloca double, i32 1
  %lcf7m = alloca double, i32 1
  %ls7Nq = alloca double, i32 1
  br label %cf5i
cf5i:
  %lngpe = load i64*, i64** %Hp_Var
  %lngpf = getelementptr inbounds i64, i64* %lngpe, i32 10
  %lngpg = ptrtoint i64* %lngpf to i64
  %lngph = inttoptr i64 %lngpg to i64*
  store i64* %lngph, i64** %Hp_Var
  %lngpi = load i64*, i64** %Hp_Var
  %lngpj = ptrtoint i64* %lngpi to i64
  %lngpk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngpl = bitcast i64* %lngpk to i64*
  %lngpm = load i64, i64* %lngpl, !tbaa !5
  %lngpn = icmp ugt i64 %lngpj, %lngpm
  %lngpo = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngpn, i1 0 )
  br i1 %lngpo, label %cf5z, label %cf5y
cf5y:
  %lngpp = load i64*, i64** %Sp_Var
  %lngpq = getelementptr inbounds i64, i64* %lngpp, i32 5
  %lngpr = bitcast i64* %lngpq to double*
  %lngps = load double, double* %lngpr, !tbaa !2
  store double %lngps, double* %ls7Mv
  %lngpt = load i64*, i64** %Sp_Var
  %lngpu = getelementptr inbounds i64, i64* %lngpt, i32 4
  %lngpv = bitcast i64* %lngpu to double*
  %lngpw = load double, double* %lngpv, !tbaa !2
  store double %lngpw, double* %ls7MB
  %lngpx = load i64*, i64** %Sp_Var
  %lngpy = getelementptr inbounds i64, i64* %lngpx, i32 3
  %lngpz = bitcast i64* %lngpy to double*
  %lngpA = load double, double* %lngpz, !tbaa !2
  store double %lngpA, double* %ls7MD
  %lngpB = load i64*, i64** %Sp_Var
  %lngpC = getelementptr inbounds i64, i64* %lngpB, i32 6
  %lngpD = bitcast i64* %lngpC to double*
  %lngpE = load double, double* %lngpD, !tbaa !2
  store double %lngpE, double* %ls7MF
  %lngpF = load i64*, i64** %Sp_Var
  %lngpG = getelementptr inbounds i64, i64* %lngpF, i32 2
  %lngpH = bitcast i64* %lngpG to double*
  %lngpI = load double, double* %lngpH, !tbaa !2
  store double %lngpI, double* %ls7ML
  %lngpJ = load i64*, i64** %Sp_Var
  %lngpK = getelementptr inbounds i64, i64* %lngpJ, i32 1
  %lngpL = bitcast i64* %lngpK to double*
  %lngpM = load double, double* %lngpL, !tbaa !2
  store double %lngpM, double* %ls7MN
  %lngpP = load i64, i64* %R1_Var
  %lngpQ = add i64 %lngpP, 7
  %lngpR = inttoptr i64 %lngpQ to double*
  %lngpS = load double, double* %lngpR, !tbaa !4
  store double %lngpS, double* %ls7MP
  %lngpT = load double, double* %ls7MB
  %lngpU = load double, double* %ls7ML
  %lngpV = fmul double %lngpT, %lngpU
  %lngpW = load double, double* %ls7MD
  %lngpX = load double, double* %ls7MN
  %lngpY = fmul double %lngpW, %lngpX
  %lngpZ = fadd double %lngpV, %lngpY
  %lngq0 = load double, double* %ls7MF
  %lngq1 = load double, double* %ls7MP
  %lngq2 = fmul double %lngq0, %lngq1
  %lngq3 = fadd double %lngpZ, %lngq2
  %lngq4 = fsub double 0x8000000000000000, %lngq3
  store double %lngq4, double* %ls7MQ
  %lngq5 = load double, double* %ls7MQ
  %lngq6 = fcmp olt double %lngq5, 0x0000000000000000
  %lngq7 = zext i1 %lngq6 to i64
  switch i64 %lngq7, label %cf6W [i64 1, label %cf8d]
cf6W:
  %lngq8 = load double, double* %ls7Mv
  %lngq9 = load double, double* %ls7Mv
  %lngqa = fmul double %lngq8, %lngq9
  %lngqb = load double, double* %ls7MQ
  %lngqc = load double, double* %ls7MQ
  %lngqd = fmul double %lngqb, %lngqc
  %lngqe = fsub double 0x3FF0000000000000, %lngqd
  %lngqf = fmul double %lngqa, %lngqe
  %lngqg = fsub double 0x3FF0000000000000, %lngqf
  store double %lngqg, double* %ls7MX
  %lngqh = load double, double* %ls7MX
  %lngqi = fcmp olt double %lngqh, 0x0000000000000000
  %lngqj = zext i1 %lngqi to i64
  switch i64 %lngqj, label %cf6T [i64 1, label %cf6U]
cf6T:
  %lngqk = load double, double* %ls7MX
  %lngql = call ccc double (double) @llvm.sqrt.f64( double %lngqk ) nounwind
  store double %lngql, double* %lcf6d
  %lngqn = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngqm = load i64*, i64** %Hp_Var
  %lngqo = getelementptr inbounds i64, i64* %lngqm, i32 -9
  store i64 %lngqn, i64* %lngqo, !tbaa !3
  %lngqp = load double, double* %ls7Mv
  %lngqq = load double, double* %ls7MQ
  %lngqr = fmul double %lngqp, %lngqq
  %lngqs = load double, double* %lcf6d
  %lngqt = fsub double %lngqr, %lngqs
  store double %lngqt, double* %ls7N3
  %lngqv = load double, double* %ls7N3
  %lngqw = load double, double* %ls7MP
  %lngqx = fmul double %lngqv, %lngqw
  %lngqy = load double, double* %ls7Mv
  %lngqz = load double, double* %ls7MF
  %lngqA = fmul double %lngqy, %lngqz
  %lngqB = fadd double %lngqx, %lngqA
  %lngqu = load i64*, i64** %Hp_Var
  %lngqC = getelementptr inbounds i64, i64* %lngqu, i32 -8
  %lngqD = bitcast i64* %lngqC to double*
  store double %lngqB, double* %lngqD, !tbaa !3
  %lngqF = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngqE = load i64*, i64** %Hp_Var
  %lngqG = getelementptr inbounds i64, i64* %lngqE, i32 -7
  store i64 %lngqF, i64* %lngqG, !tbaa !3
  %lngqI = load double, double* %ls7N3
  %lngqJ = load double, double* %ls7MN
  %lngqK = fmul double %lngqI, %lngqJ
  %lngqL = load double, double* %ls7Mv
  %lngqM = load double, double* %ls7MD
  %lngqN = fmul double %lngqL, %lngqM
  %lngqO = fadd double %lngqK, %lngqN
  %lngqH = load i64*, i64** %Hp_Var
  %lngqP = getelementptr inbounds i64, i64* %lngqH, i32 -6
  %lngqQ = bitcast i64* %lngqP to double*
  store double %lngqO, double* %lngqQ, !tbaa !3
  %lngqS = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngqR = load i64*, i64** %Hp_Var
  %lngqT = getelementptr inbounds i64, i64* %lngqR, i32 -5
  store i64 %lngqS, i64* %lngqT, !tbaa !3
  %lngqV = load double, double* %ls7N3
  %lngqW = load double, double* %ls7ML
  %lngqX = fmul double %lngqV, %lngqW
  %lngqY = load double, double* %ls7Mv
  %lngqZ = load double, double* %ls7MB
  %lngr0 = fmul double %lngqY, %lngqZ
  %lngr1 = fadd double %lngqX, %lngr0
  %lngqU = load i64*, i64** %Hp_Var
  %lngr2 = getelementptr inbounds i64, i64* %lngqU, i32 -4
  %lngr3 = bitcast i64* %lngr2 to double*
  store double %lngr1, double* %lngr3, !tbaa !3
  %lngr5 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngr4 = load i64*, i64** %Hp_Var
  %lngr6 = getelementptr inbounds i64, i64* %lngr4, i32 -3
  store i64 %lngr5, i64* %lngr6, !tbaa !3
  %lngr9 = load i64*, i64** %Hp_Var
  %lngra = ptrtoint i64* %lngr9 to i64
  %lngrb = add i64 %lngra, -39
  %lngr7 = load i64*, i64** %Hp_Var
  %lngrc = getelementptr inbounds i64, i64* %lngr7, i32 -2
  store i64 %lngrb, i64* %lngrc, !tbaa !3
  %lngrf = load i64*, i64** %Hp_Var
  %lngrg = ptrtoint i64* %lngrf to i64
  %lngrh = add i64 %lngrg, -55
  %lngrd = load i64*, i64** %Hp_Var
  %lngri = getelementptr inbounds i64, i64* %lngrd, i32 -1
  store i64 %lngrh, i64* %lngri, !tbaa !3
  %lngrl = load i64*, i64** %Hp_Var
  %lngrm = ptrtoint i64* %lngrl to i64
  %lngrn = add i64 %lngrm, -71
  %lngrj = load i64*, i64** %Hp_Var
  %lngro = getelementptr inbounds i64, i64* %lngrj, i32 0
  store i64 %lngrn, i64* %lngro, !tbaa !3
  %lngrq = load i64*, i64** %Hp_Var
  %lngrr = ptrtoint i64* %lngrq to i64
  %lngrs = add i64 %lngrr, -23
  store i64 %lngrs, i64* %R1_Var
  %lngrt = load i64*, i64** %Sp_Var
  %lngru = getelementptr inbounds i64, i64* %lngrt, i32 7
  %lngrv = ptrtoint i64* %lngru to i64
  %lngrw = inttoptr i64 %lngrv to i64*
  store i64* %lngrw, i64** %Sp_Var
  %lngrx = load i64*, i64** %Sp_Var
  %lngry = getelementptr inbounds i64, i64* %lngrx, i32 0
  %lngrz = bitcast i64* %lngry to i64*
  %lngrA = load i64, i64* %lngrz, !tbaa !2
  %lngrB = inttoptr i64 %lngrA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngrC = load i64*, i64** %Sp_Var
  %lngrD = load i64*, i64** %Hp_Var
  %lngrE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngrB( i64* %Base_Arg, i64* %lngrC, i64* %lngrD, i64 %lngrE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf6U:
  %lngrF = load i64*, i64** %Hp_Var
  %lngrG = getelementptr inbounds i64, i64* %lngrF, i32 -10
  %lngrH = ptrtoint i64* %lngrG to i64
  %lngrI = inttoptr i64 %lngrH to i64*
  store i64* %lngrI, i64** %Hp_Var
  %lngrJ = ptrtoint %Main_lookat_closure_struct* @Main_lookat_closure$def to i64
  %lngrK = add i64 %lngrJ, 1
  store i64 %lngrK, i64* %R1_Var
  %lngrL = load i64*, i64** %Sp_Var
  %lngrM = getelementptr inbounds i64, i64* %lngrL, i32 7
  %lngrN = ptrtoint i64* %lngrM to i64
  %lngrO = inttoptr i64 %lngrN to i64*
  store i64* %lngrO, i64** %Sp_Var
  %lngrP = load i64*, i64** %Sp_Var
  %lngrQ = getelementptr inbounds i64, i64* %lngrP, i32 0
  %lngrR = bitcast i64* %lngrQ to i64*
  %lngrS = load i64, i64* %lngrR, !tbaa !2
  %lngrT = inttoptr i64 %lngrS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngrU = load i64*, i64** %Sp_Var
  %lngrV = load i64*, i64** %Hp_Var
  %lngrW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngrT( i64* %Base_Arg, i64* %lngrU, i64* %lngrV, i64 %lngrW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf8d:
  %lngrX = load double, double* %ls7Mv
  %lngrY = fdiv double 0x3FF0000000000000, %lngrX
  store double %lngrY, double* %ls7Ni
  %lngrZ = load double, double* %ls7MQ
  %lngs0 = fsub double 0x8000000000000000, %lngrZ
  store double %lngs0, double* %ls7Nj
  %lngs1 = load double, double* %ls7Ni
  %lngs2 = load double, double* %ls7Ni
  %lngs3 = fmul double %lngs1, %lngs2
  %lngs4 = load double, double* %ls7Nj
  %lngs5 = load double, double* %ls7Nj
  %lngs6 = fmul double %lngs4, %lngs5
  %lngs7 = fsub double 0x3FF0000000000000, %lngs6
  %lngs8 = fmul double %lngs3, %lngs7
  %lngs9 = fsub double 0x3FF0000000000000, %lngs8
  store double %lngs9, double* %ls7Nk
  %lngsa = load double, double* %ls7Nk
  %lngsb = fcmp olt double %lngsa, 0x0000000000000000
  %lngsc = zext i1 %lngsb to i64
  switch i64 %lngsc, label %cf8b [i64 1, label %cf6U]
cf8b:
  %lngsd = load double, double* %ls7Nk
  %lngse = call ccc double (double) @llvm.sqrt.f64( double %lngsd ) nounwind
  store double %lngse, double* %lcf7m
  %lngsg = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngsf = load i64*, i64** %Hp_Var
  %lngsh = getelementptr inbounds i64, i64* %lngsf, i32 -9
  store i64 %lngsg, i64* %lngsh, !tbaa !3
  %lngsi = load double, double* %ls7Ni
  %lngsj = load double, double* %ls7Nj
  %lngsk = fmul double %lngsi, %lngsj
  %lngsl = load double, double* %lcf7m
  %lngsm = fsub double %lngsk, %lngsl
  store double %lngsm, double* %ls7Nq
  %lngso = load double, double* %ls7Nq
  %lngsp = load double, double* %ls7MP
  %lngsq = fmul double %lngsp, 0xBFF0000000000000
  %lngsr = fmul double %lngso, %lngsq
  %lngss = load double, double* %ls7Ni
  %lngst = load double, double* %ls7MF
  %lngsu = fmul double %lngss, %lngst
  %lngsv = fadd double %lngsr, %lngsu
  %lngsn = load i64*, i64** %Hp_Var
  %lngsw = getelementptr inbounds i64, i64* %lngsn, i32 -8
  %lngsx = bitcast i64* %lngsw to double*
  store double %lngsv, double* %lngsx, !tbaa !3
  %lngsz = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngsy = load i64*, i64** %Hp_Var
  %lngsA = getelementptr inbounds i64, i64* %lngsy, i32 -7
  store i64 %lngsz, i64* %lngsA, !tbaa !3
  %lngsC = load double, double* %ls7Nq
  %lngsD = load double, double* %ls7MN
  %lngsE = fmul double %lngsD, 0xBFF0000000000000
  %lngsF = fmul double %lngsC, %lngsE
  %lngsG = load double, double* %ls7Ni
  %lngsH = load double, double* %ls7MD
  %lngsI = fmul double %lngsG, %lngsH
  %lngsJ = fadd double %lngsF, %lngsI
  %lngsB = load i64*, i64** %Hp_Var
  %lngsK = getelementptr inbounds i64, i64* %lngsB, i32 -6
  %lngsL = bitcast i64* %lngsK to double*
  store double %lngsJ, double* %lngsL, !tbaa !3
  %lngsN = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngsM = load i64*, i64** %Hp_Var
  %lngsO = getelementptr inbounds i64, i64* %lngsM, i32 -5
  store i64 %lngsN, i64* %lngsO, !tbaa !3
  %lngsQ = load double, double* %ls7Nq
  %lngsR = load double, double* %ls7ML
  %lngsS = fmul double %lngsR, 0xBFF0000000000000
  %lngsT = fmul double %lngsQ, %lngsS
  %lngsU = load double, double* %ls7Ni
  %lngsV = load double, double* %ls7MB
  %lngsW = fmul double %lngsU, %lngsV
  %lngsX = fadd double %lngsT, %lngsW
  %lngsP = load i64*, i64** %Hp_Var
  %lngsY = getelementptr inbounds i64, i64* %lngsP, i32 -4
  %lngsZ = bitcast i64* %lngsY to double*
  store double %lngsX, double* %lngsZ, !tbaa !3
  %lngt1 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngt0 = load i64*, i64** %Hp_Var
  %lngt2 = getelementptr inbounds i64, i64* %lngt0, i32 -3
  store i64 %lngt1, i64* %lngt2, !tbaa !3
  %lngt5 = load i64*, i64** %Hp_Var
  %lngt6 = ptrtoint i64* %lngt5 to i64
  %lngt7 = add i64 %lngt6, -39
  %lngt3 = load i64*, i64** %Hp_Var
  %lngt8 = getelementptr inbounds i64, i64* %lngt3, i32 -2
  store i64 %lngt7, i64* %lngt8, !tbaa !3
  %lngtb = load i64*, i64** %Hp_Var
  %lngtc = ptrtoint i64* %lngtb to i64
  %lngtd = add i64 %lngtc, -55
  %lngt9 = load i64*, i64** %Hp_Var
  %lngte = getelementptr inbounds i64, i64* %lngt9, i32 -1
  store i64 %lngtd, i64* %lngte, !tbaa !3
  %lngth = load i64*, i64** %Hp_Var
  %lngti = ptrtoint i64* %lngth to i64
  %lngtj = add i64 %lngti, -71
  %lngtf = load i64*, i64** %Hp_Var
  %lngtk = getelementptr inbounds i64, i64* %lngtf, i32 0
  store i64 %lngtj, i64* %lngtk, !tbaa !3
  %lngtm = load i64*, i64** %Hp_Var
  %lngtn = ptrtoint i64* %lngtm to i64
  %lngto = add i64 %lngtn, -23
  store i64 %lngto, i64* %R1_Var
  %lngtp = load i64*, i64** %Sp_Var
  %lngtq = getelementptr inbounds i64, i64* %lngtp, i32 7
  %lngtr = ptrtoint i64* %lngtq to i64
  %lngts = inttoptr i64 %lngtr to i64*
  store i64* %lngts, i64** %Sp_Var
  %lngtt = load i64*, i64** %Sp_Var
  %lngtu = getelementptr inbounds i64, i64* %lngtt, i32 0
  %lngtv = bitcast i64* %lngtu to i64*
  %lngtw = load i64, i64* %lngtv, !tbaa !2
  %lngtx = inttoptr i64 %lngtw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngty = load i64*, i64** %Sp_Var
  %lngtz = load i64*, i64** %Hp_Var
  %lngtA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngtx( i64* %Base_Arg, i64* %lngty, i64* %lngtz, i64 %lngtA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf5z:
  %lngtB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 80, i64* %lngtB, !tbaa !5
  %lngtC = load i64, i64* %R1_Var
  store i64 %lngtC, i64* %R1_Var
  %lngtD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngtE = load i64*, i64** %Sp_Var
  %lngtF = load i64*, i64** %Hp_Var
  %lngtG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngtD( i64* %Base_Arg, i64* %lngtE, i64* %lngtF, i64 %lngtG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ob_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ob_info$def to i8*)
define internal ghccc void @s7Ob_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngtH:
  %ls7NQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf8I
cf8I:
  %lngtI = load i64*, i64** %Sp_Var
  %lngtJ = getelementptr inbounds i64, i64* %lngtI, i32 -4
  %lngtK = ptrtoint i64* %lngtJ to i64
  %lngtL = icmp ult i64 %lngtK, %SpLim_Arg
  %lngtM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngtL, i1 0 )
  br i1 %lngtM, label %cf8X, label %cf8Y
cf8Y:
  %lngtO = ptrtoint i8* @stg_upd_frame_info to i64
  %lngtN = load i64*, i64** %Sp_Var
  %lngtP = getelementptr inbounds i64, i64* %lngtN, i32 -2
  store i64 %lngtO, i64* %lngtP, !tbaa !2
  %lngtR = load i64, i64* %R1_Var
  %lngtQ = load i64*, i64** %Sp_Var
  %lngtS = getelementptr inbounds i64, i64* %lngtQ, i32 -1
  store i64 %lngtR, i64* %lngtS, !tbaa !2
  %lngtU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8F_info$def to i64
  %lngtT = load i64*, i64** %Sp_Var
  %lngtV = getelementptr inbounds i64, i64* %lngtT, i32 -4
  store i64 %lngtU, i64* %lngtV, !tbaa !2
  %lngtY = load i64, i64* %R1_Var
  %lngtZ = add i64 %lngtY, 16
  %lngu0 = inttoptr i64 %lngtZ to i64*
  %lngu1 = load i64, i64* %lngu0, !tbaa !4
  store i64 %lngu1, i64* %ls7NQ
  %lngu4 = load i64, i64* %R1_Var
  %lngu5 = add i64 %lngu4, 24
  %lngu6 = inttoptr i64 %lngu5 to i64*
  %lngu7 = load i64, i64* %lngu6, !tbaa !4
  store i64 %lngu7, i64* %R1_Var
  %lngu9 = load i64, i64* %ls7NQ
  %lngu8 = load i64*, i64** %Sp_Var
  %lngua = getelementptr inbounds i64, i64* %lngu8, i32 -3
  store i64 %lngu9, i64* %lngua, !tbaa !2
  %lngub = load i64*, i64** %Sp_Var
  %lnguc = getelementptr inbounds i64, i64* %lngub, i32 -4
  %lngud = ptrtoint i64* %lnguc to i64
  %lngue = inttoptr i64 %lngud to i64*
  store i64* %lngue, i64** %Sp_Var
  %lnguf = load i64, i64* %R1_Var
  %lngug = and i64 %lnguf, 7
  %lnguh = icmp ne i64 %lngug, 0
  br i1 %lnguh, label %uf94, label %cf8G
cf8G:
  %lnguj = load i64, i64* %R1_Var
  %lnguk = inttoptr i64 %lnguj to i64*
  %lngul = load i64, i64* %lnguk, !tbaa !4
  %lngum = inttoptr i64 %lngul to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngun = load i64*, i64** %Sp_Var
  %lnguo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngum( i64* %Base_Arg, i64* %lngun, i64* %Hp_Arg, i64 %lnguo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf94:
  %lngup = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8F_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnguq = load i64*, i64** %Sp_Var
  %lngur = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngup( i64* %Base_Arg, i64* %lnguq, i64* %Hp_Arg, i64 %lngur, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf8X:
  %lngus = load i64, i64* %R1_Var
  store i64 %lngus, i64* %R1_Var
  %lngut = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnguu = bitcast i64* %lngut to i64*
  %lnguv = load i64, i64* %lnguu, !tbaa !5
  %lnguw = inttoptr i64 %lnguv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngux = load i64*, i64** %Sp_Var
  %lnguy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnguw( i64* %Base_Arg, i64* %lngux, i64* %Hp_Arg, i64 %lnguy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf8F_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8F_info$def to i8*)
define internal ghccc void @cf8F_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nguz:
  %ls7O6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf8F
cf8F:
  %lnguA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8L_info$def to i64
  %lnguB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnguA, i64* %lnguB, !tbaa !2
  %lnguE = load i64, i64* %R1_Var
  %lnguF = add i64 %lnguE, 7
  %lnguG = inttoptr i64 %lnguF to double*
  %lnguH = load double, double* %lnguG, !tbaa !4
  store double %lnguH, double* %ls7O6
  %lnguI = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnguJ = bitcast i64* %lnguI to i64*
  %lnguK = load i64, i64* %lnguJ, !tbaa !2
  store i64 %lnguK, i64* %R1_Var
  %lnguL = load double, double* %ls7O6
  %lnguM = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnguN = bitcast i64* %lnguM to double*
  store double %lnguL, double* %lnguN, !tbaa !2
  %lnguO = load i64, i64* %R1_Var
  %lnguP = and i64 %lnguO, 7
  %lnguQ = icmp ne i64 %lnguP, 0
  br i1 %lnguQ, label %uf93, label %cf8M
cf8M:
  %lnguS = load i64, i64* %R1_Var
  %lnguT = inttoptr i64 %lnguS to i64*
  %lnguU = load i64, i64* %lnguT, !tbaa !4
  %lnguV = inttoptr i64 %lnguU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnguW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnguV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnguW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf93:
  %lnguX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8L_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnguY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnguX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnguY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf8L_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8L_info$def to i8*)
define internal ghccc void @cf8L_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nguZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Oa = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf8L
cf8L:
  %lngv0 = load i64*, i64** %Hp_Var
  %lngv1 = getelementptr inbounds i64, i64* %lngv0, i32 2
  %lngv2 = ptrtoint i64* %lngv1 to i64
  %lngv3 = inttoptr i64 %lngv2 to i64*
  store i64* %lngv3, i64** %Hp_Var
  %lngv4 = load i64*, i64** %Hp_Var
  %lngv5 = ptrtoint i64* %lngv4 to i64
  %lngv6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngv7 = bitcast i64* %lngv6 to i64*
  %lngv8 = load i64, i64* %lngv7, !tbaa !5
  %lngv9 = icmp ugt i64 %lngv5, %lngv8
  %lngva = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngv9, i1 0 )
  br i1 %lngva, label %cf92, label %cf91
cf91:
  %lngvb = load i64*, i64** %Sp_Var
  %lngvc = getelementptr inbounds i64, i64* %lngvb, i32 1
  %lngvd = bitcast i64* %lngvc to double*
  %lngve = load double, double* %lngvd, !tbaa !2
  %lngvh = load i64, i64* %R1_Var
  %lngvi = add i64 %lngvh, 7
  %lngvj = inttoptr i64 %lngvi to double*
  %lngvk = load double, double* %lngvj, !tbaa !4
  %lngvl = fmul double %lngvk, 0x3EB0C6F7A0B5ED8D
  %lngvm = fadd double %lngve, %lngvl
  store double %lngvm, double* %ls7Oa
  %lngvo = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngvn = load i64*, i64** %Hp_Var
  %lngvp = getelementptr inbounds i64, i64* %lngvn, i32 -1
  store i64 %lngvo, i64* %lngvp, !tbaa !3
  %lngvr = load double, double* %ls7Oa
  %lngvq = load i64*, i64** %Hp_Var
  %lngvs = getelementptr inbounds i64, i64* %lngvq, i32 0
  %lngvt = bitcast i64* %lngvs to double*
  store double %lngvr, double* %lngvt, !tbaa !3
  %lngvv = load i64*, i64** %Hp_Var
  %lngvw = ptrtoint i64* %lngvv to i64
  %lngvx = add i64 %lngvw, -7
  store i64 %lngvx, i64* %R1_Var
  %lngvy = load i64*, i64** %Sp_Var
  %lngvz = getelementptr inbounds i64, i64* %lngvy, i32 2
  %lngvA = ptrtoint i64* %lngvz to i64
  %lngvB = inttoptr i64 %lngvA to i64*
  store i64* %lngvB, i64** %Sp_Var
  %lngvC = load i64*, i64** %Sp_Var
  %lngvD = getelementptr inbounds i64, i64* %lngvC, i32 0
  %lngvE = bitcast i64* %lngvD to i64*
  %lngvF = load i64, i64* %lngvE, !tbaa !2
  %lngvG = inttoptr i64 %lngvF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngvH = load i64*, i64** %Sp_Var
  %lngvI = load i64*, i64** %Hp_Var
  %lngvJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngvG( i64* %Base_Arg, i64* %lngvH, i64* %lngvI, i64 %lngvJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf92:
  %lngvK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngvK, !tbaa !5
  %lngvL = load i64, i64* %R1_Var
  store i64 %lngvL, i64* %R1_Var
  %lngvM = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngvN = load i64*, i64** %Sp_Var
  %lngvO = load i64*, i64** %Hp_Var
  %lngvP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngvM( i64* %Base_Arg, i64* %lngvN, i64* %lngvO, i64 %lngvP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7O4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7O4_info$def to i8*)
define internal ghccc void @s7O4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngvQ:
  %ls7NP = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf9c
cf9c:
  %lngvR = load i64*, i64** %Sp_Var
  %lngvS = getelementptr inbounds i64, i64* %lngvR, i32 -4
  %lngvT = ptrtoint i64* %lngvS to i64
  %lngvU = icmp ult i64 %lngvT, %SpLim_Arg
  %lngvV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngvU, i1 0 )
  br i1 %lngvV, label %cf9r, label %cf9s
cf9s:
  %lngvX = ptrtoint i8* @stg_upd_frame_info to i64
  %lngvW = load i64*, i64** %Sp_Var
  %lngvY = getelementptr inbounds i64, i64* %lngvW, i32 -2
  store i64 %lngvX, i64* %lngvY, !tbaa !2
  %lngw0 = load i64, i64* %R1_Var
  %lngvZ = load i64*, i64** %Sp_Var
  %lngw1 = getelementptr inbounds i64, i64* %lngvZ, i32 -1
  store i64 %lngw0, i64* %lngw1, !tbaa !2
  %lngw3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf99_info$def to i64
  %lngw2 = load i64*, i64** %Sp_Var
  %lngw4 = getelementptr inbounds i64, i64* %lngw2, i32 -4
  store i64 %lngw3, i64* %lngw4, !tbaa !2
  %lngw7 = load i64, i64* %R1_Var
  %lngw8 = add i64 %lngw7, 16
  %lngw9 = inttoptr i64 %lngw8 to i64*
  %lngwa = load i64, i64* %lngw9, !tbaa !4
  store i64 %lngwa, i64* %ls7NP
  %lngwd = load i64, i64* %R1_Var
  %lngwe = add i64 %lngwd, 24
  %lngwf = inttoptr i64 %lngwe to i64*
  %lngwg = load i64, i64* %lngwf, !tbaa !4
  store i64 %lngwg, i64* %R1_Var
  %lngwi = load i64, i64* %ls7NP
  %lngwh = load i64*, i64** %Sp_Var
  %lngwj = getelementptr inbounds i64, i64* %lngwh, i32 -3
  store i64 %lngwi, i64* %lngwj, !tbaa !2
  %lngwk = load i64*, i64** %Sp_Var
  %lngwl = getelementptr inbounds i64, i64* %lngwk, i32 -4
  %lngwm = ptrtoint i64* %lngwl to i64
  %lngwn = inttoptr i64 %lngwm to i64*
  store i64* %lngwn, i64** %Sp_Var
  %lngwo = load i64, i64* %R1_Var
  %lngwp = and i64 %lngwo, 7
  %lngwq = icmp ne i64 %lngwp, 0
  br i1 %lngwq, label %uf9y, label %cf9a
cf9a:
  %lngws = load i64, i64* %R1_Var
  %lngwt = inttoptr i64 %lngws to i64*
  %lngwu = load i64, i64* %lngwt, !tbaa !4
  %lngwv = inttoptr i64 %lngwu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngww = load i64*, i64** %Sp_Var
  %lngwx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngwv( i64* %Base_Arg, i64* %lngww, i64* %Hp_Arg, i64 %lngwx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf9y:
  %lngwy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf99_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngwz = load i64*, i64** %Sp_Var
  %lngwA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngwy( i64* %Base_Arg, i64* %lngwz, i64* %Hp_Arg, i64 %lngwA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf9r:
  %lngwB = load i64, i64* %R1_Var
  store i64 %lngwB, i64* %R1_Var
  %lngwC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngwD = bitcast i64* %lngwC to i64*
  %lngwE = load i64, i64* %lngwD, !tbaa !5
  %lngwF = inttoptr i64 %lngwE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngwG = load i64*, i64** %Sp_Var
  %lngwH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngwF( i64* %Base_Arg, i64* %lngwG, i64* %Hp_Arg, i64 %lngwH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf99_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf99_info$def to i8*)
define internal ghccc void @cf99_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngwI:
  %ls7NZ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf99
cf99:
  %lngwJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9f_info$def to i64
  %lngwK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngwJ, i64* %lngwK, !tbaa !2
  %lngwN = load i64, i64* %R1_Var
  %lngwO = add i64 %lngwN, 7
  %lngwP = inttoptr i64 %lngwO to double*
  %lngwQ = load double, double* %lngwP, !tbaa !4
  store double %lngwQ, double* %ls7NZ
  %lngwR = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngwS = bitcast i64* %lngwR to i64*
  %lngwT = load i64, i64* %lngwS, !tbaa !2
  store i64 %lngwT, i64* %R1_Var
  %lngwU = load double, double* %ls7NZ
  %lngwV = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngwW = bitcast i64* %lngwV to double*
  store double %lngwU, double* %lngwW, !tbaa !2
  %lngwX = load i64, i64* %R1_Var
  %lngwY = and i64 %lngwX, 7
  %lngwZ = icmp ne i64 %lngwY, 0
  br i1 %lngwZ, label %uf9x, label %cf9g
cf9g:
  %lngx1 = load i64, i64* %R1_Var
  %lngx2 = inttoptr i64 %lngx1 to i64*
  %lngx3 = load i64, i64* %lngx2, !tbaa !4
  %lngx4 = inttoptr i64 %lngx3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngx5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngx4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngx5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uf9x:
  %lngx6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9f_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngx7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngx6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngx7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf9f_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9f_info$def to i8*)
define internal ghccc void @cf9f_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngx8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7O3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf9f
cf9f:
  %lngx9 = load i64*, i64** %Hp_Var
  %lngxa = getelementptr inbounds i64, i64* %lngx9, i32 2
  %lngxb = ptrtoint i64* %lngxa to i64
  %lngxc = inttoptr i64 %lngxb to i64*
  store i64* %lngxc, i64** %Hp_Var
  %lngxd = load i64*, i64** %Hp_Var
  %lngxe = ptrtoint i64* %lngxd to i64
  %lngxf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngxg = bitcast i64* %lngxf to i64*
  %lngxh = load i64, i64* %lngxg, !tbaa !5
  %lngxi = icmp ugt i64 %lngxe, %lngxh
  %lngxj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngxi, i1 0 )
  br i1 %lngxj, label %cf9w, label %cf9v
cf9v:
  %lngxk = load i64*, i64** %Sp_Var
  %lngxl = getelementptr inbounds i64, i64* %lngxk, i32 1
  %lngxm = bitcast i64* %lngxl to double*
  %lngxn = load double, double* %lngxm, !tbaa !2
  %lngxq = load i64, i64* %R1_Var
  %lngxr = add i64 %lngxq, 7
  %lngxs = inttoptr i64 %lngxr to double*
  %lngxt = load double, double* %lngxs, !tbaa !4
  %lngxu = fmul double %lngxt, 0x3EB0C6F7A0B5ED8D
  %lngxv = fadd double %lngxn, %lngxu
  store double %lngxv, double* %ls7O3
  %lngxx = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngxw = load i64*, i64** %Hp_Var
  %lngxy = getelementptr inbounds i64, i64* %lngxw, i32 -1
  store i64 %lngxx, i64* %lngxy, !tbaa !3
  %lngxA = load double, double* %ls7O3
  %lngxz = load i64*, i64** %Hp_Var
  %lngxB = getelementptr inbounds i64, i64* %lngxz, i32 0
  %lngxC = bitcast i64* %lngxB to double*
  store double %lngxA, double* %lngxC, !tbaa !3
  %lngxE = load i64*, i64** %Hp_Var
  %lngxF = ptrtoint i64* %lngxE to i64
  %lngxG = add i64 %lngxF, -7
  store i64 %lngxG, i64* %R1_Var
  %lngxH = load i64*, i64** %Sp_Var
  %lngxI = getelementptr inbounds i64, i64* %lngxH, i32 2
  %lngxJ = ptrtoint i64* %lngxI to i64
  %lngxK = inttoptr i64 %lngxJ to i64*
  store i64* %lngxK, i64** %Sp_Var
  %lngxL = load i64*, i64** %Sp_Var
  %lngxM = getelementptr inbounds i64, i64* %lngxL, i32 0
  %lngxN = bitcast i64* %lngxM to i64*
  %lngxO = load i64, i64* %lngxN, !tbaa !2
  %lngxP = inttoptr i64 %lngxO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngxQ = load i64*, i64** %Sp_Var
  %lngxR = load i64*, i64** %Hp_Var
  %lngxS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngxP( i64* %Base_Arg, i64* %lngxQ, i64* %lngxR, i64 %lngxS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf9w:
  %lngxT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngxT, !tbaa !5
  %lngxU = load i64, i64* %R1_Var
  store i64 %lngxU, i64* %R1_Var
  %lngxV = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngxW = load i64*, i64** %Sp_Var
  %lngxX = load i64*, i64** %Hp_Var
  %lngxY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngxV( i64* %Base_Arg, i64* %lngxW, i64* %lngxX, i64 %lngxY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7NX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7NX_info$def to i8*)
define internal ghccc void @s7NX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngxZ:
  %ls7NO = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf9G
cf9G:
  %lngy0 = load i64*, i64** %Sp_Var
  %lngy1 = getelementptr inbounds i64, i64* %lngy0, i32 -4
  %lngy2 = ptrtoint i64* %lngy1 to i64
  %lngy3 = icmp ult i64 %lngy2, %SpLim_Arg
  %lngy4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngy3, i1 0 )
  br i1 %lngy4, label %cf9V, label %cf9W
cf9W:
  %lngy6 = ptrtoint i8* @stg_upd_frame_info to i64
  %lngy5 = load i64*, i64** %Sp_Var
  %lngy7 = getelementptr inbounds i64, i64* %lngy5, i32 -2
  store i64 %lngy6, i64* %lngy7, !tbaa !2
  %lngy9 = load i64, i64* %R1_Var
  %lngy8 = load i64*, i64** %Sp_Var
  %lngya = getelementptr inbounds i64, i64* %lngy8, i32 -1
  store i64 %lngy9, i64* %lngya, !tbaa !2
  %lngyc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9D_info$def to i64
  %lngyb = load i64*, i64** %Sp_Var
  %lngyd = getelementptr inbounds i64, i64* %lngyb, i32 -4
  store i64 %lngyc, i64* %lngyd, !tbaa !2
  %lngyg = load i64, i64* %R1_Var
  %lngyh = add i64 %lngyg, 16
  %lngyi = inttoptr i64 %lngyh to i64*
  %lngyj = load i64, i64* %lngyi, !tbaa !4
  store i64 %lngyj, i64* %ls7NO
  %lngym = load i64, i64* %R1_Var
  %lngyn = add i64 %lngym, 24
  %lngyo = inttoptr i64 %lngyn to i64*
  %lngyp = load i64, i64* %lngyo, !tbaa !4
  store i64 %lngyp, i64* %R1_Var
  %lngyr = load i64, i64* %ls7NO
  %lngyq = load i64*, i64** %Sp_Var
  %lngys = getelementptr inbounds i64, i64* %lngyq, i32 -3
  store i64 %lngyr, i64* %lngys, !tbaa !2
  %lngyt = load i64*, i64** %Sp_Var
  %lngyu = getelementptr inbounds i64, i64* %lngyt, i32 -4
  %lngyv = ptrtoint i64* %lngyu to i64
  %lngyw = inttoptr i64 %lngyv to i64*
  store i64* %lngyw, i64** %Sp_Var
  %lngyx = load i64, i64* %R1_Var
  %lngyy = and i64 %lngyx, 7
  %lngyz = icmp ne i64 %lngyy, 0
  br i1 %lngyz, label %ufa2, label %cf9E
cf9E:
  %lngyB = load i64, i64* %R1_Var
  %lngyC = inttoptr i64 %lngyB to i64*
  %lngyD = load i64, i64* %lngyC, !tbaa !4
  %lngyE = inttoptr i64 %lngyD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngyF = load i64*, i64** %Sp_Var
  %lngyG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngyE( i64* %Base_Arg, i64* %lngyF, i64* %Hp_Arg, i64 %lngyG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufa2:
  %lngyH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9D_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngyI = load i64*, i64** %Sp_Var
  %lngyJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngyH( i64* %Base_Arg, i64* %lngyI, i64* %Hp_Arg, i64 %lngyJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cf9V:
  %lngyK = load i64, i64* %R1_Var
  store i64 %lngyK, i64* %R1_Var
  %lngyL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngyM = bitcast i64* %lngyL to i64*
  %lngyN = load i64, i64* %lngyM, !tbaa !5
  %lngyO = inttoptr i64 %lngyN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngyP = load i64*, i64** %Sp_Var
  %lngyQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngyO( i64* %Base_Arg, i64* %lngyP, i64* %Hp_Arg, i64 %lngyQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf9D_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9D_info$def to i8*)
define internal ghccc void @cf9D_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngyR:
  %ls7NS = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf9D
cf9D:
  %lngyS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9J_info$def to i64
  %lngyT = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngyS, i64* %lngyT, !tbaa !2
  %lngyW = load i64, i64* %R1_Var
  %lngyX = add i64 %lngyW, 7
  %lngyY = inttoptr i64 %lngyX to double*
  %lngyZ = load double, double* %lngyY, !tbaa !4
  store double %lngyZ, double* %ls7NS
  %lngz0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngz1 = bitcast i64* %lngz0 to i64*
  %lngz2 = load i64, i64* %lngz1, !tbaa !2
  store i64 %lngz2, i64* %R1_Var
  %lngz3 = load double, double* %ls7NS
  %lngz4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngz5 = bitcast i64* %lngz4 to double*
  store double %lngz3, double* %lngz5, !tbaa !2
  %lngz6 = load i64, i64* %R1_Var
  %lngz7 = and i64 %lngz6, 7
  %lngz8 = icmp ne i64 %lngz7, 0
  br i1 %lngz8, label %ufa1, label %cf9K
cf9K:
  %lngza = load i64, i64* %R1_Var
  %lngzb = inttoptr i64 %lngza to i64*
  %lngzc = load i64, i64* %lngzb, !tbaa !4
  %lngzd = inttoptr i64 %lngzc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngze = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngzd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngze, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufa1:
  %lngzf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9J_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngzg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngzf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngzg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf9J_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf9J_info$def to i8*)
define internal ghccc void @cf9J_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngzh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7NW = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf9J
cf9J:
  %lngzi = load i64*, i64** %Hp_Var
  %lngzj = getelementptr inbounds i64, i64* %lngzi, i32 2
  %lngzk = ptrtoint i64* %lngzj to i64
  %lngzl = inttoptr i64 %lngzk to i64*
  store i64* %lngzl, i64** %Hp_Var
  %lngzm = load i64*, i64** %Hp_Var
  %lngzn = ptrtoint i64* %lngzm to i64
  %lngzo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngzp = bitcast i64* %lngzo to i64*
  %lngzq = load i64, i64* %lngzp, !tbaa !5
  %lngzr = icmp ugt i64 %lngzn, %lngzq
  %lngzs = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngzr, i1 0 )
  br i1 %lngzs, label %cfa0, label %cf9Z
cf9Z:
  %lngzt = load i64*, i64** %Sp_Var
  %lngzu = getelementptr inbounds i64, i64* %lngzt, i32 1
  %lngzv = bitcast i64* %lngzu to double*
  %lngzw = load double, double* %lngzv, !tbaa !2
  %lngzz = load i64, i64* %R1_Var
  %lngzA = add i64 %lngzz, 7
  %lngzB = inttoptr i64 %lngzA to double*
  %lngzC = load double, double* %lngzB, !tbaa !4
  %lngzD = fmul double %lngzC, 0x3EB0C6F7A0B5ED8D
  %lngzE = fadd double %lngzw, %lngzD
  store double %lngzE, double* %ls7NW
  %lngzG = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngzF = load i64*, i64** %Hp_Var
  %lngzH = getelementptr inbounds i64, i64* %lngzF, i32 -1
  store i64 %lngzG, i64* %lngzH, !tbaa !3
  %lngzJ = load double, double* %ls7NW
  %lngzI = load i64*, i64** %Hp_Var
  %lngzK = getelementptr inbounds i64, i64* %lngzI, i32 0
  %lngzL = bitcast i64* %lngzK to double*
  store double %lngzJ, double* %lngzL, !tbaa !3
  %lngzN = load i64*, i64** %Hp_Var
  %lngzO = ptrtoint i64* %lngzN to i64
  %lngzP = add i64 %lngzO, -7
  store i64 %lngzP, i64* %R1_Var
  %lngzQ = load i64*, i64** %Sp_Var
  %lngzR = getelementptr inbounds i64, i64* %lngzQ, i32 2
  %lngzS = ptrtoint i64* %lngzR to i64
  %lngzT = inttoptr i64 %lngzS to i64*
  store i64* %lngzT, i64** %Sp_Var
  %lngzU = load i64*, i64** %Sp_Var
  %lngzV = getelementptr inbounds i64, i64* %lngzU, i32 0
  %lngzW = bitcast i64* %lngzV to i64*
  %lngzX = load i64, i64* %lngzW, !tbaa !2
  %lngzY = inttoptr i64 %lngzX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngzZ = load i64*, i64** %Sp_Var
  %lngA0 = load i64*, i64** %Hp_Var
  %lngA1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngzY( i64* %Base_Arg, i64* %lngzZ, i64* %lngA0, i64 %lngA1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfa0:
  %lngA2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngA2, !tbaa !5
  %lngA3 = load i64, i64* %R1_Var
  store i64 %lngA3, i64* %R1_Var
  %lngA4 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngA5 = load i64*, i64** %Sp_Var
  %lngA6 = load i64*, i64** %Hp_Var
  %lngA7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngA4( i64* %Base_Arg, i64* %lngA5, i64* %lngA6, i64 %lngA7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7NI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7NI_info$def to i8*)
define internal ghccc void @s7NI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngA8:
  %ls7Mt = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfa3
cfa3:
  %lngA9 = load i64*, i64** %Sp_Var
  %lngAa = getelementptr inbounds i64, i64* %lngA9, i32 -6
  %lngAb = ptrtoint i64* %lngAa to i64
  %lngAc = icmp ult i64 %lngAb, %SpLim_Arg
  %lngAd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngAc, i1 0 )
  br i1 %lngAd, label %cfa5, label %cfa6
cfa6:
  %lngAf = ptrtoint i8* @stg_upd_frame_info to i64
  %lngAe = load i64*, i64** %Sp_Var
  %lngAg = getelementptr inbounds i64, i64* %lngAe, i32 -2
  store i64 %lngAf, i64* %lngAg, !tbaa !2
  %lngAi = load i64, i64* %R1_Var
  %lngAh = load i64*, i64** %Sp_Var
  %lngAj = getelementptr inbounds i64, i64* %lngAh, i32 -1
  store i64 %lngAi, i64* %lngAj, !tbaa !2
  %lngAl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8r_info$def to i64
  %lngAk = load i64*, i64** %Sp_Var
  %lngAm = getelementptr inbounds i64, i64* %lngAk, i32 -4
  store i64 %lngAl, i64* %lngAm, !tbaa !2
  %lngAp = load i64, i64* %R1_Var
  %lngAq = add i64 %lngAp, 16
  %lngAr = inttoptr i64 %lngAq to i64*
  %lngAs = load i64, i64* %lngAr, !tbaa !4
  store i64 %lngAs, i64* %ls7Mt
  %lngAv = load i64, i64* %R1_Var
  %lngAw = add i64 %lngAv, 24
  %lngAx = inttoptr i64 %lngAw to i64*
  %lngAy = load i64, i64* %lngAx, !tbaa !4
  store i64 %lngAy, i64* %R1_Var
  %lngAA = load i64, i64* %ls7Mt
  %lngAz = load i64*, i64** %Sp_Var
  %lngAB = getelementptr inbounds i64, i64* %lngAz, i32 -3
  store i64 %lngAA, i64* %lngAB, !tbaa !2
  %lngAC = load i64*, i64** %Sp_Var
  %lngAD = getelementptr inbounds i64, i64* %lngAC, i32 -4
  %lngAE = ptrtoint i64* %lngAD to i64
  %lngAF = inttoptr i64 %lngAE to i64*
  store i64* %lngAF, i64** %Sp_Var
  %lngAG = load i64, i64* %R1_Var
  %lngAH = and i64 %lngAG, 7
  %lngAI = icmp ne i64 %lngAH, 0
  br i1 %lngAI, label %ufac, label %cf8s
cf8s:
  %lngAK = load i64, i64* %R1_Var
  %lngAL = inttoptr i64 %lngAK to i64*
  %lngAM = load i64, i64* %lngAL, !tbaa !4
  %lngAN = inttoptr i64 %lngAM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngAO = load i64*, i64** %Sp_Var
  %lngAP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngAN( i64* %Base_Arg, i64* %lngAO, i64* %Hp_Arg, i64 %lngAP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufac:
  %lngAQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8r_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngAR = load i64*, i64** %Sp_Var
  %lngAS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngAQ( i64* %Base_Arg, i64* %lngAR, i64* %Hp_Arg, i64 %lngAS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfa5:
  %lngAT = load i64, i64* %R1_Var
  store i64 %lngAT, i64* %R1_Var
  %lngAU = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngAV = bitcast i64* %lngAU to i64*
  %lngAW = load i64, i64* %lngAV, !tbaa !5
  %lngAX = inttoptr i64 %lngAW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngAY = load i64*, i64** %Sp_Var
  %lngAZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngAX( i64* %Base_Arg, i64* %lngAY, i64* %Hp_Arg, i64 %lngAZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf8r_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8r_info$def to i8*)
define internal ghccc void @cf8r_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngB0:
  %ls7NK = alloca i64, i32 1
  %ls7NL = alloca i64, i32 1
  %ls7NM = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf8r
cf8r:
  %lngB2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8w_info$def to i64
  %lngB1 = load i64*, i64** %Sp_Var
  %lngB3 = getelementptr inbounds i64, i64* %lngB1, i32 -2
  store i64 %lngB2, i64* %lngB3, !tbaa !2
  %lngB6 = load i64, i64* %R1_Var
  %lngB7 = add i64 %lngB6, 7
  %lngB8 = inttoptr i64 %lngB7 to i64*
  %lngB9 = load i64, i64* %lngB8, !tbaa !4
  store i64 %lngB9, i64* %ls7NK
  %lngBc = load i64, i64* %R1_Var
  %lngBd = add i64 %lngBc, 15
  %lngBe = inttoptr i64 %lngBd to i64*
  %lngBf = load i64, i64* %lngBe, !tbaa !4
  store i64 %lngBf, i64* %ls7NL
  %lngBi = load i64, i64* %R1_Var
  %lngBj = add i64 %lngBi, 23
  %lngBk = inttoptr i64 %lngBj to i64*
  %lngBl = load i64, i64* %lngBk, !tbaa !4
  store i64 %lngBl, i64* %ls7NM
  %lngBm = load i64*, i64** %Sp_Var
  %lngBn = getelementptr inbounds i64, i64* %lngBm, i32 1
  %lngBo = bitcast i64* %lngBn to i64*
  %lngBp = load i64, i64* %lngBo, !tbaa !2
  store i64 %lngBp, i64* %R1_Var
  %lngBr = load i64, i64* %ls7NM
  %lngBq = load i64*, i64** %Sp_Var
  %lngBs = getelementptr inbounds i64, i64* %lngBq, i32 -1
  store i64 %lngBr, i64* %lngBs, !tbaa !2
  %lngBu = load i64, i64* %ls7NL
  %lngBt = load i64*, i64** %Sp_Var
  %lngBv = getelementptr inbounds i64, i64* %lngBt, i32 0
  store i64 %lngBu, i64* %lngBv, !tbaa !2
  %lngBx = load i64, i64* %ls7NK
  %lngBw = load i64*, i64** %Sp_Var
  %lngBy = getelementptr inbounds i64, i64* %lngBw, i32 1
  store i64 %lngBx, i64* %lngBy, !tbaa !2
  %lngBz = load i64*, i64** %Sp_Var
  %lngBA = getelementptr inbounds i64, i64* %lngBz, i32 -2
  %lngBB = ptrtoint i64* %lngBA to i64
  %lngBC = inttoptr i64 %lngBB to i64*
  store i64* %lngBC, i64** %Sp_Var
  %lngBD = load i64, i64* %R1_Var
  %lngBE = and i64 %lngBD, 7
  %lngBF = icmp ne i64 %lngBE, 0
  br i1 %lngBF, label %ufab, label %cf8x
cf8x:
  %lngBH = load i64, i64* %R1_Var
  %lngBI = inttoptr i64 %lngBH to i64*
  %lngBJ = load i64, i64* %lngBI, !tbaa !4
  %lngBK = inttoptr i64 %lngBJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngBL = load i64*, i64** %Sp_Var
  %lngBM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngBK( i64* %Base_Arg, i64* %lngBL, i64* %Hp_Arg, i64 %lngBM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufab:
  %lngBN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8w_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngBO = load i64*, i64** %Sp_Var
  %lngBP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngBN( i64* %Base_Arg, i64* %lngBO, i64* %Hp_Arg, i64 %lngBP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf8w_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf8w_info$def to i8*)
define internal ghccc void @cf8w_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ngBQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7NO = alloca i64, i32 1
  %ls7NP = alloca i64, i32 1
  %ls7NQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf8w
cf8w:
  %lngBR = load i64*, i64** %Hp_Var
  %lngBS = getelementptr inbounds i64, i64* %lngBR, i32 16
  %lngBT = ptrtoint i64* %lngBS to i64
  %lngBU = inttoptr i64 %lngBT to i64*
  store i64* %lngBU, i64** %Hp_Var
  %lngBV = load i64*, i64** %Hp_Var
  %lngBW = ptrtoint i64* %lngBV to i64
  %lngBX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngBY = bitcast i64* %lngBX to i64*
  %lngBZ = load i64, i64* %lngBY, !tbaa !5
  %lngC0 = icmp ugt i64 %lngBW, %lngBZ
  %lngC1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngC0, i1 0 )
  br i1 %lngC1, label %cfaa, label %cfa9
cfa9:
  %lngC4 = load i64, i64* %R1_Var
  %lngC5 = add i64 %lngC4, 7
  %lngC6 = inttoptr i64 %lngC5 to i64*
  %lngC7 = load i64, i64* %lngC6, !tbaa !4
  store i64 %lngC7, i64* %ls7NO
  %lngCa = load i64, i64* %R1_Var
  %lngCb = add i64 %lngCa, 15
  %lngCc = inttoptr i64 %lngCb to i64*
  %lngCd = load i64, i64* %lngCc, !tbaa !4
  store i64 %lngCd, i64* %ls7NP
  %lngCg = load i64, i64* %R1_Var
  %lngCh = add i64 %lngCg, 23
  %lngCi = inttoptr i64 %lngCh to i64*
  %lngCj = load i64, i64* %lngCi, !tbaa !4
  store i64 %lngCj, i64* %ls7NQ
  %lngCl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ob_info$def to i64
  %lngCk = load i64*, i64** %Hp_Var
  %lngCm = getelementptr inbounds i64, i64* %lngCk, i32 -15
  store i64 %lngCl, i64* %lngCm, !tbaa !3
  %lngCo = load i64, i64* %ls7NQ
  %lngCn = load i64*, i64** %Hp_Var
  %lngCp = getelementptr inbounds i64, i64* %lngCn, i32 -13
  store i64 %lngCo, i64* %lngCp, !tbaa !3
  %lngCr = load i64*, i64** %Sp_Var
  %lngCs = getelementptr inbounds i64, i64* %lngCr, i32 1
  %lngCt = bitcast i64* %lngCs to i64*
  %lngCu = load i64, i64* %lngCt, !tbaa !2
  %lngCq = load i64*, i64** %Hp_Var
  %lngCv = getelementptr inbounds i64, i64* %lngCq, i32 -12
  store i64 %lngCu, i64* %lngCv, !tbaa !3
  %lngCx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7O4_info$def to i64
  %lngCw = load i64*, i64** %Hp_Var
  %lngCy = getelementptr inbounds i64, i64* %lngCw, i32 -11
  store i64 %lngCx, i64* %lngCy, !tbaa !3
  %lngCA = load i64, i64* %ls7NP
  %lngCz = load i64*, i64** %Hp_Var
  %lngCB = getelementptr inbounds i64, i64* %lngCz, i32 -9
  store i64 %lngCA, i64* %lngCB, !tbaa !3
  %lngCD = load i64*, i64** %Sp_Var
  %lngCE = getelementptr inbounds i64, i64* %lngCD, i32 2
  %lngCF = bitcast i64* %lngCE to i64*
  %lngCG = load i64, i64* %lngCF, !tbaa !2
  %lngCC = load i64*, i64** %Hp_Var
  %lngCH = getelementptr inbounds i64, i64* %lngCC, i32 -8
  store i64 %lngCG, i64* %lngCH, !tbaa !3
  %lngCJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7NX_info$def to i64
  %lngCI = load i64*, i64** %Hp_Var
  %lngCK = getelementptr inbounds i64, i64* %lngCI, i32 -7
  store i64 %lngCJ, i64* %lngCK, !tbaa !3
  %lngCM = load i64, i64* %ls7NO
  %lngCL = load i64*, i64** %Hp_Var
  %lngCN = getelementptr inbounds i64, i64* %lngCL, i32 -5
  store i64 %lngCM, i64* %lngCN, !tbaa !3
  %lngCP = load i64*, i64** %Sp_Var
  %lngCQ = getelementptr inbounds i64, i64* %lngCP, i32 3
  %lngCR = bitcast i64* %lngCQ to i64*
  %lngCS = load i64, i64* %lngCR, !tbaa !2
  %lngCO = load i64*, i64** %Hp_Var
  %lngCT = getelementptr inbounds i64, i64* %lngCO, i32 -4
  store i64 %lngCS, i64* %lngCT, !tbaa !3
  %lngCV = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngCU = load i64*, i64** %Hp_Var
  %lngCW = getelementptr inbounds i64, i64* %lngCU, i32 -3
  store i64 %lngCV, i64* %lngCW, !tbaa !3
  %lngCY = load i64*, i64** %Hp_Var
  %lngCZ = getelementptr inbounds i64, i64* %lngCY, i32 -7
  %lngD0 = ptrtoint i64* %lngCZ to i64
  %lngCX = load i64*, i64** %Hp_Var
  %lngD1 = getelementptr inbounds i64, i64* %lngCX, i32 -2
  store i64 %lngD0, i64* %lngD1, !tbaa !3
  %lngD3 = load i64*, i64** %Hp_Var
  %lngD4 = getelementptr inbounds i64, i64* %lngD3, i32 -11
  %lngD5 = ptrtoint i64* %lngD4 to i64
  %lngD2 = load i64*, i64** %Hp_Var
  %lngD6 = getelementptr inbounds i64, i64* %lngD2, i32 -1
  store i64 %lngD5, i64* %lngD6, !tbaa !3
  %lngD8 = load i64*, i64** %Hp_Var
  %lngD9 = getelementptr inbounds i64, i64* %lngD8, i32 -15
  %lngDa = ptrtoint i64* %lngD9 to i64
  %lngD7 = load i64*, i64** %Hp_Var
  %lngDb = getelementptr inbounds i64, i64* %lngD7, i32 0
  store i64 %lngDa, i64* %lngDb, !tbaa !3
  %lngDd = load i64*, i64** %Hp_Var
  %lngDe = ptrtoint i64* %lngDd to i64
  %lngDf = add i64 %lngDe, -23
  store i64 %lngDf, i64* %R1_Var
  %lngDg = load i64*, i64** %Sp_Var
  %lngDh = getelementptr inbounds i64, i64* %lngDg, i32 4
  %lngDi = ptrtoint i64* %lngDh to i64
  %lngDj = inttoptr i64 %lngDi to i64*
  store i64* %lngDj, i64** %Sp_Var
  %lngDk = load i64*, i64** %Sp_Var
  %lngDl = getelementptr inbounds i64, i64* %lngDk, i32 0
  %lngDm = bitcast i64* %lngDl to i64*
  %lngDn = load i64, i64* %lngDm, !tbaa !2
  %lngDo = inttoptr i64 %lngDn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngDp = load i64*, i64** %Sp_Var
  %lngDq = load i64*, i64** %Hp_Var
  %lngDr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngDo( i64* %Base_Arg, i64* %lngDp, i64* %lngDq, i64 %lngDr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfaa:
  %lngDs = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lngDs, !tbaa !5
  %lngDt = load i64, i64* %R1_Var
  store i64 %lngDt, i64* %R1_Var
  %lngDu = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngDv = load i64*, i64** %Sp_Var
  %lngDw = load i64*, i64** %Hp_Var
  %lngDx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngDu( i64* %Base_Arg, i64* %lngDv, i64* %lngDw, i64 %lngDx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7OD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7OD_info$def to i8*)
define internal ghccc void @s7OD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngDy:
  %ls7Ok = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfaw
cfaw:
  %lngDz = load i64*, i64** %Sp_Var
  %lngDA = getelementptr inbounds i64, i64* %lngDz, i32 -4
  %lngDB = ptrtoint i64* %lngDA to i64
  %lngDC = icmp ult i64 %lngDB, %SpLim_Arg
  %lngDD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngDC, i1 0 )
  br i1 %lngDD, label %cfaL, label %cfaM
cfaM:
  %lngDF = ptrtoint i8* @stg_upd_frame_info to i64
  %lngDE = load i64*, i64** %Sp_Var
  %lngDG = getelementptr inbounds i64, i64* %lngDE, i32 -2
  store i64 %lngDF, i64* %lngDG, !tbaa !2
  %lngDI = load i64, i64* %R1_Var
  %lngDH = load i64*, i64** %Sp_Var
  %lngDJ = getelementptr inbounds i64, i64* %lngDH, i32 -1
  store i64 %lngDI, i64* %lngDJ, !tbaa !2
  %lngDL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfat_info$def to i64
  %lngDK = load i64*, i64** %Sp_Var
  %lngDM = getelementptr inbounds i64, i64* %lngDK, i32 -4
  store i64 %lngDL, i64* %lngDM, !tbaa !2
  %lngDP = load i64, i64* %R1_Var
  %lngDQ = add i64 %lngDP, 16
  %lngDR = inttoptr i64 %lngDQ to i64*
  %lngDS = load i64, i64* %lngDR, !tbaa !4
  store i64 %lngDS, i64* %ls7Ok
  %lngDV = load i64, i64* %R1_Var
  %lngDW = add i64 %lngDV, 24
  %lngDX = inttoptr i64 %lngDW to i64*
  %lngDY = load i64, i64* %lngDX, !tbaa !4
  store i64 %lngDY, i64* %R1_Var
  %lngE0 = load i64, i64* %ls7Ok
  %lngDZ = load i64*, i64** %Sp_Var
  %lngE1 = getelementptr inbounds i64, i64* %lngDZ, i32 -3
  store i64 %lngE0, i64* %lngE1, !tbaa !2
  %lngE2 = load i64*, i64** %Sp_Var
  %lngE3 = getelementptr inbounds i64, i64* %lngE2, i32 -4
  %lngE4 = ptrtoint i64* %lngE3 to i64
  %lngE5 = inttoptr i64 %lngE4 to i64*
  store i64* %lngE5, i64** %Sp_Var
  %lngE6 = load i64, i64* %R1_Var
  %lngE7 = and i64 %lngE6, 7
  %lngE8 = icmp ne i64 %lngE7, 0
  br i1 %lngE8, label %ufaS, label %cfau
cfau:
  %lngEa = load i64, i64* %R1_Var
  %lngEb = inttoptr i64 %lngEa to i64*
  %lngEc = load i64, i64* %lngEb, !tbaa !4
  %lngEd = inttoptr i64 %lngEc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngEe = load i64*, i64** %Sp_Var
  %lngEf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngEd( i64* %Base_Arg, i64* %lngEe, i64* %Hp_Arg, i64 %lngEf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufaS:
  %lngEg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfat_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngEh = load i64*, i64** %Sp_Var
  %lngEi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngEg( i64* %Base_Arg, i64* %lngEh, i64* %Hp_Arg, i64 %lngEi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfaL:
  %lngEj = load i64, i64* %R1_Var
  store i64 %lngEj, i64* %R1_Var
  %lngEk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngEl = bitcast i64* %lngEk to i64*
  %lngEm = load i64, i64* %lngEl, !tbaa !5
  %lngEn = inttoptr i64 %lngEm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngEo = load i64*, i64** %Sp_Var
  %lngEp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngEn( i64* %Base_Arg, i64* %lngEo, i64* %Hp_Arg, i64 %lngEp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfat_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfat_info$def to i8*)
define internal ghccc void @cfat_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngEq:
  %ls7Oy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfat
cfat:
  %lngEr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaz_info$def to i64
  %lngEs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngEr, i64* %lngEs, !tbaa !2
  %lngEv = load i64, i64* %R1_Var
  %lngEw = add i64 %lngEv, 7
  %lngEx = inttoptr i64 %lngEw to double*
  %lngEy = load double, double* %lngEx, !tbaa !4
  store double %lngEy, double* %ls7Oy
  %lngEz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngEA = bitcast i64* %lngEz to i64*
  %lngEB = load i64, i64* %lngEA, !tbaa !2
  store i64 %lngEB, i64* %R1_Var
  %lngEC = load double, double* %ls7Oy
  %lngED = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngEE = bitcast i64* %lngED to double*
  store double %lngEC, double* %lngEE, !tbaa !2
  %lngEF = load i64, i64* %R1_Var
  %lngEG = and i64 %lngEF, 7
  %lngEH = icmp ne i64 %lngEG, 0
  br i1 %lngEH, label %ufaR, label %cfaA
cfaA:
  %lngEJ = load i64, i64* %R1_Var
  %lngEK = inttoptr i64 %lngEJ to i64*
  %lngEL = load i64, i64* %lngEK, !tbaa !4
  %lngEM = inttoptr i64 %lngEL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngEN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngEM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngEN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufaR:
  %lngEO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngEP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngEO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngEP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfaz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaz_info$def to i8*)
define internal ghccc void @cfaz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngEQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7OC = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfaz
cfaz:
  %lngER = load i64*, i64** %Hp_Var
  %lngES = getelementptr inbounds i64, i64* %lngER, i32 2
  %lngET = ptrtoint i64* %lngES to i64
  %lngEU = inttoptr i64 %lngET to i64*
  store i64* %lngEU, i64** %Hp_Var
  %lngEV = load i64*, i64** %Hp_Var
  %lngEW = ptrtoint i64* %lngEV to i64
  %lngEX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngEY = bitcast i64* %lngEX to i64*
  %lngEZ = load i64, i64* %lngEY, !tbaa !5
  %lngF0 = icmp ugt i64 %lngEW, %lngEZ
  %lngF1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngF0, i1 0 )
  br i1 %lngF1, label %cfaQ, label %cfaP
cfaP:
  %lngF2 = load i64*, i64** %Sp_Var
  %lngF3 = getelementptr inbounds i64, i64* %lngF2, i32 1
  %lngF4 = bitcast i64* %lngF3 to double*
  %lngF5 = load double, double* %lngF4, !tbaa !2
  %lngF6 = fmul double %lngF5, 0x3FE8189374BC6A7F
  %lngF9 = load i64, i64* %R1_Var
  %lngFa = add i64 %lngF9, 7
  %lngFb = inttoptr i64 %lngFa to double*
  %lngFc = load double, double* %lngFb, !tbaa !4
  %lngFd = fadd double %lngF6, %lngFc
  store double %lngFd, double* %ls7OC
  %lngFf = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngFe = load i64*, i64** %Hp_Var
  %lngFg = getelementptr inbounds i64, i64* %lngFe, i32 -1
  store i64 %lngFf, i64* %lngFg, !tbaa !3
  %lngFi = load double, double* %ls7OC
  %lngFh = load i64*, i64** %Hp_Var
  %lngFj = getelementptr inbounds i64, i64* %lngFh, i32 0
  %lngFk = bitcast i64* %lngFj to double*
  store double %lngFi, double* %lngFk, !tbaa !3
  %lngFm = load i64*, i64** %Hp_Var
  %lngFn = ptrtoint i64* %lngFm to i64
  %lngFo = add i64 %lngFn, -7
  store i64 %lngFo, i64* %R1_Var
  %lngFp = load i64*, i64** %Sp_Var
  %lngFq = getelementptr inbounds i64, i64* %lngFp, i32 2
  %lngFr = ptrtoint i64* %lngFq to i64
  %lngFs = inttoptr i64 %lngFr to i64*
  store i64* %lngFs, i64** %Sp_Var
  %lngFt = load i64*, i64** %Sp_Var
  %lngFu = getelementptr inbounds i64, i64* %lngFt, i32 0
  %lngFv = bitcast i64* %lngFu to i64*
  %lngFw = load i64, i64* %lngFv, !tbaa !2
  %lngFx = inttoptr i64 %lngFw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngFy = load i64*, i64** %Sp_Var
  %lngFz = load i64*, i64** %Hp_Var
  %lngFA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngFx( i64* %Base_Arg, i64* %lngFy, i64* %lngFz, i64 %lngFA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfaQ:
  %lngFB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngFB, !tbaa !5
  %lngFC = load i64, i64* %R1_Var
  store i64 %lngFC, i64* %R1_Var
  %lngFD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngFE = load i64*, i64** %Sp_Var
  %lngFF = load i64*, i64** %Hp_Var
  %lngFG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngFD( i64* %Base_Arg, i64* %lngFE, i64* %lngFF, i64 %lngFG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ow_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ow_info$def to i8*)
define internal ghccc void @s7Ow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ngFH:
  %ls7Oj = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfb0
cfb0:
  %lngFI = load i64*, i64** %Sp_Var
  %lngFJ = getelementptr inbounds i64, i64* %lngFI, i32 -4
  %lngFK = ptrtoint i64* %lngFJ to i64
  %lngFL = icmp ult i64 %lngFK, %SpLim_Arg
  %lngFM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngFL, i1 0 )
  br i1 %lngFM, label %cfbf, label %cfbg
cfbg:
  %lngFO = ptrtoint i8* @stg_upd_frame_info to i64
  %lngFN = load i64*, i64** %Sp_Var
  %lngFP = getelementptr inbounds i64, i64* %lngFN, i32 -2
  store i64 %lngFO, i64* %lngFP, !tbaa !2
  %lngFR = load i64, i64* %R1_Var
  %lngFQ = load i64*, i64** %Sp_Var
  %lngFS = getelementptr inbounds i64, i64* %lngFQ, i32 -1
  store i64 %lngFR, i64* %lngFS, !tbaa !2
  %lngFU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaX_info$def to i64
  %lngFT = load i64*, i64** %Sp_Var
  %lngFV = getelementptr inbounds i64, i64* %lngFT, i32 -4
  store i64 %lngFU, i64* %lngFV, !tbaa !2
  %lngFY = load i64, i64* %R1_Var
  %lngFZ = add i64 %lngFY, 16
  %lngG0 = inttoptr i64 %lngFZ to i64*
  %lngG1 = load i64, i64* %lngG0, !tbaa !4
  store i64 %lngG1, i64* %ls7Oj
  %lngG4 = load i64, i64* %R1_Var
  %lngG5 = add i64 %lngG4, 24
  %lngG6 = inttoptr i64 %lngG5 to i64*
  %lngG7 = load i64, i64* %lngG6, !tbaa !4
  store i64 %lngG7, i64* %R1_Var
  %lngG9 = load i64, i64* %ls7Oj
  %lngG8 = load i64*, i64** %Sp_Var
  %lngGa = getelementptr inbounds i64, i64* %lngG8, i32 -3
  store i64 %lngG9, i64* %lngGa, !tbaa !2
  %lngGb = load i64*, i64** %Sp_Var
  %lngGc = getelementptr inbounds i64, i64* %lngGb, i32 -4
  %lngGd = ptrtoint i64* %lngGc to i64
  %lngGe = inttoptr i64 %lngGd to i64*
  store i64* %lngGe, i64** %Sp_Var
  %lngGf = load i64, i64* %R1_Var
  %lngGg = and i64 %lngGf, 7
  %lngGh = icmp ne i64 %lngGg, 0
  br i1 %lngGh, label %ufbm, label %cfaY
cfaY:
  %lngGj = load i64, i64* %R1_Var
  %lngGk = inttoptr i64 %lngGj to i64*
  %lngGl = load i64, i64* %lngGk, !tbaa !4
  %lngGm = inttoptr i64 %lngGl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngGn = load i64*, i64** %Sp_Var
  %lngGo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngGm( i64* %Base_Arg, i64* %lngGn, i64* %Hp_Arg, i64 %lngGo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufbm:
  %lngGp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngGq = load i64*, i64** %Sp_Var
  %lngGr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngGp( i64* %Base_Arg, i64* %lngGq, i64* %Hp_Arg, i64 %lngGr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfbf:
  %lngGs = load i64, i64* %R1_Var
  store i64 %lngGs, i64* %R1_Var
  %lngGt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngGu = bitcast i64* %lngGt to i64*
  %lngGv = load i64, i64* %lngGu, !tbaa !5
  %lngGw = inttoptr i64 %lngGv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngGx = load i64*, i64** %Sp_Var
  %lngGy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngGw( i64* %Base_Arg, i64* %lngGx, i64* %Hp_Arg, i64 %lngGy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfaX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaX_info$def to i8*)
define internal ghccc void @cfaX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
ngGz:
  %ls7Or = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfaX
cfaX:
  %lngGA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfb3_info$def to i64
  %lngGB = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngGA, i64* %lngGB, !tbaa !2
  %lngGE = load i64, i64* %R1_Var
  %lngGF = add i64 %lngGE, 7
  %lngGG = inttoptr i64 %lngGF to double*
  %lngGH = load double, double* %lngGG, !tbaa !4
  store double %lngGH, double* %ls7Or
  %lngGI = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngGJ = bitcast i64* %lngGI to i64*
  %lngGK = load i64, i64* %lngGJ, !tbaa !2
  store i64 %lngGK, i64* %R1_Var
  %lngGL = load double, double* %ls7Or
  %lngGM = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngGN = bitcast i64* %lngGM to double*
  store double %lngGL, double* %lngGN, !tbaa !2
  %lngGO = load i64, i64* %R1_Var
  %lngGP = and i64 %lngGO, 7
  %lngGQ = icmp ne i64 %lngGP, 0
  br i1 %lngGQ, label %ufbl, label %cfb4
cfb4:
  %lngGS = load i64, i64* %R1_Var
  %lngGT = inttoptr i64 %lngGS to i64*
  %lngGU = load i64, i64* %lngGT, !tbaa !4
  %lngGV = inttoptr i64 %lngGU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngGW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngGV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngGW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufbl:
  %lngGX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfb3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngGY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngGX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngGY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfb3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfb3_info$def to i8*)
define internal ghccc void @cfb3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngGZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ov = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfb3
cfb3:
  %lngH0 = load i64*, i64** %Hp_Var
  %lngH1 = getelementptr inbounds i64, i64* %lngH0, i32 2
  %lngH2 = ptrtoint i64* %lngH1 to i64
  %lngH3 = inttoptr i64 %lngH2 to i64*
  store i64* %lngH3, i64** %Hp_Var
  %lngH4 = load i64*, i64** %Hp_Var
  %lngH5 = ptrtoint i64* %lngH4 to i64
  %lngH6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngH7 = bitcast i64* %lngH6 to i64*
  %lngH8 = load i64, i64* %lngH7, !tbaa !5
  %lngH9 = icmp ugt i64 %lngH5, %lngH8
  %lngHa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngH9, i1 0 )
  br i1 %lngHa, label %cfbk, label %cfbj
cfbj:
  %lngHb = load i64*, i64** %Sp_Var
  %lngHc = getelementptr inbounds i64, i64* %lngHb, i32 1
  %lngHd = bitcast i64* %lngHc to double*
  %lngHe = load double, double* %lngHd, !tbaa !2
  %lngHf = fmul double %lngHe, 0x3FD71A9FBE76C8B4
  %lngHi = load i64, i64* %R1_Var
  %lngHj = add i64 %lngHi, 7
  %lngHk = inttoptr i64 %lngHj to double*
  %lngHl = load double, double* %lngHk, !tbaa !4
  %lngHm = fadd double %lngHf, %lngHl
  store double %lngHm, double* %ls7Ov
  %lngHo = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngHn = load i64*, i64** %Hp_Var
  %lngHp = getelementptr inbounds i64, i64* %lngHn, i32 -1
  store i64 %lngHo, i64* %lngHp, !tbaa !3
  %lngHr = load double, double* %ls7Ov
  %lngHq = load i64*, i64** %Hp_Var
  %lngHs = getelementptr inbounds i64, i64* %lngHq, i32 0
  %lngHt = bitcast i64* %lngHs to double*
  store double %lngHr, double* %lngHt, !tbaa !3
  %lngHv = load i64*, i64** %Hp_Var
  %lngHw = ptrtoint i64* %lngHv to i64
  %lngHx = add i64 %lngHw, -7
  store i64 %lngHx, i64* %R1_Var
  %lngHy = load i64*, i64** %Sp_Var
  %lngHz = getelementptr inbounds i64, i64* %lngHy, i32 2
  %lngHA = ptrtoint i64* %lngHz to i64
  %lngHB = inttoptr i64 %lngHA to i64*
  store i64* %lngHB, i64** %Sp_Var
  %lngHC = load i64*, i64** %Sp_Var
  %lngHD = getelementptr inbounds i64, i64* %lngHC, i32 0
  %lngHE = bitcast i64* %lngHD to i64*
  %lngHF = load i64, i64* %lngHE, !tbaa !2
  %lngHG = inttoptr i64 %lngHF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngHH = load i64*, i64** %Sp_Var
  %lngHI = load i64*, i64** %Hp_Var
  %lngHJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngHG( i64* %Base_Arg, i64* %lngHH, i64* %lngHI, i64 %lngHJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfbk:
  %lngHK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngHK, !tbaa !5
  %lngHL = load i64, i64* %R1_Var
  store i64 %lngHL, i64* %R1_Var
  %lngHM = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngHN = load i64*, i64** %Sp_Var
  %lngHO = load i64*, i64** %Hp_Var
  %lngHP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngHM( i64* %Base_Arg, i64* %lngHN, i64* %lngHO, i64 %lngHP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Op_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Op_info$def to i8*)
define internal ghccc void @s7Op_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
ngHQ:
  %ls7Mc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfbu
cfbu:
  %lngHR = load i64*, i64** %Sp_Var
  %lngHS = getelementptr inbounds i64, i64* %lngHR, i32 -4
  %lngHT = ptrtoint i64* %lngHS to i64
  %lngHU = icmp ult i64 %lngHT, %SpLim_Arg
  %lngHV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngHU, i1 0 )
  br i1 %lngHV, label %cfbE, label %cfbF
cfbF:
  %lngHX = ptrtoint i8* @stg_upd_frame_info to i64
  %lngHW = load i64*, i64** %Sp_Var
  %lngHY = getelementptr inbounds i64, i64* %lngHW, i32 -2
  store i64 %lngHX, i64* %lngHY, !tbaa !2
  %lngI0 = load i64, i64* %R1_Var
  %lngHZ = load i64*, i64** %Sp_Var
  %lngI1 = getelementptr inbounds i64, i64* %lngHZ, i32 -1
  store i64 %lngI0, i64* %lngI1, !tbaa !2
  %lngI3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbr_info$def to i64
  %lngI2 = load i64*, i64** %Sp_Var
  %lngI4 = getelementptr inbounds i64, i64* %lngI2, i32 -4
  store i64 %lngI3, i64* %lngI4, !tbaa !2
  %lngI7 = load i64, i64* %R1_Var
  %lngI8 = add i64 %lngI7, 24
  %lngI9 = inttoptr i64 %lngI8 to double*
  %lngIa = load double, double* %lngI9, !tbaa !4
  store double %lngIa, double* %ls7Mc
  %lngId = load i64, i64* %R1_Var
  %lngIe = add i64 %lngId, 16
  %lngIf = inttoptr i64 %lngIe to i64*
  %lngIg = load i64, i64* %lngIf, !tbaa !4
  store i64 %lngIg, i64* %R1_Var
  %lngIi = load double, double* %ls7Mc
  %lngIh = load i64*, i64** %Sp_Var
  %lngIj = getelementptr inbounds i64, i64* %lngIh, i32 -3
  %lngIk = bitcast i64* %lngIj to double*
  store double %lngIi, double* %lngIk, !tbaa !2
  %lngIl = load i64*, i64** %Sp_Var
  %lngIm = getelementptr inbounds i64, i64* %lngIl, i32 -4
  %lngIn = ptrtoint i64* %lngIm to i64
  %lngIo = inttoptr i64 %lngIn to i64*
  store i64* %lngIo, i64** %Sp_Var
  %lngIp = load i64, i64* %R1_Var
  %lngIq = and i64 %lngIp, 7
  %lngIr = icmp ne i64 %lngIq, 0
  br i1 %lngIr, label %ufbJ, label %cfbs
cfbs:
  %lngIt = load i64, i64* %R1_Var
  %lngIu = inttoptr i64 %lngIt to i64*
  %lngIv = load i64, i64* %lngIu, !tbaa !4
  %lngIw = inttoptr i64 %lngIv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngIx = load i64*, i64** %Sp_Var
  %lngIy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngIw( i64* %Base_Arg, i64* %lngIx, i64* %Hp_Arg, i64 %lngIy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufbJ:
  %lngIz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngIA = load i64*, i64** %Sp_Var
  %lngIB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngIz( i64* %Base_Arg, i64* %lngIA, i64* %Hp_Arg, i64 %lngIB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfbE:
  %lngIC = load i64, i64* %R1_Var
  store i64 %lngIC, i64* %R1_Var
  %lngID = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngIE = bitcast i64* %lngID to i64*
  %lngIF = load i64, i64* %lngIE, !tbaa !5
  %lngIG = inttoptr i64 %lngIF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngIH = load i64*, i64** %Sp_Var
  %lngII = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngIG( i64* %Base_Arg, i64* %lngIH, i64* %Hp_Arg, i64 %lngII, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfbr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbr_info$def to i8*)
define internal ghccc void @cfbr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
ngIJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Oo = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfbr
cfbr:
  %lngIK = load i64*, i64** %Hp_Var
  %lngIL = getelementptr inbounds i64, i64* %lngIK, i32 2
  %lngIM = ptrtoint i64* %lngIL to i64
  %lngIN = inttoptr i64 %lngIM to i64*
  store i64* %lngIN, i64** %Hp_Var
  %lngIO = load i64*, i64** %Hp_Var
  %lngIP = ptrtoint i64* %lngIO to i64
  %lngIQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngIR = bitcast i64* %lngIQ to i64*
  %lngIS = load i64, i64* %lngIR, !tbaa !5
  %lngIT = icmp ugt i64 %lngIP, %lngIS
  %lngIU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngIT, i1 0 )
  br i1 %lngIU, label %cfbI, label %cfbH
cfbH:
  %lngIV = load i64*, i64** %Sp_Var
  %lngIW = getelementptr inbounds i64, i64* %lngIV, i32 1
  %lngIX = bitcast i64* %lngIW to double*
  %lngIY = load double, double* %lngIX, !tbaa !2
  %lngIZ = fmul double %lngIY, 0x3FB3F7CED916872B
  %lngJ2 = load i64, i64* %R1_Var
  %lngJ3 = add i64 %lngJ2, 7
  %lngJ4 = inttoptr i64 %lngJ3 to double*
  %lngJ5 = load double, double* %lngJ4, !tbaa !4
  %lngJ6 = fadd double %lngIZ, %lngJ5
  store double %lngJ6, double* %ls7Oo
  %lngJ8 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngJ7 = load i64*, i64** %Hp_Var
  %lngJ9 = getelementptr inbounds i64, i64* %lngJ7, i32 -1
  store i64 %lngJ8, i64* %lngJ9, !tbaa !3
  %lngJb = load double, double* %ls7Oo
  %lngJa = load i64*, i64** %Hp_Var
  %lngJc = getelementptr inbounds i64, i64* %lngJa, i32 0
  %lngJd = bitcast i64* %lngJc to double*
  store double %lngJb, double* %lngJd, !tbaa !3
  %lngJf = load i64*, i64** %Hp_Var
  %lngJg = ptrtoint i64* %lngJf to i64
  %lngJh = add i64 %lngJg, -7
  store i64 %lngJh, i64* %R1_Var
  %lngJi = load i64*, i64** %Sp_Var
  %lngJj = getelementptr inbounds i64, i64* %lngJi, i32 2
  %lngJk = ptrtoint i64* %lngJj to i64
  %lngJl = inttoptr i64 %lngJk to i64*
  store i64* %lngJl, i64** %Sp_Var
  %lngJm = load i64*, i64** %Sp_Var
  %lngJn = getelementptr inbounds i64, i64* %lngJm, i32 0
  %lngJo = bitcast i64* %lngJn to i64*
  %lngJp = load i64, i64* %lngJo, !tbaa !2
  %lngJq = inttoptr i64 %lngJp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngJr = load i64*, i64** %Sp_Var
  %lngJs = load i64*, i64** %Hp_Var
  %lngJt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngJq( i64* %Base_Arg, i64* %lngJr, i64* %lngJs, i64 %lngJt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfbI:
  %lngJu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngJu, !tbaa !5
  %lngJv = load i64, i64* %R1_Var
  store i64 %lngJv, i64* %R1_Var
  %lngJw = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngJx = load i64*, i64** %Sp_Var
  %lngJy = load i64*, i64** %Hp_Var
  %lngJz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngJw( i64* %Base_Arg, i64* %lngJx, i64* %lngJy, i64 %lngJz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Pg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Pg_info$def to i8*)
define internal ghccc void @s7Pg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
ngJA:
  %ls7OR = alloca i64, i32 1
  %ls7M6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfc7
cfc7:
  %lngJB = load i64*, i64** %Sp_Var
  %lngJC = getelementptr inbounds i64, i64* %lngJB, i32 -5
  %lngJD = ptrtoint i64* %lngJC to i64
  %lngJE = icmp ult i64 %lngJD, %SpLim_Arg
  %lngJF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngJE, i1 0 )
  br i1 %lngJF, label %cfcr, label %cfcs
cfcs:
  %lngJH = ptrtoint i8* @stg_upd_frame_info to i64
  %lngJG = load i64*, i64** %Sp_Var
  %lngJI = getelementptr inbounds i64, i64* %lngJG, i32 -2
  store i64 %lngJH, i64* %lngJI, !tbaa !2
  %lngJK = load i64, i64* %R1_Var
  %lngJJ = load i64*, i64** %Sp_Var
  %lngJL = getelementptr inbounds i64, i64* %lngJJ, i32 -1
  store i64 %lngJK, i64* %lngJL, !tbaa !2
  %lngJN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfc4_info$def to i64
  %lngJM = load i64*, i64** %Sp_Var
  %lngJO = getelementptr inbounds i64, i64* %lngJM, i32 -5
  store i64 %lngJN, i64* %lngJO, !tbaa !2
  %lngJR = load i64, i64* %R1_Var
  %lngJS = add i64 %lngJR, 16
  %lngJT = inttoptr i64 %lngJS to i64*
  %lngJU = load i64, i64* %lngJT, !tbaa !4
  store i64 %lngJU, i64* %ls7OR
  %lngJX = load i64, i64* %R1_Var
  %lngJY = add i64 %lngJX, 24
  %lngJZ = inttoptr i64 %lngJY to i64*
  %lngK0 = load i64, i64* %lngJZ, !tbaa !4
  store i64 %lngK0, i64* %ls7M6
  %lngK3 = load i64, i64* %R1_Var
  %lngK4 = add i64 %lngK3, 32
  %lngK5 = inttoptr i64 %lngK4 to i64*
  %lngK6 = load i64, i64* %lngK5, !tbaa !4
  store i64 %lngK6, i64* %R1_Var
  %lngK8 = load i64, i64* %ls7M6
  %lngK7 = load i64*, i64** %Sp_Var
  %lngK9 = getelementptr inbounds i64, i64* %lngK7, i32 -4
  store i64 %lngK8, i64* %lngK9, !tbaa !2
  %lngKb = load i64, i64* %ls7OR
  %lngKa = load i64*, i64** %Sp_Var
  %lngKc = getelementptr inbounds i64, i64* %lngKa, i32 -3
  store i64 %lngKb, i64* %lngKc, !tbaa !2
  %lngKd = load i64*, i64** %Sp_Var
  %lngKe = getelementptr inbounds i64, i64* %lngKd, i32 -5
  %lngKf = ptrtoint i64* %lngKe to i64
  %lngKg = inttoptr i64 %lngKf to i64*
  store i64* %lngKg, i64** %Sp_Var
  %lngKh = load i64, i64* %R1_Var
  %lngKi = and i64 %lngKh, 7
  %lngKj = icmp ne i64 %lngKi, 0
  br i1 %lngKj, label %ufcz, label %cfc5
cfc5:
  %lngKl = load i64, i64* %R1_Var
  %lngKm = inttoptr i64 %lngKl to i64*
  %lngKn = load i64, i64* %lngKm, !tbaa !4
  %lngKo = inttoptr i64 %lngKn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngKp = load i64*, i64** %Sp_Var
  %lngKq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngKo( i64* %Base_Arg, i64* %lngKp, i64* %Hp_Arg, i64 %lngKq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufcz:
  %lngKr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfc4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngKs = load i64*, i64** %Sp_Var
  %lngKt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngKr( i64* %Base_Arg, i64* %lngKs, i64* %Hp_Arg, i64 %lngKt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfcr:
  %lngKu = load i64, i64* %R1_Var
  store i64 %lngKu, i64* %R1_Var
  %lngKv = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngKw = bitcast i64* %lngKv to i64*
  %lngKx = load i64, i64* %lngKw, !tbaa !5
  %lngKy = inttoptr i64 %lngKx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngKz = load i64*, i64** %Sp_Var
  %lngKA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngKy( i64* %Base_Arg, i64* %lngKz, i64* %Hp_Arg, i64 %lngKA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfc4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfc4_info$def to i8*)
define internal ghccc void @cfc4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
ngKB:
  %ls7P9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfc4
cfc4:
  %lngKC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfca_info$def to i64
  %lngKD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngKC, i64* %lngKD, !tbaa !2
  %lngKG = load i64, i64* %R1_Var
  %lngKH = add i64 %lngKG, 7
  %lngKI = inttoptr i64 %lngKH to double*
  %lngKJ = load double, double* %lngKI, !tbaa !4
  store double %lngKJ, double* %ls7P9
  %lngKK = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngKL = bitcast i64* %lngKK to i64*
  %lngKM = load i64, i64* %lngKL, !tbaa !2
  store i64 %lngKM, i64* %R1_Var
  %lngKN = load double, double* %ls7P9
  %lngKO = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngKP = bitcast i64* %lngKO to double*
  store double %lngKN, double* %lngKP, !tbaa !2
  %lngKQ = load i64, i64* %R1_Var
  %lngKR = and i64 %lngKQ, 7
  %lngKS = icmp ne i64 %lngKR, 0
  br i1 %lngKS, label %ufcy, label %cfcb
cfcb:
  %lngKU = load i64, i64* %R1_Var
  %lngKV = inttoptr i64 %lngKU to i64*
  %lngKW = load i64, i64* %lngKV, !tbaa !4
  %lngKX = inttoptr i64 %lngKW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngKY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngKX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngKY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufcy:
  %lngKZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfca_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngL0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngKZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngL0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfca_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfca_info$def to i8*)
define internal ghccc void @cfca_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ngL1:
  %ls7Pb = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfca
cfca:
  %lngL2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcf_info$def to i64
  %lngL3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngL2, i64* %lngL3, !tbaa !2
  %lngL6 = load i64, i64* %R1_Var
  %lngL7 = add i64 %lngL6, 7
  %lngL8 = inttoptr i64 %lngL7 to double*
  %lngL9 = load double, double* %lngL8, !tbaa !4
  store double %lngL9, double* %ls7Pb
  %lngLa = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngLb = bitcast i64* %lngLa to i64*
  %lngLc = load i64, i64* %lngLb, !tbaa !2
  store i64 %lngLc, i64* %R1_Var
  %lngLd = load double, double* %ls7Pb
  %lngLe = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngLf = bitcast i64* %lngLe to double*
  store double %lngLd, double* %lngLf, !tbaa !2
  %lngLg = load i64, i64* %R1_Var
  %lngLh = and i64 %lngLg, 7
  %lngLi = icmp ne i64 %lngLh, 0
  br i1 %lngLi, label %ufcA, label %cfcg
cfcg:
  %lngLk = load i64, i64* %R1_Var
  %lngLl = inttoptr i64 %lngLk to i64*
  %lngLm = load i64, i64* %lngLl, !tbaa !4
  %lngLn = inttoptr i64 %lngLm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngLo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngLn( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngLo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufcA:
  %lngLp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngLq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngLp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngLq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfcf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcf_info$def to i8*)
define internal ghccc void @cfcf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ngLr:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Pf = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfcf
cfcf:
  %lngLs = load i64*, i64** %Hp_Var
  %lngLt = getelementptr inbounds i64, i64* %lngLs, i32 2
  %lngLu = ptrtoint i64* %lngLt to i64
  %lngLv = inttoptr i64 %lngLu to i64*
  store i64* %lngLv, i64** %Hp_Var
  %lngLw = load i64*, i64** %Hp_Var
  %lngLx = ptrtoint i64* %lngLw to i64
  %lngLy = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngLz = bitcast i64* %lngLy to i64*
  %lngLA = load i64, i64* %lngLz, !tbaa !5
  %lngLB = icmp ugt i64 %lngLx, %lngLA
  %lngLC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngLB, i1 0 )
  br i1 %lngLC, label %cfcx, label %cfcw
cfcw:
  %lngLD = load i64*, i64** %Sp_Var
  %lngLE = getelementptr inbounds i64, i64* %lngLD, i32 1
  %lngLF = bitcast i64* %lngLE to double*
  %lngLG = load double, double* %lngLF, !tbaa !2
  %lngLH = load i64*, i64** %Sp_Var
  %lngLI = getelementptr inbounds i64, i64* %lngLH, i32 2
  %lngLJ = bitcast i64* %lngLI to double*
  %lngLK = load double, double* %lngLJ, !tbaa !2
  %lngLL = fmul double %lngLG, %lngLK
  %lngLO = load i64, i64* %R1_Var
  %lngLP = add i64 %lngLO, 7
  %lngLQ = inttoptr i64 %lngLP to double*
  %lngLR = load double, double* %lngLQ, !tbaa !4
  %lngLS = fadd double %lngLL, %lngLR
  store double %lngLS, double* %ls7Pf
  %lngLU = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngLT = load i64*, i64** %Hp_Var
  %lngLV = getelementptr inbounds i64, i64* %lngLT, i32 -1
  store i64 %lngLU, i64* %lngLV, !tbaa !3
  %lngLX = load double, double* %ls7Pf
  %lngLW = load i64*, i64** %Hp_Var
  %lngLY = getelementptr inbounds i64, i64* %lngLW, i32 0
  %lngLZ = bitcast i64* %lngLY to double*
  store double %lngLX, double* %lngLZ, !tbaa !3
  %lngM1 = load i64*, i64** %Hp_Var
  %lngM2 = ptrtoint i64* %lngM1 to i64
  %lngM3 = add i64 %lngM2, -7
  store i64 %lngM3, i64* %R1_Var
  %lngM4 = load i64*, i64** %Sp_Var
  %lngM5 = getelementptr inbounds i64, i64* %lngM4, i32 3
  %lngM6 = ptrtoint i64* %lngM5 to i64
  %lngM7 = inttoptr i64 %lngM6 to i64*
  store i64* %lngM7, i64** %Sp_Var
  %lngM8 = load i64*, i64** %Sp_Var
  %lngM9 = getelementptr inbounds i64, i64* %lngM8, i32 0
  %lngMa = bitcast i64* %lngM9 to i64*
  %lngMb = load i64, i64* %lngMa, !tbaa !2
  %lngMc = inttoptr i64 %lngMb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngMd = load i64*, i64** %Sp_Var
  %lngMe = load i64*, i64** %Hp_Var
  %lngMf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngMc( i64* %Base_Arg, i64* %lngMd, i64* %lngMe, i64 %lngMf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfcx:
  %lngMg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngMg, !tbaa !5
  %lngMh = load i64, i64* %R1_Var
  store i64 %lngMh, i64* %R1_Var
  %lngMi = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngMj = load i64*, i64** %Sp_Var
  %lngMk = load i64*, i64** %Hp_Var
  %lngMl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngMi( i64* %Base_Arg, i64* %lngMj, i64* %lngMk, i64 %lngMl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7P7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7P7_info$def to i8*)
define internal ghccc void @s7P7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
ngMm:
  %ls7OQ = alloca i64, i32 1
  %ls7M5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfcI
cfcI:
  %lngMn = load i64*, i64** %Sp_Var
  %lngMo = getelementptr inbounds i64, i64* %lngMn, i32 -5
  %lngMp = ptrtoint i64* %lngMo to i64
  %lngMq = icmp ult i64 %lngMp, %SpLim_Arg
  %lngMr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngMq, i1 0 )
  br i1 %lngMr, label %cfd2, label %cfd3
cfd3:
  %lngMt = ptrtoint i8* @stg_upd_frame_info to i64
  %lngMs = load i64*, i64** %Sp_Var
  %lngMu = getelementptr inbounds i64, i64* %lngMs, i32 -2
  store i64 %lngMt, i64* %lngMu, !tbaa !2
  %lngMw = load i64, i64* %R1_Var
  %lngMv = load i64*, i64** %Sp_Var
  %lngMx = getelementptr inbounds i64, i64* %lngMv, i32 -1
  store i64 %lngMw, i64* %lngMx, !tbaa !2
  %lngMz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcF_info$def to i64
  %lngMy = load i64*, i64** %Sp_Var
  %lngMA = getelementptr inbounds i64, i64* %lngMy, i32 -5
  store i64 %lngMz, i64* %lngMA, !tbaa !2
  %lngMD = load i64, i64* %R1_Var
  %lngME = add i64 %lngMD, 16
  %lngMF = inttoptr i64 %lngME to i64*
  %lngMG = load i64, i64* %lngMF, !tbaa !4
  store i64 %lngMG, i64* %ls7OQ
  %lngMJ = load i64, i64* %R1_Var
  %lngMK = add i64 %lngMJ, 24
  %lngML = inttoptr i64 %lngMK to i64*
  %lngMM = load i64, i64* %lngML, !tbaa !4
  store i64 %lngMM, i64* %ls7M5
  %lngMP = load i64, i64* %R1_Var
  %lngMQ = add i64 %lngMP, 32
  %lngMR = inttoptr i64 %lngMQ to i64*
  %lngMS = load i64, i64* %lngMR, !tbaa !4
  store i64 %lngMS, i64* %R1_Var
  %lngMU = load i64, i64* %ls7M5
  %lngMT = load i64*, i64** %Sp_Var
  %lngMV = getelementptr inbounds i64, i64* %lngMT, i32 -4
  store i64 %lngMU, i64* %lngMV, !tbaa !2
  %lngMX = load i64, i64* %ls7OQ
  %lngMW = load i64*, i64** %Sp_Var
  %lngMY = getelementptr inbounds i64, i64* %lngMW, i32 -3
  store i64 %lngMX, i64* %lngMY, !tbaa !2
  %lngMZ = load i64*, i64** %Sp_Var
  %lngN0 = getelementptr inbounds i64, i64* %lngMZ, i32 -5
  %lngN1 = ptrtoint i64* %lngN0 to i64
  %lngN2 = inttoptr i64 %lngN1 to i64*
  store i64* %lngN2, i64** %Sp_Var
  %lngN3 = load i64, i64* %R1_Var
  %lngN4 = and i64 %lngN3, 7
  %lngN5 = icmp ne i64 %lngN4, 0
  br i1 %lngN5, label %ufda, label %cfcG
cfcG:
  %lngN7 = load i64, i64* %R1_Var
  %lngN8 = inttoptr i64 %lngN7 to i64*
  %lngN9 = load i64, i64* %lngN8, !tbaa !4
  %lngNa = inttoptr i64 %lngN9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngNb = load i64*, i64** %Sp_Var
  %lngNc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngNa( i64* %Base_Arg, i64* %lngNb, i64* %Hp_Arg, i64 %lngNc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufda:
  %lngNd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngNe = load i64*, i64** %Sp_Var
  %lngNf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngNd( i64* %Base_Arg, i64* %lngNe, i64* %Hp_Arg, i64 %lngNf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfd2:
  %lngNg = load i64, i64* %R1_Var
  store i64 %lngNg, i64* %R1_Var
  %lngNh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngNi = bitcast i64* %lngNh to i64*
  %lngNj = load i64, i64* %lngNi, !tbaa !5
  %lngNk = inttoptr i64 %lngNj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngNl = load i64*, i64** %Sp_Var
  %lngNm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngNk( i64* %Base_Arg, i64* %lngNl, i64* %Hp_Arg, i64 %lngNm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfcF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcF_info$def to i8*)
define internal ghccc void @cfcF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
ngNn:
  %ls7P0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfcF
cfcF:
  %lngNo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcL_info$def to i64
  %lngNp = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngNo, i64* %lngNp, !tbaa !2
  %lngNs = load i64, i64* %R1_Var
  %lngNt = add i64 %lngNs, 7
  %lngNu = inttoptr i64 %lngNt to double*
  %lngNv = load double, double* %lngNu, !tbaa !4
  store double %lngNv, double* %ls7P0
  %lngNw = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngNx = bitcast i64* %lngNw to i64*
  %lngNy = load i64, i64* %lngNx, !tbaa !2
  store i64 %lngNy, i64* %R1_Var
  %lngNz = load double, double* %ls7P0
  %lngNA = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lngNB = bitcast i64* %lngNA to double*
  store double %lngNz, double* %lngNB, !tbaa !2
  %lngNC = load i64, i64* %R1_Var
  %lngND = and i64 %lngNC, 7
  %lngNE = icmp ne i64 %lngND, 0
  br i1 %lngNE, label %ufd9, label %cfcM
cfcM:
  %lngNG = load i64, i64* %R1_Var
  %lngNH = inttoptr i64 %lngNG to i64*
  %lngNI = load i64, i64* %lngNH, !tbaa !4
  %lngNJ = inttoptr i64 %lngNI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngNK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngNJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngNK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufd9:
  %lngNL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngNM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngNL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngNM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfcL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcL_info$def to i8*)
define internal ghccc void @cfcL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ngNN:
  %ls7P2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfcL
cfcL:
  %lngNO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcQ_info$def to i64
  %lngNP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngNO, i64* %lngNP, !tbaa !2
  %lngNS = load i64, i64* %R1_Var
  %lngNT = add i64 %lngNS, 7
  %lngNU = inttoptr i64 %lngNT to double*
  %lngNV = load double, double* %lngNU, !tbaa !4
  store double %lngNV, double* %ls7P2
  %lngNW = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngNX = bitcast i64* %lngNW to i64*
  %lngNY = load i64, i64* %lngNX, !tbaa !2
  store i64 %lngNY, i64* %R1_Var
  %lngNZ = load double, double* %ls7P2
  %lngO0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngO1 = bitcast i64* %lngO0 to double*
  store double %lngNZ, double* %lngO1, !tbaa !2
  %lngO2 = load i64, i64* %R1_Var
  %lngO3 = and i64 %lngO2, 7
  %lngO4 = icmp ne i64 %lngO3, 0
  br i1 %lngO4, label %ufdb, label %cfcR
cfcR:
  %lngO6 = load i64, i64* %R1_Var
  %lngO7 = inttoptr i64 %lngO6 to i64*
  %lngO8 = load i64, i64* %lngO7, !tbaa !4
  %lngO9 = inttoptr i64 %lngO8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngOa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngO9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngOa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufdb:
  %lngOb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngOc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngOb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngOc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfcQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfcQ_info$def to i8*)
define internal ghccc void @cfcQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ngOd:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7P6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfcQ
cfcQ:
  %lngOe = load i64*, i64** %Hp_Var
  %lngOf = getelementptr inbounds i64, i64* %lngOe, i32 2
  %lngOg = ptrtoint i64* %lngOf to i64
  %lngOh = inttoptr i64 %lngOg to i64*
  store i64* %lngOh, i64** %Hp_Var
  %lngOi = load i64*, i64** %Hp_Var
  %lngOj = ptrtoint i64* %lngOi to i64
  %lngOk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngOl = bitcast i64* %lngOk to i64*
  %lngOm = load i64, i64* %lngOl, !tbaa !5
  %lngOn = icmp ugt i64 %lngOj, %lngOm
  %lngOo = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngOn, i1 0 )
  br i1 %lngOo, label %cfd8, label %cfd7
cfd7:
  %lngOp = load i64*, i64** %Sp_Var
  %lngOq = getelementptr inbounds i64, i64* %lngOp, i32 1
  %lngOr = bitcast i64* %lngOq to double*
  %lngOs = load double, double* %lngOr, !tbaa !2
  %lngOt = load i64*, i64** %Sp_Var
  %lngOu = getelementptr inbounds i64, i64* %lngOt, i32 2
  %lngOv = bitcast i64* %lngOu to double*
  %lngOw = load double, double* %lngOv, !tbaa !2
  %lngOx = fmul double %lngOs, %lngOw
  %lngOA = load i64, i64* %R1_Var
  %lngOB = add i64 %lngOA, 7
  %lngOC = inttoptr i64 %lngOB to double*
  %lngOD = load double, double* %lngOC, !tbaa !4
  %lngOE = fadd double %lngOx, %lngOD
  store double %lngOE, double* %ls7P6
  %lngOG = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngOF = load i64*, i64** %Hp_Var
  %lngOH = getelementptr inbounds i64, i64* %lngOF, i32 -1
  store i64 %lngOG, i64* %lngOH, !tbaa !3
  %lngOJ = load double, double* %ls7P6
  %lngOI = load i64*, i64** %Hp_Var
  %lngOK = getelementptr inbounds i64, i64* %lngOI, i32 0
  %lngOL = bitcast i64* %lngOK to double*
  store double %lngOJ, double* %lngOL, !tbaa !3
  %lngON = load i64*, i64** %Hp_Var
  %lngOO = ptrtoint i64* %lngON to i64
  %lngOP = add i64 %lngOO, -7
  store i64 %lngOP, i64* %R1_Var
  %lngOQ = load i64*, i64** %Sp_Var
  %lngOR = getelementptr inbounds i64, i64* %lngOQ, i32 3
  %lngOS = ptrtoint i64* %lngOR to i64
  %lngOT = inttoptr i64 %lngOS to i64*
  store i64* %lngOT, i64** %Sp_Var
  %lngOU = load i64*, i64** %Sp_Var
  %lngOV = getelementptr inbounds i64, i64* %lngOU, i32 0
  %lngOW = bitcast i64* %lngOV to i64*
  %lngOX = load i64, i64* %lngOW, !tbaa !2
  %lngOY = inttoptr i64 %lngOX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngOZ = load i64*, i64** %Sp_Var
  %lngP0 = load i64*, i64** %Hp_Var
  %lngP1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngOY( i64* %Base_Arg, i64* %lngOZ, i64* %lngP0, i64 %lngP1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfd8:
  %lngP2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngP2, !tbaa !5
  %lngP3 = load i64, i64* %R1_Var
  store i64 %lngP3, i64* %R1_Var
  %lngP4 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngP5 = load i64*, i64** %Sp_Var
  %lngP6 = load i64*, i64** %Hp_Var
  %lngP7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngP4( i64* %Base_Arg, i64* %lngP5, i64* %lngP6, i64 %lngP7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7OY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7OY_info$def to i8*)
define internal ghccc void @s7OY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967298, i32 15, i32 0}>
{
ngP8:
  %ls7OP = alloca i64, i32 1
  %ls7Mc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfdj
cfdj:
  %lngP9 = load i64*, i64** %Sp_Var
  %lngPa = getelementptr inbounds i64, i64* %lngP9, i32 -5
  %lngPb = ptrtoint i64* %lngPa to i64
  %lngPc = icmp ult i64 %lngPb, %SpLim_Arg
  %lngPd = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngPc, i1 0 )
  br i1 %lngPd, label %cfdy, label %cfdz
cfdz:
  %lngPf = ptrtoint i8* @stg_upd_frame_info to i64
  %lngPe = load i64*, i64** %Sp_Var
  %lngPg = getelementptr inbounds i64, i64* %lngPe, i32 -2
  store i64 %lngPf, i64* %lngPg, !tbaa !2
  %lngPi = load i64, i64* %R1_Var
  %lngPh = load i64*, i64** %Sp_Var
  %lngPj = getelementptr inbounds i64, i64* %lngPh, i32 -1
  store i64 %lngPi, i64* %lngPj, !tbaa !2
  %lngPl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdg_info$def to i64
  %lngPk = load i64*, i64** %Sp_Var
  %lngPm = getelementptr inbounds i64, i64* %lngPk, i32 -5
  store i64 %lngPl, i64* %lngPm, !tbaa !2
  %lngPp = load i64, i64* %R1_Var
  %lngPq = add i64 %lngPp, 16
  %lngPr = inttoptr i64 %lngPq to i64*
  %lngPs = load i64, i64* %lngPr, !tbaa !4
  store i64 %lngPs, i64* %ls7OP
  %lngPv = load i64, i64* %R1_Var
  %lngPw = add i64 %lngPv, 32
  %lngPx = inttoptr i64 %lngPw to double*
  %lngPy = load double, double* %lngPx, !tbaa !4
  store double %lngPy, double* %ls7Mc
  %lngPB = load i64, i64* %R1_Var
  %lngPC = add i64 %lngPB, 24
  %lngPD = inttoptr i64 %lngPC to i64*
  %lngPE = load i64, i64* %lngPD, !tbaa !4
  store i64 %lngPE, i64* %R1_Var
  %lngPG = load double, double* %ls7Mc
  %lngPF = load i64*, i64** %Sp_Var
  %lngPH = getelementptr inbounds i64, i64* %lngPF, i32 -4
  %lngPI = bitcast i64* %lngPH to double*
  store double %lngPG, double* %lngPI, !tbaa !2
  %lngPK = load i64, i64* %ls7OP
  %lngPJ = load i64*, i64** %Sp_Var
  %lngPL = getelementptr inbounds i64, i64* %lngPJ, i32 -3
  store i64 %lngPK, i64* %lngPL, !tbaa !2
  %lngPM = load i64*, i64** %Sp_Var
  %lngPN = getelementptr inbounds i64, i64* %lngPM, i32 -5
  %lngPO = ptrtoint i64* %lngPN to i64
  %lngPP = inttoptr i64 %lngPO to i64*
  store i64* %lngPP, i64** %Sp_Var
  %lngPQ = load i64, i64* %R1_Var
  %lngPR = and i64 %lngPQ, 7
  %lngPS = icmp ne i64 %lngPR, 0
  br i1 %lngPS, label %ufdF, label %cfdh
cfdh:
  %lngPU = load i64, i64* %R1_Var
  %lngPV = inttoptr i64 %lngPU to i64*
  %lngPW = load i64, i64* %lngPV, !tbaa !4
  %lngPX = inttoptr i64 %lngPW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngPY = load i64*, i64** %Sp_Var
  %lngPZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngPX( i64* %Base_Arg, i64* %lngPY, i64* %Hp_Arg, i64 %lngPZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufdF:
  %lngQ0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngQ1 = load i64*, i64** %Sp_Var
  %lngQ2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngQ0( i64* %Base_Arg, i64* %lngQ1, i64* %Hp_Arg, i64 %lngQ2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfdy:
  %lngQ3 = load i64, i64* %R1_Var
  store i64 %lngQ3, i64* %R1_Var
  %lngQ4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngQ5 = bitcast i64* %lngQ4 to i64*
  %lngQ6 = load i64, i64* %lngQ5, !tbaa !5
  %lngQ7 = inttoptr i64 %lngQ6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngQ8 = load i64*, i64** %Sp_Var
  %lngQ9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngQ7( i64* %Base_Arg, i64* %lngQ8, i64* %Hp_Arg, i64 %lngQ9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfdg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdg_info$def to i8*)
define internal ghccc void @cfdg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
ngQa:
  %ls7OT = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfdg
cfdg:
  %lngQb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdm_info$def to i64
  %lngQc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lngQb, i64* %lngQc, !tbaa !2
  %lngQf = load i64, i64* %R1_Var
  %lngQg = add i64 %lngQf, 7
  %lngQh = inttoptr i64 %lngQg to double*
  %lngQi = load double, double* %lngQh, !tbaa !4
  store double %lngQi, double* %ls7OT
  %lngQj = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngQk = bitcast i64* %lngQj to i64*
  %lngQl = load i64, i64* %lngQk, !tbaa !2
  store i64 %lngQl, i64* %R1_Var
  %lngQm = load double, double* %ls7OT
  %lngQn = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lngQo = bitcast i64* %lngQn to double*
  store double %lngQm, double* %lngQo, !tbaa !2
  %lngQp = load i64, i64* %R1_Var
  %lngQq = and i64 %lngQp, 7
  %lngQr = icmp ne i64 %lngQq, 0
  br i1 %lngQr, label %ufdE, label %cfdn
cfdn:
  %lngQt = load i64, i64* %R1_Var
  %lngQu = inttoptr i64 %lngQt to i64*
  %lngQv = load i64, i64* %lngQu, !tbaa !4
  %lngQw = inttoptr i64 %lngQv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngQx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngQw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngQx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufdE:
  %lngQy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngQz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngQy( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lngQz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfdm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfdm_info$def to i8*)
define internal ghccc void @cfdm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ngQA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7OX = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfdm
cfdm:
  %lngQB = load i64*, i64** %Hp_Var
  %lngQC = getelementptr inbounds i64, i64* %lngQB, i32 2
  %lngQD = ptrtoint i64* %lngQC to i64
  %lngQE = inttoptr i64 %lngQD to i64*
  store i64* %lngQE, i64** %Hp_Var
  %lngQF = load i64*, i64** %Hp_Var
  %lngQG = ptrtoint i64* %lngQF to i64
  %lngQH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngQI = bitcast i64* %lngQH to i64*
  %lngQJ = load i64, i64* %lngQI, !tbaa !5
  %lngQK = icmp ugt i64 %lngQG, %lngQJ
  %lngQL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngQK, i1 0 )
  br i1 %lngQL, label %cfdD, label %cfdC
cfdC:
  %lngQM = load i64*, i64** %Sp_Var
  %lngQN = getelementptr inbounds i64, i64* %lngQM, i32 2
  %lngQO = bitcast i64* %lngQN to double*
  %lngQP = load double, double* %lngQO, !tbaa !2
  %lngQQ = load i64*, i64** %Sp_Var
  %lngQR = getelementptr inbounds i64, i64* %lngQQ, i32 1
  %lngQS = bitcast i64* %lngQR to double*
  %lngQT = load double, double* %lngQS, !tbaa !2
  %lngQU = fmul double %lngQP, %lngQT
  %lngQX = load i64, i64* %R1_Var
  %lngQY = add i64 %lngQX, 7
  %lngQZ = inttoptr i64 %lngQY to double*
  %lngR0 = load double, double* %lngQZ, !tbaa !4
  %lngR1 = fadd double %lngQU, %lngR0
  store double %lngR1, double* %ls7OX
  %lngR3 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngR2 = load i64*, i64** %Hp_Var
  %lngR4 = getelementptr inbounds i64, i64* %lngR2, i32 -1
  store i64 %lngR3, i64* %lngR4, !tbaa !3
  %lngR6 = load double, double* %ls7OX
  %lngR5 = load i64*, i64** %Hp_Var
  %lngR7 = getelementptr inbounds i64, i64* %lngR5, i32 0
  %lngR8 = bitcast i64* %lngR7 to double*
  store double %lngR6, double* %lngR8, !tbaa !3
  %lngRa = load i64*, i64** %Hp_Var
  %lngRb = ptrtoint i64* %lngRa to i64
  %lngRc = add i64 %lngRb, -7
  store i64 %lngRc, i64* %R1_Var
  %lngRd = load i64*, i64** %Sp_Var
  %lngRe = getelementptr inbounds i64, i64* %lngRd, i32 3
  %lngRf = ptrtoint i64* %lngRe to i64
  %lngRg = inttoptr i64 %lngRf to i64*
  store i64* %lngRg, i64** %Sp_Var
  %lngRh = load i64*, i64** %Sp_Var
  %lngRi = getelementptr inbounds i64, i64* %lngRh, i32 0
  %lngRj = bitcast i64* %lngRi to i64*
  %lngRk = load i64, i64* %lngRj, !tbaa !2
  %lngRl = inttoptr i64 %lngRk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngRm = load i64*, i64** %Sp_Var
  %lngRn = load i64*, i64** %Hp_Var
  %lngRo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngRl( i64* %Base_Arg, i64* %lngRm, i64* %lngRn, i64 %lngRo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfdD:
  %lngRp = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lngRp, !tbaa !5
  %lngRq = load i64, i64* %R1_Var
  store i64 %lngRq, i64* %R1_Var
  %lngRr = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngRs = load i64*, i64** %Sp_Var
  %lngRt = load i64*, i64** %Hp_Var
  %lngRu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngRr( i64* %Base_Arg, i64* %lngRs, i64* %lngRt, i64 %lngRu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ph_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ph_info$def to i8*)
define internal ghccc void @s7Ph_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8589934602, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ph_info$def to i64)) to i32),i32 0)}>
{
ngRv:
  %ls7Ph = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7M2 = alloca i64, i32 1
  %ls7LY = alloca i64, i32 1
  %ls7LZ = alloca i64, i32 1
  %ls7M5 = alloca i64, i32 1
  %ls7M6 = alloca i64, i32 1
  %ls7LW = alloca i64, i32 1
  %ls7LV = alloca i64, i32 1
  %ls7Mg = alloca i64, i32 1
  %ls7Mm = alloca i64, i32 1
  %ls7LX = alloca i64, i32 1
  %ls7Mc = alloca double, i32 1
  %ls7Mf = alloca double, i32 1
  %lcf4z = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %lcf8n = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfdK
cfdK:
  %lngRw = load i64, i64* %R1_Var
  store i64 %lngRw, i64* %ls7Ph
  %lngRx = load i64*, i64** %Sp_Var
  %lngRy = getelementptr inbounds i64, i64* %lngRx, i32 -15
  %lngRz = ptrtoint i64* %lngRy to i64
  %lngRA = icmp ult i64 %lngRz, %SpLim_Arg
  %lngRB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngRA, i1 0 )
  br i1 %lngRB, label %cfdL, label %cfdM
cfdM:
  %lngRC = load i64*, i64** %Hp_Var
  %lngRD = getelementptr inbounds i64, i64* %lngRC, i32 9
  %lngRE = ptrtoint i64* %lngRD to i64
  %lngRF = inttoptr i64 %lngRE to i64*
  store i64* %lngRF, i64** %Hp_Var
  %lngRG = load i64*, i64** %Hp_Var
  %lngRH = ptrtoint i64* %lngRG to i64
  %lngRI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngRJ = bitcast i64* %lngRI to i64*
  %lngRK = load i64, i64* %lngRJ, !tbaa !5
  %lngRL = icmp ugt i64 %lngRH, %lngRK
  %lngRM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngRL, i1 0 )
  br i1 %lngRM, label %cfdO, label %cfdN
cfdN:
  %lngRO = ptrtoint i8* @stg_upd_frame_info to i64
  %lngRN = load i64*, i64** %Sp_Var
  %lngRP = getelementptr inbounds i64, i64* %lngRN, i32 -2
  store i64 %lngRO, i64* %lngRP, !tbaa !2
  %lngRR = load i64, i64* %ls7Ph
  %lngRQ = load i64*, i64** %Sp_Var
  %lngRS = getelementptr inbounds i64, i64* %lngRQ, i32 -1
  store i64 %lngRR, i64* %lngRS, !tbaa !2
  %lngRT = load i64, i64* %ls7Ph
  %lngRU = add i64 %lngRT, 16
  %lngRV = inttoptr i64 %lngRU to i64*
  %lngRW = load i64, i64* %lngRV, !tbaa !1
  store i64 %lngRW, i64* %ls7M2
  %lngRX = load i64, i64* %ls7Ph
  %lngRY = add i64 %lngRX, 24
  %lngRZ = inttoptr i64 %lngRY to i64*
  %lngS0 = load i64, i64* %lngRZ, !tbaa !1
  store i64 %lngS0, i64* %ls7LY
  %lngS1 = load i64, i64* %ls7Ph
  %lngS2 = add i64 %lngS1, 32
  %lngS3 = inttoptr i64 %lngS2 to i64*
  %lngS4 = load i64, i64* %lngS3, !tbaa !1
  store i64 %lngS4, i64* %ls7LZ
  %lngS5 = load i64, i64* %ls7Ph
  %lngS6 = add i64 %lngS5, 40
  %lngS7 = inttoptr i64 %lngS6 to i64*
  %lngS8 = load i64, i64* %lngS7, !tbaa !1
  store i64 %lngS8, i64* %ls7M5
  %lngS9 = load i64, i64* %ls7Ph
  %lngSa = add i64 %lngS9, 48
  %lngSb = inttoptr i64 %lngSa to i64*
  %lngSc = load i64, i64* %lngSb, !tbaa !1
  store i64 %lngSc, i64* %ls7M6
  %lngSd = load i64, i64* %ls7Ph
  %lngSe = add i64 %lngSd, 56
  %lngSf = inttoptr i64 %lngSe to i64*
  %lngSg = load i64, i64* %lngSf, !tbaa !1
  store i64 %lngSg, i64* %ls7LW
  %lngSh = load i64, i64* %ls7Ph
  %lngSi = add i64 %lngSh, 64
  %lngSj = inttoptr i64 %lngSi to i64*
  %lngSk = load i64, i64* %lngSj, !tbaa !1
  store i64 %lngSk, i64* %ls7LV
  %lngSl = load i64, i64* %ls7Ph
  %lngSm = add i64 %lngSl, 72
  %lngSn = inttoptr i64 %lngSm to i64*
  %lngSo = load i64, i64* %lngSn, !tbaa !1
  store i64 %lngSo, i64* %ls7Mg
  %lngSp = load i64, i64* %ls7Ph
  %lngSq = add i64 %lngSp, 80
  %lngSr = inttoptr i64 %lngSq to i64*
  %lngSs = load i64, i64* %lngSr, !tbaa !1
  store i64 %lngSs, i64* %ls7Mm
  %lngSt = load i64, i64* %ls7Ph
  %lngSu = add i64 %lngSt, 88
  %lngSv = inttoptr i64 %lngSu to i64*
  %lngSw = load i64, i64* %lngSv, !tbaa !1
  store i64 %lngSw, i64* %ls7LX
  %lngSx = load i64, i64* %ls7Ph
  %lngSy = add i64 %lngSx, 96
  %lngSz = inttoptr i64 %lngSy to double*
  %lngSA = load double, double* %lngSz, !tbaa !1
  store double %lngSA, double* %ls7Mc
  %lngSB = load i64, i64* %ls7Ph
  %lngSC = add i64 %lngSB, 104
  %lngSD = inttoptr i64 %lngSC to double*
  %lngSE = load double, double* %lngSD, !tbaa !1
  store double %lngSE, double* %ls7Mf
  %lngSG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mt_info$def to i64
  %lngSF = load i64*, i64** %Hp_Var
  %lngSH = getelementptr inbounds i64, i64* %lngSF, i32 -8
  store i64 %lngSG, i64* %lngSH, !tbaa !3
  %lngSJ = load i64, i64* %ls7M2
  %lngSI = load i64*, i64** %Hp_Var
  %lngSK = getelementptr inbounds i64, i64* %lngSI, i32 -6
  store i64 %lngSJ, i64* %lngSK, !tbaa !3
  %lngSM = load i64, i64* %ls7LY
  %lngSL = load i64*, i64** %Hp_Var
  %lngSN = getelementptr inbounds i64, i64* %lngSL, i32 -5
  store i64 %lngSM, i64* %lngSN, !tbaa !3
  %lngSP = load i64, i64* %ls7LZ
  %lngSO = load i64*, i64** %Hp_Var
  %lngSQ = getelementptr inbounds i64, i64* %lngSO, i32 -4
  store i64 %lngSP, i64* %lngSQ, !tbaa !3
  %lngSS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7NI_info$def to i64
  %lngSR = load i64*, i64** %Hp_Var
  %lngST = getelementptr inbounds i64, i64* %lngSR, i32 -3
  store i64 %lngSS, i64* %lngST, !tbaa !3
  %lngSU = load i64*, i64** %Hp_Var
  %lngSV = getelementptr inbounds i64, i64* %lngSU, i32 -8
  %lngSW = ptrtoint i64* %lngSV to i64
  store i64 %lngSW, i64* %lcf4z
  %lngSY = load i64, i64* %lcf4z
  %lngSX = load i64*, i64** %Hp_Var
  %lngSZ = getelementptr inbounds i64, i64* %lngSX, i32 -1
  store i64 %lngSY, i64* %lngSZ, !tbaa !3
  %lngT1 = load i64, i64* %ls7LX
  %lngT0 = load i64*, i64** %Hp_Var
  %lngT2 = getelementptr inbounds i64, i64* %lngT0, i32 0
  store i64 %lngT1, i64* %lngT2, !tbaa !3
  %lngT4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfad_info$def to i64
  %lngT3 = load i64*, i64** %Sp_Var
  %lngT5 = getelementptr inbounds i64, i64* %lngT3, i32 -13
  store i64 %lngT4, i64* %lngT5, !tbaa !2
  %lngT6 = load i64, i64* %lcf4z
  store i64 %lngT6, i64* %R4_Var
  %lngT7 = load i64*, i64** %Hp_Var
  %lngT8 = getelementptr inbounds i64, i64* %lngT7, i32 -3
  %lngT9 = ptrtoint i64* %lngT8 to i64
  store i64 %lngT9, i64* %lcf8n
  %lngTa = load i64, i64* %lcf8n
  store i64 %lngTa, i64* %R3_Var
  %lngTb = ptrtoint %Main_testspheres_closure_struct* @Main_testspheres_closure$def to i64
  %lngTc = add i64 %lngTb, 2
  store i64 %lngTc, i64* %R2_Var
  %lngTe = load i64, i64* %lcf4z
  %lngTd = load i64*, i64** %Sp_Var
  %lngTf = getelementptr inbounds i64, i64* %lngTd, i32 -12
  store i64 %lngTe, i64* %lngTf, !tbaa !2
  %lngTh = load i64, i64* %lcf8n
  %lngTg = load i64*, i64** %Sp_Var
  %lngTi = getelementptr inbounds i64, i64* %lngTg, i32 -11
  store i64 %lngTh, i64* %lngTi, !tbaa !2
  %lngTk = load i64, i64* %ls7LV
  %lngTj = load i64*, i64** %Sp_Var
  %lngTl = getelementptr inbounds i64, i64* %lngTj, i32 -10
  store i64 %lngTk, i64* %lngTl, !tbaa !2
  %lngTn = load i64, i64* %ls7LW
  %lngTm = load i64*, i64** %Sp_Var
  %lngTo = getelementptr inbounds i64, i64* %lngTm, i32 -9
  store i64 %lngTn, i64* %lngTo, !tbaa !2
  %lngTq = load i64, i64* %ls7M5
  %lngTp = load i64*, i64** %Sp_Var
  %lngTr = getelementptr inbounds i64, i64* %lngTp, i32 -8
  store i64 %lngTq, i64* %lngTr, !tbaa !2
  %lngTt = load i64, i64* %ls7M6
  %lngTs = load i64*, i64** %Sp_Var
  %lngTu = getelementptr inbounds i64, i64* %lngTs, i32 -7
  store i64 %lngTt, i64* %lngTu, !tbaa !2
  %lngTw = load double, double* %ls7Mc
  %lngTv = load i64*, i64** %Sp_Var
  %lngTx = getelementptr inbounds i64, i64* %lngTv, i32 -6
  %lngTy = bitcast i64* %lngTx to double*
  store double %lngTw, double* %lngTy, !tbaa !2
  %lngTA = load double, double* %ls7Mf
  %lngTz = load i64*, i64** %Sp_Var
  %lngTB = getelementptr inbounds i64, i64* %lngTz, i32 -5
  %lngTC = bitcast i64* %lngTB to double*
  store double %lngTA, double* %lngTC, !tbaa !2
  %lngTE = load i64, i64* %ls7Mg
  %lngTD = load i64*, i64** %Sp_Var
  %lngTF = getelementptr inbounds i64, i64* %lngTD, i32 -4
  store i64 %lngTE, i64* %lngTF, !tbaa !2
  %lngTH = load i64, i64* %ls7Mm
  %lngTG = load i64*, i64** %Sp_Var
  %lngTI = getelementptr inbounds i64, i64* %lngTG, i32 -3
  store i64 %lngTH, i64* %lngTI, !tbaa !2
  %lngTJ = load i64*, i64** %Sp_Var
  %lngTK = getelementptr inbounds i64, i64* %lngTJ, i32 -13
  %lngTL = ptrtoint i64* %lngTK to i64
  %lngTM = inttoptr i64 %lngTL to i64*
  store i64* %lngTM, i64** %Sp_Var
  %lngTN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngTO = load i64*, i64** %Sp_Var
  %lngTP = load i64*, i64** %Hp_Var
  %lngTQ = load i64, i64* %R1_Var
  %lngTR = load i64, i64* %R2_Var
  %lngTS = load i64, i64* %R3_Var
  %lngTT = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngTN( i64* %Base_Arg, i64* %lngTO, i64* %lngTP, i64 %lngTQ, i64 %lngTR, i64 %lngTS, i64 %lngTT, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfdO:
  %lngTU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %lngTU, !tbaa !5
  br label %cfdL
cfdL:
  %lngTV = load i64, i64* %ls7Ph
  store i64 %lngTV, i64* %R1_Var
  %lngTW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lngTX = bitcast i64* %lngTW to i64*
  %lngTY = load i64, i64* %lngTX, !tbaa !5
  %lngTZ = inttoptr i64 %lngTY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngU0 = load i64*, i64** %Sp_Var
  %lngU1 = load i64*, i64** %Hp_Var
  %lngU2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngTZ( i64* %Base_Arg, i64* %lngU0, i64* %lngU1, i64 %lngU2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfad_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfad_info$def to i8*)
define internal ghccc void @cfad_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 12298, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfad_info$def to i64)) to i32),i32 0)}>
{
ngU3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfad
cfad:
  %lngU5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaf_info$def to i64
  %lngU4 = load i64*, i64** %Sp_Var
  %lngU6 = getelementptr inbounds i64, i64* %lngU4, i32 -2
  store i64 %lngU5, i64* %lngU6, !tbaa !2
  %lngU7 = load i64, i64* %R1_Var
  store i64 %lngU7, i64* %R1_Var
  %lngU8 = load i64*, i64** %Sp_Var
  %lngU9 = getelementptr inbounds i64, i64* %lngU8, i32 -1
  store i64 %R3_Arg, i64* %lngU9, !tbaa !2
  %lngUa = load i64*, i64** %Sp_Var
  %lngUb = getelementptr inbounds i64, i64* %lngUa, i32 0
  store i64 %R2_Arg, i64* %lngUb, !tbaa !2
  %lngUc = load i64*, i64** %Sp_Var
  %lngUd = getelementptr inbounds i64, i64* %lngUc, i32 -2
  %lngUe = ptrtoint i64* %lngUd to i64
  %lngUf = inttoptr i64 %lngUe to i64*
  store i64* %lngUf, i64** %Sp_Var
  %lngUg = load i64, i64* %R1_Var
  %lngUh = and i64 %lngUg, 7
  %lngUi = icmp ne i64 %lngUh, 0
  br i1 %lngUi, label %ufe4, label %cfag
cfag:
  %lngUk = load i64, i64* %R1_Var
  %lngUl = inttoptr i64 %lngUk to i64*
  %lngUm = load i64, i64* %lngUl, !tbaa !4
  %lngUn = inttoptr i64 %lngUm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngUo = load i64*, i64** %Sp_Var
  %lngUp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngUn( i64* %Base_Arg, i64* %lngUo, i64* %Hp_Arg, i64 %lngUp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufe4:
  %lngUq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngUr = load i64*, i64** %Sp_Var
  %lngUs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngUq( i64* %Base_Arg, i64* %lngUr, i64* %Hp_Arg, i64 %lngUs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfaf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaf_info$def to i8*)
define internal ghccc void @cfaf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 49164, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfaf_info$def to i64)) to i32),i32 0)}>
{
ngUt:
  %ls7LW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Of = alloca i64, i32 1
  br label %cfaf
cfaf:
  %lngUu = load i64, i64* %R1_Var
  %lngUv = and i64 %lngUu, 7
  switch i64 %lngUv, label %cfdH [i64 1, label %cfdH
i64 2, label %cfdI]
cfdH:
  %lngUw = load i64*, i64** %Sp_Var
  %lngUx = getelementptr inbounds i64, i64* %lngUw, i32 6
  %lngUy = bitcast i64* %lngUx to i64*
  %lngUz = load i64, i64* %lngUy, !tbaa !2
  store i64 %lngUz, i64* %ls7LW
  %lngUB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfak_info$def to i64
  %lngUA = load i64*, i64** %Sp_Var
  %lngUC = getelementptr inbounds i64, i64* %lngUA, i32 6
  store i64 %lngUB, i64* %lngUC, !tbaa !2
  %lngUD = load i64, i64* %ls7LW
  store i64 %lngUD, i64* %R1_Var
  %lngUE = load i64*, i64** %Sp_Var
  %lngUF = getelementptr inbounds i64, i64* %lngUE, i32 6
  %lngUG = ptrtoint i64* %lngUF to i64
  %lngUH = inttoptr i64 %lngUG to i64*
  store i64* %lngUH, i64** %Sp_Var
  %lngUI = load i64, i64* %R1_Var
  %lngUJ = and i64 %lngUI, 7
  %lngUK = icmp ne i64 %lngUJ, 0
  br i1 %lngUK, label %ufe5, label %cfal
cfal:
  %lngUM = load i64, i64* %R1_Var
  %lngUN = inttoptr i64 %lngUM to i64*
  %lngUO = load i64, i64* %lngUN, !tbaa !4
  %lngUP = inttoptr i64 %lngUO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngUQ = load i64*, i64** %Sp_Var
  %lngUR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngUP( i64* %Base_Arg, i64* %lngUQ, i64* %Hp_Arg, i64 %lngUR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufe5:
  %lngUS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfak_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngUT = load i64*, i64** %Sp_Var
  %lngUU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngUS( i64* %Base_Arg, i64* %lngUT, i64* %Hp_Arg, i64 %lngUU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfdI:
  %lngUV = load i64*, i64** %Sp_Var
  %lngUW = getelementptr inbounds i64, i64* %lngUV, i32 1
  %lngUX = bitcast i64* %lngUW to i64*
  %lngUY = load i64, i64* %lngUX, !tbaa !2
  store i64 %lngUY, i64* %ls7Of
  %lngV0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbM_info$def to i64
  %lngUZ = load i64*, i64** %Sp_Var
  %lngV1 = getelementptr inbounds i64, i64* %lngUZ, i32 1
  store i64 %lngV0, i64* %lngV1, !tbaa !2
  %lngV2 = load i64, i64* %ls7Of
  store i64 %lngV2, i64* %R1_Var
  %lngV3 = load i64*, i64** %Sp_Var
  %lngV4 = getelementptr inbounds i64, i64* %lngV3, i32 1
  %lngV5 = ptrtoint i64* %lngV4 to i64
  %lngV6 = inttoptr i64 %lngV5 to i64*
  store i64* %lngV6, i64** %Sp_Var
  %lngV7 = load i64, i64* %R1_Var
  %lngV8 = and i64 %lngV7, 7
  %lngV9 = icmp ne i64 %lngV8, 0
  br i1 %lngV9, label %ufe6, label %cfbN
cfbN:
  %lngVb = load i64, i64* %R1_Var
  %lngVc = inttoptr i64 %lngVb to i64*
  %lngVd = load i64, i64* %lngVc, !tbaa !4
  %lngVe = inttoptr i64 %lngVd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngVf = load i64*, i64** %Sp_Var
  %lngVg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngVe( i64* %Base_Arg, i64* %lngVf, i64* %Hp_Arg, i64 %lngVg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufe6:
  %lngVh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngVi = load i64*, i64** %Sp_Var
  %lngVj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngVh( i64* %Base_Arg, i64* %lngVi, i64* %Hp_Arg, i64 %lngVj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfbM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbM_info$def to i8*)
define internal ghccc void @cfbM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 24587, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbM_info$def to i64)) to i32),i32 0)}>
{
ngVk:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7OF = alloca i64, i32 1
  %ls7OG = alloca i64, i32 1
  %ls7OH = alloca i64, i32 1
  %ls7LV = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ls7Oe = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfbM
cfbM:
  %lngVl = load i64*, i64** %Hp_Var
  %lngVm = getelementptr inbounds i64, i64* %lngVl, i32 6
  %lngVn = ptrtoint i64* %lngVm to i64
  %lngVo = inttoptr i64 %lngVn to i64*
  store i64* %lngVo, i64** %Hp_Var
  %lngVp = load i64*, i64** %Hp_Var
  %lngVq = ptrtoint i64* %lngVp to i64
  %lngVr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngVs = bitcast i64* %lngVr to i64*
  %lngVt = load i64, i64* %lngVs, !tbaa !5
  %lngVu = icmp ugt i64 %lngVq, %lngVt
  %lngVv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngVu, i1 0 )
  br i1 %lngVv, label %cfdZ, label %cfdY
cfdY:
  %lngVy = load i64, i64* %R1_Var
  %lngVz = add i64 %lngVy, 7
  %lngVA = inttoptr i64 %lngVz to i64*
  %lngVB = load i64, i64* %lngVA, !tbaa !4
  store i64 %lngVB, i64* %ls7OF
  %lngVE = load i64, i64* %R1_Var
  %lngVF = add i64 %lngVE, 15
  %lngVG = inttoptr i64 %lngVF to i64*
  %lngVH = load i64, i64* %lngVG, !tbaa !4
  store i64 %lngVH, i64* %ls7OG
  %lngVK = load i64, i64* %R1_Var
  %lngVL = add i64 %lngVK, 23
  %lngVM = inttoptr i64 %lngVL to i64*
  %lngVN = load i64, i64* %lngVM, !tbaa !4
  store i64 %lngVN, i64* %ls7OH
  %lngVP = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lngVO = load i64*, i64** %Hp_Var
  %lngVQ = getelementptr inbounds i64, i64* %lngVO, i32 -5
  store i64 %lngVP, i64* %lngVQ, !tbaa !3
  %lngVS = load i64*, i64** %Sp_Var
  %lngVT = getelementptr inbounds i64, i64* %lngVS, i32 9
  %lngVU = bitcast i64* %lngVT to double*
  %lngVV = load double, double* %lngVU, !tbaa !2
  %lngVR = load i64*, i64** %Hp_Var
  %lngVW = getelementptr inbounds i64, i64* %lngVR, i32 -4
  %lngVX = bitcast i64* %lngVW to double*
  store double %lngVV, double* %lngVX, !tbaa !3
  %lngVZ = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngVY = load i64*, i64** %Hp_Var
  %lngW0 = getelementptr inbounds i64, i64* %lngVY, i32 -3
  store i64 %lngVZ, i64* %lngW0, !tbaa !3
  %lngW3 = load i64*, i64** %Hp_Var
  %lngW4 = ptrtoint i64* %lngW3 to i64
  %lngW5 = add i64 %lngW4, -39
  %lngW1 = load i64*, i64** %Hp_Var
  %lngW6 = getelementptr inbounds i64, i64* %lngW1, i32 -2
  store i64 %lngW5, i64* %lngW6, !tbaa !3
  %lngW8 = load i64*, i64** %Sp_Var
  %lngW9 = getelementptr inbounds i64, i64* %lngW8, i32 10
  %lngWa = bitcast i64* %lngW9 to i64*
  %lngWb = load i64, i64* %lngWa, !tbaa !2
  %lngW7 = load i64*, i64** %Hp_Var
  %lngWc = getelementptr inbounds i64, i64* %lngW7, i32 -1
  store i64 %lngWb, i64* %lngWc, !tbaa !3
  %lngWe = load i64*, i64** %Sp_Var
  %lngWf = getelementptr inbounds i64, i64* %lngWe, i32 11
  %lngWg = bitcast i64* %lngWf to i64*
  %lngWh = load i64, i64* %lngWg, !tbaa !2
  %lngWd = load i64*, i64** %Hp_Var
  %lngWi = getelementptr inbounds i64, i64* %lngWd, i32 0
  store i64 %lngWh, i64* %lngWi, !tbaa !3
  %lngWj = load i64*, i64** %Sp_Var
  %lngWk = getelementptr inbounds i64, i64* %lngWj, i32 4
  %lngWl = bitcast i64* %lngWk to i64*
  %lngWm = load i64, i64* %lngWl, !tbaa !2
  store i64 %lngWm, i64* %ls7LV
  %lngWo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbT_info$def to i64
  %lngWn = load i64*, i64** %Sp_Var
  %lngWp = getelementptr inbounds i64, i64* %lngWn, i32 4
  store i64 %lngWo, i64* %lngWp, !tbaa !2
  %lngWq = load i64*, i64** %Sp_Var
  %lngWr = getelementptr inbounds i64, i64* %lngWq, i32 3
  %lngWs = bitcast i64* %lngWr to i64*
  %lngWt = load i64, i64* %lngWs, !tbaa !2
  store i64 %lngWt, i64* %R6_Var
  %lngWu = load i64, i64* %ls7OH
  store i64 %lngWu, i64* %R5_Var
  %lngWv = load i64, i64* %ls7OG
  store i64 %lngWv, i64* %R4_Var
  %lngWw = load i64, i64* %ls7OF
  store i64 %lngWw, i64* %R3_Var
  %lngWx = load i64, i64* %ls7LV
  store i64 %lngWx, i64* %R2_Var
  %lngWy = load i64*, i64** %Sp_Var
  %lngWz = getelementptr inbounds i64, i64* %lngWy, i32 1
  %lngWA = bitcast i64* %lngWz to i64*
  %lngWB = load i64, i64* %lngWA, !tbaa !2
  store i64 %lngWB, i64* %ls7Oe
  %lngWD = load i64*, i64** %Sp_Var
  %lngWE = getelementptr inbounds i64, i64* %lngWD, i32 2
  %lngWF = bitcast i64* %lngWE to i64*
  %lngWG = load i64, i64* %lngWF, !tbaa !2
  %lngWC = load i64*, i64** %Sp_Var
  %lngWH = getelementptr inbounds i64, i64* %lngWC, i32 1
  store i64 %lngWG, i64* %lngWH, !tbaa !2
  %lngWJ = load i64, i64* %ls7Oe
  %lngWI = load i64*, i64** %Sp_Var
  %lngWK = getelementptr inbounds i64, i64* %lngWI, i32 2
  store i64 %lngWJ, i64* %lngWK, !tbaa !2
  %lngWN = load i64*, i64** %Hp_Var
  %lngWO = ptrtoint i64* %lngWN to i64
  %lngWP = add i64 %lngWO, -23
  %lngWL = load i64*, i64** %Sp_Var
  %lngWQ = getelementptr inbounds i64, i64* %lngWL, i32 3
  store i64 %lngWP, i64* %lngWQ, !tbaa !2
  %lngWR = load i64*, i64** %Sp_Var
  %lngWS = getelementptr inbounds i64, i64* %lngWR, i32 1
  %lngWT = ptrtoint i64* %lngWS to i64
  %lngWU = inttoptr i64 %lngWT to i64*
  store i64* %lngWU, i64** %Sp_Var
  %lngWV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngWW = load i64*, i64** %Sp_Var
  %lngWX = load i64*, i64** %Hp_Var
  %lngWY = load i64, i64* %R1_Var
  %lngWZ = load i64, i64* %R2_Var
  %lngX0 = load i64, i64* %R3_Var
  %lngX1 = load i64, i64* %R4_Var
  %lngX2 = load i64, i64* %R5_Var
  %lngX3 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngWV( i64* %Base_Arg, i64* %lngWW, i64* %lngWX, i64 %lngWY, i64 %lngWZ, i64 %lngX0, i64 %lngX1, i64 %lngX2, i64 %lngX3, i64 %SpLim_Arg ) nounwind
  ret void
cfdZ:
  %lngX4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lngX4, !tbaa !5
  %lngX5 = load i64, i64* %R1_Var
  store i64 %lngX5, i64* %R1_Var
  %lngX6 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngX7 = load i64*, i64** %Sp_Var
  %lngX8 = load i64*, i64** %Hp_Var
  %lngX9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngX6( i64* %Base_Arg, i64* %lngX7, i64* %lngX8, i64 %lngX9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfbT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbT_info$def to i8*)
define internal ghccc void @cfbT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 7687, i32 30, i32 0}>
{
ngXa:
  %ls7LW = alloca i64, i32 1
  %ls7OL = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfbT
cfbT:
  %lngXb = load i64*, i64** %Sp_Var
  %lngXc = getelementptr inbounds i64, i64* %lngXb, i32 1
  %lngXd = bitcast i64* %lngXc to i64*
  %lngXe = load i64, i64* %lngXd, !tbaa !2
  store i64 %lngXe, i64* %ls7LW
  %lngXg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbV_info$def to i64
  %lngXf = load i64*, i64** %Sp_Var
  %lngXh = getelementptr inbounds i64, i64* %lngXf, i32 1
  store i64 %lngXg, i64* %lngXh, !tbaa !2
  %lngXi = load i64, i64* %R1_Var
  store i64 %lngXi, i64* %ls7OL
  %lngXj = load i64, i64* %ls7LW
  store i64 %lngXj, i64* %R1_Var
  %lngXk = load i64*, i64** %Sp_Var
  %lngXl = getelementptr inbounds i64, i64* %lngXk, i32 5
  store i64 %R3_Arg, i64* %lngXl, !tbaa !2
  %lngXm = load i64*, i64** %Sp_Var
  %lngXn = getelementptr inbounds i64, i64* %lngXm, i32 6
  store i64 %R2_Arg, i64* %lngXn, !tbaa !2
  %lngXp = load i64, i64* %ls7OL
  %lngXo = load i64*, i64** %Sp_Var
  %lngXq = getelementptr inbounds i64, i64* %lngXo, i32 7
  store i64 %lngXp, i64* %lngXq, !tbaa !2
  %lngXr = load i64*, i64** %Sp_Var
  %lngXs = getelementptr inbounds i64, i64* %lngXr, i32 1
  %lngXt = ptrtoint i64* %lngXs to i64
  %lngXu = inttoptr i64 %lngXt to i64*
  store i64* %lngXu, i64** %Sp_Var
  %lngXv = load i64, i64* %R1_Var
  %lngXw = and i64 %lngXv, 7
  %lngXx = icmp ne i64 %lngXw, 0
  br i1 %lngXx, label %ufe7, label %cfbW
cfbW:
  %lngXz = load i64, i64* %R1_Var
  %lngXA = inttoptr i64 %lngXz to i64*
  %lngXB = load i64, i64* %lngXA, !tbaa !4
  %lngXC = inttoptr i64 %lngXB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngXD = load i64*, i64** %Sp_Var
  %lngXE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngXC( i64* %Base_Arg, i64* %lngXD, i64* %Hp_Arg, i64 %lngXE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufe7:
  %lngXF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngXG = load i64*, i64** %Sp_Var
  %lngXH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngXF( i64* %Base_Arg, i64* %lngXG, i64* %Hp_Arg, i64 %lngXH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfbV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfbV_info$def to i8*)
define internal ghccc void @cfbV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 262, i32 30, i32 0}>
{
ngXI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7OP = alloca i64, i32 1
  %ls7OQ = alloca i64, i32 1
  %ls7OR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfbV
cfbV:
  %lngXJ = load i64*, i64** %Hp_Var
  %lngXK = getelementptr inbounds i64, i64* %lngXJ, i32 19
  %lngXL = ptrtoint i64* %lngXK to i64
  %lngXM = inttoptr i64 %lngXL to i64*
  store i64* %lngXM, i64** %Hp_Var
  %lngXN = load i64*, i64** %Hp_Var
  %lngXO = ptrtoint i64* %lngXN to i64
  %lngXP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngXQ = bitcast i64* %lngXP to i64*
  %lngXR = load i64, i64* %lngXQ, !tbaa !5
  %lngXS = icmp ugt i64 %lngXO, %lngXR
  %lngXT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngXS, i1 0 )
  br i1 %lngXT, label %cfe3, label %cfe2
cfe2:
  %lngXW = load i64, i64* %R1_Var
  %lngXX = add i64 %lngXW, 7
  %lngXY = inttoptr i64 %lngXX to i64*
  %lngXZ = load i64, i64* %lngXY, !tbaa !4
  store i64 %lngXZ, i64* %ls7OP
  %lngY2 = load i64, i64* %R1_Var
  %lngY3 = add i64 %lngY2, 15
  %lngY4 = inttoptr i64 %lngY3 to i64*
  %lngY5 = load i64, i64* %lngY4, !tbaa !4
  store i64 %lngY5, i64* %ls7OQ
  %lngY8 = load i64, i64* %R1_Var
  %lngY9 = add i64 %lngY8, 23
  %lngYa = inttoptr i64 %lngY9 to i64*
  %lngYb = load i64, i64* %lngYa, !tbaa !4
  store i64 %lngYb, i64* %ls7OR
  %lngYd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Pg_info$def to i64
  %lngYc = load i64*, i64** %Hp_Var
  %lngYe = getelementptr inbounds i64, i64* %lngYc, i32 -18
  store i64 %lngYd, i64* %lngYe, !tbaa !3
  %lngYg = load i64, i64* %ls7OR
  %lngYf = load i64*, i64** %Hp_Var
  %lngYh = getelementptr inbounds i64, i64* %lngYf, i32 -16
  store i64 %lngYg, i64* %lngYh, !tbaa !3
  %lngYj = load i64*, i64** %Sp_Var
  %lngYk = getelementptr inbounds i64, i64* %lngYj, i32 2
  %lngYl = bitcast i64* %lngYk to i64*
  %lngYm = load i64, i64* %lngYl, !tbaa !2
  %lngYi = load i64*, i64** %Hp_Var
  %lngYn = getelementptr inbounds i64, i64* %lngYi, i32 -15
  store i64 %lngYm, i64* %lngYn, !tbaa !3
  %lngYp = load i64*, i64** %Sp_Var
  %lngYq = getelementptr inbounds i64, i64* %lngYp, i32 4
  %lngYr = bitcast i64* %lngYq to i64*
  %lngYs = load i64, i64* %lngYr, !tbaa !2
  %lngYo = load i64*, i64** %Hp_Var
  %lngYt = getelementptr inbounds i64, i64* %lngYo, i32 -14
  store i64 %lngYs, i64* %lngYt, !tbaa !3
  %lngYv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7P7_info$def to i64
  %lngYu = load i64*, i64** %Hp_Var
  %lngYw = getelementptr inbounds i64, i64* %lngYu, i32 -13
  store i64 %lngYv, i64* %lngYw, !tbaa !3
  %lngYy = load i64, i64* %ls7OQ
  %lngYx = load i64*, i64** %Hp_Var
  %lngYz = getelementptr inbounds i64, i64* %lngYx, i32 -11
  store i64 %lngYy, i64* %lngYz, !tbaa !3
  %lngYB = load i64*, i64** %Sp_Var
  %lngYC = getelementptr inbounds i64, i64* %lngYB, i32 1
  %lngYD = bitcast i64* %lngYC to i64*
  %lngYE = load i64, i64* %lngYD, !tbaa !2
  %lngYA = load i64*, i64** %Hp_Var
  %lngYF = getelementptr inbounds i64, i64* %lngYA, i32 -10
  store i64 %lngYE, i64* %lngYF, !tbaa !3
  %lngYH = load i64*, i64** %Sp_Var
  %lngYI = getelementptr inbounds i64, i64* %lngYH, i32 5
  %lngYJ = bitcast i64* %lngYI to i64*
  %lngYK = load i64, i64* %lngYJ, !tbaa !2
  %lngYG = load i64*, i64** %Hp_Var
  %lngYL = getelementptr inbounds i64, i64* %lngYG, i32 -9
  store i64 %lngYK, i64* %lngYL, !tbaa !3
  %lngYN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7OY_info$def to i64
  %lngYM = load i64*, i64** %Hp_Var
  %lngYO = getelementptr inbounds i64, i64* %lngYM, i32 -8
  store i64 %lngYN, i64* %lngYO, !tbaa !3
  %lngYQ = load i64, i64* %ls7OP
  %lngYP = load i64*, i64** %Hp_Var
  %lngYR = getelementptr inbounds i64, i64* %lngYP, i32 -6
  store i64 %lngYQ, i64* %lngYR, !tbaa !3
  %lngYT = load i64*, i64** %Sp_Var
  %lngYU = getelementptr inbounds i64, i64* %lngYT, i32 6
  %lngYV = bitcast i64* %lngYU to i64*
  %lngYW = load i64, i64* %lngYV, !tbaa !2
  %lngYS = load i64*, i64** %Hp_Var
  %lngYX = getelementptr inbounds i64, i64* %lngYS, i32 -5
  store i64 %lngYW, i64* %lngYX, !tbaa !3
  %lngYZ = load i64*, i64** %Sp_Var
  %lngZ0 = getelementptr inbounds i64, i64* %lngYZ, i32 3
  %lngZ1 = bitcast i64* %lngZ0 to double*
  %lngZ2 = load double, double* %lngZ1, !tbaa !2
  %lngYY = load i64*, i64** %Hp_Var
  %lngZ3 = getelementptr inbounds i64, i64* %lngYY, i32 -4
  %lngZ4 = bitcast i64* %lngZ3 to double*
  store double %lngZ2, double* %lngZ4, !tbaa !3
  %lngZ6 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lngZ5 = load i64*, i64** %Hp_Var
  %lngZ7 = getelementptr inbounds i64, i64* %lngZ5, i32 -3
  store i64 %lngZ6, i64* %lngZ7, !tbaa !3
  %lngZ9 = load i64*, i64** %Hp_Var
  %lngZa = getelementptr inbounds i64, i64* %lngZ9, i32 -8
  %lngZb = ptrtoint i64* %lngZa to i64
  %lngZ8 = load i64*, i64** %Hp_Var
  %lngZc = getelementptr inbounds i64, i64* %lngZ8, i32 -2
  store i64 %lngZb, i64* %lngZc, !tbaa !3
  %lngZe = load i64*, i64** %Hp_Var
  %lngZf = getelementptr inbounds i64, i64* %lngZe, i32 -13
  %lngZg = ptrtoint i64* %lngZf to i64
  %lngZd = load i64*, i64** %Hp_Var
  %lngZh = getelementptr inbounds i64, i64* %lngZd, i32 -1
  store i64 %lngZg, i64* %lngZh, !tbaa !3
  %lngZj = load i64*, i64** %Hp_Var
  %lngZk = getelementptr inbounds i64, i64* %lngZj, i32 -18
  %lngZl = ptrtoint i64* %lngZk to i64
  %lngZi = load i64*, i64** %Hp_Var
  %lngZm = getelementptr inbounds i64, i64* %lngZi, i32 0
  store i64 %lngZl, i64* %lngZm, !tbaa !3
  %lngZo = load i64*, i64** %Hp_Var
  %lngZp = ptrtoint i64* %lngZo to i64
  %lngZq = add i64 %lngZp, -23
  store i64 %lngZq, i64* %R1_Var
  %lngZr = load i64*, i64** %Sp_Var
  %lngZs = getelementptr inbounds i64, i64* %lngZr, i32 7
  %lngZt = ptrtoint i64* %lngZs to i64
  %lngZu = inttoptr i64 %lngZt to i64*
  store i64* %lngZu, i64** %Sp_Var
  %lngZv = load i64*, i64** %Sp_Var
  %lngZw = getelementptr inbounds i64, i64* %lngZv, i32 0
  %lngZx = bitcast i64* %lngZw to i64*
  %lngZy = load i64, i64* %lngZx, !tbaa !2
  %lngZz = inttoptr i64 %lngZy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngZA = load i64*, i64** %Sp_Var
  %lngZB = load i64*, i64** %Hp_Var
  %lngZC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngZz( i64* %Base_Arg, i64* %lngZA, i64* %lngZB, i64 %lngZC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfe3:
  %lngZD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 152, i64* %lngZD, !tbaa !5
  %lngZE = load i64, i64* %R1_Var
  store i64 %lngZE, i64* %R1_Var
  %lngZF = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lngZG = load i64*, i64** %Sp_Var
  %lngZH = load i64*, i64** %Hp_Var
  %lngZI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lngZF( i64* %Base_Arg, i64* %lngZG, i64* %lngZH, i64 %lngZI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfak_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfak_info$def to i8*)
define internal ghccc void @cfak_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3846, i32 30, i32 0}>
{
ngZJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Oi = alloca i64, i32 1
  %ls7Oj = alloca i64, i32 1
  %ls7Ok = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfak
cfak:
  %lngZK = load i64*, i64** %Hp_Var
  %lngZL = getelementptr inbounds i64, i64* %lngZK, i32 16
  %lngZM = ptrtoint i64* %lngZL to i64
  %lngZN = inttoptr i64 %lngZM to i64*
  store i64* %lngZN, i64** %Hp_Var
  %lngZO = load i64*, i64** %Hp_Var
  %lngZP = ptrtoint i64* %lngZO to i64
  %lngZQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lngZR = bitcast i64* %lngZQ to i64*
  %lngZS = load i64, i64* %lngZR, !tbaa !5
  %lngZT = icmp ugt i64 %lngZP, %lngZS
  %lngZU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lngZT, i1 0 )
  br i1 %lngZU, label %cfdU, label %cfdT
cfdT:
  %lngZX = load i64, i64* %R1_Var
  %lngZY = add i64 %lngZX, 7
  %lngZZ = inttoptr i64 %lngZY to i64*
  %lnh00 = load i64, i64* %lngZZ, !tbaa !4
  store i64 %lnh00, i64* %ls7Oi
  %lnh03 = load i64, i64* %R1_Var
  %lnh04 = add i64 %lnh03, 15
  %lnh05 = inttoptr i64 %lnh04 to i64*
  %lnh06 = load i64, i64* %lnh05, !tbaa !4
  store i64 %lnh06, i64* %ls7Oj
  %lnh09 = load i64, i64* %R1_Var
  %lnh0a = add i64 %lnh09, 23
  %lnh0b = inttoptr i64 %lnh0a to i64*
  %lnh0c = load i64, i64* %lnh0b, !tbaa !4
  store i64 %lnh0c, i64* %ls7Ok
  %lnh0e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7OD_info$def to i64
  %lnh0d = load i64*, i64** %Hp_Var
  %lnh0f = getelementptr inbounds i64, i64* %lnh0d, i32 -15
  store i64 %lnh0e, i64* %lnh0f, !tbaa !3
  %lnh0h = load i64, i64* %ls7Ok
  %lnh0g = load i64*, i64** %Hp_Var
  %lnh0i = getelementptr inbounds i64, i64* %lnh0g, i32 -13
  store i64 %lnh0h, i64* %lnh0i, !tbaa !3
  %lnh0k = load i64*, i64** %Sp_Var
  %lnh0l = getelementptr inbounds i64, i64* %lnh0k, i32 2
  %lnh0m = bitcast i64* %lnh0l to i64*
  %lnh0n = load i64, i64* %lnh0m, !tbaa !2
  %lnh0j = load i64*, i64** %Hp_Var
  %lnh0o = getelementptr inbounds i64, i64* %lnh0j, i32 -12
  store i64 %lnh0n, i64* %lnh0o, !tbaa !3
  %lnh0q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ow_info$def to i64
  %lnh0p = load i64*, i64** %Hp_Var
  %lnh0r = getelementptr inbounds i64, i64* %lnh0p, i32 -11
  store i64 %lnh0q, i64* %lnh0r, !tbaa !3
  %lnh0t = load i64, i64* %ls7Oj
  %lnh0s = load i64*, i64** %Hp_Var
  %lnh0u = getelementptr inbounds i64, i64* %lnh0s, i32 -9
  store i64 %lnh0t, i64* %lnh0u, !tbaa !3
  %lnh0w = load i64*, i64** %Sp_Var
  %lnh0x = getelementptr inbounds i64, i64* %lnh0w, i32 1
  %lnh0y = bitcast i64* %lnh0x to i64*
  %lnh0z = load i64, i64* %lnh0y, !tbaa !2
  %lnh0v = load i64*, i64** %Hp_Var
  %lnh0A = getelementptr inbounds i64, i64* %lnh0v, i32 -8
  store i64 %lnh0z, i64* %lnh0A, !tbaa !3
  %lnh0C = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Op_info$def to i64
  %lnh0B = load i64*, i64** %Hp_Var
  %lnh0D = getelementptr inbounds i64, i64* %lnh0B, i32 -7
  store i64 %lnh0C, i64* %lnh0D, !tbaa !3
  %lnh0F = load i64, i64* %ls7Oi
  %lnh0E = load i64*, i64** %Hp_Var
  %lnh0G = getelementptr inbounds i64, i64* %lnh0E, i32 -5
  store i64 %lnh0F, i64* %lnh0G, !tbaa !3
  %lnh0I = load i64*, i64** %Sp_Var
  %lnh0J = getelementptr inbounds i64, i64* %lnh0I, i32 3
  %lnh0K = bitcast i64* %lnh0J to double*
  %lnh0L = load double, double* %lnh0K, !tbaa !2
  %lnh0H = load i64*, i64** %Hp_Var
  %lnh0M = getelementptr inbounds i64, i64* %lnh0H, i32 -4
  %lnh0N = bitcast i64* %lnh0M to double*
  store double %lnh0L, double* %lnh0N, !tbaa !3
  %lnh0P = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnh0O = load i64*, i64** %Hp_Var
  %lnh0Q = getelementptr inbounds i64, i64* %lnh0O, i32 -3
  store i64 %lnh0P, i64* %lnh0Q, !tbaa !3
  %lnh0S = load i64*, i64** %Hp_Var
  %lnh0T = getelementptr inbounds i64, i64* %lnh0S, i32 -7
  %lnh0U = ptrtoint i64* %lnh0T to i64
  %lnh0R = load i64*, i64** %Hp_Var
  %lnh0V = getelementptr inbounds i64, i64* %lnh0R, i32 -2
  store i64 %lnh0U, i64* %lnh0V, !tbaa !3
  %lnh0X = load i64*, i64** %Hp_Var
  %lnh0Y = getelementptr inbounds i64, i64* %lnh0X, i32 -11
  %lnh0Z = ptrtoint i64* %lnh0Y to i64
  %lnh0W = load i64*, i64** %Hp_Var
  %lnh10 = getelementptr inbounds i64, i64* %lnh0W, i32 -1
  store i64 %lnh0Z, i64* %lnh10, !tbaa !3
  %lnh12 = load i64*, i64** %Hp_Var
  %lnh13 = getelementptr inbounds i64, i64* %lnh12, i32 -15
  %lnh14 = ptrtoint i64* %lnh13 to i64
  %lnh11 = load i64*, i64** %Hp_Var
  %lnh15 = getelementptr inbounds i64, i64* %lnh11, i32 0
  store i64 %lnh14, i64* %lnh15, !tbaa !3
  %lnh17 = load i64*, i64** %Hp_Var
  %lnh18 = ptrtoint i64* %lnh17 to i64
  %lnh19 = add i64 %lnh18, -23
  store i64 %lnh19, i64* %R1_Var
  %lnh1a = load i64*, i64** %Sp_Var
  %lnh1b = getelementptr inbounds i64, i64* %lnh1a, i32 7
  %lnh1c = ptrtoint i64* %lnh1b to i64
  %lnh1d = inttoptr i64 %lnh1c to i64*
  store i64* %lnh1d, i64** %Sp_Var
  %lnh1e = load i64*, i64** %Sp_Var
  %lnh1f = getelementptr inbounds i64, i64* %lnh1e, i32 0
  %lnh1g = bitcast i64* %lnh1f to i64*
  %lnh1h = load i64, i64* %lnh1g, !tbaa !2
  %lnh1i = inttoptr i64 %lnh1h to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh1j = load i64*, i64** %Sp_Var
  %lnh1k = load i64*, i64** %Hp_Var
  %lnh1l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh1i( i64* %Base_Arg, i64* %lnh1j, i64* %lnh1k, i64 %lnh1l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfdU:
  %lnh1m = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnh1m, !tbaa !5
  %lnh1n = load i64, i64* %R1_Var
  store i64 %lnh1n, i64* %R1_Var
  %lnh1o = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh1p = load i64*, i64** %Sp_Var
  %lnh1q = load i64*, i64** %Hp_Var
  %lnh1r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh1o( i64* %Base_Arg, i64* %lnh1p, i64* %lnh1q, i64 %lnh1r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_transmitray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to i8*)
define ghccc void @Main_transmitray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to i64)),i64 0), i64 8, i64 34359738368, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to i64)) to i32),i32 0)}>
{
nh1s:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfe8
cfe8:
  %lnh1t = load i64*, i64** %Sp_Var
  %lnh1u = getelementptr inbounds i64, i64* %lnh1t, i32 -10
  %lnh1v = ptrtoint i64* %lnh1u to i64
  %lnh1w = icmp ult i64 %lnh1v, %SpLim_Arg
  %lnh1x = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnh1w, i1 0 )
  br i1 %lnh1x, label %cfe9, label %cfea
cfea:
  %lnh1z = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3b_info$def to i64
  %lnh1y = load i64*, i64** %Sp_Var
  %lnh1A = getelementptr inbounds i64, i64* %lnh1y, i32 -5
  store i64 %lnh1z, i64* %lnh1A, !tbaa !2
  %lnh1B = load i64*, i64** %Sp_Var
  %lnh1C = getelementptr inbounds i64, i64* %lnh1B, i32 0
  %lnh1D = bitcast i64* %lnh1C to i64*
  %lnh1E = load i64, i64* %lnh1D, !tbaa !2
  store i64 %lnh1E, i64* %R1_Var
  %lnh1F = load i64*, i64** %Sp_Var
  %lnh1G = getelementptr inbounds i64, i64* %lnh1F, i32 -4
  store i64 %R3_Arg, i64* %lnh1G, !tbaa !2
  %lnh1H = load i64*, i64** %Sp_Var
  %lnh1I = getelementptr inbounds i64, i64* %lnh1H, i32 -3
  store i64 %R4_Arg, i64* %lnh1I, !tbaa !2
  %lnh1J = load i64*, i64** %Sp_Var
  %lnh1K = getelementptr inbounds i64, i64* %lnh1J, i32 -2
  store i64 %R5_Arg, i64* %lnh1K, !tbaa !2
  %lnh1L = load i64*, i64** %Sp_Var
  %lnh1M = getelementptr inbounds i64, i64* %lnh1L, i32 -1
  store i64 %R6_Arg, i64* %lnh1M, !tbaa !2
  %lnh1N = load i64*, i64** %Sp_Var
  %lnh1O = getelementptr inbounds i64, i64* %lnh1N, i32 0
  store i64 %R2_Arg, i64* %lnh1O, !tbaa !2
  %lnh1P = load i64*, i64** %Sp_Var
  %lnh1Q = getelementptr inbounds i64, i64* %lnh1P, i32 -5
  %lnh1R = ptrtoint i64* %lnh1Q to i64
  %lnh1S = inttoptr i64 %lnh1R to i64*
  store i64* %lnh1S, i64** %Sp_Var
  %lnh1T = load i64, i64* %R1_Var
  %lnh1U = and i64 %lnh1T, 7
  %lnh1V = icmp ne i64 %lnh1U, 0
  br i1 %lnh1V, label %uff1, label %cf3c
cf3c:
  %lnh1X = load i64, i64* %R1_Var
  %lnh1Y = inttoptr i64 %lnh1X to i64*
  %lnh1Z = load i64, i64* %lnh1Y, !tbaa !4
  %lnh20 = inttoptr i64 %lnh1Z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh21 = load i64*, i64** %Sp_Var
  %lnh22 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh20( i64* %Base_Arg, i64* %lnh21, i64* %Hp_Arg, i64 %lnh22, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uff1:
  %lnh23 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3b_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh24 = load i64*, i64** %Sp_Var
  %lnh25 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh23( i64* %Base_Arg, i64* %lnh24, i64* %Hp_Arg, i64 %lnh25, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfe9:
  %lnh26 = ptrtoint %Main_transmitray_closure_struct* @Main_transmitray_closure$def to i64
  store i64 %lnh26, i64* %R1_Var
  %lnh27 = load i64*, i64** %Sp_Var
  %lnh28 = getelementptr inbounds i64, i64* %lnh27, i32 -5
  store i64 %R2_Arg, i64* %lnh28, !tbaa !2
  %lnh29 = load i64*, i64** %Sp_Var
  %lnh2a = getelementptr inbounds i64, i64* %lnh29, i32 -4
  store i64 %R3_Arg, i64* %lnh2a, !tbaa !2
  %lnh2b = load i64*, i64** %Sp_Var
  %lnh2c = getelementptr inbounds i64, i64* %lnh2b, i32 -3
  store i64 %R4_Arg, i64* %lnh2c, !tbaa !2
  %lnh2d = load i64*, i64** %Sp_Var
  %lnh2e = getelementptr inbounds i64, i64* %lnh2d, i32 -2
  store i64 %R5_Arg, i64* %lnh2e, !tbaa !2
  %lnh2f = load i64*, i64** %Sp_Var
  %lnh2g = getelementptr inbounds i64, i64* %lnh2f, i32 -1
  store i64 %R6_Arg, i64* %lnh2g, !tbaa !2
  %lnh2h = load i64*, i64** %Sp_Var
  %lnh2i = getelementptr inbounds i64, i64* %lnh2h, i32 -5
  %lnh2j = ptrtoint i64* %lnh2i to i64
  %lnh2k = inttoptr i64 %lnh2j to i64*
  store i64* %lnh2k, i64** %Sp_Var
  %lnh2l = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnh2m = bitcast i64* %lnh2l to i64*
  %lnh2n = load i64, i64* %lnh2m, !tbaa !5
  %lnh2o = inttoptr i64 %lnh2n to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh2p = load i64*, i64** %Sp_Var
  %lnh2q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh2o( i64* %Base_Arg, i64* %lnh2p, i64* %Hp_Arg, i64 %lnh2q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3b_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3b_info$def to i8*)
define internal ghccc void @cf3b_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 7, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3b_info$def to i64)) to i32),i32 0)}>
{
nh2r:
  %ls7M4 = alloca i64, i32 1
  %ls7M5 = alloca i64, i32 1
  %ls7M6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf3b
cf3b:
  %lnh2t = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3g_info$def to i64
  %lnh2s = load i64*, i64** %Sp_Var
  %lnh2u = getelementptr inbounds i64, i64* %lnh2s, i32 -2
  store i64 %lnh2t, i64* %lnh2u, !tbaa !2
  %lnh2x = load i64, i64* %R1_Var
  %lnh2y = add i64 %lnh2x, 7
  %lnh2z = inttoptr i64 %lnh2y to i64*
  %lnh2A = load i64, i64* %lnh2z, !tbaa !4
  store i64 %lnh2A, i64* %ls7M4
  %lnh2D = load i64, i64* %R1_Var
  %lnh2E = add i64 %lnh2D, 15
  %lnh2F = inttoptr i64 %lnh2E to i64*
  %lnh2G = load i64, i64* %lnh2F, !tbaa !4
  store i64 %lnh2G, i64* %ls7M5
  %lnh2J = load i64, i64* %R1_Var
  %lnh2K = add i64 %lnh2J, 23
  %lnh2L = inttoptr i64 %lnh2K to i64*
  %lnh2M = load i64, i64* %lnh2L, !tbaa !4
  store i64 %lnh2M, i64* %ls7M6
  %lnh2N = load i64*, i64** %Sp_Var
  %lnh2O = getelementptr inbounds i64, i64* %lnh2N, i32 6
  %lnh2P = bitcast i64* %lnh2O to i64*
  %lnh2Q = load i64, i64* %lnh2P, !tbaa !2
  store i64 %lnh2Q, i64* %R1_Var
  %lnh2S = load i64, i64* %ls7M6
  %lnh2R = load i64*, i64** %Sp_Var
  %lnh2T = getelementptr inbounds i64, i64* %lnh2R, i32 -1
  store i64 %lnh2S, i64* %lnh2T, !tbaa !2
  %lnh2V = load i64, i64* %ls7M5
  %lnh2U = load i64*, i64** %Sp_Var
  %lnh2W = getelementptr inbounds i64, i64* %lnh2U, i32 0
  store i64 %lnh2V, i64* %lnh2W, !tbaa !2
  %lnh2Y = load i64, i64* %ls7M4
  %lnh2X = load i64*, i64** %Sp_Var
  %lnh2Z = getelementptr inbounds i64, i64* %lnh2X, i32 6
  store i64 %lnh2Y, i64* %lnh2Z, !tbaa !2
  %lnh30 = load i64*, i64** %Sp_Var
  %lnh31 = getelementptr inbounds i64, i64* %lnh30, i32 -2
  %lnh32 = ptrtoint i64* %lnh31 to i64
  %lnh33 = inttoptr i64 %lnh32 to i64*
  store i64* %lnh33, i64** %Sp_Var
  %lnh34 = load i64, i64* %R1_Var
  %lnh35 = and i64 %lnh34, 7
  %lnh36 = icmp ne i64 %lnh35, 0
  br i1 %lnh36, label %ufeW, label %cf3h
cf3h:
  %lnh38 = load i64, i64* %R1_Var
  %lnh39 = inttoptr i64 %lnh38 to i64*
  %lnh3a = load i64, i64* %lnh39, !tbaa !4
  %lnh3b = inttoptr i64 %lnh3a to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh3c = load i64*, i64** %Sp_Var
  %lnh3d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh3b( i64* %Base_Arg, i64* %lnh3c, i64* %Hp_Arg, i64 %lnh3d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufeW:
  %lnh3e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3g_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh3f = load i64*, i64** %Sp_Var
  %lnh3g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh3e( i64* %Base_Arg, i64* %lnh3f, i64* %Hp_Arg, i64 %lnh3g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3g_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3g_info$def to i8*)
define internal ghccc void @cf3g_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 9, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3g_info$def to i64)) to i32),i32 0)}>
{
nh3h:
  %ls7M8 = alloca i64, i32 1
  %ls7M9 = alloca i64, i32 1
  %ls7Ma = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf3g
cf3g:
  %lnh3j = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3l_info$def to i64
  %lnh3i = load i64*, i64** %Sp_Var
  %lnh3k = getelementptr inbounds i64, i64* %lnh3i, i32 -2
  store i64 %lnh3j, i64* %lnh3k, !tbaa !2
  %lnh3n = load i64, i64* %R1_Var
  %lnh3o = add i64 %lnh3n, 7
  %lnh3p = inttoptr i64 %lnh3o to i64*
  %lnh3q = load i64, i64* %lnh3p, !tbaa !4
  store i64 %lnh3q, i64* %ls7M8
  %lnh3t = load i64, i64* %R1_Var
  %lnh3u = add i64 %lnh3t, 15
  %lnh3v = inttoptr i64 %lnh3u to i64*
  %lnh3w = load i64, i64* %lnh3v, !tbaa !4
  store i64 %lnh3w, i64* %ls7M9
  %lnh3z = load i64, i64* %R1_Var
  %lnh3A = add i64 %lnh3z, 23
  %lnh3B = inttoptr i64 %lnh3A to i64*
  %lnh3C = load i64, i64* %lnh3B, !tbaa !4
  store i64 %lnh3C, i64* %ls7Ma
  %lnh3D = load i64*, i64** %Sp_Var
  %lnh3E = getelementptr inbounds i64, i64* %lnh3D, i32 8
  %lnh3F = bitcast i64* %lnh3E to i64*
  %lnh3G = load i64, i64* %lnh3F, !tbaa !2
  store i64 %lnh3G, i64* %R1_Var
  %lnh3I = load i64, i64* %ls7Ma
  %lnh3H = load i64*, i64** %Sp_Var
  %lnh3J = getelementptr inbounds i64, i64* %lnh3H, i32 -1
  store i64 %lnh3I, i64* %lnh3J, !tbaa !2
  %lnh3L = load i64, i64* %ls7M9
  %lnh3K = load i64*, i64** %Sp_Var
  %lnh3M = getelementptr inbounds i64, i64* %lnh3K, i32 0
  store i64 %lnh3L, i64* %lnh3M, !tbaa !2
  %lnh3O = load i64, i64* %ls7M8
  %lnh3N = load i64*, i64** %Sp_Var
  %lnh3P = getelementptr inbounds i64, i64* %lnh3N, i32 8
  store i64 %lnh3O, i64* %lnh3P, !tbaa !2
  %lnh3Q = load i64*, i64** %Sp_Var
  %lnh3R = getelementptr inbounds i64, i64* %lnh3Q, i32 -2
  %lnh3S = ptrtoint i64* %lnh3R to i64
  %lnh3T = inttoptr i64 %lnh3S to i64*
  store i64* %lnh3T, i64** %Sp_Var
  %lnh3U = load i64, i64* %R1_Var
  %lnh3V = and i64 %lnh3U, 7
  %lnh3W = icmp ne i64 %lnh3V, 0
  br i1 %lnh3W, label %ufeX, label %cf3m
cf3m:
  %lnh3Y = load i64, i64* %R1_Var
  %lnh3Z = inttoptr i64 %lnh3Y to i64*
  %lnh40 = load i64, i64* %lnh3Z, !tbaa !4
  %lnh41 = inttoptr i64 %lnh40 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh42 = load i64*, i64** %Sp_Var
  %lnh43 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh41( i64* %Base_Arg, i64* %lnh42, i64* %Hp_Arg, i64 %lnh43, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufeX:
  %lnh44 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3l_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh45 = load i64*, i64** %Sp_Var
  %lnh46 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh44( i64* %Base_Arg, i64* %lnh45, i64* %Hp_Arg, i64 %lnh46, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3l_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3l_info$def to i8*)
define internal ghccc void @cf3l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 11, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3l_info$def to i64)) to i32),i32 0)}>
{
nh47:
  %ls7Mc = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf3l
cf3l:
  %lnh48 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3q_info$def to i64
  %lnh49 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnh48, i64* %lnh49, !tbaa !2
  %lnh4c = load i64, i64* %R1_Var
  %lnh4d = add i64 %lnh4c, 7
  %lnh4e = inttoptr i64 %lnh4d to double*
  %lnh4f = load double, double* %lnh4e, !tbaa !4
  store double %lnh4f, double* %ls7Mc
  %lnh4g = getelementptr inbounds i64, i64* %Sp_Arg, i32 10
  %lnh4h = bitcast i64* %lnh4g to i64*
  %lnh4i = load i64, i64* %lnh4h, !tbaa !2
  store i64 %lnh4i, i64* %R1_Var
  %lnh4j = load double, double* %ls7Mc
  %lnh4k = getelementptr inbounds i64, i64* %Sp_Arg, i32 10
  %lnh4l = bitcast i64* %lnh4k to double*
  store double %lnh4j, double* %lnh4l, !tbaa !2
  %lnh4m = load i64, i64* %R1_Var
  %lnh4n = and i64 %lnh4m, 7
  %lnh4o = icmp ne i64 %lnh4n, 0
  br i1 %lnh4o, label %ufeY, label %cf3r
cf3r:
  %lnh4q = load i64, i64* %R1_Var
  %lnh4r = inttoptr i64 %lnh4q to i64*
  %lnh4s = load i64, i64* %lnh4r, !tbaa !4
  %lnh4t = inttoptr i64 %lnh4s to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh4u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh4t( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnh4u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufeY:
  %lnh4v = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3q_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh4w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh4v( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnh4w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf3q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3q_info$def to i8*)
define internal ghccc void @cf3q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 32779, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf3q_info$def to i64)) to i32),i32 0)}>
{
nh4x:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Mf = alloca double, i32 1
  %lcf3y = alloca i64, i32 1
  %lcf3Z = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cf3q
cf3q:
  %lnh4y = load i64*, i64** %Hp_Var
  %lnh4z = getelementptr inbounds i64, i64* %lnh4y, i32 8
  %lnh4A = ptrtoint i64* %lnh4z to i64
  %lnh4B = inttoptr i64 %lnh4A to i64*
  store i64* %lnh4B, i64** %Hp_Var
  %lnh4C = load i64*, i64** %Hp_Var
  %lnh4D = ptrtoint i64* %lnh4C to i64
  %lnh4E = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnh4F = bitcast i64* %lnh4E to i64*
  %lnh4G = load i64, i64* %lnh4F, !tbaa !5
  %lnh4H = icmp ugt i64 %lnh4D, %lnh4G
  %lnh4I = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnh4H, i1 0 )
  br i1 %lnh4I, label %cfeg, label %cfef
cfef:
  %lnh4J = load i64*, i64** %Sp_Var
  %lnh4K = getelementptr inbounds i64, i64* %lnh4J, i32 10
  %lnh4L = bitcast i64* %lnh4K to double*
  %lnh4M = load double, double* %lnh4L, !tbaa !2
  %lnh4P = load i64, i64* %R1_Var
  %lnh4Q = add i64 %lnh4P, 7
  %lnh4R = inttoptr i64 %lnh4Q to double*
  %lnh4S = load double, double* %lnh4R, !tbaa !4
  %lnh4T = fmul double %lnh4M, %lnh4S
  store double %lnh4T, double* %ls7Mf
  %lnh4V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mg_info$def to i64
  %lnh4U = load i64*, i64** %Hp_Var
  %lnh4W = getelementptr inbounds i64, i64* %lnh4U, i32 -7
  store i64 %lnh4V, i64* %lnh4W, !tbaa !3
  %lnh4Y = load i64*, i64** %Sp_Var
  %lnh4Z = getelementptr inbounds i64, i64* %lnh4Y, i32 2
  %lnh50 = bitcast i64* %lnh4Z to i64*
  %lnh51 = load i64, i64* %lnh50, !tbaa !2
  %lnh4X = load i64*, i64** %Hp_Var
  %lnh52 = getelementptr inbounds i64, i64* %lnh4X, i32 -5
  store i64 %lnh51, i64* %lnh52, !tbaa !3
  %lnh54 = load i64*, i64** %Sp_Var
  %lnh55 = getelementptr inbounds i64, i64* %lnh54, i32 4
  %lnh56 = bitcast i64* %lnh55 to i64*
  %lnh57 = load i64, i64* %lnh56, !tbaa !2
  %lnh53 = load i64*, i64** %Hp_Var
  %lnh58 = getelementptr inbounds i64, i64* %lnh53, i32 -4
  store i64 %lnh57, i64* %lnh58, !tbaa !3
  %lnh5a = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Mm_info$def to i64
  %lnh59 = load i64*, i64** %Hp_Var
  %lnh5b = getelementptr inbounds i64, i64* %lnh59, i32 -3
  store i64 %lnh5a, i64* %lnh5b, !tbaa !3
  %lnh5d = load i64*, i64** %Sp_Var
  %lnh5e = getelementptr inbounds i64, i64* %lnh5d, i32 1
  %lnh5f = bitcast i64* %lnh5e to i64*
  %lnh5g = load i64, i64* %lnh5f, !tbaa !2
  %lnh5c = load i64*, i64** %Hp_Var
  %lnh5h = getelementptr inbounds i64, i64* %lnh5c, i32 -1
  store i64 %lnh5g, i64* %lnh5h, !tbaa !3
  %lnh5j = load i64*, i64** %Sp_Var
  %lnh5k = getelementptr inbounds i64, i64* %lnh5j, i32 3
  %lnh5l = bitcast i64* %lnh5k to i64*
  %lnh5m = load i64, i64* %lnh5l, !tbaa !2
  %lnh5i = load i64*, i64** %Hp_Var
  %lnh5n = getelementptr inbounds i64, i64* %lnh5i, i32 0
  store i64 %lnh5m, i64* %lnh5n, !tbaa !3
  %lnh5o = load i64*, i64** %Hp_Var
  %lnh5p = getelementptr inbounds i64, i64* %lnh5o, i32 -7
  %lnh5q = ptrtoint i64* %lnh5p to i64
  store i64 %lnh5q, i64* %lcf3y
  %lnh5r = load i64*, i64** %Hp_Var
  %lnh5s = getelementptr inbounds i64, i64* %lnh5r, i32 -3
  %lnh5t = ptrtoint i64* %lnh5s to i64
  store i64 %lnh5t, i64* %lcf3Z
  %lnh5u = load double, double* %ls7Mf
  %lnh5v = fcmp olt double %lnh5u, 0x3EB0C6F7A0B5ED8D
  %lnh5w = zext i1 %lnh5v to i64
  switch i64 %lnh5w, label %ufeV [i64 1, label %cfes]
ufeV:
  %lnh5y = load double, double* %ls7Mf
  %lnh5x = load i64*, i64** %Sp_Var
  %lnh5z = getelementptr inbounds i64, i64* %lnh5x, i32 0
  %lnh5A = bitcast i64* %lnh5z to double*
  store double %lnh5y, double* %lnh5A, !tbaa !2
  %lnh5C = load i64, i64* %lcf3Z
  %lnh5B = load i64*, i64** %Sp_Var
  %lnh5D = getelementptr inbounds i64, i64* %lnh5B, i32 1
  store i64 %lnh5C, i64* %lnh5D, !tbaa !2
  %lnh5F = load i64, i64* %lcf3y
  %lnh5E = load i64*, i64** %Sp_Var
  %lnh5G = getelementptr inbounds i64, i64* %lnh5E, i32 2
  store i64 %lnh5F, i64* %lnh5G, !tbaa !2
  %lnh5H = load i64*, i64** %Sp_Var
  %lnh5I = getelementptr inbounds i64, i64* %lnh5H, i32 -1
  %lnh5J = ptrtoint i64* %lnh5I to i64
  %lnh5K = inttoptr i64 %lnh5J to i64*
  store i64* %lnh5K, i64** %Sp_Var
  %lnh5L = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh5M = load i64*, i64** %Sp_Var
  %lnh5N = load i64*, i64** %Hp_Var
  %lnh5O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh5L( i64* %Base_Arg, i64* %lnh5M, i64* %lnh5N, i64 %lnh5O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfes:
  %lnh5Q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfer_info$def to i64
  %lnh5P = load i64*, i64** %Sp_Var
  %lnh5R = getelementptr inbounds i64, i64* %lnh5P, i32 -1
  store i64 %lnh5Q, i64* %lnh5R, !tbaa !2
  %lnh5S = load i64, i64* %lcf3y
  store i64 %lnh5S, i64* %R1_Var
  %lnh5U = load double, double* %ls7Mf
  %lnh5T = load i64*, i64** %Sp_Var
  %lnh5V = getelementptr inbounds i64, i64* %lnh5T, i32 0
  %lnh5W = bitcast i64* %lnh5V to double*
  store double %lnh5U, double* %lnh5W, !tbaa !2
  %lnh5Y = load i64, i64* %lcf3Z
  %lnh5X = load i64*, i64** %Sp_Var
  %lnh5Z = getelementptr inbounds i64, i64* %lnh5X, i32 1
  store i64 %lnh5Y, i64* %lnh5Z, !tbaa !2
  %lnh61 = load i64, i64* %lcf3y
  %lnh60 = load i64*, i64** %Sp_Var
  %lnh62 = getelementptr inbounds i64, i64* %lnh60, i32 2
  store i64 %lnh61, i64* %lnh62, !tbaa !2
  %lnh63 = load i64*, i64** %Sp_Var
  %lnh64 = getelementptr inbounds i64, i64* %lnh63, i32 -1
  %lnh65 = ptrtoint i64* %lnh64 to i64
  %lnh66 = inttoptr i64 %lnh65 to i64*
  store i64* %lnh66, i64** %Sp_Var
  %lnh67 = load i64, i64* %R1_Var
  %lnh68 = and i64 %lnh67, 7
  %lnh69 = icmp ne i64 %lnh68, 0
  br i1 %lnh69, label %ufeZ, label %cfet
cfet:
  %lnh6b = load i64, i64* %R1_Var
  %lnh6c = inttoptr i64 %lnh6b to i64*
  %lnh6d = load i64, i64* %lnh6c, !tbaa !4
  %lnh6e = inttoptr i64 %lnh6d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6f = load i64*, i64** %Sp_Var
  %lnh6g = load i64*, i64** %Hp_Var
  %lnh6h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6e( i64* %Base_Arg, i64* %lnh6f, i64* %lnh6g, i64 %lnh6h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufeZ:
  %lnh6i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfer_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6j = load i64*, i64** %Sp_Var
  %lnh6k = load i64*, i64** %Hp_Var
  %lnh6l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6i( i64* %Base_Arg, i64* %lnh6j, i64* %lnh6k, i64 %lnh6l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfeg:
  %lnh6m = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %lnh6m, !tbaa !5
  %lnh6n = load i64, i64* %R1_Var
  store i64 %lnh6n, i64* %R1_Var
  %lnh6o = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6p = load i64*, i64** %Sp_Var
  %lnh6q = load i64*, i64** %Hp_Var
  %lnh6r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6o( i64* %Base_Arg, i64* %lnh6p, i64* %lnh6q, i64 %lnh6r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfer_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfer_info$def to i8*)
define internal ghccc void @cfer_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65612, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfer_info$def to i64)) to i32),i32 0)}>
{
nh6s:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfer
cfer:
  %lnh6v = load i64, i64* %R1_Var
  %lnh6w = add i64 %lnh6v, 7
  %lnh6x = inttoptr i64 %lnh6w to double*
  %lnh6y = load double, double* %lnh6x, !tbaa !4
  %lnh6z = fcmp olt double %lnh6y, 0x3EB0C6F7A0B5ED8D
  %lnh6A = zext i1 %lnh6z to i64
  switch i64 %lnh6A, label %uff2 [i64 1, label %cfeF]
uff2:
  %lnh6B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6B( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnh6C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfeF:
  %lnh6D = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfeE_info$def to i64
  %lnh6E = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnh6D, i64* %lnh6E, !tbaa !2
  %lnh6F = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnh6G = bitcast i64* %lnh6F to i64*
  %lnh6H = load i64, i64* %lnh6G, !tbaa !2
  store i64 %lnh6H, i64* %R1_Var
  %lnh6I = load i64, i64* %R1_Var
  %lnh6J = and i64 %lnh6I, 7
  %lnh6K = icmp ne i64 %lnh6J, 0
  br i1 %lnh6K, label %uff3, label %cfeG
cfeG:
  %lnh6M = load i64, i64* %R1_Var
  %lnh6N = inttoptr i64 %lnh6M to i64*
  %lnh6O = load i64, i64* %lnh6N, !tbaa !4
  %lnh6P = inttoptr i64 %lnh6O to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6P( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnh6Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uff3:
  %lnh6R = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfeE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh6S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh6R( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnh6S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfeE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfeE_info$def to i8*)
define internal ghccc void @cfeE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65612, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfeE_info$def to i64)) to i32),i32 0)}>
{
nh6T:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfeE
cfeE:
  %lnh6U = load i64*, i64** %Hp_Var
  %lnh6V = getelementptr inbounds i64, i64* %lnh6U, i32 3
  %lnh6W = ptrtoint i64* %lnh6V to i64
  %lnh6X = inttoptr i64 %lnh6W to i64*
  store i64* %lnh6X, i64** %Hp_Var
  %lnh6Y = load i64*, i64** %Hp_Var
  %lnh6Z = ptrtoint i64* %lnh6Y to i64
  %lnh70 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnh71 = bitcast i64* %lnh70 to i64*
  %lnh72 = load i64, i64* %lnh71, !tbaa !5
  %lnh73 = icmp ugt i64 %lnh6Z, %lnh72
  %lnh74 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnh73, i1 0 )
  br i1 %lnh74, label %cfeM, label %cfeL
cfeL:
  %lnh77 = load i64, i64* %R1_Var
  %lnh78 = add i64 %lnh77, 7
  %lnh79 = inttoptr i64 %lnh78 to double*
  %lnh7a = load double, double* %lnh79, !tbaa !4
  %lnh7b = fcmp olt double %lnh7a, 0x3EB0C6F7A0B5ED8D
  %lnh7c = zext i1 %lnh7b to i64
  switch i64 %lnh7c, label %cfeQ [i64 1, label %cfeU]
cfeQ:
  %lnh7d = load i64*, i64** %Hp_Var
  %lnh7e = getelementptr inbounds i64, i64* %lnh7d, i32 -3
  %lnh7f = ptrtoint i64* %lnh7e to i64
  %lnh7g = inttoptr i64 %lnh7f to i64*
  store i64* %lnh7g, i64** %Hp_Var
  %lnh7h = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh7i = load i64*, i64** %Sp_Var
  %lnh7j = load i64*, i64** %Hp_Var
  %lnh7k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh7h( i64* %Base_Arg, i64* %lnh7i, i64* %lnh7j, i64 %lnh7k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfeU:
  %lnh7m = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnh7l = load i64*, i64** %Hp_Var
  %lnh7n = getelementptr inbounds i64, i64* %lnh7l, i32 -2
  store i64 %lnh7m, i64* %lnh7n, !tbaa !3
  %lnh7p = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnh7q = add i64 %lnh7p, 1
  %lnh7o = load i64*, i64** %Hp_Var
  %lnh7r = getelementptr inbounds i64, i64* %lnh7o, i32 -1
  store i64 %lnh7q, i64* %lnh7r, !tbaa !3
  %lnh7t = load i64*, i64** %Sp_Var
  %lnh7u = getelementptr inbounds i64, i64* %lnh7t, i32 6
  %lnh7v = bitcast i64* %lnh7u to i64*
  %lnh7w = load i64, i64* %lnh7v, !tbaa !2
  %lnh7s = load i64*, i64** %Hp_Var
  %lnh7x = getelementptr inbounds i64, i64* %lnh7s, i32 0
  store i64 %lnh7w, i64* %lnh7x, !tbaa !3
  %lnh7z = load i64*, i64** %Hp_Var
  %lnh7A = ptrtoint i64* %lnh7z to i64
  %lnh7B = add i64 %lnh7A, -15
  store i64 %lnh7B, i64* %R1_Var
  %lnh7C = load i64*, i64** %Sp_Var
  %lnh7D = getelementptr inbounds i64, i64* %lnh7C, i32 13
  %lnh7E = ptrtoint i64* %lnh7D to i64
  %lnh7F = inttoptr i64 %lnh7E to i64*
  store i64* %lnh7F, i64** %Sp_Var
  %lnh7G = load i64*, i64** %Sp_Var
  %lnh7H = getelementptr inbounds i64, i64* %lnh7G, i32 0
  %lnh7I = bitcast i64* %lnh7H to i64*
  %lnh7J = load i64, i64* %lnh7I, !tbaa !2
  %lnh7K = inttoptr i64 %lnh7J to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh7L = load i64*, i64** %Sp_Var
  %lnh7M = load i64*, i64** %Hp_Var
  %lnh7N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh7K( i64* %Base_Arg, i64* %lnh7L, i64* %lnh7M, i64 %lnh7N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfeM:
  %lnh7O = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnh7O, !tbaa !5
  %lnh7P = load i64, i64* %R1_Var
  store i64 %lnh7P, i64* %R1_Var
  %lnh7Q = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh7R = load i64*, i64** %Sp_Var
  %lnh7S = load i64*, i64** %Hp_Var
  %lnh7T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh7Q( i64* %Base_Arg, i64* %lnh7R, i64* %lnh7S, i64 %lnh7T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cf4t_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to i8*)
define internal ghccc void @cf4t_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65612, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to i64)) to i32),i32 0)}>
{
nh7U:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cf4t
cf4t:
  %lnh7V = load i64*, i64** %Hp_Var
  %lnh7W = getelementptr inbounds i64, i64* %lnh7V, i32 17
  %lnh7X = ptrtoint i64* %lnh7W to i64
  %lnh7Y = inttoptr i64 %lnh7X to i64*
  store i64* %lnh7Y, i64** %Hp_Var
  %lnh7Z = load i64*, i64** %Hp_Var
  %lnh80 = ptrtoint i64* %lnh7Z to i64
  %lnh81 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnh82 = bitcast i64* %lnh81 to i64*
  %lnh83 = load i64, i64* %lnh82, !tbaa !5
  %lnh84 = icmp ugt i64 %lnh80, %lnh83
  %lnh85 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnh84, i1 0 )
  br i1 %lnh85, label %cfek, label %cfej
cfej:
  %lnh87 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ph_info$def to i64
  %lnh86 = load i64*, i64** %Hp_Var
  %lnh88 = getelementptr inbounds i64, i64* %lnh86, i32 -16
  store i64 %lnh87, i64* %lnh88, !tbaa !3
  %lnh8a = load i64*, i64** %Sp_Var
  %lnh8b = getelementptr inbounds i64, i64* %lnh8a, i32 12
  %lnh8c = bitcast i64* %lnh8b to i64*
  %lnh8d = load i64, i64* %lnh8c, !tbaa !2
  %lnh89 = load i64*, i64** %Hp_Var
  %lnh8e = getelementptr inbounds i64, i64* %lnh89, i32 -14
  store i64 %lnh8d, i64* %lnh8e, !tbaa !3
  %lnh8g = load i64*, i64** %Sp_Var
  %lnh8h = getelementptr inbounds i64, i64* %lnh8g, i32 8
  %lnh8i = bitcast i64* %lnh8h to i64*
  %lnh8j = load i64, i64* %lnh8i, !tbaa !2
  %lnh8f = load i64*, i64** %Hp_Var
  %lnh8k = getelementptr inbounds i64, i64* %lnh8f, i32 -13
  store i64 %lnh8j, i64* %lnh8k, !tbaa !3
  %lnh8m = load i64*, i64** %Sp_Var
  %lnh8n = getelementptr inbounds i64, i64* %lnh8m, i32 9
  %lnh8o = bitcast i64* %lnh8n to i64*
  %lnh8p = load i64, i64* %lnh8o, !tbaa !2
  %lnh8l = load i64*, i64** %Hp_Var
  %lnh8q = getelementptr inbounds i64, i64* %lnh8l, i32 -12
  store i64 %lnh8p, i64* %lnh8q, !tbaa !3
  %lnh8s = load i64*, i64** %Sp_Var
  %lnh8t = getelementptr inbounds i64, i64* %lnh8s, i32 5
  %lnh8u = bitcast i64* %lnh8t to i64*
  %lnh8v = load i64, i64* %lnh8u, !tbaa !2
  %lnh8r = load i64*, i64** %Hp_Var
  %lnh8w = getelementptr inbounds i64, i64* %lnh8r, i32 -11
  store i64 %lnh8v, i64* %lnh8w, !tbaa !3
  %lnh8y = load i64*, i64** %Sp_Var
  %lnh8z = getelementptr inbounds i64, i64* %lnh8y, i32 4
  %lnh8A = bitcast i64* %lnh8z to i64*
  %lnh8B = load i64, i64* %lnh8A, !tbaa !2
  %lnh8x = load i64*, i64** %Hp_Var
  %lnh8C = getelementptr inbounds i64, i64* %lnh8x, i32 -10
  store i64 %lnh8B, i64* %lnh8C, !tbaa !3
  %lnh8E = load i64*, i64** %Sp_Var
  %lnh8F = getelementptr inbounds i64, i64* %lnh8E, i32 6
  %lnh8G = bitcast i64* %lnh8F to i64*
  %lnh8H = load i64, i64* %lnh8G, !tbaa !2
  %lnh8D = load i64*, i64** %Hp_Var
  %lnh8I = getelementptr inbounds i64, i64* %lnh8D, i32 -9
  store i64 %lnh8H, i64* %lnh8I, !tbaa !3
  %lnh8K = load i64*, i64** %Sp_Var
  %lnh8L = getelementptr inbounds i64, i64* %lnh8K, i32 10
  %lnh8M = bitcast i64* %lnh8L to i64*
  %lnh8N = load i64, i64* %lnh8M, !tbaa !2
  %lnh8J = load i64*, i64** %Hp_Var
  %lnh8O = getelementptr inbounds i64, i64* %lnh8J, i32 -8
  store i64 %lnh8N, i64* %lnh8O, !tbaa !3
  %lnh8Q = load i64*, i64** %Sp_Var
  %lnh8R = getelementptr inbounds i64, i64* %lnh8Q, i32 3
  %lnh8S = bitcast i64* %lnh8R to i64*
  %lnh8T = load i64, i64* %lnh8S, !tbaa !2
  %lnh8P = load i64*, i64** %Hp_Var
  %lnh8U = getelementptr inbounds i64, i64* %lnh8P, i32 -7
  store i64 %lnh8T, i64* %lnh8U, !tbaa !3
  %lnh8W = load i64*, i64** %Sp_Var
  %lnh8X = getelementptr inbounds i64, i64* %lnh8W, i32 2
  %lnh8Y = bitcast i64* %lnh8X to i64*
  %lnh8Z = load i64, i64* %lnh8Y, !tbaa !2
  %lnh8V = load i64*, i64** %Hp_Var
  %lnh90 = getelementptr inbounds i64, i64* %lnh8V, i32 -6
  store i64 %lnh8Z, i64* %lnh90, !tbaa !3
  %lnh92 = load i64*, i64** %Sp_Var
  %lnh93 = getelementptr inbounds i64, i64* %lnh92, i32 7
  %lnh94 = bitcast i64* %lnh93 to i64*
  %lnh95 = load i64, i64* %lnh94, !tbaa !2
  %lnh91 = load i64*, i64** %Hp_Var
  %lnh96 = getelementptr inbounds i64, i64* %lnh91, i32 -5
  store i64 %lnh95, i64* %lnh96, !tbaa !3
  %lnh98 = load i64*, i64** %Sp_Var
  %lnh99 = getelementptr inbounds i64, i64* %lnh98, i32 11
  %lnh9a = bitcast i64* %lnh99 to double*
  %lnh9b = load double, double* %lnh9a, !tbaa !2
  %lnh97 = load i64*, i64** %Hp_Var
  %lnh9c = getelementptr inbounds i64, i64* %lnh97, i32 -4
  %lnh9d = bitcast i64* %lnh9c to double*
  store double %lnh9b, double* %lnh9d, !tbaa !3
  %lnh9f = load i64*, i64** %Sp_Var
  %lnh9g = getelementptr inbounds i64, i64* %lnh9f, i32 1
  %lnh9h = bitcast i64* %lnh9g to double*
  %lnh9i = load double, double* %lnh9h, !tbaa !2
  %lnh9e = load i64*, i64** %Hp_Var
  %lnh9j = getelementptr inbounds i64, i64* %lnh9e, i32 -3
  %lnh9k = bitcast i64* %lnh9j to double*
  store double %lnh9i, double* %lnh9k, !tbaa !3
  %lnh9m = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnh9l = load i64*, i64** %Hp_Var
  %lnh9n = getelementptr inbounds i64, i64* %lnh9l, i32 -2
  store i64 %lnh9m, i64* %lnh9n, !tbaa !3
  %lnh9p = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnh9q = add i64 %lnh9p, 1
  %lnh9o = load i64*, i64** %Hp_Var
  %lnh9r = getelementptr inbounds i64, i64* %lnh9o, i32 -1
  store i64 %lnh9q, i64* %lnh9r, !tbaa !3
  %lnh9t = load i64*, i64** %Hp_Var
  %lnh9u = getelementptr inbounds i64, i64* %lnh9t, i32 -16
  %lnh9v = ptrtoint i64* %lnh9u to i64
  %lnh9s = load i64*, i64** %Hp_Var
  %lnh9w = getelementptr inbounds i64, i64* %lnh9s, i32 0
  store i64 %lnh9v, i64* %lnh9w, !tbaa !3
  %lnh9y = load i64*, i64** %Hp_Var
  %lnh9z = ptrtoint i64* %lnh9y to i64
  %lnh9A = add i64 %lnh9z, -15
  store i64 %lnh9A, i64* %R1_Var
  %lnh9B = load i64*, i64** %Sp_Var
  %lnh9C = getelementptr inbounds i64, i64* %lnh9B, i32 13
  %lnh9D = ptrtoint i64* %lnh9C to i64
  %lnh9E = inttoptr i64 %lnh9D to i64*
  store i64* %lnh9E, i64** %Sp_Var
  %lnh9F = load i64*, i64** %Sp_Var
  %lnh9G = getelementptr inbounds i64, i64* %lnh9F, i32 0
  %lnh9H = bitcast i64* %lnh9G to i64*
  %lnh9I = load i64, i64* %lnh9H, !tbaa !2
  %lnh9J = inttoptr i64 %lnh9I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh9K = load i64*, i64** %Sp_Var
  %lnh9L = load i64*, i64** %Hp_Var
  %lnh9M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh9J( i64* %Base_Arg, i64* %lnh9K, i64* %lnh9L, i64 %lnh9M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfek:
  %lnh9N = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 136, i64* %lnh9N, !tbaa !5
  %lnh9P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cf4t_info$def to i64
  %lnh9O = load i64*, i64** %Sp_Var
  %lnh9Q = getelementptr inbounds i64, i64* %lnh9O, i32 0
  store i64 %lnh9P, i64* %lnh9Q, !tbaa !2
  %lnh9R = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnh9S = load i64*, i64** %Sp_Var
  %lnh9T = load i64*, i64** %Hp_Var
  %lnh9U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnh9R( i64* %Base_Arg, i64* %lnh9S, i64* %lnh9T, i64 %lnh9U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwshade_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_slow$def to i8*)
define ghccc void @Main_zdwshade_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nh9V:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cff6
cff6:
  %lnh9W = load i64*, i64** %Sp_Var
  %lnh9X = getelementptr inbounds i64, i64* %lnh9W, i32 4
  %lnh9Y = bitcast i64* %lnh9X to i64*
  %lnh9Z = load i64, i64* %lnh9Y, !tbaa !2
  store i64 %lnh9Z, i64* %R6_Var
  %lnha0 = load i64*, i64** %Sp_Var
  %lnha1 = getelementptr inbounds i64, i64* %lnha0, i32 3
  %lnha2 = bitcast i64* %lnha1 to i64*
  %lnha3 = load i64, i64* %lnha2, !tbaa !2
  store i64 %lnha3, i64* %R5_Var
  %lnha4 = load i64*, i64** %Sp_Var
  %lnha5 = getelementptr inbounds i64, i64* %lnha4, i32 2
  %lnha6 = bitcast i64* %lnha5 to i64*
  %lnha7 = load i64, i64* %lnha6, !tbaa !2
  store i64 %lnha7, i64* %R4_Var
  %lnha8 = load i64*, i64** %Sp_Var
  %lnha9 = getelementptr inbounds i64, i64* %lnha8, i32 1
  %lnhaa = bitcast i64* %lnha9 to i64*
  %lnhab = load i64, i64* %lnhaa, !tbaa !2
  store i64 %lnhab, i64* %R3_Var
  %lnhac = load i64*, i64** %Sp_Var
  %lnhad = getelementptr inbounds i64, i64* %lnhac, i32 0
  %lnhae = bitcast i64* %lnhad to i64*
  %lnhaf = load i64, i64* %lnhae, !tbaa !2
  store i64 %lnhaf, i64* %R2_Var
  %lnhag = load i64, i64* %R1_Var
  store i64 %lnhag, i64* %R1_Var
  %lnhah = load i64*, i64** %Sp_Var
  %lnhai = getelementptr inbounds i64, i64* %lnhah, i32 5
  %lnhaj = ptrtoint i64* %lnhai to i64
  %lnhak = inttoptr i64 %lnhaj to i64*
  store i64* %lnhak, i64** %Sp_Var
  %lnhal = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnham = load i64*, i64** %Sp_Var
  %lnhan = load i64, i64* %R1_Var
  %lnhao = load i64, i64* %R2_Var
  %lnhap = load i64, i64* %R3_Var
  %lnhaq = load i64, i64* %R4_Var
  %lnhar = load i64, i64* %R5_Var
  %lnhas = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhal( i64* %Base_Arg, i64* %lnham, i64* %Hp_Arg, i64 %lnhan, i64 %lnhao, i64 %lnhap, i64 %lnhaq, i64 %lnhar, i64 %lnhas, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Q8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Q8_info$def to i8*)
define internal ghccc void @s7Q8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhat:
  %ls7PH = alloca i64, i32 1
  %ls7Pv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfgy
cfgy:
  %lnhau = load i64*, i64** %Sp_Var
  %lnhav = getelementptr inbounds i64, i64* %lnhau, i32 -5
  %lnhaw = ptrtoint i64* %lnhav to i64
  %lnhax = icmp ult i64 %lnhaw, %SpLim_Arg
  %lnhay = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhax, i1 0 )
  br i1 %lnhay, label %cfgS, label %cfgT
cfgT:
  %lnhaA = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhaz = load i64*, i64** %Sp_Var
  %lnhaB = getelementptr inbounds i64, i64* %lnhaz, i32 -2
  store i64 %lnhaA, i64* %lnhaB, !tbaa !2
  %lnhaD = load i64, i64* %R1_Var
  %lnhaC = load i64*, i64** %Sp_Var
  %lnhaE = getelementptr inbounds i64, i64* %lnhaC, i32 -1
  store i64 %lnhaD, i64* %lnhaE, !tbaa !2
  %lnhaG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgv_info$def to i64
  %lnhaF = load i64*, i64** %Sp_Var
  %lnhaH = getelementptr inbounds i64, i64* %lnhaF, i32 -5
  store i64 %lnhaG, i64* %lnhaH, !tbaa !2
  %lnhaK = load i64, i64* %R1_Var
  %lnhaL = add i64 %lnhaK, 16
  %lnhaM = inttoptr i64 %lnhaL to i64*
  %lnhaN = load i64, i64* %lnhaM, !tbaa !4
  store i64 %lnhaN, i64* %ls7PH
  %lnhaQ = load i64, i64* %R1_Var
  %lnhaR = add i64 %lnhaQ, 24
  %lnhaS = inttoptr i64 %lnhaR to i64*
  %lnhaT = load i64, i64* %lnhaS, !tbaa !4
  store i64 %lnhaT, i64* %ls7Pv
  %lnhaW = load i64, i64* %R1_Var
  %lnhaX = add i64 %lnhaW, 32
  %lnhaY = inttoptr i64 %lnhaX to i64*
  %lnhaZ = load i64, i64* %lnhaY, !tbaa !4
  store i64 %lnhaZ, i64* %R1_Var
  %lnhb1 = load i64, i64* %ls7Pv
  %lnhb0 = load i64*, i64** %Sp_Var
  %lnhb2 = getelementptr inbounds i64, i64* %lnhb0, i32 -4
  store i64 %lnhb1, i64* %lnhb2, !tbaa !2
  %lnhb4 = load i64, i64* %ls7PH
  %lnhb3 = load i64*, i64** %Sp_Var
  %lnhb5 = getelementptr inbounds i64, i64* %lnhb3, i32 -3
  store i64 %lnhb4, i64* %lnhb5, !tbaa !2
  %lnhb6 = load i64*, i64** %Sp_Var
  %lnhb7 = getelementptr inbounds i64, i64* %lnhb6, i32 -5
  %lnhb8 = ptrtoint i64* %lnhb7 to i64
  %lnhb9 = inttoptr i64 %lnhb8 to i64*
  store i64* %lnhb9, i64** %Sp_Var
  %lnhba = load i64, i64* %R1_Var
  %lnhbb = and i64 %lnhba, 7
  %lnhbc = icmp ne i64 %lnhbb, 0
  br i1 %lnhbc, label %ufh0, label %cfgw
cfgw:
  %lnhbe = load i64, i64* %R1_Var
  %lnhbf = inttoptr i64 %lnhbe to i64*
  %lnhbg = load i64, i64* %lnhbf, !tbaa !4
  %lnhbh = inttoptr i64 %lnhbg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhbi = load i64*, i64** %Sp_Var
  %lnhbj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhbh( i64* %Base_Arg, i64* %lnhbi, i64* %Hp_Arg, i64 %lnhbj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufh0:
  %lnhbk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhbl = load i64*, i64** %Sp_Var
  %lnhbm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhbk( i64* %Base_Arg, i64* %lnhbl, i64* %Hp_Arg, i64 %lnhbm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfgS:
  %lnhbn = load i64, i64* %R1_Var
  store i64 %lnhbn, i64* %R1_Var
  %lnhbo = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhbp = bitcast i64* %lnhbo to i64*
  %lnhbq = load i64, i64* %lnhbp, !tbaa !5
  %lnhbr = inttoptr i64 %lnhbq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhbs = load i64*, i64** %Sp_Var
  %lnhbt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhbr( i64* %Base_Arg, i64* %lnhbs, i64* %Hp_Arg, i64 %lnhbt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfgv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgv_info$def to i8*)
define internal ghccc void @cfgv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhbu:
  %ls7Q1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfgv
cfgv:
  %lnhbv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgB_info$def to i64
  %lnhbw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhbv, i64* %lnhbw, !tbaa !2
  %lnhbz = load i64, i64* %R1_Var
  %lnhbA = add i64 %lnhbz, 7
  %lnhbB = inttoptr i64 %lnhbA to double*
  %lnhbC = load double, double* %lnhbB, !tbaa !4
  store double %lnhbC, double* %ls7Q1
  %lnhbD = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhbE = bitcast i64* %lnhbD to i64*
  %lnhbF = load i64, i64* %lnhbE, !tbaa !2
  store i64 %lnhbF, i64* %R1_Var
  %lnhbG = load double, double* %ls7Q1
  %lnhbH = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhbI = bitcast i64* %lnhbH to double*
  store double %lnhbG, double* %lnhbI, !tbaa !2
  %lnhbJ = load i64, i64* %R1_Var
  %lnhbK = and i64 %lnhbJ, 7
  %lnhbL = icmp ne i64 %lnhbK, 0
  br i1 %lnhbL, label %ufgZ, label %cfgC
cfgC:
  %lnhbN = load i64, i64* %R1_Var
  %lnhbO = inttoptr i64 %lnhbN to i64*
  %lnhbP = load i64, i64* %lnhbO, !tbaa !4
  %lnhbQ = inttoptr i64 %lnhbP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhbR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhbQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhbR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufgZ:
  %lnhbS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhbT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhbS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhbT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfgB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgB_info$def to i8*)
define internal ghccc void @cfgB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhbU:
  %ls7Q3 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfgB
cfgB:
  %lnhbV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgG_info$def to i64
  %lnhbW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhbV, i64* %lnhbW, !tbaa !2
  %lnhbZ = load i64, i64* %R1_Var
  %lnhc0 = add i64 %lnhbZ, 7
  %lnhc1 = inttoptr i64 %lnhc0 to double*
  %lnhc2 = load double, double* %lnhc1, !tbaa !4
  store double %lnhc2, double* %ls7Q3
  %lnhc3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhc4 = bitcast i64* %lnhc3 to i64*
  %lnhc5 = load i64, i64* %lnhc4, !tbaa !2
  store i64 %lnhc5, i64* %R1_Var
  %lnhc6 = load double, double* %ls7Q3
  %lnhc7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhc8 = bitcast i64* %lnhc7 to double*
  store double %lnhc6, double* %lnhc8, !tbaa !2
  %lnhc9 = load i64, i64* %R1_Var
  %lnhca = and i64 %lnhc9, 7
  %lnhcb = icmp ne i64 %lnhca, 0
  br i1 %lnhcb, label %ufh1, label %cfgH
cfgH:
  %lnhcd = load i64, i64* %R1_Var
  %lnhce = inttoptr i64 %lnhcd to i64*
  %lnhcf = load i64, i64* %lnhce, !tbaa !4
  %lnhcg = inttoptr i64 %lnhcf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhch = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhcg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhch, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufh1:
  %lnhci = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhcj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhci( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhcj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfgG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgG_info$def to i8*)
define internal ghccc void @cfgG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhck:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Q7 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfgG
cfgG:
  %lnhcl = load i64*, i64** %Hp_Var
  %lnhcm = getelementptr inbounds i64, i64* %lnhcl, i32 2
  %lnhcn = ptrtoint i64* %lnhcm to i64
  %lnhco = inttoptr i64 %lnhcn to i64*
  store i64* %lnhco, i64** %Hp_Var
  %lnhcp = load i64*, i64** %Hp_Var
  %lnhcq = ptrtoint i64* %lnhcp to i64
  %lnhcr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhcs = bitcast i64* %lnhcr to i64*
  %lnhct = load i64, i64* %lnhcs, !tbaa !5
  %lnhcu = icmp ugt i64 %lnhcq, %lnhct
  %lnhcv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhcu, i1 0 )
  br i1 %lnhcv, label %cfgY, label %cfgX
cfgX:
  %lnhcw = load i64*, i64** %Sp_Var
  %lnhcx = getelementptr inbounds i64, i64* %lnhcw, i32 1
  %lnhcy = bitcast i64* %lnhcx to double*
  %lnhcz = load double, double* %lnhcy, !tbaa !2
  %lnhcA = load i64*, i64** %Sp_Var
  %lnhcB = getelementptr inbounds i64, i64* %lnhcA, i32 2
  %lnhcC = bitcast i64* %lnhcB to double*
  %lnhcD = load double, double* %lnhcC, !tbaa !2
  %lnhcG = load i64, i64* %R1_Var
  %lnhcH = add i64 %lnhcG, 7
  %lnhcI = inttoptr i64 %lnhcH to double*
  %lnhcJ = load double, double* %lnhcI, !tbaa !4
  %lnhcK = fmul double %lnhcD, %lnhcJ
  %lnhcL = fadd double %lnhcz, %lnhcK
  store double %lnhcL, double* %ls7Q7
  %lnhcN = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhcM = load i64*, i64** %Hp_Var
  %lnhcO = getelementptr inbounds i64, i64* %lnhcM, i32 -1
  store i64 %lnhcN, i64* %lnhcO, !tbaa !3
  %lnhcQ = load double, double* %ls7Q7
  %lnhcP = load i64*, i64** %Hp_Var
  %lnhcR = getelementptr inbounds i64, i64* %lnhcP, i32 0
  %lnhcS = bitcast i64* %lnhcR to double*
  store double %lnhcQ, double* %lnhcS, !tbaa !3
  %lnhcU = load i64*, i64** %Hp_Var
  %lnhcV = ptrtoint i64* %lnhcU to i64
  %lnhcW = add i64 %lnhcV, -7
  store i64 %lnhcW, i64* %R1_Var
  %lnhcX = load i64*, i64** %Sp_Var
  %lnhcY = getelementptr inbounds i64, i64* %lnhcX, i32 3
  %lnhcZ = ptrtoint i64* %lnhcY to i64
  %lnhd0 = inttoptr i64 %lnhcZ to i64*
  store i64* %lnhd0, i64** %Sp_Var
  %lnhd1 = load i64*, i64** %Sp_Var
  %lnhd2 = getelementptr inbounds i64, i64* %lnhd1, i32 0
  %lnhd3 = bitcast i64* %lnhd2 to i64*
  %lnhd4 = load i64, i64* %lnhd3, !tbaa !2
  %lnhd5 = inttoptr i64 %lnhd4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhd6 = load i64*, i64** %Sp_Var
  %lnhd7 = load i64*, i64** %Hp_Var
  %lnhd8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhd5( i64* %Base_Arg, i64* %lnhd6, i64* %lnhd7, i64 %lnhd8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfgY:
  %lnhd9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhd9, !tbaa !5
  %lnhda = load i64, i64* %R1_Var
  store i64 %lnhda, i64* %R1_Var
  %lnhdb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhdc = load i64*, i64** %Sp_Var
  %lnhdd = load i64*, i64** %Hp_Var
  %lnhde = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhdb( i64* %Base_Arg, i64* %lnhdc, i64* %lnhdd, i64 %lnhde, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7PZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7PZ_info$def to i8*)
define internal ghccc void @s7PZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhdf:
  %ls7PG = alloca i64, i32 1
  %ls7Pv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfh9
cfh9:
  %lnhdg = load i64*, i64** %Sp_Var
  %lnhdh = getelementptr inbounds i64, i64* %lnhdg, i32 -5
  %lnhdi = ptrtoint i64* %lnhdh to i64
  %lnhdj = icmp ult i64 %lnhdi, %SpLim_Arg
  %lnhdk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhdj, i1 0 )
  br i1 %lnhdk, label %cfht, label %cfhu
cfhu:
  %lnhdm = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhdl = load i64*, i64** %Sp_Var
  %lnhdn = getelementptr inbounds i64, i64* %lnhdl, i32 -2
  store i64 %lnhdm, i64* %lnhdn, !tbaa !2
  %lnhdp = load i64, i64* %R1_Var
  %lnhdo = load i64*, i64** %Sp_Var
  %lnhdq = getelementptr inbounds i64, i64* %lnhdo, i32 -1
  store i64 %lnhdp, i64* %lnhdq, !tbaa !2
  %lnhds = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfh6_info$def to i64
  %lnhdr = load i64*, i64** %Sp_Var
  %lnhdt = getelementptr inbounds i64, i64* %lnhdr, i32 -5
  store i64 %lnhds, i64* %lnhdt, !tbaa !2
  %lnhdw = load i64, i64* %R1_Var
  %lnhdx = add i64 %lnhdw, 16
  %lnhdy = inttoptr i64 %lnhdx to i64*
  %lnhdz = load i64, i64* %lnhdy, !tbaa !4
  store i64 %lnhdz, i64* %ls7PG
  %lnhdC = load i64, i64* %R1_Var
  %lnhdD = add i64 %lnhdC, 24
  %lnhdE = inttoptr i64 %lnhdD to i64*
  %lnhdF = load i64, i64* %lnhdE, !tbaa !4
  store i64 %lnhdF, i64* %ls7Pv
  %lnhdI = load i64, i64* %R1_Var
  %lnhdJ = add i64 %lnhdI, 32
  %lnhdK = inttoptr i64 %lnhdJ to i64*
  %lnhdL = load i64, i64* %lnhdK, !tbaa !4
  store i64 %lnhdL, i64* %R1_Var
  %lnhdN = load i64, i64* %ls7Pv
  %lnhdM = load i64*, i64** %Sp_Var
  %lnhdO = getelementptr inbounds i64, i64* %lnhdM, i32 -4
  store i64 %lnhdN, i64* %lnhdO, !tbaa !2
  %lnhdQ = load i64, i64* %ls7PG
  %lnhdP = load i64*, i64** %Sp_Var
  %lnhdR = getelementptr inbounds i64, i64* %lnhdP, i32 -3
  store i64 %lnhdQ, i64* %lnhdR, !tbaa !2
  %lnhdS = load i64*, i64** %Sp_Var
  %lnhdT = getelementptr inbounds i64, i64* %lnhdS, i32 -5
  %lnhdU = ptrtoint i64* %lnhdT to i64
  %lnhdV = inttoptr i64 %lnhdU to i64*
  store i64* %lnhdV, i64** %Sp_Var
  %lnhdW = load i64, i64* %R1_Var
  %lnhdX = and i64 %lnhdW, 7
  %lnhdY = icmp ne i64 %lnhdX, 0
  br i1 %lnhdY, label %ufhB, label %cfh7
cfh7:
  %lnhe0 = load i64, i64* %R1_Var
  %lnhe1 = inttoptr i64 %lnhe0 to i64*
  %lnhe2 = load i64, i64* %lnhe1, !tbaa !4
  %lnhe3 = inttoptr i64 %lnhe2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhe4 = load i64*, i64** %Sp_Var
  %lnhe5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhe3( i64* %Base_Arg, i64* %lnhe4, i64* %Hp_Arg, i64 %lnhe5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufhB:
  %lnhe6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfh6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhe7 = load i64*, i64** %Sp_Var
  %lnhe8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhe6( i64* %Base_Arg, i64* %lnhe7, i64* %Hp_Arg, i64 %lnhe8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfht:
  %lnhe9 = load i64, i64* %R1_Var
  store i64 %lnhe9, i64* %R1_Var
  %lnhea = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnheb = bitcast i64* %lnhea to i64*
  %lnhec = load i64, i64* %lnheb, !tbaa !5
  %lnhed = inttoptr i64 %lnhec to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhee = load i64*, i64** %Sp_Var
  %lnhef = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhed( i64* %Base_Arg, i64* %lnhee, i64* %Hp_Arg, i64 %lnhef, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfh6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfh6_info$def to i8*)
define internal ghccc void @cfh6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nheg:
  %ls7PS = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfh6
cfh6:
  %lnheh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhc_info$def to i64
  %lnhei = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnheh, i64* %lnhei, !tbaa !2
  %lnhel = load i64, i64* %R1_Var
  %lnhem = add i64 %lnhel, 7
  %lnhen = inttoptr i64 %lnhem to double*
  %lnheo = load double, double* %lnhen, !tbaa !4
  store double %lnheo, double* %ls7PS
  %lnhep = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnheq = bitcast i64* %lnhep to i64*
  %lnher = load i64, i64* %lnheq, !tbaa !2
  store i64 %lnher, i64* %R1_Var
  %lnhes = load double, double* %ls7PS
  %lnhet = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnheu = bitcast i64* %lnhet to double*
  store double %lnhes, double* %lnheu, !tbaa !2
  %lnhev = load i64, i64* %R1_Var
  %lnhew = and i64 %lnhev, 7
  %lnhex = icmp ne i64 %lnhew, 0
  br i1 %lnhex, label %ufhA, label %cfhd
cfhd:
  %lnhez = load i64, i64* %R1_Var
  %lnheA = inttoptr i64 %lnhez to i64*
  %lnheB = load i64, i64* %lnheA, !tbaa !4
  %lnheC = inttoptr i64 %lnheB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnheD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnheC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnheD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufhA:
  %lnheE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnheF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnheE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnheF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfhc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhc_info$def to i8*)
define internal ghccc void @cfhc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nheG:
  %ls7PU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfhc
cfhc:
  %lnheH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhh_info$def to i64
  %lnheI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnheH, i64* %lnheI, !tbaa !2
  %lnheL = load i64, i64* %R1_Var
  %lnheM = add i64 %lnheL, 7
  %lnheN = inttoptr i64 %lnheM to double*
  %lnheO = load double, double* %lnheN, !tbaa !4
  store double %lnheO, double* %ls7PU
  %lnheP = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnheQ = bitcast i64* %lnheP to i64*
  %lnheR = load i64, i64* %lnheQ, !tbaa !2
  store i64 %lnheR, i64* %R1_Var
  %lnheS = load double, double* %ls7PU
  %lnheT = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnheU = bitcast i64* %lnheT to double*
  store double %lnheS, double* %lnheU, !tbaa !2
  %lnheV = load i64, i64* %R1_Var
  %lnheW = and i64 %lnheV, 7
  %lnheX = icmp ne i64 %lnheW, 0
  br i1 %lnheX, label %ufhC, label %cfhi
cfhi:
  %lnheZ = load i64, i64* %R1_Var
  %lnhf0 = inttoptr i64 %lnheZ to i64*
  %lnhf1 = load i64, i64* %lnhf0, !tbaa !4
  %lnhf2 = inttoptr i64 %lnhf1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhf3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhf2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhf3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufhC:
  %lnhf4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhf5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhf4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhf5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfhh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhh_info$def to i8*)
define internal ghccc void @cfhh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhf6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7PY = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfhh
cfhh:
  %lnhf7 = load i64*, i64** %Hp_Var
  %lnhf8 = getelementptr inbounds i64, i64* %lnhf7, i32 2
  %lnhf9 = ptrtoint i64* %lnhf8 to i64
  %lnhfa = inttoptr i64 %lnhf9 to i64*
  store i64* %lnhfa, i64** %Hp_Var
  %lnhfb = load i64*, i64** %Hp_Var
  %lnhfc = ptrtoint i64* %lnhfb to i64
  %lnhfd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhfe = bitcast i64* %lnhfd to i64*
  %lnhff = load i64, i64* %lnhfe, !tbaa !5
  %lnhfg = icmp ugt i64 %lnhfc, %lnhff
  %lnhfh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhfg, i1 0 )
  br i1 %lnhfh, label %cfhz, label %cfhy
cfhy:
  %lnhfi = load i64*, i64** %Sp_Var
  %lnhfj = getelementptr inbounds i64, i64* %lnhfi, i32 1
  %lnhfk = bitcast i64* %lnhfj to double*
  %lnhfl = load double, double* %lnhfk, !tbaa !2
  %lnhfm = load i64*, i64** %Sp_Var
  %lnhfn = getelementptr inbounds i64, i64* %lnhfm, i32 2
  %lnhfo = bitcast i64* %lnhfn to double*
  %lnhfp = load double, double* %lnhfo, !tbaa !2
  %lnhfs = load i64, i64* %R1_Var
  %lnhft = add i64 %lnhfs, 7
  %lnhfu = inttoptr i64 %lnhft to double*
  %lnhfv = load double, double* %lnhfu, !tbaa !4
  %lnhfw = fmul double %lnhfp, %lnhfv
  %lnhfx = fadd double %lnhfl, %lnhfw
  store double %lnhfx, double* %ls7PY
  %lnhfz = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhfy = load i64*, i64** %Hp_Var
  %lnhfA = getelementptr inbounds i64, i64* %lnhfy, i32 -1
  store i64 %lnhfz, i64* %lnhfA, !tbaa !3
  %lnhfC = load double, double* %ls7PY
  %lnhfB = load i64*, i64** %Hp_Var
  %lnhfD = getelementptr inbounds i64, i64* %lnhfB, i32 0
  %lnhfE = bitcast i64* %lnhfD to double*
  store double %lnhfC, double* %lnhfE, !tbaa !3
  %lnhfG = load i64*, i64** %Hp_Var
  %lnhfH = ptrtoint i64* %lnhfG to i64
  %lnhfI = add i64 %lnhfH, -7
  store i64 %lnhfI, i64* %R1_Var
  %lnhfJ = load i64*, i64** %Sp_Var
  %lnhfK = getelementptr inbounds i64, i64* %lnhfJ, i32 3
  %lnhfL = ptrtoint i64* %lnhfK to i64
  %lnhfM = inttoptr i64 %lnhfL to i64*
  store i64* %lnhfM, i64** %Sp_Var
  %lnhfN = load i64*, i64** %Sp_Var
  %lnhfO = getelementptr inbounds i64, i64* %lnhfN, i32 0
  %lnhfP = bitcast i64* %lnhfO to i64*
  %lnhfQ = load i64, i64* %lnhfP, !tbaa !2
  %lnhfR = inttoptr i64 %lnhfQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhfS = load i64*, i64** %Sp_Var
  %lnhfT = load i64*, i64** %Hp_Var
  %lnhfU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhfR( i64* %Base_Arg, i64* %lnhfS, i64* %lnhfT, i64 %lnhfU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfhz:
  %lnhfV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhfV, !tbaa !5
  %lnhfW = load i64, i64* %R1_Var
  store i64 %lnhfW, i64* %R1_Var
  %lnhfX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhfY = load i64*, i64** %Sp_Var
  %lnhfZ = load i64*, i64** %Hp_Var
  %lnhg0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhfX( i64* %Base_Arg, i64* %lnhfY, i64* %lnhfZ, i64 %lnhg0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7PQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7PQ_info$def to i8*)
define internal ghccc void @s7PQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhg1:
  %ls7PF = alloca i64, i32 1
  %ls7Pv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfhK
cfhK:
  %lnhg2 = load i64*, i64** %Sp_Var
  %lnhg3 = getelementptr inbounds i64, i64* %lnhg2, i32 -5
  %lnhg4 = ptrtoint i64* %lnhg3 to i64
  %lnhg5 = icmp ult i64 %lnhg4, %SpLim_Arg
  %lnhg6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhg5, i1 0 )
  br i1 %lnhg6, label %cfi4, label %cfi5
cfi5:
  %lnhg8 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhg7 = load i64*, i64** %Sp_Var
  %lnhg9 = getelementptr inbounds i64, i64* %lnhg7, i32 -2
  store i64 %lnhg8, i64* %lnhg9, !tbaa !2
  %lnhgb = load i64, i64* %R1_Var
  %lnhga = load i64*, i64** %Sp_Var
  %lnhgc = getelementptr inbounds i64, i64* %lnhga, i32 -1
  store i64 %lnhgb, i64* %lnhgc, !tbaa !2
  %lnhge = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhH_info$def to i64
  %lnhgd = load i64*, i64** %Sp_Var
  %lnhgf = getelementptr inbounds i64, i64* %lnhgd, i32 -5
  store i64 %lnhge, i64* %lnhgf, !tbaa !2
  %lnhgi = load i64, i64* %R1_Var
  %lnhgj = add i64 %lnhgi, 16
  %lnhgk = inttoptr i64 %lnhgj to i64*
  %lnhgl = load i64, i64* %lnhgk, !tbaa !4
  store i64 %lnhgl, i64* %ls7PF
  %lnhgo = load i64, i64* %R1_Var
  %lnhgp = add i64 %lnhgo, 24
  %lnhgq = inttoptr i64 %lnhgp to i64*
  %lnhgr = load i64, i64* %lnhgq, !tbaa !4
  store i64 %lnhgr, i64* %ls7Pv
  %lnhgu = load i64, i64* %R1_Var
  %lnhgv = add i64 %lnhgu, 32
  %lnhgw = inttoptr i64 %lnhgv to i64*
  %lnhgx = load i64, i64* %lnhgw, !tbaa !4
  store i64 %lnhgx, i64* %R1_Var
  %lnhgz = load i64, i64* %ls7Pv
  %lnhgy = load i64*, i64** %Sp_Var
  %lnhgA = getelementptr inbounds i64, i64* %lnhgy, i32 -4
  store i64 %lnhgz, i64* %lnhgA, !tbaa !2
  %lnhgC = load i64, i64* %ls7PF
  %lnhgB = load i64*, i64** %Sp_Var
  %lnhgD = getelementptr inbounds i64, i64* %lnhgB, i32 -3
  store i64 %lnhgC, i64* %lnhgD, !tbaa !2
  %lnhgE = load i64*, i64** %Sp_Var
  %lnhgF = getelementptr inbounds i64, i64* %lnhgE, i32 -5
  %lnhgG = ptrtoint i64* %lnhgF to i64
  %lnhgH = inttoptr i64 %lnhgG to i64*
  store i64* %lnhgH, i64** %Sp_Var
  %lnhgI = load i64, i64* %R1_Var
  %lnhgJ = and i64 %lnhgI, 7
  %lnhgK = icmp ne i64 %lnhgJ, 0
  br i1 %lnhgK, label %ufic, label %cfhI
cfhI:
  %lnhgM = load i64, i64* %R1_Var
  %lnhgN = inttoptr i64 %lnhgM to i64*
  %lnhgO = load i64, i64* %lnhgN, !tbaa !4
  %lnhgP = inttoptr i64 %lnhgO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhgQ = load i64*, i64** %Sp_Var
  %lnhgR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhgP( i64* %Base_Arg, i64* %lnhgQ, i64* %Hp_Arg, i64 %lnhgR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufic:
  %lnhgS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhgT = load i64*, i64** %Sp_Var
  %lnhgU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhgS( i64* %Base_Arg, i64* %lnhgT, i64* %Hp_Arg, i64 %lnhgU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfi4:
  %lnhgV = load i64, i64* %R1_Var
  store i64 %lnhgV, i64* %R1_Var
  %lnhgW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhgX = bitcast i64* %lnhgW to i64*
  %lnhgY = load i64, i64* %lnhgX, !tbaa !5
  %lnhgZ = inttoptr i64 %lnhgY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhh0 = load i64*, i64** %Sp_Var
  %lnhh1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhgZ( i64* %Base_Arg, i64* %lnhh0, i64* %Hp_Arg, i64 %lnhh1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfhH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhH_info$def to i8*)
define internal ghccc void @cfhH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhh2:
  %ls7PJ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfhH
cfhH:
  %lnhh3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhN_info$def to i64
  %lnhh4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhh3, i64* %lnhh4, !tbaa !2
  %lnhh7 = load i64, i64* %R1_Var
  %lnhh8 = add i64 %lnhh7, 7
  %lnhh9 = inttoptr i64 %lnhh8 to double*
  %lnhha = load double, double* %lnhh9, !tbaa !4
  store double %lnhha, double* %ls7PJ
  %lnhhb = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhhc = bitcast i64* %lnhhb to i64*
  %lnhhd = load i64, i64* %lnhhc, !tbaa !2
  store i64 %lnhhd, i64* %R1_Var
  %lnhhe = load double, double* %ls7PJ
  %lnhhf = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhhg = bitcast i64* %lnhhf to double*
  store double %lnhhe, double* %lnhhg, !tbaa !2
  %lnhhh = load i64, i64* %R1_Var
  %lnhhi = and i64 %lnhhh, 7
  %lnhhj = icmp ne i64 %lnhhi, 0
  br i1 %lnhhj, label %ufib, label %cfhO
cfhO:
  %lnhhl = load i64, i64* %R1_Var
  %lnhhm = inttoptr i64 %lnhhl to i64*
  %lnhhn = load i64, i64* %lnhhm, !tbaa !4
  %lnhho = inttoptr i64 %lnhhn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhhp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhho( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhhp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufib:
  %lnhhq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhhr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhhq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhhr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfhN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhN_info$def to i8*)
define internal ghccc void @cfhN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhhs:
  %ls7PL = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfhN
cfhN:
  %lnhht = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhS_info$def to i64
  %lnhhu = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhht, i64* %lnhhu, !tbaa !2
  %lnhhx = load i64, i64* %R1_Var
  %lnhhy = add i64 %lnhhx, 7
  %lnhhz = inttoptr i64 %lnhhy to double*
  %lnhhA = load double, double* %lnhhz, !tbaa !4
  store double %lnhhA, double* %ls7PL
  %lnhhB = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhhC = bitcast i64* %lnhhB to i64*
  %lnhhD = load i64, i64* %lnhhC, !tbaa !2
  store i64 %lnhhD, i64* %R1_Var
  %lnhhE = load double, double* %ls7PL
  %lnhhF = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhhG = bitcast i64* %lnhhF to double*
  store double %lnhhE, double* %lnhhG, !tbaa !2
  %lnhhH = load i64, i64* %R1_Var
  %lnhhI = and i64 %lnhhH, 7
  %lnhhJ = icmp ne i64 %lnhhI, 0
  br i1 %lnhhJ, label %ufid, label %cfhT
cfhT:
  %lnhhL = load i64, i64* %R1_Var
  %lnhhM = inttoptr i64 %lnhhL to i64*
  %lnhhN = load i64, i64* %lnhhM, !tbaa !4
  %lnhhO = inttoptr i64 %lnhhN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhhP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhhO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhhP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufid:
  %lnhhQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhhR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhhQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhhR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfhS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfhS_info$def to i8*)
define internal ghccc void @cfhS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhhS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7PP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfhS
cfhS:
  %lnhhT = load i64*, i64** %Hp_Var
  %lnhhU = getelementptr inbounds i64, i64* %lnhhT, i32 2
  %lnhhV = ptrtoint i64* %lnhhU to i64
  %lnhhW = inttoptr i64 %lnhhV to i64*
  store i64* %lnhhW, i64** %Hp_Var
  %lnhhX = load i64*, i64** %Hp_Var
  %lnhhY = ptrtoint i64* %lnhhX to i64
  %lnhhZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhi0 = bitcast i64* %lnhhZ to i64*
  %lnhi1 = load i64, i64* %lnhi0, !tbaa !5
  %lnhi2 = icmp ugt i64 %lnhhY, %lnhi1
  %lnhi3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhi2, i1 0 )
  br i1 %lnhi3, label %cfia, label %cfi9
cfi9:
  %lnhi4 = load i64*, i64** %Sp_Var
  %lnhi5 = getelementptr inbounds i64, i64* %lnhi4, i32 1
  %lnhi6 = bitcast i64* %lnhi5 to double*
  %lnhi7 = load double, double* %lnhi6, !tbaa !2
  %lnhi8 = load i64*, i64** %Sp_Var
  %lnhi9 = getelementptr inbounds i64, i64* %lnhi8, i32 2
  %lnhia = bitcast i64* %lnhi9 to double*
  %lnhib = load double, double* %lnhia, !tbaa !2
  %lnhie = load i64, i64* %R1_Var
  %lnhif = add i64 %lnhie, 7
  %lnhig = inttoptr i64 %lnhif to double*
  %lnhih = load double, double* %lnhig, !tbaa !4
  %lnhii = fmul double %lnhib, %lnhih
  %lnhij = fadd double %lnhi7, %lnhii
  store double %lnhij, double* %ls7PP
  %lnhil = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhik = load i64*, i64** %Hp_Var
  %lnhim = getelementptr inbounds i64, i64* %lnhik, i32 -1
  store i64 %lnhil, i64* %lnhim, !tbaa !3
  %lnhio = load double, double* %ls7PP
  %lnhin = load i64*, i64** %Hp_Var
  %lnhip = getelementptr inbounds i64, i64* %lnhin, i32 0
  %lnhiq = bitcast i64* %lnhip to double*
  store double %lnhio, double* %lnhiq, !tbaa !3
  %lnhis = load i64*, i64** %Hp_Var
  %lnhit = ptrtoint i64* %lnhis to i64
  %lnhiu = add i64 %lnhit, -7
  store i64 %lnhiu, i64* %R1_Var
  %lnhiv = load i64*, i64** %Sp_Var
  %lnhiw = getelementptr inbounds i64, i64* %lnhiv, i32 3
  %lnhix = ptrtoint i64* %lnhiw to i64
  %lnhiy = inttoptr i64 %lnhix to i64*
  store i64* %lnhiy, i64** %Sp_Var
  %lnhiz = load i64*, i64** %Sp_Var
  %lnhiA = getelementptr inbounds i64, i64* %lnhiz, i32 0
  %lnhiB = bitcast i64* %lnhiA to i64*
  %lnhiC = load i64, i64* %lnhiB, !tbaa !2
  %lnhiD = inttoptr i64 %lnhiC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhiE = load i64*, i64** %Sp_Var
  %lnhiF = load i64*, i64** %Hp_Var
  %lnhiG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhiD( i64* %Base_Arg, i64* %lnhiE, i64* %lnhiF, i64 %lnhiG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfia:
  %lnhiH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhiH, !tbaa !5
  %lnhiI = load i64, i64* %R1_Var
  store i64 %lnhiI, i64* %R1_Var
  %lnhiJ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhiK = load i64*, i64** %Sp_Var
  %lnhiL = load i64*, i64** %Hp_Var
  %lnhiM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhiJ( i64* %Base_Arg, i64* %lnhiK, i64* %lnhiL, i64 %lnhiM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Pz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Pz_info$def to i8*)
define internal ghccc void @s7Pz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhiN:
  %ls7Pv = alloca i64, i32 1
  %ls7Pu = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfie
cfie:
  %lnhiO = load i64*, i64** %Sp_Var
  %lnhiP = getelementptr inbounds i64, i64* %lnhiO, i32 -7
  %lnhiQ = ptrtoint i64* %lnhiP to i64
  %lnhiR = icmp ult i64 %lnhiQ, %SpLim_Arg
  %lnhiS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhiR, i1 0 )
  br i1 %lnhiS, label %cfig, label %cfih
cfih:
  %lnhiU = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhiT = load i64*, i64** %Sp_Var
  %lnhiV = getelementptr inbounds i64, i64* %lnhiT, i32 -2
  store i64 %lnhiU, i64* %lnhiV, !tbaa !2
  %lnhiX = load i64, i64* %R1_Var
  %lnhiW = load i64*, i64** %Sp_Var
  %lnhiY = getelementptr inbounds i64, i64* %lnhiW, i32 -1
  store i64 %lnhiX, i64* %lnhiY, !tbaa !2
  %lnhj0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgh_info$def to i64
  %lnhiZ = load i64*, i64** %Sp_Var
  %lnhj1 = getelementptr inbounds i64, i64* %lnhiZ, i32 -5
  store i64 %lnhj0, i64* %lnhj1, !tbaa !2
  %lnhj4 = load i64, i64* %R1_Var
  %lnhj5 = add i64 %lnhj4, 16
  %lnhj6 = inttoptr i64 %lnhj5 to i64*
  %lnhj7 = load i64, i64* %lnhj6, !tbaa !4
  store i64 %lnhj7, i64* %ls7Pv
  %lnhja = load i64, i64* %R1_Var
  %lnhjb = add i64 %lnhja, 24
  %lnhjc = inttoptr i64 %lnhjb to i64*
  %lnhjd = load i64, i64* %lnhjc, !tbaa !4
  store i64 %lnhjd, i64* %ls7Pu
  %lnhjg = load i64, i64* %R1_Var
  %lnhjh = add i64 %lnhjg, 32
  %lnhji = inttoptr i64 %lnhjh to i64*
  %lnhjj = load i64, i64* %lnhji, !tbaa !4
  store i64 %lnhjj, i64* %R1_Var
  %lnhjl = load i64, i64* %ls7Pu
  %lnhjk = load i64*, i64** %Sp_Var
  %lnhjm = getelementptr inbounds i64, i64* %lnhjk, i32 -4
  store i64 %lnhjl, i64* %lnhjm, !tbaa !2
  %lnhjo = load i64, i64* %ls7Pv
  %lnhjn = load i64*, i64** %Sp_Var
  %lnhjp = getelementptr inbounds i64, i64* %lnhjn, i32 -3
  store i64 %lnhjo, i64* %lnhjp, !tbaa !2
  %lnhjq = load i64*, i64** %Sp_Var
  %lnhjr = getelementptr inbounds i64, i64* %lnhjq, i32 -5
  %lnhjs = ptrtoint i64* %lnhjr to i64
  %lnhjt = inttoptr i64 %lnhjs to i64*
  store i64* %lnhjt, i64** %Sp_Var
  %lnhju = load i64, i64* %R1_Var
  %lnhjv = and i64 %lnhju, 7
  %lnhjw = icmp ne i64 %lnhjv, 0
  br i1 %lnhjw, label %ufin, label %cfgi
cfgi:
  %lnhjy = load i64, i64* %R1_Var
  %lnhjz = inttoptr i64 %lnhjy to i64*
  %lnhjA = load i64, i64* %lnhjz, !tbaa !4
  %lnhjB = inttoptr i64 %lnhjA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhjC = load i64*, i64** %Sp_Var
  %lnhjD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhjB( i64* %Base_Arg, i64* %lnhjC, i64* %Hp_Arg, i64 %lnhjD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufin:
  %lnhjE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhjF = load i64*, i64** %Sp_Var
  %lnhjG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhjE( i64* %Base_Arg, i64* %lnhjF, i64* %Hp_Arg, i64 %lnhjG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfig:
  %lnhjH = load i64, i64* %R1_Var
  store i64 %lnhjH, i64* %R1_Var
  %lnhjI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhjJ = bitcast i64* %lnhjI to i64*
  %lnhjK = load i64, i64* %lnhjJ, !tbaa !5
  %lnhjL = inttoptr i64 %lnhjK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhjM = load i64*, i64** %Sp_Var
  %lnhjN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhjL( i64* %Base_Arg, i64* %lnhjM, i64* %Hp_Arg, i64 %lnhjN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfgh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgh_info$def to i8*)
define internal ghccc void @cfgh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhjO:
  %ls7PB = alloca i64, i32 1
  %ls7PC = alloca i64, i32 1
  %ls7PD = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfgh
cfgh:
  %lnhjQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgm_info$def to i64
  %lnhjP = load i64*, i64** %Sp_Var
  %lnhjR = getelementptr inbounds i64, i64* %lnhjP, i32 -2
  store i64 %lnhjQ, i64* %lnhjR, !tbaa !2
  %lnhjU = load i64, i64* %R1_Var
  %lnhjV = add i64 %lnhjU, 7
  %lnhjW = inttoptr i64 %lnhjV to i64*
  %lnhjX = load i64, i64* %lnhjW, !tbaa !4
  store i64 %lnhjX, i64* %ls7PB
  %lnhk0 = load i64, i64* %R1_Var
  %lnhk1 = add i64 %lnhk0, 15
  %lnhk2 = inttoptr i64 %lnhk1 to i64*
  %lnhk3 = load i64, i64* %lnhk2, !tbaa !4
  store i64 %lnhk3, i64* %ls7PC
  %lnhk6 = load i64, i64* %R1_Var
  %lnhk7 = add i64 %lnhk6, 23
  %lnhk8 = inttoptr i64 %lnhk7 to i64*
  %lnhk9 = load i64, i64* %lnhk8, !tbaa !4
  store i64 %lnhk9, i64* %ls7PD
  %lnhka = load i64*, i64** %Sp_Var
  %lnhkb = getelementptr inbounds i64, i64* %lnhka, i32 1
  %lnhkc = bitcast i64* %lnhkb to i64*
  %lnhkd = load i64, i64* %lnhkc, !tbaa !2
  store i64 %lnhkd, i64* %R1_Var
  %lnhkf = load i64, i64* %ls7PD
  %lnhke = load i64*, i64** %Sp_Var
  %lnhkg = getelementptr inbounds i64, i64* %lnhke, i32 -1
  store i64 %lnhkf, i64* %lnhkg, !tbaa !2
  %lnhki = load i64, i64* %ls7PC
  %lnhkh = load i64*, i64** %Sp_Var
  %lnhkj = getelementptr inbounds i64, i64* %lnhkh, i32 0
  store i64 %lnhki, i64* %lnhkj, !tbaa !2
  %lnhkl = load i64, i64* %ls7PB
  %lnhkk = load i64*, i64** %Sp_Var
  %lnhkm = getelementptr inbounds i64, i64* %lnhkk, i32 1
  store i64 %lnhkl, i64* %lnhkm, !tbaa !2
  %lnhkn = load i64*, i64** %Sp_Var
  %lnhko = getelementptr inbounds i64, i64* %lnhkn, i32 -2
  %lnhkp = ptrtoint i64* %lnhko to i64
  %lnhkq = inttoptr i64 %lnhkp to i64*
  store i64* %lnhkq, i64** %Sp_Var
  %lnhkr = load i64, i64* %R1_Var
  %lnhks = and i64 %lnhkr, 7
  %lnhkt = icmp ne i64 %lnhks, 0
  br i1 %lnhkt, label %ufim, label %cfgn
cfgn:
  %lnhkv = load i64, i64* %R1_Var
  %lnhkw = inttoptr i64 %lnhkv to i64*
  %lnhkx = load i64, i64* %lnhkw, !tbaa !4
  %lnhky = inttoptr i64 %lnhkx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhkz = load i64*, i64** %Sp_Var
  %lnhkA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhky( i64* %Base_Arg, i64* %lnhkz, i64* %Hp_Arg, i64 %lnhkA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufim:
  %lnhkB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhkC = load i64*, i64** %Sp_Var
  %lnhkD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhkB( i64* %Base_Arg, i64* %lnhkC, i64* %Hp_Arg, i64 %lnhkD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfgm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfgm_info$def to i8*)
define internal ghccc void @cfgm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nhkE:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7PF = alloca i64, i32 1
  %ls7PG = alloca i64, i32 1
  %ls7PH = alloca i64, i32 1
  %ls7Pv = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfgm
cfgm:
  %lnhkF = load i64*, i64** %Hp_Var
  %lnhkG = getelementptr inbounds i64, i64* %lnhkF, i32 19
  %lnhkH = ptrtoint i64* %lnhkG to i64
  %lnhkI = inttoptr i64 %lnhkH to i64*
  store i64* %lnhkI, i64** %Hp_Var
  %lnhkJ = load i64*, i64** %Hp_Var
  %lnhkK = ptrtoint i64* %lnhkJ to i64
  %lnhkL = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhkM = bitcast i64* %lnhkL to i64*
  %lnhkN = load i64, i64* %lnhkM, !tbaa !5
  %lnhkO = icmp ugt i64 %lnhkK, %lnhkN
  %lnhkP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhkO, i1 0 )
  br i1 %lnhkP, label %cfil, label %cfik
cfik:
  %lnhkS = load i64, i64* %R1_Var
  %lnhkT = add i64 %lnhkS, 7
  %lnhkU = inttoptr i64 %lnhkT to i64*
  %lnhkV = load i64, i64* %lnhkU, !tbaa !4
  store i64 %lnhkV, i64* %ls7PF
  %lnhkY = load i64, i64* %R1_Var
  %lnhkZ = add i64 %lnhkY, 15
  %lnhl0 = inttoptr i64 %lnhkZ to i64*
  %lnhl1 = load i64, i64* %lnhl0, !tbaa !4
  store i64 %lnhl1, i64* %ls7PG
  %lnhl4 = load i64, i64* %R1_Var
  %lnhl5 = add i64 %lnhl4, 23
  %lnhl6 = inttoptr i64 %lnhl5 to i64*
  %lnhl7 = load i64, i64* %lnhl6, !tbaa !4
  store i64 %lnhl7, i64* %ls7PH
  %lnhl9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Q8_info$def to i64
  %lnhl8 = load i64*, i64** %Hp_Var
  %lnhla = getelementptr inbounds i64, i64* %lnhl8, i32 -18
  store i64 %lnhl9, i64* %lnhla, !tbaa !3
  %lnhlc = load i64, i64* %ls7PH
  %lnhlb = load i64*, i64** %Hp_Var
  %lnhld = getelementptr inbounds i64, i64* %lnhlb, i32 -16
  store i64 %lnhlc, i64* %lnhld, !tbaa !3
  %lnhle = load i64*, i64** %Sp_Var
  %lnhlf = getelementptr inbounds i64, i64* %lnhle, i32 4
  %lnhlg = bitcast i64* %lnhlf to i64*
  %lnhlh = load i64, i64* %lnhlg, !tbaa !2
  store i64 %lnhlh, i64* %ls7Pv
  %lnhlj = load i64, i64* %ls7Pv
  %lnhli = load i64*, i64** %Hp_Var
  %lnhlk = getelementptr inbounds i64, i64* %lnhli, i32 -15
  store i64 %lnhlj, i64* %lnhlk, !tbaa !3
  %lnhlm = load i64*, i64** %Sp_Var
  %lnhln = getelementptr inbounds i64, i64* %lnhlm, i32 1
  %lnhlo = bitcast i64* %lnhln to i64*
  %lnhlp = load i64, i64* %lnhlo, !tbaa !2
  %lnhll = load i64*, i64** %Hp_Var
  %lnhlq = getelementptr inbounds i64, i64* %lnhll, i32 -14
  store i64 %lnhlp, i64* %lnhlq, !tbaa !3
  %lnhls = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7PZ_info$def to i64
  %lnhlr = load i64*, i64** %Hp_Var
  %lnhlt = getelementptr inbounds i64, i64* %lnhlr, i32 -13
  store i64 %lnhls, i64* %lnhlt, !tbaa !3
  %lnhlv = load i64, i64* %ls7PG
  %lnhlu = load i64*, i64** %Hp_Var
  %lnhlw = getelementptr inbounds i64, i64* %lnhlu, i32 -11
  store i64 %lnhlv, i64* %lnhlw, !tbaa !3
  %lnhly = load i64, i64* %ls7Pv
  %lnhlx = load i64*, i64** %Hp_Var
  %lnhlz = getelementptr inbounds i64, i64* %lnhlx, i32 -10
  store i64 %lnhly, i64* %lnhlz, !tbaa !3
  %lnhlB = load i64*, i64** %Sp_Var
  %lnhlC = getelementptr inbounds i64, i64* %lnhlB, i32 2
  %lnhlD = bitcast i64* %lnhlC to i64*
  %lnhlE = load i64, i64* %lnhlD, !tbaa !2
  %lnhlA = load i64*, i64** %Hp_Var
  %lnhlF = getelementptr inbounds i64, i64* %lnhlA, i32 -9
  store i64 %lnhlE, i64* %lnhlF, !tbaa !3
  %lnhlH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7PQ_info$def to i64
  %lnhlG = load i64*, i64** %Hp_Var
  %lnhlI = getelementptr inbounds i64, i64* %lnhlG, i32 -8
  store i64 %lnhlH, i64* %lnhlI, !tbaa !3
  %lnhlK = load i64, i64* %ls7PF
  %lnhlJ = load i64*, i64** %Hp_Var
  %lnhlL = getelementptr inbounds i64, i64* %lnhlJ, i32 -6
  store i64 %lnhlK, i64* %lnhlL, !tbaa !3
  %lnhlN = load i64, i64* %ls7Pv
  %lnhlM = load i64*, i64** %Hp_Var
  %lnhlO = getelementptr inbounds i64, i64* %lnhlM, i32 -5
  store i64 %lnhlN, i64* %lnhlO, !tbaa !3
  %lnhlQ = load i64*, i64** %Sp_Var
  %lnhlR = getelementptr inbounds i64, i64* %lnhlQ, i32 3
  %lnhlS = bitcast i64* %lnhlR to i64*
  %lnhlT = load i64, i64* %lnhlS, !tbaa !2
  %lnhlP = load i64*, i64** %Hp_Var
  %lnhlU = getelementptr inbounds i64, i64* %lnhlP, i32 -4
  store i64 %lnhlT, i64* %lnhlU, !tbaa !3
  %lnhlW = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnhlV = load i64*, i64** %Hp_Var
  %lnhlX = getelementptr inbounds i64, i64* %lnhlV, i32 -3
  store i64 %lnhlW, i64* %lnhlX, !tbaa !3
  %lnhlZ = load i64*, i64** %Hp_Var
  %lnhm0 = getelementptr inbounds i64, i64* %lnhlZ, i32 -8
  %lnhm1 = ptrtoint i64* %lnhm0 to i64
  %lnhlY = load i64*, i64** %Hp_Var
  %lnhm2 = getelementptr inbounds i64, i64* %lnhlY, i32 -2
  store i64 %lnhm1, i64* %lnhm2, !tbaa !3
  %lnhm4 = load i64*, i64** %Hp_Var
  %lnhm5 = getelementptr inbounds i64, i64* %lnhm4, i32 -13
  %lnhm6 = ptrtoint i64* %lnhm5 to i64
  %lnhm3 = load i64*, i64** %Hp_Var
  %lnhm7 = getelementptr inbounds i64, i64* %lnhm3, i32 -1
  store i64 %lnhm6, i64* %lnhm7, !tbaa !3
  %lnhm9 = load i64*, i64** %Hp_Var
  %lnhma = getelementptr inbounds i64, i64* %lnhm9, i32 -18
  %lnhmb = ptrtoint i64* %lnhma to i64
  %lnhm8 = load i64*, i64** %Hp_Var
  %lnhmc = getelementptr inbounds i64, i64* %lnhm8, i32 0
  store i64 %lnhmb, i64* %lnhmc, !tbaa !3
  %lnhme = load i64*, i64** %Hp_Var
  %lnhmf = ptrtoint i64* %lnhme to i64
  %lnhmg = add i64 %lnhmf, -23
  store i64 %lnhmg, i64* %R1_Var
  %lnhmh = load i64*, i64** %Sp_Var
  %lnhmi = getelementptr inbounds i64, i64* %lnhmh, i32 5
  %lnhmj = ptrtoint i64* %lnhmi to i64
  %lnhmk = inttoptr i64 %lnhmj to i64*
  store i64* %lnhmk, i64** %Sp_Var
  %lnhml = load i64*, i64** %Sp_Var
  %lnhmm = getelementptr inbounds i64, i64* %lnhml, i32 0
  %lnhmn = bitcast i64* %lnhmm to i64*
  %lnhmo = load i64, i64* %lnhmn, !tbaa !2
  %lnhmp = inttoptr i64 %lnhmo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhmq = load i64*, i64** %Sp_Var
  %lnhmr = load i64*, i64** %Hp_Var
  %lnhms = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhmp( i64* %Base_Arg, i64* %lnhmq, i64* %lnhmr, i64 %lnhms, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfil:
  %lnhmt = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 152, i64* %lnhmt, !tbaa !5
  %lnhmu = load i64, i64* %R1_Var
  store i64 %lnhmu, i64* %R1_Var
  %lnhmv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhmw = load i64*, i64** %Sp_Var
  %lnhmx = load i64*, i64** %Hp_Var
  %lnhmy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhmv( i64* %Base_Arg, i64* %lnhmw, i64* %lnhmx, i64 %lnhmy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Qi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Qi_info$def to i8*)
define internal ghccc void @s7Qi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
nhmz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfiH
cfiH:
  %lnhmA = load i64*, i64** %Sp_Var
  %lnhmB = getelementptr inbounds i64, i64* %lnhmA, i32 -3
  %lnhmC = ptrtoint i64* %lnhmB to i64
  %lnhmD = icmp ult i64 %lnhmC, %SpLim_Arg
  %lnhmE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhmD, i1 0 )
  br i1 %lnhmE, label %cfiO, label %cfiP
cfiP:
  %lnhmG = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhmF = load i64*, i64** %Sp_Var
  %lnhmH = getelementptr inbounds i64, i64* %lnhmF, i32 -2
  store i64 %lnhmG, i64* %lnhmH, !tbaa !2
  %lnhmJ = load i64, i64* %R1_Var
  %lnhmI = load i64*, i64** %Sp_Var
  %lnhmK = getelementptr inbounds i64, i64* %lnhmI, i32 -1
  store i64 %lnhmJ, i64* %lnhmK, !tbaa !2
  %lnhmM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiE_info$def to i64
  %lnhmL = load i64*, i64** %Sp_Var
  %lnhmN = getelementptr inbounds i64, i64* %lnhmL, i32 -3
  store i64 %lnhmM, i64* %lnhmN, !tbaa !2
  %lnhmQ = load i64, i64* %R1_Var
  %lnhmR = add i64 %lnhmQ, 16
  %lnhmS = inttoptr i64 %lnhmR to i64*
  %lnhmT = load i64, i64* %lnhmS, !tbaa !4
  store i64 %lnhmT, i64* %R1_Var
  %lnhmU = load i64*, i64** %Sp_Var
  %lnhmV = getelementptr inbounds i64, i64* %lnhmU, i32 -3
  %lnhmW = ptrtoint i64* %lnhmV to i64
  %lnhmX = inttoptr i64 %lnhmW to i64*
  store i64* %lnhmX, i64** %Sp_Var
  %lnhmY = load i64, i64* %R1_Var
  %lnhmZ = and i64 %lnhmY, 7
  %lnhn0 = icmp ne i64 %lnhmZ, 0
  br i1 %lnhn0, label %ufiT, label %cfiF
cfiF:
  %lnhn2 = load i64, i64* %R1_Var
  %lnhn3 = inttoptr i64 %lnhn2 to i64*
  %lnhn4 = load i64, i64* %lnhn3, !tbaa !4
  %lnhn5 = inttoptr i64 %lnhn4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhn6 = load i64*, i64** %Sp_Var
  %lnhn7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhn5( i64* %Base_Arg, i64* %lnhn6, i64* %Hp_Arg, i64 %lnhn7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufiT:
  %lnhn8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhn9 = load i64*, i64** %Sp_Var
  %lnhna = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhn8( i64* %Base_Arg, i64* %lnhn9, i64* %Hp_Arg, i64 %lnhna, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfiO:
  %lnhnb = load i64, i64* %R1_Var
  store i64 %lnhnb, i64* %R1_Var
  %lnhnc = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhnd = bitcast i64* %lnhnc to i64*
  %lnhne = load i64, i64* %lnhnd, !tbaa !5
  %lnhnf = inttoptr i64 %lnhne to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhng = load i64*, i64** %Sp_Var
  %lnhnh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhnf( i64* %Base_Arg, i64* %lnhng, i64* %Hp_Arg, i64 %lnhnh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfiE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiE_info$def to i8*)
define internal ghccc void @cfiE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
nhni:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ql = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfiE
cfiE:
  %lnhnj = load i64*, i64** %Hp_Var
  %lnhnk = getelementptr inbounds i64, i64* %lnhnj, i32 2
  %lnhnl = ptrtoint i64* %lnhnk to i64
  %lnhnm = inttoptr i64 %lnhnl to i64*
  store i64* %lnhnm, i64** %Hp_Var
  %lnhnn = load i64*, i64** %Hp_Var
  %lnhno = ptrtoint i64* %lnhnn to i64
  %lnhnp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhnq = bitcast i64* %lnhnp to i64*
  %lnhnr = load i64, i64* %lnhnq, !tbaa !5
  %lnhns = icmp ugt i64 %lnhno, %lnhnr
  %lnhnt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhns, i1 0 )
  br i1 %lnhnt, label %cfiS, label %cfiR
cfiR:
  %lnhnw = load i64, i64* %R1_Var
  %lnhnx = add i64 %lnhnw, 7
  %lnhny = inttoptr i64 %lnhnx to double*
  %lnhnz = load double, double* %lnhny, !tbaa !4
  %lnhnA = fdiv double 0x3FF0000000000000, %lnhnz
  store double %lnhnA, double* %ls7Ql
  %lnhnC = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhnB = load i64*, i64** %Hp_Var
  %lnhnD = getelementptr inbounds i64, i64* %lnhnB, i32 -1
  store i64 %lnhnC, i64* %lnhnD, !tbaa !3
  %lnhnF = load double, double* %ls7Ql
  %lnhnE = load i64*, i64** %Hp_Var
  %lnhnG = getelementptr inbounds i64, i64* %lnhnE, i32 0
  %lnhnH = bitcast i64* %lnhnG to double*
  store double %lnhnF, double* %lnhnH, !tbaa !3
  %lnhnJ = load i64*, i64** %Hp_Var
  %lnhnK = ptrtoint i64* %lnhnJ to i64
  %lnhnL = add i64 %lnhnK, -7
  store i64 %lnhnL, i64* %R1_Var
  %lnhnM = load i64*, i64** %Sp_Var
  %lnhnN = getelementptr inbounds i64, i64* %lnhnM, i32 1
  %lnhnO = ptrtoint i64* %lnhnN to i64
  %lnhnP = inttoptr i64 %lnhnO to i64*
  store i64* %lnhnP, i64** %Sp_Var
  %lnhnQ = load i64*, i64** %Sp_Var
  %lnhnR = getelementptr inbounds i64, i64* %lnhnQ, i32 0
  %lnhnS = bitcast i64* %lnhnR to i64*
  %lnhnT = load i64, i64* %lnhnS, !tbaa !2
  %lnhnU = inttoptr i64 %lnhnT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhnV = load i64*, i64** %Sp_Var
  %lnhnW = load i64*, i64** %Hp_Var
  %lnhnX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhnU( i64* %Base_Arg, i64* %lnhnV, i64* %lnhnW, i64 %lnhnX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfiS:
  %lnhnY = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhnY, !tbaa !5
  %lnhnZ = load i64, i64* %R1_Var
  store i64 %lnhnZ, i64* %R1_Var
  %lnho0 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnho1 = load i64*, i64** %Sp_Var
  %lnho2 = load i64*, i64** %Hp_Var
  %lnho3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnho0( i64* %Base_Arg, i64* %lnho1, i64* %lnho2, i64 %lnho3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7QM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QM_info$def to i8*)
define internal ghccc void @s7QM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nho4:
  %ls7Qh = alloca i64, i32 1
  %ls7Qd = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfj1
cfj1:
  %lnho5 = load i64*, i64** %Sp_Var
  %lnho6 = getelementptr inbounds i64, i64* %lnho5, i32 -5
  %lnho7 = ptrtoint i64* %lnho6 to i64
  %lnho8 = icmp ult i64 %lnho7, %SpLim_Arg
  %lnho9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnho8, i1 0 )
  br i1 %lnho9, label %cfjl, label %cfjm
cfjm:
  %lnhob = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhoa = load i64*, i64** %Sp_Var
  %lnhoc = getelementptr inbounds i64, i64* %lnhoa, i32 -2
  store i64 %lnhob, i64* %lnhoc, !tbaa !2
  %lnhoe = load i64, i64* %R1_Var
  %lnhod = load i64*, i64** %Sp_Var
  %lnhof = getelementptr inbounds i64, i64* %lnhod, i32 -1
  store i64 %lnhoe, i64* %lnhof, !tbaa !2
  %lnhoh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiY_info$def to i64
  %lnhog = load i64*, i64** %Sp_Var
  %lnhoi = getelementptr inbounds i64, i64* %lnhog, i32 -5
  store i64 %lnhoh, i64* %lnhoi, !tbaa !2
  %lnhol = load i64, i64* %R1_Var
  %lnhom = add i64 %lnhol, 16
  %lnhon = inttoptr i64 %lnhom to i64*
  %lnhoo = load i64, i64* %lnhon, !tbaa !4
  store i64 %lnhoo, i64* %ls7Qh
  %lnhor = load i64, i64* %R1_Var
  %lnhos = add i64 %lnhor, 24
  %lnhot = inttoptr i64 %lnhos to i64*
  %lnhou = load i64, i64* %lnhot, !tbaa !4
  store i64 %lnhou, i64* %ls7Qd
  %lnhox = load i64, i64* %R1_Var
  %lnhoy = add i64 %lnhox, 32
  %lnhoz = inttoptr i64 %lnhoy to i64*
  %lnhoA = load i64, i64* %lnhoz, !tbaa !4
  store i64 %lnhoA, i64* %R1_Var
  %lnhoC = load i64, i64* %ls7Qd
  %lnhoB = load i64*, i64** %Sp_Var
  %lnhoD = getelementptr inbounds i64, i64* %lnhoB, i32 -4
  store i64 %lnhoC, i64* %lnhoD, !tbaa !2
  %lnhoF = load i64, i64* %ls7Qh
  %lnhoE = load i64*, i64** %Sp_Var
  %lnhoG = getelementptr inbounds i64, i64* %lnhoE, i32 -3
  store i64 %lnhoF, i64* %lnhoG, !tbaa !2
  %lnhoH = load i64*, i64** %Sp_Var
  %lnhoI = getelementptr inbounds i64, i64* %lnhoH, i32 -5
  %lnhoJ = ptrtoint i64* %lnhoI to i64
  %lnhoK = inttoptr i64 %lnhoJ to i64*
  store i64* %lnhoK, i64** %Sp_Var
  %lnhoL = load i64, i64* %R1_Var
  %lnhoM = and i64 %lnhoL, 7
  %lnhoN = icmp ne i64 %lnhoM, 0
  br i1 %lnhoN, label %ufjt, label %cfiZ
cfiZ:
  %lnhoP = load i64, i64* %R1_Var
  %lnhoQ = inttoptr i64 %lnhoP to i64*
  %lnhoR = load i64, i64* %lnhoQ, !tbaa !4
  %lnhoS = inttoptr i64 %lnhoR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhoT = load i64*, i64** %Sp_Var
  %lnhoU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhoS( i64* %Base_Arg, i64* %lnhoT, i64* %Hp_Arg, i64 %lnhoU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufjt:
  %lnhoV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhoW = load i64*, i64** %Sp_Var
  %lnhoX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhoV( i64* %Base_Arg, i64* %lnhoW, i64* %Hp_Arg, i64 %lnhoX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfjl:
  %lnhoY = load i64, i64* %R1_Var
  store i64 %lnhoY, i64* %R1_Var
  %lnhoZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhp0 = bitcast i64* %lnhoZ to i64*
  %lnhp1 = load i64, i64* %lnhp0, !tbaa !5
  %lnhp2 = inttoptr i64 %lnhp1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhp3 = load i64*, i64** %Sp_Var
  %lnhp4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhp2( i64* %Base_Arg, i64* %lnhp3, i64* %Hp_Arg, i64 %lnhp4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfiY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiY_info$def to i8*)
define internal ghccc void @cfiY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhp5:
  %ls7QF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfiY
cfiY:
  %lnhp6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj4_info$def to i64
  %lnhp7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhp6, i64* %lnhp7, !tbaa !2
  %lnhpa = load i64, i64* %R1_Var
  %lnhpb = add i64 %lnhpa, 7
  %lnhpc = inttoptr i64 %lnhpb to double*
  %lnhpd = load double, double* %lnhpc, !tbaa !4
  store double %lnhpd, double* %ls7QF
  %lnhpe = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhpf = bitcast i64* %lnhpe to i64*
  %lnhpg = load i64, i64* %lnhpf, !tbaa !2
  store i64 %lnhpg, i64* %R1_Var
  %lnhph = load double, double* %ls7QF
  %lnhpi = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhpj = bitcast i64* %lnhpi to double*
  store double %lnhph, double* %lnhpj, !tbaa !2
  %lnhpk = load i64, i64* %R1_Var
  %lnhpl = and i64 %lnhpk, 7
  %lnhpm = icmp ne i64 %lnhpl, 0
  br i1 %lnhpm, label %ufjs, label %cfj5
cfj5:
  %lnhpo = load i64, i64* %R1_Var
  %lnhpp = inttoptr i64 %lnhpo to i64*
  %lnhpq = load i64, i64* %lnhpp, !tbaa !4
  %lnhpr = inttoptr i64 %lnhpq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhps = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhpr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhps, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufjs:
  %lnhpt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhpu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhpt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhpu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfj4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj4_info$def to i8*)
define internal ghccc void @cfj4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhpv:
  %ls7QH = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfj4
cfj4:
  %lnhpw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj9_info$def to i64
  %lnhpx = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhpw, i64* %lnhpx, !tbaa !2
  %lnhpA = load i64, i64* %R1_Var
  %lnhpB = add i64 %lnhpA, 7
  %lnhpC = inttoptr i64 %lnhpB to double*
  %lnhpD = load double, double* %lnhpC, !tbaa !4
  store double %lnhpD, double* %ls7QH
  %lnhpE = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhpF = bitcast i64* %lnhpE to i64*
  %lnhpG = load i64, i64* %lnhpF, !tbaa !2
  store i64 %lnhpG, i64* %R1_Var
  %lnhpH = load double, double* %ls7QH
  %lnhpI = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhpJ = bitcast i64* %lnhpI to double*
  store double %lnhpH, double* %lnhpJ, !tbaa !2
  %lnhpK = load i64, i64* %R1_Var
  %lnhpL = and i64 %lnhpK, 7
  %lnhpM = icmp ne i64 %lnhpL, 0
  br i1 %lnhpM, label %ufju, label %cfja
cfja:
  %lnhpO = load i64, i64* %R1_Var
  %lnhpP = inttoptr i64 %lnhpO to i64*
  %lnhpQ = load i64, i64* %lnhpP, !tbaa !4
  %lnhpR = inttoptr i64 %lnhpQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhpS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhpR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhpS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufju:
  %lnhpT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhpU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhpT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhpU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfj9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfj9_info$def to i8*)
define internal ghccc void @cfj9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhpV:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7QL = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfj9
cfj9:
  %lnhpW = load i64*, i64** %Hp_Var
  %lnhpX = getelementptr inbounds i64, i64* %lnhpW, i32 2
  %lnhpY = ptrtoint i64* %lnhpX to i64
  %lnhpZ = inttoptr i64 %lnhpY to i64*
  store i64* %lnhpZ, i64** %Hp_Var
  %lnhq0 = load i64*, i64** %Hp_Var
  %lnhq1 = ptrtoint i64* %lnhq0 to i64
  %lnhq2 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhq3 = bitcast i64* %lnhq2 to i64*
  %lnhq4 = load i64, i64* %lnhq3, !tbaa !5
  %lnhq5 = icmp ugt i64 %lnhq1, %lnhq4
  %lnhq6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhq5, i1 0 )
  br i1 %lnhq6, label %cfjr, label %cfjq
cfjq:
  %lnhq7 = load i64*, i64** %Sp_Var
  %lnhq8 = getelementptr inbounds i64, i64* %lnhq7, i32 1
  %lnhq9 = bitcast i64* %lnhq8 to double*
  %lnhqa = load double, double* %lnhq9, !tbaa !2
  %lnhqb = load i64*, i64** %Sp_Var
  %lnhqc = getelementptr inbounds i64, i64* %lnhqb, i32 2
  %lnhqd = bitcast i64* %lnhqc to double*
  %lnhqe = load double, double* %lnhqd, !tbaa !2
  %lnhqh = load i64, i64* %R1_Var
  %lnhqi = add i64 %lnhqh, 7
  %lnhqj = inttoptr i64 %lnhqi to double*
  %lnhqk = load double, double* %lnhqj, !tbaa !4
  %lnhql = fsub double %lnhqe, %lnhqk
  %lnhqm = fmul double %lnhqa, %lnhql
  store double %lnhqm, double* %ls7QL
  %lnhqo = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhqn = load i64*, i64** %Hp_Var
  %lnhqp = getelementptr inbounds i64, i64* %lnhqn, i32 -1
  store i64 %lnhqo, i64* %lnhqp, !tbaa !3
  %lnhqr = load double, double* %ls7QL
  %lnhqq = load i64*, i64** %Hp_Var
  %lnhqs = getelementptr inbounds i64, i64* %lnhqq, i32 0
  %lnhqt = bitcast i64* %lnhqs to double*
  store double %lnhqr, double* %lnhqt, !tbaa !3
  %lnhqv = load i64*, i64** %Hp_Var
  %lnhqw = ptrtoint i64* %lnhqv to i64
  %lnhqx = add i64 %lnhqw, -7
  store i64 %lnhqx, i64* %R1_Var
  %lnhqy = load i64*, i64** %Sp_Var
  %lnhqz = getelementptr inbounds i64, i64* %lnhqy, i32 3
  %lnhqA = ptrtoint i64* %lnhqz to i64
  %lnhqB = inttoptr i64 %lnhqA to i64*
  store i64* %lnhqB, i64** %Sp_Var
  %lnhqC = load i64*, i64** %Sp_Var
  %lnhqD = getelementptr inbounds i64, i64* %lnhqC, i32 0
  %lnhqE = bitcast i64* %lnhqD to i64*
  %lnhqF = load i64, i64* %lnhqE, !tbaa !2
  %lnhqG = inttoptr i64 %lnhqF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhqH = load i64*, i64** %Sp_Var
  %lnhqI = load i64*, i64** %Hp_Var
  %lnhqJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhqG( i64* %Base_Arg, i64* %lnhqH, i64* %lnhqI, i64 %lnhqJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfjr:
  %lnhqK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhqK, !tbaa !5
  %lnhqL = load i64, i64* %R1_Var
  store i64 %lnhqL, i64* %R1_Var
  %lnhqM = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhqN = load i64*, i64** %Sp_Var
  %lnhqO = load i64*, i64** %Hp_Var
  %lnhqP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhqM( i64* %Base_Arg, i64* %lnhqN, i64* %lnhqO, i64 %lnhqP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7QD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QD_info$def to i8*)
define internal ghccc void @s7QD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhqQ:
  %ls7Qg = alloca i64, i32 1
  %ls7Qc = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfjC
cfjC:
  %lnhqR = load i64*, i64** %Sp_Var
  %lnhqS = getelementptr inbounds i64, i64* %lnhqR, i32 -5
  %lnhqT = ptrtoint i64* %lnhqS to i64
  %lnhqU = icmp ult i64 %lnhqT, %SpLim_Arg
  %lnhqV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhqU, i1 0 )
  br i1 %lnhqV, label %cfjW, label %cfjX
cfjX:
  %lnhqX = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhqW = load i64*, i64** %Sp_Var
  %lnhqY = getelementptr inbounds i64, i64* %lnhqW, i32 -2
  store i64 %lnhqX, i64* %lnhqY, !tbaa !2
  %lnhr0 = load i64, i64* %R1_Var
  %lnhqZ = load i64*, i64** %Sp_Var
  %lnhr1 = getelementptr inbounds i64, i64* %lnhqZ, i32 -1
  store i64 %lnhr0, i64* %lnhr1, !tbaa !2
  %lnhr3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjz_info$def to i64
  %lnhr2 = load i64*, i64** %Sp_Var
  %lnhr4 = getelementptr inbounds i64, i64* %lnhr2, i32 -5
  store i64 %lnhr3, i64* %lnhr4, !tbaa !2
  %lnhr7 = load i64, i64* %R1_Var
  %lnhr8 = add i64 %lnhr7, 16
  %lnhr9 = inttoptr i64 %lnhr8 to i64*
  %lnhra = load i64, i64* %lnhr9, !tbaa !4
  store i64 %lnhra, i64* %ls7Qg
  %lnhrd = load i64, i64* %R1_Var
  %lnhre = add i64 %lnhrd, 24
  %lnhrf = inttoptr i64 %lnhre to i64*
  %lnhrg = load i64, i64* %lnhrf, !tbaa !4
  store i64 %lnhrg, i64* %ls7Qc
  %lnhrj = load i64, i64* %R1_Var
  %lnhrk = add i64 %lnhrj, 32
  %lnhrl = inttoptr i64 %lnhrk to i64*
  %lnhrm = load i64, i64* %lnhrl, !tbaa !4
  store i64 %lnhrm, i64* %R1_Var
  %lnhro = load i64, i64* %ls7Qc
  %lnhrn = load i64*, i64** %Sp_Var
  %lnhrp = getelementptr inbounds i64, i64* %lnhrn, i32 -4
  store i64 %lnhro, i64* %lnhrp, !tbaa !2
  %lnhrr = load i64, i64* %ls7Qg
  %lnhrq = load i64*, i64** %Sp_Var
  %lnhrs = getelementptr inbounds i64, i64* %lnhrq, i32 -3
  store i64 %lnhrr, i64* %lnhrs, !tbaa !2
  %lnhrt = load i64*, i64** %Sp_Var
  %lnhru = getelementptr inbounds i64, i64* %lnhrt, i32 -5
  %lnhrv = ptrtoint i64* %lnhru to i64
  %lnhrw = inttoptr i64 %lnhrv to i64*
  store i64* %lnhrw, i64** %Sp_Var
  %lnhrx = load i64, i64* %R1_Var
  %lnhry = and i64 %lnhrx, 7
  %lnhrz = icmp ne i64 %lnhry, 0
  br i1 %lnhrz, label %ufk4, label %cfjA
cfjA:
  %lnhrB = load i64, i64* %R1_Var
  %lnhrC = inttoptr i64 %lnhrB to i64*
  %lnhrD = load i64, i64* %lnhrC, !tbaa !4
  %lnhrE = inttoptr i64 %lnhrD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhrF = load i64*, i64** %Sp_Var
  %lnhrG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhrE( i64* %Base_Arg, i64* %lnhrF, i64* %Hp_Arg, i64 %lnhrG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufk4:
  %lnhrH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhrI = load i64*, i64** %Sp_Var
  %lnhrJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhrH( i64* %Base_Arg, i64* %lnhrI, i64* %Hp_Arg, i64 %lnhrJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfjW:
  %lnhrK = load i64, i64* %R1_Var
  store i64 %lnhrK, i64* %R1_Var
  %lnhrL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhrM = bitcast i64* %lnhrL to i64*
  %lnhrN = load i64, i64* %lnhrM, !tbaa !5
  %lnhrO = inttoptr i64 %lnhrN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhrP = load i64*, i64** %Sp_Var
  %lnhrQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhrO( i64* %Base_Arg, i64* %lnhrP, i64* %Hp_Arg, i64 %lnhrQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfjz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjz_info$def to i8*)
define internal ghccc void @cfjz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhrR:
  %ls7Qw = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfjz
cfjz:
  %lnhrS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjF_info$def to i64
  %lnhrT = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhrS, i64* %lnhrT, !tbaa !2
  %lnhrW = load i64, i64* %R1_Var
  %lnhrX = add i64 %lnhrW, 7
  %lnhrY = inttoptr i64 %lnhrX to double*
  %lnhrZ = load double, double* %lnhrY, !tbaa !4
  store double %lnhrZ, double* %ls7Qw
  %lnhs0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhs1 = bitcast i64* %lnhs0 to i64*
  %lnhs2 = load i64, i64* %lnhs1, !tbaa !2
  store i64 %lnhs2, i64* %R1_Var
  %lnhs3 = load double, double* %ls7Qw
  %lnhs4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhs5 = bitcast i64* %lnhs4 to double*
  store double %lnhs3, double* %lnhs5, !tbaa !2
  %lnhs6 = load i64, i64* %R1_Var
  %lnhs7 = and i64 %lnhs6, 7
  %lnhs8 = icmp ne i64 %lnhs7, 0
  br i1 %lnhs8, label %ufk3, label %cfjG
cfjG:
  %lnhsa = load i64, i64* %R1_Var
  %lnhsb = inttoptr i64 %lnhsa to i64*
  %lnhsc = load i64, i64* %lnhsb, !tbaa !4
  %lnhsd = inttoptr i64 %lnhsc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhse = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhsd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhse, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufk3:
  %lnhsf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhsg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhsf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhsg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfjF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjF_info$def to i8*)
define internal ghccc void @cfjF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhsh:
  %ls7Qy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfjF
cfjF:
  %lnhsi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjK_info$def to i64
  %lnhsj = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhsi, i64* %lnhsj, !tbaa !2
  %lnhsm = load i64, i64* %R1_Var
  %lnhsn = add i64 %lnhsm, 7
  %lnhso = inttoptr i64 %lnhsn to double*
  %lnhsp = load double, double* %lnhso, !tbaa !4
  store double %lnhsp, double* %ls7Qy
  %lnhsq = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhsr = bitcast i64* %lnhsq to i64*
  %lnhss = load i64, i64* %lnhsr, !tbaa !2
  store i64 %lnhss, i64* %R1_Var
  %lnhst = load double, double* %ls7Qy
  %lnhsu = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhsv = bitcast i64* %lnhsu to double*
  store double %lnhst, double* %lnhsv, !tbaa !2
  %lnhsw = load i64, i64* %R1_Var
  %lnhsx = and i64 %lnhsw, 7
  %lnhsy = icmp ne i64 %lnhsx, 0
  br i1 %lnhsy, label %ufk5, label %cfjL
cfjL:
  %lnhsA = load i64, i64* %R1_Var
  %lnhsB = inttoptr i64 %lnhsA to i64*
  %lnhsC = load i64, i64* %lnhsB, !tbaa !4
  %lnhsD = inttoptr i64 %lnhsC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhsE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhsD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhsE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufk5:
  %lnhsF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhsG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhsF( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhsG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfjK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfjK_info$def to i8*)
define internal ghccc void @cfjK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhsH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7QC = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfjK
cfjK:
  %lnhsI = load i64*, i64** %Hp_Var
  %lnhsJ = getelementptr inbounds i64, i64* %lnhsI, i32 2
  %lnhsK = ptrtoint i64* %lnhsJ to i64
  %lnhsL = inttoptr i64 %lnhsK to i64*
  store i64* %lnhsL, i64** %Hp_Var
  %lnhsM = load i64*, i64** %Hp_Var
  %lnhsN = ptrtoint i64* %lnhsM to i64
  %lnhsO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhsP = bitcast i64* %lnhsO to i64*
  %lnhsQ = load i64, i64* %lnhsP, !tbaa !5
  %lnhsR = icmp ugt i64 %lnhsN, %lnhsQ
  %lnhsS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhsR, i1 0 )
  br i1 %lnhsS, label %cfk2, label %cfk1
cfk1:
  %lnhsT = load i64*, i64** %Sp_Var
  %lnhsU = getelementptr inbounds i64, i64* %lnhsT, i32 1
  %lnhsV = bitcast i64* %lnhsU to double*
  %lnhsW = load double, double* %lnhsV, !tbaa !2
  %lnhsX = load i64*, i64** %Sp_Var
  %lnhsY = getelementptr inbounds i64, i64* %lnhsX, i32 2
  %lnhsZ = bitcast i64* %lnhsY to double*
  %lnht0 = load double, double* %lnhsZ, !tbaa !2
  %lnht3 = load i64, i64* %R1_Var
  %lnht4 = add i64 %lnht3, 7
  %lnht5 = inttoptr i64 %lnht4 to double*
  %lnht6 = load double, double* %lnht5, !tbaa !4
  %lnht7 = fsub double %lnht0, %lnht6
  %lnht8 = fmul double %lnhsW, %lnht7
  store double %lnht8, double* %ls7QC
  %lnhta = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnht9 = load i64*, i64** %Hp_Var
  %lnhtb = getelementptr inbounds i64, i64* %lnht9, i32 -1
  store i64 %lnhta, i64* %lnhtb, !tbaa !3
  %lnhtd = load double, double* %ls7QC
  %lnhtc = load i64*, i64** %Hp_Var
  %lnhte = getelementptr inbounds i64, i64* %lnhtc, i32 0
  %lnhtf = bitcast i64* %lnhte to double*
  store double %lnhtd, double* %lnhtf, !tbaa !3
  %lnhth = load i64*, i64** %Hp_Var
  %lnhti = ptrtoint i64* %lnhth to i64
  %lnhtj = add i64 %lnhti, -7
  store i64 %lnhtj, i64* %R1_Var
  %lnhtk = load i64*, i64** %Sp_Var
  %lnhtl = getelementptr inbounds i64, i64* %lnhtk, i32 3
  %lnhtm = ptrtoint i64* %lnhtl to i64
  %lnhtn = inttoptr i64 %lnhtm to i64*
  store i64* %lnhtn, i64** %Sp_Var
  %lnhto = load i64*, i64** %Sp_Var
  %lnhtp = getelementptr inbounds i64, i64* %lnhto, i32 0
  %lnhtq = bitcast i64* %lnhtp to i64*
  %lnhtr = load i64, i64* %lnhtq, !tbaa !2
  %lnhts = inttoptr i64 %lnhtr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhtt = load i64*, i64** %Sp_Var
  %lnhtu = load i64*, i64** %Hp_Var
  %lnhtv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhts( i64* %Base_Arg, i64* %lnhtt, i64* %lnhtu, i64 %lnhtv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfk2:
  %lnhtw = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhtw, !tbaa !5
  %lnhtx = load i64, i64* %R1_Var
  store i64 %lnhtx, i64* %R1_Var
  %lnhty = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhtz = load i64*, i64** %Sp_Var
  %lnhtA = load i64*, i64** %Hp_Var
  %lnhtB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhty( i64* %Base_Arg, i64* %lnhtz, i64* %lnhtA, i64 %lnhtB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Qu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Qu_info$def to i8*)
define internal ghccc void @s7Qu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhtC:
  %ls7Qf = alloca i64, i32 1
  %ls7Qb = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfkd
cfkd:
  %lnhtD = load i64*, i64** %Sp_Var
  %lnhtE = getelementptr inbounds i64, i64* %lnhtD, i32 -5
  %lnhtF = ptrtoint i64* %lnhtE to i64
  %lnhtG = icmp ult i64 %lnhtF, %SpLim_Arg
  %lnhtH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhtG, i1 0 )
  br i1 %lnhtH, label %cfkx, label %cfky
cfky:
  %lnhtJ = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhtI = load i64*, i64** %Sp_Var
  %lnhtK = getelementptr inbounds i64, i64* %lnhtI, i32 -2
  store i64 %lnhtJ, i64* %lnhtK, !tbaa !2
  %lnhtM = load i64, i64* %R1_Var
  %lnhtL = load i64*, i64** %Sp_Var
  %lnhtN = getelementptr inbounds i64, i64* %lnhtL, i32 -1
  store i64 %lnhtM, i64* %lnhtN, !tbaa !2
  %lnhtP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfka_info$def to i64
  %lnhtO = load i64*, i64** %Sp_Var
  %lnhtQ = getelementptr inbounds i64, i64* %lnhtO, i32 -5
  store i64 %lnhtP, i64* %lnhtQ, !tbaa !2
  %lnhtT = load i64, i64* %R1_Var
  %lnhtU = add i64 %lnhtT, 16
  %lnhtV = inttoptr i64 %lnhtU to i64*
  %lnhtW = load i64, i64* %lnhtV, !tbaa !4
  store i64 %lnhtW, i64* %ls7Qf
  %lnhtZ = load i64, i64* %R1_Var
  %lnhu0 = add i64 %lnhtZ, 24
  %lnhu1 = inttoptr i64 %lnhu0 to i64*
  %lnhu2 = load i64, i64* %lnhu1, !tbaa !4
  store i64 %lnhu2, i64* %ls7Qb
  %lnhu5 = load i64, i64* %R1_Var
  %lnhu6 = add i64 %lnhu5, 32
  %lnhu7 = inttoptr i64 %lnhu6 to i64*
  %lnhu8 = load i64, i64* %lnhu7, !tbaa !4
  store i64 %lnhu8, i64* %R1_Var
  %lnhua = load i64, i64* %ls7Qb
  %lnhu9 = load i64*, i64** %Sp_Var
  %lnhub = getelementptr inbounds i64, i64* %lnhu9, i32 -4
  store i64 %lnhua, i64* %lnhub, !tbaa !2
  %lnhud = load i64, i64* %ls7Qf
  %lnhuc = load i64*, i64** %Sp_Var
  %lnhue = getelementptr inbounds i64, i64* %lnhuc, i32 -3
  store i64 %lnhud, i64* %lnhue, !tbaa !2
  %lnhuf = load i64*, i64** %Sp_Var
  %lnhug = getelementptr inbounds i64, i64* %lnhuf, i32 -5
  %lnhuh = ptrtoint i64* %lnhug to i64
  %lnhui = inttoptr i64 %lnhuh to i64*
  store i64* %lnhui, i64** %Sp_Var
  %lnhuj = load i64, i64* %R1_Var
  %lnhuk = and i64 %lnhuj, 7
  %lnhul = icmp ne i64 %lnhuk, 0
  br i1 %lnhul, label %ufkF, label %cfkb
cfkb:
  %lnhun = load i64, i64* %R1_Var
  %lnhuo = inttoptr i64 %lnhun to i64*
  %lnhup = load i64, i64* %lnhuo, !tbaa !4
  %lnhuq = inttoptr i64 %lnhup to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhur = load i64*, i64** %Sp_Var
  %lnhus = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhuq( i64* %Base_Arg, i64* %lnhur, i64* %Hp_Arg, i64 %lnhus, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufkF:
  %lnhut = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfka_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhuu = load i64*, i64** %Sp_Var
  %lnhuv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhut( i64* %Base_Arg, i64* %lnhuu, i64* %Hp_Arg, i64 %lnhuv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfkx:
  %lnhuw = load i64, i64* %R1_Var
  store i64 %lnhuw, i64* %R1_Var
  %lnhux = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhuy = bitcast i64* %lnhux to i64*
  %lnhuz = load i64, i64* %lnhuy, !tbaa !5
  %lnhuA = inttoptr i64 %lnhuz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhuB = load i64*, i64** %Sp_Var
  %lnhuC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhuA( i64* %Base_Arg, i64* %lnhuB, i64* %Hp_Arg, i64 %lnhuC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfka_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfka_info$def to i8*)
define internal ghccc void @cfka_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhuD:
  %ls7Qn = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfka
cfka:
  %lnhuE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkg_info$def to i64
  %lnhuF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhuE, i64* %lnhuF, !tbaa !2
  %lnhuI = load i64, i64* %R1_Var
  %lnhuJ = add i64 %lnhuI, 7
  %lnhuK = inttoptr i64 %lnhuJ to double*
  %lnhuL = load double, double* %lnhuK, !tbaa !4
  store double %lnhuL, double* %ls7Qn
  %lnhuM = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhuN = bitcast i64* %lnhuM to i64*
  %lnhuO = load i64, i64* %lnhuN, !tbaa !2
  store i64 %lnhuO, i64* %R1_Var
  %lnhuP = load double, double* %ls7Qn
  %lnhuQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhuR = bitcast i64* %lnhuQ to double*
  store double %lnhuP, double* %lnhuR, !tbaa !2
  %lnhuS = load i64, i64* %R1_Var
  %lnhuT = and i64 %lnhuS, 7
  %lnhuU = icmp ne i64 %lnhuT, 0
  br i1 %lnhuU, label %ufkE, label %cfkh
cfkh:
  %lnhuW = load i64, i64* %R1_Var
  %lnhuX = inttoptr i64 %lnhuW to i64*
  %lnhuY = load i64, i64* %lnhuX, !tbaa !4
  %lnhuZ = inttoptr i64 %lnhuY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhv0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhuZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhv0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufkE:
  %lnhv1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhv2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhv1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhv2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfkg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkg_info$def to i8*)
define internal ghccc void @cfkg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhv3:
  %ls7Qp = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfkg
cfkg:
  %lnhv4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkl_info$def to i64
  %lnhv5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhv4, i64* %lnhv5, !tbaa !2
  %lnhv8 = load i64, i64* %R1_Var
  %lnhv9 = add i64 %lnhv8, 7
  %lnhva = inttoptr i64 %lnhv9 to double*
  %lnhvb = load double, double* %lnhva, !tbaa !4
  store double %lnhvb, double* %ls7Qp
  %lnhvc = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhvd = bitcast i64* %lnhvc to i64*
  %lnhve = load i64, i64* %lnhvd, !tbaa !2
  store i64 %lnhve, i64* %R1_Var
  %lnhvf = load double, double* %ls7Qp
  %lnhvg = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhvh = bitcast i64* %lnhvg to double*
  store double %lnhvf, double* %lnhvh, !tbaa !2
  %lnhvi = load i64, i64* %R1_Var
  %lnhvj = and i64 %lnhvi, 7
  %lnhvk = icmp ne i64 %lnhvj, 0
  br i1 %lnhvk, label %ufkG, label %cfkm
cfkm:
  %lnhvm = load i64, i64* %R1_Var
  %lnhvn = inttoptr i64 %lnhvm to i64*
  %lnhvo = load i64, i64* %lnhvn, !tbaa !4
  %lnhvp = inttoptr i64 %lnhvo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhvq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhvp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhvq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufkG:
  %lnhvr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhvs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhvr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhvs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfkl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkl_info$def to i8*)
define internal ghccc void @cfkl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhvt:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Qt = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfkl
cfkl:
  %lnhvu = load i64*, i64** %Hp_Var
  %lnhvv = getelementptr inbounds i64, i64* %lnhvu, i32 2
  %lnhvw = ptrtoint i64* %lnhvv to i64
  %lnhvx = inttoptr i64 %lnhvw to i64*
  store i64* %lnhvx, i64** %Hp_Var
  %lnhvy = load i64*, i64** %Hp_Var
  %lnhvz = ptrtoint i64* %lnhvy to i64
  %lnhvA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhvB = bitcast i64* %lnhvA to i64*
  %lnhvC = load i64, i64* %lnhvB, !tbaa !5
  %lnhvD = icmp ugt i64 %lnhvz, %lnhvC
  %lnhvE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhvD, i1 0 )
  br i1 %lnhvE, label %cfkD, label %cfkC
cfkC:
  %lnhvF = load i64*, i64** %Sp_Var
  %lnhvG = getelementptr inbounds i64, i64* %lnhvF, i32 1
  %lnhvH = bitcast i64* %lnhvG to double*
  %lnhvI = load double, double* %lnhvH, !tbaa !2
  %lnhvJ = load i64*, i64** %Sp_Var
  %lnhvK = getelementptr inbounds i64, i64* %lnhvJ, i32 2
  %lnhvL = bitcast i64* %lnhvK to double*
  %lnhvM = load double, double* %lnhvL, !tbaa !2
  %lnhvP = load i64, i64* %R1_Var
  %lnhvQ = add i64 %lnhvP, 7
  %lnhvR = inttoptr i64 %lnhvQ to double*
  %lnhvS = load double, double* %lnhvR, !tbaa !4
  %lnhvT = fsub double %lnhvM, %lnhvS
  %lnhvU = fmul double %lnhvI, %lnhvT
  store double %lnhvU, double* %ls7Qt
  %lnhvW = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhvV = load i64*, i64** %Hp_Var
  %lnhvX = getelementptr inbounds i64, i64* %lnhvV, i32 -1
  store i64 %lnhvW, i64* %lnhvX, !tbaa !3
  %lnhvZ = load double, double* %ls7Qt
  %lnhvY = load i64*, i64** %Hp_Var
  %lnhw0 = getelementptr inbounds i64, i64* %lnhvY, i32 0
  %lnhw1 = bitcast i64* %lnhw0 to double*
  store double %lnhvZ, double* %lnhw1, !tbaa !3
  %lnhw3 = load i64*, i64** %Hp_Var
  %lnhw4 = ptrtoint i64* %lnhw3 to i64
  %lnhw5 = add i64 %lnhw4, -7
  store i64 %lnhw5, i64* %R1_Var
  %lnhw6 = load i64*, i64** %Sp_Var
  %lnhw7 = getelementptr inbounds i64, i64* %lnhw6, i32 3
  %lnhw8 = ptrtoint i64* %lnhw7 to i64
  %lnhw9 = inttoptr i64 %lnhw8 to i64*
  store i64* %lnhw9, i64** %Sp_Var
  %lnhwa = load i64*, i64** %Sp_Var
  %lnhwb = getelementptr inbounds i64, i64* %lnhwa, i32 0
  %lnhwc = bitcast i64* %lnhwb to i64*
  %lnhwd = load i64, i64* %lnhwc, !tbaa !2
  %lnhwe = inttoptr i64 %lnhwd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhwf = load i64*, i64** %Sp_Var
  %lnhwg = load i64*, i64** %Hp_Var
  %lnhwh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhwe( i64* %Base_Arg, i64* %lnhwf, i64* %lnhwg, i64 %lnhwh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfkD:
  %lnhwi = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhwi, !tbaa !5
  %lnhwj = load i64, i64* %R1_Var
  store i64 %lnhwj, i64* %R1_Var
  %lnhwk = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhwl = load i64*, i64** %Sp_Var
  %lnhwm = load i64*, i64** %Hp_Var
  %lnhwn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhwk( i64* %Base_Arg, i64* %lnhwl, i64* %lnhwm, i64 %lnhwn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Q9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Q9_info$def to i8*)
define internal ghccc void @s7Q9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhwo:
  %ls7Pr = alloca i64, i32 1
  %ls7Pq = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfkH
cfkH:
  %lnhwp = load i64*, i64** %Sp_Var
  %lnhwq = getelementptr inbounds i64, i64* %lnhwp, i32 -7
  %lnhwr = ptrtoint i64* %lnhwq to i64
  %lnhws = icmp ult i64 %lnhwr, %SpLim_Arg
  %lnhwt = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhws, i1 0 )
  br i1 %lnhwt, label %cfkJ, label %cfkK
cfkK:
  %lnhwv = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhwu = load i64*, i64** %Sp_Var
  %lnhww = getelementptr inbounds i64, i64* %lnhwu, i32 -2
  store i64 %lnhwv, i64* %lnhww, !tbaa !2
  %lnhwy = load i64, i64* %R1_Var
  %lnhwx = load i64*, i64** %Sp_Var
  %lnhwz = getelementptr inbounds i64, i64* %lnhwx, i32 -1
  store i64 %lnhwy, i64* %lnhwz, !tbaa !2
  %lnhwB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiq_info$def to i64
  %lnhwA = load i64*, i64** %Sp_Var
  %lnhwC = getelementptr inbounds i64, i64* %lnhwA, i32 -5
  store i64 %lnhwB, i64* %lnhwC, !tbaa !2
  %lnhwF = load i64, i64* %R1_Var
  %lnhwG = add i64 %lnhwF, 16
  %lnhwH = inttoptr i64 %lnhwG to i64*
  %lnhwI = load i64, i64* %lnhwH, !tbaa !4
  store i64 %lnhwI, i64* %ls7Pr
  %lnhwL = load i64, i64* %R1_Var
  %lnhwM = add i64 %lnhwL, 24
  %lnhwN = inttoptr i64 %lnhwM to i64*
  %lnhwO = load i64, i64* %lnhwN, !tbaa !4
  store i64 %lnhwO, i64* %ls7Pq
  %lnhwR = load i64, i64* %R1_Var
  %lnhwS = add i64 %lnhwR, 32
  %lnhwT = inttoptr i64 %lnhwS to i64*
  %lnhwU = load i64, i64* %lnhwT, !tbaa !4
  store i64 %lnhwU, i64* %R1_Var
  %lnhwW = load i64, i64* %ls7Pq
  %lnhwV = load i64*, i64** %Sp_Var
  %lnhwX = getelementptr inbounds i64, i64* %lnhwV, i32 -4
  store i64 %lnhwW, i64* %lnhwX, !tbaa !2
  %lnhwZ = load i64, i64* %ls7Pr
  %lnhwY = load i64*, i64** %Sp_Var
  %lnhx0 = getelementptr inbounds i64, i64* %lnhwY, i32 -3
  store i64 %lnhwZ, i64* %lnhx0, !tbaa !2
  %lnhx1 = load i64*, i64** %Sp_Var
  %lnhx2 = getelementptr inbounds i64, i64* %lnhx1, i32 -5
  %lnhx3 = ptrtoint i64* %lnhx2 to i64
  %lnhx4 = inttoptr i64 %lnhx3 to i64*
  store i64* %lnhx4, i64** %Sp_Var
  %lnhx5 = load i64, i64* %R1_Var
  %lnhx6 = and i64 %lnhx5, 7
  %lnhx7 = icmp ne i64 %lnhx6, 0
  br i1 %lnhx7, label %ufkQ, label %cfir
cfir:
  %lnhx9 = load i64, i64* %R1_Var
  %lnhxa = inttoptr i64 %lnhx9 to i64*
  %lnhxb = load i64, i64* %lnhxa, !tbaa !4
  %lnhxc = inttoptr i64 %lnhxb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhxd = load i64*, i64** %Sp_Var
  %lnhxe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhxc( i64* %Base_Arg, i64* %lnhxd, i64* %Hp_Arg, i64 %lnhxe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufkQ:
  %lnhxf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhxg = load i64*, i64** %Sp_Var
  %lnhxh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhxf( i64* %Base_Arg, i64* %lnhxg, i64* %Hp_Arg, i64 %lnhxh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfkJ:
  %lnhxi = load i64, i64* %R1_Var
  store i64 %lnhxi, i64* %R1_Var
  %lnhxj = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhxk = bitcast i64* %lnhxj to i64*
  %lnhxl = load i64, i64* %lnhxk, !tbaa !5
  %lnhxm = inttoptr i64 %lnhxl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhxn = load i64*, i64** %Sp_Var
  %lnhxo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhxm( i64* %Base_Arg, i64* %lnhxn, i64* %Hp_Arg, i64 %lnhxo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfiq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiq_info$def to i8*)
define internal ghccc void @cfiq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhxp:
  %ls7Qb = alloca i64, i32 1
  %ls7Qc = alloca i64, i32 1
  %ls7Qd = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfiq
cfiq:
  %lnhxr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiv_info$def to i64
  %lnhxq = load i64*, i64** %Sp_Var
  %lnhxs = getelementptr inbounds i64, i64* %lnhxq, i32 -2
  store i64 %lnhxr, i64* %lnhxs, !tbaa !2
  %lnhxv = load i64, i64* %R1_Var
  %lnhxw = add i64 %lnhxv, 7
  %lnhxx = inttoptr i64 %lnhxw to i64*
  %lnhxy = load i64, i64* %lnhxx, !tbaa !4
  store i64 %lnhxy, i64* %ls7Qb
  %lnhxB = load i64, i64* %R1_Var
  %lnhxC = add i64 %lnhxB, 15
  %lnhxD = inttoptr i64 %lnhxC to i64*
  %lnhxE = load i64, i64* %lnhxD, !tbaa !4
  store i64 %lnhxE, i64* %ls7Qc
  %lnhxH = load i64, i64* %R1_Var
  %lnhxI = add i64 %lnhxH, 23
  %lnhxJ = inttoptr i64 %lnhxI to i64*
  %lnhxK = load i64, i64* %lnhxJ, !tbaa !4
  store i64 %lnhxK, i64* %ls7Qd
  %lnhxL = load i64*, i64** %Sp_Var
  %lnhxM = getelementptr inbounds i64, i64* %lnhxL, i32 1
  %lnhxN = bitcast i64* %lnhxM to i64*
  %lnhxO = load i64, i64* %lnhxN, !tbaa !2
  store i64 %lnhxO, i64* %R1_Var
  %lnhxQ = load i64, i64* %ls7Qd
  %lnhxP = load i64*, i64** %Sp_Var
  %lnhxR = getelementptr inbounds i64, i64* %lnhxP, i32 -1
  store i64 %lnhxQ, i64* %lnhxR, !tbaa !2
  %lnhxT = load i64, i64* %ls7Qc
  %lnhxS = load i64*, i64** %Sp_Var
  %lnhxU = getelementptr inbounds i64, i64* %lnhxS, i32 0
  store i64 %lnhxT, i64* %lnhxU, !tbaa !2
  %lnhxW = load i64, i64* %ls7Qb
  %lnhxV = load i64*, i64** %Sp_Var
  %lnhxX = getelementptr inbounds i64, i64* %lnhxV, i32 1
  store i64 %lnhxW, i64* %lnhxX, !tbaa !2
  %lnhxY = load i64*, i64** %Sp_Var
  %lnhxZ = getelementptr inbounds i64, i64* %lnhxY, i32 -2
  %lnhy0 = ptrtoint i64* %lnhxZ to i64
  %lnhy1 = inttoptr i64 %lnhy0 to i64*
  store i64* %lnhy1, i64** %Sp_Var
  %lnhy2 = load i64, i64* %R1_Var
  %lnhy3 = and i64 %lnhy2, 7
  %lnhy4 = icmp ne i64 %lnhy3, 0
  br i1 %lnhy4, label %ufkP, label %cfiw
cfiw:
  %lnhy6 = load i64, i64* %R1_Var
  %lnhy7 = inttoptr i64 %lnhy6 to i64*
  %lnhy8 = load i64, i64* %lnhy7, !tbaa !4
  %lnhy9 = inttoptr i64 %lnhy8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhya = load i64*, i64** %Sp_Var
  %lnhyb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhy9( i64* %Base_Arg, i64* %lnhya, i64* %Hp_Arg, i64 %lnhyb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufkP:
  %lnhyc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhyd = load i64*, i64** %Sp_Var
  %lnhye = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhyc( i64* %Base_Arg, i64* %lnhyd, i64* %Hp_Arg, i64 %lnhye, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfiv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfiv_info$def to i8*)
define internal ghccc void @cfiv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nhyf:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Qf = alloca i64, i32 1
  %ls7Qg = alloca i64, i32 1
  %ls7Qh = alloca i64, i32 1
  %lcfiA = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfiv
cfiv:
  %lnhyg = load i64*, i64** %Hp_Var
  %lnhyh = getelementptr inbounds i64, i64* %lnhyg, i32 22
  %lnhyi = ptrtoint i64* %lnhyh to i64
  %lnhyj = inttoptr i64 %lnhyi to i64*
  store i64* %lnhyj, i64** %Hp_Var
  %lnhyk = load i64*, i64** %Hp_Var
  %lnhyl = ptrtoint i64* %lnhyk to i64
  %lnhym = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhyn = bitcast i64* %lnhym to i64*
  %lnhyo = load i64, i64* %lnhyn, !tbaa !5
  %lnhyp = icmp ugt i64 %lnhyl, %lnhyo
  %lnhyq = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhyp, i1 0 )
  br i1 %lnhyq, label %cfkO, label %cfkN
cfkN:
  %lnhyt = load i64, i64* %R1_Var
  %lnhyu = add i64 %lnhyt, 7
  %lnhyv = inttoptr i64 %lnhyu to i64*
  %lnhyw = load i64, i64* %lnhyv, !tbaa !4
  store i64 %lnhyw, i64* %ls7Qf
  %lnhyz = load i64, i64* %R1_Var
  %lnhyA = add i64 %lnhyz, 15
  %lnhyB = inttoptr i64 %lnhyA to i64*
  %lnhyC = load i64, i64* %lnhyB, !tbaa !4
  store i64 %lnhyC, i64* %ls7Qg
  %lnhyF = load i64, i64* %R1_Var
  %lnhyG = add i64 %lnhyF, 23
  %lnhyH = inttoptr i64 %lnhyG to i64*
  %lnhyI = load i64, i64* %lnhyH, !tbaa !4
  store i64 %lnhyI, i64* %ls7Qh
  %lnhyK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Qi_info$def to i64
  %lnhyJ = load i64*, i64** %Hp_Var
  %lnhyL = getelementptr inbounds i64, i64* %lnhyJ, i32 -21
  store i64 %lnhyK, i64* %lnhyL, !tbaa !3
  %lnhyN = load i64*, i64** %Sp_Var
  %lnhyO = getelementptr inbounds i64, i64* %lnhyN, i32 4
  %lnhyP = bitcast i64* %lnhyO to i64*
  %lnhyQ = load i64, i64* %lnhyP, !tbaa !2
  %lnhyM = load i64*, i64** %Hp_Var
  %lnhyR = getelementptr inbounds i64, i64* %lnhyM, i32 -19
  store i64 %lnhyQ, i64* %lnhyR, !tbaa !3
  %lnhyT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QM_info$def to i64
  %lnhyS = load i64*, i64** %Hp_Var
  %lnhyU = getelementptr inbounds i64, i64* %lnhyS, i32 -18
  store i64 %lnhyT, i64* %lnhyU, !tbaa !3
  %lnhyW = load i64, i64* %ls7Qh
  %lnhyV = load i64*, i64** %Hp_Var
  %lnhyX = getelementptr inbounds i64, i64* %lnhyV, i32 -16
  store i64 %lnhyW, i64* %lnhyX, !tbaa !3
  %lnhyZ = load i64*, i64** %Sp_Var
  %lnhz0 = getelementptr inbounds i64, i64* %lnhyZ, i32 1
  %lnhz1 = bitcast i64* %lnhz0 to i64*
  %lnhz2 = load i64, i64* %lnhz1, !tbaa !2
  %lnhyY = load i64*, i64** %Hp_Var
  %lnhz3 = getelementptr inbounds i64, i64* %lnhyY, i32 -15
  store i64 %lnhz2, i64* %lnhz3, !tbaa !3
  %lnhz4 = load i64*, i64** %Hp_Var
  %lnhz5 = getelementptr inbounds i64, i64* %lnhz4, i32 -21
  %lnhz6 = ptrtoint i64* %lnhz5 to i64
  store i64 %lnhz6, i64* %lcfiA
  %lnhz8 = load i64, i64* %lcfiA
  %lnhz7 = load i64*, i64** %Hp_Var
  %lnhz9 = getelementptr inbounds i64, i64* %lnhz7, i32 -14
  store i64 %lnhz8, i64* %lnhz9, !tbaa !3
  %lnhzb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QD_info$def to i64
  %lnhza = load i64*, i64** %Hp_Var
  %lnhzc = getelementptr inbounds i64, i64* %lnhza, i32 -13
  store i64 %lnhzb, i64* %lnhzc, !tbaa !3
  %lnhze = load i64, i64* %ls7Qg
  %lnhzd = load i64*, i64** %Hp_Var
  %lnhzf = getelementptr inbounds i64, i64* %lnhzd, i32 -11
  store i64 %lnhze, i64* %lnhzf, !tbaa !3
  %lnhzh = load i64*, i64** %Sp_Var
  %lnhzi = getelementptr inbounds i64, i64* %lnhzh, i32 2
  %lnhzj = bitcast i64* %lnhzi to i64*
  %lnhzk = load i64, i64* %lnhzj, !tbaa !2
  %lnhzg = load i64*, i64** %Hp_Var
  %lnhzl = getelementptr inbounds i64, i64* %lnhzg, i32 -10
  store i64 %lnhzk, i64* %lnhzl, !tbaa !3
  %lnhzn = load i64, i64* %lcfiA
  %lnhzm = load i64*, i64** %Hp_Var
  %lnhzo = getelementptr inbounds i64, i64* %lnhzm, i32 -9
  store i64 %lnhzn, i64* %lnhzo, !tbaa !3
  %lnhzq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Qu_info$def to i64
  %lnhzp = load i64*, i64** %Hp_Var
  %lnhzr = getelementptr inbounds i64, i64* %lnhzp, i32 -8
  store i64 %lnhzq, i64* %lnhzr, !tbaa !3
  %lnhzt = load i64, i64* %ls7Qf
  %lnhzs = load i64*, i64** %Hp_Var
  %lnhzu = getelementptr inbounds i64, i64* %lnhzs, i32 -6
  store i64 %lnhzt, i64* %lnhzu, !tbaa !3
  %lnhzw = load i64*, i64** %Sp_Var
  %lnhzx = getelementptr inbounds i64, i64* %lnhzw, i32 3
  %lnhzy = bitcast i64* %lnhzx to i64*
  %lnhzz = load i64, i64* %lnhzy, !tbaa !2
  %lnhzv = load i64*, i64** %Hp_Var
  %lnhzA = getelementptr inbounds i64, i64* %lnhzv, i32 -5
  store i64 %lnhzz, i64* %lnhzA, !tbaa !3
  %lnhzC = load i64, i64* %lcfiA
  %lnhzB = load i64*, i64** %Hp_Var
  %lnhzD = getelementptr inbounds i64, i64* %lnhzB, i32 -4
  store i64 %lnhzC, i64* %lnhzD, !tbaa !3
  %lnhzF = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnhzE = load i64*, i64** %Hp_Var
  %lnhzG = getelementptr inbounds i64, i64* %lnhzE, i32 -3
  store i64 %lnhzF, i64* %lnhzG, !tbaa !3
  %lnhzI = load i64*, i64** %Hp_Var
  %lnhzJ = getelementptr inbounds i64, i64* %lnhzI, i32 -8
  %lnhzK = ptrtoint i64* %lnhzJ to i64
  %lnhzH = load i64*, i64** %Hp_Var
  %lnhzL = getelementptr inbounds i64, i64* %lnhzH, i32 -2
  store i64 %lnhzK, i64* %lnhzL, !tbaa !3
  %lnhzN = load i64*, i64** %Hp_Var
  %lnhzO = getelementptr inbounds i64, i64* %lnhzN, i32 -13
  %lnhzP = ptrtoint i64* %lnhzO to i64
  %lnhzM = load i64*, i64** %Hp_Var
  %lnhzQ = getelementptr inbounds i64, i64* %lnhzM, i32 -1
  store i64 %lnhzP, i64* %lnhzQ, !tbaa !3
  %lnhzS = load i64*, i64** %Hp_Var
  %lnhzT = getelementptr inbounds i64, i64* %lnhzS, i32 -18
  %lnhzU = ptrtoint i64* %lnhzT to i64
  %lnhzR = load i64*, i64** %Hp_Var
  %lnhzV = getelementptr inbounds i64, i64* %lnhzR, i32 0
  store i64 %lnhzU, i64* %lnhzV, !tbaa !3
  %lnhzX = load i64*, i64** %Hp_Var
  %lnhzY = ptrtoint i64* %lnhzX to i64
  %lnhzZ = add i64 %lnhzY, -23
  store i64 %lnhzZ, i64* %R1_Var
  %lnhA0 = load i64*, i64** %Sp_Var
  %lnhA1 = getelementptr inbounds i64, i64* %lnhA0, i32 5
  %lnhA2 = ptrtoint i64* %lnhA1 to i64
  %lnhA3 = inttoptr i64 %lnhA2 to i64*
  store i64* %lnhA3, i64** %Sp_Var
  %lnhA4 = load i64*, i64** %Sp_Var
  %lnhA5 = getelementptr inbounds i64, i64* %lnhA4, i32 0
  %lnhA6 = bitcast i64* %lnhA5 to i64*
  %lnhA7 = load i64, i64* %lnhA6, !tbaa !2
  %lnhA8 = inttoptr i64 %lnhA7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhA9 = load i64*, i64** %Sp_Var
  %lnhAa = load i64*, i64** %Hp_Var
  %lnhAb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhA8( i64* %Base_Arg, i64* %lnhA9, i64* %lnhAa, i64 %lnhAb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfkO:
  %lnhAc = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 176, i64* %lnhAc, !tbaa !5
  %lnhAd = load i64, i64* %R1_Var
  store i64 %lnhAd, i64* %R1_Var
  %lnhAe = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhAf = load i64*, i64** %Sp_Var
  %lnhAg = load i64*, i64** %Hp_Var
  %lnhAh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhAe( i64* %Base_Arg, i64* %lnhAf, i64* %lnhAg, i64 %lnhAh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7QW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QW_info$def to i8*)
define internal ghccc void @s7QW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 15, i32 0}>
{
nhAi:
  %ls7QV = alloca i64, i32 1
  %ls7QR = alloca i64, i32 1
  %ls7QU = alloca i64, i32 1
  %ls7QQ = alloca i64, i32 1
  %ls7QT = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfla
cfla:
  %lnhAj = load i64*, i64** %Sp_Var
  %lnhAk = getelementptr inbounds i64, i64* %lnhAj, i32 -8
  %lnhAl = ptrtoint i64* %lnhAk to i64
  %lnhAm = icmp ult i64 %lnhAl, %SpLim_Arg
  %lnhAn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhAm, i1 0 )
  br i1 %lnhAn, label %cflY, label %cflZ
cflZ:
  %lnhAp = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhAo = load i64*, i64** %Sp_Var
  %lnhAq = getelementptr inbounds i64, i64* %lnhAo, i32 -2
  store i64 %lnhAp, i64* %lnhAq, !tbaa !2
  %lnhAs = load i64, i64* %R1_Var
  %lnhAr = load i64*, i64** %Sp_Var
  %lnhAt = getelementptr inbounds i64, i64* %lnhAr, i32 -1
  store i64 %lnhAs, i64* %lnhAt, !tbaa !2
  %lnhAv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfl7_info$def to i64
  %lnhAu = load i64*, i64** %Sp_Var
  %lnhAw = getelementptr inbounds i64, i64* %lnhAu, i32 -8
  store i64 %lnhAv, i64* %lnhAw, !tbaa !2
  %lnhAz = load i64, i64* %R1_Var
  %lnhAA = add i64 %lnhAz, 16
  %lnhAB = inttoptr i64 %lnhAA to i64*
  %lnhAC = load i64, i64* %lnhAB, !tbaa !4
  store i64 %lnhAC, i64* %ls7QV
  %lnhAF = load i64, i64* %R1_Var
  %lnhAG = add i64 %lnhAF, 24
  %lnhAH = inttoptr i64 %lnhAG to i64*
  %lnhAI = load i64, i64* %lnhAH, !tbaa !4
  store i64 %lnhAI, i64* %ls7QR
  %lnhAL = load i64, i64* %R1_Var
  %lnhAM = add i64 %lnhAL, 32
  %lnhAN = inttoptr i64 %lnhAM to i64*
  %lnhAO = load i64, i64* %lnhAN, !tbaa !4
  store i64 %lnhAO, i64* %ls7QU
  %lnhAR = load i64, i64* %R1_Var
  %lnhAS = add i64 %lnhAR, 40
  %lnhAT = inttoptr i64 %lnhAS to i64*
  %lnhAU = load i64, i64* %lnhAT, !tbaa !4
  store i64 %lnhAU, i64* %ls7QQ
  %lnhAX = load i64, i64* %R1_Var
  %lnhAY = add i64 %lnhAX, 48
  %lnhAZ = inttoptr i64 %lnhAY to i64*
  %lnhB0 = load i64, i64* %lnhAZ, !tbaa !4
  store i64 %lnhB0, i64* %ls7QT
  %lnhB3 = load i64, i64* %R1_Var
  %lnhB4 = add i64 %lnhB3, 56
  %lnhB5 = inttoptr i64 %lnhB4 to i64*
  %lnhB6 = load i64, i64* %lnhB5, !tbaa !4
  store i64 %lnhB6, i64* %R1_Var
  %lnhB8 = load i64, i64* %ls7QQ
  %lnhB7 = load i64*, i64** %Sp_Var
  %lnhB9 = getelementptr inbounds i64, i64* %lnhB7, i32 -7
  store i64 %lnhB8, i64* %lnhB9, !tbaa !2
  %lnhBb = load i64, i64* %ls7QR
  %lnhBa = load i64*, i64** %Sp_Var
  %lnhBc = getelementptr inbounds i64, i64* %lnhBa, i32 -6
  store i64 %lnhBb, i64* %lnhBc, !tbaa !2
  %lnhBe = load i64, i64* %ls7QT
  %lnhBd = load i64*, i64** %Sp_Var
  %lnhBf = getelementptr inbounds i64, i64* %lnhBd, i32 -5
  store i64 %lnhBe, i64* %lnhBf, !tbaa !2
  %lnhBh = load i64, i64* %ls7QU
  %lnhBg = load i64*, i64** %Sp_Var
  %lnhBi = getelementptr inbounds i64, i64* %lnhBg, i32 -4
  store i64 %lnhBh, i64* %lnhBi, !tbaa !2
  %lnhBk = load i64, i64* %ls7QV
  %lnhBj = load i64*, i64** %Sp_Var
  %lnhBl = getelementptr inbounds i64, i64* %lnhBj, i32 -3
  store i64 %lnhBk, i64* %lnhBl, !tbaa !2
  %lnhBm = load i64*, i64** %Sp_Var
  %lnhBn = getelementptr inbounds i64, i64* %lnhBm, i32 -8
  %lnhBo = ptrtoint i64* %lnhBn to i64
  %lnhBp = inttoptr i64 %lnhBo to i64*
  store i64* %lnhBp, i64** %Sp_Var
  %lnhBq = load i64, i64* %R1_Var
  %lnhBr = and i64 %lnhBq, 7
  %lnhBs = icmp ne i64 %lnhBr, 0
  br i1 %lnhBs, label %ufm9, label %cfl8
cfl8:
  %lnhBu = load i64, i64* %R1_Var
  %lnhBv = inttoptr i64 %lnhBu to i64*
  %lnhBw = load i64, i64* %lnhBv, !tbaa !4
  %lnhBx = inttoptr i64 %lnhBw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhBy = load i64*, i64** %Sp_Var
  %lnhBz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhBx( i64* %Base_Arg, i64* %lnhBy, i64* %Hp_Arg, i64 %lnhBz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufm9:
  %lnhBA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfl7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhBB = load i64*, i64** %Sp_Var
  %lnhBC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhBA( i64* %Base_Arg, i64* %lnhBB, i64* %Hp_Arg, i64 %lnhBC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cflY:
  %lnhBD = load i64, i64* %R1_Var
  store i64 %lnhBD, i64* %R1_Var
  %lnhBE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhBF = bitcast i64* %lnhBE to i64*
  %lnhBG = load i64, i64* %lnhBF, !tbaa !5
  %lnhBH = inttoptr i64 %lnhBG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhBI = load i64*, i64** %Sp_Var
  %lnhBJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhBH( i64* %Base_Arg, i64* %lnhBI, i64* %Hp_Arg, i64 %lnhBJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfl7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfl7_info$def to i8*)
define internal ghccc void @cfl7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 0}>
{
nhBK:
  %ls7QY = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfl7
cfl7:
  %lnhBL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfld_info$def to i64
  %lnhBM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhBL, i64* %lnhBM, !tbaa !2
  %lnhBP = load i64, i64* %R1_Var
  %lnhBQ = add i64 %lnhBP, 7
  %lnhBR = inttoptr i64 %lnhBQ to double*
  %lnhBS = load double, double* %lnhBR, !tbaa !4
  store double %lnhBS, double* %ls7QY
  %lnhBT = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnhBU = bitcast i64* %lnhBT to i64*
  %lnhBV = load i64, i64* %lnhBU, !tbaa !2
  store i64 %lnhBV, i64* %R1_Var
  %lnhBW = load double, double* %ls7QY
  %lnhBX = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnhBY = bitcast i64* %lnhBX to double*
  store double %lnhBW, double* %lnhBY, !tbaa !2
  %lnhBZ = load i64, i64* %R1_Var
  %lnhC0 = and i64 %lnhBZ, 7
  %lnhC1 = icmp ne i64 %lnhC0, 0
  br i1 %lnhC1, label %ufm8, label %cfle
cfle:
  %lnhC3 = load i64, i64* %R1_Var
  %lnhC4 = inttoptr i64 %lnhC3 to i64*
  %lnhC5 = load i64, i64* %lnhC4, !tbaa !4
  %lnhC6 = inttoptr i64 %lnhC5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhC7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhC6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhC7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufm8:
  %lnhC8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfld_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhC9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhC8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhC9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfld_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfld_info$def to i8*)
define internal ghccc void @cfld_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 261, i32 30, i32 0}>
{
nhCa:
  %ls7R0 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfld
cfld:
  %lnhCb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfli_info$def to i64
  %lnhCc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhCb, i64* %lnhCc, !tbaa !2
  %lnhCf = load i64, i64* %R1_Var
  %lnhCg = add i64 %lnhCf, 7
  %lnhCh = inttoptr i64 %lnhCg to double*
  %lnhCi = load double, double* %lnhCh, !tbaa !4
  store double %lnhCi, double* %ls7R0
  %lnhCj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhCk = bitcast i64* %lnhCj to i64*
  %lnhCl = load i64, i64* %lnhCk, !tbaa !2
  store i64 %lnhCl, i64* %R1_Var
  %lnhCm = load double, double* %ls7R0
  %lnhCn = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhCo = bitcast i64* %lnhCn to double*
  store double %lnhCm, double* %lnhCo, !tbaa !2
  %lnhCp = load i64, i64* %R1_Var
  %lnhCq = and i64 %lnhCp, 7
  %lnhCr = icmp ne i64 %lnhCq, 0
  br i1 %lnhCr, label %ufma, label %cflj
cflj:
  %lnhCt = load i64, i64* %R1_Var
  %lnhCu = inttoptr i64 %lnhCt to i64*
  %lnhCv = load i64, i64* %lnhCu, !tbaa !4
  %lnhCw = inttoptr i64 %lnhCv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhCx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhCw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhCx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufma:
  %lnhCy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfli_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhCz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhCy( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhCz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfli_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfli_info$def to i8*)
define internal ghccc void @cfli_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 325, i32 30, i32 0}>
{
nhCA:
  %ls7R2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfli
cfli:
  %lnhCB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfln_info$def to i64
  %lnhCC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhCB, i64* %lnhCC, !tbaa !2
  %lnhCF = load i64, i64* %R1_Var
  %lnhCG = add i64 %lnhCF, 7
  %lnhCH = inttoptr i64 %lnhCG to double*
  %lnhCI = load double, double* %lnhCH, !tbaa !4
  store double %lnhCI, double* %ls7R2
  %lnhCJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnhCK = bitcast i64* %lnhCJ to i64*
  %lnhCL = load i64, i64* %lnhCK, !tbaa !2
  store i64 %lnhCL, i64* %R1_Var
  %lnhCM = load double, double* %ls7R2
  %lnhCN = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnhCO = bitcast i64* %lnhCN to double*
  store double %lnhCM, double* %lnhCO, !tbaa !2
  %lnhCP = load i64, i64* %R1_Var
  %lnhCQ = and i64 %lnhCP, 7
  %lnhCR = icmp ne i64 %lnhCQ, 0
  br i1 %lnhCR, label %ufmb, label %cflo
cflo:
  %lnhCT = load i64, i64* %R1_Var
  %lnhCU = inttoptr i64 %lnhCT to i64*
  %lnhCV = load i64, i64* %lnhCU, !tbaa !4
  %lnhCW = inttoptr i64 %lnhCV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhCX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhCW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhCX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmb:
  %lnhCY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfln_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhCZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhCY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhCZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfln_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfln_info$def to i8*)
define internal ghccc void @cfln_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 837, i32 30, i32 0}>
{
nhD0:
  %ls7R4 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfln
cfln:
  %lnhD1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfls_info$def to i64
  %lnhD2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhD1, i64* %lnhD2, !tbaa !2
  %lnhD5 = load i64, i64* %R1_Var
  %lnhD6 = add i64 %lnhD5, 7
  %lnhD7 = inttoptr i64 %lnhD6 to double*
  %lnhD8 = load double, double* %lnhD7, !tbaa !4
  store double %lnhD8, double* %ls7R4
  %lnhD9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhDa = bitcast i64* %lnhD9 to i64*
  %lnhDb = load i64, i64* %lnhDa, !tbaa !2
  store i64 %lnhDb, i64* %R1_Var
  %lnhDc = load double, double* %ls7R4
  %lnhDd = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhDe = bitcast i64* %lnhDd to double*
  store double %lnhDc, double* %lnhDe, !tbaa !2
  %lnhDf = load i64, i64* %R1_Var
  %lnhDg = and i64 %lnhDf, 7
  %lnhDh = icmp ne i64 %lnhDg, 0
  br i1 %lnhDh, label %ufmc, label %cflt
cflt:
  %lnhDj = load i64, i64* %R1_Var
  %lnhDk = inttoptr i64 %lnhDj to i64*
  %lnhDl = load i64, i64* %lnhDk, !tbaa !4
  %lnhDm = inttoptr i64 %lnhDl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhDn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhDm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhDn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmc:
  %lnhDo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfls_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhDp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhDo( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhDp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfls_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfls_info$def to i8*)
define internal ghccc void @cfls_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 965, i32 30, i32 0}>
{
nhDq:
  %ls7R6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfls
cfls:
  %lnhDr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cflx_info$def to i64
  %lnhDs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhDr, i64* %lnhDs, !tbaa !2
  %lnhDv = load i64, i64* %R1_Var
  %lnhDw = add i64 %lnhDv, 7
  %lnhDx = inttoptr i64 %lnhDw to double*
  %lnhDy = load double, double* %lnhDx, !tbaa !4
  store double %lnhDy, double* %ls7R6
  %lnhDz = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnhDA = bitcast i64* %lnhDz to i64*
  %lnhDB = load i64, i64* %lnhDA, !tbaa !2
  store i64 %lnhDB, i64* %R1_Var
  %lnhDC = load double, double* %ls7R6
  %lnhDD = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnhDE = bitcast i64* %lnhDD to double*
  store double %lnhDC, double* %lnhDE, !tbaa !2
  %lnhDF = load i64, i64* %R1_Var
  %lnhDG = and i64 %lnhDF, 7
  %lnhDH = icmp ne i64 %lnhDG, 0
  br i1 %lnhDH, label %ufmd, label %cfly
cfly:
  %lnhDJ = load i64, i64* %R1_Var
  %lnhDK = inttoptr i64 %lnhDJ to i64*
  %lnhDL = load i64, i64* %lnhDK, !tbaa !4
  %lnhDM = inttoptr i64 %lnhDL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhDN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhDM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhDN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmd:
  %lnhDO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cflx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhDP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhDO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhDP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cflx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cflx_info$def to i8*)
define internal ghccc void @cflx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1989, i32 30, i32 0}>
{
nhDQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7R9 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cflx
cflx:
  %lnhDR = load i64*, i64** %Hp_Var
  %lnhDS = getelementptr inbounds i64, i64* %lnhDR, i32 2
  %lnhDT = ptrtoint i64* %lnhDS to i64
  %lnhDU = inttoptr i64 %lnhDT to i64*
  store i64* %lnhDU, i64** %Hp_Var
  %lnhDV = load i64*, i64** %Hp_Var
  %lnhDW = ptrtoint i64* %lnhDV to i64
  %lnhDX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhDY = bitcast i64* %lnhDX to i64*
  %lnhDZ = load i64, i64* %lnhDY, !tbaa !5
  %lnhE0 = icmp ugt i64 %lnhDW, %lnhDZ
  %lnhE1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhE0, i1 0 )
  br i1 %lnhE1, label %cfm7, label %cfm6
cfm6:
  %lnhE2 = load i64*, i64** %Sp_Var
  %lnhE3 = getelementptr inbounds i64, i64* %lnhE2, i32 3
  %lnhE4 = bitcast i64* %lnhE3 to double*
  %lnhE5 = load double, double* %lnhE4, !tbaa !2
  %lnhE6 = load i64*, i64** %Sp_Var
  %lnhE7 = getelementptr inbounds i64, i64* %lnhE6, i32 1
  %lnhE8 = bitcast i64* %lnhE7 to double*
  %lnhE9 = load double, double* %lnhE8, !tbaa !2
  %lnhEa = fmul double %lnhE5, %lnhE9
  %lnhEb = load i64*, i64** %Sp_Var
  %lnhEc = getelementptr inbounds i64, i64* %lnhEb, i32 4
  %lnhEd = bitcast i64* %lnhEc to double*
  %lnhEe = load double, double* %lnhEd, !tbaa !2
  %lnhEf = load i64*, i64** %Sp_Var
  %lnhEg = getelementptr inbounds i64, i64* %lnhEf, i32 2
  %lnhEh = bitcast i64* %lnhEg to double*
  %lnhEi = load double, double* %lnhEh, !tbaa !2
  %lnhEj = fmul double %lnhEe, %lnhEi
  %lnhEk = fadd double %lnhEa, %lnhEj
  %lnhEl = load i64*, i64** %Sp_Var
  %lnhEm = getelementptr inbounds i64, i64* %lnhEl, i32 5
  %lnhEn = bitcast i64* %lnhEm to double*
  %lnhEo = load double, double* %lnhEn, !tbaa !2
  %lnhEr = load i64, i64* %R1_Var
  %lnhEs = add i64 %lnhEr, 7
  %lnhEt = inttoptr i64 %lnhEs to double*
  %lnhEu = load double, double* %lnhEt, !tbaa !4
  %lnhEv = fmul double %lnhEo, %lnhEu
  %lnhEw = fadd double %lnhEk, %lnhEv
  store double %lnhEw, double* %ls7R9
  %lnhEy = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhEx = load i64*, i64** %Hp_Var
  %lnhEz = getelementptr inbounds i64, i64* %lnhEx, i32 -1
  store i64 %lnhEy, i64* %lnhEz, !tbaa !3
  %lnhEB = load double, double* %ls7R9
  %lnhEC = load double, double* %ls7R9
  %lnhED = fadd double %lnhEB, %lnhEC
  %lnhEE = fsub double 0x8000000000000000, %lnhED
  %lnhEA = load i64*, i64** %Hp_Var
  %lnhEF = getelementptr inbounds i64, i64* %lnhEA, i32 0
  %lnhEG = bitcast i64* %lnhEF to double*
  store double %lnhEE, double* %lnhEG, !tbaa !3
  %lnhEI = load i64*, i64** %Hp_Var
  %lnhEJ = ptrtoint i64* %lnhEI to i64
  %lnhEK = add i64 %lnhEJ, -7
  store i64 %lnhEK, i64* %R1_Var
  %lnhEL = load i64*, i64** %Sp_Var
  %lnhEM = getelementptr inbounds i64, i64* %lnhEL, i32 6
  %lnhEN = ptrtoint i64* %lnhEM to i64
  %lnhEO = inttoptr i64 %lnhEN to i64*
  store i64* %lnhEO, i64** %Sp_Var
  %lnhEP = load i64*, i64** %Sp_Var
  %lnhEQ = getelementptr inbounds i64, i64* %lnhEP, i32 0
  %lnhER = bitcast i64* %lnhEQ to i64*
  %lnhES = load i64, i64* %lnhER, !tbaa !2
  %lnhET = inttoptr i64 %lnhES to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhEU = load i64*, i64** %Sp_Var
  %lnhEV = load i64*, i64** %Hp_Var
  %lnhEW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhET( i64* %Base_Arg, i64* %lnhEU, i64* %lnhEV, i64 %lnhEW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfm7:
  %lnhEX = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhEX, !tbaa !5
  %lnhEY = load i64, i64* %R1_Var
  store i64 %lnhEY, i64* %R1_Var
  %lnhEZ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhF0 = load i64*, i64** %Sp_Var
  %lnhF1 = load i64*, i64** %Hp_Var
  %lnhF2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhEZ( i64* %Base_Arg, i64* %lnhF0, i64* %lnhF1, i64 %lnhF2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7RG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RG_info$def to i8*)
define internal ghccc void @s7RG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhF3:
  %ls7QV = alloca i64, i32 1
  %ls7QW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfml
cfml:
  %lnhF4 = load i64*, i64** %Sp_Var
  %lnhF5 = getelementptr inbounds i64, i64* %lnhF4, i32 -5
  %lnhF6 = ptrtoint i64* %lnhF5 to i64
  %lnhF7 = icmp ult i64 %lnhF6, %SpLim_Arg
  %lnhF8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhF7, i1 0 )
  br i1 %lnhF8, label %cfmF, label %cfmG
cfmG:
  %lnhFa = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhF9 = load i64*, i64** %Sp_Var
  %lnhFb = getelementptr inbounds i64, i64* %lnhF9, i32 -2
  store i64 %lnhFa, i64* %lnhFb, !tbaa !2
  %lnhFd = load i64, i64* %R1_Var
  %lnhFc = load i64*, i64** %Sp_Var
  %lnhFe = getelementptr inbounds i64, i64* %lnhFc, i32 -1
  store i64 %lnhFd, i64* %lnhFe, !tbaa !2
  %lnhFg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmi_info$def to i64
  %lnhFf = load i64*, i64** %Sp_Var
  %lnhFh = getelementptr inbounds i64, i64* %lnhFf, i32 -5
  store i64 %lnhFg, i64* %lnhFh, !tbaa !2
  %lnhFk = load i64, i64* %R1_Var
  %lnhFl = add i64 %lnhFk, 16
  %lnhFm = inttoptr i64 %lnhFl to i64*
  %lnhFn = load i64, i64* %lnhFm, !tbaa !4
  store i64 %lnhFn, i64* %ls7QV
  %lnhFq = load i64, i64* %R1_Var
  %lnhFr = add i64 %lnhFq, 24
  %lnhFs = inttoptr i64 %lnhFr to i64*
  %lnhFt = load i64, i64* %lnhFs, !tbaa !4
  store i64 %lnhFt, i64* %ls7QW
  %lnhFw = load i64, i64* %R1_Var
  %lnhFx = add i64 %lnhFw, 32
  %lnhFy = inttoptr i64 %lnhFx to i64*
  %lnhFz = load i64, i64* %lnhFy, !tbaa !4
  store i64 %lnhFz, i64* %R1_Var
  %lnhFB = load i64, i64* %ls7QV
  %lnhFA = load i64*, i64** %Sp_Var
  %lnhFC = getelementptr inbounds i64, i64* %lnhFA, i32 -4
  store i64 %lnhFB, i64* %lnhFC, !tbaa !2
  %lnhFE = load i64, i64* %ls7QW
  %lnhFD = load i64*, i64** %Sp_Var
  %lnhFF = getelementptr inbounds i64, i64* %lnhFD, i32 -3
  store i64 %lnhFE, i64* %lnhFF, !tbaa !2
  %lnhFG = load i64*, i64** %Sp_Var
  %lnhFH = getelementptr inbounds i64, i64* %lnhFG, i32 -5
  %lnhFI = ptrtoint i64* %lnhFH to i64
  %lnhFJ = inttoptr i64 %lnhFI to i64*
  store i64* %lnhFJ, i64** %Sp_Var
  %lnhFK = load i64, i64* %R1_Var
  %lnhFL = and i64 %lnhFK, 7
  %lnhFM = icmp ne i64 %lnhFL, 0
  br i1 %lnhFM, label %ufmN, label %cfmj
cfmj:
  %lnhFO = load i64, i64* %R1_Var
  %lnhFP = inttoptr i64 %lnhFO to i64*
  %lnhFQ = load i64, i64* %lnhFP, !tbaa !4
  %lnhFR = inttoptr i64 %lnhFQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhFS = load i64*, i64** %Sp_Var
  %lnhFT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhFR( i64* %Base_Arg, i64* %lnhFS, i64* %Hp_Arg, i64 %lnhFT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmN:
  %lnhFU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhFV = load i64*, i64** %Sp_Var
  %lnhFW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhFU( i64* %Base_Arg, i64* %lnhFV, i64* %Hp_Arg, i64 %lnhFW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfmF:
  %lnhFX = load i64, i64* %R1_Var
  store i64 %lnhFX, i64* %R1_Var
  %lnhFY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhFZ = bitcast i64* %lnhFY to i64*
  %lnhG0 = load i64, i64* %lnhFZ, !tbaa !5
  %lnhG1 = inttoptr i64 %lnhG0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhG2 = load i64*, i64** %Sp_Var
  %lnhG3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhG1( i64* %Base_Arg, i64* %lnhG2, i64* %Hp_Arg, i64 %lnhG3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfmi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmi_info$def to i8*)
define internal ghccc void @cfmi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhG4:
  %ls7Rz = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfmi
cfmi:
  %lnhG5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmo_info$def to i64
  %lnhG6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhG5, i64* %lnhG6, !tbaa !2
  %lnhG9 = load i64, i64* %R1_Var
  %lnhGa = add i64 %lnhG9, 7
  %lnhGb = inttoptr i64 %lnhGa to double*
  %lnhGc = load double, double* %lnhGb, !tbaa !4
  store double %lnhGc, double* %ls7Rz
  %lnhGd = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhGe = bitcast i64* %lnhGd to i64*
  %lnhGf = load i64, i64* %lnhGe, !tbaa !2
  store i64 %lnhGf, i64* %R1_Var
  %lnhGg = load double, double* %ls7Rz
  %lnhGh = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhGi = bitcast i64* %lnhGh to double*
  store double %lnhGg, double* %lnhGi, !tbaa !2
  %lnhGj = load i64, i64* %R1_Var
  %lnhGk = and i64 %lnhGj, 7
  %lnhGl = icmp ne i64 %lnhGk, 0
  br i1 %lnhGl, label %ufmM, label %cfmp
cfmp:
  %lnhGn = load i64, i64* %R1_Var
  %lnhGo = inttoptr i64 %lnhGn to i64*
  %lnhGp = load i64, i64* %lnhGo, !tbaa !4
  %lnhGq = inttoptr i64 %lnhGp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhGr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhGq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhGr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmM:
  %lnhGs = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhGt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhGs( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhGt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfmo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmo_info$def to i8*)
define internal ghccc void @cfmo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nhGu:
  %ls7RB = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfmo
cfmo:
  %lnhGv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmt_info$def to i64
  %lnhGw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhGv, i64* %lnhGw, !tbaa !2
  %lnhGz = load i64, i64* %R1_Var
  %lnhGA = add i64 %lnhGz, 7
  %lnhGB = inttoptr i64 %lnhGA to double*
  %lnhGC = load double, double* %lnhGB, !tbaa !4
  store double %lnhGC, double* %ls7RB
  %lnhGD = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhGE = bitcast i64* %lnhGD to i64*
  %lnhGF = load i64, i64* %lnhGE, !tbaa !2
  store i64 %lnhGF, i64* %R1_Var
  %lnhGG = load double, double* %ls7RB
  %lnhGH = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhGI = bitcast i64* %lnhGH to double*
  store double %lnhGG, double* %lnhGI, !tbaa !2
  %lnhGJ = load i64, i64* %R1_Var
  %lnhGK = and i64 %lnhGJ, 7
  %lnhGL = icmp ne i64 %lnhGK, 0
  br i1 %lnhGL, label %ufmO, label %cfmu
cfmu:
  %lnhGN = load i64, i64* %R1_Var
  %lnhGO = inttoptr i64 %lnhGN to i64*
  %lnhGP = load i64, i64* %lnhGO, !tbaa !4
  %lnhGQ = inttoptr i64 %lnhGP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhGR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhGQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhGR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufmO:
  %lnhGS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhGT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhGS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhGT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfmt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmt_info$def to i8*)
define internal ghccc void @cfmt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhGU:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7RF = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfmt
cfmt:
  %lnhGV = load i64*, i64** %Hp_Var
  %lnhGW = getelementptr inbounds i64, i64* %lnhGV, i32 2
  %lnhGX = ptrtoint i64* %lnhGW to i64
  %lnhGY = inttoptr i64 %lnhGX to i64*
  store i64* %lnhGY, i64** %Hp_Var
  %lnhGZ = load i64*, i64** %Hp_Var
  %lnhH0 = ptrtoint i64* %lnhGZ to i64
  %lnhH1 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhH2 = bitcast i64* %lnhH1 to i64*
  %lnhH3 = load i64, i64* %lnhH2, !tbaa !5
  %lnhH4 = icmp ugt i64 %lnhH0, %lnhH3
  %lnhH5 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhH4, i1 0 )
  br i1 %lnhH5, label %cfmL, label %cfmK
cfmK:
  %lnhH6 = load i64*, i64** %Sp_Var
  %lnhH7 = getelementptr inbounds i64, i64* %lnhH6, i32 2
  %lnhH8 = bitcast i64* %lnhH7 to double*
  %lnhH9 = load double, double* %lnhH8, !tbaa !2
  %lnhHa = load i64*, i64** %Sp_Var
  %lnhHb = getelementptr inbounds i64, i64* %lnhHa, i32 1
  %lnhHc = bitcast i64* %lnhHb to double*
  %lnhHd = load double, double* %lnhHc, !tbaa !2
  %lnhHg = load i64, i64* %R1_Var
  %lnhHh = add i64 %lnhHg, 7
  %lnhHi = inttoptr i64 %lnhHh to double*
  %lnhHj = load double, double* %lnhHi, !tbaa !4
  %lnhHk = fmul double %lnhHd, %lnhHj
  %lnhHl = fadd double %lnhH9, %lnhHk
  store double %lnhHl, double* %ls7RF
  %lnhHn = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhHm = load i64*, i64** %Hp_Var
  %lnhHo = getelementptr inbounds i64, i64* %lnhHm, i32 -1
  store i64 %lnhHn, i64* %lnhHo, !tbaa !3
  %lnhHq = load double, double* %ls7RF
  %lnhHp = load i64*, i64** %Hp_Var
  %lnhHr = getelementptr inbounds i64, i64* %lnhHp, i32 0
  %lnhHs = bitcast i64* %lnhHr to double*
  store double %lnhHq, double* %lnhHs, !tbaa !3
  %lnhHu = load i64*, i64** %Hp_Var
  %lnhHv = ptrtoint i64* %lnhHu to i64
  %lnhHw = add i64 %lnhHv, -7
  store i64 %lnhHw, i64* %R1_Var
  %lnhHx = load i64*, i64** %Sp_Var
  %lnhHy = getelementptr inbounds i64, i64* %lnhHx, i32 3
  %lnhHz = ptrtoint i64* %lnhHy to i64
  %lnhHA = inttoptr i64 %lnhHz to i64*
  store i64* %lnhHA, i64** %Sp_Var
  %lnhHB = load i64*, i64** %Sp_Var
  %lnhHC = getelementptr inbounds i64, i64* %lnhHB, i32 0
  %lnhHD = bitcast i64* %lnhHC to i64*
  %lnhHE = load i64, i64* %lnhHD, !tbaa !2
  %lnhHF = inttoptr i64 %lnhHE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhHG = load i64*, i64** %Sp_Var
  %lnhHH = load i64*, i64** %Hp_Var
  %lnhHI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhHF( i64* %Base_Arg, i64* %lnhHG, i64* %lnhHH, i64 %lnhHI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfmL:
  %lnhHJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhHJ, !tbaa !5
  %lnhHK = load i64, i64* %R1_Var
  store i64 %lnhHK, i64* %R1_Var
  %lnhHL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhHM = load i64*, i64** %Sp_Var
  %lnhHN = load i64*, i64** %Hp_Var
  %lnhHO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhHL( i64* %Base_Arg, i64* %lnhHM, i64* %lnhHN, i64 %lnhHO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Rx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Rx_info$def to i8*)
define internal ghccc void @s7Rx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhHP:
  %ls7QU = alloca i64, i32 1
  %ls7QW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfmW
cfmW:
  %lnhHQ = load i64*, i64** %Sp_Var
  %lnhHR = getelementptr inbounds i64, i64* %lnhHQ, i32 -5
  %lnhHS = ptrtoint i64* %lnhHR to i64
  %lnhHT = icmp ult i64 %lnhHS, %SpLim_Arg
  %lnhHU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhHT, i1 0 )
  br i1 %lnhHU, label %cfng, label %cfnh
cfnh:
  %lnhHW = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhHV = load i64*, i64** %Sp_Var
  %lnhHX = getelementptr inbounds i64, i64* %lnhHV, i32 -2
  store i64 %lnhHW, i64* %lnhHX, !tbaa !2
  %lnhHZ = load i64, i64* %R1_Var
  %lnhHY = load i64*, i64** %Sp_Var
  %lnhI0 = getelementptr inbounds i64, i64* %lnhHY, i32 -1
  store i64 %lnhHZ, i64* %lnhI0, !tbaa !2
  %lnhI2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmT_info$def to i64
  %lnhI1 = load i64*, i64** %Sp_Var
  %lnhI3 = getelementptr inbounds i64, i64* %lnhI1, i32 -5
  store i64 %lnhI2, i64* %lnhI3, !tbaa !2
  %lnhI6 = load i64, i64* %R1_Var
  %lnhI7 = add i64 %lnhI6, 16
  %lnhI8 = inttoptr i64 %lnhI7 to i64*
  %lnhI9 = load i64, i64* %lnhI8, !tbaa !4
  store i64 %lnhI9, i64* %ls7QU
  %lnhIc = load i64, i64* %R1_Var
  %lnhId = add i64 %lnhIc, 24
  %lnhIe = inttoptr i64 %lnhId to i64*
  %lnhIf = load i64, i64* %lnhIe, !tbaa !4
  store i64 %lnhIf, i64* %ls7QW
  %lnhIi = load i64, i64* %R1_Var
  %lnhIj = add i64 %lnhIi, 32
  %lnhIk = inttoptr i64 %lnhIj to i64*
  %lnhIl = load i64, i64* %lnhIk, !tbaa !4
  store i64 %lnhIl, i64* %R1_Var
  %lnhIn = load i64, i64* %ls7QU
  %lnhIm = load i64*, i64** %Sp_Var
  %lnhIo = getelementptr inbounds i64, i64* %lnhIm, i32 -4
  store i64 %lnhIn, i64* %lnhIo, !tbaa !2
  %lnhIq = load i64, i64* %ls7QW
  %lnhIp = load i64*, i64** %Sp_Var
  %lnhIr = getelementptr inbounds i64, i64* %lnhIp, i32 -3
  store i64 %lnhIq, i64* %lnhIr, !tbaa !2
  %lnhIs = load i64*, i64** %Sp_Var
  %lnhIt = getelementptr inbounds i64, i64* %lnhIs, i32 -5
  %lnhIu = ptrtoint i64* %lnhIt to i64
  %lnhIv = inttoptr i64 %lnhIu to i64*
  store i64* %lnhIv, i64** %Sp_Var
  %lnhIw = load i64, i64* %R1_Var
  %lnhIx = and i64 %lnhIw, 7
  %lnhIy = icmp ne i64 %lnhIx, 0
  br i1 %lnhIy, label %ufno, label %cfmU
cfmU:
  %lnhIA = load i64, i64* %R1_Var
  %lnhIB = inttoptr i64 %lnhIA to i64*
  %lnhIC = load i64, i64* %lnhIB, !tbaa !4
  %lnhID = inttoptr i64 %lnhIC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhIE = load i64*, i64** %Sp_Var
  %lnhIF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhID( i64* %Base_Arg, i64* %lnhIE, i64* %Hp_Arg, i64 %lnhIF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufno:
  %lnhIG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhIH = load i64*, i64** %Sp_Var
  %lnhII = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhIG( i64* %Base_Arg, i64* %lnhIH, i64* %Hp_Arg, i64 %lnhII, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfng:
  %lnhIJ = load i64, i64* %R1_Var
  store i64 %lnhIJ, i64* %R1_Var
  %lnhIK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhIL = bitcast i64* %lnhIK to i64*
  %lnhIM = load i64, i64* %lnhIL, !tbaa !5
  %lnhIN = inttoptr i64 %lnhIM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhIO = load i64*, i64** %Sp_Var
  %lnhIP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhIN( i64* %Base_Arg, i64* %lnhIO, i64* %Hp_Arg, i64 %lnhIP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfmT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmT_info$def to i8*)
define internal ghccc void @cfmT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhIQ:
  %ls7Rq = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfmT
cfmT:
  %lnhIR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmZ_info$def to i64
  %lnhIS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhIR, i64* %lnhIS, !tbaa !2
  %lnhIV = load i64, i64* %R1_Var
  %lnhIW = add i64 %lnhIV, 7
  %lnhIX = inttoptr i64 %lnhIW to double*
  %lnhIY = load double, double* %lnhIX, !tbaa !4
  store double %lnhIY, double* %ls7Rq
  %lnhIZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhJ0 = bitcast i64* %lnhIZ to i64*
  %lnhJ1 = load i64, i64* %lnhJ0, !tbaa !2
  store i64 %lnhJ1, i64* %R1_Var
  %lnhJ2 = load double, double* %ls7Rq
  %lnhJ3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhJ4 = bitcast i64* %lnhJ3 to double*
  store double %lnhJ2, double* %lnhJ4, !tbaa !2
  %lnhJ5 = load i64, i64* %R1_Var
  %lnhJ6 = and i64 %lnhJ5, 7
  %lnhJ7 = icmp ne i64 %lnhJ6, 0
  br i1 %lnhJ7, label %ufnn, label %cfn0
cfn0:
  %lnhJ9 = load i64, i64* %R1_Var
  %lnhJa = inttoptr i64 %lnhJ9 to i64*
  %lnhJb = load i64, i64* %lnhJa, !tbaa !4
  %lnhJc = inttoptr i64 %lnhJb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhJd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhJc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhJd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufnn:
  %lnhJe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhJf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhJe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhJf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfmZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfmZ_info$def to i8*)
define internal ghccc void @cfmZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nhJg:
  %ls7Rs = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfmZ
cfmZ:
  %lnhJh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfn4_info$def to i64
  %lnhJi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhJh, i64* %lnhJi, !tbaa !2
  %lnhJl = load i64, i64* %R1_Var
  %lnhJm = add i64 %lnhJl, 7
  %lnhJn = inttoptr i64 %lnhJm to double*
  %lnhJo = load double, double* %lnhJn, !tbaa !4
  store double %lnhJo, double* %ls7Rs
  %lnhJp = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhJq = bitcast i64* %lnhJp to i64*
  %lnhJr = load i64, i64* %lnhJq, !tbaa !2
  store i64 %lnhJr, i64* %R1_Var
  %lnhJs = load double, double* %ls7Rs
  %lnhJt = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhJu = bitcast i64* %lnhJt to double*
  store double %lnhJs, double* %lnhJu, !tbaa !2
  %lnhJv = load i64, i64* %R1_Var
  %lnhJw = and i64 %lnhJv, 7
  %lnhJx = icmp ne i64 %lnhJw, 0
  br i1 %lnhJx, label %ufnp, label %cfn5
cfn5:
  %lnhJz = load i64, i64* %R1_Var
  %lnhJA = inttoptr i64 %lnhJz to i64*
  %lnhJB = load i64, i64* %lnhJA, !tbaa !4
  %lnhJC = inttoptr i64 %lnhJB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhJD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhJC( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhJD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufnp:
  %lnhJE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfn4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhJF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhJE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhJF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfn4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfn4_info$def to i8*)
define internal ghccc void @cfn4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhJG:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Rw = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfn4
cfn4:
  %lnhJH = load i64*, i64** %Hp_Var
  %lnhJI = getelementptr inbounds i64, i64* %lnhJH, i32 2
  %lnhJJ = ptrtoint i64* %lnhJI to i64
  %lnhJK = inttoptr i64 %lnhJJ to i64*
  store i64* %lnhJK, i64** %Hp_Var
  %lnhJL = load i64*, i64** %Hp_Var
  %lnhJM = ptrtoint i64* %lnhJL to i64
  %lnhJN = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhJO = bitcast i64* %lnhJN to i64*
  %lnhJP = load i64, i64* %lnhJO, !tbaa !5
  %lnhJQ = icmp ugt i64 %lnhJM, %lnhJP
  %lnhJR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhJQ, i1 0 )
  br i1 %lnhJR, label %cfnm, label %cfnl
cfnl:
  %lnhJS = load i64*, i64** %Sp_Var
  %lnhJT = getelementptr inbounds i64, i64* %lnhJS, i32 2
  %lnhJU = bitcast i64* %lnhJT to double*
  %lnhJV = load double, double* %lnhJU, !tbaa !2
  %lnhJW = load i64*, i64** %Sp_Var
  %lnhJX = getelementptr inbounds i64, i64* %lnhJW, i32 1
  %lnhJY = bitcast i64* %lnhJX to double*
  %lnhJZ = load double, double* %lnhJY, !tbaa !2
  %lnhK2 = load i64, i64* %R1_Var
  %lnhK3 = add i64 %lnhK2, 7
  %lnhK4 = inttoptr i64 %lnhK3 to double*
  %lnhK5 = load double, double* %lnhK4, !tbaa !4
  %lnhK6 = fmul double %lnhJZ, %lnhK5
  %lnhK7 = fadd double %lnhJV, %lnhK6
  store double %lnhK7, double* %ls7Rw
  %lnhK9 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhK8 = load i64*, i64** %Hp_Var
  %lnhKa = getelementptr inbounds i64, i64* %lnhK8, i32 -1
  store i64 %lnhK9, i64* %lnhKa, !tbaa !3
  %lnhKc = load double, double* %ls7Rw
  %lnhKb = load i64*, i64** %Hp_Var
  %lnhKd = getelementptr inbounds i64, i64* %lnhKb, i32 0
  %lnhKe = bitcast i64* %lnhKd to double*
  store double %lnhKc, double* %lnhKe, !tbaa !3
  %lnhKg = load i64*, i64** %Hp_Var
  %lnhKh = ptrtoint i64* %lnhKg to i64
  %lnhKi = add i64 %lnhKh, -7
  store i64 %lnhKi, i64* %R1_Var
  %lnhKj = load i64*, i64** %Sp_Var
  %lnhKk = getelementptr inbounds i64, i64* %lnhKj, i32 3
  %lnhKl = ptrtoint i64* %lnhKk to i64
  %lnhKm = inttoptr i64 %lnhKl to i64*
  store i64* %lnhKm, i64** %Sp_Var
  %lnhKn = load i64*, i64** %Sp_Var
  %lnhKo = getelementptr inbounds i64, i64* %lnhKn, i32 0
  %lnhKp = bitcast i64* %lnhKo to i64*
  %lnhKq = load i64, i64* %lnhKp, !tbaa !2
  %lnhKr = inttoptr i64 %lnhKq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhKs = load i64*, i64** %Sp_Var
  %lnhKt = load i64*, i64** %Hp_Var
  %lnhKu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhKr( i64* %Base_Arg, i64* %lnhKs, i64* %lnhKt, i64 %lnhKu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfnm:
  %lnhKv = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhKv, !tbaa !5
  %lnhKw = load i64, i64* %R1_Var
  store i64 %lnhKw, i64* %R1_Var
  %lnhKx = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhKy = load i64*, i64** %Sp_Var
  %lnhKz = load i64*, i64** %Hp_Var
  %lnhKA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhKx( i64* %Base_Arg, i64* %lnhKy, i64* %lnhKz, i64 %lnhKA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ro_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ro_info$def to i8*)
define internal ghccc void @s7Ro_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nhKB:
  %ls7QT = alloca i64, i32 1
  %ls7QW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfnx
cfnx:
  %lnhKC = load i64*, i64** %Sp_Var
  %lnhKD = getelementptr inbounds i64, i64* %lnhKC, i32 -5
  %lnhKE = ptrtoint i64* %lnhKD to i64
  %lnhKF = icmp ult i64 %lnhKE, %SpLim_Arg
  %lnhKG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhKF, i1 0 )
  br i1 %lnhKG, label %cfnR, label %cfnS
cfnS:
  %lnhKI = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhKH = load i64*, i64** %Sp_Var
  %lnhKJ = getelementptr inbounds i64, i64* %lnhKH, i32 -2
  store i64 %lnhKI, i64* %lnhKJ, !tbaa !2
  %lnhKL = load i64, i64* %R1_Var
  %lnhKK = load i64*, i64** %Sp_Var
  %lnhKM = getelementptr inbounds i64, i64* %lnhKK, i32 -1
  store i64 %lnhKL, i64* %lnhKM, !tbaa !2
  %lnhKO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnu_info$def to i64
  %lnhKN = load i64*, i64** %Sp_Var
  %lnhKP = getelementptr inbounds i64, i64* %lnhKN, i32 -5
  store i64 %lnhKO, i64* %lnhKP, !tbaa !2
  %lnhKS = load i64, i64* %R1_Var
  %lnhKT = add i64 %lnhKS, 16
  %lnhKU = inttoptr i64 %lnhKT to i64*
  %lnhKV = load i64, i64* %lnhKU, !tbaa !4
  store i64 %lnhKV, i64* %ls7QT
  %lnhKY = load i64, i64* %R1_Var
  %lnhKZ = add i64 %lnhKY, 24
  %lnhL0 = inttoptr i64 %lnhKZ to i64*
  %lnhL1 = load i64, i64* %lnhL0, !tbaa !4
  store i64 %lnhL1, i64* %ls7QW
  %lnhL4 = load i64, i64* %R1_Var
  %lnhL5 = add i64 %lnhL4, 32
  %lnhL6 = inttoptr i64 %lnhL5 to i64*
  %lnhL7 = load i64, i64* %lnhL6, !tbaa !4
  store i64 %lnhL7, i64* %R1_Var
  %lnhL9 = load i64, i64* %ls7QT
  %lnhL8 = load i64*, i64** %Sp_Var
  %lnhLa = getelementptr inbounds i64, i64* %lnhL8, i32 -4
  store i64 %lnhL9, i64* %lnhLa, !tbaa !2
  %lnhLc = load i64, i64* %ls7QW
  %lnhLb = load i64*, i64** %Sp_Var
  %lnhLd = getelementptr inbounds i64, i64* %lnhLb, i32 -3
  store i64 %lnhLc, i64* %lnhLd, !tbaa !2
  %lnhLe = load i64*, i64** %Sp_Var
  %lnhLf = getelementptr inbounds i64, i64* %lnhLe, i32 -5
  %lnhLg = ptrtoint i64* %lnhLf to i64
  %lnhLh = inttoptr i64 %lnhLg to i64*
  store i64* %lnhLh, i64** %Sp_Var
  %lnhLi = load i64, i64* %R1_Var
  %lnhLj = and i64 %lnhLi, 7
  %lnhLk = icmp ne i64 %lnhLj, 0
  br i1 %lnhLk, label %ufnZ, label %cfnv
cfnv:
  %lnhLm = load i64, i64* %R1_Var
  %lnhLn = inttoptr i64 %lnhLm to i64*
  %lnhLo = load i64, i64* %lnhLn, !tbaa !4
  %lnhLp = inttoptr i64 %lnhLo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhLq = load i64*, i64** %Sp_Var
  %lnhLr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhLp( i64* %Base_Arg, i64* %lnhLq, i64* %Hp_Arg, i64 %lnhLr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufnZ:
  %lnhLs = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhLt = load i64*, i64** %Sp_Var
  %lnhLu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhLs( i64* %Base_Arg, i64* %lnhLt, i64* %Hp_Arg, i64 %lnhLu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfnR:
  %lnhLv = load i64, i64* %R1_Var
  store i64 %lnhLv, i64* %R1_Var
  %lnhLw = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhLx = bitcast i64* %lnhLw to i64*
  %lnhLy = load i64, i64* %lnhLx, !tbaa !5
  %lnhLz = inttoptr i64 %lnhLy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhLA = load i64*, i64** %Sp_Var
  %lnhLB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhLz( i64* %Base_Arg, i64* %lnhLA, i64* %Hp_Arg, i64 %lnhLB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfnu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnu_info$def to i8*)
define internal ghccc void @cfnu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nhLC:
  %ls7Rh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfnu
cfnu:
  %lnhLD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnA_info$def to i64
  %lnhLE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhLD, i64* %lnhLE, !tbaa !2
  %lnhLH = load i64, i64* %R1_Var
  %lnhLI = add i64 %lnhLH, 7
  %lnhLJ = inttoptr i64 %lnhLI to double*
  %lnhLK = load double, double* %lnhLJ, !tbaa !4
  store double %lnhLK, double* %ls7Rh
  %lnhLL = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhLM = bitcast i64* %lnhLL to i64*
  %lnhLN = load i64, i64* %lnhLM, !tbaa !2
  store i64 %lnhLN, i64* %R1_Var
  %lnhLO = load double, double* %ls7Rh
  %lnhLP = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnhLQ = bitcast i64* %lnhLP to double*
  store double %lnhLO, double* %lnhLQ, !tbaa !2
  %lnhLR = load i64, i64* %R1_Var
  %lnhLS = and i64 %lnhLR, 7
  %lnhLT = icmp ne i64 %lnhLS, 0
  br i1 %lnhLT, label %ufnY, label %cfnB
cfnB:
  %lnhLV = load i64, i64* %R1_Var
  %lnhLW = inttoptr i64 %lnhLV to i64*
  %lnhLX = load i64, i64* %lnhLW, !tbaa !4
  %lnhLY = inttoptr i64 %lnhLX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhLZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhLY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhLZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufnY:
  %lnhM0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhM1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhM0( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhM1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfnA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnA_info$def to i8*)
define internal ghccc void @cfnA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nhM2:
  %ls7Rj = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfnA
cfnA:
  %lnhM3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnF_info$def to i64
  %lnhM4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhM3, i64* %lnhM4, !tbaa !2
  %lnhM7 = load i64, i64* %R1_Var
  %lnhM8 = add i64 %lnhM7, 7
  %lnhM9 = inttoptr i64 %lnhM8 to double*
  %lnhMa = load double, double* %lnhM9, !tbaa !4
  store double %lnhMa, double* %ls7Rj
  %lnhMb = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhMc = bitcast i64* %lnhMb to i64*
  %lnhMd = load i64, i64* %lnhMc, !tbaa !2
  store i64 %lnhMd, i64* %R1_Var
  %lnhMe = load double, double* %ls7Rj
  %lnhMf = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnhMg = bitcast i64* %lnhMf to double*
  store double %lnhMe, double* %lnhMg, !tbaa !2
  %lnhMh = load i64, i64* %R1_Var
  %lnhMi = and i64 %lnhMh, 7
  %lnhMj = icmp ne i64 %lnhMi, 0
  br i1 %lnhMj, label %ufo0, label %cfnG
cfnG:
  %lnhMl = load i64, i64* %R1_Var
  %lnhMm = inttoptr i64 %lnhMl to i64*
  %lnhMn = load i64, i64* %lnhMm, !tbaa !4
  %lnhMo = inttoptr i64 %lnhMn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhMp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhMo( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhMp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufo0:
  %lnhMq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhMr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhMq( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhMr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfnF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfnF_info$def to i8*)
define internal ghccc void @cfnF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhMs:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Rn = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfnF
cfnF:
  %lnhMt = load i64*, i64** %Hp_Var
  %lnhMu = getelementptr inbounds i64, i64* %lnhMt, i32 2
  %lnhMv = ptrtoint i64* %lnhMu to i64
  %lnhMw = inttoptr i64 %lnhMv to i64*
  store i64* %lnhMw, i64** %Hp_Var
  %lnhMx = load i64*, i64** %Hp_Var
  %lnhMy = ptrtoint i64* %lnhMx to i64
  %lnhMz = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhMA = bitcast i64* %lnhMz to i64*
  %lnhMB = load i64, i64* %lnhMA, !tbaa !5
  %lnhMC = icmp ugt i64 %lnhMy, %lnhMB
  %lnhMD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhMC, i1 0 )
  br i1 %lnhMD, label %cfnX, label %cfnW
cfnW:
  %lnhME = load i64*, i64** %Sp_Var
  %lnhMF = getelementptr inbounds i64, i64* %lnhME, i32 2
  %lnhMG = bitcast i64* %lnhMF to double*
  %lnhMH = load double, double* %lnhMG, !tbaa !2
  %lnhMI = load i64*, i64** %Sp_Var
  %lnhMJ = getelementptr inbounds i64, i64* %lnhMI, i32 1
  %lnhMK = bitcast i64* %lnhMJ to double*
  %lnhML = load double, double* %lnhMK, !tbaa !2
  %lnhMO = load i64, i64* %R1_Var
  %lnhMP = add i64 %lnhMO, 7
  %lnhMQ = inttoptr i64 %lnhMP to double*
  %lnhMR = load double, double* %lnhMQ, !tbaa !4
  %lnhMS = fmul double %lnhML, %lnhMR
  %lnhMT = fadd double %lnhMH, %lnhMS
  store double %lnhMT, double* %ls7Rn
  %lnhMV = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhMU = load i64*, i64** %Hp_Var
  %lnhMW = getelementptr inbounds i64, i64* %lnhMU, i32 -1
  store i64 %lnhMV, i64* %lnhMW, !tbaa !3
  %lnhMY = load double, double* %ls7Rn
  %lnhMX = load i64*, i64** %Hp_Var
  %lnhMZ = getelementptr inbounds i64, i64* %lnhMX, i32 0
  %lnhN0 = bitcast i64* %lnhMZ to double*
  store double %lnhMY, double* %lnhN0, !tbaa !3
  %lnhN2 = load i64*, i64** %Hp_Var
  %lnhN3 = ptrtoint i64* %lnhN2 to i64
  %lnhN4 = add i64 %lnhN3, -7
  store i64 %lnhN4, i64* %R1_Var
  %lnhN5 = load i64*, i64** %Sp_Var
  %lnhN6 = getelementptr inbounds i64, i64* %lnhN5, i32 3
  %lnhN7 = ptrtoint i64* %lnhN6 to i64
  %lnhN8 = inttoptr i64 %lnhN7 to i64*
  store i64* %lnhN8, i64** %Sp_Var
  %lnhN9 = load i64*, i64** %Sp_Var
  %lnhNa = getelementptr inbounds i64, i64* %lnhN9, i32 0
  %lnhNb = bitcast i64* %lnhNa to i64*
  %lnhNc = load i64, i64* %lnhNb, !tbaa !2
  %lnhNd = inttoptr i64 %lnhNc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhNe = load i64*, i64** %Sp_Var
  %lnhNf = load i64*, i64** %Hp_Var
  %lnhNg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhNd( i64* %Base_Arg, i64* %lnhNe, i64* %lnhNf, i64 %lnhNg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfnX:
  %lnhNh = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhNh, !tbaa !5
  %lnhNi = load i64, i64* %R1_Var
  store i64 %lnhNi, i64* %R1_Var
  %lnhNj = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhNk = load i64*, i64** %Sp_Var
  %lnhNl = load i64*, i64** %Hp_Var
  %lnhNm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhNj( i64* %Base_Arg, i64* %lnhNk, i64* %lnhNl, i64 %lnhNm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7QN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QN_info$def to i8*)
define internal ghccc void @s7QN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nhNn:
  %ls7Q9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfo1
cfo1:
  %lnhNo = load i64*, i64** %Sp_Var
  %lnhNp = getelementptr inbounds i64, i64* %lnhNo, i32 -6
  %lnhNq = ptrtoint i64* %lnhNp to i64
  %lnhNr = icmp ult i64 %lnhNq, %SpLim_Arg
  %lnhNs = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhNr, i1 0 )
  br i1 %lnhNs, label %cfo3, label %cfo4
cfo4:
  %lnhNu = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhNt = load i64*, i64** %Sp_Var
  %lnhNv = getelementptr inbounds i64, i64* %lnhNt, i32 -2
  store i64 %lnhNu, i64* %lnhNv, !tbaa !2
  %lnhNx = load i64, i64* %R1_Var
  %lnhNw = load i64*, i64** %Sp_Var
  %lnhNy = getelementptr inbounds i64, i64* %lnhNw, i32 -1
  store i64 %lnhNx, i64* %lnhNy, !tbaa !2
  %lnhNA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkT_info$def to i64
  %lnhNz = load i64*, i64** %Sp_Var
  %lnhNB = getelementptr inbounds i64, i64* %lnhNz, i32 -4
  store i64 %lnhNA, i64* %lnhNB, !tbaa !2
  %lnhNE = load i64, i64* %R1_Var
  %lnhNF = add i64 %lnhNE, 16
  %lnhNG = inttoptr i64 %lnhNF to i64*
  %lnhNH = load i64, i64* %lnhNG, !tbaa !4
  store i64 %lnhNH, i64* %ls7Q9
  %lnhNK = load i64, i64* %R1_Var
  %lnhNL = add i64 %lnhNK, 24
  %lnhNM = inttoptr i64 %lnhNL to i64*
  %lnhNN = load i64, i64* %lnhNM, !tbaa !4
  store i64 %lnhNN, i64* %R1_Var
  %lnhNP = load i64, i64* %ls7Q9
  %lnhNO = load i64*, i64** %Sp_Var
  %lnhNQ = getelementptr inbounds i64, i64* %lnhNO, i32 -3
  store i64 %lnhNP, i64* %lnhNQ, !tbaa !2
  %lnhNR = load i64*, i64** %Sp_Var
  %lnhNS = getelementptr inbounds i64, i64* %lnhNR, i32 -4
  %lnhNT = ptrtoint i64* %lnhNS to i64
  %lnhNU = inttoptr i64 %lnhNT to i64*
  store i64* %lnhNU, i64** %Sp_Var
  %lnhNV = load i64, i64* %R1_Var
  %lnhNW = and i64 %lnhNV, 7
  %lnhNX = icmp ne i64 %lnhNW, 0
  br i1 %lnhNX, label %ufoa, label %cfkU
cfkU:
  %lnhNZ = load i64, i64* %R1_Var
  %lnhO0 = inttoptr i64 %lnhNZ to i64*
  %lnhO1 = load i64, i64* %lnhO0, !tbaa !4
  %lnhO2 = inttoptr i64 %lnhO1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhO3 = load i64*, i64** %Sp_Var
  %lnhO4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhO2( i64* %Base_Arg, i64* %lnhO3, i64* %Hp_Arg, i64 %lnhO4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufoa:
  %lnhO5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhO6 = load i64*, i64** %Sp_Var
  %lnhO7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhO5( i64* %Base_Arg, i64* %lnhO6, i64* %Hp_Arg, i64 %lnhO7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfo3:
  %lnhO8 = load i64, i64* %R1_Var
  store i64 %lnhO8, i64* %R1_Var
  %lnhO9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhOa = bitcast i64* %lnhO9 to i64*
  %lnhOb = load i64, i64* %lnhOa, !tbaa !5
  %lnhOc = inttoptr i64 %lnhOb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhOd = load i64*, i64** %Sp_Var
  %lnhOe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhOc( i64* %Base_Arg, i64* %lnhOd, i64* %Hp_Arg, i64 %lnhOe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfkT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkT_info$def to i8*)
define internal ghccc void @cfkT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nhOf:
  %ls7QP = alloca i64, i32 1
  %ls7QQ = alloca i64, i32 1
  %ls7QR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfkT
cfkT:
  %lnhOh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkY_info$def to i64
  %lnhOg = load i64*, i64** %Sp_Var
  %lnhOi = getelementptr inbounds i64, i64* %lnhOg, i32 -2
  store i64 %lnhOh, i64* %lnhOi, !tbaa !2
  %lnhOl = load i64, i64* %R1_Var
  %lnhOm = add i64 %lnhOl, 7
  %lnhOn = inttoptr i64 %lnhOm to i64*
  %lnhOo = load i64, i64* %lnhOn, !tbaa !4
  store i64 %lnhOo, i64* %ls7QP
  %lnhOr = load i64, i64* %R1_Var
  %lnhOs = add i64 %lnhOr, 15
  %lnhOt = inttoptr i64 %lnhOs to i64*
  %lnhOu = load i64, i64* %lnhOt, !tbaa !4
  store i64 %lnhOu, i64* %ls7QQ
  %lnhOx = load i64, i64* %R1_Var
  %lnhOy = add i64 %lnhOx, 23
  %lnhOz = inttoptr i64 %lnhOy to i64*
  %lnhOA = load i64, i64* %lnhOz, !tbaa !4
  store i64 %lnhOA, i64* %ls7QR
  %lnhOB = load i64*, i64** %Sp_Var
  %lnhOC = getelementptr inbounds i64, i64* %lnhOB, i32 1
  %lnhOD = bitcast i64* %lnhOC to i64*
  %lnhOE = load i64, i64* %lnhOD, !tbaa !2
  store i64 %lnhOE, i64* %R1_Var
  %lnhOG = load i64, i64* %ls7QR
  %lnhOF = load i64*, i64** %Sp_Var
  %lnhOH = getelementptr inbounds i64, i64* %lnhOF, i32 -1
  store i64 %lnhOG, i64* %lnhOH, !tbaa !2
  %lnhOJ = load i64, i64* %ls7QQ
  %lnhOI = load i64*, i64** %Sp_Var
  %lnhOK = getelementptr inbounds i64, i64* %lnhOI, i32 0
  store i64 %lnhOJ, i64* %lnhOK, !tbaa !2
  %lnhOM = load i64, i64* %ls7QP
  %lnhOL = load i64*, i64** %Sp_Var
  %lnhON = getelementptr inbounds i64, i64* %lnhOL, i32 1
  store i64 %lnhOM, i64* %lnhON, !tbaa !2
  %lnhOO = load i64*, i64** %Sp_Var
  %lnhOP = getelementptr inbounds i64, i64* %lnhOO, i32 -2
  %lnhOQ = ptrtoint i64* %lnhOP to i64
  %lnhOR = inttoptr i64 %lnhOQ to i64*
  store i64* %lnhOR, i64** %Sp_Var
  %lnhOS = load i64, i64* %R1_Var
  %lnhOT = and i64 %lnhOS, 7
  %lnhOU = icmp ne i64 %lnhOT, 0
  br i1 %lnhOU, label %ufo9, label %cfkZ
cfkZ:
  %lnhOW = load i64, i64* %R1_Var
  %lnhOX = inttoptr i64 %lnhOW to i64*
  %lnhOY = load i64, i64* %lnhOX, !tbaa !4
  %lnhOZ = inttoptr i64 %lnhOY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhP0 = load i64*, i64** %Sp_Var
  %lnhP1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhOZ( i64* %Base_Arg, i64* %lnhP0, i64* %Hp_Arg, i64 %lnhP1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufo9:
  %lnhP2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkY_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhP3 = load i64*, i64** %Sp_Var
  %lnhP4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhP2( i64* %Base_Arg, i64* %lnhP3, i64* %Hp_Arg, i64 %lnhP4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfkY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfkY_info$def to i8*)
define internal ghccc void @cfkY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
nhP5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7QT = alloca i64, i32 1
  %ls7QU = alloca i64, i32 1
  %ls7QV = alloca i64, i32 1
  %ls7QR = alloca i64, i32 1
  %ls7QQ = alloca i64, i32 1
  %ls7QP = alloca i64, i32 1
  %lcfl3 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfkY
cfkY:
  %lnhP6 = load i64*, i64** %Hp_Var
  %lnhP7 = getelementptr inbounds i64, i64* %lnhP6, i32 27
  %lnhP8 = ptrtoint i64* %lnhP7 to i64
  %lnhP9 = inttoptr i64 %lnhP8 to i64*
  store i64* %lnhP9, i64** %Hp_Var
  %lnhPa = load i64*, i64** %Hp_Var
  %lnhPb = ptrtoint i64* %lnhPa to i64
  %lnhPc = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhPd = bitcast i64* %lnhPc to i64*
  %lnhPe = load i64, i64* %lnhPd, !tbaa !5
  %lnhPf = icmp ugt i64 %lnhPb, %lnhPe
  %lnhPg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhPf, i1 0 )
  br i1 %lnhPg, label %cfo8, label %cfo7
cfo7:
  %lnhPj = load i64, i64* %R1_Var
  %lnhPk = add i64 %lnhPj, 7
  %lnhPl = inttoptr i64 %lnhPk to i64*
  %lnhPm = load i64, i64* %lnhPl, !tbaa !4
  store i64 %lnhPm, i64* %ls7QT
  %lnhPp = load i64, i64* %R1_Var
  %lnhPq = add i64 %lnhPp, 15
  %lnhPr = inttoptr i64 %lnhPq to i64*
  %lnhPs = load i64, i64* %lnhPr, !tbaa !4
  store i64 %lnhPs, i64* %ls7QU
  %lnhPv = load i64, i64* %R1_Var
  %lnhPw = add i64 %lnhPv, 23
  %lnhPx = inttoptr i64 %lnhPw to i64*
  %lnhPy = load i64, i64* %lnhPx, !tbaa !4
  store i64 %lnhPy, i64* %ls7QV
  %lnhPA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QW_info$def to i64
  %lnhPz = load i64*, i64** %Hp_Var
  %lnhPB = getelementptr inbounds i64, i64* %lnhPz, i32 -26
  store i64 %lnhPA, i64* %lnhPB, !tbaa !3
  %lnhPD = load i64, i64* %ls7QV
  %lnhPC = load i64*, i64** %Hp_Var
  %lnhPE = getelementptr inbounds i64, i64* %lnhPC, i32 -24
  store i64 %lnhPD, i64* %lnhPE, !tbaa !3
  %lnhPF = load i64*, i64** %Sp_Var
  %lnhPG = getelementptr inbounds i64, i64* %lnhPF, i32 1
  %lnhPH = bitcast i64* %lnhPG to i64*
  %lnhPI = load i64, i64* %lnhPH, !tbaa !2
  store i64 %lnhPI, i64* %ls7QR
  %lnhPK = load i64, i64* %ls7QR
  %lnhPJ = load i64*, i64** %Hp_Var
  %lnhPL = getelementptr inbounds i64, i64* %lnhPJ, i32 -23
  store i64 %lnhPK, i64* %lnhPL, !tbaa !3
  %lnhPN = load i64, i64* %ls7QU
  %lnhPM = load i64*, i64** %Hp_Var
  %lnhPO = getelementptr inbounds i64, i64* %lnhPM, i32 -22
  store i64 %lnhPN, i64* %lnhPO, !tbaa !3
  %lnhPP = load i64*, i64** %Sp_Var
  %lnhPQ = getelementptr inbounds i64, i64* %lnhPP, i32 2
  %lnhPR = bitcast i64* %lnhPQ to i64*
  %lnhPS = load i64, i64* %lnhPR, !tbaa !2
  store i64 %lnhPS, i64* %ls7QQ
  %lnhPU = load i64, i64* %ls7QQ
  %lnhPT = load i64*, i64** %Hp_Var
  %lnhPV = getelementptr inbounds i64, i64* %lnhPT, i32 -21
  store i64 %lnhPU, i64* %lnhPV, !tbaa !3
  %lnhPX = load i64, i64* %ls7QT
  %lnhPW = load i64*, i64** %Hp_Var
  %lnhPY = getelementptr inbounds i64, i64* %lnhPW, i32 -20
  store i64 %lnhPX, i64* %lnhPY, !tbaa !3
  %lnhPZ = load i64*, i64** %Sp_Var
  %lnhQ0 = getelementptr inbounds i64, i64* %lnhPZ, i32 3
  %lnhQ1 = bitcast i64* %lnhQ0 to i64*
  %lnhQ2 = load i64, i64* %lnhQ1, !tbaa !2
  store i64 %lnhQ2, i64* %ls7QP
  %lnhQ4 = load i64, i64* %ls7QP
  %lnhQ3 = load i64*, i64** %Hp_Var
  %lnhQ5 = getelementptr inbounds i64, i64* %lnhQ3, i32 -19
  store i64 %lnhQ4, i64* %lnhQ5, !tbaa !3
  %lnhQ7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RG_info$def to i64
  %lnhQ6 = load i64*, i64** %Hp_Var
  %lnhQ8 = getelementptr inbounds i64, i64* %lnhQ6, i32 -18
  store i64 %lnhQ7, i64* %lnhQ8, !tbaa !3
  %lnhQa = load i64, i64* %ls7QV
  %lnhQ9 = load i64*, i64** %Hp_Var
  %lnhQb = getelementptr inbounds i64, i64* %lnhQ9, i32 -16
  store i64 %lnhQa, i64* %lnhQb, !tbaa !3
  %lnhQc = load i64*, i64** %Hp_Var
  %lnhQd = getelementptr inbounds i64, i64* %lnhQc, i32 -26
  %lnhQe = ptrtoint i64* %lnhQd to i64
  store i64 %lnhQe, i64* %lcfl3
  %lnhQg = load i64, i64* %lcfl3
  %lnhQf = load i64*, i64** %Hp_Var
  %lnhQh = getelementptr inbounds i64, i64* %lnhQf, i32 -15
  store i64 %lnhQg, i64* %lnhQh, !tbaa !3
  %lnhQj = load i64, i64* %ls7QR
  %lnhQi = load i64*, i64** %Hp_Var
  %lnhQk = getelementptr inbounds i64, i64* %lnhQi, i32 -14
  store i64 %lnhQj, i64* %lnhQk, !tbaa !3
  %lnhQm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Rx_info$def to i64
  %lnhQl = load i64*, i64** %Hp_Var
  %lnhQn = getelementptr inbounds i64, i64* %lnhQl, i32 -13
  store i64 %lnhQm, i64* %lnhQn, !tbaa !3
  %lnhQp = load i64, i64* %ls7QU
  %lnhQo = load i64*, i64** %Hp_Var
  %lnhQq = getelementptr inbounds i64, i64* %lnhQo, i32 -11
  store i64 %lnhQp, i64* %lnhQq, !tbaa !3
  %lnhQs = load i64, i64* %lcfl3
  %lnhQr = load i64*, i64** %Hp_Var
  %lnhQt = getelementptr inbounds i64, i64* %lnhQr, i32 -10
  store i64 %lnhQs, i64* %lnhQt, !tbaa !3
  %lnhQv = load i64, i64* %ls7QQ
  %lnhQu = load i64*, i64** %Hp_Var
  %lnhQw = getelementptr inbounds i64, i64* %lnhQu, i32 -9
  store i64 %lnhQv, i64* %lnhQw, !tbaa !3
  %lnhQy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ro_info$def to i64
  %lnhQx = load i64*, i64** %Hp_Var
  %lnhQz = getelementptr inbounds i64, i64* %lnhQx, i32 -8
  store i64 %lnhQy, i64* %lnhQz, !tbaa !3
  %lnhQB = load i64, i64* %ls7QT
  %lnhQA = load i64*, i64** %Hp_Var
  %lnhQC = getelementptr inbounds i64, i64* %lnhQA, i32 -6
  store i64 %lnhQB, i64* %lnhQC, !tbaa !3
  %lnhQE = load i64, i64* %lcfl3
  %lnhQD = load i64*, i64** %Hp_Var
  %lnhQF = getelementptr inbounds i64, i64* %lnhQD, i32 -5
  store i64 %lnhQE, i64* %lnhQF, !tbaa !3
  %lnhQH = load i64, i64* %ls7QP
  %lnhQG = load i64*, i64** %Hp_Var
  %lnhQI = getelementptr inbounds i64, i64* %lnhQG, i32 -4
  store i64 %lnhQH, i64* %lnhQI, !tbaa !3
  %lnhQK = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnhQJ = load i64*, i64** %Hp_Var
  %lnhQL = getelementptr inbounds i64, i64* %lnhQJ, i32 -3
  store i64 %lnhQK, i64* %lnhQL, !tbaa !3
  %lnhQN = load i64*, i64** %Hp_Var
  %lnhQO = getelementptr inbounds i64, i64* %lnhQN, i32 -8
  %lnhQP = ptrtoint i64* %lnhQO to i64
  %lnhQM = load i64*, i64** %Hp_Var
  %lnhQQ = getelementptr inbounds i64, i64* %lnhQM, i32 -2
  store i64 %lnhQP, i64* %lnhQQ, !tbaa !3
  %lnhQS = load i64*, i64** %Hp_Var
  %lnhQT = getelementptr inbounds i64, i64* %lnhQS, i32 -13
  %lnhQU = ptrtoint i64* %lnhQT to i64
  %lnhQR = load i64*, i64** %Hp_Var
  %lnhQV = getelementptr inbounds i64, i64* %lnhQR, i32 -1
  store i64 %lnhQU, i64* %lnhQV, !tbaa !3
  %lnhQX = load i64*, i64** %Hp_Var
  %lnhQY = getelementptr inbounds i64, i64* %lnhQX, i32 -18
  %lnhQZ = ptrtoint i64* %lnhQY to i64
  %lnhQW = load i64*, i64** %Hp_Var
  %lnhR0 = getelementptr inbounds i64, i64* %lnhQW, i32 0
  store i64 %lnhQZ, i64* %lnhR0, !tbaa !3
  %lnhR2 = load i64*, i64** %Hp_Var
  %lnhR3 = ptrtoint i64* %lnhR2 to i64
  %lnhR4 = add i64 %lnhR3, -23
  store i64 %lnhR4, i64* %R1_Var
  %lnhR5 = load i64*, i64** %Sp_Var
  %lnhR6 = getelementptr inbounds i64, i64* %lnhR5, i32 4
  %lnhR7 = ptrtoint i64* %lnhR6 to i64
  %lnhR8 = inttoptr i64 %lnhR7 to i64*
  store i64* %lnhR8, i64** %Sp_Var
  %lnhR9 = load i64*, i64** %Sp_Var
  %lnhRa = getelementptr inbounds i64, i64* %lnhR9, i32 0
  %lnhRb = bitcast i64* %lnhRa to i64*
  %lnhRc = load i64, i64* %lnhRb, !tbaa !2
  %lnhRd = inttoptr i64 %lnhRc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhRe = load i64*, i64** %Sp_Var
  %lnhRf = load i64*, i64** %Hp_Var
  %lnhRg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhRd( i64* %Base_Arg, i64* %lnhRe, i64* %lnhRf, i64 %lnhRg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfo8:
  %lnhRh = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 216, i64* %lnhRh, !tbaa !5
  %lnhRi = load i64, i64* %R1_Var
  store i64 %lnhRi, i64* %R1_Var
  %lnhRj = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhRk = load i64*, i64** %Sp_Var
  %lnhRl = load i64*, i64** %Hp_Var
  %lnhRm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhRj( i64* %Base_Arg, i64* %lnhRk, i64* %lnhRl, i64 %lnhRm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7S3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7S3_info$def to i8*)
define internal ghccc void @s7S3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nhRn:
  %ls7Py = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfow
cfow:
  %lnhRo = load i64*, i64** %Sp_Var
  %lnhRp = getelementptr inbounds i64, i64* %lnhRo, i32 -4
  %lnhRq = ptrtoint i64* %lnhRp to i64
  %lnhRr = icmp ult i64 %lnhRq, %SpLim_Arg
  %lnhRs = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhRr, i1 0 )
  br i1 %lnhRs, label %cfoD, label %cfoE
cfoE:
  %lnhRu = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhRt = load i64*, i64** %Sp_Var
  %lnhRv = getelementptr inbounds i64, i64* %lnhRt, i32 -2
  store i64 %lnhRu, i64* %lnhRv, !tbaa !2
  %lnhRx = load i64, i64* %R1_Var
  %lnhRw = load i64*, i64** %Sp_Var
  %lnhRy = getelementptr inbounds i64, i64* %lnhRw, i32 -1
  store i64 %lnhRx, i64* %lnhRy, !tbaa !2
  %lnhRA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfot_info$def to i64
  %lnhRz = load i64*, i64** %Sp_Var
  %lnhRB = getelementptr inbounds i64, i64* %lnhRz, i32 -4
  store i64 %lnhRA, i64* %lnhRB, !tbaa !2
  %lnhRE = load i64, i64* %R1_Var
  %lnhRF = add i64 %lnhRE, 24
  %lnhRG = inttoptr i64 %lnhRF to double*
  %lnhRH = load double, double* %lnhRG, !tbaa !4
  store double %lnhRH, double* %ls7Py
  %lnhRK = load i64, i64* %R1_Var
  %lnhRL = add i64 %lnhRK, 16
  %lnhRM = inttoptr i64 %lnhRL to i64*
  %lnhRN = load i64, i64* %lnhRM, !tbaa !4
  store i64 %lnhRN, i64* %R1_Var
  %lnhRP = load double, double* %ls7Py
  %lnhRO = load i64*, i64** %Sp_Var
  %lnhRQ = getelementptr inbounds i64, i64* %lnhRO, i32 -3
  %lnhRR = bitcast i64* %lnhRQ to double*
  store double %lnhRP, double* %lnhRR, !tbaa !2
  %lnhRS = load i64*, i64** %Sp_Var
  %lnhRT = getelementptr inbounds i64, i64* %lnhRS, i32 -4
  %lnhRU = ptrtoint i64* %lnhRT to i64
  %lnhRV = inttoptr i64 %lnhRU to i64*
  store i64* %lnhRV, i64** %Sp_Var
  %lnhRW = load i64, i64* %R1_Var
  %lnhRX = and i64 %lnhRW, 7
  %lnhRY = icmp ne i64 %lnhRX, 0
  br i1 %lnhRY, label %ufoI, label %cfou
cfou:
  %lnhS0 = load i64, i64* %R1_Var
  %lnhS1 = inttoptr i64 %lnhS0 to i64*
  %lnhS2 = load i64, i64* %lnhS1, !tbaa !4
  %lnhS3 = inttoptr i64 %lnhS2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhS4 = load i64*, i64** %Sp_Var
  %lnhS5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhS3( i64* %Base_Arg, i64* %lnhS4, i64* %Hp_Arg, i64 %lnhS5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufoI:
  %lnhS6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfot_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhS7 = load i64*, i64** %Sp_Var
  %lnhS8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhS6( i64* %Base_Arg, i64* %lnhS7, i64* %Hp_Arg, i64 %lnhS8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfoD:
  %lnhS9 = load i64, i64* %R1_Var
  store i64 %lnhS9, i64* %R1_Var
  %lnhSa = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhSb = bitcast i64* %lnhSa to i64*
  %lnhSc = load i64, i64* %lnhSb, !tbaa !5
  %lnhSd = inttoptr i64 %lnhSc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhSe = load i64*, i64** %Sp_Var
  %lnhSf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhSd( i64* %Base_Arg, i64* %lnhSe, i64* %Hp_Arg, i64 %lnhSf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfot_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfot_info$def to i8*)
define internal ghccc void @cfot_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nhSg:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7S2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfot
cfot:
  %lnhSh = load i64*, i64** %Hp_Var
  %lnhSi = getelementptr inbounds i64, i64* %lnhSh, i32 2
  %lnhSj = ptrtoint i64* %lnhSi to i64
  %lnhSk = inttoptr i64 %lnhSj to i64*
  store i64* %lnhSk, i64** %Hp_Var
  %lnhSl = load i64*, i64** %Hp_Var
  %lnhSm = ptrtoint i64* %lnhSl to i64
  %lnhSn = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhSo = bitcast i64* %lnhSn to i64*
  %lnhSp = load i64, i64* %lnhSo, !tbaa !5
  %lnhSq = icmp ugt i64 %lnhSm, %lnhSp
  %lnhSr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhSq, i1 0 )
  br i1 %lnhSr, label %cfoH, label %cfoG
cfoG:
  %lnhSs = load i64*, i64** %Sp_Var
  %lnhSt = getelementptr inbounds i64, i64* %lnhSs, i32 1
  %lnhSu = bitcast i64* %lnhSt to double*
  %lnhSv = load double, double* %lnhSu, !tbaa !2
  %lnhSy = load i64, i64* %R1_Var
  %lnhSz = add i64 %lnhSy, 7
  %lnhSA = inttoptr i64 %lnhSz to double*
  %lnhSB = load double, double* %lnhSA, !tbaa !4
  %lnhSC = fmul double %lnhSv, %lnhSB
  store double %lnhSC, double* %ls7S2
  %lnhSE = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhSD = load i64*, i64** %Hp_Var
  %lnhSF = getelementptr inbounds i64, i64* %lnhSD, i32 -1
  store i64 %lnhSE, i64* %lnhSF, !tbaa !3
  %lnhSH = load double, double* %ls7S2
  %lnhSG = load i64*, i64** %Hp_Var
  %lnhSI = getelementptr inbounds i64, i64* %lnhSG, i32 0
  %lnhSJ = bitcast i64* %lnhSI to double*
  store double %lnhSH, double* %lnhSJ, !tbaa !3
  %lnhSL = load i64*, i64** %Hp_Var
  %lnhSM = ptrtoint i64* %lnhSL to i64
  %lnhSN = add i64 %lnhSM, -7
  store i64 %lnhSN, i64* %R1_Var
  %lnhSO = load i64*, i64** %Sp_Var
  %lnhSP = getelementptr inbounds i64, i64* %lnhSO, i32 2
  %lnhSQ = ptrtoint i64* %lnhSP to i64
  %lnhSR = inttoptr i64 %lnhSQ to i64*
  store i64* %lnhSR, i64** %Sp_Var
  %lnhSS = load i64*, i64** %Sp_Var
  %lnhST = getelementptr inbounds i64, i64* %lnhSS, i32 0
  %lnhSU = bitcast i64* %lnhST to i64*
  %lnhSV = load i64, i64* %lnhSU, !tbaa !2
  %lnhSW = inttoptr i64 %lnhSV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhSX = load i64*, i64** %Sp_Var
  %lnhSY = load i64*, i64** %Hp_Var
  %lnhSZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhSW( i64* %Base_Arg, i64* %lnhSX, i64* %lnhSY, i64 %lnhSZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfoH:
  %lnhT0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhT0, !tbaa !5
  %lnhT1 = load i64, i64* %R1_Var
  store i64 %lnhT1, i64* %R1_Var
  %lnhT2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhT3 = load i64*, i64** %Sp_Var
  %lnhT4 = load i64*, i64** %Hp_Var
  %lnhT5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhT2( i64* %Base_Arg, i64* %lnhT3, i64* %lnhT4, i64 %lnhT5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7RZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RZ_info$def to i8*)
define internal ghccc void @s7RZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nhT6:
  %ls7Py = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfoQ
cfoQ:
  %lnhT7 = load i64*, i64** %Sp_Var
  %lnhT8 = getelementptr inbounds i64, i64* %lnhT7, i32 -4
  %lnhT9 = ptrtoint i64* %lnhT8 to i64
  %lnhTa = icmp ult i64 %lnhT9, %SpLim_Arg
  %lnhTb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhTa, i1 0 )
  br i1 %lnhTb, label %cfoX, label %cfoY
cfoY:
  %lnhTd = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhTc = load i64*, i64** %Sp_Var
  %lnhTe = getelementptr inbounds i64, i64* %lnhTc, i32 -2
  store i64 %lnhTd, i64* %lnhTe, !tbaa !2
  %lnhTg = load i64, i64* %R1_Var
  %lnhTf = load i64*, i64** %Sp_Var
  %lnhTh = getelementptr inbounds i64, i64* %lnhTf, i32 -1
  store i64 %lnhTg, i64* %lnhTh, !tbaa !2
  %lnhTj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfoN_info$def to i64
  %lnhTi = load i64*, i64** %Sp_Var
  %lnhTk = getelementptr inbounds i64, i64* %lnhTi, i32 -4
  store i64 %lnhTj, i64* %lnhTk, !tbaa !2
  %lnhTn = load i64, i64* %R1_Var
  %lnhTo = add i64 %lnhTn, 24
  %lnhTp = inttoptr i64 %lnhTo to double*
  %lnhTq = load double, double* %lnhTp, !tbaa !4
  store double %lnhTq, double* %ls7Py
  %lnhTt = load i64, i64* %R1_Var
  %lnhTu = add i64 %lnhTt, 16
  %lnhTv = inttoptr i64 %lnhTu to i64*
  %lnhTw = load i64, i64* %lnhTv, !tbaa !4
  store i64 %lnhTw, i64* %R1_Var
  %lnhTy = load double, double* %ls7Py
  %lnhTx = load i64*, i64** %Sp_Var
  %lnhTz = getelementptr inbounds i64, i64* %lnhTx, i32 -3
  %lnhTA = bitcast i64* %lnhTz to double*
  store double %lnhTy, double* %lnhTA, !tbaa !2
  %lnhTB = load i64*, i64** %Sp_Var
  %lnhTC = getelementptr inbounds i64, i64* %lnhTB, i32 -4
  %lnhTD = ptrtoint i64* %lnhTC to i64
  %lnhTE = inttoptr i64 %lnhTD to i64*
  store i64* %lnhTE, i64** %Sp_Var
  %lnhTF = load i64, i64* %R1_Var
  %lnhTG = and i64 %lnhTF, 7
  %lnhTH = icmp ne i64 %lnhTG, 0
  br i1 %lnhTH, label %ufp2, label %cfoO
cfoO:
  %lnhTJ = load i64, i64* %R1_Var
  %lnhTK = inttoptr i64 %lnhTJ to i64*
  %lnhTL = load i64, i64* %lnhTK, !tbaa !4
  %lnhTM = inttoptr i64 %lnhTL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhTN = load i64*, i64** %Sp_Var
  %lnhTO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhTM( i64* %Base_Arg, i64* %lnhTN, i64* %Hp_Arg, i64 %lnhTO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufp2:
  %lnhTP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfoN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhTQ = load i64*, i64** %Sp_Var
  %lnhTR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhTP( i64* %Base_Arg, i64* %lnhTQ, i64* %Hp_Arg, i64 %lnhTR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfoX:
  %lnhTS = load i64, i64* %R1_Var
  store i64 %lnhTS, i64* %R1_Var
  %lnhTT = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhTU = bitcast i64* %lnhTT to i64*
  %lnhTV = load i64, i64* %lnhTU, !tbaa !5
  %lnhTW = inttoptr i64 %lnhTV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhTX = load i64*, i64** %Sp_Var
  %lnhTY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhTW( i64* %Base_Arg, i64* %lnhTX, i64* %Hp_Arg, i64 %lnhTY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfoN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfoN_info$def to i8*)
define internal ghccc void @cfoN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nhTZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7RY = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfoN
cfoN:
  %lnhU0 = load i64*, i64** %Hp_Var
  %lnhU1 = getelementptr inbounds i64, i64* %lnhU0, i32 2
  %lnhU2 = ptrtoint i64* %lnhU1 to i64
  %lnhU3 = inttoptr i64 %lnhU2 to i64*
  store i64* %lnhU3, i64** %Hp_Var
  %lnhU4 = load i64*, i64** %Hp_Var
  %lnhU5 = ptrtoint i64* %lnhU4 to i64
  %lnhU6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhU7 = bitcast i64* %lnhU6 to i64*
  %lnhU8 = load i64, i64* %lnhU7, !tbaa !5
  %lnhU9 = icmp ugt i64 %lnhU5, %lnhU8
  %lnhUa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhU9, i1 0 )
  br i1 %lnhUa, label %cfp1, label %cfp0
cfp0:
  %lnhUb = load i64*, i64** %Sp_Var
  %lnhUc = getelementptr inbounds i64, i64* %lnhUb, i32 1
  %lnhUd = bitcast i64* %lnhUc to double*
  %lnhUe = load double, double* %lnhUd, !tbaa !2
  %lnhUh = load i64, i64* %R1_Var
  %lnhUi = add i64 %lnhUh, 7
  %lnhUj = inttoptr i64 %lnhUi to double*
  %lnhUk = load double, double* %lnhUj, !tbaa !4
  %lnhUl = fmul double %lnhUe, %lnhUk
  store double %lnhUl, double* %ls7RY
  %lnhUn = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhUm = load i64*, i64** %Hp_Var
  %lnhUo = getelementptr inbounds i64, i64* %lnhUm, i32 -1
  store i64 %lnhUn, i64* %lnhUo, !tbaa !3
  %lnhUq = load double, double* %ls7RY
  %lnhUp = load i64*, i64** %Hp_Var
  %lnhUr = getelementptr inbounds i64, i64* %lnhUp, i32 0
  %lnhUs = bitcast i64* %lnhUr to double*
  store double %lnhUq, double* %lnhUs, !tbaa !3
  %lnhUu = load i64*, i64** %Hp_Var
  %lnhUv = ptrtoint i64* %lnhUu to i64
  %lnhUw = add i64 %lnhUv, -7
  store i64 %lnhUw, i64* %R1_Var
  %lnhUx = load i64*, i64** %Sp_Var
  %lnhUy = getelementptr inbounds i64, i64* %lnhUx, i32 2
  %lnhUz = ptrtoint i64* %lnhUy to i64
  %lnhUA = inttoptr i64 %lnhUz to i64*
  store i64* %lnhUA, i64** %Sp_Var
  %lnhUB = load i64*, i64** %Sp_Var
  %lnhUC = getelementptr inbounds i64, i64* %lnhUB, i32 0
  %lnhUD = bitcast i64* %lnhUC to i64*
  %lnhUE = load i64, i64* %lnhUD, !tbaa !2
  %lnhUF = inttoptr i64 %lnhUE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhUG = load i64*, i64** %Sp_Var
  %lnhUH = load i64*, i64** %Hp_Var
  %lnhUI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhUF( i64* %Base_Arg, i64* %lnhUG, i64* %lnhUH, i64 %lnhUI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfp1:
  %lnhUJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhUJ, !tbaa !5
  %lnhUK = load i64, i64* %R1_Var
  store i64 %lnhUK, i64* %R1_Var
  %lnhUL = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhUM = load i64*, i64** %Sp_Var
  %lnhUN = load i64*, i64** %Hp_Var
  %lnhUO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhUL( i64* %Base_Arg, i64* %lnhUM, i64* %lnhUN, i64 %lnhUO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7RV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RV_info$def to i8*)
define internal ghccc void @s7RV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nhUP:
  %ls7Py = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfpa
cfpa:
  %lnhUQ = load i64*, i64** %Sp_Var
  %lnhUR = getelementptr inbounds i64, i64* %lnhUQ, i32 -4
  %lnhUS = ptrtoint i64* %lnhUR to i64
  %lnhUT = icmp ult i64 %lnhUS, %SpLim_Arg
  %lnhUU = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhUT, i1 0 )
  br i1 %lnhUU, label %cfph, label %cfpi
cfpi:
  %lnhUW = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhUV = load i64*, i64** %Sp_Var
  %lnhUX = getelementptr inbounds i64, i64* %lnhUV, i32 -2
  store i64 %lnhUW, i64* %lnhUX, !tbaa !2
  %lnhUZ = load i64, i64* %R1_Var
  %lnhUY = load i64*, i64** %Sp_Var
  %lnhV0 = getelementptr inbounds i64, i64* %lnhUY, i32 -1
  store i64 %lnhUZ, i64* %lnhV0, !tbaa !2
  %lnhV2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfp7_info$def to i64
  %lnhV1 = load i64*, i64** %Sp_Var
  %lnhV3 = getelementptr inbounds i64, i64* %lnhV1, i32 -4
  store i64 %lnhV2, i64* %lnhV3, !tbaa !2
  %lnhV6 = load i64, i64* %R1_Var
  %lnhV7 = add i64 %lnhV6, 24
  %lnhV8 = inttoptr i64 %lnhV7 to double*
  %lnhV9 = load double, double* %lnhV8, !tbaa !4
  store double %lnhV9, double* %ls7Py
  %lnhVc = load i64, i64* %R1_Var
  %lnhVd = add i64 %lnhVc, 16
  %lnhVe = inttoptr i64 %lnhVd to i64*
  %lnhVf = load i64, i64* %lnhVe, !tbaa !4
  store i64 %lnhVf, i64* %R1_Var
  %lnhVh = load double, double* %ls7Py
  %lnhVg = load i64*, i64** %Sp_Var
  %lnhVi = getelementptr inbounds i64, i64* %lnhVg, i32 -3
  %lnhVj = bitcast i64* %lnhVi to double*
  store double %lnhVh, double* %lnhVj, !tbaa !2
  %lnhVk = load i64*, i64** %Sp_Var
  %lnhVl = getelementptr inbounds i64, i64* %lnhVk, i32 -4
  %lnhVm = ptrtoint i64* %lnhVl to i64
  %lnhVn = inttoptr i64 %lnhVm to i64*
  store i64* %lnhVn, i64** %Sp_Var
  %lnhVo = load i64, i64* %R1_Var
  %lnhVp = and i64 %lnhVo, 7
  %lnhVq = icmp ne i64 %lnhVp, 0
  br i1 %lnhVq, label %ufpm, label %cfp8
cfp8:
  %lnhVs = load i64, i64* %R1_Var
  %lnhVt = inttoptr i64 %lnhVs to i64*
  %lnhVu = load i64, i64* %lnhVt, !tbaa !4
  %lnhVv = inttoptr i64 %lnhVu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhVw = load i64*, i64** %Sp_Var
  %lnhVx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhVv( i64* %Base_Arg, i64* %lnhVw, i64* %Hp_Arg, i64 %lnhVx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufpm:
  %lnhVy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfp7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhVz = load i64*, i64** %Sp_Var
  %lnhVA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhVy( i64* %Base_Arg, i64* %lnhVz, i64* %Hp_Arg, i64 %lnhVA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfph:
  %lnhVB = load i64, i64* %R1_Var
  store i64 %lnhVB, i64* %R1_Var
  %lnhVC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhVD = bitcast i64* %lnhVC to i64*
  %lnhVE = load i64, i64* %lnhVD, !tbaa !5
  %lnhVF = inttoptr i64 %lnhVE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhVG = load i64*, i64** %Sp_Var
  %lnhVH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhVF( i64* %Base_Arg, i64* %lnhVG, i64* %Hp_Arg, i64 %lnhVH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfp7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfp7_info$def to i8*)
define internal ghccc void @cfp7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nhVI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7RU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfp7
cfp7:
  %lnhVJ = load i64*, i64** %Hp_Var
  %lnhVK = getelementptr inbounds i64, i64* %lnhVJ, i32 2
  %lnhVL = ptrtoint i64* %lnhVK to i64
  %lnhVM = inttoptr i64 %lnhVL to i64*
  store i64* %lnhVM, i64** %Hp_Var
  %lnhVN = load i64*, i64** %Hp_Var
  %lnhVO = ptrtoint i64* %lnhVN to i64
  %lnhVP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhVQ = bitcast i64* %lnhVP to i64*
  %lnhVR = load i64, i64* %lnhVQ, !tbaa !5
  %lnhVS = icmp ugt i64 %lnhVO, %lnhVR
  %lnhVT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhVS, i1 0 )
  br i1 %lnhVT, label %cfpl, label %cfpk
cfpk:
  %lnhVU = load i64*, i64** %Sp_Var
  %lnhVV = getelementptr inbounds i64, i64* %lnhVU, i32 1
  %lnhVW = bitcast i64* %lnhVV to double*
  %lnhVX = load double, double* %lnhVW, !tbaa !2
  %lnhW0 = load i64, i64* %R1_Var
  %lnhW1 = add i64 %lnhW0, 7
  %lnhW2 = inttoptr i64 %lnhW1 to double*
  %lnhW3 = load double, double* %lnhW2, !tbaa !4
  %lnhW4 = fmul double %lnhVX, %lnhW3
  store double %lnhW4, double* %ls7RU
  %lnhW6 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnhW5 = load i64*, i64** %Hp_Var
  %lnhW7 = getelementptr inbounds i64, i64* %lnhW5, i32 -1
  store i64 %lnhW6, i64* %lnhW7, !tbaa !3
  %lnhW9 = load double, double* %ls7RU
  %lnhW8 = load i64*, i64** %Hp_Var
  %lnhWa = getelementptr inbounds i64, i64* %lnhW8, i32 0
  %lnhWb = bitcast i64* %lnhWa to double*
  store double %lnhW9, double* %lnhWb, !tbaa !3
  %lnhWd = load i64*, i64** %Hp_Var
  %lnhWe = ptrtoint i64* %lnhWd to i64
  %lnhWf = add i64 %lnhWe, -7
  store i64 %lnhWf, i64* %R1_Var
  %lnhWg = load i64*, i64** %Sp_Var
  %lnhWh = getelementptr inbounds i64, i64* %lnhWg, i32 2
  %lnhWi = ptrtoint i64* %lnhWh to i64
  %lnhWj = inttoptr i64 %lnhWi to i64*
  store i64* %lnhWj, i64** %Sp_Var
  %lnhWk = load i64*, i64** %Sp_Var
  %lnhWl = getelementptr inbounds i64, i64* %lnhWk, i32 0
  %lnhWm = bitcast i64* %lnhWl to i64*
  %lnhWn = load i64, i64* %lnhWm, !tbaa !2
  %lnhWo = inttoptr i64 %lnhWn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhWp = load i64*, i64** %Sp_Var
  %lnhWq = load i64*, i64** %Hp_Var
  %lnhWr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhWo( i64* %Base_Arg, i64* %lnhWp, i64* %lnhWq, i64 %lnhWr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfpl:
  %lnhWs = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnhWs, !tbaa !5
  %lnhWt = load i64, i64* %R1_Var
  store i64 %lnhWt, i64* %R1_Var
  %lnhWu = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhWv = load i64*, i64** %Sp_Var
  %lnhWw = load i64*, i64** %Hp_Var
  %lnhWx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhWu( i64* %Base_Arg, i64* %lnhWv, i64* %lnhWw, i64 %lnhWx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7RH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RH_info$def to i8*)
define internal ghccc void @s7RH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nhWy:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfpp
cfpp:
  %lnhWz = load i64*, i64** %Sp_Var
  %lnhWA = getelementptr inbounds i64, i64* %lnhWz, i32 -5
  %lnhWB = ptrtoint i64* %lnhWA to i64
  %lnhWC = icmp ult i64 %lnhWB, %SpLim_Arg
  %lnhWD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhWC, i1 0 )
  br i1 %lnhWD, label %cfpq, label %cfq6
cfq6:
  %lnhWF = ptrtoint i8* @stg_upd_frame_info to i64
  %lnhWE = load i64*, i64** %Sp_Var
  %lnhWG = getelementptr inbounds i64, i64* %lnhWE, i32 -2
  store i64 %lnhWF, i64* %lnhWG, !tbaa !2
  %lnhWI = load i64, i64* %R1_Var
  %lnhWH = load i64*, i64** %Sp_Var
  %lnhWJ = getelementptr inbounds i64, i64* %lnhWH, i32 -1
  store i64 %lnhWI, i64* %lnhWJ, !tbaa !2
  %lnhWN = load i64, i64* %R1_Var
  %lnhWO = add i64 %lnhWN, 24
  %lnhWP = inttoptr i64 %lnhWO to double*
  %lnhWQ = load double, double* %lnhWP, !tbaa !4
  %lnhWK = load i64*, i64** %Sp_Var
  %lnhWR = getelementptr inbounds i64, i64* %lnhWK, i32 -4
  %lnhWS = bitcast i64* %lnhWR to double*
  store double %lnhWQ, double* %lnhWS, !tbaa !2
  %lnhWW = load i64, i64* %R1_Var
  %lnhWX = add i64 %lnhWW, 16
  %lnhWY = inttoptr i64 %lnhWX to i64*
  %lnhWZ = load i64, i64* %lnhWY, !tbaa !4
  %lnhWT = load i64*, i64** %Sp_Var
  %lnhX0 = getelementptr inbounds i64, i64* %lnhWT, i32 -3
  store i64 %lnhWZ, i64* %lnhX0, !tbaa !2
  %lnhX1 = load i64*, i64** %Sp_Var
  %lnhX2 = getelementptr inbounds i64, i64* %lnhX1, i32 -4
  %lnhX3 = ptrtoint i64* %lnhX2 to i64
  %lnhX4 = inttoptr i64 %lnhX3 to i64*
  store i64* %lnhX4, i64** %Sp_Var
  %lnhX5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfpF$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhX6 = load i64*, i64** %Sp_Var
  %lnhX7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhX5( i64* %Base_Arg, i64* %lnhX6, i64* %Hp_Arg, i64 %lnhX7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfpq:
  %lnhX8 = load i64, i64* %R1_Var
  store i64 %lnhX8, i64* %R1_Var
  %lnhX9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnhXa = bitcast i64* %lnhX9 to i64*
  %lnhXb = load i64, i64* %lnhXa, !tbaa !5
  %lnhXc = inttoptr i64 %lnhXb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhXd = load i64*, i64** %Sp_Var
  %lnhXe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhXc( i64* %Base_Arg, i64* %lnhXd, i64* %Hp_Arg, i64 %lnhXe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfpF = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfpF$def to i8*)
define internal ghccc void @_cfpF$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nhXf:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfpF
cfpF:
  %lnhXh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpH_info$def to i64
  %lnhXg = load i64*, i64** %Sp_Var
  %lnhXi = getelementptr inbounds i64, i64* %lnhXg, i32 -1
  store i64 %lnhXh, i64* %lnhXi, !tbaa !2
  %lnhXj = load i64*, i64** %Sp_Var
  %lnhXk = getelementptr inbounds i64, i64* %lnhXj, i32 1
  %lnhXl = bitcast i64* %lnhXk to i64*
  %lnhXm = load i64, i64* %lnhXl, !tbaa !2
  store i64 %lnhXm, i64* %R1_Var
  %lnhXn = load i64*, i64** %Sp_Var
  %lnhXo = getelementptr inbounds i64, i64* %lnhXn, i32 -1
  %lnhXp = ptrtoint i64* %lnhXo to i64
  %lnhXq = inttoptr i64 %lnhXp to i64*
  store i64* %lnhXq, i64** %Sp_Var
  %lnhXr = load i64, i64* %R1_Var
  %lnhXs = and i64 %lnhXr, 7
  %lnhXt = icmp ne i64 %lnhXs, 0
  br i1 %lnhXt, label %ufqc, label %cfpJ
cfpJ:
  %lnhXv = load i64, i64* %R1_Var
  %lnhXw = inttoptr i64 %lnhXv to i64*
  %lnhXx = load i64, i64* %lnhXw, !tbaa !4
  %lnhXy = inttoptr i64 %lnhXx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhXz = load i64*, i64** %Sp_Var
  %lnhXA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhXy( i64* %Base_Arg, i64* %lnhXz, i64* %Hp_Arg, i64 %lnhXA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufqc:
  %lnhXB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhXC = load i64*, i64** %Sp_Var
  %lnhXD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhXB( i64* %Base_Arg, i64* %lnhXC, i64* %Hp_Arg, i64 %lnhXD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfpH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpH_info$def to i8*)
define internal ghccc void @cfpH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhXE:
  %ls7S8 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfpH
cfpH:
  %lnhXF = load i64, i64* %R1_Var
  %lnhXG = and i64 %lnhXF, 7
  switch i64 %lnhXG, label %ufqd [i64 1, label %ufqd
i64 2, label %cfpU]
ufqd:
  %lnhXH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfps_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhXI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhXH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhXI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfpU:
  %lnhXJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpS_info$def to i64
  %lnhXK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnhXJ, i64* %lnhXK, !tbaa !2
  %lnhXN = load i64, i64* %R1_Var
  %lnhXO = add i64 %lnhXN, 14
  %lnhXP = inttoptr i64 %lnhXO to i64*
  %lnhXQ = load i64, i64* %lnhXP, !tbaa !4
  store i64 %lnhXQ, i64* %ls7S8
  %lnhXT = load i64, i64* %R1_Var
  %lnhXU = add i64 %lnhXT, 6
  %lnhXV = inttoptr i64 %lnhXU to i64*
  %lnhXW = load i64, i64* %lnhXV, !tbaa !4
  store i64 %lnhXW, i64* %R1_Var
  %lnhXX = load i64, i64* %ls7S8
  %lnhXY = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lnhXX, i64* %lnhXY, !tbaa !2
  %lnhXZ = load i64, i64* %R1_Var
  %lnhY0 = and i64 %lnhXZ, 7
  %lnhY1 = icmp ne i64 %lnhY0, 0
  br i1 %lnhY1, label %ufqe, label %cfpV
cfpV:
  %lnhY3 = load i64, i64* %R1_Var
  %lnhY4 = inttoptr i64 %lnhY3 to i64*
  %lnhY5 = load i64, i64* %lnhY4, !tbaa !4
  %lnhY6 = inttoptr i64 %lnhY5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhY7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhY6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhY7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufqe:
  %lnhY8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhY9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhY8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnhY9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfpS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfpS_info$def to i8*)
define internal ghccc void @cfpS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 66, i32 30, i32 0}>
{
nhYa:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfpS
cfpS:
  %lnhYb = load i64, i64* %R1_Var
  %lnhYc = and i64 %lnhYb, -8
  %lnhYd = inttoptr i64 %lnhYc to i64*
  %lnhYe = load i64, i64* %lnhYd, !tbaa !1
  %lnhYf = add i64 %lnhYe, -4
  %lnhYg = inttoptr i64 %lnhYf to i32*
  %lnhYh = load i32, i32* %lnhYg, !tbaa !1
  %lnhYi = zext i32 %lnhYh to i64
  switch i64 %lnhYi, label %cfq1 [i64 7, label %cfq5]
cfq1:
  %lnhYk = load i64*, i64** %Sp_Var
  %lnhYl = getelementptr inbounds i64, i64* %lnhYk, i32 2
  %lnhYm = bitcast i64* %lnhYl to i64*
  %lnhYn = load i64, i64* %lnhYm, !tbaa !2
  %lnhYj = load i64*, i64** %Sp_Var
  %lnhYo = getelementptr inbounds i64, i64* %lnhYj, i32 2
  store i64 %lnhYn, i64* %lnhYo, !tbaa !2
  %lnhYp = load i64*, i64** %Sp_Var
  %lnhYq = getelementptr inbounds i64, i64* %lnhYp, i32 1
  %lnhYr = ptrtoint i64* %lnhYq to i64
  %lnhYs = inttoptr i64 %lnhYr to i64*
  store i64* %lnhYs, i64** %Sp_Var
  %lnhYt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfpF$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhYu = load i64*, i64** %Sp_Var
  %lnhYv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhYt( i64* %Base_Arg, i64* %lnhYu, i64* %Hp_Arg, i64 %lnhYv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfq5:
  %lnhYx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfok_info$def to i64
  %lnhYw = load i64*, i64** %Sp_Var
  %lnhYy = getelementptr inbounds i64, i64* %lnhYw, i32 0
  store i64 %lnhYx, i64* %lnhYy, !tbaa !2
  %lnhYB = load i64, i64* %R1_Var
  %lnhYC = add i64 %lnhYB, 1
  %lnhYD = inttoptr i64 %lnhYC to i64*
  %lnhYE = load i64, i64* %lnhYD, !tbaa !4
  store i64 %lnhYE, i64* %R1_Var
  %lnhYF = load i64, i64* %R1_Var
  %lnhYG = and i64 %lnhYF, 7
  %lnhYH = icmp ne i64 %lnhYG, 0
  br i1 %lnhYH, label %ufqf, label %cfol
cfol:
  %lnhYJ = load i64, i64* %R1_Var
  %lnhYK = inttoptr i64 %lnhYJ to i64*
  %lnhYL = load i64, i64* %lnhYK, !tbaa !4
  %lnhYM = inttoptr i64 %lnhYL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhYN = load i64*, i64** %Sp_Var
  %lnhYO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhYM( i64* %Base_Arg, i64* %lnhYN, i64* %Hp_Arg, i64 %lnhYO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufqf:
  %lnhYP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfok_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnhYQ = load i64*, i64** %Sp_Var
  %lnhYR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnhYP( i64* %Base_Arg, i64* %lnhYQ, i64* %Hp_Arg, i64 %lnhYR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfok_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfok_info$def to i8*)
define internal ghccc void @cfok_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nhYS:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7RP = alloca i64, i32 1
  %ls7RQ = alloca i64, i32 1
  %ls7RR = alloca i64, i32 1
  %ls7Py = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfok
cfok:
  %lnhYT = load i64*, i64** %Hp_Var
  %lnhYU = getelementptr inbounds i64, i64* %lnhYT, i32 16
  %lnhYV = ptrtoint i64* %lnhYU to i64
  %lnhYW = inttoptr i64 %lnhYV to i64*
  store i64* %lnhYW, i64** %Hp_Var
  %lnhYX = load i64*, i64** %Hp_Var
  %lnhYY = ptrtoint i64* %lnhYX to i64
  %lnhYZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnhZ0 = bitcast i64* %lnhYZ to i64*
  %lnhZ1 = load i64, i64* %lnhZ0, !tbaa !5
  %lnhZ2 = icmp ugt i64 %lnhYY, %lnhZ1
  %lnhZ3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnhZ2, i1 0 )
  br i1 %lnhZ3, label %cfpD, label %cfpC
cfpC:
  %lnhZ6 = load i64, i64* %R1_Var
  %lnhZ7 = add i64 %lnhZ6, 7
  %lnhZ8 = inttoptr i64 %lnhZ7 to i64*
  %lnhZ9 = load i64, i64* %lnhZ8, !tbaa !4
  store i64 %lnhZ9, i64* %ls7RP
  %lnhZc = load i64, i64* %R1_Var
  %lnhZd = add i64 %lnhZc, 15
  %lnhZe = inttoptr i64 %lnhZd to i64*
  %lnhZf = load i64, i64* %lnhZe, !tbaa !4
  store i64 %lnhZf, i64* %ls7RQ
  %lnhZi = load i64, i64* %R1_Var
  %lnhZj = add i64 %lnhZi, 23
  %lnhZk = inttoptr i64 %lnhZj to i64*
  %lnhZl = load i64, i64* %lnhZk, !tbaa !4
  store i64 %lnhZl, i64* %ls7RR
  %lnhZn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7S3_info$def to i64
  %lnhZm = load i64*, i64** %Hp_Var
  %lnhZo = getelementptr inbounds i64, i64* %lnhZm, i32 -15
  store i64 %lnhZn, i64* %lnhZo, !tbaa !3
  %lnhZq = load i64, i64* %ls7RR
  %lnhZp = load i64*, i64** %Hp_Var
  %lnhZr = getelementptr inbounds i64, i64* %lnhZp, i32 -13
  store i64 %lnhZq, i64* %lnhZr, !tbaa !3
  %lnhZs = load i64*, i64** %Sp_Var
  %lnhZt = getelementptr inbounds i64, i64* %lnhZs, i32 1
  %lnhZu = bitcast i64* %lnhZt to double*
  %lnhZv = load double, double* %lnhZu, !tbaa !2
  store double %lnhZv, double* %ls7Py
  %lnhZx = load double, double* %ls7Py
  %lnhZw = load i64*, i64** %Hp_Var
  %lnhZy = getelementptr inbounds i64, i64* %lnhZw, i32 -12
  %lnhZz = bitcast i64* %lnhZy to double*
  store double %lnhZx, double* %lnhZz, !tbaa !3
  %lnhZB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RZ_info$def to i64
  %lnhZA = load i64*, i64** %Hp_Var
  %lnhZC = getelementptr inbounds i64, i64* %lnhZA, i32 -11
  store i64 %lnhZB, i64* %lnhZC, !tbaa !3
  %lnhZE = load i64, i64* %ls7RQ
  %lnhZD = load i64*, i64** %Hp_Var
  %lnhZF = getelementptr inbounds i64, i64* %lnhZD, i32 -9
  store i64 %lnhZE, i64* %lnhZF, !tbaa !3
  %lnhZH = load double, double* %ls7Py
  %lnhZG = load i64*, i64** %Hp_Var
  %lnhZI = getelementptr inbounds i64, i64* %lnhZG, i32 -8
  %lnhZJ = bitcast i64* %lnhZI to double*
  store double %lnhZH, double* %lnhZJ, !tbaa !3
  %lnhZL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RV_info$def to i64
  %lnhZK = load i64*, i64** %Hp_Var
  %lnhZM = getelementptr inbounds i64, i64* %lnhZK, i32 -7
  store i64 %lnhZL, i64* %lnhZM, !tbaa !3
  %lnhZO = load i64, i64* %ls7RP
  %lnhZN = load i64*, i64** %Hp_Var
  %lnhZP = getelementptr inbounds i64, i64* %lnhZN, i32 -5
  store i64 %lnhZO, i64* %lnhZP, !tbaa !3
  %lnhZR = load double, double* %ls7Py
  %lnhZQ = load i64*, i64** %Hp_Var
  %lnhZS = getelementptr inbounds i64, i64* %lnhZQ, i32 -4
  %lnhZT = bitcast i64* %lnhZS to double*
  store double %lnhZR, double* %lnhZT, !tbaa !3
  %lnhZV = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnhZU = load i64*, i64** %Hp_Var
  %lnhZW = getelementptr inbounds i64, i64* %lnhZU, i32 -3
  store i64 %lnhZV, i64* %lnhZW, !tbaa !3
  %lnhZY = load i64*, i64** %Hp_Var
  %lnhZZ = getelementptr inbounds i64, i64* %lnhZY, i32 -7
  %lni00 = ptrtoint i64* %lnhZZ to i64
  %lnhZX = load i64*, i64** %Hp_Var
  %lni01 = getelementptr inbounds i64, i64* %lnhZX, i32 -2
  store i64 %lni00, i64* %lni01, !tbaa !3
  %lni03 = load i64*, i64** %Hp_Var
  %lni04 = getelementptr inbounds i64, i64* %lni03, i32 -11
  %lni05 = ptrtoint i64* %lni04 to i64
  %lni02 = load i64*, i64** %Hp_Var
  %lni06 = getelementptr inbounds i64, i64* %lni02, i32 -1
  store i64 %lni05, i64* %lni06, !tbaa !3
  %lni08 = load i64*, i64** %Hp_Var
  %lni09 = getelementptr inbounds i64, i64* %lni08, i32 -15
  %lni0a = ptrtoint i64* %lni09 to i64
  %lni07 = load i64*, i64** %Hp_Var
  %lni0b = getelementptr inbounds i64, i64* %lni07, i32 0
  store i64 %lni0a, i64* %lni0b, !tbaa !3
  %lni0d = load i64*, i64** %Hp_Var
  %lni0e = ptrtoint i64* %lni0d to i64
  %lni0f = add i64 %lni0e, -23
  store i64 %lni0f, i64* %R1_Var
  %lni0g = load i64*, i64** %Sp_Var
  %lni0h = getelementptr inbounds i64, i64* %lni0g, i32 3
  %lni0i = ptrtoint i64* %lni0h to i64
  %lni0j = inttoptr i64 %lni0i to i64*
  store i64* %lni0j, i64** %Sp_Var
  %lni0k = load i64*, i64** %Sp_Var
  %lni0l = getelementptr inbounds i64, i64* %lni0k, i32 0
  %lni0m = bitcast i64* %lni0l to i64*
  %lni0n = load i64, i64* %lni0m, !tbaa !2
  %lni0o = inttoptr i64 %lni0n to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni0p = load i64*, i64** %Sp_Var
  %lni0q = load i64*, i64** %Hp_Var
  %lni0r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni0o( i64* %Base_Arg, i64* %lni0p, i64* %lni0q, i64 %lni0r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfpD:
  %lni0s = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lni0s, !tbaa !5
  %lni0t = load i64, i64* %R1_Var
  store i64 %lni0t, i64* %R1_Var
  %lni0u = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni0v = load i64*, i64** %Sp_Var
  %lni0w = load i64*, i64** %Hp_Var
  %lni0x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni0u( i64* %Base_Arg, i64* %lni0v, i64* %lni0w, i64 %lni0x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfps_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfps_info$def to i8*)
define internal ghccc void @cfps_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
ni0y:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lcfpu = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfps
cfps:
  %lni0z = load i64*, i64** %Hp_Var
  %lni0A = getelementptr inbounds i64, i64* %lni0z, i32 6
  %lni0B = ptrtoint i64* %lni0A to i64
  %lni0C = inttoptr i64 %lni0B to i64*
  store i64* %lni0C, i64** %Hp_Var
  %lni0D = load i64*, i64** %Hp_Var
  %lni0E = ptrtoint i64* %lni0D to i64
  %lni0F = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lni0G = bitcast i64* %lni0F to i64*
  %lni0H = load i64, i64* %lni0G, !tbaa !5
  %lni0I = icmp ugt i64 %lni0E, %lni0H
  %lni0J = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni0I, i1 0 )
  br i1 %lni0J, label %cfpy, label %cfpx
cfpx:
  %lni0L = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lni0K = load i64*, i64** %Hp_Var
  %lni0M = getelementptr inbounds i64, i64* %lni0K, i32 -5
  store i64 %lni0L, i64* %lni0M, !tbaa !3
  %lni0O = load i64*, i64** %Sp_Var
  %lni0P = getelementptr inbounds i64, i64* %lni0O, i32 1
  %lni0Q = bitcast i64* %lni0P to double*
  %lni0R = load double, double* %lni0Q, !tbaa !2
  %lni0N = load i64*, i64** %Hp_Var
  %lni0S = getelementptr inbounds i64, i64* %lni0N, i32 -4
  %lni0T = bitcast i64* %lni0S to double*
  store double %lni0R, double* %lni0T, !tbaa !3
  %lni0V = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lni0U = load i64*, i64** %Hp_Var
  %lni0W = getelementptr inbounds i64, i64* %lni0U, i32 -3
  store i64 %lni0V, i64* %lni0W, !tbaa !3
  %lni0Y = load i64*, i64** %Hp_Var
  %lni0Z = ptrtoint i64* %lni0Y to i64
  %lni10 = add i64 %lni0Z, -39
  store i64 %lni10, i64* %lcfpu
  %lni12 = load i64, i64* %lcfpu
  %lni11 = load i64*, i64** %Hp_Var
  %lni13 = getelementptr inbounds i64, i64* %lni11, i32 -2
  store i64 %lni12, i64* %lni13, !tbaa !3
  %lni15 = load i64, i64* %lcfpu
  %lni14 = load i64*, i64** %Hp_Var
  %lni16 = getelementptr inbounds i64, i64* %lni14, i32 -1
  store i64 %lni15, i64* %lni16, !tbaa !3
  %lni18 = load i64, i64* %lcfpu
  %lni17 = load i64*, i64** %Hp_Var
  %lni19 = getelementptr inbounds i64, i64* %lni17, i32 0
  store i64 %lni18, i64* %lni19, !tbaa !3
  %lni1b = load i64*, i64** %Hp_Var
  %lni1c = ptrtoint i64* %lni1b to i64
  %lni1d = add i64 %lni1c, -23
  store i64 %lni1d, i64* %R1_Var
  %lni1e = load i64*, i64** %Sp_Var
  %lni1f = getelementptr inbounds i64, i64* %lni1e, i32 3
  %lni1g = ptrtoint i64* %lni1f to i64
  %lni1h = inttoptr i64 %lni1g to i64*
  store i64* %lni1h, i64** %Sp_Var
  %lni1i = load i64*, i64** %Sp_Var
  %lni1j = getelementptr inbounds i64, i64* %lni1i, i32 0
  %lni1k = bitcast i64* %lni1j to i64*
  %lni1l = load i64, i64* %lni1k, !tbaa !2
  %lni1m = inttoptr i64 %lni1l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni1n = load i64*, i64** %Sp_Var
  %lni1o = load i64*, i64** %Hp_Var
  %lni1p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni1m( i64* %Base_Arg, i64* %lni1n, i64* %lni1o, i64 %lni1p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfpy:
  %lni1q = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lni1q, !tbaa !5
  %lni1s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfps_info$def to i64
  %lni1r = load i64*, i64** %Sp_Var
  %lni1t = getelementptr inbounds i64, i64* %lni1r, i32 0
  store i64 %lni1s, i64* %lni1t, !tbaa !2
  %lni1u = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni1v = load i64*, i64** %Sp_Var
  %lni1w = load i64*, i64** %Hp_Var
  %lni1x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni1u( i64* %Base_Arg, i64* %lni1v, i64* %lni1w, i64 %lni1x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Sv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sv_info$def to i8*)
define internal ghccc void @s7Sv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni1y:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfqH
cfqH:
  %lni1z = load i64*, i64** %Sp_Var
  %lni1A = getelementptr inbounds i64, i64* %lni1z, i32 -2
  %lni1B = ptrtoint i64* %lni1A to i64
  %lni1C = icmp ult i64 %lni1B, %SpLim_Arg
  %lni1D = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni1C, i1 0 )
  br i1 %lni1D, label %cfqI, label %cfqJ
cfqJ:
  %lni1F = ptrtoint i8* @stg_upd_frame_info to i64
  %lni1E = load i64*, i64** %Sp_Var
  %lni1G = getelementptr inbounds i64, i64* %lni1E, i32 -2
  store i64 %lni1F, i64* %lni1G, !tbaa !2
  %lni1I = load i64, i64* %R1_Var
  %lni1H = load i64*, i64** %Sp_Var
  %lni1J = getelementptr inbounds i64, i64* %lni1H, i32 -1
  store i64 %lni1I, i64* %lni1J, !tbaa !2
  %lni1M = load i64, i64* %R1_Var
  %lni1N = add i64 %lni1M, 24
  %lni1O = inttoptr i64 %lni1N to i64*
  %lni1P = load i64, i64* %lni1O, !tbaa !4
  store i64 %lni1P, i64* %R3_Var
  %lni1S = load i64, i64* %R1_Var
  %lni1T = add i64 %lni1S, 16
  %lni1U = inttoptr i64 %lni1T to i64*
  %lni1V = load i64, i64* %lni1U, !tbaa !4
  store i64 %lni1V, i64* %R2_Var
  %lni1W = load i64*, i64** %Sp_Var
  %lni1X = getelementptr inbounds i64, i64* %lni1W, i32 -2
  %lni1Y = ptrtoint i64* %lni1X to i64
  %lni1Z = inttoptr i64 %lni1Y to i64*
  store i64* %lni1Z, i64** %Sp_Var
  %lni20 = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni21 = load i64*, i64** %Sp_Var
  %lni22 = load i64, i64* %R1_Var
  %lni23 = load i64, i64* %R2_Var
  %lni24 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni20( i64* %Base_Arg, i64* %lni21, i64* %Hp_Arg, i64 %lni22, i64 %lni23, i64 %lni24, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfqI:
  %lni25 = load i64, i64* %R1_Var
  store i64 %lni25, i64* %R1_Var
  %lni26 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni27 = bitcast i64* %lni26 to i64*
  %lni28 = load i64, i64* %lni27, !tbaa !5
  %lni29 = inttoptr i64 %lni28 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni2a = load i64*, i64** %Sp_Var
  %lni2b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni29( i64* %Base_Arg, i64* %lni2a, i64* %Hp_Arg, i64 %lni2b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Su_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Su_info$def to i8*)
define internal ghccc void @s7Su_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni2c:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfqO
cfqO:
  %lni2d = load i64*, i64** %Sp_Var
  %lni2e = getelementptr inbounds i64, i64* %lni2d, i32 -2
  %lni2f = ptrtoint i64* %lni2e to i64
  %lni2g = icmp ult i64 %lni2f, %SpLim_Arg
  %lni2h = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni2g, i1 0 )
  br i1 %lni2h, label %cfqP, label %cfqQ
cfqQ:
  %lni2j = ptrtoint i8* @stg_upd_frame_info to i64
  %lni2i = load i64*, i64** %Sp_Var
  %lni2k = getelementptr inbounds i64, i64* %lni2i, i32 -2
  store i64 %lni2j, i64* %lni2k, !tbaa !2
  %lni2m = load i64, i64* %R1_Var
  %lni2l = load i64*, i64** %Sp_Var
  %lni2n = getelementptr inbounds i64, i64* %lni2l, i32 -1
  store i64 %lni2m, i64* %lni2n, !tbaa !2
  %lni2q = load i64, i64* %R1_Var
  %lni2r = add i64 %lni2q, 24
  %lni2s = inttoptr i64 %lni2r to i64*
  %lni2t = load i64, i64* %lni2s, !tbaa !4
  store i64 %lni2t, i64* %R3_Var
  %lni2w = load i64, i64* %R1_Var
  %lni2x = add i64 %lni2w, 16
  %lni2y = inttoptr i64 %lni2x to i64*
  %lni2z = load i64, i64* %lni2y, !tbaa !4
  store i64 %lni2z, i64* %R2_Var
  %lni2A = load i64*, i64** %Sp_Var
  %lni2B = getelementptr inbounds i64, i64* %lni2A, i32 -2
  %lni2C = ptrtoint i64* %lni2B to i64
  %lni2D = inttoptr i64 %lni2C to i64*
  store i64* %lni2D, i64** %Sp_Var
  %lni2E = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni2F = load i64*, i64** %Sp_Var
  %lni2G = load i64, i64* %R1_Var
  %lni2H = load i64, i64* %R2_Var
  %lni2I = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni2E( i64* %Base_Arg, i64* %lni2F, i64* %Hp_Arg, i64 %lni2G, i64 %lni2H, i64 %lni2I, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfqP:
  %lni2J = load i64, i64* %R1_Var
  store i64 %lni2J, i64* %R1_Var
  %lni2K = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni2L = bitcast i64* %lni2K to i64*
  %lni2M = load i64, i64* %lni2L, !tbaa !5
  %lni2N = inttoptr i64 %lni2M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni2O = load i64*, i64** %Sp_Var
  %lni2P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni2N( i64* %Base_Arg, i64* %lni2O, i64* %Hp_Arg, i64 %lni2P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7St_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7St_info$def to i8*)
define internal ghccc void @s7St_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni2Q:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfqV
cfqV:
  %lni2R = load i64*, i64** %Sp_Var
  %lni2S = getelementptr inbounds i64, i64* %lni2R, i32 -2
  %lni2T = ptrtoint i64* %lni2S to i64
  %lni2U = icmp ult i64 %lni2T, %SpLim_Arg
  %lni2V = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni2U, i1 0 )
  br i1 %lni2V, label %cfqW, label %cfqX
cfqX:
  %lni2X = ptrtoint i8* @stg_upd_frame_info to i64
  %lni2W = load i64*, i64** %Sp_Var
  %lni2Y = getelementptr inbounds i64, i64* %lni2W, i32 -2
  store i64 %lni2X, i64* %lni2Y, !tbaa !2
  %lni30 = load i64, i64* %R1_Var
  %lni2Z = load i64*, i64** %Sp_Var
  %lni31 = getelementptr inbounds i64, i64* %lni2Z, i32 -1
  store i64 %lni30, i64* %lni31, !tbaa !2
  %lni34 = load i64, i64* %R1_Var
  %lni35 = add i64 %lni34, 24
  %lni36 = inttoptr i64 %lni35 to i64*
  %lni37 = load i64, i64* %lni36, !tbaa !4
  store i64 %lni37, i64* %R3_Var
  %lni3a = load i64, i64* %R1_Var
  %lni3b = add i64 %lni3a, 16
  %lni3c = inttoptr i64 %lni3b to i64*
  %lni3d = load i64, i64* %lni3c, !tbaa !4
  store i64 %lni3d, i64* %R2_Var
  %lni3e = load i64*, i64** %Sp_Var
  %lni3f = getelementptr inbounds i64, i64* %lni3e, i32 -2
  %lni3g = ptrtoint i64* %lni3f to i64
  %lni3h = inttoptr i64 %lni3g to i64*
  store i64* %lni3h, i64** %Sp_Var
  %lni3i = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni3j = load i64*, i64** %Sp_Var
  %lni3k = load i64, i64* %R1_Var
  %lni3l = load i64, i64* %R2_Var
  %lni3m = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni3i( i64* %Base_Arg, i64* %lni3j, i64* %Hp_Arg, i64 %lni3k, i64 %lni3l, i64 %lni3m, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfqW:
  %lni3n = load i64, i64* %R1_Var
  store i64 %lni3n, i64* %R1_Var
  %lni3o = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni3p = bitcast i64* %lni3o to i64*
  %lni3q = load i64, i64* %lni3p, !tbaa !5
  %lni3r = inttoptr i64 %lni3q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni3s = load i64*, i64** %Sp_Var
  %lni3t = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni3r( i64* %Base_Arg, i64* %lni3s, i64* %Hp_Arg, i64 %lni3t, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Sg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sg_info$def to i8*)
define internal ghccc void @s7Sg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 4, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sg_info$def to i64)) to i32),i32 0)}>
{
ni3u:
  %ls7Sg = alloca i64, i32 1
  %ls7Pz = alloca i64, i32 1
  %ls7Q9 = alloca i64, i32 1
  %ls7QN = alloca i64, i32 1
  %ls7Ps = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cfr2
cfr2:
  %lni3v = load i64*, i64** %Sp_Var
  %lni3w = getelementptr inbounds i64, i64* %lni3v, i32 -6
  %lni3x = ptrtoint i64* %lni3w to i64
  %lni3y = icmp ult i64 %lni3x, %SpLim_Arg
  %lni3z = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni3y, i1 0 )
  br i1 %lni3z, label %cfr3, label %cfr4
cfr4:
  %lni3B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqt_info$def to i64
  %lni3A = load i64*, i64** %Sp_Var
  %lni3C = getelementptr inbounds i64, i64* %lni3A, i32 -6
  store i64 %lni3B, i64* %lni3C, !tbaa !2
  %lni3D = load i64, i64* %R1_Var
  store i64 %lni3D, i64* %ls7Sg
  %lni3G = load i64, i64* %R1_Var
  %lni3H = add i64 %lni3G, 7
  %lni3I = inttoptr i64 %lni3H to i64*
  %lni3J = load i64, i64* %lni3I, !tbaa !4
  store i64 %lni3J, i64* %ls7Pz
  %lni3M = load i64, i64* %R1_Var
  %lni3N = add i64 %lni3M, 15
  %lni3O = inttoptr i64 %lni3N to i64*
  %lni3P = load i64, i64* %lni3O, !tbaa !4
  store i64 %lni3P, i64* %ls7Q9
  %lni3S = load i64, i64* %R1_Var
  %lni3T = add i64 %lni3S, 23
  %lni3U = inttoptr i64 %lni3T to i64*
  %lni3V = load i64, i64* %lni3U, !tbaa !4
  store i64 %lni3V, i64* %ls7QN
  %lni3Y = load i64, i64* %R1_Var
  %lni3Z = add i64 %lni3Y, 31
  %lni40 = inttoptr i64 %lni3Z to i64*
  %lni41 = load i64, i64* %lni40, !tbaa !4
  store i64 %lni41, i64* %ls7Ps
  %lni42 = load i64, i64* %R2_Var
  store i64 %lni42, i64* %R1_Var
  %lni44 = load i64, i64* %ls7Ps
  %lni43 = load i64*, i64** %Sp_Var
  %lni45 = getelementptr inbounds i64, i64* %lni43, i32 -5
  store i64 %lni44, i64* %lni45, !tbaa !2
  %lni47 = load i64, i64* %ls7Pz
  %lni46 = load i64*, i64** %Sp_Var
  %lni48 = getelementptr inbounds i64, i64* %lni46, i32 -4
  store i64 %lni47, i64* %lni48, !tbaa !2
  %lni4a = load i64, i64* %ls7Q9
  %lni49 = load i64*, i64** %Sp_Var
  %lni4b = getelementptr inbounds i64, i64* %lni49, i32 -3
  store i64 %lni4a, i64* %lni4b, !tbaa !2
  %lni4d = load i64, i64* %ls7QN
  %lni4c = load i64*, i64** %Sp_Var
  %lni4e = getelementptr inbounds i64, i64* %lni4c, i32 -2
  store i64 %lni4d, i64* %lni4e, !tbaa !2
  %lni4g = load i64, i64* %ls7Sg
  %lni4f = load i64*, i64** %Sp_Var
  %lni4h = getelementptr inbounds i64, i64* %lni4f, i32 -1
  store i64 %lni4g, i64* %lni4h, !tbaa !2
  %lni4i = load i64*, i64** %Sp_Var
  %lni4j = getelementptr inbounds i64, i64* %lni4i, i32 -6
  %lni4k = ptrtoint i64* %lni4j to i64
  %lni4l = inttoptr i64 %lni4k to i64*
  store i64* %lni4l, i64** %Sp_Var
  %lni4m = load i64, i64* %R1_Var
  %lni4n = and i64 %lni4m, 7
  %lni4o = icmp ne i64 %lni4n, 0
  br i1 %lni4o, label %ufrc, label %cfqu
cfqu:
  %lni4q = load i64, i64* %R1_Var
  %lni4r = inttoptr i64 %lni4q to i64*
  %lni4s = load i64, i64* %lni4r, !tbaa !4
  %lni4t = inttoptr i64 %lni4s to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni4u = load i64*, i64** %Sp_Var
  %lni4v = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni4t( i64* %Base_Arg, i64* %lni4u, i64* %Hp_Arg, i64 %lni4v, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufrc:
  %lni4w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni4x = load i64*, i64** %Sp_Var
  %lni4y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni4w( i64* %Base_Arg, i64* %lni4x, i64* %Hp_Arg, i64 %lni4y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfr3:
  %lni4z = load i64, i64* %R2_Var
  store i64 %lni4z, i64* %R2_Var
  %lni4A = load i64, i64* %R1_Var
  store i64 %lni4A, i64* %R1_Var
  %lni4B = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lni4C = bitcast i64* %lni4B to i64*
  %lni4D = load i64, i64* %lni4C, !tbaa !5
  %lni4E = inttoptr i64 %lni4D to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni4F = load i64*, i64** %Sp_Var
  %lni4G = load i64, i64* %R1_Var
  %lni4H = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni4E( i64* %Base_Arg, i64* %lni4F, i64* %Hp_Arg, i64 %lni4G, i64 %lni4H, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfqt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqt_info$def to i8*)
define internal ghccc void @cfqt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqt_info$def to i64)) to i32),i32 0)}>
{
ni4I:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Q9 = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  br label %cfqt
cfqt:
  %lni4J = load i64, i64* %R1_Var
  %lni4K = and i64 %lni4J, 7
  switch i64 %lni4K, label %cfqZ [i64 1, label %cfqZ
i64 2, label %cfr0]
cfqZ:
  %lni4L = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lni4M = add i64 %lni4L, 1
  store i64 %lni4M, i64* %R3_Var
  %lni4N = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lni4O = add i64 %lni4N, 1
  store i64 %lni4O, i64* %R2_Var
  %lni4P = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lni4Q = add i64 %lni4P, 1
  store i64 %lni4Q, i64* %R1_Var
  %lni4R = load i64*, i64** %Sp_Var
  %lni4S = getelementptr inbounds i64, i64* %lni4R, i32 6
  %lni4T = ptrtoint i64* %lni4S to i64
  %lni4U = inttoptr i64 %lni4T to i64*
  store i64* %lni4U, i64** %Sp_Var
  %lni4V = load i64*, i64** %Sp_Var
  %lni4W = getelementptr inbounds i64, i64* %lni4V, i32 0
  %lni4X = bitcast i64* %lni4W to i64*
  %lni4Y = load i64, i64* %lni4X, !tbaa !2
  %lni4Z = inttoptr i64 %lni4Y to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni50 = load i64*, i64** %Sp_Var
  %lni51 = load i64, i64* %R1_Var
  %lni52 = load i64, i64* %R2_Var
  %lni53 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni4Z( i64* %Base_Arg, i64* %lni50, i64* %Hp_Arg, i64 %lni51, i64 %lni52, i64 %lni53, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfr0:
  %lni54 = load i64*, i64** %Sp_Var
  %lni55 = getelementptr inbounds i64, i64* %lni54, i32 3
  %lni56 = bitcast i64* %lni55 to i64*
  %lni57 = load i64, i64* %lni56, !tbaa !2
  store i64 %lni57, i64* %ls7Q9
  %lni59 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqz_info$def to i64
  %lni58 = load i64*, i64** %Sp_Var
  %lni5a = getelementptr inbounds i64, i64* %lni58, i32 3
  store i64 %lni59, i64* %lni5a, !tbaa !2
  %lni5b = load i64*, i64** %Sp_Var
  %lni5c = getelementptr inbounds i64, i64* %lni5b, i32 1
  %lni5d = bitcast i64* %lni5c to i64*
  %lni5e = load i64, i64* %lni5d, !tbaa !2
  store i64 %lni5e, i64* %R6_Var
  %lni5f = load i64*, i64** %Sp_Var
  %lni5g = getelementptr inbounds i64, i64* %lni5f, i32 4
  %lni5h = bitcast i64* %lni5g to i64*
  %lni5i = load i64, i64* %lni5h, !tbaa !2
  store i64 %lni5i, i64* %R5_Var
  %lni5j = load i64, i64* %ls7Q9
  store i64 %lni5j, i64* %R4_Var
  %lni5k = load i64*, i64** %Sp_Var
  %lni5l = getelementptr inbounds i64, i64* %lni5k, i32 2
  %lni5m = bitcast i64* %lni5l to i64*
  %lni5n = load i64, i64* %lni5m, !tbaa !2
  store i64 %lni5n, i64* %R3_Var
  %lni5q = load i64, i64* %R1_Var
  %lni5r = add i64 %lni5q, 6
  %lni5s = inttoptr i64 %lni5r to i64*
  %lni5t = load i64, i64* %lni5s, !tbaa !4
  store i64 %lni5t, i64* %R2_Var
  %lni5x = load i64, i64* %R1_Var
  %lni5y = add i64 %lni5x, 14
  %lni5z = inttoptr i64 %lni5y to i64*
  %lni5A = load i64, i64* %lni5z, !tbaa !4
  %lni5u = load i64*, i64** %Sp_Var
  %lni5B = getelementptr inbounds i64, i64* %lni5u, i32 4
  store i64 %lni5A, i64* %lni5B, !tbaa !2
  %lni5C = load i64*, i64** %Sp_Var
  %lni5D = getelementptr inbounds i64, i64* %lni5C, i32 3
  %lni5E = ptrtoint i64* %lni5D to i64
  %lni5F = inttoptr i64 %lni5E to i64*
  store i64* %lni5F, i64** %Sp_Var
  %lni5G = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwlightray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni5H = load i64*, i64** %Sp_Var
  %lni5I = load i64, i64* %R1_Var
  %lni5J = load i64, i64* %R2_Var
  %lni5K = load i64, i64* %R3_Var
  %lni5L = load i64, i64* %R4_Var
  %lni5M = load i64, i64* %R5_Var
  %lni5N = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni5G( i64* %Base_Arg, i64* %lni5H, i64* %Hp_Arg, i64 %lni5I, i64 %lni5J, i64 %lni5K, i64 %lni5L, i64 %lni5M, i64 %lni5N, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfqz_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqz_info$def to i8*)
define internal ghccc void @cfqz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqz_info$def to i64)) to i32),i32 0)}>
{
ni5O:
  %ls7Sn = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ls7Sm = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfqz
cfqz:
  %lni5Q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqB_info$def to i64
  %lni5P = load i64*, i64** %Sp_Var
  %lni5R = getelementptr inbounds i64, i64* %lni5P, i32 -1
  store i64 %lni5Q, i64* %lni5R, !tbaa !2
  %lni5S = load i64, i64* %R2_Var
  store i64 %lni5S, i64* %ls7Sn
  %lni5T = load i64*, i64** %Sp_Var
  %lni5U = getelementptr inbounds i64, i64* %lni5T, i32 1
  %lni5V = bitcast i64* %lni5U to i64*
  %lni5W = load i64, i64* %lni5V, !tbaa !2
  store i64 %lni5W, i64* %R2_Var
  %lni5X = load i64, i64* %R1_Var
  store i64 %lni5X, i64* %ls7Sm
  %lni5Y = load i64*, i64** %Sp_Var
  %lni5Z = getelementptr inbounds i64, i64* %lni5Y, i32 2
  %lni60 = bitcast i64* %lni5Z to i64*
  %lni61 = load i64, i64* %lni60, !tbaa !2
  store i64 %lni61, i64* %R1_Var
  %lni62 = load i64*, i64** %Sp_Var
  %lni63 = getelementptr inbounds i64, i64* %lni62, i32 0
  store i64 %R3_Arg, i64* %lni63, !tbaa !2
  %lni65 = load i64, i64* %ls7Sn
  %lni64 = load i64*, i64** %Sp_Var
  %lni66 = getelementptr inbounds i64, i64* %lni64, i32 1
  store i64 %lni65, i64* %lni66, !tbaa !2
  %lni68 = load i64, i64* %ls7Sm
  %lni67 = load i64*, i64** %Sp_Var
  %lni69 = getelementptr inbounds i64, i64* %lni67, i32 2
  store i64 %lni68, i64* %lni69, !tbaa !2
  %lni6a = load i64*, i64** %Sp_Var
  %lni6b = getelementptr inbounds i64, i64* %lni6a, i32 -1
  %lni6c = ptrtoint i64* %lni6b to i64
  %lni6d = inttoptr i64 %lni6c to i64*
  store i64* %lni6d, i64** %Sp_Var
  %lni6e = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni6f = load i64*, i64** %Sp_Var
  %lni6g = load i64, i64* %R1_Var
  %lni6h = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni6e( i64* %Base_Arg, i64* %lni6f, i64* %Hp_Arg, i64 %lni6g, i64 %lni6h, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfqB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfqB_info$def to i8*)
define internal ghccc void @cfqB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 0}>
{
ni6i:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfqB
cfqB:
  %lni6j = load i64*, i64** %Hp_Var
  %lni6k = getelementptr inbounds i64, i64* %lni6j, i32 12
  %lni6l = ptrtoint i64* %lni6k to i64
  %lni6m = inttoptr i64 %lni6l to i64*
  store i64* %lni6m, i64** %Hp_Var
  %lni6n = load i64*, i64** %Hp_Var
  %lni6o = ptrtoint i64* %lni6n to i64
  %lni6p = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lni6q = bitcast i64* %lni6p to i64*
  %lni6r = load i64, i64* %lni6q, !tbaa !5
  %lni6s = icmp ugt i64 %lni6o, %lni6r
  %lni6t = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni6s, i1 0 )
  br i1 %lni6t, label %cfrb, label %cfra
cfra:
  %lni6v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sv_info$def to i64
  %lni6u = load i64*, i64** %Hp_Var
  %lni6w = getelementptr inbounds i64, i64* %lni6u, i32 -11
  store i64 %lni6v, i64* %lni6w, !tbaa !3
  %lni6y = load i64*, i64** %Sp_Var
  %lni6z = getelementptr inbounds i64, i64* %lni6y, i32 1
  %lni6A = bitcast i64* %lni6z to i64*
  %lni6B = load i64, i64* %lni6A, !tbaa !2
  %lni6x = load i64*, i64** %Hp_Var
  %lni6C = getelementptr inbounds i64, i64* %lni6x, i32 -9
  store i64 %lni6B, i64* %lni6C, !tbaa !3
  %lni6E = load i64, i64* %R3_Var
  %lni6D = load i64*, i64** %Hp_Var
  %lni6F = getelementptr inbounds i64, i64* %lni6D, i32 -8
  store i64 %lni6E, i64* %lni6F, !tbaa !3
  %lni6H = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Su_info$def to i64
  %lni6G = load i64*, i64** %Hp_Var
  %lni6I = getelementptr inbounds i64, i64* %lni6G, i32 -7
  store i64 %lni6H, i64* %lni6I, !tbaa !3
  %lni6K = load i64*, i64** %Sp_Var
  %lni6L = getelementptr inbounds i64, i64* %lni6K, i32 2
  %lni6M = bitcast i64* %lni6L to i64*
  %lni6N = load i64, i64* %lni6M, !tbaa !2
  %lni6J = load i64*, i64** %Hp_Var
  %lni6O = getelementptr inbounds i64, i64* %lni6J, i32 -5
  store i64 %lni6N, i64* %lni6O, !tbaa !3
  %lni6Q = load i64, i64* %R2_Var
  %lni6P = load i64*, i64** %Hp_Var
  %lni6R = getelementptr inbounds i64, i64* %lni6P, i32 -4
  store i64 %lni6Q, i64* %lni6R, !tbaa !3
  %lni6T = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7St_info$def to i64
  %lni6S = load i64*, i64** %Hp_Var
  %lni6U = getelementptr inbounds i64, i64* %lni6S, i32 -3
  store i64 %lni6T, i64* %lni6U, !tbaa !3
  %lni6W = load i64*, i64** %Sp_Var
  %lni6X = getelementptr inbounds i64, i64* %lni6W, i32 3
  %lni6Y = bitcast i64* %lni6X to i64*
  %lni6Z = load i64, i64* %lni6Y, !tbaa !2
  %lni6V = load i64*, i64** %Hp_Var
  %lni70 = getelementptr inbounds i64, i64* %lni6V, i32 -1
  store i64 %lni6Z, i64* %lni70, !tbaa !3
  %lni72 = load i64, i64* %R1_Var
  %lni71 = load i64*, i64** %Hp_Var
  %lni73 = getelementptr inbounds i64, i64* %lni71, i32 0
  store i64 %lni72, i64* %lni73, !tbaa !3
  %lni74 = load i64*, i64** %Hp_Var
  %lni75 = getelementptr inbounds i64, i64* %lni74, i32 -11
  %lni76 = ptrtoint i64* %lni75 to i64
  store i64 %lni76, i64* %R3_Var
  %lni77 = load i64*, i64** %Hp_Var
  %lni78 = getelementptr inbounds i64, i64* %lni77, i32 -7
  %lni79 = ptrtoint i64* %lni78 to i64
  store i64 %lni79, i64* %R2_Var
  %lni7a = load i64*, i64** %Hp_Var
  %lni7b = getelementptr inbounds i64, i64* %lni7a, i32 -3
  %lni7c = ptrtoint i64* %lni7b to i64
  store i64 %lni7c, i64* %R1_Var
  %lni7d = load i64*, i64** %Sp_Var
  %lni7e = getelementptr inbounds i64, i64* %lni7d, i32 4
  %lni7f = ptrtoint i64* %lni7e to i64
  %lni7g = inttoptr i64 %lni7f to i64*
  store i64* %lni7g, i64** %Sp_Var
  %lni7h = load i64*, i64** %Sp_Var
  %lni7i = getelementptr inbounds i64, i64* %lni7h, i32 0
  %lni7j = bitcast i64* %lni7i to i64*
  %lni7k = load i64, i64* %lni7j, !tbaa !2
  %lni7l = inttoptr i64 %lni7k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni7m = load i64*, i64** %Sp_Var
  %lni7n = load i64*, i64** %Hp_Var
  %lni7o = load i64, i64* %R1_Var
  %lni7p = load i64, i64* %R2_Var
  %lni7q = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni7l( i64* %Base_Arg, i64* %lni7m, i64* %lni7n, i64 %lni7o, i64 %lni7p, i64 %lni7q, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrb:
  %lni7r = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %lni7r, !tbaa !5
  %lni7s = load i64, i64* %R3_Var
  store i64 %lni7s, i64* %R3_Var
  %lni7t = load i64, i64* %R2_Var
  store i64 %lni7t, i64* %R2_Var
  %lni7u = load i64, i64* %R1_Var
  store i64 %lni7u, i64* %R1_Var
  %lni7v = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni7w = load i64*, i64** %Sp_Var
  %lni7x = load i64*, i64** %Hp_Var
  %lni7y = load i64, i64* %R1_Var
  %lni7z = load i64, i64* %R2_Var
  %lni7A = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni7v( i64* %Base_Arg, i64* %lni7w, i64* %lni7x, i64 %lni7y, i64 %lni7z, i64 %lni7A, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7SC_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SC_info$def to i8*)
define internal ghccc void @s7SC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni7B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfrj
cfrj:
  %lni7C = load i64*, i64** %Sp_Var
  %lni7D = getelementptr inbounds i64, i64* %lni7C, i32 -2
  %lni7E = ptrtoint i64* %lni7D to i64
  %lni7F = icmp ult i64 %lni7E, %SpLim_Arg
  %lni7G = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni7F, i1 0 )
  br i1 %lni7G, label %cfrk, label %cfrl
cfrl:
  %lni7I = ptrtoint i8* @stg_upd_frame_info to i64
  %lni7H = load i64*, i64** %Sp_Var
  %lni7J = getelementptr inbounds i64, i64* %lni7H, i32 -2
  store i64 %lni7I, i64* %lni7J, !tbaa !2
  %lni7L = load i64, i64* %R1_Var
  %lni7K = load i64*, i64** %Sp_Var
  %lni7M = getelementptr inbounds i64, i64* %lni7K, i32 -1
  store i64 %lni7L, i64* %lni7M, !tbaa !2
  %lni7P = load i64, i64* %R1_Var
  %lni7Q = add i64 %lni7P, 24
  %lni7R = inttoptr i64 %lni7Q to i64*
  %lni7S = load i64, i64* %lni7R, !tbaa !4
  store i64 %lni7S, i64* %R3_Var
  %lni7V = load i64, i64* %R1_Var
  %lni7W = add i64 %lni7V, 16
  %lni7X = inttoptr i64 %lni7W to i64*
  %lni7Y = load i64, i64* %lni7X, !tbaa !4
  store i64 %lni7Y, i64* %R2_Var
  %lni7Z = load i64*, i64** %Sp_Var
  %lni80 = getelementptr inbounds i64, i64* %lni7Z, i32 -2
  %lni81 = ptrtoint i64* %lni80 to i64
  %lni82 = inttoptr i64 %lni81 to i64*
  store i64* %lni82, i64** %Sp_Var
  %lni83 = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni84 = load i64*, i64** %Sp_Var
  %lni85 = load i64, i64* %R1_Var
  %lni86 = load i64, i64* %R2_Var
  %lni87 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni83( i64* %Base_Arg, i64* %lni84, i64* %Hp_Arg, i64 %lni85, i64 %lni86, i64 %lni87, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrk:
  %lni88 = load i64, i64* %R1_Var
  store i64 %lni88, i64* %R1_Var
  %lni89 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni8a = bitcast i64* %lni89 to i64*
  %lni8b = load i64, i64* %lni8a, !tbaa !5
  %lni8c = inttoptr i64 %lni8b to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni8d = load i64*, i64** %Sp_Var
  %lni8e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni8c( i64* %Base_Arg, i64* %lni8d, i64* %Hp_Arg, i64 %lni8e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7SB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SB_info$def to i8*)
define internal ghccc void @s7SB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni8f:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfrq
cfrq:
  %lni8g = load i64*, i64** %Sp_Var
  %lni8h = getelementptr inbounds i64, i64* %lni8g, i32 -2
  %lni8i = ptrtoint i64* %lni8h to i64
  %lni8j = icmp ult i64 %lni8i, %SpLim_Arg
  %lni8k = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni8j, i1 0 )
  br i1 %lni8k, label %cfrr, label %cfrs
cfrs:
  %lni8m = ptrtoint i8* @stg_upd_frame_info to i64
  %lni8l = load i64*, i64** %Sp_Var
  %lni8n = getelementptr inbounds i64, i64* %lni8l, i32 -2
  store i64 %lni8m, i64* %lni8n, !tbaa !2
  %lni8p = load i64, i64* %R1_Var
  %lni8o = load i64*, i64** %Sp_Var
  %lni8q = getelementptr inbounds i64, i64* %lni8o, i32 -1
  store i64 %lni8p, i64* %lni8q, !tbaa !2
  %lni8t = load i64, i64* %R1_Var
  %lni8u = add i64 %lni8t, 24
  %lni8v = inttoptr i64 %lni8u to i64*
  %lni8w = load i64, i64* %lni8v, !tbaa !4
  store i64 %lni8w, i64* %R3_Var
  %lni8z = load i64, i64* %R1_Var
  %lni8A = add i64 %lni8z, 16
  %lni8B = inttoptr i64 %lni8A to i64*
  %lni8C = load i64, i64* %lni8B, !tbaa !4
  store i64 %lni8C, i64* %R2_Var
  %lni8D = load i64*, i64** %Sp_Var
  %lni8E = getelementptr inbounds i64, i64* %lni8D, i32 -2
  %lni8F = ptrtoint i64* %lni8E to i64
  %lni8G = inttoptr i64 %lni8F to i64*
  store i64* %lni8G, i64** %Sp_Var
  %lni8H = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni8I = load i64*, i64** %Sp_Var
  %lni8J = load i64, i64* %R1_Var
  %lni8K = load i64, i64* %R2_Var
  %lni8L = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni8H( i64* %Base_Arg, i64* %lni8I, i64* %Hp_Arg, i64 %lni8J, i64 %lni8K, i64 %lni8L, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrr:
  %lni8M = load i64, i64* %R1_Var
  store i64 %lni8M, i64* %R1_Var
  %lni8N = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni8O = bitcast i64* %lni8N to i64*
  %lni8P = load i64, i64* %lni8O, !tbaa !5
  %lni8Q = inttoptr i64 %lni8P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni8R = load i64*, i64** %Sp_Var
  %lni8S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni8Q( i64* %Base_Arg, i64* %lni8R, i64* %Hp_Arg, i64 %lni8S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7SA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SA_info$def to i8*)
define internal ghccc void @s7SA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
ni8T:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfrx
cfrx:
  %lni8U = load i64*, i64** %Sp_Var
  %lni8V = getelementptr inbounds i64, i64* %lni8U, i32 -2
  %lni8W = ptrtoint i64* %lni8V to i64
  %lni8X = icmp ult i64 %lni8W, %SpLim_Arg
  %lni8Y = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni8X, i1 0 )
  br i1 %lni8Y, label %cfry, label %cfrz
cfrz:
  %lni90 = ptrtoint i8* @stg_upd_frame_info to i64
  %lni8Z = load i64*, i64** %Sp_Var
  %lni91 = getelementptr inbounds i64, i64* %lni8Z, i32 -2
  store i64 %lni90, i64* %lni91, !tbaa !2
  %lni93 = load i64, i64* %R1_Var
  %lni92 = load i64*, i64** %Sp_Var
  %lni94 = getelementptr inbounds i64, i64* %lni92, i32 -1
  store i64 %lni93, i64* %lni94, !tbaa !2
  %lni97 = load i64, i64* %R1_Var
  %lni98 = add i64 %lni97, 24
  %lni99 = inttoptr i64 %lni98 to i64*
  %lni9a = load i64, i64* %lni99, !tbaa !4
  store i64 %lni9a, i64* %R3_Var
  %lni9d = load i64, i64* %R1_Var
  %lni9e = add i64 %lni9d, 16
  %lni9f = inttoptr i64 %lni9e to i64*
  %lni9g = load i64, i64* %lni9f, !tbaa !4
  store i64 %lni9g, i64* %R2_Var
  %lni9h = load i64*, i64** %Sp_Var
  %lni9i = getelementptr inbounds i64, i64* %lni9h, i32 -2
  %lni9j = ptrtoint i64* %lni9i to i64
  %lni9k = inttoptr i64 %lni9j to i64*
  store i64* %lni9k, i64** %Sp_Var
  %lni9l = bitcast i8* @base_GHCziFloat_plusDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni9m = load i64*, i64** %Sp_Var
  %lni9n = load i64, i64* %R1_Var
  %lni9o = load i64, i64* %R2_Var
  %lni9p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni9l( i64* %Base_Arg, i64* %lni9m, i64* %Hp_Arg, i64 %lni9n, i64 %lni9o, i64 %lni9p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfry:
  %lni9q = load i64, i64* %R1_Var
  store i64 %lni9q, i64* %R1_Var
  %lni9r = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lni9s = bitcast i64* %lni9r to i64*
  %lni9t = load i64, i64* %lni9s, !tbaa !5
  %lni9u = inttoptr i64 %lni9t to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lni9v = load i64*, i64** %Sp_Var
  %lni9w = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lni9u( i64* %Base_Arg, i64* %lni9v, i64* %Hp_Arg, i64 %lni9w, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Sb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sb_info$def to i8*)
define internal ghccc void @s7Sb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sb_info$def to i64)) to i32),i32 0)}>
{
ni9x:
  %ls7Ps = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfrG
cfrG:
  %lni9y = load i64*, i64** %Sp_Var
  %lni9z = getelementptr inbounds i64, i64* %lni9y, i32 -11
  %lni9A = ptrtoint i64* %lni9z to i64
  %lni9B = icmp ult i64 %lni9A, %SpLim_Arg
  %lni9C = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lni9B, i1 0 )
  br i1 %lni9C, label %cfrH, label %cfsv
cfsv:
  %lni9E = ptrtoint i8* @stg_upd_frame_info to i64
  %lni9D = load i64*, i64** %Sp_Var
  %lni9F = getelementptr inbounds i64, i64* %lni9D, i32 -2
  store i64 %lni9E, i64* %lni9F, !tbaa !2
  %lni9H = load i64, i64* %R1_Var
  %lni9G = load i64*, i64** %Sp_Var
  %lni9I = getelementptr inbounds i64, i64* %lni9G, i32 -1
  store i64 %lni9H, i64* %lni9I, !tbaa !2
  %lni9M = load i64, i64* %R1_Var
  %lni9N = add i64 %lni9M, 48
  %lni9O = inttoptr i64 %lni9N to i64*
  %lni9P = load i64, i64* %lni9O, !tbaa !4
  %lni9J = load i64*, i64** %Sp_Var
  %lni9Q = getelementptr inbounds i64, i64* %lni9J, i32 -8
  store i64 %lni9P, i64* %lni9Q, !tbaa !2
  %lni9T = load i64, i64* %R1_Var
  %lni9U = add i64 %lni9T, 40
  %lni9V = inttoptr i64 %lni9U to i64*
  %lni9W = load i64, i64* %lni9V, !tbaa !4
  store i64 %lni9W, i64* %ls7Ps
  %lni9Y = load i64, i64* %ls7Ps
  %lni9X = load i64*, i64** %Sp_Var
  %lni9Z = getelementptr inbounds i64, i64* %lni9X, i32 -7
  store i64 %lni9Y, i64* %lni9Z, !tbaa !2
  %lnia3 = load i64, i64* %R1_Var
  %lnia4 = add i64 %lnia3, 16
  %lnia5 = inttoptr i64 %lnia4 to i64*
  %lnia6 = load i64, i64* %lnia5, !tbaa !4
  %lnia0 = load i64*, i64** %Sp_Var
  %lnia7 = getelementptr inbounds i64, i64* %lnia0, i32 -6
  store i64 %lnia6, i64* %lnia7, !tbaa !2
  %lniab = load i64, i64* %R1_Var
  %lniac = add i64 %lniab, 24
  %lniad = inttoptr i64 %lniac to i64*
  %lniae = load i64, i64* %lniad, !tbaa !4
  %lnia8 = load i64*, i64** %Sp_Var
  %lniaf = getelementptr inbounds i64, i64* %lnia8, i32 -5
  store i64 %lniae, i64* %lniaf, !tbaa !2
  %lniaj = load i64, i64* %R1_Var
  %lniak = add i64 %lniaj, 32
  %lnial = inttoptr i64 %lniak to i64*
  %lniam = load i64, i64* %lnial, !tbaa !4
  %lniag = load i64*, i64** %Sp_Var
  %lnian = getelementptr inbounds i64, i64* %lniag, i32 -4
  store i64 %lniam, i64* %lnian, !tbaa !2
  %lniap = load i64, i64* %ls7Ps
  %lniao = load i64*, i64** %Sp_Var
  %lniaq = getelementptr inbounds i64, i64* %lniao, i32 -3
  store i64 %lniap, i64* %lniaq, !tbaa !2
  %lniar = load i64*, i64** %Sp_Var
  %lnias = getelementptr inbounds i64, i64* %lniar, i32 -8
  %lniat = ptrtoint i64* %lnias to i64
  %lniau = inttoptr i64 %lniat to i64*
  store i64* %lniau, i64** %Sp_Var
  %lniav = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfs4$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniaw = load i64*, i64** %Sp_Var
  %lniax = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniav( i64* %Base_Arg, i64* %lniaw, i64* %Hp_Arg, i64 %lniax, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrH:
  %lniay = load i64, i64* %R1_Var
  store i64 %lniay, i64* %R1_Var
  %lniaz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lniaA = bitcast i64* %lniaz to i64*
  %lniaB = load i64, i64* %lniaA, !tbaa !5
  %lniaC = inttoptr i64 %lniaB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniaD = load i64*, i64** %Sp_Var
  %lniaE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniaC( i64* %Base_Arg, i64* %lniaD, i64* %Hp_Arg, i64 %lniaE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfs4 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfs4$def to i8*)
define internal ghccc void @_cfs4$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niaF:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfs4
cfs4:
  %lniaH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfs6_info$def to i64
  %lniaG = load i64*, i64** %Sp_Var
  %lniaI = getelementptr inbounds i64, i64* %lniaG, i32 -1
  store i64 %lniaH, i64* %lniaI, !tbaa !2
  %lniaJ = load i64*, i64** %Sp_Var
  %lniaK = getelementptr inbounds i64, i64* %lniaJ, i32 5
  %lniaL = bitcast i64* %lniaK to i64*
  %lniaM = load i64, i64* %lniaL, !tbaa !2
  store i64 %lniaM, i64* %R1_Var
  %lniaN = load i64*, i64** %Sp_Var
  %lniaO = getelementptr inbounds i64, i64* %lniaN, i32 -1
  %lniaP = ptrtoint i64* %lniaO to i64
  %lniaQ = inttoptr i64 %lniaP to i64*
  store i64* %lniaQ, i64** %Sp_Var
  %lniaR = load i64, i64* %R1_Var
  %lniaS = and i64 %lniaR, 7
  %lniaT = icmp ne i64 %lniaS, 0
  br i1 %lniaT, label %ufsG, label %cfs8
cfs8:
  %lniaV = load i64, i64* %R1_Var
  %lniaW = inttoptr i64 %lniaV to i64*
  %lniaX = load i64, i64* %lniaW, !tbaa !4
  %lniaY = inttoptr i64 %lniaX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniaZ = load i64*, i64** %Sp_Var
  %lnib0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniaY( i64* %Base_Arg, i64* %lniaZ, i64* %Hp_Arg, i64 %lnib0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufsG:
  %lnib1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfs6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnib2 = load i64*, i64** %Sp_Var
  %lnib3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnib1( i64* %Base_Arg, i64* %lnib2, i64* %Hp_Arg, i64 %lnib3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfs6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfs6_info$def to i8*)
define internal ghccc void @cfs6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2054, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfs6_info$def to i64)) to i32),i32 0)}>
{
nib4:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7SO = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfs6
cfs6:
  %lnib5 = load i64, i64* %R1_Var
  %lnib6 = and i64 %lnib5, 7
  switch i64 %lnib6, label %cfse [i64 1, label %cfse
i64 2, label %cfsj]
cfse:
  %lnib8 = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnib9 = add i64 %lnib8, 1
  %lnib7 = load i64*, i64** %Sp_Var
  %lniba = getelementptr inbounds i64, i64* %lnib7, i32 6
  store i64 %lnib9, i64* %lniba, !tbaa !2
  %lnibc = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnibd = add i64 %lnibc, 1
  %lnibb = load i64*, i64** %Sp_Var
  %lnibe = getelementptr inbounds i64, i64* %lnibb, i32 0
  store i64 %lnibd, i64* %lnibe, !tbaa !2
  %lnibg = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnibh = add i64 %lnibg, 1
  %lnibf = load i64*, i64** %Sp_Var
  %lnibi = getelementptr inbounds i64, i64* %lnibf, i32 -1
  store i64 %lnibh, i64* %lnibi, !tbaa !2
  %lnibj = load i64*, i64** %Sp_Var
  %lnibk = getelementptr inbounds i64, i64* %lnibj, i32 -1
  %lnibl = ptrtoint i64* %lnibk to i64
  %lnibm = inttoptr i64 %lnibl to i64*
  store i64* %lnibm, i64** %Sp_Var
  %lnibn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfqm$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnibo = load i64*, i64** %Sp_Var
  %lnibp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnibn( i64* %Base_Arg, i64* %lnibo, i64* %Hp_Arg, i64 %lnibp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfsj:
  %lnibr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsh_info$def to i64
  %lnibq = load i64*, i64** %Sp_Var
  %lnibs = getelementptr inbounds i64, i64* %lnibq, i32 0
  store i64 %lnibr, i64* %lnibs, !tbaa !2
  %lnibv = load i64, i64* %R1_Var
  %lnibw = add i64 %lnibv, 14
  %lnibx = inttoptr i64 %lnibw to i64*
  %lniby = load i64, i64* %lnibx, !tbaa !4
  store i64 %lniby, i64* %ls7SO
  %lnibB = load i64, i64* %R1_Var
  %lnibC = add i64 %lnibB, 6
  %lnibD = inttoptr i64 %lnibC to i64*
  %lnibE = load i64, i64* %lnibD, !tbaa !4
  store i64 %lnibE, i64* %R1_Var
  %lnibG = load i64, i64* %ls7SO
  %lnibF = load i64*, i64** %Sp_Var
  %lnibH = getelementptr inbounds i64, i64* %lnibF, i32 6
  store i64 %lnibG, i64* %lnibH, !tbaa !2
  %lnibI = load i64, i64* %R1_Var
  %lnibJ = and i64 %lnibI, 7
  %lnibK = icmp ne i64 %lnibJ, 0
  br i1 %lnibK, label %ufsH, label %cfsk
cfsk:
  %lnibM = load i64, i64* %R1_Var
  %lnibN = inttoptr i64 %lnibM to i64*
  %lnibO = load i64, i64* %lnibN, !tbaa !4
  %lnibP = inttoptr i64 %lnibO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnibQ = load i64*, i64** %Sp_Var
  %lnibR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnibP( i64* %Base_Arg, i64* %lnibQ, i64* %Hp_Arg, i64 %lnibR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufsH:
  %lnibS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnibT = load i64*, i64** %Sp_Var
  %lnibU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnibS( i64* %Base_Arg, i64* %lnibT, i64* %Hp_Arg, i64 %lnibU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfsh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsh_info$def to i8*)
define internal ghccc void @cfsh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsh_info$def to i64)) to i32),i32 0)}>
{
nibV:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfsh
cfsh:
  %lnibW = load i64, i64* %R1_Var
  %lnibX = and i64 %lnibW, 7
  switch i64 %lnibX, label %cfsq [i64 1, label %cfsu]
cfsq:
  %lnibZ = load i64*, i64** %Sp_Var
  %lnic0 = getelementptr inbounds i64, i64* %lnibZ, i32 6
  %lnic1 = bitcast i64* %lnic0 to i64*
  %lnic2 = load i64, i64* %lnic1, !tbaa !2
  %lnibY = load i64*, i64** %Sp_Var
  %lnic3 = getelementptr inbounds i64, i64* %lnibY, i32 6
  store i64 %lnic2, i64* %lnic3, !tbaa !2
  %lnic4 = load i64*, i64** %Sp_Var
  %lnic5 = getelementptr inbounds i64, i64* %lnic4, i32 1
  %lnic6 = ptrtoint i64* %lnic5 to i64
  %lnic7 = inttoptr i64 %lnic6 to i64*
  store i64* %lnic7, i64** %Sp_Var
  %lnic8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfs4$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnic9 = load i64*, i64** %Sp_Var
  %lnica = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnic8( i64* %Base_Arg, i64* %lnic9, i64* %Hp_Arg, i64 %lnica, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfsu:
  %lnicc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrW_info$def to i64
  %lnicb = load i64*, i64** %Sp_Var
  %lnicd = getelementptr inbounds i64, i64* %lnicb, i32 0
  store i64 %lnicc, i64* %lnicd, !tbaa !2
  %lnicg = load i64, i64* %R1_Var
  %lnich = add i64 %lnicg, 7
  %lnici = inttoptr i64 %lnich to i64*
  %lnicj = load i64, i64* %lnici, !tbaa !4
  store i64 %lnicj, i64* %R1_Var
  %lnick = load i64, i64* %R1_Var
  %lnicl = and i64 %lnick, 7
  %lnicm = icmp ne i64 %lnicl, 0
  br i1 %lnicm, label %ufsJ, label %cfrY
cfrY:
  %lnico = load i64, i64* %R1_Var
  %lnicp = inttoptr i64 %lnico to i64*
  %lnicq = load i64, i64* %lnicp, !tbaa !4
  %lnicr = inttoptr i64 %lnicq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnics = load i64*, i64** %Sp_Var
  %lnict = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnicr( i64* %Base_Arg, i64* %lnics, i64* %Hp_Arg, i64 %lnict, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufsJ:
  %lnicu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnicv = load i64*, i64** %Sp_Var
  %lnicw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnicu( i64* %Base_Arg, i64* %lnicv, i64* %Hp_Arg, i64 %lnicw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfrW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrW_info$def to i8*)
define internal ghccc void @cfrW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2054, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrW_info$def to i64)) to i32),i32 0)}>
{
nicx:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfrW
cfrW:
  %lnicz = add i64 %R1_Arg, 23
  %lnicA = inttoptr i64 %lnicz to i64*
  %lnicB = load i64, i64* %lnicA, !tbaa !4
  %lnicy = load i64*, i64** %Sp_Var
  %lnicC = getelementptr inbounds i64, i64* %lnicy, i32 -1
  store i64 %lnicB, i64* %lnicC, !tbaa !2
  %lnicE = add i64 %R1_Arg, 15
  %lnicF = inttoptr i64 %lnicE to i64*
  %lnicG = load i64, i64* %lnicF, !tbaa !4
  %lnicD = load i64*, i64** %Sp_Var
  %lnicH = getelementptr inbounds i64, i64* %lnicD, i32 0
  store i64 %lnicG, i64* %lnicH, !tbaa !2
  %lnicJ = add i64 %R1_Arg, 7
  %lnicK = inttoptr i64 %lnicJ to i64*
  %lnicL = load i64, i64* %lnicK, !tbaa !4
  %lnicI = load i64*, i64** %Sp_Var
  %lnicM = getelementptr inbounds i64, i64* %lnicI, i32 6
  store i64 %lnicL, i64* %lnicM, !tbaa !2
  %lnicN = load i64*, i64** %Sp_Var
  %lnicO = getelementptr inbounds i64, i64* %lnicN, i32 -1
  %lnicP = ptrtoint i64* %lnicO to i64
  %lnicQ = inttoptr i64 %lnicP to i64*
  store i64* %lnicQ, i64** %Sp_Var
  %lnicR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfqm$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnicS = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnicR( i64* %Base_Arg, i64* %lnicS, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfqm = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfqm$def to i8*)
define internal ghccc void @_cfqm$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nicT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Se = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  br label %cfqm
cfqm:
  %lnicU = load i64*, i64** %Hp_Var
  %lnicV = getelementptr inbounds i64, i64* %lnicU, i32 5
  %lnicW = ptrtoint i64* %lnicV to i64
  %lnicX = inttoptr i64 %lnicW to i64*
  store i64* %lnicX, i64** %Hp_Var
  %lnicY = load i64*, i64** %Hp_Var
  %lnicZ = ptrtoint i64* %lnicY to i64
  %lnid0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnid1 = bitcast i64* %lnid0 to i64*
  %lnid2 = load i64, i64* %lnid1, !tbaa !5
  %lnid3 = icmp ugt i64 %lnicZ, %lnid2
  %lnid4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnid3, i1 0 )
  br i1 %lnid4, label %cfrL, label %cfrK
cfrK:
  %lnid6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sg_info$def to i64
  %lnid5 = load i64*, i64** %Hp_Var
  %lnid7 = getelementptr inbounds i64, i64* %lnid5, i32 -4
  store i64 %lnid6, i64* %lnid7, !tbaa !3
  %lnid9 = load i64*, i64** %Sp_Var
  %lnida = getelementptr inbounds i64, i64* %lnid9, i32 4
  %lnidb = bitcast i64* %lnida to i64*
  %lnidc = load i64, i64* %lnidb, !tbaa !2
  %lnid8 = load i64*, i64** %Hp_Var
  %lnidd = getelementptr inbounds i64, i64* %lnid8, i32 -3
  store i64 %lnidc, i64* %lnidd, !tbaa !3
  %lnidf = load i64*, i64** %Sp_Var
  %lnidg = getelementptr inbounds i64, i64* %lnidf, i32 5
  %lnidh = bitcast i64* %lnidg to i64*
  %lnidi = load i64, i64* %lnidh, !tbaa !2
  %lnide = load i64*, i64** %Hp_Var
  %lnidj = getelementptr inbounds i64, i64* %lnide, i32 -2
  store i64 %lnidi, i64* %lnidj, !tbaa !3
  %lnidl = load i64*, i64** %Sp_Var
  %lnidm = getelementptr inbounds i64, i64* %lnidl, i32 6
  %lnidn = bitcast i64* %lnidm to i64*
  %lnido = load i64, i64* %lnidn, !tbaa !2
  %lnidk = load i64*, i64** %Hp_Var
  %lnidp = getelementptr inbounds i64, i64* %lnidk, i32 -1
  store i64 %lnido, i64* %lnidp, !tbaa !3
  %lnidr = load i64*, i64** %Sp_Var
  %lnids = getelementptr inbounds i64, i64* %lnidr, i32 3
  %lnidt = bitcast i64* %lnids to i64*
  %lnidu = load i64, i64* %lnidt, !tbaa !2
  %lnidq = load i64*, i64** %Hp_Var
  %lnidv = getelementptr inbounds i64, i64* %lnidq, i32 0
  store i64 %lnidu, i64* %lnidv, !tbaa !3
  %lnidx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrd_info$def to i64
  %lnidw = load i64*, i64** %Sp_Var
  %lnidy = getelementptr inbounds i64, i64* %lnidw, i32 -1
  store i64 %lnidx, i64* %lnidy, !tbaa !2
  %lnidz = load i64*, i64** %Sp_Var
  %lnidA = getelementptr inbounds i64, i64* %lnidz, i32 2
  %lnidB = bitcast i64* %lnidA to i64*
  %lnidC = load i64, i64* %lnidB, !tbaa !2
  store i64 %lnidC, i64* %R2_Var
  %lnidE = load i64*, i64** %Hp_Var
  %lnidF = ptrtoint i64* %lnidE to i64
  %lnidG = add i64 %lnidF, -31
  store i64 %lnidG, i64* %R1_Var
  %lnidH = load i64*, i64** %Sp_Var
  %lnidI = getelementptr inbounds i64, i64* %lnidH, i32 -1
  %lnidJ = ptrtoint i64* %lnidI to i64
  %lnidK = inttoptr i64 %lnidJ to i64*
  store i64* %lnidK, i64** %Sp_Var
  %lnidL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnidM = load i64*, i64** %Sp_Var
  %lnidN = load i64*, i64** %Hp_Var
  %lnidO = load i64, i64* %R1_Var
  %lnidP = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnidL( i64* %Base_Arg, i64* %lnidM, i64* %lnidN, i64 %lnidO, i64 %lnidP, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrL:
  %lnidQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnidQ, !tbaa !5
  %lnidR = load i64*, i64** %Sp_Var
  %lnidS = getelementptr inbounds i64, i64* %lnidR, i32 1
  %lnidT = bitcast i64* %lnidS to i64*
  %lnidU = load i64, i64* %lnidT, !tbaa !2
  store i64 %lnidU, i64* %ls7Se
  %lnidW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfql_info$def to i64
  %lnidV = load i64*, i64** %Sp_Var
  %lnidX = getelementptr inbounds i64, i64* %lnidV, i32 1
  store i64 %lnidW, i64* %lnidX, !tbaa !2
  %lnidY = load i64*, i64** %Sp_Var
  %lnidZ = getelementptr inbounds i64, i64* %lnidY, i32 0
  %lnie0 = bitcast i64* %lnidZ to i64*
  %lnie1 = load i64, i64* %lnie0, !tbaa !2
  store i64 %lnie1, i64* %R3_Var
  %lnie2 = load i64, i64* %ls7Se
  store i64 %lnie2, i64* %R2_Var
  %lnie3 = load i64*, i64** %Sp_Var
  %lnie4 = getelementptr inbounds i64, i64* %lnie3, i32 7
  %lnie5 = bitcast i64* %lnie4 to i64*
  %lnie6 = load i64, i64* %lnie5, !tbaa !2
  store i64 %lnie6, i64* %R1_Var
  %lnie7 = load i64*, i64** %Sp_Var
  %lnie8 = getelementptr inbounds i64, i64* %lnie7, i32 1
  %lnie9 = ptrtoint i64* %lnie8 to i64
  %lniea = inttoptr i64 %lnie9 to i64*
  store i64* %lniea, i64** %Sp_Var
  %lnieb = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniec = load i64*, i64** %Sp_Var
  %lnied = load i64*, i64** %Hp_Var
  %lniee = load i64, i64* %R1_Var
  %lnief = load i64, i64* %R2_Var
  %lnieg = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnieb( i64* %Base_Arg, i64* %lniec, i64* %lnied, i64 %lniee, i64 %lnief, i64 %lnieg, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfql_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfql_info$def to i8*)
define internal ghccc void @cfql_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2054, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfql_info$def to i64)) to i32),i32 0)}>
{
nieh:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfql
cfql:
  %lniei = load i64*, i64** %Sp_Var
  %lniej = getelementptr inbounds i64, i64* %lniei, i32 6
  store i64 %R1_Arg, i64* %lniej, !tbaa !2
  %lniek = load i64*, i64** %Sp_Var
  %lniel = getelementptr inbounds i64, i64* %lniek, i32 0
  store i64 %R2_Arg, i64* %lniel, !tbaa !2
  %lniem = load i64*, i64** %Sp_Var
  %lnien = getelementptr inbounds i64, i64* %lniem, i32 -1
  store i64 %R3_Arg, i64* %lnien, !tbaa !2
  %lnieo = load i64*, i64** %Sp_Var
  %lniep = getelementptr inbounds i64, i64* %lnieo, i32 -1
  %lnieq = ptrtoint i64* %lniep to i64
  %lnier = inttoptr i64 %lnieq to i64*
  store i64* %lnier, i64** %Sp_Var
  %lnies = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfqm$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniet = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnies( i64* %Base_Arg, i64* %lniet, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfrd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfrd_info$def to i8*)
define internal ghccc void @cfrd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 7944, i32 30, i32 0}>
{
nieu:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cfrd
cfrd:
  %lniev = load i64*, i64** %Hp_Var
  %lniew = getelementptr inbounds i64, i64* %lniev, i32 16
  %lniex = ptrtoint i64* %lniew to i64
  %lniey = inttoptr i64 %lniex to i64*
  store i64* %lniey, i64** %Hp_Var
  %lniez = load i64*, i64** %Hp_Var
  %lnieA = ptrtoint i64* %lniez to i64
  %lnieB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnieC = bitcast i64* %lnieB to i64*
  %lnieD = load i64, i64* %lnieC, !tbaa !5
  %lnieE = icmp ugt i64 %lnieA, %lnieD
  %lnieF = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnieE, i1 0 )
  br i1 %lnieF, label %cfrO, label %cfrN
cfrN:
  %lnieH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SC_info$def to i64
  %lnieG = load i64*, i64** %Hp_Var
  %lnieI = getelementptr inbounds i64, i64* %lnieG, i32 -15
  store i64 %lnieH, i64* %lnieI, !tbaa !3
  %lnieK = load i64*, i64** %Sp_Var
  %lnieL = getelementptr inbounds i64, i64* %lnieK, i32 1
  %lnieM = bitcast i64* %lnieL to i64*
  %lnieN = load i64, i64* %lnieM, !tbaa !2
  %lnieJ = load i64*, i64** %Hp_Var
  %lnieO = getelementptr inbounds i64, i64* %lnieJ, i32 -13
  store i64 %lnieN, i64* %lnieO, !tbaa !3
  %lnieQ = load i64, i64* %R3_Var
  %lnieP = load i64*, i64** %Hp_Var
  %lnieR = getelementptr inbounds i64, i64* %lnieP, i32 -12
  store i64 %lnieQ, i64* %lnieR, !tbaa !3
  %lnieT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SB_info$def to i64
  %lnieS = load i64*, i64** %Hp_Var
  %lnieU = getelementptr inbounds i64, i64* %lnieS, i32 -11
  store i64 %lnieT, i64* %lnieU, !tbaa !3
  %lnieW = load i64*, i64** %Sp_Var
  %lnieX = getelementptr inbounds i64, i64* %lnieW, i32 2
  %lnieY = bitcast i64* %lnieX to i64*
  %lnieZ = load i64, i64* %lnieY, !tbaa !2
  %lnieV = load i64*, i64** %Hp_Var
  %lnif0 = getelementptr inbounds i64, i64* %lnieV, i32 -9
  store i64 %lnieZ, i64* %lnif0, !tbaa !3
  %lnif2 = load i64, i64* %R2_Var
  %lnif1 = load i64*, i64** %Hp_Var
  %lnif3 = getelementptr inbounds i64, i64* %lnif1, i32 -8
  store i64 %lnif2, i64* %lnif3, !tbaa !3
  %lnif5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7SA_info$def to i64
  %lnif4 = load i64*, i64** %Hp_Var
  %lnif6 = getelementptr inbounds i64, i64* %lnif4, i32 -7
  store i64 %lnif5, i64* %lnif6, !tbaa !3
  %lnif8 = load i64*, i64** %Sp_Var
  %lnif9 = getelementptr inbounds i64, i64* %lnif8, i32 8
  %lnifa = bitcast i64* %lnif9 to i64*
  %lnifb = load i64, i64* %lnifa, !tbaa !2
  %lnif7 = load i64*, i64** %Hp_Var
  %lnifc = getelementptr inbounds i64, i64* %lnif7, i32 -5
  store i64 %lnifb, i64* %lnifc, !tbaa !3
  %lnife = load i64, i64* %R1_Var
  %lnifd = load i64*, i64** %Hp_Var
  %lniff = getelementptr inbounds i64, i64* %lnifd, i32 -4
  store i64 %lnife, i64* %lniff, !tbaa !3
  %lnifh = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnifg = load i64*, i64** %Hp_Var
  %lnifi = getelementptr inbounds i64, i64* %lnifg, i32 -3
  store i64 %lnifh, i64* %lnifi, !tbaa !3
  %lnifk = load i64*, i64** %Hp_Var
  %lnifl = getelementptr inbounds i64, i64* %lnifk, i32 -7
  %lnifm = ptrtoint i64* %lnifl to i64
  %lnifj = load i64*, i64** %Hp_Var
  %lnifn = getelementptr inbounds i64, i64* %lnifj, i32 -2
  store i64 %lnifm, i64* %lnifn, !tbaa !3
  %lnifp = load i64*, i64** %Hp_Var
  %lnifq = getelementptr inbounds i64, i64* %lnifp, i32 -11
  %lnifr = ptrtoint i64* %lnifq to i64
  %lnifo = load i64*, i64** %Hp_Var
  %lnifs = getelementptr inbounds i64, i64* %lnifo, i32 -1
  store i64 %lnifr, i64* %lnifs, !tbaa !3
  %lnifu = load i64*, i64** %Hp_Var
  %lnifv = getelementptr inbounds i64, i64* %lnifu, i32 -15
  %lnifw = ptrtoint i64* %lnifv to i64
  %lnift = load i64*, i64** %Hp_Var
  %lnifx = getelementptr inbounds i64, i64* %lnift, i32 0
  store i64 %lnifw, i64* %lnifx, !tbaa !3
  %lnifz = load i64*, i64** %Hp_Var
  %lnifA = ptrtoint i64* %lnifz to i64
  %lnifB = add i64 %lnifA, -23
  store i64 %lnifB, i64* %R1_Var
  %lnifC = load i64*, i64** %Sp_Var
  %lnifD = getelementptr inbounds i64, i64* %lnifC, i32 9
  %lnifE = ptrtoint i64* %lnifD to i64
  %lnifF = inttoptr i64 %lnifE to i64*
  store i64* %lnifF, i64** %Sp_Var
  %lnifG = load i64*, i64** %Sp_Var
  %lnifH = getelementptr inbounds i64, i64* %lnifG, i32 0
  %lnifI = bitcast i64* %lnifH to i64*
  %lnifJ = load i64, i64* %lnifI, !tbaa !2
  %lnifK = inttoptr i64 %lnifJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnifL = load i64*, i64** %Sp_Var
  %lnifM = load i64*, i64** %Hp_Var
  %lnifN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnifK( i64* %Base_Arg, i64* %lnifL, i64* %lnifM, i64 %lnifN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfrO:
  %lnifO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 128, i64* %lnifO, !tbaa !5
  %lnifP = load i64, i64* %R3_Var
  store i64 %lnifP, i64* %R3_Var
  %lnifQ = load i64, i64* %R2_Var
  store i64 %lnifQ, i64* %R2_Var
  %lnifR = load i64, i64* %R1_Var
  store i64 %lnifR, i64* %R1_Var
  %lnifS = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnifT = load i64*, i64** %Sp_Var
  %lnifU = load i64*, i64** %Hp_Var
  %lnifV = load i64, i64* %R1_Var
  %lnifW = load i64, i64* %R2_Var
  %lnifX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnifS( i64* %Base_Arg, i64* %lnifT, i64* %lnifU, i64 %lnifV, i64 %lnifW, i64 %lnifX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7T3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7T3_info$def to i8*)
define internal ghccc void @s7T3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nifY:
  %ls7T1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfsQ
cfsQ:
  %lnifZ = load i64*, i64** %Sp_Var
  %lnig0 = getelementptr inbounds i64, i64* %lnifZ, i32 -4
  %lnig1 = ptrtoint i64* %lnig0 to i64
  %lnig2 = icmp ult i64 %lnig1, %SpLim_Arg
  %lnig3 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnig2, i1 0 )
  br i1 %lnig3, label %cfsX, label %cfsY
cfsY:
  %lnig5 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnig4 = load i64*, i64** %Sp_Var
  %lnig6 = getelementptr inbounds i64, i64* %lnig4, i32 -2
  store i64 %lnig5, i64* %lnig6, !tbaa !2
  %lnig8 = load i64, i64* %R1_Var
  %lnig7 = load i64*, i64** %Sp_Var
  %lnig9 = getelementptr inbounds i64, i64* %lnig7, i32 -1
  store i64 %lnig8, i64* %lnig9, !tbaa !2
  %lnigb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsN_info$def to i64
  %lniga = load i64*, i64** %Sp_Var
  %lnigc = getelementptr inbounds i64, i64* %lniga, i32 -4
  store i64 %lnigb, i64* %lnigc, !tbaa !2
  %lnigf = load i64, i64* %R1_Var
  %lnigg = add i64 %lnigf, 24
  %lnigh = inttoptr i64 %lnigg to double*
  %lnigi = load double, double* %lnigh, !tbaa !4
  store double %lnigi, double* %ls7T1
  %lnigl = load i64, i64* %R1_Var
  %lnigm = add i64 %lnigl, 16
  %lnign = inttoptr i64 %lnigm to i64*
  %lnigo = load i64, i64* %lnign, !tbaa !4
  store i64 %lnigo, i64* %R1_Var
  %lnigq = load double, double* %ls7T1
  %lnigp = load i64*, i64** %Sp_Var
  %lnigr = getelementptr inbounds i64, i64* %lnigp, i32 -3
  %lnigs = bitcast i64* %lnigr to double*
  store double %lnigq, double* %lnigs, !tbaa !2
  %lnigt = load i64*, i64** %Sp_Var
  %lnigu = getelementptr inbounds i64, i64* %lnigt, i32 -4
  %lnigv = ptrtoint i64* %lnigu to i64
  %lnigw = inttoptr i64 %lnigv to i64*
  store i64* %lnigw, i64** %Sp_Var
  %lnigx = load i64, i64* %R1_Var
  %lnigy = and i64 %lnigx, 7
  %lnigz = icmp ne i64 %lnigy, 0
  br i1 %lnigz, label %uft2, label %cfsO
cfsO:
  %lnigB = load i64, i64* %R1_Var
  %lnigC = inttoptr i64 %lnigB to i64*
  %lnigD = load i64, i64* %lnigC, !tbaa !4
  %lnigE = inttoptr i64 %lnigD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnigF = load i64*, i64** %Sp_Var
  %lnigG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnigE( i64* %Base_Arg, i64* %lnigF, i64* %Hp_Arg, i64 %lnigG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uft2:
  %lnigH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnigI = load i64*, i64** %Sp_Var
  %lnigJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnigH( i64* %Base_Arg, i64* %lnigI, i64* %Hp_Arg, i64 %lnigJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfsX:
  %lnigK = load i64, i64* %R1_Var
  store i64 %lnigK, i64* %R1_Var
  %lnigL = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnigM = bitcast i64* %lnigL to i64*
  %lnigN = load i64, i64* %lnigM, !tbaa !5
  %lnigO = inttoptr i64 %lnigN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnigP = load i64*, i64** %Sp_Var
  %lnigQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnigO( i64* %Base_Arg, i64* %lnigP, i64* %Hp_Arg, i64 %lnigQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfsN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfsN_info$def to i8*)
define internal ghccc void @cfsN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nigR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7T6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfsN
cfsN:
  %lnigS = load i64*, i64** %Hp_Var
  %lnigT = getelementptr inbounds i64, i64* %lnigS, i32 2
  %lnigU = ptrtoint i64* %lnigT to i64
  %lnigV = inttoptr i64 %lnigU to i64*
  store i64* %lnigV, i64** %Hp_Var
  %lnigW = load i64*, i64** %Hp_Var
  %lnigX = ptrtoint i64* %lnigW to i64
  %lnigY = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnigZ = bitcast i64* %lnigY to i64*
  %lnih0 = load i64, i64* %lnigZ, !tbaa !5
  %lnih1 = icmp ugt i64 %lnigX, %lnih0
  %lnih2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnih1, i1 0 )
  br i1 %lnih2, label %cft1, label %cft0
cft0:
  %lnih3 = load i64*, i64** %Sp_Var
  %lnih4 = getelementptr inbounds i64, i64* %lnih3, i32 1
  %lnih5 = bitcast i64* %lnih4 to double*
  %lnih6 = load double, double* %lnih5, !tbaa !2
  %lnih9 = load i64, i64* %R1_Var
  %lniha = add i64 %lnih9, 7
  %lnihb = inttoptr i64 %lniha to double*
  %lnihc = load double, double* %lnihb, !tbaa !4
  %lnihd = fmul double %lnih6, %lnihc
  store double %lnihd, double* %ls7T6
  %lnihf = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnihe = load i64*, i64** %Hp_Var
  %lnihg = getelementptr inbounds i64, i64* %lnihe, i32 -1
  store i64 %lnihf, i64* %lnihg, !tbaa !3
  %lnihi = load double, double* %ls7T6
  %lnihh = load i64*, i64** %Hp_Var
  %lnihj = getelementptr inbounds i64, i64* %lnihh, i32 0
  %lnihk = bitcast i64* %lnihj to double*
  store double %lnihi, double* %lnihk, !tbaa !3
  %lnihm = load i64*, i64** %Hp_Var
  %lnihn = ptrtoint i64* %lnihm to i64
  %lniho = add i64 %lnihn, -7
  store i64 %lniho, i64* %R1_Var
  %lnihp = load i64*, i64** %Sp_Var
  %lnihq = getelementptr inbounds i64, i64* %lnihp, i32 2
  %lnihr = ptrtoint i64* %lnihq to i64
  %lnihs = inttoptr i64 %lnihr to i64*
  store i64* %lnihs, i64** %Sp_Var
  %lniht = load i64*, i64** %Sp_Var
  %lnihu = getelementptr inbounds i64, i64* %lniht, i32 0
  %lnihv = bitcast i64* %lnihu to i64*
  %lnihw = load i64, i64* %lnihv, !tbaa !2
  %lnihx = inttoptr i64 %lnihw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnihy = load i64*, i64** %Sp_Var
  %lnihz = load i64*, i64** %Hp_Var
  %lnihA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnihx( i64* %Base_Arg, i64* %lnihy, i64* %lnihz, i64 %lnihA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cft1:
  %lnihB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnihB, !tbaa !5
  %lnihC = load i64, i64* %R1_Var
  store i64 %lnihC, i64* %R1_Var
  %lnihD = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnihE = load i64*, i64** %Sp_Var
  %lnihF = load i64*, i64** %Hp_Var
  %lnihG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnihD( i64* %Base_Arg, i64* %lnihE, i64* %lnihF, i64 %lnihG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7T7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7T7_info$def to i8*)
define internal ghccc void @s7T7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967297, i32 19, i32 0}>
{
nihH:
  %ls7T1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cft8
cft8:
  %lnihI = load i64*, i64** %Sp_Var
  %lnihJ = getelementptr inbounds i64, i64* %lnihI, i32 -4
  %lnihK = ptrtoint i64* %lnihJ to i64
  %lnihL = icmp ult i64 %lnihK, %SpLim_Arg
  %lnihM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnihL, i1 0 )
  br i1 %lnihM, label %cftf, label %cftg
cftg:
  %lnihO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnihN = load i64*, i64** %Sp_Var
  %lnihP = getelementptr inbounds i64, i64* %lnihN, i32 -2
  store i64 %lnihO, i64* %lnihP, !tbaa !2
  %lnihR = load i64, i64* %R1_Var
  %lnihQ = load i64*, i64** %Sp_Var
  %lnihS = getelementptr inbounds i64, i64* %lnihQ, i32 -1
  store i64 %lnihR, i64* %lnihS, !tbaa !2
  %lnihU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cft5_info$def to i64
  %lnihT = load i64*, i64** %Sp_Var
  %lnihV = getelementptr inbounds i64, i64* %lnihT, i32 -4
  store i64 %lnihU, i64* %lnihV, !tbaa !2
  %lnihY = load i64, i64* %R1_Var
  %lnihZ = add i64 %lnihY, 24
  %lnii0 = inttoptr i64 %lnihZ to double*
  %lnii1 = load double, double* %lnii0, !tbaa !4
  store double %lnii1, double* %ls7T1
  %lnii4 = load i64, i64* %R1_Var
  %lnii5 = add i64 %lnii4, 16
  %lnii6 = inttoptr i64 %lnii5 to i64*
  %lnii7 = load i64, i64* %lnii6, !tbaa !4
  store i64 %lnii7, i64* %R1_Var
  %lnii9 = load double, double* %ls7T1
  %lnii8 = load i64*, i64** %Sp_Var
  %lniia = getelementptr inbounds i64, i64* %lnii8, i32 -3
  %lniib = bitcast i64* %lniia to double*
  store double %lnii9, double* %lniib, !tbaa !2
  %lniic = load i64*, i64** %Sp_Var
  %lniid = getelementptr inbounds i64, i64* %lniic, i32 -4
  %lniie = ptrtoint i64* %lniid to i64
  %lniif = inttoptr i64 %lniie to i64*
  store i64* %lniif, i64** %Sp_Var
  %lniig = load i64, i64* %R1_Var
  %lniih = and i64 %lniig, 7
  %lniii = icmp ne i64 %lniih, 0
  br i1 %lniii, label %uftk, label %cft6
cft6:
  %lniik = load i64, i64* %R1_Var
  %lniil = inttoptr i64 %lniik to i64*
  %lniim = load i64, i64* %lniil, !tbaa !4
  %lniin = inttoptr i64 %lniim to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniio = load i64*, i64** %Sp_Var
  %lniip = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniin( i64* %Base_Arg, i64* %lniio, i64* %Hp_Arg, i64 %lniip, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uftk:
  %lniiq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cft5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniir = load i64*, i64** %Sp_Var
  %lniis = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniiq( i64* %Base_Arg, i64* %lniir, i64* %Hp_Arg, i64 %lniis, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cftf:
  %lniit = load i64, i64* %R1_Var
  store i64 %lniit, i64* %R1_Var
  %lniiu = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lniiv = bitcast i64* %lniiu to i64*
  %lniiw = load i64, i64* %lniiv, !tbaa !5
  %lniix = inttoptr i64 %lniiw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniiy = load i64*, i64** %Sp_Var
  %lniiz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniix( i64* %Base_Arg, i64* %lniiy, i64* %Hp_Arg, i64 %lniiz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cft5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cft5_info$def to i8*)
define internal ghccc void @cft5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
niiA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Ta = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cft5
cft5:
  %lniiB = load i64*, i64** %Hp_Var
  %lniiC = getelementptr inbounds i64, i64* %lniiB, i32 2
  %lniiD = ptrtoint i64* %lniiC to i64
  %lniiE = inttoptr i64 %lniiD to i64*
  store i64* %lniiE, i64** %Hp_Var
  %lniiF = load i64*, i64** %Hp_Var
  %lniiG = ptrtoint i64* %lniiF to i64
  %lniiH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniiI = bitcast i64* %lniiH to i64*
  %lniiJ = load i64, i64* %lniiI, !tbaa !5
  %lniiK = icmp ugt i64 %lniiG, %lniiJ
  %lniiL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniiK, i1 0 )
  br i1 %lniiL, label %cftj, label %cfti
cfti:
  %lniiM = load i64*, i64** %Sp_Var
  %lniiN = getelementptr inbounds i64, i64* %lniiM, i32 1
  %lniiO = bitcast i64* %lniiN to double*
  %lniiP = load double, double* %lniiO, !tbaa !2
  %lniiS = load i64, i64* %R1_Var
  %lniiT = add i64 %lniiS, 7
  %lniiU = inttoptr i64 %lniiT to double*
  %lniiV = load double, double* %lniiU, !tbaa !4
  %lniiW = fmul double %lniiP, %lniiV
  store double %lniiW, double* %ls7Ta
  %lniiY = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lniiX = load i64*, i64** %Hp_Var
  %lniiZ = getelementptr inbounds i64, i64* %lniiX, i32 -1
  store i64 %lniiY, i64* %lniiZ, !tbaa !3
  %lnij1 = load double, double* %ls7Ta
  %lnij0 = load i64*, i64** %Hp_Var
  %lnij2 = getelementptr inbounds i64, i64* %lnij0, i32 0
  %lnij3 = bitcast i64* %lnij2 to double*
  store double %lnij1, double* %lnij3, !tbaa !3
  %lnij5 = load i64*, i64** %Hp_Var
  %lnij6 = ptrtoint i64* %lnij5 to i64
  %lnij7 = add i64 %lnij6, -7
  store i64 %lnij7, i64* %R1_Var
  %lnij8 = load i64*, i64** %Sp_Var
  %lnij9 = getelementptr inbounds i64, i64* %lnij8, i32 2
  %lnija = ptrtoint i64* %lnij9 to i64
  %lnijb = inttoptr i64 %lnija to i64*
  store i64* %lnijb, i64** %Sp_Var
  %lnijc = load i64*, i64** %Sp_Var
  %lnijd = getelementptr inbounds i64, i64* %lnijc, i32 0
  %lnije = bitcast i64* %lnijd to i64*
  %lnijf = load i64, i64* %lnije, !tbaa !2
  %lnijg = inttoptr i64 %lnijf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnijh = load i64*, i64** %Sp_Var
  %lniji = load i64*, i64** %Hp_Var
  %lnijj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnijg( i64* %Base_Arg, i64* %lnijh, i64* %lniji, i64 %lnijj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cftj:
  %lnijk = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnijk, !tbaa !5
  %lnijl = load i64, i64* %R1_Var
  store i64 %lnijl, i64* %R1_Var
  %lnijm = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnijn = load i64*, i64** %Sp_Var
  %lnijo = load i64*, i64** %Hp_Var
  %lnijp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnijm( i64* %Base_Arg, i64* %lnijn, i64* %lnijo, i64 %lnijp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7TM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7TM_info$def to i8*)
define internal ghccc void @s7TM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nijq:
  %ls7T7 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cftq
cftq:
  %lnijr = load i64*, i64** %Sp_Var
  %lnijs = getelementptr inbounds i64, i64* %lnijr, i32 -4
  %lnijt = ptrtoint i64* %lnijs to i64
  %lniju = icmp ult i64 %lnijt, %SpLim_Arg
  %lnijv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniju, i1 0 )
  br i1 %lnijv, label %cftC, label %cftD
cftD:
  %lnijx = ptrtoint i8* @stg_upd_frame_info to i64
  %lnijw = load i64*, i64** %Sp_Var
  %lnijy = getelementptr inbounds i64, i64* %lnijw, i32 -2
  store i64 %lnijx, i64* %lnijy, !tbaa !2
  %lnijA = load i64, i64* %R1_Var
  %lnijz = load i64*, i64** %Sp_Var
  %lnijB = getelementptr inbounds i64, i64* %lnijz, i32 -1
  store i64 %lnijA, i64* %lnijB, !tbaa !2
  %lnijD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftn_info$def to i64
  %lnijC = load i64*, i64** %Sp_Var
  %lnijE = getelementptr inbounds i64, i64* %lnijC, i32 -4
  store i64 %lnijD, i64* %lnijE, !tbaa !2
  %lnijH = load i64, i64* %R1_Var
  %lnijI = add i64 %lnijH, 16
  %lnijJ = inttoptr i64 %lnijI to i64*
  %lnijK = load i64, i64* %lnijJ, !tbaa !4
  store i64 %lnijK, i64* %ls7T7
  %lnijN = load i64, i64* %R1_Var
  %lnijO = add i64 %lnijN, 24
  %lnijP = inttoptr i64 %lnijO to i64*
  %lnijQ = load i64, i64* %lnijP, !tbaa !4
  store i64 %lnijQ, i64* %R1_Var
  %lnijS = load i64, i64* %ls7T7
  %lnijR = load i64*, i64** %Sp_Var
  %lnijT = getelementptr inbounds i64, i64* %lnijR, i32 -3
  store i64 %lnijS, i64* %lnijT, !tbaa !2
  %lnijU = load i64*, i64** %Sp_Var
  %lnijV = getelementptr inbounds i64, i64* %lnijU, i32 -4
  %lnijW = ptrtoint i64* %lnijV to i64
  %lnijX = inttoptr i64 %lnijW to i64*
  store i64* %lnijX, i64** %Sp_Var
  %lnijY = load i64, i64* %R1_Var
  %lnijZ = and i64 %lnijY, 7
  %lnik0 = icmp ne i64 %lnijZ, 0
  br i1 %lnik0, label %uftJ, label %cfto
cfto:
  %lnik2 = load i64, i64* %R1_Var
  %lnik3 = inttoptr i64 %lnik2 to i64*
  %lnik4 = load i64, i64* %lnik3, !tbaa !4
  %lnik5 = inttoptr i64 %lnik4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnik6 = load i64*, i64** %Sp_Var
  %lnik7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnik5( i64* %Base_Arg, i64* %lnik6, i64* %Hp_Arg, i64 %lnik7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uftJ:
  %lnik8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnik9 = load i64*, i64** %Sp_Var
  %lnika = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnik8( i64* %Base_Arg, i64* %lnik9, i64* %Hp_Arg, i64 %lnika, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cftC:
  %lnikb = load i64, i64* %R1_Var
  store i64 %lnikb, i64* %R1_Var
  %lnikc = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnikd = bitcast i64* %lnikc to i64*
  %lnike = load i64, i64* %lnikd, !tbaa !5
  %lnikf = inttoptr i64 %lnike to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnikg = load i64*, i64** %Sp_Var
  %lnikh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnikf( i64* %Base_Arg, i64* %lnikg, i64* %Hp_Arg, i64 %lnikh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cftn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftn_info$def to i8*)
define internal ghccc void @cftn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
niki:
  %ls7TO = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cftn
cftn:
  %lnikj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftt_info$def to i64
  %lnikk = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnikj, i64* %lnikk, !tbaa !2
  %lnikn = load i64, i64* %R1_Var
  %lniko = add i64 %lnikn, 7
  %lnikp = inttoptr i64 %lniko to double*
  %lnikq = load double, double* %lnikp, !tbaa !4
  store double %lnikq, double* %ls7TO
  %lnikr = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lniks = bitcast i64* %lnikr to i64*
  %lnikt = load i64, i64* %lniks, !tbaa !2
  store i64 %lnikt, i64* %R1_Var
  %lniku = load double, double* %ls7TO
  %lnikv = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnikw = bitcast i64* %lnikv to double*
  store double %lniku, double* %lnikw, !tbaa !2
  %lnikx = load i64, i64* %R1_Var
  %lniky = and i64 %lnikx, 7
  %lnikz = icmp ne i64 %lniky, 0
  br i1 %lnikz, label %uftI, label %cftu
cftu:
  %lnikB = load i64, i64* %R1_Var
  %lnikC = inttoptr i64 %lnikB to i64*
  %lnikD = load i64, i64* %lnikC, !tbaa !4
  %lnikE = inttoptr i64 %lnikD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnikF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnikE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnikF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uftI:
  %lnikG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnikH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnikG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnikH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cftt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftt_info$def to i8*)
define internal ghccc void @cftt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nikI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7TR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cftt
cftt:
  %lnikJ = load i64*, i64** %Hp_Var
  %lnikK = getelementptr inbounds i64, i64* %lnikJ, i32 2
  %lnikL = ptrtoint i64* %lnikK to i64
  %lnikM = inttoptr i64 %lnikL to i64*
  store i64* %lnikM, i64** %Hp_Var
  %lnikN = load i64*, i64** %Hp_Var
  %lnikO = ptrtoint i64* %lnikN to i64
  %lnikP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnikQ = bitcast i64* %lnikP to i64*
  %lnikR = load i64, i64* %lnikQ, !tbaa !5
  %lnikS = icmp ugt i64 %lnikO, %lnikR
  %lnikT = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnikS, i1 0 )
  br i1 %lnikT, label %cftH, label %cftG
cftG:
  %lnikU = load i64*, i64** %Sp_Var
  %lnikV = getelementptr inbounds i64, i64* %lnikU, i32 1
  %lnikW = bitcast i64* %lnikV to double*
  %lnikX = load double, double* %lnikW, !tbaa !2
  %lnil0 = load i64, i64* %R1_Var
  %lnil1 = add i64 %lnil0, 7
  %lnil2 = inttoptr i64 %lnil1 to double*
  %lnil3 = load double, double* %lnil2, !tbaa !4
  %lnil4 = fadd double %lnikX, %lnil3
  store double %lnil4, double* %ls7TR
  %lnil6 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnil5 = load i64*, i64** %Hp_Var
  %lnil7 = getelementptr inbounds i64, i64* %lnil5, i32 -1
  store i64 %lnil6, i64* %lnil7, !tbaa !3
  %lnil9 = load double, double* %ls7TR
  %lnil8 = load i64*, i64** %Hp_Var
  %lnila = getelementptr inbounds i64, i64* %lnil8, i32 0
  %lnilb = bitcast i64* %lnila to double*
  store double %lnil9, double* %lnilb, !tbaa !3
  %lnild = load i64*, i64** %Hp_Var
  %lnile = ptrtoint i64* %lnild to i64
  %lnilf = add i64 %lnile, -7
  store i64 %lnilf, i64* %R1_Var
  %lnilg = load i64*, i64** %Sp_Var
  %lnilh = getelementptr inbounds i64, i64* %lnilg, i32 2
  %lnili = ptrtoint i64* %lnilh to i64
  %lnilj = inttoptr i64 %lnili to i64*
  store i64* %lnilj, i64** %Sp_Var
  %lnilk = load i64*, i64** %Sp_Var
  %lnill = getelementptr inbounds i64, i64* %lnilk, i32 0
  %lnilm = bitcast i64* %lnill to i64*
  %lniln = load i64, i64* %lnilm, !tbaa !2
  %lnilo = inttoptr i64 %lniln to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnilp = load i64*, i64** %Sp_Var
  %lnilq = load i64*, i64** %Hp_Var
  %lnilr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnilo( i64* %Base_Arg, i64* %lnilp, i64* %lnilq, i64 %lnilr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cftH:
  %lnils = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnils, !tbaa !5
  %lnilt = load i64, i64* %R1_Var
  store i64 %lnilt, i64* %R1_Var
  %lnilu = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnilv = load i64*, i64** %Sp_Var
  %lnilw = load i64*, i64** %Hp_Var
  %lnilx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnilu( i64* %Base_Arg, i64* %lnilv, i64* %lnilw, i64 %lnilx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7TS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7TS_info$def to i8*)
define internal ghccc void @s7TS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
nily:
  %ls7T3 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cftP
cftP:
  %lnilz = load i64*, i64** %Sp_Var
  %lnilA = getelementptr inbounds i64, i64* %lnilz, i32 -4
  %lnilB = ptrtoint i64* %lnilA to i64
  %lnilC = icmp ult i64 %lnilB, %SpLim_Arg
  %lnilD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnilC, i1 0 )
  br i1 %lnilD, label %cfu1, label %cfu2
cfu2:
  %lnilF = ptrtoint i8* @stg_upd_frame_info to i64
  %lnilE = load i64*, i64** %Sp_Var
  %lnilG = getelementptr inbounds i64, i64* %lnilE, i32 -2
  store i64 %lnilF, i64* %lnilG, !tbaa !2
  %lnilI = load i64, i64* %R1_Var
  %lnilH = load i64*, i64** %Sp_Var
  %lnilJ = getelementptr inbounds i64, i64* %lnilH, i32 -1
  store i64 %lnilI, i64* %lnilJ, !tbaa !2
  %lnilL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftM_info$def to i64
  %lnilK = load i64*, i64** %Sp_Var
  %lnilM = getelementptr inbounds i64, i64* %lnilK, i32 -4
  store i64 %lnilL, i64* %lnilM, !tbaa !2
  %lnilP = load i64, i64* %R1_Var
  %lnilQ = add i64 %lnilP, 16
  %lnilR = inttoptr i64 %lnilQ to i64*
  %lnilS = load i64, i64* %lnilR, !tbaa !4
  store i64 %lnilS, i64* %ls7T3
  %lnilV = load i64, i64* %R1_Var
  %lnilW = add i64 %lnilV, 24
  %lnilX = inttoptr i64 %lnilW to i64*
  %lnilY = load i64, i64* %lnilX, !tbaa !4
  store i64 %lnilY, i64* %R1_Var
  %lnim0 = load i64, i64* %ls7T3
  %lnilZ = load i64*, i64** %Sp_Var
  %lnim1 = getelementptr inbounds i64, i64* %lnilZ, i32 -3
  store i64 %lnim0, i64* %lnim1, !tbaa !2
  %lnim2 = load i64*, i64** %Sp_Var
  %lnim3 = getelementptr inbounds i64, i64* %lnim2, i32 -4
  %lnim4 = ptrtoint i64* %lnim3 to i64
  %lnim5 = inttoptr i64 %lnim4 to i64*
  store i64* %lnim5, i64** %Sp_Var
  %lnim6 = load i64, i64* %R1_Var
  %lnim7 = and i64 %lnim6, 7
  %lnim8 = icmp ne i64 %lnim7, 0
  br i1 %lnim8, label %ufu8, label %cftN
cftN:
  %lnima = load i64, i64* %R1_Var
  %lnimb = inttoptr i64 %lnima to i64*
  %lnimc = load i64, i64* %lnimb, !tbaa !4
  %lnimd = inttoptr i64 %lnimc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnime = load i64*, i64** %Sp_Var
  %lnimf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnimd( i64* %Base_Arg, i64* %lnime, i64* %Hp_Arg, i64 %lnimf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufu8:
  %lnimg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnimh = load i64*, i64** %Sp_Var
  %lnimi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnimg( i64* %Base_Arg, i64* %lnimh, i64* %Hp_Arg, i64 %lnimi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfu1:
  %lnimj = load i64, i64* %R1_Var
  store i64 %lnimj, i64* %R1_Var
  %lnimk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lniml = bitcast i64* %lnimk to i64*
  %lnimm = load i64, i64* %lniml, !tbaa !5
  %lnimn = inttoptr i64 %lnimm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnimo = load i64*, i64** %Sp_Var
  %lnimp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnimn( i64* %Base_Arg, i64* %lnimo, i64* %Hp_Arg, i64 %lnimp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cftM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftM_info$def to i8*)
define internal ghccc void @cftM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 0}>
{
nimq:
  %ls7TU = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cftM
cftM:
  %lnimr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftS_info$def to i64
  %lnims = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnimr, i64* %lnims, !tbaa !2
  %lnimv = load i64, i64* %R1_Var
  %lnimw = add i64 %lnimv, 7
  %lnimx = inttoptr i64 %lnimw to double*
  %lnimy = load double, double* %lnimx, !tbaa !4
  store double %lnimy, double* %ls7TU
  %lnimz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnimA = bitcast i64* %lnimz to i64*
  %lnimB = load i64, i64* %lnimA, !tbaa !2
  store i64 %lnimB, i64* %R1_Var
  %lnimC = load double, double* %ls7TU
  %lnimD = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnimE = bitcast i64* %lnimD to double*
  store double %lnimC, double* %lnimE, !tbaa !2
  %lnimF = load i64, i64* %R1_Var
  %lnimG = and i64 %lnimF, 7
  %lnimH = icmp ne i64 %lnimG, 0
  br i1 %lnimH, label %ufu7, label %cftT
cftT:
  %lnimJ = load i64, i64* %R1_Var
  %lnimK = inttoptr i64 %lnimJ to i64*
  %lnimL = load i64, i64* %lnimK, !tbaa !4
  %lnimM = inttoptr i64 %lnimL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnimN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnimM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnimN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufu7:
  %lnimO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnimP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnimO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnimP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cftS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cftS_info$def to i8*)
define internal ghccc void @cftS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
nimQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7TX = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cftS
cftS:
  %lnimR = load i64*, i64** %Hp_Var
  %lnimS = getelementptr inbounds i64, i64* %lnimR, i32 2
  %lnimT = ptrtoint i64* %lnimS to i64
  %lnimU = inttoptr i64 %lnimT to i64*
  store i64* %lnimU, i64** %Hp_Var
  %lnimV = load i64*, i64** %Hp_Var
  %lnimW = ptrtoint i64* %lnimV to i64
  %lnimX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnimY = bitcast i64* %lnimX to i64*
  %lnimZ = load i64, i64* %lnimY, !tbaa !5
  %lnin0 = icmp ugt i64 %lnimW, %lnimZ
  %lnin1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnin0, i1 0 )
  br i1 %lnin1, label %cfu6, label %cfu5
cfu5:
  %lnin2 = load i64*, i64** %Sp_Var
  %lnin3 = getelementptr inbounds i64, i64* %lnin2, i32 1
  %lnin4 = bitcast i64* %lnin3 to double*
  %lnin5 = load double, double* %lnin4, !tbaa !2
  %lnin8 = load i64, i64* %R1_Var
  %lnin9 = add i64 %lnin8, 7
  %lnina = inttoptr i64 %lnin9 to double*
  %lninb = load double, double* %lnina, !tbaa !4
  %lninc = fadd double %lnin5, %lninb
  store double %lninc, double* %ls7TX
  %lnine = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnind = load i64*, i64** %Hp_Var
  %lninf = getelementptr inbounds i64, i64* %lnind, i32 -1
  store i64 %lnine, i64* %lninf, !tbaa !3
  %lninh = load double, double* %ls7TX
  %lning = load i64*, i64** %Hp_Var
  %lnini = getelementptr inbounds i64, i64* %lning, i32 0
  %lninj = bitcast i64* %lnini to double*
  store double %lninh, double* %lninj, !tbaa !3
  %lninl = load i64*, i64** %Hp_Var
  %lninm = ptrtoint i64* %lninl to i64
  %lninn = add i64 %lninm, -7
  store i64 %lninn, i64* %R1_Var
  %lnino = load i64*, i64** %Sp_Var
  %lninp = getelementptr inbounds i64, i64* %lnino, i32 2
  %lninq = ptrtoint i64* %lninp to i64
  %lninr = inttoptr i64 %lninq to i64*
  store i64* %lninr, i64** %Sp_Var
  %lnins = load i64*, i64** %Sp_Var
  %lnint = getelementptr inbounds i64, i64* %lnins, i32 0
  %lninu = bitcast i64* %lnint to i64*
  %lninv = load i64, i64* %lninu, !tbaa !2
  %lninw = inttoptr i64 %lninv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lninx = load i64*, i64** %Sp_Var
  %lniny = load i64*, i64** %Hp_Var
  %lninz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lninw( i64* %Base_Arg, i64* %lninx, i64* %lniny, i64 %lninz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfu6:
  %lninA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lninA, !tbaa !5
  %lninB = load i64, i64* %R1_Var
  store i64 %lninB, i64* %R1_Var
  %lninC = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lninD = load i64*, i64** %Sp_Var
  %lninE = load i64*, i64** %Hp_Var
  %lninF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lninC( i64* %Base_Arg, i64* %lninD, i64* %lninE, i64 %lninF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ux_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ux_info$def to i8*)
define internal ghccc void @s7Ux_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 0}>
{
ninG:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cfug
cfug:
  %lninH = add i64 %R1_Arg, 16
  %lninI = inttoptr i64 %lninH to i64*
  %lninJ = load i64, i64* %lninI, !tbaa !4
  store i64 %lninJ, i64* %R2_Var
  %lninK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_refractsurf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lninL = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lninK( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lninL, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwshade_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to i8*)
define ghccc void @Main_zdwshade_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to i64)),i64 0), i64 8, i64 34359738368, i64 4, i32 14, i32 0}>
{
ninM:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfup
cfup:
  %lninN = load i64*, i64** %Sp_Var
  %lninO = getelementptr inbounds i64, i64* %lninN, i32 -11
  %lninP = ptrtoint i64* %lninO to i64
  %lninQ = icmp ult i64 %lninP, %SpLim_Arg
  %lninR = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lninQ, i1 0 )
  br i1 %lninR, label %cfuq, label %cfur
cfur:
  %lninS = load i64*, i64** %Sp_Var
  %lninT = getelementptr inbounds i64, i64* %lninS, i32 -6
  store i64 %R2_Arg, i64* %lninT, !tbaa !2
  %lninU = load i64*, i64** %Sp_Var
  %lninV = getelementptr inbounds i64, i64* %lninU, i32 -5
  store i64 %R3_Arg, i64* %lninV, !tbaa !2
  %lninW = load i64*, i64** %Sp_Var
  %lninX = getelementptr inbounds i64, i64* %lninW, i32 -4
  store i64 %R4_Arg, i64* %lninX, !tbaa !2
  %lninY = load i64*, i64** %Sp_Var
  %lninZ = getelementptr inbounds i64, i64* %lninY, i32 -3
  store i64 %R5_Arg, i64* %lninZ, !tbaa !2
  %lnio0 = load i64*, i64** %Sp_Var
  %lnio1 = getelementptr inbounds i64, i64* %lnio0, i32 -2
  store i64 %R6_Arg, i64* %lnio1, !tbaa !2
  %lnio2 = load i64*, i64** %Sp_Var
  %lnio3 = getelementptr inbounds i64, i64* %lnio2, i32 -1
  store i64 %R5_Arg, i64* %lnio3, !tbaa !2
  %lnio4 = load i64*, i64** %Sp_Var
  %lnio5 = getelementptr inbounds i64, i64* %lnio4, i32 -6
  %lnio6 = ptrtoint i64* %lnio5 to i64
  %lnio7 = inttoptr i64 %lnio6 to i64*
  store i64* %lnio7, i64** %Sp_Var
  %lnio8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfy9$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnio9 = load i64*, i64** %Sp_Var
  %lnioa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnio8( i64* %Base_Arg, i64* %lnio9, i64* %Hp_Arg, i64 %lnioa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfuq:
  %lniob = ptrtoint %Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64
  store i64 %lniob, i64* %R1_Var
  %lnioc = load i64*, i64** %Sp_Var
  %lniod = getelementptr inbounds i64, i64* %lnioc, i32 -5
  store i64 %R2_Arg, i64* %lniod, !tbaa !2
  %lnioe = load i64*, i64** %Sp_Var
  %lniof = getelementptr inbounds i64, i64* %lnioe, i32 -4
  store i64 %R3_Arg, i64* %lniof, !tbaa !2
  %lniog = load i64*, i64** %Sp_Var
  %lnioh = getelementptr inbounds i64, i64* %lniog, i32 -3
  store i64 %R4_Arg, i64* %lnioh, !tbaa !2
  %lnioi = load i64*, i64** %Sp_Var
  %lnioj = getelementptr inbounds i64, i64* %lnioi, i32 -2
  store i64 %R5_Arg, i64* %lnioj, !tbaa !2
  %lniok = load i64*, i64** %Sp_Var
  %lniol = getelementptr inbounds i64, i64* %lniok, i32 -1
  store i64 %R6_Arg, i64* %lniol, !tbaa !2
  %lniom = load i64*, i64** %Sp_Var
  %lnion = getelementptr inbounds i64, i64* %lniom, i32 -5
  %lnioo = ptrtoint i64* %lnion to i64
  %lniop = inttoptr i64 %lnioo to i64*
  store i64* %lniop, i64** %Sp_Var
  %lnioq = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnior = bitcast i64* %lnioq to i64*
  %lnios = load i64, i64* %lnior, !tbaa !5
  %lniot = inttoptr i64 %lnios to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniou = load i64*, i64** %Sp_Var
  %lniov = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniot( i64* %Base_Arg, i64* %lniou, i64* %Hp_Arg, i64 %lniov, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfy9 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfy9$def to i8*)
define internal ghccc void @_cfy9$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niow:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfy9
cfy9:
  %lnioy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfyb_info$def to i64
  %lniox = load i64*, i64** %Sp_Var
  %lnioz = getelementptr inbounds i64, i64* %lniox, i32 -1
  store i64 %lnioy, i64* %lnioz, !tbaa !2
  %lnioA = load i64*, i64** %Sp_Var
  %lnioB = getelementptr inbounds i64, i64* %lnioA, i32 5
  %lnioC = bitcast i64* %lnioB to i64*
  %lnioD = load i64, i64* %lnioC, !tbaa !2
  store i64 %lnioD, i64* %R1_Var
  %lnioE = load i64*, i64** %Sp_Var
  %lnioF = getelementptr inbounds i64, i64* %lnioE, i32 -1
  %lnioG = ptrtoint i64* %lnioF to i64
  %lnioH = inttoptr i64 %lnioG to i64*
  store i64* %lnioH, i64** %Sp_Var
  %lnioI = load i64, i64* %R1_Var
  %lnioJ = and i64 %lnioI, 7
  %lnioK = icmp ne i64 %lnioJ, 0
  br i1 %lnioK, label %ufzr, label %cfyd
cfyd:
  %lnioM = load i64, i64* %R1_Var
  %lnioN = inttoptr i64 %lnioM to i64*
  %lnioO = load i64, i64* %lnioN, !tbaa !4
  %lnioP = inttoptr i64 %lnioO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnioQ = load i64*, i64** %Sp_Var
  %lnioR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnioP( i64* %Base_Arg, i64* %lnioQ, i64* %Hp_Arg, i64 %lnioR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzr:
  %lnioS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfyb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnioT = load i64*, i64** %Sp_Var
  %lnioU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnioS( i64* %Base_Arg, i64* %lnioT, i64* %Hp_Arg, i64 %lnioU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfyb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfyb_info$def to i8*)
define internal ghccc void @cfyb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2057, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfyb_info$def to i64)) to i32),i32 0)}>
{
nioV:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7UV = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfyb
cfyb:
  %lnioW = load i64, i64* %R1_Var
  %lnioX = and i64 %lnioW, 7
  switch i64 %lnioX, label %cfyj [i64 1, label %cfyj
i64 2, label %cfyo]
cfyj:
  %lnioY = load i64*, i64** %Sp_Var
  %lnioZ = getelementptr inbounds i64, i64* %lnioY, i32 6
  %lnip0 = bitcast i64* %lnioZ to double*
  store double 0x0000000000000000, double* %lnip0, !tbaa !2
  %lnip1 = load i64*, i64** %Sp_Var
  %lnip2 = getelementptr inbounds i64, i64* %lnip1, i32 1
  %lnip3 = ptrtoint i64* %lnip2 to i64
  %lnip4 = inttoptr i64 %lnip3 to i64*
  store i64* %lnip4, i64** %Sp_Var
  %lnip5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffd$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnip6 = load i64*, i64** %Sp_Var
  %lnip7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnip5( i64* %Base_Arg, i64* %lnip6, i64* %Hp_Arg, i64 %lnip7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfyo:
  %lnip9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfym_info$def to i64
  %lnip8 = load i64*, i64** %Sp_Var
  %lnipa = getelementptr inbounds i64, i64* %lnip8, i32 0
  store i64 %lnip9, i64* %lnipa, !tbaa !2
  %lnipd = load i64, i64* %R1_Var
  %lnipe = add i64 %lnipd, 14
  %lnipf = inttoptr i64 %lnipe to i64*
  %lnipg = load i64, i64* %lnipf, !tbaa !4
  store i64 %lnipg, i64* %ls7UV
  %lnipj = load i64, i64* %R1_Var
  %lnipk = add i64 %lnipj, 6
  %lnipl = inttoptr i64 %lnipk to i64*
  %lnipm = load i64, i64* %lnipl, !tbaa !4
  store i64 %lnipm, i64* %R1_Var
  %lnipo = load i64, i64* %ls7UV
  %lnipn = load i64*, i64** %Sp_Var
  %lnipp = getelementptr inbounds i64, i64* %lnipn, i32 6
  store i64 %lnipo, i64* %lnipp, !tbaa !2
  %lnipq = load i64, i64* %R1_Var
  %lnipr = and i64 %lnipq, 7
  %lnips = icmp ne i64 %lnipr, 0
  br i1 %lnips, label %ufzs, label %cfyp
cfyp:
  %lnipu = load i64, i64* %R1_Var
  %lnipv = inttoptr i64 %lnipu to i64*
  %lnipw = load i64, i64* %lnipv, !tbaa !4
  %lnipx = inttoptr i64 %lnipw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnipy = load i64*, i64** %Sp_Var
  %lnipz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnipx( i64* %Base_Arg, i64* %lnipy, i64* %Hp_Arg, i64 %lnipz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzs:
  %lnipA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfym_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnipB = load i64*, i64** %Sp_Var
  %lnipC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnipA( i64* %Base_Arg, i64* %lnipB, i64* %Hp_Arg, i64 %lnipC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfym_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfym_info$def to i8*)
define internal ghccc void @cfym_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 9, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfym_info$def to i64)) to i32),i32 0)}>
{
nipD:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfym
cfym:
  %lnipE = load i64, i64* %R1_Var
  %lnipF = and i64 %lnipE, 7
  switch i64 %lnipF, label %cfyv [i64 6, label %cfyz]
cfyv:
  %lnipH = load i64*, i64** %Sp_Var
  %lnipI = getelementptr inbounds i64, i64* %lnipH, i32 6
  %lnipJ = bitcast i64* %lnipI to i64*
  %lnipK = load i64, i64* %lnipJ, !tbaa !2
  %lnipG = load i64*, i64** %Sp_Var
  %lnipL = getelementptr inbounds i64, i64* %lnipG, i32 6
  store i64 %lnipK, i64* %lnipL, !tbaa !2
  %lnipM = load i64*, i64** %Sp_Var
  %lnipN = getelementptr inbounds i64, i64* %lnipM, i32 1
  %lnipO = ptrtoint i64* %lnipN to i64
  %lnipP = inttoptr i64 %lnipO to i64*
  store i64* %lnipP, i64** %Sp_Var
  %lnipQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfy9$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnipR = load i64*, i64** %Sp_Var
  %lnipS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnipQ( i64* %Base_Arg, i64* %lnipR, i64* %Hp_Arg, i64 %lnipS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfyz:
  %lnipU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfy1_info$def to i64
  %lnipT = load i64*, i64** %Sp_Var
  %lnipV = getelementptr inbounds i64, i64* %lnipT, i32 0
  store i64 %lnipU, i64* %lnipV, !tbaa !2
  %lnipY = load i64, i64* %R1_Var
  %lnipZ = add i64 %lnipY, 2
  %lniq0 = inttoptr i64 %lnipZ to i64*
  %lniq1 = load i64, i64* %lniq0, !tbaa !4
  store i64 %lniq1, i64* %R1_Var
  %lniq2 = load i64, i64* %R1_Var
  %lniq3 = and i64 %lniq2, 7
  %lniq4 = icmp ne i64 %lniq3, 0
  br i1 %lniq4, label %ufzu, label %cfy3
cfy3:
  %lniq6 = load i64, i64* %R1_Var
  %lniq7 = inttoptr i64 %lniq6 to i64*
  %lniq8 = load i64, i64* %lniq7, !tbaa !4
  %lniq9 = inttoptr i64 %lniq8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniqa = load i64*, i64** %Sp_Var
  %lniqb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniq9( i64* %Base_Arg, i64* %lniqa, i64* %Hp_Arg, i64 %lniqb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzu:
  %lniqc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfy1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniqd = load i64*, i64** %Sp_Var
  %lniqe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniqc( i64* %Base_Arg, i64* %lniqd, i64* %Hp_Arg, i64 %lniqe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfy1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfy1_info$def to i8*)
define internal ghccc void @cfy1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2057, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfy1_info$def to i64)) to i32),i32 0)}>
{
niqf:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfy1
cfy1:
  %lniqh = add i64 %R1_Arg, 7
  %lniqi = inttoptr i64 %lniqh to double*
  %lniqj = load double, double* %lniqi, !tbaa !4
  %lniqg = load i64*, i64** %Sp_Var
  %lniqk = getelementptr inbounds i64, i64* %lniqg, i32 6
  %lniql = bitcast i64* %lniqk to double*
  store double %lniqj, double* %lniql, !tbaa !2
  %lniqm = load i64*, i64** %Sp_Var
  %lniqn = getelementptr inbounds i64, i64* %lniqm, i32 1
  %lniqo = ptrtoint i64* %lniqn to i64
  %lniqp = inttoptr i64 %lniqo to i64*
  store i64* %lniqp, i64** %Sp_Var
  %lniqq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffd$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniqr = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniqq( i64* %Base_Arg, i64* %lniqr, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cffd = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffd$def to i8*)
define internal ghccc void @_cffd$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niqs:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Py = alloca double, i32 1
  %ls7Pu = alloca i64, i32 1
  %lcfff = alloca i64, i32 1
  %lcffh = alloca i64, i32 1
  %ls7Ps = alloca i64, i32 1
  %lcffj = alloca i64, i32 1
  %ls7Pp = alloca i64, i32 1
  %lcffl = alloca i64, i32 1
  %lcffn = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  br label %cffd
cffd:
  %lniqt = load i64*, i64** %Hp_Var
  %lniqu = getelementptr inbounds i64, i64* %lniqt, i32 28
  %lniqv = ptrtoint i64* %lniqu to i64
  %lniqw = inttoptr i64 %lniqv to i64*
  store i64* %lniqw, i64** %Hp_Var
  %lniqx = load i64*, i64** %Sp_Var
  %lniqy = getelementptr inbounds i64, i64* %lniqx, i32 5
  %lniqz = bitcast i64* %lniqy to double*
  %lniqA = load double, double* %lniqz, !tbaa !2
  store double %lniqA, double* %ls7Py
  %lniqB = load i64*, i64** %Hp_Var
  %lniqC = ptrtoint i64* %lniqB to i64
  %lniqD = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniqE = bitcast i64* %lniqD to i64*
  %lniqF = load i64, i64* %lniqE, !tbaa !5
  %lniqG = icmp ugt i64 %lniqC, %lniqF
  %lniqH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniqG, i1 0 )
  br i1 %lniqH, label %cfuu, label %cfut
cfut:
  %lniqJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Pz_info$def to i64
  %lniqI = load i64*, i64** %Hp_Var
  %lniqK = getelementptr inbounds i64, i64* %lniqI, i32 -27
  store i64 %lniqJ, i64* %lniqK, !tbaa !3
  %lniqM = load i64*, i64** %Sp_Var
  %lniqN = getelementptr inbounds i64, i64* %lniqM, i32 7
  %lniqO = bitcast i64* %lniqN to i64*
  %lniqP = load i64, i64* %lniqO, !tbaa !2
  %lniqL = load i64*, i64** %Hp_Var
  %lniqQ = getelementptr inbounds i64, i64* %lniqL, i32 -25
  store i64 %lniqP, i64* %lniqQ, !tbaa !3
  %lniqR = load i64*, i64** %Sp_Var
  %lniqS = getelementptr inbounds i64, i64* %lniqR, i32 6
  %lniqT = bitcast i64* %lniqS to i64*
  %lniqU = load i64, i64* %lniqT, !tbaa !2
  store i64 %lniqU, i64* %ls7Pu
  %lniqW = load i64, i64* %ls7Pu
  %lniqV = load i64*, i64** %Hp_Var
  %lniqX = getelementptr inbounds i64, i64* %lniqV, i32 -24
  store i64 %lniqW, i64* %lniqX, !tbaa !3
  %lniqZ = load i64*, i64** %Sp_Var
  %lnir0 = getelementptr inbounds i64, i64* %lniqZ, i32 4
  %lnir1 = bitcast i64* %lnir0 to i64*
  %lnir2 = load i64, i64* %lnir1, !tbaa !2
  %lniqY = load i64*, i64** %Hp_Var
  %lnir3 = getelementptr inbounds i64, i64* %lniqY, i32 -23
  store i64 %lnir2, i64* %lnir3, !tbaa !3
  %lnir5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Q9_info$def to i64
  %lnir4 = load i64*, i64** %Hp_Var
  %lnir6 = getelementptr inbounds i64, i64* %lnir4, i32 -22
  store i64 %lnir5, i64* %lnir6, !tbaa !3
  %lnir8 = load i64*, i64** %Sp_Var
  %lnir9 = getelementptr inbounds i64, i64* %lnir8, i32 2
  %lnira = bitcast i64* %lnir9 to i64*
  %lnirb = load i64, i64* %lnira, !tbaa !2
  %lnir7 = load i64*, i64** %Hp_Var
  %lnirc = getelementptr inbounds i64, i64* %lnir7, i32 -20
  store i64 %lnirb, i64* %lnirc, !tbaa !3
  %lnire = load i64*, i64** %Sp_Var
  %lnirf = getelementptr inbounds i64, i64* %lnire, i32 1
  %lnirg = bitcast i64* %lnirf to i64*
  %lnirh = load i64, i64* %lnirg, !tbaa !2
  %lnird = load i64*, i64** %Hp_Var
  %lniri = getelementptr inbounds i64, i64* %lnird, i32 -19
  store i64 %lnirh, i64* %lniri, !tbaa !3
  %lnirj = load i64*, i64** %Hp_Var
  %lnirk = getelementptr inbounds i64, i64* %lnirj, i32 -27
  %lnirl = ptrtoint i64* %lnirk to i64
  store i64 %lnirl, i64* %lcfff
  %lnirn = load i64, i64* %lcfff
  %lnirm = load i64*, i64** %Hp_Var
  %lniro = getelementptr inbounds i64, i64* %lnirm, i32 -18
  store i64 %lnirn, i64* %lniro, !tbaa !3
  %lnirq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7QN_info$def to i64
  %lnirp = load i64*, i64** %Hp_Var
  %lnirr = getelementptr inbounds i64, i64* %lnirp, i32 -17
  store i64 %lnirq, i64* %lnirr, !tbaa !3
  %lnirs = load i64*, i64** %Hp_Var
  %lnirt = getelementptr inbounds i64, i64* %lnirs, i32 -22
  %lniru = ptrtoint i64* %lnirt to i64
  store i64 %lniru, i64* %lcffh
  %lnirw = load i64, i64* %lcffh
  %lnirv = load i64*, i64** %Hp_Var
  %lnirx = getelementptr inbounds i64, i64* %lnirv, i32 -15
  store i64 %lnirw, i64* %lnirx, !tbaa !3
  %lnirz = load i64, i64* %ls7Pu
  %lniry = load i64*, i64** %Hp_Var
  %lnirA = getelementptr inbounds i64, i64* %lniry, i32 -14
  store i64 %lnirz, i64* %lnirA, !tbaa !3
  %lnirC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7RH_info$def to i64
  %lnirB = load i64*, i64** %Hp_Var
  %lnirD = getelementptr inbounds i64, i64* %lnirB, i32 -13
  store i64 %lnirC, i64* %lnirD, !tbaa !3
  %lnirE = load i64*, i64** %Sp_Var
  %lnirF = getelementptr inbounds i64, i64* %lnirE, i32 3
  %lnirG = bitcast i64* %lnirF to i64*
  %lnirH = load i64, i64* %lnirG, !tbaa !2
  store i64 %lnirH, i64* %ls7Ps
  %lnirJ = load i64, i64* %ls7Ps
  %lnirI = load i64*, i64** %Hp_Var
  %lnirK = getelementptr inbounds i64, i64* %lnirI, i32 -11
  store i64 %lnirJ, i64* %lnirK, !tbaa !3
  %lnirM = load double, double* %ls7Py
  %lnirL = load i64*, i64** %Hp_Var
  %lnirN = getelementptr inbounds i64, i64* %lnirL, i32 -10
  %lnirO = bitcast i64* %lnirN to double*
  store double %lnirM, double* %lnirO, !tbaa !3
  %lnirQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Sb_info$def to i64
  %lnirP = load i64*, i64** %Hp_Var
  %lnirR = getelementptr inbounds i64, i64* %lnirP, i32 -9
  store i64 %lnirQ, i64* %lnirR, !tbaa !3
  %lnirT = load i64, i64* %lcfff
  %lnirS = load i64*, i64** %Hp_Var
  %lnirU = getelementptr inbounds i64, i64* %lnirS, i32 -7
  store i64 %lnirT, i64* %lnirU, !tbaa !3
  %lnirW = load i64, i64* %lcffh
  %lnirV = load i64*, i64** %Hp_Var
  %lnirX = getelementptr inbounds i64, i64* %lnirV, i32 -6
  store i64 %lnirW, i64* %lnirX, !tbaa !3
  %lnirY = load i64*, i64** %Hp_Var
  %lnirZ = getelementptr inbounds i64, i64* %lnirY, i32 -17
  %lnis0 = ptrtoint i64* %lnirZ to i64
  store i64 %lnis0, i64* %lcffj
  %lnis2 = load i64, i64* %lcffj
  %lnis1 = load i64*, i64** %Hp_Var
  %lnis3 = getelementptr inbounds i64, i64* %lnis1, i32 -5
  store i64 %lnis2, i64* %lnis3, !tbaa !3
  %lnis5 = load i64, i64* %ls7Ps
  %lnis4 = load i64*, i64** %Hp_Var
  %lnis6 = getelementptr inbounds i64, i64* %lnis4, i32 -4
  store i64 %lnis5, i64* %lnis6, !tbaa !3
  %lnis7 = load i64*, i64** %Sp_Var
  %lnis8 = getelementptr inbounds i64, i64* %lnis7, i32 0
  %lnis9 = bitcast i64* %lnis8 to i64*
  %lnisa = load i64, i64* %lnis9, !tbaa !2
  store i64 %lnisa, i64* %ls7Pp
  %lnisc = load i64, i64* %ls7Pp
  %lnisb = load i64*, i64** %Hp_Var
  %lnisd = getelementptr inbounds i64, i64* %lnisb, i32 -3
  store i64 %lnisc, i64* %lnisd, !tbaa !3
  %lnise = load i64*, i64** %Hp_Var
  %lnisf = getelementptr inbounds i64, i64* %lnise, i32 -13
  %lnisg = ptrtoint i64* %lnisf to i64
  store i64 %lnisg, i64* %lcffl
  %lnish = load i64*, i64** %Hp_Var
  %lnisi = getelementptr inbounds i64, i64* %lnish, i32 -9
  %lnisj = ptrtoint i64* %lnisi to i64
  store i64 %lnisj, i64* %lcffn
  %lnisk = load double, double* %ls7Py
  %lnisl = fcmp olt double %lnisk, 0x3EB0C6F7A0B5ED8D
  %lnism = zext i1 %lnisl to i64
  switch i64 %lnism, label %cfxv [i64 1, label %cfxO]
cfxv:
  %lniso = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ux_info$def to i64
  %lnisn = load i64*, i64** %Hp_Var
  %lnisp = getelementptr inbounds i64, i64* %lnisn, i32 -2
  store i64 %lniso, i64* %lnisp, !tbaa !3
  %lnisr = load i64, i64* %ls7Ps
  %lnisq = load i64*, i64** %Hp_Var
  %lniss = getelementptr inbounds i64, i64* %lnisq, i32 0
  store i64 %lnisr, i64* %lniss, !tbaa !3
  %lnisu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxt_info$def to i64
  %lnist = load i64*, i64** %Sp_Var
  %lnisv = getelementptr inbounds i64, i64* %lnist, i32 -1
  store i64 %lnisu, i64* %lnisv, !tbaa !2
  %lnisw = load i64*, i64** %Hp_Var
  %lnisx = getelementptr inbounds i64, i64* %lnisw, i32 -2
  %lnisy = ptrtoint i64* %lnisx to i64
  store i64 %lnisy, i64* %R6_Var
  %lnisz = load i64, i64* %ls7Pu
  store i64 %lnisz, i64* %R5_Var
  %lnisA = load i64, i64* %lcfff
  store i64 %lnisA, i64* %R4_Var
  %lnisB = load i64, i64* %lcffn
  store i64 %lnisB, i64* %R3_Var
  %lnisC = load i64, i64* %ls7Pp
  store i64 %lnisC, i64* %R2_Var
  %lnisE = load i64, i64* %lcffl
  %lnisD = load i64*, i64** %Sp_Var
  %lnisF = getelementptr inbounds i64, i64* %lnisD, i32 -4
  store i64 %lnisE, i64* %lnisF, !tbaa !2
  %lnisH = load i64*, i64** %Sp_Var
  %lnisI = getelementptr inbounds i64, i64* %lnisH, i32 8
  %lnisJ = bitcast i64* %lnisI to i64*
  %lnisK = load i64, i64* %lnisJ, !tbaa !2
  %lnisG = load i64*, i64** %Sp_Var
  %lnisL = getelementptr inbounds i64, i64* %lnisG, i32 -3
  store i64 %lnisK, i64* %lnisL, !tbaa !2
  %lnisN = load i64, i64* %lcffh
  %lnisM = load i64*, i64** %Sp_Var
  %lnisO = getelementptr inbounds i64, i64* %lnisM, i32 -2
  store i64 %lnisN, i64* %lnisO, !tbaa !2
  %lnisQ = load i64, i64* %lcffl
  %lnisP = load i64*, i64** %Sp_Var
  %lnisR = getelementptr inbounds i64, i64* %lnisP, i32 5
  store i64 %lnisQ, i64* %lnisR, !tbaa !2
  %lnisT = load i64, i64* %lcffj
  %lnisS = load i64*, i64** %Sp_Var
  %lnisU = getelementptr inbounds i64, i64* %lnisS, i32 6
  store i64 %lnisT, i64* %lnisU, !tbaa !2
  %lnisW = load i64, i64* %lcfff
  %lnisV = load i64*, i64** %Sp_Var
  %lnisX = getelementptr inbounds i64, i64* %lnisV, i32 7
  store i64 %lnisW, i64* %lnisX, !tbaa !2
  %lnisY = load i64*, i64** %Sp_Var
  %lnisZ = getelementptr inbounds i64, i64* %lnisY, i32 -4
  %lnit0 = ptrtoint i64* %lnisZ to i64
  %lnit1 = inttoptr i64 %lnit0 to i64*
  store i64* %lnit1, i64** %Sp_Var
  %lnit2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_transmitray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnit3 = load i64*, i64** %Sp_Var
  %lnit4 = load i64*, i64** %Hp_Var
  %lnit5 = load i64, i64* %R1_Var
  %lnit6 = load i64, i64* %R2_Var
  %lnit7 = load i64, i64* %R3_Var
  %lnit8 = load i64, i64* %R4_Var
  %lnit9 = load i64, i64* %R5_Var
  %lnita = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnit2( i64* %Base_Arg, i64* %lnit3, i64* %lnit4, i64 %lnit5, i64 %lnit6, i64 %lnit7, i64 %lnit8, i64 %lnit9, i64 %lnita, i64 %SpLim_Arg ) nounwind
  ret void
cfxO:
  %lnitb = load i64*, i64** %Hp_Var
  %lnitc = getelementptr inbounds i64, i64* %lnitb, i32 -3
  %lnitd = ptrtoint i64* %lnitc to i64
  %lnite = inttoptr i64 %lnitd to i64*
  store i64* %lnite, i64** %Hp_Var
  %lnitg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxN_info$def to i64
  %lnitf = load i64*, i64** %Sp_Var
  %lnith = getelementptr inbounds i64, i64* %lnitf, i32 -1
  store i64 %lnitg, i64* %lnith, !tbaa !2
  %lniti = load i64, i64* %lcffn
  store i64 %lniti, i64* %R1_Var
  %lnitk = load i64, i64* %lcffl
  %lnitj = load i64*, i64** %Sp_Var
  %lnitl = getelementptr inbounds i64, i64* %lnitj, i32 5
  store i64 %lnitk, i64* %lnitl, !tbaa !2
  %lnitn = load i64, i64* %lcffj
  %lnitm = load i64*, i64** %Sp_Var
  %lnito = getelementptr inbounds i64, i64* %lnitm, i32 6
  store i64 %lnitn, i64* %lnito, !tbaa !2
  %lnitq = load i64, i64* %lcfff
  %lnitp = load i64*, i64** %Sp_Var
  %lnitr = getelementptr inbounds i64, i64* %lnitp, i32 7
  store i64 %lnitq, i64* %lnitr, !tbaa !2
  %lnits = load i64*, i64** %Sp_Var
  %lnitt = getelementptr inbounds i64, i64* %lnits, i32 -1
  %lnitu = ptrtoint i64* %lnitt to i64
  %lnitv = inttoptr i64 %lnitu to i64*
  store i64* %lnitv, i64** %Sp_Var
  %lnitw = load i64, i64* %R1_Var
  %lnitx = and i64 %lnitw, 7
  %lnity = icmp ne i64 %lnitx, 0
  br i1 %lnity, label %ufz0, label %cfxP
cfxP:
  %lnitA = load i64, i64* %R1_Var
  %lnitB = inttoptr i64 %lnitA to i64*
  %lnitC = load i64, i64* %lnitB, !tbaa !4
  %lnitD = inttoptr i64 %lnitC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnitE = load i64*, i64** %Sp_Var
  %lnitF = load i64*, i64** %Hp_Var
  %lnitG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnitD( i64* %Base_Arg, i64* %lnitE, i64* %lnitF, i64 %lnitG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz0:
  %lnitH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnitI = load i64*, i64** %Sp_Var
  %lnitJ = load i64*, i64** %Hp_Var
  %lnitK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnitH( i64* %Base_Arg, i64* %lnitI, i64* %lnitJ, i64 %lnitK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfuu:
  %lnitL = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 224, i64* %lnitL, !tbaa !5
  %lnitN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffc_info$def to i64
  %lnitM = load i64*, i64** %Sp_Var
  %lnitO = getelementptr inbounds i64, i64* %lnitM, i32 -1
  store i64 %lnitN, i64* %lnitO, !tbaa !2
  %lnitP = load double, double* %ls7Py
  store double %lnitP, double* %D1_Var
  %lnitQ = load i64*, i64** %Sp_Var
  %lnitR = getelementptr inbounds i64, i64* %lnitQ, i32 -1
  %lnitS = ptrtoint i64* %lnitR to i64
  %lnitT = inttoptr i64 %lnitS to i64*
  store i64* %lnitT, i64** %Sp_Var
  %lnitU = bitcast i8* @stg_gc_d1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)*
  %lnitV = load i64*, i64** %Sp_Var
  %lnitW = load i64*, i64** %Hp_Var
  %lnitX = load i64, i64* %R1_Var
  %lnitY = load double, double* %D1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double) %lnitU( i64* %Base_Arg, i64* %lnitV, i64* %lnitW, i64 %lnitX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg, double %lnitY ) nounwind
  ret void
}
@cffc_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffc_info$def to i8*)
define internal ghccc void @cffc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg, double %D1_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2057, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffc_info$def to i64)) to i32),i32 0)}>
{
nitZ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cffc
cffc:
  %lniu0 = load i64*, i64** %Sp_Var
  %lniu1 = getelementptr inbounds i64, i64* %lniu0, i32 6
  %lniu2 = bitcast i64* %lniu1 to double*
  store double %D1_Arg, double* %lniu2, !tbaa !2
  %lniu3 = load i64*, i64** %Sp_Var
  %lniu4 = getelementptr inbounds i64, i64* %lniu3, i32 1
  %lniu5 = ptrtoint i64* %lniu4 to i64
  %lniu6 = inttoptr i64 %lniu5 to i64*
  store i64* %lniu6, i64** %Sp_Var
  %lniu7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffd$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniu8 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniu7( i64* %Base_Arg, i64* %lniu8, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfxN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxN_info$def to i8*)
define internal ghccc void @cfxN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1417, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxN_info$def to i64)) to i32),i32 0)}>
{
niu9:
  br label %cfxN
cfxN:
  %lniua = add i64 %R1_Arg, 23
  %lniub = inttoptr i64 %lniua to i64*
  %lniuc = load i64, i64* %lniub, !tbaa !4
  %lniud = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniuc, i64* %lniud, !tbaa !2
  %lniue = add i64 %R1_Arg, 15
  %lniuf = inttoptr i64 %lniue to i64*
  %lniug = load i64, i64* %lniuf, !tbaa !4
  %lniuh = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lniug, i64* %lniuh, !tbaa !2
  %lniui = add i64 %R1_Arg, 7
  %lniuj = inttoptr i64 %lniui to i64*
  %lniuk = load i64, i64* %lniuj, !tbaa !4
  %lniul = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %lniuk, i64* %lniul, !tbaa !2
  %lnium = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lniun = add i64 %lnium, 1
  %lniuo = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lniun, i64* %lniuo, !tbaa !2
  %lniup = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniup( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfxt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxt_info$def to i8*)
define internal ghccc void @cfxt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1417, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxt_info$def to i64)) to i32),i32 0)}>
{
niuq:
  %ls7UC = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfxt
cfxt:
  %lniur = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxF_info$def to i64
  %lnius = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniur, i64* %lnius, !tbaa !2
  %lniuv = load i64, i64* %R1_Var
  %lniuw = add i64 %lniuv, 7
  %lniux = inttoptr i64 %lniuw to i64*
  %lniuy = load i64, i64* %lniux, !tbaa !4
  store i64 %lniuy, i64* %ls7UC
  %lniuB = load i64, i64* %R1_Var
  %lniuC = add i64 %lniuB, 15
  %lniuD = inttoptr i64 %lniuC to i64*
  %lniuE = load i64, i64* %lniuD, !tbaa !4
  store i64 %lniuE, i64* %R1_Var
  %lniuF = load i64, i64* %ls7UC
  %lniuG = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lniuF, i64* %lniuG, !tbaa !2
  %lniuH = load i64, i64* %R1_Var
  %lniuI = and i64 %lniuH, 7
  %lniuJ = icmp ne i64 %lniuI, 0
  br i1 %lniuJ, label %ufzn, label %cfxH
cfxH:
  %lniuL = load i64, i64* %R1_Var
  %lniuM = inttoptr i64 %lniuL to i64*
  %lniuN = load i64, i64* %lniuM, !tbaa !4
  %lniuO = inttoptr i64 %lniuN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniuP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniuO( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniuP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzn:
  %lniuQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniuR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniuQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniuR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfxF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxF_info$def to i8*)
define internal ghccc void @cfxF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 393, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxF_info$def to i64)) to i32),i32 0)}>
{
niuS:
  br label %cfxF
cfxF:
  %lniuT = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lniuU = bitcast i64* %lniuT to i64*
  %lniuV = load i64, i64* %lniuU, !tbaa !2
  %lniuW = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  store i64 %lniuV, i64* %lniuW, !tbaa !2
  %lniuX = add i64 %R1_Arg, 7
  %lniuY = inttoptr i64 %lniuX to i64*
  %lniuZ = load i64, i64* %lniuY, !tbaa !4
  %lniv0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %lniuZ, i64* %lniv0, !tbaa !2
  %lniv1 = add i64 %R1_Arg, 15
  %lniv2 = inttoptr i64 %lniv1 to i64*
  %lniv3 = load i64, i64* %lniv2, !tbaa !4
  %lniv4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lniv3, i64* %lniv4, !tbaa !2
  %lniv5 = add i64 %R1_Arg, 23
  %lniv6 = inttoptr i64 %lniv5 to i64*
  %lniv7 = load i64, i64* %lniv6, !tbaa !4
  %lniv8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniv7, i64* %lniv8, !tbaa !2
  %lniv9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SR$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniv9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s7SR = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SR$def to i8*)
define internal ghccc void @_s7SR$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niva:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %s7SR
s7SR:
  %lnivc = load i64*, i64** %Sp_Var
  %lnivd = getelementptr inbounds i64, i64* %lnivc, i32 4
  %lnive = bitcast i64* %lnivd to i64*
  %lnivf = load i64, i64* %lnive, !tbaa !2
  %lnivb = load i64*, i64** %Sp_Var
  %lnivg = getelementptr inbounds i64, i64* %lnivb, i32 -1
  store i64 %lnivf, i64* %lnivg, !tbaa !2
  %lnivh = load i64*, i64** %Sp_Var
  %lnivi = getelementptr inbounds i64, i64* %lnivh, i32 -1
  %lnivj = ptrtoint i64* %lnivi to i64
  %lnivk = inttoptr i64 %lnivj to i64*
  store i64* %lnivk, i64** %Sp_Var
  %lnivl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfx2$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnivm = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnivl( i64* %Base_Arg, i64* %lnivm, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfx2 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfx2$def to i8*)
define internal ghccc void @_cfx2$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
nivn:
  %ls7Uq = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfx2
cfx2:
  %lnivo = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnivp = bitcast i64* %lnivo to i64*
  %lnivq = load i64, i64* %lnivp, !tbaa !2
  store i64 %lnivq, i64* %ls7Uq
  %lnivr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfx4_info$def to i64
  %lnivs = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnivr, i64* %lnivs, !tbaa !2
  %lnivt = load i64, i64* %ls7Uq
  store i64 %lnivt, i64* %R1_Var
  %lnivu = load i64, i64* %R1_Var
  %lnivv = and i64 %lnivu, 7
  %lnivw = icmp ne i64 %lnivv, 0
  br i1 %lnivw, label %ufzi, label %cfx6
cfx6:
  %lnivy = load i64, i64* %R1_Var
  %lnivz = inttoptr i64 %lnivy to i64*
  %lnivA = load i64, i64* %lnivz, !tbaa !4
  %lnivB = inttoptr i64 %lnivA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnivC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnivB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnivC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzi:
  %lnivD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfx4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnivE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnivD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnivE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfx4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfx4_info$def to i8*)
define internal ghccc void @cfx4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 10, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfx4_info$def to i64)) to i32),i32 0)}>
{
nivF:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Ut = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfx4
cfx4:
  %lnivG = load i64, i64* %R1_Var
  %lnivH = and i64 %lnivG, 7
  switch i64 %lnivH, label %cfxc [i64 1, label %cfxc
i64 2, label %cfxh]
cfxc:
  %lnivI = load i64*, i64** %Sp_Var
  %lnivJ = getelementptr inbounds i64, i64* %lnivI, i32 0
  %lnivK = bitcast i64* %lnivJ to double*
  store double 0x0000000000000000, double* %lnivK, !tbaa !2
  %lnivM = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnivN = add i64 %lnivM, 1
  %lnivL = load i64*, i64** %Sp_Var
  %lnivO = getelementptr inbounds i64, i64* %lnivL, i32 -1
  store i64 %lnivN, i64* %lnivO, !tbaa !2
  %lnivQ = ptrtoint %Main_lookat1_closure_struct* @Main_lookat1_closure$def to i64
  %lnivR = add i64 %lnivQ, 1
  %lnivP = load i64*, i64** %Sp_Var
  %lnivS = getelementptr inbounds i64, i64* %lnivP, i32 -2
  store i64 %lnivR, i64* %lnivS, !tbaa !2
  %lnivT = load i64*, i64** %Sp_Var
  %lnivU = getelementptr inbounds i64, i64* %lnivT, i32 -2
  %lnivV = ptrtoint i64* %lnivU to i64
  %lnivW = inttoptr i64 %lnivV to i64*
  store i64* %lnivW, i64** %Sp_Var
  %lnivX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SW$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnivY = load i64*, i64** %Sp_Var
  %lnivZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnivX( i64* %Base_Arg, i64* %lnivY, i64* %Hp_Arg, i64 %lnivZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfxh:
  %lniw1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxf_info$def to i64
  %lniw0 = load i64*, i64** %Sp_Var
  %lniw2 = getelementptr inbounds i64, i64* %lniw0, i32 -1
  store i64 %lniw1, i64* %lniw2, !tbaa !2
  %lniw5 = load i64, i64* %R1_Var
  %lniw6 = add i64 %lniw5, 14
  %lniw7 = inttoptr i64 %lniw6 to i64*
  %lniw8 = load i64, i64* %lniw7, !tbaa !4
  store i64 %lniw8, i64* %ls7Ut
  %lniwb = load i64, i64* %R1_Var
  %lniwc = add i64 %lniwb, 6
  %lniwd = inttoptr i64 %lniwc to i64*
  %lniwe = load i64, i64* %lniwd, !tbaa !4
  store i64 %lniwe, i64* %R1_Var
  %lniwg = load i64, i64* %ls7Ut
  %lniwf = load i64*, i64** %Sp_Var
  %lniwh = getelementptr inbounds i64, i64* %lniwf, i32 0
  store i64 %lniwg, i64* %lniwh, !tbaa !2
  %lniwi = load i64*, i64** %Sp_Var
  %lniwj = getelementptr inbounds i64, i64* %lniwi, i32 -1
  %lniwk = ptrtoint i64* %lniwj to i64
  %lniwl = inttoptr i64 %lniwk to i64*
  store i64* %lniwl, i64** %Sp_Var
  %lniwm = load i64, i64* %R1_Var
  %lniwn = and i64 %lniwm, 7
  %lniwo = icmp ne i64 %lniwn, 0
  br i1 %lniwo, label %ufzj, label %cfxi
cfxi:
  %lniwq = load i64, i64* %R1_Var
  %lniwr = inttoptr i64 %lniwq to i64*
  %lniws = load i64, i64* %lniwr, !tbaa !4
  %lniwt = inttoptr i64 %lniws to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniwu = load i64*, i64** %Sp_Var
  %lniwv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniwt( i64* %Base_Arg, i64* %lniwu, i64* %Hp_Arg, i64 %lniwv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzj:
  %lniww = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniwx = load i64*, i64** %Sp_Var
  %lniwy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniww( i64* %Base_Arg, i64* %lniwx, i64* %Hp_Arg, i64 %lniwy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfxf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxf_info$def to i8*)
define internal ghccc void @cfxf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 11, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfxf_info$def to i64)) to i32),i32 0)}>
{
niwz:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfxf
cfxf:
  %lniwA = load i64, i64* %R1_Var
  %lniwB = and i64 %lniwA, 7
  switch i64 %lniwB, label %cfxo [i64 3, label %cfxs]
cfxo:
  %lniwD = load i64*, i64** %Sp_Var
  %lniwE = getelementptr inbounds i64, i64* %lniwD, i32 1
  %lniwF = bitcast i64* %lniwE to i64*
  %lniwG = load i64, i64* %lniwF, !tbaa !2
  %lniwC = load i64*, i64** %Sp_Var
  %lniwH = getelementptr inbounds i64, i64* %lniwC, i32 1
  store i64 %lniwG, i64* %lniwH, !tbaa !2
  %lniwI = load i64*, i64** %Sp_Var
  %lniwJ = getelementptr inbounds i64, i64* %lniwI, i32 1
  %lniwK = ptrtoint i64* %lniwJ to i64
  %lniwL = inttoptr i64 %lniwK to i64*
  store i64* %lniwL, i64** %Sp_Var
  %lniwM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfx2$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniwN = load i64*, i64** %Sp_Var
  %lniwO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniwM( i64* %Base_Arg, i64* %lniwN, i64* %Hp_Arg, i64 %lniwO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfxs:
  %lniwQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwG_info$def to i64
  %lniwP = load i64*, i64** %Sp_Var
  %lniwR = getelementptr inbounds i64, i64* %lniwP, i32 1
  store i64 %lniwQ, i64* %lniwR, !tbaa !2
  %lniwU = load i64, i64* %R1_Var
  %lniwV = add i64 %lniwU, 5
  %lniwW = inttoptr i64 %lniwV to i64*
  %lniwX = load i64, i64* %lniwW, !tbaa !4
  store i64 %lniwX, i64* %R1_Var
  %lniwY = load i64*, i64** %Sp_Var
  %lniwZ = getelementptr inbounds i64, i64* %lniwY, i32 1
  %lnix0 = ptrtoint i64* %lniwZ to i64
  %lnix1 = inttoptr i64 %lnix0 to i64*
  store i64* %lnix1, i64** %Sp_Var
  %lnix2 = load i64, i64* %R1_Var
  %lnix3 = and i64 %lnix2, 7
  %lnix4 = icmp ne i64 %lnix3, 0
  br i1 %lnix4, label %ufzl, label %cfwI
cfwI:
  %lnix6 = load i64, i64* %R1_Var
  %lnix7 = inttoptr i64 %lnix6 to i64*
  %lnix8 = load i64, i64* %lnix7, !tbaa !4
  %lnix9 = inttoptr i64 %lnix8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnixa = load i64*, i64** %Sp_Var
  %lnixb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnix9( i64* %Base_Arg, i64* %lnixa, i64* %Hp_Arg, i64 %lnixb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzl:
  %lnixc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnixd = load i64*, i64** %Sp_Var
  %lnixe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnixc( i64* %Base_Arg, i64* %lnixd, i64* %Hp_Arg, i64 %lnixe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfwG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwG_info$def to i8*)
define internal ghccc void @cfwG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 10, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwG_info$def to i64)) to i32),i32 0)}>
{
nixf:
  %ls7Um = alloca i64, i32 1
  %ls7Ul = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfwG
cfwG:
  %lnixh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwS_info$def to i64
  %lnixg = load i64*, i64** %Sp_Var
  %lnixi = getelementptr inbounds i64, i64* %lnixg, i32 -2
  store i64 %lnixh, i64* %lnixi, !tbaa !2
  %lnixl = load i64, i64* %R1_Var
  %lnixm = add i64 %lnixl, 23
  %lnixn = inttoptr i64 %lnixm to i64*
  %lnixo = load i64, i64* %lnixn, !tbaa !4
  store i64 %lnixo, i64* %ls7Um
  %lnixr = load i64, i64* %R1_Var
  %lnixs = add i64 %lnixr, 15
  %lnixt = inttoptr i64 %lnixs to i64*
  %lnixu = load i64, i64* %lnixt, !tbaa !4
  store i64 %lnixu, i64* %ls7Ul
  %lnixx = load i64, i64* %R1_Var
  %lnixy = add i64 %lnixx, 7
  %lnixz = inttoptr i64 %lnixy to i64*
  %lnixA = load i64, i64* %lnixz, !tbaa !4
  store i64 %lnixA, i64* %R1_Var
  %lnixC = load i64, i64* %ls7Um
  %lnixB = load i64*, i64** %Sp_Var
  %lnixD = getelementptr inbounds i64, i64* %lnixB, i32 -1
  store i64 %lnixC, i64* %lnixD, !tbaa !2
  %lnixF = load i64, i64* %ls7Ul
  %lnixE = load i64*, i64** %Sp_Var
  %lnixG = getelementptr inbounds i64, i64* %lnixE, i32 0
  store i64 %lnixF, i64* %lnixG, !tbaa !2
  %lnixH = load i64*, i64** %Sp_Var
  %lnixI = getelementptr inbounds i64, i64* %lnixH, i32 -2
  %lnixJ = ptrtoint i64* %lnixI to i64
  %lnixK = inttoptr i64 %lnixJ to i64*
  store i64* %lnixK, i64** %Sp_Var
  %lnixL = load i64, i64* %R1_Var
  %lnixM = and i64 %lnixL, 7
  %lnixN = icmp ne i64 %lnixM, 0
  br i1 %lnixN, label %ufzg, label %cfwU
cfwU:
  %lnixP = load i64, i64* %R1_Var
  %lnixQ = inttoptr i64 %lnixP to i64*
  %lnixR = load i64, i64* %lnixQ, !tbaa !4
  %lnixS = inttoptr i64 %lnixR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnixT = load i64*, i64** %Sp_Var
  %lnixU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnixS( i64* %Base_Arg, i64* %lnixT, i64* %Hp_Arg, i64 %lnixU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzg:
  %lnixV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnixW = load i64*, i64** %Sp_Var
  %lnixX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnixV( i64* %Base_Arg, i64* %lnixW, i64* %Hp_Arg, i64 %lnixX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfwS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwS_info$def to i8*)
define internal ghccc void @cfwS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 12, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwS_info$def to i64)) to i32),i32 0)}>
{
nixY:
  br label %cfwS
cfwS:
  %lnixZ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lniy0 = bitcast i64* %lnixZ to i64*
  %lniy1 = load i64, i64* %lniy0, !tbaa !2
  %lniy2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniy1, i64* %lniy2, !tbaa !2
  %lniy3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lniy4 = bitcast i64* %lniy3 to i64*
  %lniy5 = load i64, i64* %lniy4, !tbaa !2
  %lniy6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lniy5, i64* %lniy6, !tbaa !2
  %lniy7 = add i64 %R1_Arg, 7
  %lniy8 = inttoptr i64 %lniy7 to double*
  %lniy9 = load double, double* %lniy8, !tbaa !4
  %lniya = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lniyb = bitcast i64* %lniya to double*
  store double %lniy9, double* %lniyb, !tbaa !2
  %lniyc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SW$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniyc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_s7SW = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s7SW$def to i8*)
define internal ghccc void @_s7SW$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niyd:
  br label %s7SW
s7SW:
  %lniye = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  %lniyf = bitcast i64* %lniye to i64*
  %lniyg = load i64, i64* %lniyf, !tbaa !2
  %lniyh = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  store i64 %lniyg, i64* %lniyh, !tbaa !2
  %lniyi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfw4$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniyi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cfw4 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfw4$def to i8*)
define internal ghccc void @_cfw4$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niyj:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfw4
cfw4:
  %lniyl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfw6_info$def to i64
  %lniyk = load i64*, i64** %Sp_Var
  %lniym = getelementptr inbounds i64, i64* %lniyk, i32 -1
  store i64 %lniyl, i64* %lniym, !tbaa !2
  %lniyn = load i64*, i64** %Sp_Var
  %lniyo = getelementptr inbounds i64, i64* %lniyn, i32 7
  %lniyp = bitcast i64* %lniyo to i64*
  %lniyq = load i64, i64* %lniyp, !tbaa !2
  store i64 %lniyq, i64* %R1_Var
  %lniyr = load i64*, i64** %Sp_Var
  %lniys = getelementptr inbounds i64, i64* %lniyr, i32 -1
  %lniyt = ptrtoint i64* %lniys to i64
  %lniyu = inttoptr i64 %lniyt to i64*
  store i64* %lniyu, i64** %Sp_Var
  %lniyv = load i64, i64* %R1_Var
  %lniyw = and i64 %lniyv, 7
  %lniyx = icmp ne i64 %lniyw, 0
  br i1 %lniyx, label %ufzb, label %cfw8
cfw8:
  %lniyz = load i64, i64* %R1_Var
  %lniyA = inttoptr i64 %lniyz to i64*
  %lniyB = load i64, i64* %lniyA, !tbaa !4
  %lniyC = inttoptr i64 %lniyB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniyD = load i64*, i64** %Sp_Var
  %lniyE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniyC( i64* %Base_Arg, i64* %lniyD, i64* %Hp_Arg, i64 %lniyE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzb:
  %lniyF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfw6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniyG = load i64*, i64** %Sp_Var
  %lniyH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniyF( i64* %Base_Arg, i64* %lniyG, i64* %Hp_Arg, i64 %lniyH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfw6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfw6_info$def to i8*)
define internal ghccc void @cfw6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8461, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfw6_info$def to i64)) to i32),i32 0)}>
{
niyI:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7U9 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfw6
cfw6:
  %lniyJ = load i64, i64* %R1_Var
  %lniyK = and i64 %lniyJ, 7
  switch i64 %lniyK, label %cfwe [i64 1, label %cfwe
i64 2, label %cfwj]
cfwe:
  %lniyL = load i64*, i64** %Sp_Var
  %lniyM = getelementptr inbounds i64, i64* %lniyL, i32 8
  %lniyN = bitcast i64* %lniyM to double*
  store double 0x0000000000000000, double* %lniyN, !tbaa !2
  %lniyO = load i64*, i64** %Sp_Var
  %lniyP = getelementptr inbounds i64, i64* %lniyO, i32 1
  %lniyQ = ptrtoint i64* %lniyP to i64
  %lniyR = inttoptr i64 %lniyQ to i64*
  store i64* %lniyR, i64** %Sp_Var
  %lniyS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffC$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniyT = load i64*, i64** %Sp_Var
  %lniyU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniyS( i64* %Base_Arg, i64* %lniyT, i64* %Hp_Arg, i64 %lniyU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfwj:
  %lniyW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwh_info$def to i64
  %lniyV = load i64*, i64** %Sp_Var
  %lniyX = getelementptr inbounds i64, i64* %lniyV, i32 0
  store i64 %lniyW, i64* %lniyX, !tbaa !2
  %lniz0 = load i64, i64* %R1_Var
  %lniz1 = add i64 %lniz0, 14
  %lniz2 = inttoptr i64 %lniz1 to i64*
  %lniz3 = load i64, i64* %lniz2, !tbaa !4
  store i64 %lniz3, i64* %ls7U9
  %lniz6 = load i64, i64* %R1_Var
  %lniz7 = add i64 %lniz6, 6
  %lniz8 = inttoptr i64 %lniz7 to i64*
  %lniz9 = load i64, i64* %lniz8, !tbaa !4
  store i64 %lniz9, i64* %R1_Var
  %lnizb = load i64, i64* %ls7U9
  %lniza = load i64*, i64** %Sp_Var
  %lnizc = getelementptr inbounds i64, i64* %lniza, i32 8
  store i64 %lnizb, i64* %lnizc, !tbaa !2
  %lnizd = load i64, i64* %R1_Var
  %lnize = and i64 %lnizd, 7
  %lnizf = icmp ne i64 %lnize, 0
  br i1 %lnizf, label %ufzc, label %cfwk
cfwk:
  %lnizh = load i64, i64* %R1_Var
  %lnizi = inttoptr i64 %lnizh to i64*
  %lnizj = load i64, i64* %lnizi, !tbaa !4
  %lnizk = inttoptr i64 %lnizj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnizl = load i64*, i64** %Sp_Var
  %lnizm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnizk( i64* %Base_Arg, i64* %lnizl, i64* %Hp_Arg, i64 %lnizm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufzc:
  %lnizn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnizo = load i64*, i64** %Sp_Var
  %lnizp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnizn( i64* %Base_Arg, i64* %lnizo, i64* %Hp_Arg, i64 %lnizp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfwh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwh_info$def to i8*)
define internal ghccc void @cfwh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 269, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfwh_info$def to i64)) to i32),i32 0)}>
{
nizq:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfwh
cfwh:
  %lnizr = load i64, i64* %R1_Var
  %lnizs = and i64 %lnizr, 7
  switch i64 %lnizs, label %cfwq [i64 5, label %cfwu]
cfwq:
  %lnizu = load i64*, i64** %Sp_Var
  %lnizv = getelementptr inbounds i64, i64* %lnizu, i32 8
  %lnizw = bitcast i64* %lnizv to i64*
  %lnizx = load i64, i64* %lnizw, !tbaa !2
  %lnizt = load i64*, i64** %Sp_Var
  %lnizy = getelementptr inbounds i64, i64* %lnizt, i32 8
  store i64 %lnizx, i64* %lnizy, !tbaa !2
  %lnizz = load i64*, i64** %Sp_Var
  %lnizA = getelementptr inbounds i64, i64* %lnizz, i32 1
  %lnizB = ptrtoint i64* %lnizA to i64
  %lnizC = inttoptr i64 %lnizB to i64*
  store i64* %lnizC, i64** %Sp_Var
  %lnizD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cfw4$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnizE = load i64*, i64** %Sp_Var
  %lnizF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnizD( i64* %Base_Arg, i64* %lnizE, i64* %Hp_Arg, i64 %lnizF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfwu:
  %lnizH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvU_info$def to i64
  %lnizG = load i64*, i64** %Sp_Var
  %lnizI = getelementptr inbounds i64, i64* %lnizG, i32 0
  store i64 %lnizH, i64* %lnizI, !tbaa !2
  %lnizL = load i64, i64* %R1_Var
  %lnizM = add i64 %lnizL, 3
  %lnizN = inttoptr i64 %lnizM to i64*
  %lnizO = load i64, i64* %lnizN, !tbaa !4
  store i64 %lnizO, i64* %R1_Var
  %lnizP = load i64, i64* %R1_Var
  %lnizQ = and i64 %lnizP, 7
  %lnizR = icmp ne i64 %lnizQ, 0
  br i1 %lnizR, label %ufze, label %cfvW
cfvW:
  %lnizT = load i64, i64* %R1_Var
  %lnizU = inttoptr i64 %lnizT to i64*
  %lnizV = load i64, i64* %lnizU, !tbaa !4
  %lnizW = inttoptr i64 %lnizV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnizX = load i64*, i64** %Sp_Var
  %lnizY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnizW( i64* %Base_Arg, i64* %lnizX, i64* %Hp_Arg, i64 %lnizY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufze:
  %lnizZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniA0 = load i64*, i64** %Sp_Var
  %lniA1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnizZ( i64* %Base_Arg, i64* %lniA0, i64* %Hp_Arg, i64 %lniA1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfvU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvU_info$def to i8*)
define internal ghccc void @cfvU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8461, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvU_info$def to i64)) to i32),i32 0)}>
{
niA2:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfvU
cfvU:
  %lniA4 = add i64 %R1_Arg, 7
  %lniA5 = inttoptr i64 %lniA4 to double*
  %lniA6 = load double, double* %lniA5, !tbaa !4
  %lniA3 = load i64*, i64** %Sp_Var
  %lniA7 = getelementptr inbounds i64, i64* %lniA3, i32 8
  %lniA8 = bitcast i64* %lniA7 to double*
  store double %lniA6, double* %lniA8, !tbaa !2
  %lniA9 = load i64*, i64** %Sp_Var
  %lniAa = getelementptr inbounds i64, i64* %lniA9, i32 1
  %lniAb = ptrtoint i64* %lniAa to i64
  %lniAc = inttoptr i64 %lniAb to i64*
  store i64* %lniAc, i64** %Sp_Var
  %lniAd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffC$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniAe = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniAd( i64* %Base_Arg, i64* %lniAe, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cffC = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffC$def to i8*)
define internal ghccc void @_cffC$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niAf:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7T1 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  br label %cffC
cffC:
  %lniAg = load i64*, i64** %Hp_Var
  %lniAh = getelementptr inbounds i64, i64* %lniAg, i32 8
  %lniAi = ptrtoint i64* %lniAh to i64
  %lniAj = inttoptr i64 %lniAi to i64*
  store i64* %lniAj, i64** %Hp_Var
  %lniAk = load i64*, i64** %Sp_Var
  %lniAl = getelementptr inbounds i64, i64* %lniAk, i32 7
  %lniAm = bitcast i64* %lniAl to double*
  %lniAn = load double, double* %lniAm, !tbaa !2
  store double %lniAn, double* %ls7T1
  %lniAo = load i64*, i64** %Hp_Var
  %lniAp = ptrtoint i64* %lniAo to i64
  %lniAq = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniAr = bitcast i64* %lniAq to i64*
  %lniAs = load i64, i64* %lniAr, !tbaa !5
  %lniAt = icmp ugt i64 %lniAp, %lniAs
  %lniAu = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniAt, i1 0 )
  br i1 %lniAu, label %cfuz, label %cfuy
cfuy:
  %lniAw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7T3_info$def to i64
  %lniAv = load i64*, i64** %Hp_Var
  %lniAx = getelementptr inbounds i64, i64* %lniAv, i32 -7
  store i64 %lniAw, i64* %lniAx, !tbaa !3
  %lniAz = load i64*, i64** %Sp_Var
  %lniAA = getelementptr inbounds i64, i64* %lniAz, i32 0
  %lniAB = bitcast i64* %lniAA to i64*
  %lniAC = load i64, i64* %lniAB, !tbaa !2
  %lniAy = load i64*, i64** %Hp_Var
  %lniAD = getelementptr inbounds i64, i64* %lniAy, i32 -5
  store i64 %lniAC, i64* %lniAD, !tbaa !3
  %lniAF = load double, double* %ls7T1
  %lniAE = load i64*, i64** %Hp_Var
  %lniAG = getelementptr inbounds i64, i64* %lniAE, i32 -4
  %lniAH = bitcast i64* %lniAG to double*
  store double %lniAF, double* %lniAH, !tbaa !3
  %lniAJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7T7_info$def to i64
  %lniAI = load i64*, i64** %Hp_Var
  %lniAK = getelementptr inbounds i64, i64* %lniAI, i32 -3
  store i64 %lniAJ, i64* %lniAK, !tbaa !3
  %lniAM = load i64*, i64** %Sp_Var
  %lniAN = getelementptr inbounds i64, i64* %lniAM, i32 1
  %lniAO = bitcast i64* %lniAN to i64*
  %lniAP = load i64, i64* %lniAO, !tbaa !2
  %lniAL = load i64*, i64** %Hp_Var
  %lniAQ = getelementptr inbounds i64, i64* %lniAL, i32 -1
  store i64 %lniAP, i64* %lniAQ, !tbaa !3
  %lniAS = load double, double* %ls7T1
  %lniAR = load i64*, i64** %Hp_Var
  %lniAT = getelementptr inbounds i64, i64* %lniAR, i32 0
  %lniAU = bitcast i64* %lniAT to double*
  store double %lniAS, double* %lniAU, !tbaa !3
  %lniAW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffN_info$def to i64
  %lniAV = load i64*, i64** %Sp_Var
  %lniAX = getelementptr inbounds i64, i64* %lniAV, i32 1
  store i64 %lniAW, i64* %lniAX, !tbaa !2
  %lniAY = load i64*, i64** %Sp_Var
  %lniAZ = getelementptr inbounds i64, i64* %lniAY, i32 8
  %lniB0 = bitcast i64* %lniAZ to i64*
  %lniB1 = load i64, i64* %lniB0, !tbaa !2
  store i64 %lniB1, i64* %R1_Var
  %lniB3 = load double, double* %ls7T1
  %lniB4 = load i64*, i64** %Sp_Var
  %lniB5 = getelementptr inbounds i64, i64* %lniB4, i32 2
  %lniB6 = bitcast i64* %lniB5 to double*
  %lniB7 = load double, double* %lniB6, !tbaa !2
  %lniB8 = fmul double %lniB3, %lniB7
  %lniB2 = load i64*, i64** %Sp_Var
  %lniB9 = getelementptr inbounds i64, i64* %lniB2, i32 2
  %lniBa = bitcast i64* %lniB9 to double*
  store double %lniB8, double* %lniBa, !tbaa !2
  %lniBc = load i64*, i64** %Hp_Var
  %lniBd = getelementptr inbounds i64, i64* %lniBc, i32 -3
  %lniBe = ptrtoint i64* %lniBd to i64
  %lniBb = load i64*, i64** %Sp_Var
  %lniBf = getelementptr inbounds i64, i64* %lniBb, i32 7
  store i64 %lniBe, i64* %lniBf, !tbaa !2
  %lniBh = load i64*, i64** %Hp_Var
  %lniBi = getelementptr inbounds i64, i64* %lniBh, i32 -7
  %lniBj = ptrtoint i64* %lniBi to i64
  %lniBg = load i64*, i64** %Sp_Var
  %lniBk = getelementptr inbounds i64, i64* %lniBg, i32 8
  store i64 %lniBj, i64* %lniBk, !tbaa !2
  %lniBl = load i64*, i64** %Sp_Var
  %lniBm = getelementptr inbounds i64, i64* %lniBl, i32 1
  %lniBn = ptrtoint i64* %lniBm to i64
  %lniBo = inttoptr i64 %lniBn to i64*
  store i64* %lniBo, i64** %Sp_Var
  %lniBp = load i64, i64* %R1_Var
  %lniBq = and i64 %lniBp, 7
  %lniBr = icmp ne i64 %lniBq, 0
  br i1 %lniBr, label %ufz2, label %cffO
cffO:
  %lniBt = load i64, i64* %R1_Var
  %lniBu = inttoptr i64 %lniBt to i64*
  %lniBv = load i64, i64* %lniBu, !tbaa !4
  %lniBw = inttoptr i64 %lniBv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniBx = load i64*, i64** %Sp_Var
  %lniBy = load i64*, i64** %Hp_Var
  %lniBz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniBw( i64* %Base_Arg, i64* %lniBx, i64* %lniBy, i64 %lniBz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz2:
  %lniBA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniBB = load i64*, i64** %Sp_Var
  %lniBC = load i64*, i64** %Hp_Var
  %lniBD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniBA( i64* %Base_Arg, i64* %lniBB, i64* %lniBC, i64 %lniBD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfuz:
  %lniBE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %lniBE, !tbaa !5
  %lniBG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffB_info$def to i64
  %lniBF = load i64*, i64** %Sp_Var
  %lniBH = getelementptr inbounds i64, i64* %lniBF, i32 -1
  store i64 %lniBG, i64* %lniBH, !tbaa !2
  %lniBI = load double, double* %ls7T1
  store double %lniBI, double* %D1_Var
  %lniBJ = load i64*, i64** %Sp_Var
  %lniBK = getelementptr inbounds i64, i64* %lniBJ, i32 -1
  %lniBL = ptrtoint i64* %lniBK to i64
  %lniBM = inttoptr i64 %lniBL to i64*
  store i64* %lniBM, i64** %Sp_Var
  %lniBN = bitcast i8* @stg_gc_d1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)*
  %lniBO = load i64*, i64** %Sp_Var
  %lniBP = load i64*, i64** %Hp_Var
  %lniBQ = load i64, i64* %R1_Var
  %lniBR = load double, double* %D1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double) %lniBN( i64* %Base_Arg, i64* %lniBO, i64* %lniBP, i64 %lniBQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg, double %lniBR ) nounwind
  ret void
}
@cffB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffB_info$def to i8*)
define internal ghccc void @cffB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg, double %D1_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8461, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, double)* @cffB_info$def to i64)) to i32),i32 0)}>
{
niBS:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cffB
cffB:
  %lniBT = load i64*, i64** %Sp_Var
  %lniBU = getelementptr inbounds i64, i64* %lniBT, i32 8
  %lniBV = bitcast i64* %lniBU to double*
  store double %D1_Arg, double* %lniBV, !tbaa !2
  %lniBW = load i64*, i64** %Sp_Var
  %lniBX = getelementptr inbounds i64, i64* %lniBW, i32 1
  %lniBY = ptrtoint i64* %lniBX to i64
  %lniBZ = inttoptr i64 %lniBY to i64*
  store i64* %lniBZ, i64** %Sp_Var
  %lniC0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cffC$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniC1 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniC0( i64* %Base_Arg, i64* %lniC1, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cffN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffN_info$def to i8*)
define internal ghccc void @cffN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 75, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffN_info$def to i64)) to i32),i32 0)}>
{
niC2:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7T2 = alloca double, i32 1
  %lcffJ = alloca i64, i32 1
  %lcffH = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cffN
cffN:
  %lniC3 = load i64, i64* %R1_Var
  %lniC4 = and i64 %lniC3, 7
  switch i64 %lniC4, label %cfvz [i64 1, label %cfvz
i64 2, label %cfvE]
cfvz:
  %lniC5 = load i64*, i64** %Hp_Var
  %lniC6 = getelementptr inbounds i64, i64* %lniC5, i32 6
  %lniC7 = ptrtoint i64* %lniC6 to i64
  %lniC8 = inttoptr i64 %lniC7 to i64*
  store i64* %lniC8, i64** %Hp_Var
  %lniC9 = load i64*, i64** %Hp_Var
  %lniCa = ptrtoint i64* %lniC9 to i64
  %lniCb = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniCc = bitcast i64* %lniCb to i64*
  %lniCd = load i64, i64* %lniCc, !tbaa !5
  %lniCe = icmp ugt i64 %lniCa, %lniCd
  %lniCf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniCe, i1 0 )
  br i1 %lniCf, label %cfvC, label %cfvB
cfvB:
  %lniCh = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lniCg = load i64*, i64** %Hp_Var
  %lniCi = getelementptr inbounds i64, i64* %lniCg, i32 -5
  store i64 %lniCh, i64* %lniCi, !tbaa !3
  %lniCj = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lniCk = bitcast i64* %lniCj to double*
  %lniCl = load double, double* %lniCk, !tbaa !2
  store double %lniCl, double* %ls7T2
  %lniCn = load double, double* %ls7T2
  %lniCm = load i64*, i64** %Hp_Var
  %lniCo = getelementptr inbounds i64, i64* %lniCm, i32 -4
  %lniCp = bitcast i64* %lniCo to double*
  store double %lniCn, double* %lniCp, !tbaa !3
  %lniCr = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniCq = load i64*, i64** %Hp_Var
  %lniCs = getelementptr inbounds i64, i64* %lniCq, i32 -3
  store i64 %lniCr, i64* %lniCs, !tbaa !3
  %lniCv = load i64*, i64** %Hp_Var
  %lniCw = ptrtoint i64* %lniCv to i64
  %lniCx = add i64 %lniCw, -39
  %lniCt = load i64*, i64** %Hp_Var
  %lniCy = getelementptr inbounds i64, i64* %lniCt, i32 -2
  store i64 %lniCx, i64* %lniCy, !tbaa !3
  %lniCz = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %lniCA = bitcast i64* %lniCz to i64*
  %lniCB = load i64, i64* %lniCA, !tbaa !2
  store i64 %lniCB, i64* %lcffJ
  %lniCD = load i64, i64* %lcffJ
  %lniCC = load i64*, i64** %Hp_Var
  %lniCE = getelementptr inbounds i64, i64* %lniCC, i32 -1
  store i64 %lniCD, i64* %lniCE, !tbaa !3
  %lniCF = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  %lniCG = bitcast i64* %lniCF to i64*
  %lniCH = load i64, i64* %lniCG, !tbaa !2
  store i64 %lniCH, i64* %lcffH
  %lniCJ = load i64, i64* %lcffH
  %lniCI = load i64*, i64** %Hp_Var
  %lniCK = getelementptr inbounds i64, i64* %lniCI, i32 0
  store i64 %lniCJ, i64* %lniCK, !tbaa !3
  %lniCL = load double, double* %ls7T2
  %lniCM = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lniCN = bitcast i64* %lniCM to double*
  store double %lniCL, double* %lniCN, !tbaa !2
  %lniCO = load i64, i64* %lcffJ
  %lniCP = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  store i64 %lniCO, i64* %lniCP, !tbaa !2
  %lniCQ = load i64, i64* %lcffH
  %lniCR = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  store i64 %lniCQ, i64* %lniCR, !tbaa !2
  %lniCT = load i64*, i64** %Hp_Var
  %lniCU = ptrtoint i64* %lniCT to i64
  %lniCV = add i64 %lniCU, -23
  %lniCW = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lniCV, i64* %lniCW, !tbaa !2
  %lniCX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniCY = load i64*, i64** %Hp_Var
  %lniCZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniCX( i64* %Base_Arg, i64* %Sp_Arg, i64* %lniCY, i64 %lniCZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfvC:
  %lniD0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lniD0, !tbaa !5
  %lniD1 = load i64, i64* %R1_Var
  store i64 %lniD1, i64* %R1_Var
  %lniD2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniD3 = load i64*, i64** %Hp_Var
  %lniD4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniD2( i64* %Base_Arg, i64* %Sp_Arg, i64* %lniD3, i64 %lniD4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfvE:
  %lniD5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffW_info$def to i64
  %lniD6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniD5, i64* %lniD6, !tbaa !2
  %lniD7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 8
  %lniD8 = bitcast i64* %lniD7 to i64*
  %lniD9 = load i64, i64* %lniD8, !tbaa !2
  store i64 %lniD9, i64* %R1_Var
  %lniDa = load i64, i64* %R1_Var
  %lniDb = and i64 %lniDa, 7
  %lniDc = icmp ne i64 %lniDb, 0
  br i1 %lniDc, label %ufz3, label %cffX
cffX:
  %lniDe = load i64, i64* %R1_Var
  %lniDf = inttoptr i64 %lniDe to i64*
  %lniDg = load i64, i64* %lniDf, !tbaa !4
  %lniDh = inttoptr i64 %lniDg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniDi = load i64*, i64** %Hp_Var
  %lniDj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniDh( i64* %Base_Arg, i64* %Sp_Arg, i64* %lniDi, i64 %lniDj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz3:
  %lniDk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniDl = load i64*, i64** %Hp_Var
  %lniDm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniDk( i64* %Base_Arg, i64* %Sp_Arg, i64* %lniDl, i64 %lniDm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cffW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffW_info$def to i8*)
define internal ghccc void @cffW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8267, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cffW_info$def to i64)) to i32),i32 0)}>
{
niDn:
  %ls7TH = alloca i64, i32 1
  %ls7TI = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cffW
cffW:
  %lniDp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfg1_info$def to i64
  %lniDo = load i64*, i64** %Sp_Var
  %lniDq = getelementptr inbounds i64, i64* %lniDo, i32 -1
  store i64 %lniDp, i64* %lniDq, !tbaa !2
  %lniDt = load i64, i64* %R1_Var
  %lniDu = add i64 %lniDt, 15
  %lniDv = inttoptr i64 %lniDu to i64*
  %lniDw = load i64, i64* %lniDv, !tbaa !4
  store i64 %lniDw, i64* %ls7TH
  %lniDz = load i64, i64* %R1_Var
  %lniDA = add i64 %lniDz, 23
  %lniDB = inttoptr i64 %lniDA to i64*
  %lniDC = load i64, i64* %lniDB, !tbaa !4
  store i64 %lniDC, i64* %ls7TI
  %lniDF = load i64, i64* %R1_Var
  %lniDG = add i64 %lniDF, 7
  %lniDH = inttoptr i64 %lniDG to i64*
  %lniDI = load i64, i64* %lniDH, !tbaa !4
  store i64 %lniDI, i64* %R1_Var
  %lniDK = load i64, i64* %ls7TI
  %lniDJ = load i64*, i64** %Sp_Var
  %lniDL = getelementptr inbounds i64, i64* %lniDJ, i32 0
  store i64 %lniDK, i64* %lniDL, !tbaa !2
  %lniDN = load i64, i64* %ls7TH
  %lniDM = load i64*, i64** %Sp_Var
  %lniDO = getelementptr inbounds i64, i64* %lniDM, i32 8
  store i64 %lniDN, i64* %lniDO, !tbaa !2
  %lniDP = load i64*, i64** %Sp_Var
  %lniDQ = getelementptr inbounds i64, i64* %lniDP, i32 -1
  %lniDR = ptrtoint i64* %lniDQ to i64
  %lniDS = inttoptr i64 %lniDR to i64*
  store i64* %lniDS, i64** %Sp_Var
  %lniDT = load i64, i64* %R1_Var
  %lniDU = and i64 %lniDT, 7
  %lniDV = icmp ne i64 %lniDU, 0
  br i1 %lniDV, label %ufz5, label %cfg2
cfg2:
  %lniDX = load i64, i64* %R1_Var
  %lniDY = inttoptr i64 %lniDX to i64*
  %lniDZ = load i64, i64* %lniDY, !tbaa !4
  %lniE0 = inttoptr i64 %lniDZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniE1 = load i64*, i64** %Sp_Var
  %lniE2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniE0( i64* %Base_Arg, i64* %lniE1, i64* %Hp_Arg, i64 %lniE2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz5:
  %lniE3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfg1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniE4 = load i64*, i64** %Sp_Var
  %lniE5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniE3( i64* %Base_Arg, i64* %lniE4, i64* %Hp_Arg, i64 %lniE5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfg1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfg1_info$def to i8*)
define internal ghccc void @cfg1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 140, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfg1_info$def to i64)) to i32),i32 0)}>
{
niE6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7TL = alloca double, i32 1
  %lcfg9 = alloca i64, i32 1
  %lcfgb = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfg1
cfg1:
  %lniE7 = load i64*, i64** %Hp_Var
  %lniE8 = getelementptr inbounds i64, i64* %lniE7, i32 14
  %lniE9 = ptrtoint i64* %lniE8 to i64
  %lniEa = inttoptr i64 %lniE9 to i64*
  store i64* %lniEa, i64** %Hp_Var
  %lniEb = load i64*, i64** %Hp_Var
  %lniEc = ptrtoint i64* %lniEb to i64
  %lniEd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniEe = bitcast i64* %lniEd to i64*
  %lniEf = load i64, i64* %lniEe, !tbaa !5
  %lniEg = icmp ugt i64 %lniEc, %lniEf
  %lniEh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniEg, i1 0 )
  br i1 %lniEh, label %cfvI, label %cfvH
cfvH:
  %lniEk = load i64, i64* %R1_Var
  %lniEl = add i64 %lniEk, 7
  %lniEm = inttoptr i64 %lniEl to double*
  %lniEn = load double, double* %lniEm, !tbaa !4
  %lniEo = load i64*, i64** %Sp_Var
  %lniEp = getelementptr inbounds i64, i64* %lniEo, i32 2
  %lniEq = bitcast i64* %lniEp to double*
  %lniEr = load double, double* %lniEq, !tbaa !2
  %lniEs = fadd double %lniEn, %lniEr
  store double %lniEs, double* %ls7TL
  %lniEu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7TM_info$def to i64
  %lniEt = load i64*, i64** %Hp_Var
  %lniEv = getelementptr inbounds i64, i64* %lniEt, i32 -13
  store i64 %lniEu, i64* %lniEv, !tbaa !3
  %lniEx = load i64*, i64** %Sp_Var
  %lniEy = getelementptr inbounds i64, i64* %lniEx, i32 7
  %lniEz = bitcast i64* %lniEy to i64*
  %lniEA = load i64, i64* %lniEz, !tbaa !2
  %lniEw = load i64*, i64** %Hp_Var
  %lniEB = getelementptr inbounds i64, i64* %lniEw, i32 -11
  store i64 %lniEA, i64* %lniEB, !tbaa !3
  %lniED = load i64*, i64** %Sp_Var
  %lniEE = getelementptr inbounds i64, i64* %lniED, i32 9
  %lniEF = bitcast i64* %lniEE to i64*
  %lniEG = load i64, i64* %lniEF, !tbaa !2
  %lniEC = load i64*, i64** %Hp_Var
  %lniEH = getelementptr inbounds i64, i64* %lniEC, i32 -10
  store i64 %lniEG, i64* %lniEH, !tbaa !3
  %lniEJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7TS_info$def to i64
  %lniEI = load i64*, i64** %Hp_Var
  %lniEK = getelementptr inbounds i64, i64* %lniEI, i32 -9
  store i64 %lniEJ, i64* %lniEK, !tbaa !3
  %lniEM = load i64*, i64** %Sp_Var
  %lniEN = getelementptr inbounds i64, i64* %lniEM, i32 8
  %lniEO = bitcast i64* %lniEN to i64*
  %lniEP = load i64, i64* %lniEO, !tbaa !2
  %lniEL = load i64*, i64** %Hp_Var
  %lniEQ = getelementptr inbounds i64, i64* %lniEL, i32 -7
  store i64 %lniEP, i64* %lniEQ, !tbaa !3
  %lniES = load i64*, i64** %Sp_Var
  %lniET = getelementptr inbounds i64, i64* %lniES, i32 1
  %lniEU = bitcast i64* %lniET to i64*
  %lniEV = load i64, i64* %lniEU, !tbaa !2
  %lniER = load i64*, i64** %Hp_Var
  %lniEW = getelementptr inbounds i64, i64* %lniER, i32 -6
  store i64 %lniEV, i64* %lniEW, !tbaa !3
  %lniEY = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lniEX = load i64*, i64** %Hp_Var
  %lniEZ = getelementptr inbounds i64, i64* %lniEX, i32 -5
  store i64 %lniEY, i64* %lniEZ, !tbaa !3
  %lniF1 = load double, double* %ls7TL
  %lniF0 = load i64*, i64** %Hp_Var
  %lniF2 = getelementptr inbounds i64, i64* %lniF0, i32 -4
  %lniF3 = bitcast i64* %lniF2 to double*
  store double %lniF1, double* %lniF3, !tbaa !3
  %lniF5 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniF4 = load i64*, i64** %Hp_Var
  %lniF6 = getelementptr inbounds i64, i64* %lniF4, i32 -3
  store i64 %lniF5, i64* %lniF6, !tbaa !3
  %lniF9 = load i64*, i64** %Hp_Var
  %lniFa = ptrtoint i64* %lniF9 to i64
  %lniFb = add i64 %lniFa, -39
  %lniF7 = load i64*, i64** %Hp_Var
  %lniFc = getelementptr inbounds i64, i64* %lniF7, i32 -2
  store i64 %lniFb, i64* %lniFc, !tbaa !3
  %lniFd = load i64*, i64** %Hp_Var
  %lniFe = getelementptr inbounds i64, i64* %lniFd, i32 -13
  %lniFf = ptrtoint i64* %lniFe to i64
  store i64 %lniFf, i64* %lcfg9
  %lniFh = load i64, i64* %lcfg9
  %lniFg = load i64*, i64** %Hp_Var
  %lniFi = getelementptr inbounds i64, i64* %lniFg, i32 -1
  store i64 %lniFh, i64* %lniFi, !tbaa !3
  %lniFj = load i64*, i64** %Hp_Var
  %lniFk = getelementptr inbounds i64, i64* %lniFj, i32 -9
  %lniFl = ptrtoint i64* %lniFk to i64
  store i64 %lniFl, i64* %lcfgb
  %lniFn = load i64, i64* %lcfgb
  %lniFm = load i64*, i64** %Hp_Var
  %lniFo = getelementptr inbounds i64, i64* %lniFm, i32 0
  store i64 %lniFn, i64* %lniFo, !tbaa !3
  %lniFr = load i64*, i64** %Hp_Var
  %lniFs = ptrtoint i64* %lniFr to i64
  %lniFt = add i64 %lniFs, -23
  %lniFp = load i64*, i64** %Sp_Var
  %lniFu = getelementptr inbounds i64, i64* %lniFp, i32 2
  store i64 %lniFt, i64* %lniFu, !tbaa !2
  %lniFw = load i64, i64* %lcfgb
  %lniFv = load i64*, i64** %Sp_Var
  %lniFx = getelementptr inbounds i64, i64* %lniFv, i32 7
  store i64 %lniFw, i64* %lniFx, !tbaa !2
  %lniFz = load i64, i64* %lcfg9
  %lniFy = load i64*, i64** %Sp_Var
  %lniFA = getelementptr inbounds i64, i64* %lniFy, i32 8
  store i64 %lniFz, i64* %lniFA, !tbaa !2
  %lniFC = load double, double* %ls7TL
  %lniFB = load i64*, i64** %Sp_Var
  %lniFD = getelementptr inbounds i64, i64* %lniFB, i32 9
  %lniFE = bitcast i64* %lniFD to double*
  store double %lniFC, double* %lniFE, !tbaa !2
  %lniFF = load i64*, i64** %Sp_Var
  %lniFG = getelementptr inbounds i64, i64* %lniFF, i32 1
  %lniFH = ptrtoint i64* %lniFG to i64
  %lniFI = inttoptr i64 %lniFH to i64*
  store i64* %lniFI, i64** %Sp_Var
  %lniFJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniFK = load i64*, i64** %Sp_Var
  %lniFL = load i64*, i64** %Hp_Var
  %lniFM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniFJ( i64* %Base_Arg, i64* %lniFK, i64* %lniFL, i64 %lniFM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfvI:
  %lniFN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 112, i64* %lniFN, !tbaa !5
  %lniFO = load i64, i64* %R1_Var
  store i64 %lniFO, i64* %R1_Var
  %lniFP = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniFQ = load i64*, i64** %Sp_Var
  %lniFR = load i64*, i64** %Hp_Var
  %lniFS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniFP( i64* %Base_Arg, i64* %lniFQ, i64* %lniFR, i64 %lniFS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfuA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuA_info$def to i8*)
define internal ghccc void @cfuA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8203, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuA_info$def to i64)) to i32),i32 0)}>
{
niFT:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Pw = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfuA
cfuA:
  %lniFU = load i64*, i64** %Hp_Var
  %lniFV = getelementptr inbounds i64, i64* %lniFU, i32 4
  %lniFW = ptrtoint i64* %lniFV to i64
  %lniFX = inttoptr i64 %lniFW to i64*
  store i64* %lniFX, i64** %Hp_Var
  %lniFY = load i64*, i64** %Hp_Var
  %lniFZ = ptrtoint i64* %lniFY to i64
  %lniG0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniG1 = bitcast i64* %lniG0 to i64*
  %lniG2 = load i64, i64* %lniG1, !tbaa !5
  %lniG3 = icmp ugt i64 %lniFZ, %lniG2
  %lniG4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniG3, i1 0 )
  br i1 %lniG4, label %cfuF, label %cfuE
cfuE:
  %lniG5 = load i64*, i64** %Sp_Var
  %lniG6 = getelementptr inbounds i64, i64* %lniG5, i32 8
  %lniG7 = bitcast i64* %lniG6 to double*
  %lniG8 = load double, double* %lniG7, !tbaa !2
  %lniG9 = fcmp olt double %lniG8, 0x3EB0C6F7A0B5ED8D
  %lniGa = zext i1 %lniG9 to i64
  switch i64 %lniGa, label %cfuM [i64 1, label %cfuT]
cfuM:
  %lniGc = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniGb = load i64*, i64** %Hp_Var
  %lniGd = getelementptr inbounds i64, i64* %lniGb, i32 -3
  store i64 %lniGc, i64* %lniGd, !tbaa !3
  %lniGf = load i64*, i64** %Sp_Var
  %lniGg = getelementptr inbounds i64, i64* %lniGf, i32 5
  %lniGh = bitcast i64* %lniGg to i64*
  %lniGi = load i64, i64* %lniGh, !tbaa !2
  %lniGe = load i64*, i64** %Hp_Var
  %lniGj = getelementptr inbounds i64, i64* %lniGe, i32 -2
  store i64 %lniGi, i64* %lniGj, !tbaa !3
  %lniGl = load i64*, i64** %Sp_Var
  %lniGm = getelementptr inbounds i64, i64* %lniGl, i32 4
  %lniGn = bitcast i64* %lniGm to i64*
  %lniGo = load i64, i64* %lniGn, !tbaa !2
  %lniGk = load i64*, i64** %Hp_Var
  %lniGp = getelementptr inbounds i64, i64* %lniGk, i32 -1
  store i64 %lniGo, i64* %lniGp, !tbaa !3
  %lniGr = load i64*, i64** %Sp_Var
  %lniGs = getelementptr inbounds i64, i64* %lniGr, i32 2
  %lniGt = bitcast i64* %lniGs to i64*
  %lniGu = load i64, i64* %lniGt, !tbaa !2
  %lniGq = load i64*, i64** %Hp_Var
  %lniGv = getelementptr inbounds i64, i64* %lniGq, i32 0
  store i64 %lniGu, i64* %lniGv, !tbaa !3
  %lniGw = load i64*, i64** %Sp_Var
  %lniGx = getelementptr inbounds i64, i64* %lniGw, i32 11
  %lniGy = bitcast i64* %lniGx to i64*
  %lniGz = load i64, i64* %lniGy, !tbaa !2
  store i64 %lniGz, i64* %ls7Pw
  %lniGB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuK_info$def to i64
  %lniGA = load i64*, i64** %Sp_Var
  %lniGC = getelementptr inbounds i64, i64* %lniGA, i32 11
  store i64 %lniGB, i64* %lniGC, !tbaa !2
  %lniGD = load i64, i64* %ls7Pw
  store i64 %lniGD, i64* %R6_Var
  %lniGE = load i64*, i64** %Sp_Var
  %lniGF = getelementptr inbounds i64, i64* %lniGE, i32 1
  %lniGG = bitcast i64* %lniGF to i64*
  %lniGH = load i64, i64* %lniGG, !tbaa !2
  store i64 %lniGH, i64* %R5_Var
  %lniGI = load i64*, i64** %Sp_Var
  %lniGJ = getelementptr inbounds i64, i64* %lniGI, i32 3
  %lniGK = bitcast i64* %lniGJ to i64*
  %lniGL = load i64, i64* %lniGK, !tbaa !2
  store i64 %lniGL, i64* %R4_Var
  %lniGM = load i64*, i64** %Sp_Var
  %lniGN = getelementptr inbounds i64, i64* %lniGM, i32 9
  %lniGO = bitcast i64* %lniGN to i64*
  %lniGP = load i64, i64* %lniGO, !tbaa !2
  store i64 %lniGP, i64* %R3_Var
  %lniGQ = load i64*, i64** %Sp_Var
  %lniGR = getelementptr inbounds i64, i64* %lniGQ, i32 10
  %lniGS = bitcast i64* %lniGR to i64*
  %lniGT = load i64, i64* %lniGS, !tbaa !2
  store i64 %lniGT, i64* %R2_Var
  %lniGW = load i64*, i64** %Hp_Var
  %lniGX = ptrtoint i64* %lniGW to i64
  %lniGY = add i64 %lniGX, -23
  %lniGU = load i64*, i64** %Sp_Var
  %lniGZ = getelementptr inbounds i64, i64* %lniGU, i32 10
  store i64 %lniGY, i64* %lniGZ, !tbaa !2
  %lniH0 = load i64*, i64** %Sp_Var
  %lniH1 = getelementptr inbounds i64, i64* %lniH0, i32 10
  %lniH2 = ptrtoint i64* %lniH1 to i64
  %lniH3 = inttoptr i64 %lniH2 to i64*
  store i64* %lniH3, i64** %Sp_Var
  %lniH4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniH5 = load i64*, i64** %Sp_Var
  %lniH6 = load i64*, i64** %Hp_Var
  %lniH7 = load i64, i64* %R1_Var
  %lniH8 = load i64, i64* %R2_Var
  %lniH9 = load i64, i64* %R3_Var
  %lniHa = load i64, i64* %R4_Var
  %lniHb = load i64, i64* %R5_Var
  %lniHc = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniH4( i64* %Base_Arg, i64* %lniH5, i64* %lniH6, i64 %lniH7, i64 %lniH8, i64 %lniH9, i64 %lniHa, i64 %lniHb, i64 %lniHc, i64 %SpLim_Arg ) nounwind
  ret void
cfuT:
  %lniHd = load i64*, i64** %Hp_Var
  %lniHe = getelementptr inbounds i64, i64* %lniHd, i32 -4
  %lniHf = ptrtoint i64* %lniHe to i64
  %lniHg = inttoptr i64 %lniHf to i64*
  store i64* %lniHg, i64** %Hp_Var
  %lniHi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuS_info$def to i64
  %lniHh = load i64*, i64** %Sp_Var
  %lniHj = getelementptr inbounds i64, i64* %lniHh, i32 0
  store i64 %lniHi, i64* %lniHj, !tbaa !2
  %lniHk = load i64*, i64** %Sp_Var
  %lniHl = getelementptr inbounds i64, i64* %lniHk, i32 7
  %lniHm = bitcast i64* %lniHl to i64*
  %lniHn = load i64, i64* %lniHm, !tbaa !2
  store i64 %lniHn, i64* %R1_Var
  %lniHo = load i64, i64* %R1_Var
  %lniHp = and i64 %lniHo, 7
  %lniHq = icmp ne i64 %lniHp, 0
  br i1 %lniHq, label %ufz8, label %cfuU
cfuU:
  %lniHs = load i64, i64* %R1_Var
  %lniHt = inttoptr i64 %lniHs to i64*
  %lniHu = load i64, i64* %lniHt, !tbaa !4
  %lniHv = inttoptr i64 %lniHu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniHw = load i64*, i64** %Sp_Var
  %lniHx = load i64*, i64** %Hp_Var
  %lniHy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniHv( i64* %Base_Arg, i64* %lniHw, i64* %lniHx, i64 %lniHy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz8:
  %lniHz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniHA = load i64*, i64** %Sp_Var
  %lniHB = load i64*, i64** %Hp_Var
  %lniHC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniHz( i64* %Base_Arg, i64* %lniHA, i64* %lniHB, i64 %lniHC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfuF:
  %lniHD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lniHD, !tbaa !5
  %lniHF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuA_info$def to i64
  %lniHE = load i64*, i64** %Sp_Var
  %lniHG = getelementptr inbounds i64, i64* %lniHE, i32 0
  store i64 %lniHF, i64* %lniHG, !tbaa !2
  %lniHH = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniHI = load i64*, i64** %Sp_Var
  %lniHJ = load i64*, i64** %Hp_Var
  %lniHK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniHH( i64* %Base_Arg, i64* %lniHI, i64* %lniHJ, i64 %lniHK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfuS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuS_info$def to i8*)
define internal ghccc void @cfuS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 12299, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuS_info$def to i64)) to i32),i32 0)}>
{
niHL:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Pw = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfuS
cfuS:
  %lniHM = load i64*, i64** %Hp_Var
  %lniHN = getelementptr inbounds i64, i64* %lniHM, i32 4
  %lniHO = ptrtoint i64* %lniHN to i64
  %lniHP = inttoptr i64 %lniHO to i64*
  store i64* %lniHP, i64** %Hp_Var
  %lniHQ = load i64*, i64** %Hp_Var
  %lniHR = ptrtoint i64* %lniHQ to i64
  %lniHS = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniHT = bitcast i64* %lniHS to i64*
  %lniHU = load i64, i64* %lniHT, !tbaa !5
  %lniHV = icmp ugt i64 %lniHR, %lniHU
  %lniHW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniHV, i1 0 )
  br i1 %lniHW, label %cfv0, label %cfuZ
cfuZ:
  %lniHZ = load i64, i64* %R1_Var
  %lniI0 = add i64 %lniHZ, 7
  %lniI1 = inttoptr i64 %lniI0 to double*
  %lniI2 = load double, double* %lniI1, !tbaa !4
  %lniI3 = fcmp olt double %lniI2, 0x3EB0C6F7A0B5ED8D
  %lniI4 = zext i1 %lniI3 to i64
  switch i64 %lniI4, label %cfv7 [i64 1, label %cfve]
cfv7:
  %lniI6 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniI5 = load i64*, i64** %Hp_Var
  %lniI7 = getelementptr inbounds i64, i64* %lniI5, i32 -3
  store i64 %lniI6, i64* %lniI7, !tbaa !3
  %lniI9 = load i64*, i64** %Sp_Var
  %lniIa = getelementptr inbounds i64, i64* %lniI9, i32 5
  %lniIb = bitcast i64* %lniIa to i64*
  %lniIc = load i64, i64* %lniIb, !tbaa !2
  %lniI8 = load i64*, i64** %Hp_Var
  %lniId = getelementptr inbounds i64, i64* %lniI8, i32 -2
  store i64 %lniIc, i64* %lniId, !tbaa !3
  %lniIf = load i64*, i64** %Sp_Var
  %lniIg = getelementptr inbounds i64, i64* %lniIf, i32 4
  %lniIh = bitcast i64* %lniIg to i64*
  %lniIi = load i64, i64* %lniIh, !tbaa !2
  %lniIe = load i64*, i64** %Hp_Var
  %lniIj = getelementptr inbounds i64, i64* %lniIe, i32 -1
  store i64 %lniIi, i64* %lniIj, !tbaa !3
  %lniIl = load i64*, i64** %Sp_Var
  %lniIm = getelementptr inbounds i64, i64* %lniIl, i32 2
  %lniIn = bitcast i64* %lniIm to i64*
  %lniIo = load i64, i64* %lniIn, !tbaa !2
  %lniIk = load i64*, i64** %Hp_Var
  %lniIp = getelementptr inbounds i64, i64* %lniIk, i32 0
  store i64 %lniIo, i64* %lniIp, !tbaa !3
  %lniIq = load i64*, i64** %Sp_Var
  %lniIr = getelementptr inbounds i64, i64* %lniIq, i32 11
  %lniIs = bitcast i64* %lniIr to i64*
  %lniIt = load i64, i64* %lniIs, !tbaa !2
  store i64 %lniIt, i64* %ls7Pw
  %lniIv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfv5_info$def to i64
  %lniIu = load i64*, i64** %Sp_Var
  %lniIw = getelementptr inbounds i64, i64* %lniIu, i32 11
  store i64 %lniIv, i64* %lniIw, !tbaa !2
  %lniIx = load i64, i64* %ls7Pw
  store i64 %lniIx, i64* %R6_Var
  %lniIy = load i64*, i64** %Sp_Var
  %lniIz = getelementptr inbounds i64, i64* %lniIy, i32 1
  %lniIA = bitcast i64* %lniIz to i64*
  %lniIB = load i64, i64* %lniIA, !tbaa !2
  store i64 %lniIB, i64* %R5_Var
  %lniIC = load i64*, i64** %Sp_Var
  %lniID = getelementptr inbounds i64, i64* %lniIC, i32 3
  %lniIE = bitcast i64* %lniID to i64*
  %lniIF = load i64, i64* %lniIE, !tbaa !2
  store i64 %lniIF, i64* %R4_Var
  %lniIG = load i64*, i64** %Sp_Var
  %lniIH = getelementptr inbounds i64, i64* %lniIG, i32 9
  %lniII = bitcast i64* %lniIH to i64*
  %lniIJ = load i64, i64* %lniII, !tbaa !2
  store i64 %lniIJ, i64* %R3_Var
  %lniIK = load i64*, i64** %Sp_Var
  %lniIL = getelementptr inbounds i64, i64* %lniIK, i32 10
  %lniIM = bitcast i64* %lniIL to i64*
  %lniIN = load i64, i64* %lniIM, !tbaa !2
  store i64 %lniIN, i64* %R2_Var
  %lniIQ = load i64*, i64** %Hp_Var
  %lniIR = ptrtoint i64* %lniIQ to i64
  %lniIS = add i64 %lniIR, -23
  %lniIO = load i64*, i64** %Sp_Var
  %lniIT = getelementptr inbounds i64, i64* %lniIO, i32 10
  store i64 %lniIS, i64* %lniIT, !tbaa !2
  %lniIU = load i64*, i64** %Sp_Var
  %lniIV = getelementptr inbounds i64, i64* %lniIU, i32 10
  %lniIW = ptrtoint i64* %lniIV to i64
  %lniIX = inttoptr i64 %lniIW to i64*
  store i64* %lniIX, i64** %Sp_Var
  %lniIY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniIZ = load i64*, i64** %Sp_Var
  %lniJ0 = load i64*, i64** %Hp_Var
  %lniJ1 = load i64, i64* %R1_Var
  %lniJ2 = load i64, i64* %R2_Var
  %lniJ3 = load i64, i64* %R3_Var
  %lniJ4 = load i64, i64* %R4_Var
  %lniJ5 = load i64, i64* %R5_Var
  %lniJ6 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniIY( i64* %Base_Arg, i64* %lniIZ, i64* %lniJ0, i64 %lniJ1, i64 %lniJ2, i64 %lniJ3, i64 %lniJ4, i64 %lniJ5, i64 %lniJ6, i64 %SpLim_Arg ) nounwind
  ret void
cfve:
  %lniJ7 = load i64*, i64** %Hp_Var
  %lniJ8 = getelementptr inbounds i64, i64* %lniJ7, i32 -4
  %lniJ9 = ptrtoint i64* %lniJ8 to i64
  %lniJa = inttoptr i64 %lniJ9 to i64*
  store i64* %lniJa, i64** %Hp_Var
  %lniJc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvd_info$def to i64
  %lniJb = load i64*, i64** %Sp_Var
  %lniJd = getelementptr inbounds i64, i64* %lniJb, i32 0
  store i64 %lniJc, i64* %lniJd, !tbaa !2
  %lniJe = load i64*, i64** %Sp_Var
  %lniJf = getelementptr inbounds i64, i64* %lniJe, i32 6
  %lniJg = bitcast i64* %lniJf to i64*
  %lniJh = load i64, i64* %lniJg, !tbaa !2
  store i64 %lniJh, i64* %R1_Var
  %lniJi = load i64, i64* %R1_Var
  %lniJj = and i64 %lniJi, 7
  %lniJk = icmp ne i64 %lniJj, 0
  br i1 %lniJk, label %ufz9, label %cfvf
cfvf:
  %lniJm = load i64, i64* %R1_Var
  %lniJn = inttoptr i64 %lniJm to i64*
  %lniJo = load i64, i64* %lniJn, !tbaa !4
  %lniJp = inttoptr i64 %lniJo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniJq = load i64*, i64** %Sp_Var
  %lniJr = load i64*, i64** %Hp_Var
  %lniJs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniJp( i64* %Base_Arg, i64* %lniJq, i64* %lniJr, i64 %lniJs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ufz9:
  %lniJt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvd_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniJu = load i64*, i64** %Sp_Var
  %lniJv = load i64*, i64** %Hp_Var
  %lniJw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniJt( i64* %Base_Arg, i64* %lniJu, i64* %lniJv, i64 %lniJw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfv0:
  %lniJx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lniJx, !tbaa !5
  %lniJy = load i64, i64* %R1_Var
  store i64 %lniJy, i64* %R1_Var
  %lniJz = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniJA = load i64*, i64** %Sp_Var
  %lniJB = load i64*, i64** %Hp_Var
  %lniJC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniJz( i64* %Base_Arg, i64* %lniJA, i64* %lniJB, i64 %lniJC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfvd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvd_info$def to i8*)
define internal ghccc void @cfvd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 14347, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvd_info$def to i64)) to i32),i32 0)}>
{
niJD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7ST = alloca i64, i32 1
  %ls7SU = alloca i64, i32 1
  %ls7SV = alloca i64, i32 1
  %ls7Pw = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cfvd
cfvd:
  %lniJE = load i64*, i64** %Hp_Var
  %lniJF = getelementptr inbounds i64, i64* %lniJE, i32 4
  %lniJG = ptrtoint i64* %lniJF to i64
  %lniJH = inttoptr i64 %lniJG to i64*
  store i64* %lniJH, i64** %Hp_Var
  %lniJI = load i64*, i64** %Hp_Var
  %lniJJ = ptrtoint i64* %lniJI to i64
  %lniJK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniJL = bitcast i64* %lniJK to i64*
  %lniJM = load i64, i64* %lniJL, !tbaa !5
  %lniJN = icmp ugt i64 %lniJJ, %lniJM
  %lniJO = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniJN, i1 0 )
  br i1 %lniJO, label %cfvl, label %cfvk
cfvk:
  %lniJP = load i64*, i64** %Sp_Var
  %lniJQ = getelementptr inbounds i64, i64* %lniJP, i32 5
  %lniJR = bitcast i64* %lniJQ to i64*
  %lniJS = load i64, i64* %lniJR, !tbaa !2
  store i64 %lniJS, i64* %ls7ST
  %lniJT = load i64*, i64** %Sp_Var
  %lniJU = getelementptr inbounds i64, i64* %lniJT, i32 4
  %lniJV = bitcast i64* %lniJU to i64*
  %lniJW = load i64, i64* %lniJV, !tbaa !2
  store i64 %lniJW, i64* %ls7SU
  %lniJX = load i64*, i64** %Sp_Var
  %lniJY = getelementptr inbounds i64, i64* %lniJX, i32 2
  %lniJZ = bitcast i64* %lniJY to i64*
  %lniK0 = load i64, i64* %lniJZ, !tbaa !2
  store i64 %lniK0, i64* %ls7SV
  %lniK3 = load i64, i64* %R1_Var
  %lniK4 = add i64 %lniK3, 7
  %lniK5 = inttoptr i64 %lniK4 to double*
  %lniK6 = load double, double* %lniK5, !tbaa !4
  %lniK7 = fcmp olt double %lniK6, 0x3EB0C6F7A0B5ED8D
  %lniK8 = zext i1 %lniK7 to i64
  switch i64 %lniK8, label %cfvs [i64 1, label %cfvx]
cfvs:
  %lniKa = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniK9 = load i64*, i64** %Hp_Var
  %lniKb = getelementptr inbounds i64, i64* %lniK9, i32 -3
  store i64 %lniKa, i64* %lniKb, !tbaa !3
  %lniKd = load i64, i64* %ls7ST
  %lniKc = load i64*, i64** %Hp_Var
  %lniKe = getelementptr inbounds i64, i64* %lniKc, i32 -2
  store i64 %lniKd, i64* %lniKe, !tbaa !3
  %lniKg = load i64, i64* %ls7SU
  %lniKf = load i64*, i64** %Hp_Var
  %lniKh = getelementptr inbounds i64, i64* %lniKf, i32 -1
  store i64 %lniKg, i64* %lniKh, !tbaa !3
  %lniKj = load i64, i64* %ls7SV
  %lniKi = load i64*, i64** %Hp_Var
  %lniKk = getelementptr inbounds i64, i64* %lniKi, i32 0
  store i64 %lniKj, i64* %lniKk, !tbaa !3
  %lniKl = load i64*, i64** %Sp_Var
  %lniKm = getelementptr inbounds i64, i64* %lniKl, i32 11
  %lniKn = bitcast i64* %lniKm to i64*
  %lniKo = load i64, i64* %lniKn, !tbaa !2
  store i64 %lniKo, i64* %ls7Pw
  %lniKq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvq_info$def to i64
  %lniKp = load i64*, i64** %Sp_Var
  %lniKr = getelementptr inbounds i64, i64* %lniKp, i32 11
  store i64 %lniKq, i64* %lniKr, !tbaa !2
  %lniKs = load i64, i64* %ls7Pw
  store i64 %lniKs, i64* %R6_Var
  %lniKt = load i64*, i64** %Sp_Var
  %lniKu = getelementptr inbounds i64, i64* %lniKt, i32 1
  %lniKv = bitcast i64* %lniKu to i64*
  %lniKw = load i64, i64* %lniKv, !tbaa !2
  store i64 %lniKw, i64* %R5_Var
  %lniKx = load i64*, i64** %Sp_Var
  %lniKy = getelementptr inbounds i64, i64* %lniKx, i32 3
  %lniKz = bitcast i64* %lniKy to i64*
  %lniKA = load i64, i64* %lniKz, !tbaa !2
  store i64 %lniKA, i64* %R4_Var
  %lniKB = load i64*, i64** %Sp_Var
  %lniKC = getelementptr inbounds i64, i64* %lniKB, i32 9
  %lniKD = bitcast i64* %lniKC to i64*
  %lniKE = load i64, i64* %lniKD, !tbaa !2
  store i64 %lniKE, i64* %R3_Var
  %lniKF = load i64*, i64** %Sp_Var
  %lniKG = getelementptr inbounds i64, i64* %lniKF, i32 10
  %lniKH = bitcast i64* %lniKG to i64*
  %lniKI = load i64, i64* %lniKH, !tbaa !2
  store i64 %lniKI, i64* %R2_Var
  %lniKL = load i64*, i64** %Hp_Var
  %lniKM = ptrtoint i64* %lniKL to i64
  %lniKN = add i64 %lniKM, -23
  %lniKJ = load i64*, i64** %Sp_Var
  %lniKO = getelementptr inbounds i64, i64* %lniKJ, i32 10
  store i64 %lniKN, i64* %lniKO, !tbaa !2
  %lniKP = load i64*, i64** %Sp_Var
  %lniKQ = getelementptr inbounds i64, i64* %lniKP, i32 10
  %lniKR = ptrtoint i64* %lniKQ to i64
  %lniKS = inttoptr i64 %lniKR to i64*
  store i64* %lniKS, i64** %Sp_Var
  %lniKT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_reflectray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniKU = load i64*, i64** %Sp_Var
  %lniKV = load i64*, i64** %Hp_Var
  %lniKW = load i64, i64* %R1_Var
  %lniKX = load i64, i64* %R2_Var
  %lniKY = load i64, i64* %R3_Var
  %lniKZ = load i64, i64* %R4_Var
  %lniL0 = load i64, i64* %R5_Var
  %lniL1 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniKT( i64* %Base_Arg, i64* %lniKU, i64* %lniKV, i64 %lniKW, i64 %lniKX, i64 %lniKY, i64 %lniKZ, i64 %lniL0, i64 %lniL1, i64 %SpLim_Arg ) nounwind
  ret void
cfvx:
  %lniL2 = load i64*, i64** %Hp_Var
  %lniL3 = getelementptr inbounds i64, i64* %lniL2, i32 -4
  %lniL4 = ptrtoint i64* %lniL3 to i64
  %lniL5 = inttoptr i64 %lniL4 to i64*
  store i64* %lniL5, i64** %Hp_Var
  %lniL6 = load i64, i64* %ls7SV
  store i64 %lniL6, i64* %R3_Var
  %lniL7 = load i64, i64* %ls7SU
  store i64 %lniL7, i64* %R2_Var
  %lniL8 = load i64, i64* %ls7ST
  store i64 %lniL8, i64* %R1_Var
  %lniL9 = load i64*, i64** %Sp_Var
  %lniLa = getelementptr inbounds i64, i64* %lniL9, i32 12
  %lniLb = ptrtoint i64* %lniLa to i64
  %lniLc = inttoptr i64 %lniLb to i64*
  store i64* %lniLc, i64** %Sp_Var
  %lniLd = load i64*, i64** %Sp_Var
  %lniLe = getelementptr inbounds i64, i64* %lniLd, i32 0
  %lniLf = bitcast i64* %lniLe to i64*
  %lniLg = load i64, i64* %lniLf, !tbaa !2
  %lniLh = inttoptr i64 %lniLg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniLi = load i64*, i64** %Sp_Var
  %lniLj = load i64*, i64** %Hp_Var
  %lniLk = load i64, i64* %R1_Var
  %lniLl = load i64, i64* %R2_Var
  %lniLm = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniLh( i64* %Base_Arg, i64* %lniLi, i64* %lniLj, i64 %lniLk, i64 %lniLl, i64 %lniLm, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cfvl:
  %lniLn = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lniLn, !tbaa !5
  %lniLo = load i64, i64* %R1_Var
  store i64 %lniLo, i64* %R1_Var
  %lniLp = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniLq = load i64*, i64** %Sp_Var
  %lniLr = load i64*, i64** %Hp_Var
  %lniLs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniLp( i64* %Base_Arg, i64* %lniLq, i64* %lniLr, i64 %lniLs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfvq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfvq_info$def to i8*)
define internal ghccc void @cfvq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
niLt:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfvq
cfvq:
  %lniLw = load i64, i64* %R1_Var
  %lniLx = add i64 %lniLw, 23
  %lniLy = inttoptr i64 %lniLx to i64*
  %lniLz = load i64, i64* %lniLy, !tbaa !4
  store i64 %lniLz, i64* %R3_Var
  %lniLC = load i64, i64* %R1_Var
  %lniLD = add i64 %lniLC, 15
  %lniLE = inttoptr i64 %lniLD to i64*
  %lniLF = load i64, i64* %lniLE, !tbaa !4
  store i64 %lniLF, i64* %R2_Var
  %lniLI = load i64, i64* %R1_Var
  %lniLJ = add i64 %lniLI, 7
  %lniLK = inttoptr i64 %lniLJ to i64*
  %lniLL = load i64, i64* %lniLK, !tbaa !4
  store i64 %lniLL, i64* %R1_Var
  %lniLM = load i64*, i64** %Sp_Var
  %lniLN = getelementptr inbounds i64, i64* %lniLM, i32 1
  %lniLO = ptrtoint i64* %lniLN to i64
  %lniLP = inttoptr i64 %lniLO to i64*
  store i64* %lniLP, i64** %Sp_Var
  %lniLQ = load i64*, i64** %Sp_Var
  %lniLR = getelementptr inbounds i64, i64* %lniLQ, i32 0
  %lniLS = bitcast i64* %lniLR to i64*
  %lniLT = load i64, i64* %lniLS, !tbaa !2
  %lniLU = inttoptr i64 %lniLT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniLV = load i64*, i64** %Sp_Var
  %lniLW = load i64, i64* %R1_Var
  %lniLX = load i64, i64* %R2_Var
  %lniLY = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniLU( i64* %Base_Arg, i64* %lniLV, i64* %Hp_Arg, i64 %lniLW, i64 %lniLX, i64 %lniLY, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfv5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfv5_info$def to i8*)
define internal ghccc void @cfv5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
niLZ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfv5
cfv5:
  %lniM2 = load i64, i64* %R1_Var
  %lniM3 = add i64 %lniM2, 23
  %lniM4 = inttoptr i64 %lniM3 to i64*
  %lniM5 = load i64, i64* %lniM4, !tbaa !4
  store i64 %lniM5, i64* %R3_Var
  %lniM8 = load i64, i64* %R1_Var
  %lniM9 = add i64 %lniM8, 15
  %lniMa = inttoptr i64 %lniM9 to i64*
  %lniMb = load i64, i64* %lniMa, !tbaa !4
  store i64 %lniMb, i64* %R2_Var
  %lniMe = load i64, i64* %R1_Var
  %lniMf = add i64 %lniMe, 7
  %lniMg = inttoptr i64 %lniMf to i64*
  %lniMh = load i64, i64* %lniMg, !tbaa !4
  store i64 %lniMh, i64* %R1_Var
  %lniMi = load i64*, i64** %Sp_Var
  %lniMj = getelementptr inbounds i64, i64* %lniMi, i32 1
  %lniMk = ptrtoint i64* %lniMj to i64
  %lniMl = inttoptr i64 %lniMk to i64*
  store i64* %lniMl, i64** %Sp_Var
  %lniMm = load i64*, i64** %Sp_Var
  %lniMn = getelementptr inbounds i64, i64* %lniMm, i32 0
  %lniMo = bitcast i64* %lniMn to i64*
  %lniMp = load i64, i64* %lniMo, !tbaa !2
  %lniMq = inttoptr i64 %lniMp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniMr = load i64*, i64** %Sp_Var
  %lniMs = load i64, i64* %R1_Var
  %lniMt = load i64, i64* %R2_Var
  %lniMu = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniMq( i64* %Base_Arg, i64* %lniMr, i64* %Hp_Arg, i64 %lniMs, i64 %lniMt, i64 %lniMu, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cfuK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cfuK_info$def to i8*)
define internal ghccc void @cfuK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
niMv:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cfuK
cfuK:
  %lniMy = load i64, i64* %R1_Var
  %lniMz = add i64 %lniMy, 23
  %lniMA = inttoptr i64 %lniMz to i64*
  %lniMB = load i64, i64* %lniMA, !tbaa !4
  store i64 %lniMB, i64* %R3_Var
  %lniME = load i64, i64* %R1_Var
  %lniMF = add i64 %lniME, 15
  %lniMG = inttoptr i64 %lniMF to i64*
  %lniMH = load i64, i64* %lniMG, !tbaa !4
  store i64 %lniMH, i64* %R2_Var
  %lniMK = load i64, i64* %R1_Var
  %lniML = add i64 %lniMK, 7
  %lniMM = inttoptr i64 %lniML to i64*
  %lniMN = load i64, i64* %lniMM, !tbaa !4
  store i64 %lniMN, i64* %R1_Var
  %lniMO = load i64*, i64** %Sp_Var
  %lniMP = getelementptr inbounds i64, i64* %lniMO, i32 1
  %lniMQ = ptrtoint i64* %lniMP to i64
  %lniMR = inttoptr i64 %lniMQ to i64*
  store i64* %lniMR, i64** %Sp_Var
  %lniMS = load i64*, i64** %Sp_Var
  %lniMT = getelementptr inbounds i64, i64* %lniMS, i32 0
  %lniMU = bitcast i64* %lniMT to i64*
  %lniMV = load i64, i64* %lniMU, !tbaa !2
  %lniMW = inttoptr i64 %lniMV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniMX = load i64*, i64** %Sp_Var
  %lniMY = load i64, i64* %R1_Var
  %lniMZ = load i64, i64* %R2_Var
  %lniN0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniMW( i64* %Base_Arg, i64* %lniMX, i64* %Hp_Arg, i64 %lniMY, i64 %lniMZ, i64 %lniN0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_shade_closure_struct = type <{i64, i64}>
@Main_shade_closure$def = internal global %Main_shade_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shade_info$def to i64), i64 0}>
@Main_shade_closure = alias i8, bitcast (%Main_shade_closure_struct* @Main_shade_closure$def to i8*)
@Main_shade_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shade_info$def to i8*)
define ghccc void @Main_shade_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 25769803802, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_shade_info$def to i64)) to i32),i32 0)}>
{
niNl:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ciN8
ciN8:
  %lniNm = load i64*, i64** %Sp_Var
  %lniNn = getelementptr inbounds i64, i64* %lniNm, i32 -5
  %lniNo = ptrtoint i64* %lniNn to i64
  %lniNp = icmp ult i64 %lniNo, %SpLim_Arg
  %lniNq = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniNp, i1 0 )
  br i1 %lniNq, label %ciNe, label %ciNf
ciNf:
  %lniNs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciN5_info$def to i64
  %lniNr = load i64*, i64** %Sp_Var
  %lniNt = getelementptr inbounds i64, i64* %lniNr, i32 -5
  store i64 %lniNs, i64* %lniNt, !tbaa !2
  %lniNu = load i64, i64* %R3_Var
  store i64 %lniNu, i64* %R1_Var
  %lniNw = load i64, i64* %R2_Var
  %lniNv = load i64*, i64** %Sp_Var
  %lniNx = getelementptr inbounds i64, i64* %lniNv, i32 -4
  store i64 %lniNw, i64* %lniNx, !tbaa !2
  %lniNz = load i64, i64* %R4_Var
  %lniNy = load i64*, i64** %Sp_Var
  %lniNA = getelementptr inbounds i64, i64* %lniNy, i32 -3
  store i64 %lniNz, i64* %lniNA, !tbaa !2
  %lniNC = load i64, i64* %R5_Var
  %lniNB = load i64*, i64** %Sp_Var
  %lniND = getelementptr inbounds i64, i64* %lniNB, i32 -2
  store i64 %lniNC, i64* %lniND, !tbaa !2
  %lniNF = load i64, i64* %R6_Var
  %lniNE = load i64*, i64** %Sp_Var
  %lniNG = getelementptr inbounds i64, i64* %lniNE, i32 -1
  store i64 %lniNF, i64* %lniNG, !tbaa !2
  %lniNH = load i64*, i64** %Sp_Var
  %lniNI = getelementptr inbounds i64, i64* %lniNH, i32 -5
  %lniNJ = ptrtoint i64* %lniNI to i64
  %lniNK = inttoptr i64 %lniNJ to i64*
  store i64* %lniNK, i64** %Sp_Var
  %lniNL = load i64, i64* %R1_Var
  %lniNM = and i64 %lniNL, 7
  %lniNN = icmp ne i64 %lniNM, 0
  br i1 %lniNN, label %uiNk, label %ciN6
ciN6:
  %lniNP = load i64, i64* %R1_Var
  %lniNQ = inttoptr i64 %lniNP to i64*
  %lniNR = load i64, i64* %lniNQ, !tbaa !4
  %lniNS = inttoptr i64 %lniNR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniNT = load i64*, i64** %Sp_Var
  %lniNU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniNS( i64* %Base_Arg, i64* %lniNT, i64* %Hp_Arg, i64 %lniNU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiNk:
  %lniNV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciN5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniNW = load i64*, i64** %Sp_Var
  %lniNX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniNV( i64* %Base_Arg, i64* %lniNW, i64* %Hp_Arg, i64 %lniNX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciNe:
  %lniNY = load i64, i64* %R6_Var
  store i64 %lniNY, i64* %R6_Var
  %lniNZ = load i64, i64* %R5_Var
  store i64 %lniNZ, i64* %R5_Var
  %lniO0 = load i64, i64* %R4_Var
  store i64 %lniO0, i64* %R4_Var
  %lniO1 = load i64, i64* %R3_Var
  store i64 %lniO1, i64* %R3_Var
  %lniO2 = load i64, i64* %R2_Var
  store i64 %lniO2, i64* %R2_Var
  %lniO3 = ptrtoint %Main_shade_closure_struct* @Main_shade_closure$def to i64
  store i64 %lniO3, i64* %R1_Var
  %lniO4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lniO5 = bitcast i64* %lniO4 to i64*
  %lniO6 = load i64, i64* %lniO5, !tbaa !5
  %lniO7 = inttoptr i64 %lniO6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniO8 = load i64*, i64** %Sp_Var
  %lniO9 = load i64, i64* %R1_Var
  %lniOa = load i64, i64* %R2_Var
  %lniOb = load i64, i64* %R3_Var
  %lniOc = load i64, i64* %R4_Var
  %lniOd = load i64, i64* %R5_Var
  %lniOe = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniO7( i64* %Base_Arg, i64* %lniO8, i64* %Hp_Arg, i64 %lniO9, i64 %lniOa, i64 %lniOb, i64 %lniOc, i64 %lniOd, i64 %lniOe, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciN5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciN5_info$def to i8*)
define internal ghccc void @ciN5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciN5_info$def to i64)) to i32),i32 0)}>
{
niOf:
  %ls7V3 = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciN5
ciN5:
  %lniOg = load i64*, i64** %Sp_Var
  %lniOh = getelementptr inbounds i64, i64* %lniOg, i32 5
  %lniOi = bitcast i64* %lniOh to i64*
  %lniOj = load i64, i64* %lniOi, !tbaa !2
  store i64 %lniOj, i64* %ls7V3
  %lniOl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciNb_info$def to i64
  %lniOk = load i64*, i64** %Sp_Var
  %lniOm = getelementptr inbounds i64, i64* %lniOk, i32 5
  store i64 %lniOl, i64* %lniOm, !tbaa !2
  %lniOn = load i64*, i64** %Sp_Var
  %lniOo = getelementptr inbounds i64, i64* %lniOn, i32 2
  %lniOp = bitcast i64* %lniOo to i64*
  %lniOq = load i64, i64* %lniOp, !tbaa !2
  store i64 %lniOq, i64* %R6_Var
  %lniOr = add i64 %R1_Arg, 23
  %lniOs = inttoptr i64 %lniOr to i64*
  %lniOt = load i64, i64* %lniOs, !tbaa !4
  store i64 %lniOt, i64* %R5_Var
  %lniOu = add i64 %R1_Arg, 15
  %lniOv = inttoptr i64 %lniOu to i64*
  %lniOw = load i64, i64* %lniOv, !tbaa !4
  store i64 %lniOw, i64* %R4_Var
  %lniOx = add i64 %R1_Arg, 7
  %lniOy = inttoptr i64 %lniOx to i64*
  %lniOz = load i64, i64* %lniOy, !tbaa !4
  store i64 %lniOz, i64* %R3_Var
  %lniOA = load i64*, i64** %Sp_Var
  %lniOB = getelementptr inbounds i64, i64* %lniOA, i32 1
  %lniOC = bitcast i64* %lniOB to i64*
  %lniOD = load i64, i64* %lniOC, !tbaa !2
  store i64 %lniOD, i64* %R2_Var
  %lniOF = load i64*, i64** %Sp_Var
  %lniOG = getelementptr inbounds i64, i64* %lniOF, i32 3
  %lniOH = bitcast i64* %lniOG to i64*
  %lniOI = load i64, i64* %lniOH, !tbaa !2
  %lniOE = load i64*, i64** %Sp_Var
  %lniOJ = getelementptr inbounds i64, i64* %lniOE, i32 2
  store i64 %lniOI, i64* %lniOJ, !tbaa !2
  %lniOL = load i64*, i64** %Sp_Var
  %lniOM = getelementptr inbounds i64, i64* %lniOL, i32 4
  %lniON = bitcast i64* %lniOM to i64*
  %lniOO = load i64, i64* %lniON, !tbaa !2
  %lniOK = load i64*, i64** %Sp_Var
  %lniOP = getelementptr inbounds i64, i64* %lniOK, i32 3
  store i64 %lniOO, i64* %lniOP, !tbaa !2
  %lniOR = load i64, i64* %ls7V3
  %lniOQ = load i64*, i64** %Sp_Var
  %lniOS = getelementptr inbounds i64, i64* %lniOQ, i32 4
  store i64 %lniOR, i64* %lniOS, !tbaa !2
  %lniOT = load i64*, i64** %Sp_Var
  %lniOU = getelementptr inbounds i64, i64* %lniOT, i32 2
  %lniOV = ptrtoint i64* %lniOU to i64
  %lniOW = inttoptr i64 %lniOV to i64*
  store i64* %lniOW, i64** %Sp_Var
  %lniOX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniOY = load i64*, i64** %Sp_Var
  %lniOZ = load i64, i64* %R2_Var
  %lniP0 = load i64, i64* %R3_Var
  %lniP1 = load i64, i64* %R4_Var
  %lniP2 = load i64, i64* %R5_Var
  %lniP3 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniOX( i64* %Base_Arg, i64* %lniOY, i64* %Hp_Arg, i64 %R1_Arg, i64 %lniOZ, i64 %lniP0, i64 %lniP1, i64 %lniP2, i64 %lniP3, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciNb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciNb_info$def to i8*)
define internal ghccc void @ciNb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
niP4:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %ciNb
ciNb:
  %lniP5 = load i64*, i64** %Hp_Var
  %lniP6 = getelementptr inbounds i64, i64* %lniP5, i32 4
  %lniP7 = ptrtoint i64* %lniP6 to i64
  %lniP8 = inttoptr i64 %lniP7 to i64*
  store i64* %lniP8, i64** %Hp_Var
  %lniP9 = load i64*, i64** %Hp_Var
  %lniPa = ptrtoint i64* %lniP9 to i64
  %lniPb = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniPc = bitcast i64* %lniPb to i64*
  %lniPd = load i64, i64* %lniPc, !tbaa !5
  %lniPe = icmp ugt i64 %lniPa, %lniPd
  %lniPf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniPe, i1 0 )
  br i1 %lniPf, label %ciNj, label %ciNi
ciNi:
  %lniPh = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lniPg = load i64*, i64** %Hp_Var
  %lniPi = getelementptr inbounds i64, i64* %lniPg, i32 -3
  store i64 %lniPh, i64* %lniPi, !tbaa !3
  %lniPk = load i64, i64* %R1_Var
  %lniPj = load i64*, i64** %Hp_Var
  %lniPl = getelementptr inbounds i64, i64* %lniPj, i32 -2
  store i64 %lniPk, i64* %lniPl, !tbaa !3
  %lniPn = load i64, i64* %R2_Var
  %lniPm = load i64*, i64** %Hp_Var
  %lniPo = getelementptr inbounds i64, i64* %lniPm, i32 -1
  store i64 %lniPn, i64* %lniPo, !tbaa !3
  %lniPq = load i64, i64* %R3_Var
  %lniPp = load i64*, i64** %Hp_Var
  %lniPr = getelementptr inbounds i64, i64* %lniPp, i32 0
  store i64 %lniPq, i64* %lniPr, !tbaa !3
  %lniPt = load i64*, i64** %Hp_Var
  %lniPu = ptrtoint i64* %lniPt to i64
  %lniPv = add i64 %lniPu, -23
  store i64 %lniPv, i64* %R1_Var
  %lniPw = load i64*, i64** %Sp_Var
  %lniPx = getelementptr inbounds i64, i64* %lniPw, i32 1
  %lniPy = ptrtoint i64* %lniPx to i64
  %lniPz = inttoptr i64 %lniPy to i64*
  store i64* %lniPz, i64** %Sp_Var
  %lniPA = load i64*, i64** %Sp_Var
  %lniPB = getelementptr inbounds i64, i64* %lniPA, i32 0
  %lniPC = bitcast i64* %lniPB to i64*
  %lniPD = load i64, i64* %lniPC, !tbaa !2
  %lniPE = inttoptr i64 %lniPD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniPF = load i64*, i64** %Sp_Var
  %lniPG = load i64*, i64** %Hp_Var
  %lniPH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniPE( i64* %Base_Arg, i64* %lniPF, i64* %lniPG, i64 %lniPH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciNj:
  %lniPI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lniPI, !tbaa !5
  %lniPJ = load i64, i64* %R3_Var
  store i64 %lniPJ, i64* %R3_Var
  %lniPK = load i64, i64* %R2_Var
  store i64 %lniPK, i64* %R2_Var
  %lniPL = load i64, i64* %R1_Var
  store i64 %lniPL, i64* %R1_Var
  %lniPM = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniPN = load i64*, i64** %Sp_Var
  %lniPO = load i64*, i64** %Hp_Var
  %lniPP = load i64, i64* %R1_Var
  %lniPQ = load i64, i64* %R2_Var
  %lniPR = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniPM( i64* %Base_Arg, i64* %lniPN, i64* %lniPO, i64 %lniPP, i64 %lniPQ, i64 %lniPR, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwtracepixel_closure_struct = type <{i64, i64}>
@Main_zdwtracepixel_closure$def = internal global %Main_zdwtracepixel_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to i64), i64 0}>
@Main_zdwtracepixel_closure = alias i8, bitcast (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i8*)
@Main_zdwtracepixel_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_slow$def to i8*)
define ghccc void @Main_zdwtracepixel_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
niUP:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciPT
ciPT:
  %lniUQ = load i64*, i64** %Sp_Var
  %lniUR = getelementptr inbounds i64, i64* %lniUQ, i32 4
  %lniUS = bitcast i64* %lniUR to i64*
  %lniUT = load i64, i64* %lniUS, !tbaa !2
  store i64 %lniUT, i64* %R6_Var
  %lniUU = load i64*, i64** %Sp_Var
  %lniUV = getelementptr inbounds i64, i64* %lniUU, i32 3
  %lniUW = bitcast i64* %lniUV to i64*
  %lniUX = load i64, i64* %lniUW, !tbaa !2
  store i64 %lniUX, i64* %R5_Var
  %lniUY = load i64*, i64** %Sp_Var
  %lniUZ = getelementptr inbounds i64, i64* %lniUY, i32 2
  %lniV0 = bitcast i64* %lniUZ to i64*
  %lniV1 = load i64, i64* %lniV0, !tbaa !2
  store i64 %lniV1, i64* %R4_Var
  %lniV2 = load i64*, i64** %Sp_Var
  %lniV3 = getelementptr inbounds i64, i64* %lniV2, i32 1
  %lniV4 = bitcast i64* %lniV3 to i64*
  %lniV5 = load i64, i64* %lniV4, !tbaa !2
  store i64 %lniV5, i64* %R3_Var
  %lniV6 = load i64*, i64** %Sp_Var
  %lniV7 = getelementptr inbounds i64, i64* %lniV6, i32 0
  %lniV8 = bitcast i64* %lniV7 to i64*
  %lniV9 = load i64, i64* %lniV8, !tbaa !2
  store i64 %lniV9, i64* %R2_Var
  %lniVa = load i64, i64* %R1_Var
  store i64 %lniVa, i64* %R1_Var
  %lniVb = load i64*, i64** %Sp_Var
  %lniVc = getelementptr inbounds i64, i64* %lniVb, i32 5
  %lniVd = ptrtoint i64* %lniVc to i64
  %lniVe = inttoptr i64 %lniVd to i64*
  store i64* %lniVe, i64** %Sp_Var
  %lniVf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniVg = load i64*, i64** %Sp_Var
  %lniVh = load i64, i64* %R1_Var
  %lniVi = load i64, i64* %R2_Var
  %lniVj = load i64, i64* %R3_Var
  %lniVk = load i64, i64* %R4_Var
  %lniVl = load i64, i64* %R5_Var
  %lniVm = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniVf( i64* %Base_Arg, i64* %lniVg, i64* %Hp_Arg, i64 %lniVh, i64 %lniVi, i64 %lniVj, i64 %lniVk, i64 %lniVl, i64 %lniVm, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Vw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Vw_info$def to i8*)
define internal ghccc void @s7Vw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
niVn:
  %ls7Vv = alloca i64, i32 1
  %ls7Vf = alloca i64, i32 1
  %ls7Vr = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciQn
ciQn:
  %lniVo = load i64*, i64** %Sp_Var
  %lniVp = getelementptr inbounds i64, i64* %lniVo, i32 -7
  %lniVq = ptrtoint i64* %lniVp to i64
  %lniVr = icmp ult i64 %lniVq, %SpLim_Arg
  %lniVs = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniVr, i1 0 )
  br i1 %lniVs, label %ciQX, label %ciQY
ciQY:
  %lniVu = ptrtoint i8* @stg_upd_frame_info to i64
  %lniVt = load i64*, i64** %Sp_Var
  %lniVv = getelementptr inbounds i64, i64* %lniVt, i32 -2
  store i64 %lniVu, i64* %lniVv, !tbaa !2
  %lniVx = load i64, i64* %R1_Var
  %lniVw = load i64*, i64** %Sp_Var
  %lniVy = getelementptr inbounds i64, i64* %lniVw, i32 -1
  store i64 %lniVx, i64* %lniVy, !tbaa !2
  %lniVA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQk_info$def to i64
  %lniVz = load i64*, i64** %Sp_Var
  %lniVB = getelementptr inbounds i64, i64* %lniVz, i32 -7
  store i64 %lniVA, i64* %lniVB, !tbaa !2
  %lniVE = load i64, i64* %R1_Var
  %lniVF = add i64 %lniVE, 16
  %lniVG = inttoptr i64 %lniVF to i64*
  %lniVH = load i64, i64* %lniVG, !tbaa !4
  store i64 %lniVH, i64* %ls7Vv
  %lniVK = load i64, i64* %R1_Var
  %lniVL = add i64 %lniVK, 24
  %lniVM = inttoptr i64 %lniVL to i64*
  %lniVN = load i64, i64* %lniVM, !tbaa !4
  store i64 %lniVN, i64* %ls7Vf
  %lniVQ = load i64, i64* %R1_Var
  %lniVR = add i64 %lniVQ, 32
  %lniVS = inttoptr i64 %lniVR to i64*
  %lniVT = load i64, i64* %lniVS, !tbaa !4
  store i64 %lniVT, i64* %ls7Vr
  %lniVW = load i64, i64* %R1_Var
  %lniVX = add i64 %lniVW, 40
  %lniVY = inttoptr i64 %lniVX to i64*
  %lniVZ = load i64, i64* %lniVY, !tbaa !4
  store i64 %lniVZ, i64* %ls7Ve
  %lniW2 = load i64, i64* %R1_Var
  %lniW3 = add i64 %lniW2, 48
  %lniW4 = inttoptr i64 %lniW3 to i64*
  %lniW5 = load i64, i64* %lniW4, !tbaa !4
  store i64 %lniW5, i64* %R1_Var
  %lniW7 = load i64, i64* %ls7Ve
  %lniW6 = load i64*, i64** %Sp_Var
  %lniW8 = getelementptr inbounds i64, i64* %lniW6, i32 -6
  store i64 %lniW7, i64* %lniW8, !tbaa !2
  %lniWa = load i64, i64* %ls7Vf
  %lniW9 = load i64*, i64** %Sp_Var
  %lniWb = getelementptr inbounds i64, i64* %lniW9, i32 -5
  store i64 %lniWa, i64* %lniWb, !tbaa !2
  %lniWd = load i64, i64* %ls7Vr
  %lniWc = load i64*, i64** %Sp_Var
  %lniWe = getelementptr inbounds i64, i64* %lniWc, i32 -4
  store i64 %lniWd, i64* %lniWe, !tbaa !2
  %lniWg = load i64, i64* %ls7Vv
  %lniWf = load i64*, i64** %Sp_Var
  %lniWh = getelementptr inbounds i64, i64* %lniWf, i32 -3
  store i64 %lniWg, i64* %lniWh, !tbaa !2
  %lniWi = load i64*, i64** %Sp_Var
  %lniWj = getelementptr inbounds i64, i64* %lniWi, i32 -7
  %lniWk = ptrtoint i64* %lniWj to i64
  %lniWl = inttoptr i64 %lniWk to i64*
  store i64* %lniWl, i64** %Sp_Var
  %lniWm = load i64, i64* %R1_Var
  %lniWn = and i64 %lniWm, 7
  %lniWo = icmp ne i64 %lniWn, 0
  br i1 %lniWo, label %uiR7, label %ciQl
ciQl:
  %lniWq = load i64, i64* %R1_Var
  %lniWr = inttoptr i64 %lniWq to i64*
  %lniWs = load i64, i64* %lniWr, !tbaa !4
  %lniWt = inttoptr i64 %lniWs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniWu = load i64*, i64** %Sp_Var
  %lniWv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniWt( i64* %Base_Arg, i64* %lniWu, i64* %Hp_Arg, i64 %lniWv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiR7:
  %lniWw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniWx = load i64*, i64** %Sp_Var
  %lniWy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniWw( i64* %Base_Arg, i64* %lniWx, i64* %Hp_Arg, i64 %lniWy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciQX:
  %lniWz = load i64, i64* %R1_Var
  store i64 %lniWz, i64* %R1_Var
  %lniWA = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lniWB = bitcast i64* %lniWA to i64*
  %lniWC = load i64, i64* %lniWB, !tbaa !5
  %lniWD = inttoptr i64 %lniWC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniWE = load i64*, i64** %Sp_Var
  %lniWF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniWD( i64* %Base_Arg, i64* %lniWE, i64* %Hp_Arg, i64 %lniWF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQk_info$def to i8*)
define internal ghccc void @ciQk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
niWG:
  %ls7Vy = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciQk
ciQk:
  %lniWH = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQq_info$def to i64
  %lniWI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniWH, i64* %lniWI, !tbaa !2
  %lniWL = load i64, i64* %R1_Var
  %lniWM = add i64 %lniWL, 7
  %lniWN = inttoptr i64 %lniWM to double*
  %lniWO = load double, double* %lniWN, !tbaa !4
  store double %lniWO, double* %ls7Vy
  %lniWP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lniWQ = bitcast i64* %lniWP to i64*
  %lniWR = load i64, i64* %lniWQ, !tbaa !2
  store i64 %lniWR, i64* %R1_Var
  %lniWS = load double, double* %ls7Vy
  %lniWT = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lniWU = bitcast i64* %lniWT to double*
  store double %lniWS, double* %lniWU, !tbaa !2
  %lniWV = load i64, i64* %R1_Var
  %lniWW = and i64 %lniWV, 7
  %lniWX = icmp ne i64 %lniWW, 0
  br i1 %lniWX, label %uiR6, label %ciQr
ciQr:
  %lniWZ = load i64, i64* %R1_Var
  %lniX0 = inttoptr i64 %lniWZ to i64*
  %lniX1 = load i64, i64* %lniX0, !tbaa !4
  %lniX2 = inttoptr i64 %lniX1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniX3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniX2( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniX3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiR6:
  %lniX4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniX5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniX4( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniX5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQq_info$def to i8*)
define internal ghccc void @ciQq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
niX6:
  %ls7VA = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciQq
ciQq:
  %lniX7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQv_info$def to i64
  %lniX8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniX7, i64* %lniX8, !tbaa !2
  %lniXb = load i64, i64* %R1_Var
  %lniXc = add i64 %lniXb, 7
  %lniXd = inttoptr i64 %lniXc to double*
  %lniXe = load double, double* %lniXd, !tbaa !4
  store double %lniXe, double* %ls7VA
  %lniXf = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lniXg = bitcast i64* %lniXf to i64*
  %lniXh = load i64, i64* %lniXg, !tbaa !2
  store i64 %lniXh, i64* %R1_Var
  %lniXi = load double, double* %ls7VA
  %lniXj = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lniXk = bitcast i64* %lniXj to double*
  store double %lniXi, double* %lniXk, !tbaa !2
  %lniXl = load i64, i64* %R1_Var
  %lniXm = and i64 %lniXl, 7
  %lniXn = icmp ne i64 %lniXm, 0
  br i1 %lniXn, label %uiR8, label %ciQw
ciQw:
  %lniXp = load i64, i64* %R1_Var
  %lniXq = inttoptr i64 %lniXp to i64*
  %lniXr = load i64, i64* %lniXq, !tbaa !4
  %lniXs = inttoptr i64 %lniXr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniXt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniXs( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniXt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiR8:
  %lniXu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniXv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniXu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniXv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQv_info$def to i8*)
define internal ghccc void @ciQv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 324, i32 30, i32 0}>
{
niXw:
  %ls7VC = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciQv
ciQv:
  %lniXx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQA_info$def to i64
  %lniXy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniXx, i64* %lniXy, !tbaa !2
  %lniXB = load i64, i64* %R1_Var
  %lniXC = add i64 %lniXB, 7
  %lniXD = inttoptr i64 %lniXC to double*
  %lniXE = load double, double* %lniXD, !tbaa !4
  store double %lniXE, double* %ls7VC
  %lniXF = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lniXG = bitcast i64* %lniXF to i64*
  %lniXH = load i64, i64* %lniXG, !tbaa !2
  store i64 %lniXH, i64* %R1_Var
  %lniXI = load double, double* %ls7VC
  %lniXJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lniXK = bitcast i64* %lniXJ to double*
  store double %lniXI, double* %lniXK, !tbaa !2
  %lniXL = load i64, i64* %R1_Var
  %lniXM = and i64 %lniXL, 7
  %lniXN = icmp ne i64 %lniXM, 0
  br i1 %lniXN, label %uiR9, label %ciQB
ciQB:
  %lniXP = load i64, i64* %R1_Var
  %lniXQ = inttoptr i64 %lniXP to i64*
  %lniXR = load i64, i64* %lniXQ, !tbaa !4
  %lniXS = inttoptr i64 %lniXR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniXT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniXS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniXT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiR9:
  %lniXU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniXV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniXU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniXV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQA_info$def to i8*)
define internal ghccc void @ciQA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
niXW:
  %ls7VE = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciQA
ciQA:
  %lniXX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQF_info$def to i64
  %lniXY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lniXX, i64* %lniXY, !tbaa !2
  %lniY1 = load i64, i64* %R1_Var
  %lniY2 = add i64 %lniY1, 7
  %lniY3 = inttoptr i64 %lniY2 to double*
  %lniY4 = load double, double* %lniY3, !tbaa !4
  store double %lniY4, double* %ls7VE
  %lniY5 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lniY6 = bitcast i64* %lniY5 to i64*
  %lniY7 = load i64, i64* %lniY6, !tbaa !2
  store i64 %lniY7, i64* %R1_Var
  %lniY8 = load double, double* %ls7VE
  %lniY9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lniYa = bitcast i64* %lniY9 to double*
  store double %lniY8, double* %lniYa, !tbaa !2
  %lniYb = load i64, i64* %R1_Var
  %lniYc = and i64 %lniYb, 7
  %lniYd = icmp ne i64 %lniYc, 0
  br i1 %lniYd, label %uiRa, label %ciQG
ciQG:
  %lniYf = load i64, i64* %R1_Var
  %lniYg = inttoptr i64 %lniYf to i64*
  %lniYh = load i64, i64* %lniYg, !tbaa !4
  %lniYi = inttoptr i64 %lniYh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniYj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniYi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniYj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiRa:
  %lniYk = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniYl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniYk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lniYl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQF_info$def to i8*)
define internal ghccc void @ciQF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
niYm:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7VK = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciQF
ciQF:
  %lniYn = load i64*, i64** %Hp_Var
  %lniYo = getelementptr inbounds i64, i64* %lniYn, i32 2
  %lniYp = ptrtoint i64* %lniYo to i64
  %lniYq = inttoptr i64 %lniYp to i64*
  store i64* %lniYq, i64** %Hp_Var
  %lniYr = load i64*, i64** %Hp_Var
  %lniYs = ptrtoint i64* %lniYr to i64
  %lniYt = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lniYu = bitcast i64* %lniYt to i64*
  %lniYv = load i64, i64* %lniYu, !tbaa !5
  %lniYw = icmp ugt i64 %lniYs, %lniYv
  %lniYx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniYw, i1 0 )
  br i1 %lniYx, label %ciR5, label %ciR4
ciR4:
  %lniYy = load i64*, i64** %Sp_Var
  %lniYz = getelementptr inbounds i64, i64* %lniYy, i32 1
  %lniYA = bitcast i64* %lniYz to double*
  %lniYB = load double, double* %lniYA, !tbaa !2
  %lniYC = load i64*, i64** %Sp_Var
  %lniYD = getelementptr inbounds i64, i64* %lniYC, i32 3
  %lniYE = bitcast i64* %lniYD to double*
  %lniYF = load double, double* %lniYE, !tbaa !2
  %lniYG = load i64*, i64** %Sp_Var
  %lniYH = getelementptr inbounds i64, i64* %lniYG, i32 2
  %lniYI = bitcast i64* %lniYH to double*
  %lniYJ = load double, double* %lniYI, !tbaa !2
  %lniYK = fmul double %lniYF, %lniYJ
  %lniYL = fadd double %lniYB, %lniYK
  %lniYM = load i64*, i64** %Sp_Var
  %lniYN = getelementptr inbounds i64, i64* %lniYM, i32 4
  %lniYO = bitcast i64* %lniYN to double*
  %lniYP = load double, double* %lniYO, !tbaa !2
  %lniYS = load i64, i64* %R1_Var
  %lniYT = add i64 %lniYS, 7
  %lniYU = inttoptr i64 %lniYT to double*
  %lniYV = load double, double* %lniYU, !tbaa !4
  %lniYW = fmul double %lniYP, %lniYV
  %lniYX = fadd double %lniYL, %lniYW
  store double %lniYX, double* %ls7VK
  %lniYZ = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lniYY = load i64*, i64** %Hp_Var
  %lniZ0 = getelementptr inbounds i64, i64* %lniYY, i32 -1
  store i64 %lniYZ, i64* %lniZ0, !tbaa !3
  %lniZ2 = load double, double* %ls7VK
  %lniZ1 = load i64*, i64** %Hp_Var
  %lniZ3 = getelementptr inbounds i64, i64* %lniZ1, i32 0
  %lniZ4 = bitcast i64* %lniZ3 to double*
  store double %lniZ2, double* %lniZ4, !tbaa !3
  %lniZ6 = load i64*, i64** %Hp_Var
  %lniZ7 = ptrtoint i64* %lniZ6 to i64
  %lniZ8 = add i64 %lniZ7, -7
  store i64 %lniZ8, i64* %R1_Var
  %lniZ9 = load i64*, i64** %Sp_Var
  %lniZa = getelementptr inbounds i64, i64* %lniZ9, i32 5
  %lniZb = ptrtoint i64* %lniZa to i64
  %lniZc = inttoptr i64 %lniZb to i64*
  store i64* %lniZc, i64** %Sp_Var
  %lniZd = load i64*, i64** %Sp_Var
  %lniZe = getelementptr inbounds i64, i64* %lniZd, i32 0
  %lniZf = bitcast i64* %lniZe to i64*
  %lniZg = load i64, i64* %lniZf, !tbaa !2
  %lniZh = inttoptr i64 %lniZg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniZi = load i64*, i64** %Sp_Var
  %lniZj = load i64*, i64** %Hp_Var
  %lniZk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniZh( i64* %Base_Arg, i64* %lniZi, i64* %lniZj, i64 %lniZk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciR5:
  %lniZl = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lniZl, !tbaa !5
  %lniZm = load i64, i64* %R1_Var
  store i64 %lniZm, i64* %R1_Var
  %lniZn = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lniZo = load i64*, i64** %Sp_Var
  %lniZp = load i64*, i64** %Hp_Var
  %lniZq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lniZn( i64* %Base_Arg, i64* %lniZo, i64* %lniZp, i64 %lniZq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7VL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7VL_info$def to i8*)
define internal ghccc void @s7VL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
niZr:
  %ls7Vu = alloca i64, i32 1
  %ls7Vf = alloca i64, i32 1
  %ls7Vq = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciRi
ciRi:
  %lniZs = load i64*, i64** %Sp_Var
  %lniZt = getelementptr inbounds i64, i64* %lniZs, i32 -7
  %lniZu = ptrtoint i64* %lniZt to i64
  %lniZv = icmp ult i64 %lniZu, %SpLim_Arg
  %lniZw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lniZv, i1 0 )
  br i1 %lniZw, label %ciRS, label %ciRT
ciRT:
  %lniZy = ptrtoint i8* @stg_upd_frame_info to i64
  %lniZx = load i64*, i64** %Sp_Var
  %lniZz = getelementptr inbounds i64, i64* %lniZx, i32 -2
  store i64 %lniZy, i64* %lniZz, !tbaa !2
  %lniZB = load i64, i64* %R1_Var
  %lniZA = load i64*, i64** %Sp_Var
  %lniZC = getelementptr inbounds i64, i64* %lniZA, i32 -1
  store i64 %lniZB, i64* %lniZC, !tbaa !2
  %lniZE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRf_info$def to i64
  %lniZD = load i64*, i64** %Sp_Var
  %lniZF = getelementptr inbounds i64, i64* %lniZD, i32 -7
  store i64 %lniZE, i64* %lniZF, !tbaa !2
  %lniZI = load i64, i64* %R1_Var
  %lniZJ = add i64 %lniZI, 16
  %lniZK = inttoptr i64 %lniZJ to i64*
  %lniZL = load i64, i64* %lniZK, !tbaa !4
  store i64 %lniZL, i64* %ls7Vu
  %lniZO = load i64, i64* %R1_Var
  %lniZP = add i64 %lniZO, 24
  %lniZQ = inttoptr i64 %lniZP to i64*
  %lniZR = load i64, i64* %lniZQ, !tbaa !4
  store i64 %lniZR, i64* %ls7Vf
  %lniZU = load i64, i64* %R1_Var
  %lniZV = add i64 %lniZU, 32
  %lniZW = inttoptr i64 %lniZV to i64*
  %lniZX = load i64, i64* %lniZW, !tbaa !4
  store i64 %lniZX, i64* %ls7Vq
  %lnj00 = load i64, i64* %R1_Var
  %lnj01 = add i64 %lnj00, 40
  %lnj02 = inttoptr i64 %lnj01 to i64*
  %lnj03 = load i64, i64* %lnj02, !tbaa !4
  store i64 %lnj03, i64* %ls7Ve
  %lnj06 = load i64, i64* %R1_Var
  %lnj07 = add i64 %lnj06, 48
  %lnj08 = inttoptr i64 %lnj07 to i64*
  %lnj09 = load i64, i64* %lnj08, !tbaa !4
  store i64 %lnj09, i64* %R1_Var
  %lnj0b = load i64, i64* %ls7Ve
  %lnj0a = load i64*, i64** %Sp_Var
  %lnj0c = getelementptr inbounds i64, i64* %lnj0a, i32 -6
  store i64 %lnj0b, i64* %lnj0c, !tbaa !2
  %lnj0e = load i64, i64* %ls7Vf
  %lnj0d = load i64*, i64** %Sp_Var
  %lnj0f = getelementptr inbounds i64, i64* %lnj0d, i32 -5
  store i64 %lnj0e, i64* %lnj0f, !tbaa !2
  %lnj0h = load i64, i64* %ls7Vq
  %lnj0g = load i64*, i64** %Sp_Var
  %lnj0i = getelementptr inbounds i64, i64* %lnj0g, i32 -4
  store i64 %lnj0h, i64* %lnj0i, !tbaa !2
  %lnj0k = load i64, i64* %ls7Vu
  %lnj0j = load i64*, i64** %Sp_Var
  %lnj0l = getelementptr inbounds i64, i64* %lnj0j, i32 -3
  store i64 %lnj0k, i64* %lnj0l, !tbaa !2
  %lnj0m = load i64*, i64** %Sp_Var
  %lnj0n = getelementptr inbounds i64, i64* %lnj0m, i32 -7
  %lnj0o = ptrtoint i64* %lnj0n to i64
  %lnj0p = inttoptr i64 %lnj0o to i64*
  store i64* %lnj0p, i64** %Sp_Var
  %lnj0q = load i64, i64* %R1_Var
  %lnj0r = and i64 %lnj0q, 7
  %lnj0s = icmp ne i64 %lnj0r, 0
  br i1 %lnj0s, label %uiS2, label %ciRg
ciRg:
  %lnj0u = load i64, i64* %R1_Var
  %lnj0v = inttoptr i64 %lnj0u to i64*
  %lnj0w = load i64, i64* %lnj0v, !tbaa !4
  %lnj0x = inttoptr i64 %lnj0w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj0y = load i64*, i64** %Sp_Var
  %lnj0z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj0x( i64* %Base_Arg, i64* %lnj0y, i64* %Hp_Arg, i64 %lnj0z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiS2:
  %lnj0A = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj0B = load i64*, i64** %Sp_Var
  %lnj0C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj0A( i64* %Base_Arg, i64* %lnj0B, i64* %Hp_Arg, i64 %lnj0C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciRS:
  %lnj0D = load i64, i64* %R1_Var
  store i64 %lnj0D, i64* %R1_Var
  %lnj0E = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnj0F = bitcast i64* %lnj0E to i64*
  %lnj0G = load i64, i64* %lnj0F, !tbaa !5
  %lnj0H = inttoptr i64 %lnj0G to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj0I = load i64*, i64** %Sp_Var
  %lnj0J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj0H( i64* %Base_Arg, i64* %lnj0I, i64* %Hp_Arg, i64 %lnj0J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciRf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRf_info$def to i8*)
define internal ghccc void @ciRf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nj0K:
  %ls7VN = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciRf
ciRf:
  %lnj0L = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRl_info$def to i64
  %lnj0M = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj0L, i64* %lnj0M, !tbaa !2
  %lnj0P = load i64, i64* %R1_Var
  %lnj0Q = add i64 %lnj0P, 7
  %lnj0R = inttoptr i64 %lnj0Q to double*
  %lnj0S = load double, double* %lnj0R, !tbaa !4
  store double %lnj0S, double* %ls7VN
  %lnj0T = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj0U = bitcast i64* %lnj0T to i64*
  %lnj0V = load i64, i64* %lnj0U, !tbaa !2
  store i64 %lnj0V, i64* %R1_Var
  %lnj0W = load double, double* %ls7VN
  %lnj0X = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj0Y = bitcast i64* %lnj0X to double*
  store double %lnj0W, double* %lnj0Y, !tbaa !2
  %lnj0Z = load i64, i64* %R1_Var
  %lnj10 = and i64 %lnj0Z, 7
  %lnj11 = icmp ne i64 %lnj10, 0
  br i1 %lnj11, label %uiS1, label %ciRm
ciRm:
  %lnj13 = load i64, i64* %R1_Var
  %lnj14 = inttoptr i64 %lnj13 to i64*
  %lnj15 = load i64, i64* %lnj14, !tbaa !4
  %lnj16 = inttoptr i64 %lnj15 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj17 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj16( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj17, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiS1:
  %lnj18 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj19 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj18( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj19, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciRl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRl_info$def to i8*)
define internal ghccc void @ciRl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
nj1a:
  %ls7VP = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciRl
ciRl:
  %lnj1b = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRq_info$def to i64
  %lnj1c = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj1b, i64* %lnj1c, !tbaa !2
  %lnj1f = load i64, i64* %R1_Var
  %lnj1g = add i64 %lnj1f, 7
  %lnj1h = inttoptr i64 %lnj1g to double*
  %lnj1i = load double, double* %lnj1h, !tbaa !4
  store double %lnj1i, double* %ls7VP
  %lnj1j = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnj1k = bitcast i64* %lnj1j to i64*
  %lnj1l = load i64, i64* %lnj1k, !tbaa !2
  store i64 %lnj1l, i64* %R1_Var
  %lnj1m = load double, double* %ls7VP
  %lnj1n = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnj1o = bitcast i64* %lnj1n to double*
  store double %lnj1m, double* %lnj1o, !tbaa !2
  %lnj1p = load i64, i64* %R1_Var
  %lnj1q = and i64 %lnj1p, 7
  %lnj1r = icmp ne i64 %lnj1q, 0
  br i1 %lnj1r, label %uiS3, label %ciRr
ciRr:
  %lnj1t = load i64, i64* %R1_Var
  %lnj1u = inttoptr i64 %lnj1t to i64*
  %lnj1v = load i64, i64* %lnj1u, !tbaa !4
  %lnj1w = inttoptr i64 %lnj1v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj1x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj1w( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj1x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiS3:
  %lnj1y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj1z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj1y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj1z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciRq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRq_info$def to i8*)
define internal ghccc void @ciRq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 324, i32 30, i32 0}>
{
nj1A:
  %ls7VR = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciRq
ciRq:
  %lnj1B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRv_info$def to i64
  %lnj1C = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj1B, i64* %lnj1C, !tbaa !2
  %lnj1F = load i64, i64* %R1_Var
  %lnj1G = add i64 %lnj1F, 7
  %lnj1H = inttoptr i64 %lnj1G to double*
  %lnj1I = load double, double* %lnj1H, !tbaa !4
  store double %lnj1I, double* %ls7VR
  %lnj1J = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj1K = bitcast i64* %lnj1J to i64*
  %lnj1L = load i64, i64* %lnj1K, !tbaa !2
  store i64 %lnj1L, i64* %R1_Var
  %lnj1M = load double, double* %ls7VR
  %lnj1N = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj1O = bitcast i64* %lnj1N to double*
  store double %lnj1M, double* %lnj1O, !tbaa !2
  %lnj1P = load i64, i64* %R1_Var
  %lnj1Q = and i64 %lnj1P, 7
  %lnj1R = icmp ne i64 %lnj1Q, 0
  br i1 %lnj1R, label %uiS4, label %ciRw
ciRw:
  %lnj1T = load i64, i64* %R1_Var
  %lnj1U = inttoptr i64 %lnj1T to i64*
  %lnj1V = load i64, i64* %lnj1U, !tbaa !4
  %lnj1W = inttoptr i64 %lnj1V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj1X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj1W( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj1X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiS4:
  %lnj1Y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj1Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj1Y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj1Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciRv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRv_info$def to i8*)
define internal ghccc void @ciRv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
nj20:
  %ls7VT = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciRv
ciRv:
  %lnj21 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRA_info$def to i64
  %lnj22 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj21, i64* %lnj22, !tbaa !2
  %lnj25 = load i64, i64* %R1_Var
  %lnj26 = add i64 %lnj25, 7
  %lnj27 = inttoptr i64 %lnj26 to double*
  %lnj28 = load double, double* %lnj27, !tbaa !4
  store double %lnj28, double* %ls7VT
  %lnj29 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnj2a = bitcast i64* %lnj29 to i64*
  %lnj2b = load i64, i64* %lnj2a, !tbaa !2
  store i64 %lnj2b, i64* %R1_Var
  %lnj2c = load double, double* %ls7VT
  %lnj2d = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnj2e = bitcast i64* %lnj2d to double*
  store double %lnj2c, double* %lnj2e, !tbaa !2
  %lnj2f = load i64, i64* %R1_Var
  %lnj2g = and i64 %lnj2f, 7
  %lnj2h = icmp ne i64 %lnj2g, 0
  br i1 %lnj2h, label %uiS5, label %ciRB
ciRB:
  %lnj2j = load i64, i64* %R1_Var
  %lnj2k = inttoptr i64 %lnj2j to i64*
  %lnj2l = load i64, i64* %lnj2k, !tbaa !4
  %lnj2m = inttoptr i64 %lnj2l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj2n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj2m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj2n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiS5:
  %lnj2o = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj2p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj2o( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj2p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciRA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciRA_info$def to i8*)
define internal ghccc void @ciRA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
nj2q:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7VZ = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciRA
ciRA:
  %lnj2r = load i64*, i64** %Hp_Var
  %lnj2s = getelementptr inbounds i64, i64* %lnj2r, i32 2
  %lnj2t = ptrtoint i64* %lnj2s to i64
  %lnj2u = inttoptr i64 %lnj2t to i64*
  store i64* %lnj2u, i64** %Hp_Var
  %lnj2v = load i64*, i64** %Hp_Var
  %lnj2w = ptrtoint i64* %lnj2v to i64
  %lnj2x = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnj2y = bitcast i64* %lnj2x to i64*
  %lnj2z = load i64, i64* %lnj2y, !tbaa !5
  %lnj2A = icmp ugt i64 %lnj2w, %lnj2z
  %lnj2B = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnj2A, i1 0 )
  br i1 %lnj2B, label %ciS0, label %ciRZ
ciRZ:
  %lnj2C = load i64*, i64** %Sp_Var
  %lnj2D = getelementptr inbounds i64, i64* %lnj2C, i32 1
  %lnj2E = bitcast i64* %lnj2D to double*
  %lnj2F = load double, double* %lnj2E, !tbaa !2
  %lnj2G = load i64*, i64** %Sp_Var
  %lnj2H = getelementptr inbounds i64, i64* %lnj2G, i32 3
  %lnj2I = bitcast i64* %lnj2H to double*
  %lnj2J = load double, double* %lnj2I, !tbaa !2
  %lnj2K = load i64*, i64** %Sp_Var
  %lnj2L = getelementptr inbounds i64, i64* %lnj2K, i32 2
  %lnj2M = bitcast i64* %lnj2L to double*
  %lnj2N = load double, double* %lnj2M, !tbaa !2
  %lnj2O = fmul double %lnj2J, %lnj2N
  %lnj2P = fadd double %lnj2F, %lnj2O
  %lnj2Q = load i64*, i64** %Sp_Var
  %lnj2R = getelementptr inbounds i64, i64* %lnj2Q, i32 4
  %lnj2S = bitcast i64* %lnj2R to double*
  %lnj2T = load double, double* %lnj2S, !tbaa !2
  %lnj2W = load i64, i64* %R1_Var
  %lnj2X = add i64 %lnj2W, 7
  %lnj2Y = inttoptr i64 %lnj2X to double*
  %lnj2Z = load double, double* %lnj2Y, !tbaa !4
  %lnj30 = fmul double %lnj2T, %lnj2Z
  %lnj31 = fadd double %lnj2P, %lnj30
  store double %lnj31, double* %ls7VZ
  %lnj33 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnj32 = load i64*, i64** %Hp_Var
  %lnj34 = getelementptr inbounds i64, i64* %lnj32, i32 -1
  store i64 %lnj33, i64* %lnj34, !tbaa !3
  %lnj36 = load double, double* %ls7VZ
  %lnj35 = load i64*, i64** %Hp_Var
  %lnj37 = getelementptr inbounds i64, i64* %lnj35, i32 0
  %lnj38 = bitcast i64* %lnj37 to double*
  store double %lnj36, double* %lnj38, !tbaa !3
  %lnj3a = load i64*, i64** %Hp_Var
  %lnj3b = ptrtoint i64* %lnj3a to i64
  %lnj3c = add i64 %lnj3b, -7
  store i64 %lnj3c, i64* %R1_Var
  %lnj3d = load i64*, i64** %Sp_Var
  %lnj3e = getelementptr inbounds i64, i64* %lnj3d, i32 5
  %lnj3f = ptrtoint i64* %lnj3e to i64
  %lnj3g = inttoptr i64 %lnj3f to i64*
  store i64* %lnj3g, i64** %Sp_Var
  %lnj3h = load i64*, i64** %Sp_Var
  %lnj3i = getelementptr inbounds i64, i64* %lnj3h, i32 0
  %lnj3j = bitcast i64* %lnj3i to i64*
  %lnj3k = load i64, i64* %lnj3j, !tbaa !2
  %lnj3l = inttoptr i64 %lnj3k to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj3m = load i64*, i64** %Sp_Var
  %lnj3n = load i64*, i64** %Hp_Var
  %lnj3o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj3l( i64* %Base_Arg, i64* %lnj3m, i64* %lnj3n, i64 %lnj3o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciS0:
  %lnj3p = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnj3p, !tbaa !5
  %lnj3q = load i64, i64* %R1_Var
  store i64 %lnj3q, i64* %R1_Var
  %lnj3r = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj3s = load i64*, i64** %Sp_Var
  %lnj3t = load i64*, i64** %Hp_Var
  %lnj3u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj3r( i64* %Base_Arg, i64* %lnj3s, i64* %lnj3t, i64 %lnj3u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7W0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7W0_info$def to i8*)
define internal ghccc void @s7W0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
nj3v:
  %ls7Vt = alloca i64, i32 1
  %ls7Vf = alloca i64, i32 1
  %ls7Vp = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciSd
ciSd:
  %lnj3w = load i64*, i64** %Sp_Var
  %lnj3x = getelementptr inbounds i64, i64* %lnj3w, i32 -7
  %lnj3y = ptrtoint i64* %lnj3x to i64
  %lnj3z = icmp ult i64 %lnj3y, %SpLim_Arg
  %lnj3A = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnj3z, i1 0 )
  br i1 %lnj3A, label %ciSN, label %ciSO
ciSO:
  %lnj3C = ptrtoint i8* @stg_upd_frame_info to i64
  %lnj3B = load i64*, i64** %Sp_Var
  %lnj3D = getelementptr inbounds i64, i64* %lnj3B, i32 -2
  store i64 %lnj3C, i64* %lnj3D, !tbaa !2
  %lnj3F = load i64, i64* %R1_Var
  %lnj3E = load i64*, i64** %Sp_Var
  %lnj3G = getelementptr inbounds i64, i64* %lnj3E, i32 -1
  store i64 %lnj3F, i64* %lnj3G, !tbaa !2
  %lnj3I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSa_info$def to i64
  %lnj3H = load i64*, i64** %Sp_Var
  %lnj3J = getelementptr inbounds i64, i64* %lnj3H, i32 -7
  store i64 %lnj3I, i64* %lnj3J, !tbaa !2
  %lnj3M = load i64, i64* %R1_Var
  %lnj3N = add i64 %lnj3M, 16
  %lnj3O = inttoptr i64 %lnj3N to i64*
  %lnj3P = load i64, i64* %lnj3O, !tbaa !4
  store i64 %lnj3P, i64* %ls7Vt
  %lnj3S = load i64, i64* %R1_Var
  %lnj3T = add i64 %lnj3S, 24
  %lnj3U = inttoptr i64 %lnj3T to i64*
  %lnj3V = load i64, i64* %lnj3U, !tbaa !4
  store i64 %lnj3V, i64* %ls7Vf
  %lnj3Y = load i64, i64* %R1_Var
  %lnj3Z = add i64 %lnj3Y, 32
  %lnj40 = inttoptr i64 %lnj3Z to i64*
  %lnj41 = load i64, i64* %lnj40, !tbaa !4
  store i64 %lnj41, i64* %ls7Vp
  %lnj44 = load i64, i64* %R1_Var
  %lnj45 = add i64 %lnj44, 40
  %lnj46 = inttoptr i64 %lnj45 to i64*
  %lnj47 = load i64, i64* %lnj46, !tbaa !4
  store i64 %lnj47, i64* %ls7Ve
  %lnj4a = load i64, i64* %R1_Var
  %lnj4b = add i64 %lnj4a, 48
  %lnj4c = inttoptr i64 %lnj4b to i64*
  %lnj4d = load i64, i64* %lnj4c, !tbaa !4
  store i64 %lnj4d, i64* %R1_Var
  %lnj4f = load i64, i64* %ls7Ve
  %lnj4e = load i64*, i64** %Sp_Var
  %lnj4g = getelementptr inbounds i64, i64* %lnj4e, i32 -6
  store i64 %lnj4f, i64* %lnj4g, !tbaa !2
  %lnj4i = load i64, i64* %ls7Vf
  %lnj4h = load i64*, i64** %Sp_Var
  %lnj4j = getelementptr inbounds i64, i64* %lnj4h, i32 -5
  store i64 %lnj4i, i64* %lnj4j, !tbaa !2
  %lnj4l = load i64, i64* %ls7Vp
  %lnj4k = load i64*, i64** %Sp_Var
  %lnj4m = getelementptr inbounds i64, i64* %lnj4k, i32 -4
  store i64 %lnj4l, i64* %lnj4m, !tbaa !2
  %lnj4o = load i64, i64* %ls7Vt
  %lnj4n = load i64*, i64** %Sp_Var
  %lnj4p = getelementptr inbounds i64, i64* %lnj4n, i32 -3
  store i64 %lnj4o, i64* %lnj4p, !tbaa !2
  %lnj4q = load i64*, i64** %Sp_Var
  %lnj4r = getelementptr inbounds i64, i64* %lnj4q, i32 -7
  %lnj4s = ptrtoint i64* %lnj4r to i64
  %lnj4t = inttoptr i64 %lnj4s to i64*
  store i64* %lnj4t, i64** %Sp_Var
  %lnj4u = load i64, i64* %R1_Var
  %lnj4v = and i64 %lnj4u, 7
  %lnj4w = icmp ne i64 %lnj4v, 0
  br i1 %lnj4w, label %uiSX, label %ciSb
ciSb:
  %lnj4y = load i64, i64* %R1_Var
  %lnj4z = inttoptr i64 %lnj4y to i64*
  %lnj4A = load i64, i64* %lnj4z, !tbaa !4
  %lnj4B = inttoptr i64 %lnj4A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj4C = load i64*, i64** %Sp_Var
  %lnj4D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj4B( i64* %Base_Arg, i64* %lnj4C, i64* %Hp_Arg, i64 %lnj4D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiSX:
  %lnj4E = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSa_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj4F = load i64*, i64** %Sp_Var
  %lnj4G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj4E( i64* %Base_Arg, i64* %lnj4F, i64* %Hp_Arg, i64 %lnj4G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciSN:
  %lnj4H = load i64, i64* %R1_Var
  store i64 %lnj4H, i64* %R1_Var
  %lnj4I = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnj4J = bitcast i64* %lnj4I to i64*
  %lnj4K = load i64, i64* %lnj4J, !tbaa !5
  %lnj4L = inttoptr i64 %lnj4K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj4M = load i64*, i64** %Sp_Var
  %lnj4N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj4L( i64* %Base_Arg, i64* %lnj4M, i64* %Hp_Arg, i64 %lnj4N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciSa_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSa_info$def to i8*)
define internal ghccc void @ciSa_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
nj4O:
  %ls7W2 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciSa
ciSa:
  %lnj4P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSg_info$def to i64
  %lnj4Q = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj4P, i64* %lnj4Q, !tbaa !2
  %lnj4T = load i64, i64* %R1_Var
  %lnj4U = add i64 %lnj4T, 7
  %lnj4V = inttoptr i64 %lnj4U to double*
  %lnj4W = load double, double* %lnj4V, !tbaa !4
  store double %lnj4W, double* %ls7W2
  %lnj4X = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj4Y = bitcast i64* %lnj4X to i64*
  %lnj4Z = load i64, i64* %lnj4Y, !tbaa !2
  store i64 %lnj4Z, i64* %R1_Var
  %lnj50 = load double, double* %ls7W2
  %lnj51 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj52 = bitcast i64* %lnj51 to double*
  store double %lnj50, double* %lnj52, !tbaa !2
  %lnj53 = load i64, i64* %R1_Var
  %lnj54 = and i64 %lnj53, 7
  %lnj55 = icmp ne i64 %lnj54, 0
  br i1 %lnj55, label %uiSW, label %ciSh
ciSh:
  %lnj57 = load i64, i64* %R1_Var
  %lnj58 = inttoptr i64 %lnj57 to i64*
  %lnj59 = load i64, i64* %lnj58, !tbaa !4
  %lnj5a = inttoptr i64 %lnj59 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj5b = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj5a( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj5b, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiSW:
  %lnj5c = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj5d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj5c( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj5d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciSg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSg_info$def to i8*)
define internal ghccc void @ciSg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 68, i32 30, i32 0}>
{
nj5e:
  %ls7W4 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciSg
ciSg:
  %lnj5f = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSl_info$def to i64
  %lnj5g = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj5f, i64* %lnj5g, !tbaa !2
  %lnj5j = load i64, i64* %R1_Var
  %lnj5k = add i64 %lnj5j, 7
  %lnj5l = inttoptr i64 %lnj5k to double*
  %lnj5m = load double, double* %lnj5l, !tbaa !4
  store double %lnj5m, double* %ls7W4
  %lnj5n = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnj5o = bitcast i64* %lnj5n to i64*
  %lnj5p = load i64, i64* %lnj5o, !tbaa !2
  store i64 %lnj5p, i64* %R1_Var
  %lnj5q = load double, double* %ls7W4
  %lnj5r = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnj5s = bitcast i64* %lnj5r to double*
  store double %lnj5q, double* %lnj5s, !tbaa !2
  %lnj5t = load i64, i64* %R1_Var
  %lnj5u = and i64 %lnj5t, 7
  %lnj5v = icmp ne i64 %lnj5u, 0
  br i1 %lnj5v, label %uiSY, label %ciSm
ciSm:
  %lnj5x = load i64, i64* %R1_Var
  %lnj5y = inttoptr i64 %lnj5x to i64*
  %lnj5z = load i64, i64* %lnj5y, !tbaa !4
  %lnj5A = inttoptr i64 %lnj5z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj5B = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj5A( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj5B, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiSY:
  %lnj5C = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj5D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj5C( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj5D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciSl_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSl_info$def to i8*)
define internal ghccc void @ciSl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 324, i32 30, i32 0}>
{
nj5E:
  %ls7W6 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciSl
ciSl:
  %lnj5F = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSq_info$def to i64
  %lnj5G = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj5F, i64* %lnj5G, !tbaa !2
  %lnj5J = load i64, i64* %R1_Var
  %lnj5K = add i64 %lnj5J, 7
  %lnj5L = inttoptr i64 %lnj5K to double*
  %lnj5M = load double, double* %lnj5L, !tbaa !4
  store double %lnj5M, double* %ls7W6
  %lnj5N = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj5O = bitcast i64* %lnj5N to i64*
  %lnj5P = load i64, i64* %lnj5O, !tbaa !2
  store i64 %lnj5P, i64* %R1_Var
  %lnj5Q = load double, double* %ls7W6
  %lnj5R = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj5S = bitcast i64* %lnj5R to double*
  store double %lnj5Q, double* %lnj5S, !tbaa !2
  %lnj5T = load i64, i64* %R1_Var
  %lnj5U = and i64 %lnj5T, 7
  %lnj5V = icmp ne i64 %lnj5U, 0
  br i1 %lnj5V, label %uiSZ, label %ciSr
ciSr:
  %lnj5X = load i64, i64* %R1_Var
  %lnj5Y = inttoptr i64 %lnj5X to i64*
  %lnj5Z = load i64, i64* %lnj5Y, !tbaa !4
  %lnj60 = inttoptr i64 %lnj5Z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj61 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj60( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj61, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiSZ:
  %lnj62 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj63 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj62( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj63, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciSq_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSq_info$def to i8*)
define internal ghccc void @ciSq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 452, i32 30, i32 0}>
{
nj64:
  %ls7W8 = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciSq
ciSq:
  %lnj65 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSv_info$def to i64
  %lnj66 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj65, i64* %lnj66, !tbaa !2
  %lnj69 = load i64, i64* %R1_Var
  %lnj6a = add i64 %lnj69, 7
  %lnj6b = inttoptr i64 %lnj6a to double*
  %lnj6c = load double, double* %lnj6b, !tbaa !4
  store double %lnj6c, double* %ls7W8
  %lnj6d = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnj6e = bitcast i64* %lnj6d to i64*
  %lnj6f = load i64, i64* %lnj6e, !tbaa !2
  store i64 %lnj6f, i64* %R1_Var
  %lnj6g = load double, double* %ls7W8
  %lnj6h = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnj6i = bitcast i64* %lnj6h to double*
  store double %lnj6g, double* %lnj6i, !tbaa !2
  %lnj6j = load i64, i64* %R1_Var
  %lnj6k = and i64 %lnj6j, 7
  %lnj6l = icmp ne i64 %lnj6k, 0
  br i1 %lnj6l, label %uiT0, label %ciSw
ciSw:
  %lnj6n = load i64, i64* %R1_Var
  %lnj6o = inttoptr i64 %lnj6n to i64*
  %lnj6p = load i64, i64* %lnj6o, !tbaa !4
  %lnj6q = inttoptr i64 %lnj6p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj6r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj6q( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj6r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiT0:
  %lnj6s = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj6t = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj6s( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj6t, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciSv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciSv_info$def to i8*)
define internal ghccc void @ciSv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 964, i32 30, i32 0}>
{
nj6u:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7We = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciSv
ciSv:
  %lnj6v = load i64*, i64** %Hp_Var
  %lnj6w = getelementptr inbounds i64, i64* %lnj6v, i32 2
  %lnj6x = ptrtoint i64* %lnj6w to i64
  %lnj6y = inttoptr i64 %lnj6x to i64*
  store i64* %lnj6y, i64** %Hp_Var
  %lnj6z = load i64*, i64** %Hp_Var
  %lnj6A = ptrtoint i64* %lnj6z to i64
  %lnj6B = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnj6C = bitcast i64* %lnj6B to i64*
  %lnj6D = load i64, i64* %lnj6C, !tbaa !5
  %lnj6E = icmp ugt i64 %lnj6A, %lnj6D
  %lnj6F = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnj6E, i1 0 )
  br i1 %lnj6F, label %ciSV, label %ciSU
ciSU:
  %lnj6G = load i64*, i64** %Sp_Var
  %lnj6H = getelementptr inbounds i64, i64* %lnj6G, i32 1
  %lnj6I = bitcast i64* %lnj6H to double*
  %lnj6J = load double, double* %lnj6I, !tbaa !2
  %lnj6K = load i64*, i64** %Sp_Var
  %lnj6L = getelementptr inbounds i64, i64* %lnj6K, i32 3
  %lnj6M = bitcast i64* %lnj6L to double*
  %lnj6N = load double, double* %lnj6M, !tbaa !2
  %lnj6O = load i64*, i64** %Sp_Var
  %lnj6P = getelementptr inbounds i64, i64* %lnj6O, i32 2
  %lnj6Q = bitcast i64* %lnj6P to double*
  %lnj6R = load double, double* %lnj6Q, !tbaa !2
  %lnj6S = fmul double %lnj6N, %lnj6R
  %lnj6T = fadd double %lnj6J, %lnj6S
  %lnj6U = load i64*, i64** %Sp_Var
  %lnj6V = getelementptr inbounds i64, i64* %lnj6U, i32 4
  %lnj6W = bitcast i64* %lnj6V to double*
  %lnj6X = load double, double* %lnj6W, !tbaa !2
  %lnj70 = load i64, i64* %R1_Var
  %lnj71 = add i64 %lnj70, 7
  %lnj72 = inttoptr i64 %lnj71 to double*
  %lnj73 = load double, double* %lnj72, !tbaa !4
  %lnj74 = fmul double %lnj6X, %lnj73
  %lnj75 = fadd double %lnj6T, %lnj74
  store double %lnj75, double* %ls7We
  %lnj77 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnj76 = load i64*, i64** %Hp_Var
  %lnj78 = getelementptr inbounds i64, i64* %lnj76, i32 -1
  store i64 %lnj77, i64* %lnj78, !tbaa !3
  %lnj7a = load double, double* %ls7We
  %lnj79 = load i64*, i64** %Hp_Var
  %lnj7b = getelementptr inbounds i64, i64* %lnj79, i32 0
  %lnj7c = bitcast i64* %lnj7b to double*
  store double %lnj7a, double* %lnj7c, !tbaa !3
  %lnj7e = load i64*, i64** %Hp_Var
  %lnj7f = ptrtoint i64* %lnj7e to i64
  %lnj7g = add i64 %lnj7f, -7
  store i64 %lnj7g, i64* %R1_Var
  %lnj7h = load i64*, i64** %Sp_Var
  %lnj7i = getelementptr inbounds i64, i64* %lnj7h, i32 5
  %lnj7j = ptrtoint i64* %lnj7i to i64
  %lnj7k = inttoptr i64 %lnj7j to i64*
  store i64* %lnj7k, i64** %Sp_Var
  %lnj7l = load i64*, i64** %Sp_Var
  %lnj7m = getelementptr inbounds i64, i64* %lnj7l, i32 0
  %lnj7n = bitcast i64* %lnj7m to i64*
  %lnj7o = load i64, i64* %lnj7n, !tbaa !2
  %lnj7p = inttoptr i64 %lnj7o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj7q = load i64*, i64** %Sp_Var
  %lnj7r = load i64*, i64** %Hp_Var
  %lnj7s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj7p( i64* %Base_Arg, i64* %lnj7q, i64* %lnj7r, i64 %lnj7s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciSV:
  %lnj7t = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnj7t, !tbaa !5
  %lnj7u = load i64, i64* %R1_Var
  store i64 %lnj7u, i64* %R1_Var
  %lnj7v = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj7w = load i64*, i64** %Sp_Var
  %lnj7x = load i64*, i64** %Hp_Var
  %lnj7y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj7v( i64* %Base_Arg, i64* %lnj7w, i64* %lnj7x, i64 %lnj7y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Wf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wf_info$def to i8*)
define internal ghccc void @s7Wf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 15, i32 0}>
{
nj7z:
  %ls7Vw = alloca i64, i32 1
  %ls7VL = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciT8
ciT8:
  %lnj7A = load i64*, i64** %Sp_Var
  %lnj7B = getelementptr inbounds i64, i64* %lnj7A, i32 -5
  %lnj7C = ptrtoint i64* %lnj7B to i64
  %lnj7D = icmp ult i64 %lnj7C, %SpLim_Arg
  %lnj7E = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnj7D, i1 0 )
  br i1 %lnj7E, label %ciTF, label %ciTG
ciTG:
  %lnj7G = ptrtoint i8* @stg_upd_frame_info to i64
  %lnj7F = load i64*, i64** %Sp_Var
  %lnj7H = getelementptr inbounds i64, i64* %lnj7F, i32 -2
  store i64 %lnj7G, i64* %lnj7H, !tbaa !2
  %lnj7J = load i64, i64* %R1_Var
  %lnj7I = load i64*, i64** %Sp_Var
  %lnj7K = getelementptr inbounds i64, i64* %lnj7I, i32 -1
  store i64 %lnj7J, i64* %lnj7K, !tbaa !2
  %lnj7M = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciT5_info$def to i64
  %lnj7L = load i64*, i64** %Sp_Var
  %lnj7N = getelementptr inbounds i64, i64* %lnj7L, i32 -5
  store i64 %lnj7M, i64* %lnj7N, !tbaa !2
  %lnj7Q = load i64, i64* %R1_Var
  %lnj7R = add i64 %lnj7Q, 16
  %lnj7S = inttoptr i64 %lnj7R to i64*
  %lnj7T = load i64, i64* %lnj7S, !tbaa !4
  store i64 %lnj7T, i64* %ls7Vw
  %lnj7W = load i64, i64* %R1_Var
  %lnj7X = add i64 %lnj7W, 24
  %lnj7Y = inttoptr i64 %lnj7X to i64*
  %lnj7Z = load i64, i64* %lnj7Y, !tbaa !4
  store i64 %lnj7Z, i64* %ls7VL
  %lnj82 = load i64, i64* %R1_Var
  %lnj83 = add i64 %lnj82, 32
  %lnj84 = inttoptr i64 %lnj83 to i64*
  %lnj85 = load i64, i64* %lnj84, !tbaa !4
  store i64 %lnj85, i64* %R1_Var
  %lnj87 = load i64, i64* %ls7Vw
  %lnj86 = load i64*, i64** %Sp_Var
  %lnj88 = getelementptr inbounds i64, i64* %lnj86, i32 -4
  store i64 %lnj87, i64* %lnj88, !tbaa !2
  %lnj8a = load i64, i64* %ls7VL
  %lnj89 = load i64*, i64** %Sp_Var
  %lnj8b = getelementptr inbounds i64, i64* %lnj89, i32 -3
  store i64 %lnj8a, i64* %lnj8b, !tbaa !2
  %lnj8c = load i64*, i64** %Sp_Var
  %lnj8d = getelementptr inbounds i64, i64* %lnj8c, i32 -5
  %lnj8e = ptrtoint i64* %lnj8d to i64
  %lnj8f = inttoptr i64 %lnj8e to i64*
  store i64* %lnj8f, i64** %Sp_Var
  %lnj8g = load i64, i64* %R1_Var
  %lnj8h = and i64 %lnj8g, 7
  %lnj8i = icmp ne i64 %lnj8h, 0
  br i1 %lnj8i, label %uiTN, label %ciT6
ciT6:
  %lnj8k = load i64, i64* %R1_Var
  %lnj8l = inttoptr i64 %lnj8k to i64*
  %lnj8m = load i64, i64* %lnj8l, !tbaa !4
  %lnj8n = inttoptr i64 %lnj8m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj8o = load i64*, i64** %Sp_Var
  %lnj8p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj8n( i64* %Base_Arg, i64* %lnj8o, i64* %Hp_Arg, i64 %lnj8p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiTN:
  %lnj8q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciT5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj8r = load i64*, i64** %Sp_Var
  %lnj8s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj8q( i64* %Base_Arg, i64* %lnj8r, i64* %Hp_Arg, i64 %lnj8s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciTF:
  %lnj8t = load i64, i64* %R1_Var
  store i64 %lnj8t, i64* %R1_Var
  %lnj8u = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnj8v = bitcast i64* %lnj8u to i64*
  %lnj8w = load i64, i64* %lnj8v, !tbaa !5
  %lnj8x = inttoptr i64 %lnj8w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj8y = load i64*, i64** %Sp_Var
  %lnj8z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj8x( i64* %Base_Arg, i64* %lnj8y, i64* %Hp_Arg, i64 %lnj8z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciT5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciT5_info$def to i8*)
define internal ghccc void @ciT5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 0}>
{
nj8A:
  %ls7Wh = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciT5
ciT5:
  %lnj8B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTb_info$def to i64
  %lnj8C = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj8B, i64* %lnj8C, !tbaa !2
  %lnj8F = load i64, i64* %R1_Var
  %lnj8G = add i64 %lnj8F, 7
  %lnj8H = inttoptr i64 %lnj8G to double*
  %lnj8I = load double, double* %lnj8H, !tbaa !4
  store double %lnj8I, double* %ls7Wh
  %lnj8J = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj8K = bitcast i64* %lnj8J to i64*
  %lnj8L = load i64, i64* %lnj8K, !tbaa !2
  store i64 %lnj8L, i64* %R1_Var
  %lnj8M = load double, double* %ls7Wh
  %lnj8N = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnj8O = bitcast i64* %lnj8N to double*
  store double %lnj8M, double* %lnj8O, !tbaa !2
  %lnj8P = load i64, i64* %R1_Var
  %lnj8Q = and i64 %lnj8P, 7
  %lnj8R = icmp ne i64 %lnj8Q, 0
  br i1 %lnj8R, label %uiTM, label %ciTc
ciTc:
  %lnj8T = load i64, i64* %R1_Var
  %lnj8U = inttoptr i64 %lnj8T to i64*
  %lnj8V = load i64, i64* %lnj8U, !tbaa !4
  %lnj8W = inttoptr i64 %lnj8V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj8X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj8W( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj8X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiTM:
  %lnj8Y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj8Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj8Y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj8Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciTb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTb_info$def to i8*)
define internal ghccc void @ciTb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 0}>
{
nj90:
  %ls7Wj = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciTb
ciTb:
  %lnj91 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTg_info$def to i64
  %lnj92 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnj91, i64* %lnj92, !tbaa !2
  %lnj95 = load i64, i64* %R1_Var
  %lnj96 = add i64 %lnj95, 7
  %lnj97 = inttoptr i64 %lnj96 to double*
  %lnj98 = load double, double* %lnj97, !tbaa !4
  store double %lnj98, double* %ls7Wj
  %lnj99 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj9a = bitcast i64* %lnj99 to i64*
  %lnj9b = load i64, i64* %lnj9a, !tbaa !2
  store i64 %lnj9b, i64* %R1_Var
  %lnj9c = load double, double* %ls7Wj
  %lnj9d = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnj9e = bitcast i64* %lnj9d to double*
  store double %lnj9c, double* %lnj9e, !tbaa !2
  %lnj9f = load i64, i64* %R1_Var
  %lnj9g = and i64 %lnj9f, 7
  %lnj9h = icmp ne i64 %lnj9g, 0
  br i1 %lnj9h, label %uiTO, label %ciTh
ciTh:
  %lnj9j = load i64, i64* %R1_Var
  %lnj9k = inttoptr i64 %lnj9j to i64*
  %lnj9l = load i64, i64* %lnj9k, !tbaa !4
  %lnj9m = inttoptr i64 %lnj9l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj9n = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj9m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj9n, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiTO:
  %lnj9o = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnj9p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnj9o( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnj9p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciTg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciTg_info$def to i8*)
define internal ghccc void @ciTg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 0}>
{
nj9q:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Wh = alloca double, i32 1
  %ls7Wj = alloca double, i32 1
  %ls7Wl = alloca double, i32 1
  %lciTA = alloca double, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciTg
ciTg:
  %lnj9r = load i64*, i64** %Hp_Var
  %lnj9s = getelementptr inbounds i64, i64* %lnj9r, i32 2
  %lnj9t = ptrtoint i64* %lnj9s to i64
  %lnj9u = inttoptr i64 %lnj9t to i64*
  store i64* %lnj9u, i64** %Hp_Var
  %lnj9v = load i64*, i64** %Hp_Var
  %lnj9w = ptrtoint i64* %lnj9v to i64
  %lnj9x = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnj9y = bitcast i64* %lnj9x to i64*
  %lnj9z = load i64, i64* %lnj9y, !tbaa !5
  %lnj9A = icmp ugt i64 %lnj9w, %lnj9z
  %lnj9B = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnj9A, i1 0 )
  br i1 %lnj9B, label %ciTL, label %ciTK
ciTK:
  %lnj9C = load i64*, i64** %Sp_Var
  %lnj9D = getelementptr inbounds i64, i64* %lnj9C, i32 2
  %lnj9E = bitcast i64* %lnj9D to double*
  %lnj9F = load double, double* %lnj9E, !tbaa !2
  store double %lnj9F, double* %ls7Wh
  %lnj9G = load i64*, i64** %Sp_Var
  %lnj9H = getelementptr inbounds i64, i64* %lnj9G, i32 1
  %lnj9I = bitcast i64* %lnj9H to double*
  %lnj9J = load double, double* %lnj9I, !tbaa !2
  store double %lnj9J, double* %ls7Wj
  %lnj9M = load i64, i64* %R1_Var
  %lnj9N = add i64 %lnj9M, 7
  %lnj9O = inttoptr i64 %lnj9N to double*
  %lnj9P = load double, double* %lnj9O, !tbaa !4
  store double %lnj9P, double* %ls7Wl
  %lnj9Q = load double, double* %ls7Wh
  %lnj9R = load double, double* %ls7Wh
  %lnj9S = fmul double %lnj9Q, %lnj9R
  %lnj9T = load double, double* %ls7Wj
  %lnj9U = load double, double* %ls7Wj
  %lnj9V = fmul double %lnj9T, %lnj9U
  %lnj9W = fadd double %lnj9S, %lnj9V
  %lnj9X = load double, double* %ls7Wl
  %lnj9Y = load double, double* %ls7Wl
  %lnj9Z = fmul double %lnj9X, %lnj9Y
  %lnja0 = fadd double %lnj9W, %lnj9Z
  %lnja1 = call ccc double (double) @llvm.sqrt.f64( double %lnja0 ) nounwind
  store double %lnja1, double* %lciTA
  %lnja3 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnja2 = load i64*, i64** %Hp_Var
  %lnja4 = getelementptr inbounds i64, i64* %lnja2, i32 -1
  store i64 %lnja3, i64* %lnja4, !tbaa !3
  %lnja6 = load double, double* %lciTA
  %lnja5 = load i64*, i64** %Hp_Var
  %lnja7 = getelementptr inbounds i64, i64* %lnja5, i32 0
  %lnja8 = bitcast i64* %lnja7 to double*
  store double %lnja6, double* %lnja8, !tbaa !3
  %lnjaa = load i64*, i64** %Hp_Var
  %lnjab = ptrtoint i64* %lnjaa to i64
  %lnjac = add i64 %lnjab, -7
  store i64 %lnjac, i64* %R1_Var
  %lnjad = load i64*, i64** %Sp_Var
  %lnjae = getelementptr inbounds i64, i64* %lnjad, i32 3
  %lnjaf = ptrtoint i64* %lnjae to i64
  %lnjag = inttoptr i64 %lnjaf to i64*
  store i64* %lnjag, i64** %Sp_Var
  %lnjah = load i64*, i64** %Sp_Var
  %lnjai = getelementptr inbounds i64, i64* %lnjah, i32 0
  %lnjaj = bitcast i64* %lnjai to i64*
  %lnjak = load i64, i64* %lnjaj, !tbaa !2
  %lnjal = inttoptr i64 %lnjak to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjam = load i64*, i64** %Sp_Var
  %lnjan = load i64*, i64** %Hp_Var
  %lnjao = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjal( i64* %Base_Arg, i64* %lnjam, i64* %lnjan, i64 %lnjao, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciTL:
  %lnjap = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnjap, !tbaa !5
  %lnjaq = load i64, i64* %R1_Var
  store i64 %lnjaq, i64* %R1_Var
  %lnjar = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjas = load i64*, i64** %Sp_Var
  %lnjat = load i64*, i64** %Hp_Var
  %lnjau = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjar( i64* %Base_Arg, i64* %lnjas, i64* %lnjat, i64 %lnjau, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Wu_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wu_info$def to i8*)
define internal ghccc void @s7Wu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
njav:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciTT
ciTT:
  %lnjaw = load i64*, i64** %Sp_Var
  %lnjax = getelementptr inbounds i64, i64* %lnjaw, i32 -2
  %lnjay = ptrtoint i64* %lnjax to i64
  %lnjaz = icmp ult i64 %lnjay, %SpLim_Arg
  %lnjaA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjaz, i1 0 )
  br i1 %lnjaA, label %ciTU, label %ciTV
ciTV:
  %lnjaC = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjaB = load i64*, i64** %Sp_Var
  %lnjaD = getelementptr inbounds i64, i64* %lnjaB, i32 -2
  store i64 %lnjaC, i64* %lnjaD, !tbaa !2
  %lnjaF = load i64, i64* %R1_Var
  %lnjaE = load i64*, i64** %Sp_Var
  %lnjaG = getelementptr inbounds i64, i64* %lnjaE, i32 -1
  store i64 %lnjaF, i64* %lnjaG, !tbaa !2
  %lnjaJ = load i64, i64* %R1_Var
  %lnjaK = add i64 %lnjaJ, 24
  %lnjaL = inttoptr i64 %lnjaK to i64*
  %lnjaM = load i64, i64* %lnjaL, !tbaa !4
  store i64 %lnjaM, i64* %R3_Var
  %lnjaP = load i64, i64* %R1_Var
  %lnjaQ = add i64 %lnjaP, 16
  %lnjaR = inttoptr i64 %lnjaQ to i64*
  %lnjaS = load i64, i64* %lnjaR, !tbaa !4
  store i64 %lnjaS, i64* %R2_Var
  %lnjaT = load i64*, i64** %Sp_Var
  %lnjaU = getelementptr inbounds i64, i64* %lnjaT, i32 -2
  %lnjaV = ptrtoint i64* %lnjaU to i64
  %lnjaW = inttoptr i64 %lnjaV to i64*
  store i64* %lnjaW, i64** %Sp_Var
  %lnjaX = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjaY = load i64*, i64** %Sp_Var
  %lnjaZ = load i64, i64* %R1_Var
  %lnjb0 = load i64, i64* %R2_Var
  %lnjb1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjaX( i64* %Base_Arg, i64* %lnjaY, i64* %Hp_Arg, i64 %lnjaZ, i64 %lnjb0, i64 %lnjb1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciTU:
  %lnjb2 = load i64, i64* %R1_Var
  store i64 %lnjb2, i64* %R1_Var
  %lnjb3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjb4 = bitcast i64* %lnjb3 to i64*
  %lnjb5 = load i64, i64* %lnjb4, !tbaa !5
  %lnjb6 = inttoptr i64 %lnjb5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjb7 = load i64*, i64** %Sp_Var
  %lnjb8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjb6( i64* %Base_Arg, i64* %lnjb7, i64* %Hp_Arg, i64 %lnjb8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Wt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wt_info$def to i8*)
define internal ghccc void @s7Wt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
njb9:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciU0
ciU0:
  %lnjba = load i64*, i64** %Sp_Var
  %lnjbb = getelementptr inbounds i64, i64* %lnjba, i32 -2
  %lnjbc = ptrtoint i64* %lnjbb to i64
  %lnjbd = icmp ult i64 %lnjbc, %SpLim_Arg
  %lnjbe = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjbd, i1 0 )
  br i1 %lnjbe, label %ciU1, label %ciU2
ciU2:
  %lnjbg = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjbf = load i64*, i64** %Sp_Var
  %lnjbh = getelementptr inbounds i64, i64* %lnjbf, i32 -2
  store i64 %lnjbg, i64* %lnjbh, !tbaa !2
  %lnjbj = load i64, i64* %R1_Var
  %lnjbi = load i64*, i64** %Sp_Var
  %lnjbk = getelementptr inbounds i64, i64* %lnjbi, i32 -1
  store i64 %lnjbj, i64* %lnjbk, !tbaa !2
  %lnjbn = load i64, i64* %R1_Var
  %lnjbo = add i64 %lnjbn, 24
  %lnjbp = inttoptr i64 %lnjbo to i64*
  %lnjbq = load i64, i64* %lnjbp, !tbaa !4
  store i64 %lnjbq, i64* %R3_Var
  %lnjbt = load i64, i64* %R1_Var
  %lnjbu = add i64 %lnjbt, 16
  %lnjbv = inttoptr i64 %lnjbu to i64*
  %lnjbw = load i64, i64* %lnjbv, !tbaa !4
  store i64 %lnjbw, i64* %R2_Var
  %lnjbx = load i64*, i64** %Sp_Var
  %lnjby = getelementptr inbounds i64, i64* %lnjbx, i32 -2
  %lnjbz = ptrtoint i64* %lnjby to i64
  %lnjbA = inttoptr i64 %lnjbz to i64*
  store i64* %lnjbA, i64** %Sp_Var
  %lnjbB = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjbC = load i64*, i64** %Sp_Var
  %lnjbD = load i64, i64* %R1_Var
  %lnjbE = load i64, i64* %R2_Var
  %lnjbF = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjbB( i64* %Base_Arg, i64* %lnjbC, i64* %Hp_Arg, i64 %lnjbD, i64 %lnjbE, i64 %lnjbF, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciU1:
  %lnjbG = load i64, i64* %R1_Var
  store i64 %lnjbG, i64* %R1_Var
  %lnjbH = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjbI = bitcast i64* %lnjbH to i64*
  %lnjbJ = load i64, i64* %lnjbI, !tbaa !5
  %lnjbK = inttoptr i64 %lnjbJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjbL = load i64*, i64** %Sp_Var
  %lnjbM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjbK( i64* %Base_Arg, i64* %lnjbL, i64* %Hp_Arg, i64 %lnjbM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Ws_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ws_info$def to i8*)
define internal ghccc void @s7Ws_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 18, i32 0}>
{
njbN:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciU7
ciU7:
  %lnjbO = load i64*, i64** %Sp_Var
  %lnjbP = getelementptr inbounds i64, i64* %lnjbO, i32 -2
  %lnjbQ = ptrtoint i64* %lnjbP to i64
  %lnjbR = icmp ult i64 %lnjbQ, %SpLim_Arg
  %lnjbS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjbR, i1 0 )
  br i1 %lnjbS, label %ciU8, label %ciU9
ciU9:
  %lnjbU = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjbT = load i64*, i64** %Sp_Var
  %lnjbV = getelementptr inbounds i64, i64* %lnjbT, i32 -2
  store i64 %lnjbU, i64* %lnjbV, !tbaa !2
  %lnjbX = load i64, i64* %R1_Var
  %lnjbW = load i64*, i64** %Sp_Var
  %lnjbY = getelementptr inbounds i64, i64* %lnjbW, i32 -1
  store i64 %lnjbX, i64* %lnjbY, !tbaa !2
  %lnjc1 = load i64, i64* %R1_Var
  %lnjc2 = add i64 %lnjc1, 24
  %lnjc3 = inttoptr i64 %lnjc2 to i64*
  %lnjc4 = load i64, i64* %lnjc3, !tbaa !4
  store i64 %lnjc4, i64* %R3_Var
  %lnjc7 = load i64, i64* %R1_Var
  %lnjc8 = add i64 %lnjc7, 16
  %lnjc9 = inttoptr i64 %lnjc8 to i64*
  %lnjca = load i64, i64* %lnjc9, !tbaa !4
  store i64 %lnjca, i64* %R2_Var
  %lnjcb = load i64*, i64** %Sp_Var
  %lnjcc = getelementptr inbounds i64, i64* %lnjcb, i32 -2
  %lnjcd = ptrtoint i64* %lnjcc to i64
  %lnjce = inttoptr i64 %lnjcd to i64*
  store i64* %lnjce, i64** %Sp_Var
  %lnjcf = bitcast i8* @base_GHCziFloat_divideDouble_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjcg = load i64*, i64** %Sp_Var
  %lnjch = load i64, i64* %R1_Var
  %lnjci = load i64, i64* %R2_Var
  %lnjcj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjcf( i64* %Base_Arg, i64* %lnjcg, i64* %Hp_Arg, i64 %lnjch, i64 %lnjci, i64 %lnjcj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciU8:
  %lnjck = load i64, i64* %R1_Var
  store i64 %lnjck, i64* %R1_Var
  %lnjcl = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjcm = bitcast i64* %lnjcl to i64*
  %lnjcn = load i64, i64* %lnjcm, !tbaa !5
  %lnjco = inttoptr i64 %lnjcn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjcp = load i64*, i64** %Sp_Var
  %lnjcq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjco( i64* %Base_Arg, i64* %lnjcp, i64* %Hp_Arg, i64 %lnjcq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Vj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Vj_info$def to i8*)
define internal ghccc void @s7Vj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 5, i32 15, i32 0}>
{
njcr:
  %ls7Vf = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %ls7Vi = alloca i64, i32 1
  %ls7Vh = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciUa
ciUa:
  %lnjcs = load i64*, i64** %Sp_Var
  %lnjct = getelementptr inbounds i64, i64* %lnjcs, i32 -11
  %lnjcu = ptrtoint i64* %lnjct to i64
  %lnjcv = icmp ult i64 %lnjcu, %SpLim_Arg
  %lnjcw = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjcv, i1 0 )
  br i1 %lnjcw, label %ciUc, label %ciUd
ciUd:
  %lnjcy = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjcx = load i64*, i64** %Sp_Var
  %lnjcz = getelementptr inbounds i64, i64* %lnjcx, i32 -2
  store i64 %lnjcy, i64* %lnjcz, !tbaa !2
  %lnjcB = load i64, i64* %R1_Var
  %lnjcA = load i64*, i64** %Sp_Var
  %lnjcC = getelementptr inbounds i64, i64* %lnjcA, i32 -1
  store i64 %lnjcB, i64* %lnjcC, !tbaa !2
  %lnjcE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ1_info$def to i64
  %lnjcD = load i64*, i64** %Sp_Var
  %lnjcF = getelementptr inbounds i64, i64* %lnjcD, i32 -7
  store i64 %lnjcE, i64* %lnjcF, !tbaa !2
  %lnjcI = load i64, i64* %R1_Var
  %lnjcJ = add i64 %lnjcI, 16
  %lnjcK = inttoptr i64 %lnjcJ to i64*
  %lnjcL = load i64, i64* %lnjcK, !tbaa !4
  store i64 %lnjcL, i64* %ls7Vf
  %lnjcO = load i64, i64* %R1_Var
  %lnjcP = add i64 %lnjcO, 24
  %lnjcQ = inttoptr i64 %lnjcP to i64*
  %lnjcR = load i64, i64* %lnjcQ, !tbaa !4
  store i64 %lnjcR, i64* %ls7Ve
  %lnjcU = load i64, i64* %R1_Var
  %lnjcV = add i64 %lnjcU, 32
  %lnjcW = inttoptr i64 %lnjcV to i64*
  %lnjcX = load i64, i64* %lnjcW, !tbaa !4
  store i64 %lnjcX, i64* %ls7Vi
  %lnjd0 = load i64, i64* %R1_Var
  %lnjd1 = add i64 %lnjd0, 40
  %lnjd2 = inttoptr i64 %lnjd1 to i64*
  %lnjd3 = load i64, i64* %lnjd2, !tbaa !4
  store i64 %lnjd3, i64* %ls7Vh
  %lnjd6 = load i64, i64* %R1_Var
  %lnjd7 = add i64 %lnjd6, 48
  %lnjd8 = inttoptr i64 %lnjd7 to i64*
  %lnjd9 = load i64, i64* %lnjd8, !tbaa !4
  store i64 %lnjd9, i64* %R1_Var
  %lnjdb = load i64, i64* %ls7Ve
  %lnjda = load i64*, i64** %Sp_Var
  %lnjdc = getelementptr inbounds i64, i64* %lnjda, i32 -6
  store i64 %lnjdb, i64* %lnjdc, !tbaa !2
  %lnjde = load i64, i64* %ls7Vf
  %lnjdd = load i64*, i64** %Sp_Var
  %lnjdf = getelementptr inbounds i64, i64* %lnjdd, i32 -5
  store i64 %lnjde, i64* %lnjdf, !tbaa !2
  %lnjdh = load i64, i64* %ls7Vh
  %lnjdg = load i64*, i64** %Sp_Var
  %lnjdi = getelementptr inbounds i64, i64* %lnjdg, i32 -4
  store i64 %lnjdh, i64* %lnjdi, !tbaa !2
  %lnjdk = load i64, i64* %ls7Vi
  %lnjdj = load i64*, i64** %Sp_Var
  %lnjdl = getelementptr inbounds i64, i64* %lnjdj, i32 -3
  store i64 %lnjdk, i64* %lnjdl, !tbaa !2
  %lnjdm = load i64*, i64** %Sp_Var
  %lnjdn = getelementptr inbounds i64, i64* %lnjdm, i32 -7
  %lnjdo = ptrtoint i64* %lnjdn to i64
  %lnjdp = inttoptr i64 %lnjdo to i64*
  store i64* %lnjdp, i64** %Sp_Var
  %lnjdq = load i64, i64* %R1_Var
  %lnjdr = and i64 %lnjdq, 7
  %lnjds = icmp ne i64 %lnjdr, 0
  br i1 %lnjds, label %uiUl, label %ciQ2
ciQ2:
  %lnjdu = load i64, i64* %R1_Var
  %lnjdv = inttoptr i64 %lnjdu to i64*
  %lnjdw = load i64, i64* %lnjdv, !tbaa !4
  %lnjdx = inttoptr i64 %lnjdw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjdy = load i64*, i64** %Sp_Var
  %lnjdz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjdx( i64* %Base_Arg, i64* %lnjdy, i64* %Hp_Arg, i64 %lnjdz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiUl:
  %lnjdA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjdB = load i64*, i64** %Sp_Var
  %lnjdC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjdA( i64* %Base_Arg, i64* %lnjdB, i64* %Hp_Arg, i64 %lnjdC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciUc:
  %lnjdD = load i64, i64* %R1_Var
  store i64 %lnjdD, i64* %R1_Var
  %lnjdE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjdF = bitcast i64* %lnjdE to i64*
  %lnjdG = load i64, i64* %lnjdF, !tbaa !5
  %lnjdH = inttoptr i64 %lnjdG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjdI = load i64*, i64** %Sp_Var
  %lnjdJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjdH( i64* %Base_Arg, i64* %lnjdI, i64* %Hp_Arg, i64 %lnjdJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQ1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ1_info$def to i8*)
define internal ghccc void @ciQ1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 0}>
{
njdK:
  %ls7Vl = alloca i64, i32 1
  %ls7Vm = alloca i64, i32 1
  %ls7Vn = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciQ1
ciQ1:
  %lnjdM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ6_info$def to i64
  %lnjdL = load i64*, i64** %Sp_Var
  %lnjdN = getelementptr inbounds i64, i64* %lnjdL, i32 -2
  store i64 %lnjdM, i64* %lnjdN, !tbaa !2
  %lnjdQ = load i64, i64* %R1_Var
  %lnjdR = add i64 %lnjdQ, 7
  %lnjdS = inttoptr i64 %lnjdR to i64*
  %lnjdT = load i64, i64* %lnjdS, !tbaa !4
  store i64 %lnjdT, i64* %ls7Vl
  %lnjdW = load i64, i64* %R1_Var
  %lnjdX = add i64 %lnjdW, 15
  %lnjdY = inttoptr i64 %lnjdX to i64*
  %lnjdZ = load i64, i64* %lnjdY, !tbaa !4
  store i64 %lnjdZ, i64* %ls7Vm
  %lnje2 = load i64, i64* %R1_Var
  %lnje3 = add i64 %lnje2, 23
  %lnje4 = inttoptr i64 %lnje3 to i64*
  %lnje5 = load i64, i64* %lnje4, !tbaa !4
  store i64 %lnje5, i64* %ls7Vn
  %lnje6 = load i64*, i64** %Sp_Var
  %lnje7 = getelementptr inbounds i64, i64* %lnje6, i32 3
  %lnje8 = bitcast i64* %lnje7 to i64*
  %lnje9 = load i64, i64* %lnje8, !tbaa !2
  store i64 %lnje9, i64* %R1_Var
  %lnjeb = load i64, i64* %ls7Vn
  %lnjea = load i64*, i64** %Sp_Var
  %lnjec = getelementptr inbounds i64, i64* %lnjea, i32 -1
  store i64 %lnjeb, i64* %lnjec, !tbaa !2
  %lnjee = load i64, i64* %ls7Vm
  %lnjed = load i64*, i64** %Sp_Var
  %lnjef = getelementptr inbounds i64, i64* %lnjed, i32 0
  store i64 %lnjee, i64* %lnjef, !tbaa !2
  %lnjeh = load i64, i64* %ls7Vl
  %lnjeg = load i64*, i64** %Sp_Var
  %lnjei = getelementptr inbounds i64, i64* %lnjeg, i32 3
  store i64 %lnjeh, i64* %lnjei, !tbaa !2
  %lnjej = load i64*, i64** %Sp_Var
  %lnjek = getelementptr inbounds i64, i64* %lnjej, i32 -2
  %lnjel = ptrtoint i64* %lnjek to i64
  %lnjem = inttoptr i64 %lnjel to i64*
  store i64* %lnjem, i64** %Sp_Var
  %lnjen = load i64, i64* %R1_Var
  %lnjeo = and i64 %lnjen, 7
  %lnjep = icmp ne i64 %lnjeo, 0
  br i1 %lnjep, label %uiUj, label %ciQ7
ciQ7:
  %lnjer = load i64, i64* %R1_Var
  %lnjes = inttoptr i64 %lnjer to i64*
  %lnjet = load i64, i64* %lnjes, !tbaa !4
  %lnjeu = inttoptr i64 %lnjet to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjev = load i64*, i64** %Sp_Var
  %lnjew = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjeu( i64* %Base_Arg, i64* %lnjev, i64* %Hp_Arg, i64 %lnjew, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiUj:
  %lnjex = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjey = load i64*, i64** %Sp_Var
  %lnjez = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjex( i64* %Base_Arg, i64* %lnjey, i64* %Hp_Arg, i64 %lnjez, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQ6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQ6_info$def to i8*)
define internal ghccc void @ciQ6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 6, i32 30, i32 0}>
{
njeA:
  %ls7Vp = alloca i64, i32 1
  %ls7Vq = alloca i64, i32 1
  %ls7Vr = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciQ6
ciQ6:
  %lnjeC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQb_info$def to i64
  %lnjeB = load i64*, i64** %Sp_Var
  %lnjeD = getelementptr inbounds i64, i64* %lnjeB, i32 -2
  store i64 %lnjeC, i64* %lnjeD, !tbaa !2
  %lnjeG = load i64, i64* %R1_Var
  %lnjeH = add i64 %lnjeG, 7
  %lnjeI = inttoptr i64 %lnjeH to i64*
  %lnjeJ = load i64, i64* %lnjeI, !tbaa !4
  store i64 %lnjeJ, i64* %ls7Vp
  %lnjeM = load i64, i64* %R1_Var
  %lnjeN = add i64 %lnjeM, 15
  %lnjeO = inttoptr i64 %lnjeN to i64*
  %lnjeP = load i64, i64* %lnjeO, !tbaa !4
  store i64 %lnjeP, i64* %ls7Vq
  %lnjeS = load i64, i64* %R1_Var
  %lnjeT = add i64 %lnjeS, 23
  %lnjeU = inttoptr i64 %lnjeT to i64*
  %lnjeV = load i64, i64* %lnjeU, !tbaa !4
  store i64 %lnjeV, i64* %ls7Vr
  %lnjeW = load i64*, i64** %Sp_Var
  %lnjeX = getelementptr inbounds i64, i64* %lnjeW, i32 6
  %lnjeY = bitcast i64* %lnjeX to i64*
  %lnjeZ = load i64, i64* %lnjeY, !tbaa !2
  store i64 %lnjeZ, i64* %R1_Var
  %lnjf1 = load i64, i64* %ls7Vr
  %lnjf0 = load i64*, i64** %Sp_Var
  %lnjf2 = getelementptr inbounds i64, i64* %lnjf0, i32 -1
  store i64 %lnjf1, i64* %lnjf2, !tbaa !2
  %lnjf4 = load i64, i64* %ls7Vq
  %lnjf3 = load i64*, i64** %Sp_Var
  %lnjf5 = getelementptr inbounds i64, i64* %lnjf3, i32 0
  store i64 %lnjf4, i64* %lnjf5, !tbaa !2
  %lnjf7 = load i64, i64* %ls7Vp
  %lnjf6 = load i64*, i64** %Sp_Var
  %lnjf8 = getelementptr inbounds i64, i64* %lnjf6, i32 6
  store i64 %lnjf7, i64* %lnjf8, !tbaa !2
  %lnjf9 = load i64*, i64** %Sp_Var
  %lnjfa = getelementptr inbounds i64, i64* %lnjf9, i32 -2
  %lnjfb = ptrtoint i64* %lnjfa to i64
  %lnjfc = inttoptr i64 %lnjfb to i64*
  store i64* %lnjfc, i64** %Sp_Var
  %lnjfd = load i64, i64* %R1_Var
  %lnjfe = and i64 %lnjfd, 7
  %lnjff = icmp ne i64 %lnjfe, 0
  br i1 %lnjff, label %uiUk, label %ciQc
ciQc:
  %lnjfh = load i64, i64* %R1_Var
  %lnjfi = inttoptr i64 %lnjfh to i64*
  %lnjfj = load i64, i64* %lnjfi, !tbaa !4
  %lnjfk = inttoptr i64 %lnjfj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjfl = load i64*, i64** %Sp_Var
  %lnjfm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjfk( i64* %Base_Arg, i64* %lnjfl, i64* %Hp_Arg, i64 %lnjfm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiUk:
  %lnjfn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjfo = load i64*, i64** %Sp_Var
  %lnjfp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjfn( i64* %Base_Arg, i64* %lnjfo, i64* %Hp_Arg, i64 %lnjfp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciQb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciQb_info$def to i8*)
define internal ghccc void @ciQb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8, i32 30, i32 0}>
{
njfq:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Vt = alloca i64, i32 1
  %ls7Vu = alloca i64, i32 1
  %ls7Vv = alloca i64, i32 1
  %ls7Vf = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %lciQg = alloca i64, i32 1
  %lciRb = alloca i64, i32 1
  %lciS6 = alloca i64, i32 1
  %lciT1 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciQb
ciQb:
  %lnjfr = load i64*, i64** %Hp_Var
  %lnjfs = getelementptr inbounds i64, i64* %lnjfr, i32 42
  %lnjft = ptrtoint i64* %lnjfs to i64
  %lnjfu = inttoptr i64 %lnjft to i64*
  store i64* %lnjfu, i64** %Hp_Var
  %lnjfv = load i64*, i64** %Hp_Var
  %lnjfw = ptrtoint i64* %lnjfv to i64
  %lnjfx = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjfy = bitcast i64* %lnjfx to i64*
  %lnjfz = load i64, i64* %lnjfy, !tbaa !5
  %lnjfA = icmp ugt i64 %lnjfw, %lnjfz
  %lnjfB = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjfA, i1 0 )
  br i1 %lnjfB, label %ciUi, label %ciUh
ciUh:
  %lnjfE = load i64, i64* %R1_Var
  %lnjfF = add i64 %lnjfE, 7
  %lnjfG = inttoptr i64 %lnjfF to i64*
  %lnjfH = load i64, i64* %lnjfG, !tbaa !4
  store i64 %lnjfH, i64* %ls7Vt
  %lnjfK = load i64, i64* %R1_Var
  %lnjfL = add i64 %lnjfK, 15
  %lnjfM = inttoptr i64 %lnjfL to i64*
  %lnjfN = load i64, i64* %lnjfM, !tbaa !4
  store i64 %lnjfN, i64* %ls7Vu
  %lnjfQ = load i64, i64* %R1_Var
  %lnjfR = add i64 %lnjfQ, 23
  %lnjfS = inttoptr i64 %lnjfR to i64*
  %lnjfT = load i64, i64* %lnjfS, !tbaa !4
  store i64 %lnjfT, i64* %ls7Vv
  %lnjfV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Vw_info$def to i64
  %lnjfU = load i64*, i64** %Hp_Var
  %lnjfW = getelementptr inbounds i64, i64* %lnjfU, i32 -41
  store i64 %lnjfV, i64* %lnjfW, !tbaa !3
  %lnjfY = load i64, i64* %ls7Vv
  %lnjfX = load i64*, i64** %Hp_Var
  %lnjfZ = getelementptr inbounds i64, i64* %lnjfX, i32 -39
  store i64 %lnjfY, i64* %lnjfZ, !tbaa !3
  %lnjg0 = load i64*, i64** %Sp_Var
  %lnjg1 = getelementptr inbounds i64, i64* %lnjg0, i32 6
  %lnjg2 = bitcast i64* %lnjg1 to i64*
  %lnjg3 = load i64, i64* %lnjg2, !tbaa !2
  store i64 %lnjg3, i64* %ls7Vf
  %lnjg5 = load i64, i64* %ls7Vf
  %lnjg4 = load i64*, i64** %Hp_Var
  %lnjg6 = getelementptr inbounds i64, i64* %lnjg4, i32 -38
  store i64 %lnjg5, i64* %lnjg6, !tbaa !3
  %lnjg8 = load i64*, i64** %Sp_Var
  %lnjg9 = getelementptr inbounds i64, i64* %lnjg8, i32 1
  %lnjga = bitcast i64* %lnjg9 to i64*
  %lnjgb = load i64, i64* %lnjga, !tbaa !2
  %lnjg7 = load i64*, i64** %Hp_Var
  %lnjgc = getelementptr inbounds i64, i64* %lnjg7, i32 -37
  store i64 %lnjgb, i64* %lnjgc, !tbaa !3
  %lnjgd = load i64*, i64** %Sp_Var
  %lnjge = getelementptr inbounds i64, i64* %lnjgd, i32 5
  %lnjgf = bitcast i64* %lnjge to i64*
  %lnjgg = load i64, i64* %lnjgf, !tbaa !2
  store i64 %lnjgg, i64* %ls7Ve
  %lnjgi = load i64, i64* %ls7Ve
  %lnjgh = load i64*, i64** %Hp_Var
  %lnjgj = getelementptr inbounds i64, i64* %lnjgh, i32 -36
  store i64 %lnjgi, i64* %lnjgj, !tbaa !3
  %lnjgl = load i64*, i64** %Sp_Var
  %lnjgm = getelementptr inbounds i64, i64* %lnjgl, i32 3
  %lnjgn = bitcast i64* %lnjgm to i64*
  %lnjgo = load i64, i64* %lnjgn, !tbaa !2
  %lnjgk = load i64*, i64** %Hp_Var
  %lnjgp = getelementptr inbounds i64, i64* %lnjgk, i32 -35
  store i64 %lnjgo, i64* %lnjgp, !tbaa !3
  %lnjgr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7VL_info$def to i64
  %lnjgq = load i64*, i64** %Hp_Var
  %lnjgs = getelementptr inbounds i64, i64* %lnjgq, i32 -34
  store i64 %lnjgr, i64* %lnjgs, !tbaa !3
  %lnjgu = load i64, i64* %ls7Vu
  %lnjgt = load i64*, i64** %Hp_Var
  %lnjgv = getelementptr inbounds i64, i64* %lnjgt, i32 -32
  store i64 %lnjgu, i64* %lnjgv, !tbaa !3
  %lnjgx = load i64, i64* %ls7Vf
  %lnjgw = load i64*, i64** %Hp_Var
  %lnjgy = getelementptr inbounds i64, i64* %lnjgw, i32 -31
  store i64 %lnjgx, i64* %lnjgy, !tbaa !3
  %lnjgA = load i64*, i64** %Sp_Var
  %lnjgB = getelementptr inbounds i64, i64* %lnjgA, i32 2
  %lnjgC = bitcast i64* %lnjgB to i64*
  %lnjgD = load i64, i64* %lnjgC, !tbaa !2
  %lnjgz = load i64*, i64** %Hp_Var
  %lnjgE = getelementptr inbounds i64, i64* %lnjgz, i32 -30
  store i64 %lnjgD, i64* %lnjgE, !tbaa !3
  %lnjgG = load i64, i64* %ls7Ve
  %lnjgF = load i64*, i64** %Hp_Var
  %lnjgH = getelementptr inbounds i64, i64* %lnjgF, i32 -29
  store i64 %lnjgG, i64* %lnjgH, !tbaa !3
  %lnjgJ = load i64*, i64** %Sp_Var
  %lnjgK = getelementptr inbounds i64, i64* %lnjgJ, i32 4
  %lnjgL = bitcast i64* %lnjgK to i64*
  %lnjgM = load i64, i64* %lnjgL, !tbaa !2
  %lnjgI = load i64*, i64** %Hp_Var
  %lnjgN = getelementptr inbounds i64, i64* %lnjgI, i32 -28
  store i64 %lnjgM, i64* %lnjgN, !tbaa !3
  %lnjgP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7W0_info$def to i64
  %lnjgO = load i64*, i64** %Hp_Var
  %lnjgQ = getelementptr inbounds i64, i64* %lnjgO, i32 -27
  store i64 %lnjgP, i64* %lnjgQ, !tbaa !3
  %lnjgS = load i64, i64* %ls7Vt
  %lnjgR = load i64*, i64** %Hp_Var
  %lnjgT = getelementptr inbounds i64, i64* %lnjgR, i32 -25
  store i64 %lnjgS, i64* %lnjgT, !tbaa !3
  %lnjgV = load i64, i64* %ls7Vf
  %lnjgU = load i64*, i64** %Hp_Var
  %lnjgW = getelementptr inbounds i64, i64* %lnjgU, i32 -24
  store i64 %lnjgV, i64* %lnjgW, !tbaa !3
  %lnjgY = load i64*, i64** %Sp_Var
  %lnjgZ = getelementptr inbounds i64, i64* %lnjgY, i32 8
  %lnjh0 = bitcast i64* %lnjgZ to i64*
  %lnjh1 = load i64, i64* %lnjh0, !tbaa !2
  %lnjgX = load i64*, i64** %Hp_Var
  %lnjh2 = getelementptr inbounds i64, i64* %lnjgX, i32 -23
  store i64 %lnjh1, i64* %lnjh2, !tbaa !3
  %lnjh4 = load i64, i64* %ls7Ve
  %lnjh3 = load i64*, i64** %Hp_Var
  %lnjh5 = getelementptr inbounds i64, i64* %lnjh3, i32 -22
  store i64 %lnjh4, i64* %lnjh5, !tbaa !3
  %lnjh7 = load i64*, i64** %Sp_Var
  %lnjh8 = getelementptr inbounds i64, i64* %lnjh7, i32 7
  %lnjh9 = bitcast i64* %lnjh8 to i64*
  %lnjha = load i64, i64* %lnjh9, !tbaa !2
  %lnjh6 = load i64*, i64** %Hp_Var
  %lnjhb = getelementptr inbounds i64, i64* %lnjh6, i32 -21
  store i64 %lnjha, i64* %lnjhb, !tbaa !3
  %lnjhd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wf_info$def to i64
  %lnjhc = load i64*, i64** %Hp_Var
  %lnjhe = getelementptr inbounds i64, i64* %lnjhc, i32 -20
  store i64 %lnjhd, i64* %lnjhe, !tbaa !3
  %lnjhf = load i64*, i64** %Hp_Var
  %lnjhg = getelementptr inbounds i64, i64* %lnjhf, i32 -41
  %lnjhh = ptrtoint i64* %lnjhg to i64
  store i64 %lnjhh, i64* %lciQg
  %lnjhj = load i64, i64* %lciQg
  %lnjhi = load i64*, i64** %Hp_Var
  %lnjhk = getelementptr inbounds i64, i64* %lnjhi, i32 -18
  store i64 %lnjhj, i64* %lnjhk, !tbaa !3
  %lnjhl = load i64*, i64** %Hp_Var
  %lnjhm = getelementptr inbounds i64, i64* %lnjhl, i32 -34
  %lnjhn = ptrtoint i64* %lnjhm to i64
  store i64 %lnjhn, i64* %lciRb
  %lnjhp = load i64, i64* %lciRb
  %lnjho = load i64*, i64** %Hp_Var
  %lnjhq = getelementptr inbounds i64, i64* %lnjho, i32 -17
  store i64 %lnjhp, i64* %lnjhq, !tbaa !3
  %lnjhr = load i64*, i64** %Hp_Var
  %lnjhs = getelementptr inbounds i64, i64* %lnjhr, i32 -27
  %lnjht = ptrtoint i64* %lnjhs to i64
  store i64 %lnjht, i64* %lciS6
  %lnjhv = load i64, i64* %lciS6
  %lnjhu = load i64*, i64** %Hp_Var
  %lnjhw = getelementptr inbounds i64, i64* %lnjhu, i32 -16
  store i64 %lnjhv, i64* %lnjhw, !tbaa !3
  %lnjhy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wu_info$def to i64
  %lnjhx = load i64*, i64** %Hp_Var
  %lnjhz = getelementptr inbounds i64, i64* %lnjhx, i32 -15
  store i64 %lnjhy, i64* %lnjhz, !tbaa !3
  %lnjhB = load i64, i64* %lciQg
  %lnjhA = load i64*, i64** %Hp_Var
  %lnjhC = getelementptr inbounds i64, i64* %lnjhA, i32 -13
  store i64 %lnjhB, i64* %lnjhC, !tbaa !3
  %lnjhD = load i64*, i64** %Hp_Var
  %lnjhE = getelementptr inbounds i64, i64* %lnjhD, i32 -20
  %lnjhF = ptrtoint i64* %lnjhE to i64
  store i64 %lnjhF, i64* %lciT1
  %lnjhH = load i64, i64* %lciT1
  %lnjhG = load i64*, i64** %Hp_Var
  %lnjhI = getelementptr inbounds i64, i64* %lnjhG, i32 -12
  store i64 %lnjhH, i64* %lnjhI, !tbaa !3
  %lnjhK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Wt_info$def to i64
  %lnjhJ = load i64*, i64** %Hp_Var
  %lnjhL = getelementptr inbounds i64, i64* %lnjhJ, i32 -11
  store i64 %lnjhK, i64* %lnjhL, !tbaa !3
  %lnjhN = load i64, i64* %lciRb
  %lnjhM = load i64*, i64** %Hp_Var
  %lnjhO = getelementptr inbounds i64, i64* %lnjhM, i32 -9
  store i64 %lnjhN, i64* %lnjhO, !tbaa !3
  %lnjhQ = load i64, i64* %lciT1
  %lnjhP = load i64*, i64** %Hp_Var
  %lnjhR = getelementptr inbounds i64, i64* %lnjhP, i32 -8
  store i64 %lnjhQ, i64* %lnjhR, !tbaa !3
  %lnjhT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ws_info$def to i64
  %lnjhS = load i64*, i64** %Hp_Var
  %lnjhU = getelementptr inbounds i64, i64* %lnjhS, i32 -7
  store i64 %lnjhT, i64* %lnjhU, !tbaa !3
  %lnjhW = load i64, i64* %lciS6
  %lnjhV = load i64*, i64** %Hp_Var
  %lnjhX = getelementptr inbounds i64, i64* %lnjhV, i32 -5
  store i64 %lnjhW, i64* %lnjhX, !tbaa !3
  %lnjhZ = load i64, i64* %lciT1
  %lnjhY = load i64*, i64** %Hp_Var
  %lnji0 = getelementptr inbounds i64, i64* %lnjhY, i32 -4
  store i64 %lnjhZ, i64* %lnji0, !tbaa !3
  %lnji2 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnji1 = load i64*, i64** %Hp_Var
  %lnji3 = getelementptr inbounds i64, i64* %lnji1, i32 -3
  store i64 %lnji2, i64* %lnji3, !tbaa !3
  %lnji5 = load i64*, i64** %Hp_Var
  %lnji6 = getelementptr inbounds i64, i64* %lnji5, i32 -7
  %lnji7 = ptrtoint i64* %lnji6 to i64
  %lnji4 = load i64*, i64** %Hp_Var
  %lnji8 = getelementptr inbounds i64, i64* %lnji4, i32 -2
  store i64 %lnji7, i64* %lnji8, !tbaa !3
  %lnjia = load i64*, i64** %Hp_Var
  %lnjib = getelementptr inbounds i64, i64* %lnjia, i32 -11
  %lnjic = ptrtoint i64* %lnjib to i64
  %lnji9 = load i64*, i64** %Hp_Var
  %lnjid = getelementptr inbounds i64, i64* %lnji9, i32 -1
  store i64 %lnjic, i64* %lnjid, !tbaa !3
  %lnjif = load i64*, i64** %Hp_Var
  %lnjig = getelementptr inbounds i64, i64* %lnjif, i32 -15
  %lnjih = ptrtoint i64* %lnjig to i64
  %lnjie = load i64*, i64** %Hp_Var
  %lnjii = getelementptr inbounds i64, i64* %lnjie, i32 0
  store i64 %lnjih, i64* %lnjii, !tbaa !3
  %lnjik = load i64*, i64** %Hp_Var
  %lnjil = ptrtoint i64* %lnjik to i64
  %lnjim = add i64 %lnjil, -23
  store i64 %lnjim, i64* %R1_Var
  %lnjin = load i64*, i64** %Sp_Var
  %lnjio = getelementptr inbounds i64, i64* %lnjin, i32 9
  %lnjip = ptrtoint i64* %lnjio to i64
  %lnjiq = inttoptr i64 %lnjip to i64*
  store i64* %lnjiq, i64** %Sp_Var
  %lnjir = load i64*, i64** %Sp_Var
  %lnjis = getelementptr inbounds i64, i64* %lnjir, i32 0
  %lnjit = bitcast i64* %lnjis to i64*
  %lnjiu = load i64, i64* %lnjit, !tbaa !2
  %lnjiv = inttoptr i64 %lnjiu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjiw = load i64*, i64** %Sp_Var
  %lnjix = load i64*, i64** %Hp_Var
  %lnjiy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjiv( i64* %Base_Arg, i64* %lnjiw, i64* %lnjix, i64 %lnjiy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciUi:
  %lnjiz = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 336, i64* %lnjiz, !tbaa !5
  %lnjiA = load i64, i64* %R1_Var
  store i64 %lnjiA, i64* %R1_Var
  %lnjiB = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjiC = load i64*, i64** %Sp_Var
  %lnjiD = load i64*, i64** %Hp_Var
  %lnjiE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjiB( i64* %Base_Arg, i64* %lnjiC, i64* %lnjiD, i64 %lnjiE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwtracepixel_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to i8*)
define ghccc void @Main_zdwtracepixel_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to i64)),i64 0), i64 7, i64 30064771072, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to i64)) to i32),i32 0)}>
{
njiF:
  %ls7Vg = alloca i64, i32 1
  %ls7Vf = alloca i64, i32 1
  %ls7Ve = alloca i64, i32 1
  %ls7Vd = alloca i64, i32 1
  %ls7Vc = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %lciPX = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %ciUv
ciUv:
  store i64 %R6_Arg, i64* %ls7Vg
  store i64 %R5_Arg, i64* %ls7Vf
  %lnjiG = load i64, i64* %R4_Var
  store i64 %lnjiG, i64* %ls7Ve
  %lnjiH = load i64, i64* %R3_Var
  store i64 %lnjiH, i64* %ls7Vd
  %lnjiI = load i64, i64* %R2_Var
  store i64 %lnjiI, i64* %ls7Vc
  %lnjiJ = load i64*, i64** %Sp_Var
  %lnjiK = getelementptr inbounds i64, i64* %lnjiJ, i32 -3
  %lnjiL = ptrtoint i64* %lnjiK to i64
  %lnjiM = icmp ult i64 %lnjiL, %SpLim_Arg
  %lnjiN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjiM, i1 0 )
  br i1 %lnjiN, label %ciUw, label %ciUx
ciUx:
  %lnjiO = load i64*, i64** %Hp_Var
  %lnjiP = getelementptr inbounds i64, i64* %lnjiO, i32 7
  %lnjiQ = ptrtoint i64* %lnjiP to i64
  %lnjiR = inttoptr i64 %lnjiQ to i64*
  store i64* %lnjiR, i64** %Hp_Var
  %lnjiS = load i64*, i64** %Hp_Var
  %lnjiT = ptrtoint i64* %lnjiS to i64
  %lnjiU = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjiV = bitcast i64* %lnjiU to i64*
  %lnjiW = load i64, i64* %lnjiV, !tbaa !5
  %lnjiX = icmp ugt i64 %lnjiT, %lnjiW
  %lnjiY = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjiX, i1 0 )
  br i1 %lnjiY, label %ciUz, label %ciUy
ciUy:
  %lnjj0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Vj_info$def to i64
  %lnjiZ = load i64*, i64** %Hp_Var
  %lnjj1 = getelementptr inbounds i64, i64* %lnjiZ, i32 -6
  store i64 %lnjj0, i64* %lnjj1, !tbaa !3
  %lnjj3 = load i64, i64* %ls7Vf
  %lnjj2 = load i64*, i64** %Hp_Var
  %lnjj4 = getelementptr inbounds i64, i64* %lnjj2, i32 -4
  store i64 %lnjj3, i64* %lnjj4, !tbaa !3
  %lnjj6 = load i64, i64* %ls7Ve
  %lnjj5 = load i64*, i64** %Hp_Var
  %lnjj7 = getelementptr inbounds i64, i64* %lnjj5, i32 -3
  store i64 %lnjj6, i64* %lnjj7, !tbaa !3
  %lnjj9 = load i64*, i64** %Sp_Var
  %lnjja = getelementptr inbounds i64, i64* %lnjj9, i32 1
  %lnjjb = bitcast i64* %lnjja to i64*
  %lnjjc = load i64, i64* %lnjjb, !tbaa !2
  %lnjj8 = load i64*, i64** %Hp_Var
  %lnjjd = getelementptr inbounds i64, i64* %lnjj8, i32 -2
  store i64 %lnjjc, i64* %lnjjd, !tbaa !3
  %lnjjf = load i64*, i64** %Sp_Var
  %lnjjg = getelementptr inbounds i64, i64* %lnjjf, i32 0
  %lnjjh = bitcast i64* %lnjjg to i64*
  %lnjji = load i64, i64* %lnjjh, !tbaa !2
  %lnjje = load i64*, i64** %Hp_Var
  %lnjjj = getelementptr inbounds i64, i64* %lnjje, i32 -1
  store i64 %lnjji, i64* %lnjjj, !tbaa !3
  %lnjjl = load i64, i64* %ls7Vg
  %lnjjk = load i64*, i64** %Hp_Var
  %lnjjm = getelementptr inbounds i64, i64* %lnjjk, i32 0
  store i64 %lnjjl, i64* %lnjjm, !tbaa !3
  %lnjjo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUm_info$def to i64
  %lnjjn = load i64*, i64** %Sp_Var
  %lnjjp = getelementptr inbounds i64, i64* %lnjjn, i32 -1
  store i64 %lnjjo, i64* %lnjjp, !tbaa !2
  %lnjjq = load i64*, i64** %Hp_Var
  %lnjjr = getelementptr inbounds i64, i64* %lnjjq, i32 -6
  %lnjjs = ptrtoint i64* %lnjjr to i64
  store i64 %lnjjs, i64* %lciPX
  %lnjjt = load i64, i64* %lciPX
  store i64 %lnjjt, i64* %R4_Var
  %lnjju = ptrtoint %Main_lookfrom_closure_struct* @Main_lookfrom_closure$def to i64
  %lnjjv = add i64 %lnjju, 1
  store i64 %lnjjv, i64* %R3_Var
  %lnjjw = load i64, i64* %ls7Vc
  store i64 %lnjjw, i64* %R2_Var
  %lnjjy = load i64, i64* %ls7Vd
  %lnjjx = load i64*, i64** %Sp_Var
  %lnjjz = getelementptr inbounds i64, i64* %lnjjx, i32 0
  store i64 %lnjjy, i64* %lnjjz, !tbaa !2
  %lnjjB = load i64, i64* %lciPX
  %lnjjA = load i64*, i64** %Sp_Var
  %lnjjC = getelementptr inbounds i64, i64* %lnjjA, i32 1
  store i64 %lnjjB, i64* %lnjjC, !tbaa !2
  %lnjjD = load i64*, i64** %Sp_Var
  %lnjjE = getelementptr inbounds i64, i64* %lnjjD, i32 -1
  %lnjjF = ptrtoint i64* %lnjjE to i64
  %lnjjG = inttoptr i64 %lnjjF to i64*
  store i64* %lnjjG, i64** %Sp_Var
  %lnjjH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtrace_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjjI = load i64*, i64** %Sp_Var
  %lnjjJ = load i64*, i64** %Hp_Var
  %lnjjK = load i64, i64* %R1_Var
  %lnjjL = load i64, i64* %R2_Var
  %lnjjM = load i64, i64* %R3_Var
  %lnjjN = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjjH( i64* %Base_Arg, i64* %lnjjI, i64* %lnjjJ, i64 %lnjjK, i64 %lnjjL, i64 %lnjjM, i64 %lnjjN, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciUz:
  %lnjjO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lnjjO, !tbaa !5
  br label %ciUw
ciUw:
  %lnjjP = ptrtoint %Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64
  store i64 %lnjjP, i64* %R1_Var
  %lnjjR = load i64, i64* %ls7Vc
  %lnjjQ = load i64*, i64** %Sp_Var
  %lnjjS = getelementptr inbounds i64, i64* %lnjjQ, i32 -5
  store i64 %lnjjR, i64* %lnjjS, !tbaa !2
  %lnjjU = load i64, i64* %ls7Vd
  %lnjjT = load i64*, i64** %Sp_Var
  %lnjjV = getelementptr inbounds i64, i64* %lnjjT, i32 -4
  store i64 %lnjjU, i64* %lnjjV, !tbaa !2
  %lnjjX = load i64, i64* %ls7Ve
  %lnjjW = load i64*, i64** %Sp_Var
  %lnjjY = getelementptr inbounds i64, i64* %lnjjW, i32 -3
  store i64 %lnjjX, i64* %lnjjY, !tbaa !2
  %lnjk0 = load i64, i64* %ls7Vf
  %lnjjZ = load i64*, i64** %Sp_Var
  %lnjk1 = getelementptr inbounds i64, i64* %lnjjZ, i32 -2
  store i64 %lnjk0, i64* %lnjk1, !tbaa !2
  %lnjk3 = load i64, i64* %ls7Vg
  %lnjk2 = load i64*, i64** %Sp_Var
  %lnjk4 = getelementptr inbounds i64, i64* %lnjk2, i32 -1
  store i64 %lnjk3, i64* %lnjk4, !tbaa !2
  %lnjk5 = load i64*, i64** %Sp_Var
  %lnjk6 = getelementptr inbounds i64, i64* %lnjk5, i32 -5
  %lnjk7 = ptrtoint i64* %lnjk6 to i64
  %lnjk8 = inttoptr i64 %lnjk7 to i64*
  store i64* %lnjk8, i64** %Sp_Var
  %lnjk9 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjka = bitcast i64* %lnjk9 to i64*
  %lnjkb = load i64, i64* %lnjka, !tbaa !5
  %lnjkc = inttoptr i64 %lnjkb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjkd = load i64*, i64** %Sp_Var
  %lnjke = load i64*, i64** %Hp_Var
  %lnjkf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjkc( i64* %Base_Arg, i64* %lnjkd, i64* %lnjke, i64 %lnjkf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciUm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUm_info$def to i8*)
define internal ghccc void @ciUm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 2, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUm_info$def to i64)) to i32),i32 0)}>
{
njkg:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciUm
ciUm:
  %lnjki = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUo_info$def to i64
  %lnjkh = load i64*, i64** %Sp_Var
  %lnjkj = getelementptr inbounds i64, i64* %lnjkh, i32 -2
  store i64 %lnjki, i64* %lnjkj, !tbaa !2
  %lnjkk = load i64, i64* %R1_Var
  store i64 %lnjkk, i64* %R1_Var
  %lnjkl = load i64*, i64** %Sp_Var
  %lnjkm = getelementptr inbounds i64, i64* %lnjkl, i32 -1
  store i64 %R3_Arg, i64* %lnjkm, !tbaa !2
  %lnjkn = load i64*, i64** %Sp_Var
  %lnjko = getelementptr inbounds i64, i64* %lnjkn, i32 0
  store i64 %R2_Arg, i64* %lnjko, !tbaa !2
  %lnjkp = load i64*, i64** %Sp_Var
  %lnjkq = getelementptr inbounds i64, i64* %lnjkp, i32 -2
  %lnjkr = ptrtoint i64* %lnjkq to i64
  %lnjks = inttoptr i64 %lnjkr to i64*
  store i64* %lnjks, i64** %Sp_Var
  %lnjkt = load i64, i64* %R1_Var
  %lnjku = and i64 %lnjkt, 7
  %lnjkv = icmp ne i64 %lnjku, 0
  br i1 %lnjkv, label %uiUN, label %ciUp
ciUp:
  %lnjkx = load i64, i64* %R1_Var
  %lnjky = inttoptr i64 %lnjkx to i64*
  %lnjkz = load i64, i64* %lnjky, !tbaa !4
  %lnjkA = inttoptr i64 %lnjkz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjkB = load i64*, i64** %Sp_Var
  %lnjkC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjkA( i64* %Base_Arg, i64* %lnjkB, i64* %Hp_Arg, i64 %lnjkC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiUN:
  %lnjkD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjkE = load i64*, i64** %Sp_Var
  %lnjkF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjkD( i64* %Base_Arg, i64* %lnjkE, i64* %Hp_Arg, i64 %lnjkF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciUo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUo_info$def to i8*)
define internal ghccc void @ciUo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUo_info$def to i64)) to i32),i32 0)}>
{
njkG:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Wy = alloca i64, i32 1
  br label %ciUo
ciUo:
  %lnjkH = load i64, i64* %R1_Var
  %lnjkI = and i64 %lnjkH, 7
  switch i64 %lnjkI, label %ciUs [i64 1, label %ciUs
i64 2, label %ciUt]
ciUs:
  %lnjkJ = ptrtoint %Main_background1_closure_struct* @Main_background1_closure$def to i64
  %lnjkK = add i64 %lnjkJ, 1
  store i64 %lnjkK, i64* %R3_Var
  %lnjkL = ptrtoint %Main_background2_closure_struct* @Main_background2_closure$def to i64
  %lnjkM = add i64 %lnjkL, 1
  store i64 %lnjkM, i64* %R2_Var
  %lnjkN = ptrtoint %Main_background3_closure_struct* @Main_background3_closure$def to i64
  %lnjkO = add i64 %lnjkN, 1
  store i64 %lnjkO, i64* %R1_Var
  %lnjkP = load i64*, i64** %Sp_Var
  %lnjkQ = getelementptr inbounds i64, i64* %lnjkP, i32 5
  %lnjkR = ptrtoint i64* %lnjkQ to i64
  %lnjkS = inttoptr i64 %lnjkR to i64*
  store i64* %lnjkS, i64** %Sp_Var
  %lnjkT = load i64*, i64** %Sp_Var
  %lnjkU = getelementptr inbounds i64, i64* %lnjkT, i32 0
  %lnjkV = bitcast i64* %lnjkU to i64*
  %lnjkW = load i64, i64* %lnjkV, !tbaa !2
  %lnjkX = inttoptr i64 %lnjkW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjkY = load i64*, i64** %Sp_Var
  %lnjkZ = load i64, i64* %R1_Var
  %lnjl0 = load i64, i64* %R2_Var
  %lnjl1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjkX( i64* %Base_Arg, i64* %lnjkY, i64* %Hp_Arg, i64 %lnjkZ, i64 %lnjl0, i64 %lnjl1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ciUt:
  %lnjl2 = load i64*, i64** %Sp_Var
  %lnjl3 = getelementptr inbounds i64, i64* %lnjl2, i32 1
  %lnjl4 = bitcast i64* %lnjl3 to i64*
  %lnjl5 = load i64, i64* %lnjl4, !tbaa !2
  store i64 %lnjl5, i64* %ls7Wy
  %lnjl7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUG_info$def to i64
  %lnjl6 = load i64*, i64** %Sp_Var
  %lnjl8 = getelementptr inbounds i64, i64* %lnjl6, i32 1
  store i64 %lnjl7, i64* %lnjl8, !tbaa !2
  %lnjl9 = load i64, i64* %ls7Wy
  store i64 %lnjl9, i64* %R1_Var
  %lnjla = load i64*, i64** %Sp_Var
  %lnjlb = getelementptr inbounds i64, i64* %lnjla, i32 1
  %lnjlc = ptrtoint i64* %lnjlb to i64
  %lnjld = inttoptr i64 %lnjlc to i64*
  store i64* %lnjld, i64** %Sp_Var
  %lnjle = load i64, i64* %R1_Var
  %lnjlf = and i64 %lnjle, 7
  %lnjlg = icmp ne i64 %lnjlf, 0
  br i1 %lnjlg, label %uiUO, label %ciUI
ciUI:
  %lnjli = load i64, i64* %R1_Var
  %lnjlj = inttoptr i64 %lnjli to i64*
  %lnjlk = load i64, i64* %lnjlj, !tbaa !4
  %lnjll = inttoptr i64 %lnjlk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjlm = load i64*, i64** %Sp_Var
  %lnjln = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjll( i64* %Base_Arg, i64* %lnjlm, i64* %Hp_Arg, i64 %lnjln, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uiUO:
  %lnjlo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjlp = load i64*, i64** %Sp_Var
  %lnjlq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjlo( i64* %Base_Arg, i64* %lnjlp, i64* %Hp_Arg, i64 %lnjlq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ciUG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUG_info$def to i8*)
define internal ghccc void @ciUG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 3, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ciUG_info$def to i64)) to i32),i32 0)}>
{
njlr:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ls7Wx = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %ciUG
ciUG:
  %lnjls = ptrtoint %Main_lookfrom_closure_struct* @Main_lookfrom_closure$def to i64
  %lnjlt = add i64 %lnjls, 1
  store i64 %lnjlt, i64* %R6_Var
  %lnjlu = add i64 %R1_Arg, 23
  %lnjlv = inttoptr i64 %lnjlu to i64*
  %lnjlw = load i64, i64* %lnjlv, !tbaa !4
  store i64 %lnjlw, i64* %R5_Var
  %lnjlx = add i64 %R1_Arg, 15
  %lnjly = inttoptr i64 %lnjlx to i64*
  %lnjlz = load i64, i64* %lnjly, !tbaa !4
  store i64 %lnjlz, i64* %R4_Var
  %lnjlA = add i64 %R1_Arg, 7
  %lnjlB = inttoptr i64 %lnjlA to i64*
  %lnjlC = load i64, i64* %lnjlB, !tbaa !4
  store i64 %lnjlC, i64* %R3_Var
  %lnjlD = load i64*, i64** %Sp_Var
  %lnjlE = getelementptr inbounds i64, i64* %lnjlD, i32 2
  %lnjlF = bitcast i64* %lnjlE to i64*
  %lnjlG = load i64, i64* %lnjlF, !tbaa !2
  store i64 %lnjlG, i64* %R2_Var
  %lnjlH = load i64*, i64** %Sp_Var
  %lnjlI = getelementptr inbounds i64, i64* %lnjlH, i32 1
  %lnjlJ = bitcast i64* %lnjlI to i64*
  %lnjlK = load i64, i64* %lnjlJ, !tbaa !2
  store i64 %lnjlK, i64* %ls7Wx
  %lnjlM = load i64*, i64** %Sp_Var
  %lnjlN = getelementptr inbounds i64, i64* %lnjlM, i32 3
  %lnjlO = bitcast i64* %lnjlN to i64*
  %lnjlP = load i64, i64* %lnjlO, !tbaa !2
  %lnjlL = load i64*, i64** %Sp_Var
  %lnjlQ = getelementptr inbounds i64, i64* %lnjlL, i32 1
  store i64 %lnjlP, i64* %lnjlQ, !tbaa !2
  %lnjlS = load i64, i64* %ls7Wx
  %lnjlR = load i64*, i64** %Sp_Var
  %lnjlT = getelementptr inbounds i64, i64* %lnjlR, i32 2
  store i64 %lnjlS, i64* %lnjlT, !tbaa !2
  %lnjlV = ptrtoint %Main_bodysurf1_closure_struct* @Main_bodysurf1_closure$def to i64
  %lnjlW = add i64 %lnjlV, 1
  %lnjlU = load i64*, i64** %Sp_Var
  %lnjlX = getelementptr inbounds i64, i64* %lnjlU, i32 3
  store i64 %lnjlW, i64* %lnjlX, !tbaa !2
  %lnjlY = load i64*, i64** %Sp_Var
  %lnjlZ = getelementptr inbounds i64, i64* %lnjlY, i32 1
  %lnjm0 = ptrtoint i64* %lnjlZ to i64
  %lnjm1 = inttoptr i64 %lnjm0 to i64*
  store i64* %lnjm1, i64** %Sp_Var
  %lnjm2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwshade_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjm3 = load i64*, i64** %Sp_Var
  %lnjm4 = load i64, i64* %R2_Var
  %lnjm5 = load i64, i64* %R3_Var
  %lnjm6 = load i64, i64* %R4_Var
  %lnjm7 = load i64, i64* %R5_Var
  %lnjm8 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjm2( i64* %Base_Arg, i64* %lnjm3, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjm4, i64 %lnjm5, i64 %lnjm6, i64 %lnjm7, i64 %lnjm8, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_tracepixel_closure_struct = type <{i64, i64}>
@Main_tracepixel_closure$def = internal global %Main_tracepixel_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_info$def to i64), i64 0}>
@Main_tracepixel_closure = alias i8, bitcast (%Main_tracepixel_closure_struct* @Main_tracepixel_closure$def to i8*)
@Main_tracepixel_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_slow$def to i8*)
define ghccc void @Main_tracepixel_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
njmn:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjma
cjma:
  %lnjmo = load i64*, i64** %Sp_Var
  %lnjmp = getelementptr inbounds i64, i64* %lnjmo, i32 4
  %lnjmq = bitcast i64* %lnjmp to i64*
  %lnjmr = load i64, i64* %lnjmq, !tbaa !2
  store i64 %lnjmr, i64* %R6_Var
  %lnjms = load i64*, i64** %Sp_Var
  %lnjmt = getelementptr inbounds i64, i64* %lnjms, i32 3
  %lnjmu = bitcast i64* %lnjmt to i64*
  %lnjmv = load i64, i64* %lnjmu, !tbaa !2
  store i64 %lnjmv, i64* %R5_Var
  %lnjmw = load i64*, i64** %Sp_Var
  %lnjmx = getelementptr inbounds i64, i64* %lnjmw, i32 2
  %lnjmy = bitcast i64* %lnjmx to i64*
  %lnjmz = load i64, i64* %lnjmy, !tbaa !2
  store i64 %lnjmz, i64* %R4_Var
  %lnjmA = load i64*, i64** %Sp_Var
  %lnjmB = getelementptr inbounds i64, i64* %lnjmA, i32 1
  %lnjmC = bitcast i64* %lnjmB to i64*
  %lnjmD = load i64, i64* %lnjmC, !tbaa !2
  store i64 %lnjmD, i64* %R3_Var
  %lnjmE = load i64*, i64** %Sp_Var
  %lnjmF = getelementptr inbounds i64, i64* %lnjmE, i32 0
  %lnjmG = bitcast i64* %lnjmF to i64*
  %lnjmH = load i64, i64* %lnjmG, !tbaa !2
  store i64 %lnjmH, i64* %R2_Var
  %lnjmI = load i64, i64* %R1_Var
  store i64 %lnjmI, i64* %R1_Var
  %lnjmJ = load i64*, i64** %Sp_Var
  %lnjmK = getelementptr inbounds i64, i64* %lnjmJ, i32 5
  %lnjmL = ptrtoint i64* %lnjmK to i64
  %lnjmM = inttoptr i64 %lnjmL to i64*
  store i64* %lnjmM, i64** %Sp_Var
  %lnjmN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjmO = load i64*, i64** %Sp_Var
  %lnjmP = load i64, i64* %R1_Var
  %lnjmQ = load i64, i64* %R2_Var
  %lnjmR = load i64, i64* %R3_Var
  %lnjmS = load i64, i64* %R4_Var
  %lnjmT = load i64, i64* %R5_Var
  %lnjmU = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjmN( i64* %Base_Arg, i64* %lnjmO, i64* %Hp_Arg, i64 %lnjmP, i64 %lnjmQ, i64 %lnjmR, i64 %lnjmS, i64 %lnjmT, i64 %lnjmU, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_tracepixel_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_info$def to i8*)
define ghccc void @Main_tracepixel_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_info$def to i64)),i64 0), i64 7, i64 30064771072, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_tracepixel_info$def to i64)) to i32),i32 0)}>
{
njmV:
  %ls7WK = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjmh
cjmh:
  %lnjmW = load i64*, i64** %Sp_Var
  %lnjmX = getelementptr inbounds i64, i64* %lnjmW, i32 -1
  %lnjmY = ptrtoint i64* %lnjmX to i64
  %lnjmZ = icmp ult i64 %lnjmY, %SpLim_Arg
  %lnjn0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjmZ, i1 0 )
  br i1 %lnjn0, label %cjmi, label %cjmj
cjmj:
  %lnjn1 = load i64*, i64** %Sp_Var
  %lnjn2 = getelementptr inbounds i64, i64* %lnjn1, i32 1
  %lnjn3 = bitcast i64* %lnjn2 to i64*
  %lnjn4 = load i64, i64* %lnjn3, !tbaa !2
  store i64 %lnjn4, i64* %ls7WK
  %lnjn6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjme_info$def to i64
  %lnjn5 = load i64*, i64** %Sp_Var
  %lnjn7 = getelementptr inbounds i64, i64* %lnjn5, i32 1
  store i64 %lnjn6, i64* %lnjn7, !tbaa !2
  %lnjn8 = load i64, i64* %R6_Var
  store i64 %lnjn8, i64* %R6_Var
  %lnjn9 = load i64, i64* %R5_Var
  store i64 %lnjn9, i64* %R5_Var
  %lnjna = load i64, i64* %R4_Var
  store i64 %lnjna, i64* %R4_Var
  %lnjnb = load i64, i64* %R3_Var
  store i64 %lnjnb, i64* %R3_Var
  %lnjnc = load i64, i64* %R2_Var
  store i64 %lnjnc, i64* %R2_Var
  %lnjne = load i64*, i64** %Sp_Var
  %lnjnf = getelementptr inbounds i64, i64* %lnjne, i32 0
  %lnjng = bitcast i64* %lnjnf to i64*
  %lnjnh = load i64, i64* %lnjng, !tbaa !2
  %lnjnd = load i64*, i64** %Sp_Var
  %lnjni = getelementptr inbounds i64, i64* %lnjnd, i32 -1
  store i64 %lnjnh, i64* %lnjni, !tbaa !2
  %lnjnk = load i64, i64* %ls7WK
  %lnjnj = load i64*, i64** %Sp_Var
  %lnjnl = getelementptr inbounds i64, i64* %lnjnj, i32 0
  store i64 %lnjnk, i64* %lnjnl, !tbaa !2
  %lnjnm = load i64*, i64** %Sp_Var
  %lnjnn = getelementptr inbounds i64, i64* %lnjnm, i32 -1
  %lnjno = ptrtoint i64* %lnjnn to i64
  %lnjnp = inttoptr i64 %lnjno to i64*
  store i64* %lnjnp, i64** %Sp_Var
  %lnjnq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjnr = load i64*, i64** %Sp_Var
  %lnjns = load i64, i64* %R1_Var
  %lnjnt = load i64, i64* %R2_Var
  %lnjnu = load i64, i64* %R3_Var
  %lnjnv = load i64, i64* %R4_Var
  %lnjnw = load i64, i64* %R5_Var
  %lnjnx = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjnq( i64* %Base_Arg, i64* %lnjnr, i64* %Hp_Arg, i64 %lnjns, i64 %lnjnt, i64 %lnjnu, i64 %lnjnv, i64 %lnjnw, i64 %lnjnx, i64 %SpLim_Arg ) nounwind
  ret void
cjmi:
  %lnjny = ptrtoint %Main_tracepixel_closure_struct* @Main_tracepixel_closure$def to i64
  store i64 %lnjny, i64* %R1_Var
  %lnjnA = load i64, i64* %R2_Var
  %lnjnz = load i64*, i64** %Sp_Var
  %lnjnB = getelementptr inbounds i64, i64* %lnjnz, i32 -5
  store i64 %lnjnA, i64* %lnjnB, !tbaa !2
  %lnjnD = load i64, i64* %R3_Var
  %lnjnC = load i64*, i64** %Sp_Var
  %lnjnE = getelementptr inbounds i64, i64* %lnjnC, i32 -4
  store i64 %lnjnD, i64* %lnjnE, !tbaa !2
  %lnjnG = load i64, i64* %R4_Var
  %lnjnF = load i64*, i64** %Sp_Var
  %lnjnH = getelementptr inbounds i64, i64* %lnjnF, i32 -3
  store i64 %lnjnG, i64* %lnjnH, !tbaa !2
  %lnjnJ = load i64, i64* %R5_Var
  %lnjnI = load i64*, i64** %Sp_Var
  %lnjnK = getelementptr inbounds i64, i64* %lnjnI, i32 -2
  store i64 %lnjnJ, i64* %lnjnK, !tbaa !2
  %lnjnM = load i64, i64* %R6_Var
  %lnjnL = load i64*, i64** %Sp_Var
  %lnjnN = getelementptr inbounds i64, i64* %lnjnL, i32 -1
  store i64 %lnjnM, i64* %lnjnN, !tbaa !2
  %lnjnO = load i64*, i64** %Sp_Var
  %lnjnP = getelementptr inbounds i64, i64* %lnjnO, i32 -5
  %lnjnQ = ptrtoint i64* %lnjnP to i64
  %lnjnR = inttoptr i64 %lnjnQ to i64*
  store i64* %lnjnR, i64** %Sp_Var
  %lnjnS = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjnT = bitcast i64* %lnjnS to i64*
  %lnjnU = load i64, i64* %lnjnT, !tbaa !5
  %lnjnV = inttoptr i64 %lnjnU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjnW = load i64*, i64** %Sp_Var
  %lnjnX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjnV( i64* %Base_Arg, i64* %lnjnW, i64* %Hp_Arg, i64 %lnjnX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjme_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjme_info$def to i8*)
define internal ghccc void @cjme_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njnY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjme
cjme:
  %lnjnZ = load i64*, i64** %Hp_Var
  %lnjo0 = getelementptr inbounds i64, i64* %lnjnZ, i32 4
  %lnjo1 = ptrtoint i64* %lnjo0 to i64
  %lnjo2 = inttoptr i64 %lnjo1 to i64*
  store i64* %lnjo2, i64** %Hp_Var
  %lnjo3 = load i64*, i64** %Hp_Var
  %lnjo4 = ptrtoint i64* %lnjo3 to i64
  %lnjo5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjo6 = bitcast i64* %lnjo5 to i64*
  %lnjo7 = load i64, i64* %lnjo6, !tbaa !5
  %lnjo8 = icmp ugt i64 %lnjo4, %lnjo7
  %lnjo9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjo8, i1 0 )
  br i1 %lnjo9, label %cjmm, label %cjml
cjml:
  %lnjob = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnjoa = load i64*, i64** %Hp_Var
  %lnjoc = getelementptr inbounds i64, i64* %lnjoa, i32 -3
  store i64 %lnjob, i64* %lnjoc, !tbaa !3
  %lnjoe = load i64, i64* %R1_Var
  %lnjod = load i64*, i64** %Hp_Var
  %lnjof = getelementptr inbounds i64, i64* %lnjod, i32 -2
  store i64 %lnjoe, i64* %lnjof, !tbaa !3
  %lnjoh = load i64, i64* %R2_Var
  %lnjog = load i64*, i64** %Hp_Var
  %lnjoi = getelementptr inbounds i64, i64* %lnjog, i32 -1
  store i64 %lnjoh, i64* %lnjoi, !tbaa !3
  %lnjok = load i64, i64* %R3_Var
  %lnjoj = load i64*, i64** %Hp_Var
  %lnjol = getelementptr inbounds i64, i64* %lnjoj, i32 0
  store i64 %lnjok, i64* %lnjol, !tbaa !3
  %lnjon = load i64*, i64** %Hp_Var
  %lnjoo = ptrtoint i64* %lnjon to i64
  %lnjop = add i64 %lnjoo, -23
  store i64 %lnjop, i64* %R1_Var
  %lnjoq = load i64*, i64** %Sp_Var
  %lnjor = getelementptr inbounds i64, i64* %lnjoq, i32 1
  %lnjos = ptrtoint i64* %lnjor to i64
  %lnjot = inttoptr i64 %lnjos to i64*
  store i64* %lnjot, i64** %Sp_Var
  %lnjou = load i64*, i64** %Sp_Var
  %lnjov = getelementptr inbounds i64, i64* %lnjou, i32 0
  %lnjow = bitcast i64* %lnjov to i64*
  %lnjox = load i64, i64* %lnjow, !tbaa !2
  %lnjoy = inttoptr i64 %lnjox to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjoz = load i64*, i64** %Sp_Var
  %lnjoA = load i64*, i64** %Hp_Var
  %lnjoB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjoy( i64* %Base_Arg, i64* %lnjoz, i64* %lnjoA, i64 %lnjoB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjmm:
  %lnjoC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnjoC, !tbaa !5
  %lnjoD = load i64, i64* %R3_Var
  store i64 %lnjoD, i64* %R3_Var
  %lnjoE = load i64, i64* %R2_Var
  store i64 %lnjoE, i64* %R2_Var
  %lnjoF = load i64, i64* %R1_Var
  store i64 %lnjoF, i64* %R1_Var
  %lnjoG = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjoH = load i64*, i64** %Sp_Var
  %lnjoI = load i64*, i64** %Hp_Var
  %lnjoJ = load i64, i64* %R1_Var
  %lnjoK = load i64, i64* %R2_Var
  %lnjoL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjoG( i64* %Base_Arg, i64* %lnjoH, i64* %lnjoI, i64 %lnjoJ, i64 %lnjoK, i64 %lnjoL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_zdwray_closure_struct = type <{i64, i64}>
@Main_zdwray_closure$def = internal global %Main_zdwray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwray_info$def to i64), i64 0}>
@Main_zdwray_closure = alias i8, bitcast (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i8*)
@s7WS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7WS_info$def to i8*)
define internal ghccc void @s7WS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967296, i32 17, i32 0}>
{
njqE:
  %ls7WS = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7WT = alloca double, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjp2
cjp2:
  %lnjqF = load i64, i64* %R1_Var
  store i64 %lnjqF, i64* %ls7WS
  %lnjqG = load i64*, i64** %Sp_Var
  %lnjqH = getelementptr inbounds i64, i64* %lnjqG, i32 -3
  %lnjqI = ptrtoint i64* %lnjqH to i64
  %lnjqJ = icmp ult i64 %lnjqI, %SpLim_Arg
  %lnjqK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjqJ, i1 0 )
  br i1 %lnjqK, label %cjp8, label %cjp9
cjp9:
  %lnjqL = load i64*, i64** %Hp_Var
  %lnjqM = getelementptr inbounds i64, i64* %lnjqL, i32 2
  %lnjqN = ptrtoint i64* %lnjqM to i64
  %lnjqO = inttoptr i64 %lnjqN to i64*
  store i64* %lnjqO, i64** %Hp_Var
  %lnjqP = load i64*, i64** %Hp_Var
  %lnjqQ = ptrtoint i64* %lnjqP to i64
  %lnjqR = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjqS = bitcast i64* %lnjqR to i64*
  %lnjqT = load i64, i64* %lnjqS, !tbaa !5
  %lnjqU = icmp ugt i64 %lnjqQ, %lnjqT
  %lnjqV = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjqU, i1 0 )
  br i1 %lnjqV, label %cjpb, label %cjpa
cjpa:
  %lnjqX = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjqW = load i64*, i64** %Sp_Var
  %lnjqY = getelementptr inbounds i64, i64* %lnjqW, i32 -2
  store i64 %lnjqX, i64* %lnjqY, !tbaa !2
  %lnjr0 = load i64, i64* %ls7WS
  %lnjqZ = load i64*, i64** %Sp_Var
  %lnjr1 = getelementptr inbounds i64, i64* %lnjqZ, i32 -1
  store i64 %lnjr0, i64* %lnjr1, !tbaa !2
  %lnjr2 = load i64, i64* %ls7WS
  %lnjr3 = add i64 %lnjr2, 16
  %lnjr4 = inttoptr i64 %lnjr3 to i64*
  %lnjr5 = load i64, i64* %lnjr4, !tbaa !1
  %lnjr6 = sitofp i64 %lnjr5 to double
  store double %lnjr6, double* %ls7WT
  %lnjr8 = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnjr7 = load i64*, i64** %Hp_Var
  %lnjr9 = getelementptr inbounds i64, i64* %lnjr7, i32 -1
  store i64 %lnjr8, i64* %lnjr9, !tbaa !3
  %lnjrb = load double, double* %ls7WT
  %lnjra = load i64*, i64** %Hp_Var
  %lnjrc = getelementptr inbounds i64, i64* %lnjra, i32 0
  %lnjrd = bitcast i64* %lnjrc to double*
  store double %lnjrb, double* %lnjrd, !tbaa !3
  %lnjrf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjp5_info$def to i64
  %lnjre = load i64*, i64** %Sp_Var
  %lnjrg = getelementptr inbounds i64, i64* %lnjre, i32 -3
  store i64 %lnjrf, i64* %lnjrg, !tbaa !2
  %lnjri = load i64*, i64** %Hp_Var
  %lnjrj = ptrtoint i64* %lnjri to i64
  %lnjrk = add i64 %lnjrj, -7
  store i64 %lnjrk, i64* %R6_Var
  %lnjrl = ptrtoint %Main_fov_closure_struct* @Main_fov_closure$def to i64
  %lnjrm = add i64 %lnjrl, 1
  store i64 %lnjrm, i64* %R5_Var
  %lnjrn = ptrtoint %Main_vup_closure_struct* @Main_vup_closure$def to i64
  %lnjro = add i64 %lnjrn, 1
  store i64 %lnjro, i64* %R4_Var
  %lnjrp = ptrtoint %Main_lookat_closure_struct* @Main_lookat_closure$def to i64
  %lnjrq = add i64 %lnjrp, 1
  store i64 %lnjrq, i64* %R3_Var
  %lnjrr = ptrtoint %Main_lookfrom_closure_struct* @Main_lookfrom_closure$def to i64
  %lnjrs = add i64 %lnjrr, 1
  store i64 %lnjrs, i64* %R2_Var
  %lnjrt = load i64*, i64** %Sp_Var
  %lnjru = getelementptr inbounds i64, i64* %lnjrt, i32 -3
  %lnjrv = ptrtoint i64* %lnjru to i64
  %lnjrw = inttoptr i64 %lnjrv to i64*
  store i64* %lnjrw, i64** %Sp_Var
  %lnjrx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwcamparams_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjry = load i64*, i64** %Sp_Var
  %lnjrz = load i64*, i64** %Hp_Var
  %lnjrA = load i64, i64* %R1_Var
  %lnjrB = load i64, i64* %R2_Var
  %lnjrC = load i64, i64* %R3_Var
  %lnjrD = load i64, i64* %R4_Var
  %lnjrE = load i64, i64* %R5_Var
  %lnjrF = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjrx( i64* %Base_Arg, i64* %lnjry, i64* %lnjrz, i64 %lnjrA, i64 %lnjrB, i64 %lnjrC, i64 %lnjrD, i64 %lnjrE, i64 %lnjrF, i64 %SpLim_Arg ) nounwind
  ret void
cjpb:
  %lnjrG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnjrG, !tbaa !5
  br label %cjp8
cjp8:
  %lnjrH = load i64, i64* %ls7WS
  store i64 %lnjrH, i64* %R1_Var
  %lnjrI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjrJ = bitcast i64* %lnjrI to i64*
  %lnjrK = load i64, i64* %lnjrJ, !tbaa !5
  %lnjrL = inttoptr i64 %lnjrK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjrM = load i64*, i64** %Sp_Var
  %lnjrN = load i64*, i64** %Hp_Var
  %lnjrO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjrL( i64* %Base_Arg, i64* %lnjrM, i64* %lnjrN, i64 %lnjrO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjp5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjp5_info$def to i8*)
define internal ghccc void @cjp5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njrP:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjp5
cjp5:
  %lnjrQ = load i64*, i64** %Hp_Var
  %lnjrR = getelementptr inbounds i64, i64* %lnjrQ, i32 4
  %lnjrS = ptrtoint i64* %lnjrR to i64
  %lnjrT = inttoptr i64 %lnjrS to i64*
  store i64* %lnjrT, i64** %Hp_Var
  %lnjrU = load i64*, i64** %Hp_Var
  %lnjrV = ptrtoint i64* %lnjrU to i64
  %lnjrW = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjrX = bitcast i64* %lnjrW to i64*
  %lnjrY = load i64, i64* %lnjrX, !tbaa !5
  %lnjrZ = icmp ugt i64 %lnjrV, %lnjrY
  %lnjs0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjrZ, i1 0 )
  br i1 %lnjs0, label %cjpe, label %cjpd
cjpd:
  %lnjs2 = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnjs1 = load i64*, i64** %Hp_Var
  %lnjs3 = getelementptr inbounds i64, i64* %lnjs1, i32 -3
  store i64 %lnjs2, i64* %lnjs3, !tbaa !3
  %lnjs5 = load i64, i64* %R1_Var
  %lnjs4 = load i64*, i64** %Hp_Var
  %lnjs6 = getelementptr inbounds i64, i64* %lnjs4, i32 -2
  store i64 %lnjs5, i64* %lnjs6, !tbaa !3
  %lnjs8 = load i64, i64* %R2_Var
  %lnjs7 = load i64*, i64** %Hp_Var
  %lnjs9 = getelementptr inbounds i64, i64* %lnjs7, i32 -1
  store i64 %lnjs8, i64* %lnjs9, !tbaa !3
  %lnjsb = load i64, i64* %R3_Var
  %lnjsa = load i64*, i64** %Hp_Var
  %lnjsc = getelementptr inbounds i64, i64* %lnjsa, i32 0
  store i64 %lnjsb, i64* %lnjsc, !tbaa !3
  %lnjse = load i64*, i64** %Hp_Var
  %lnjsf = ptrtoint i64* %lnjse to i64
  %lnjsg = add i64 %lnjsf, -23
  store i64 %lnjsg, i64* %R1_Var
  %lnjsh = load i64*, i64** %Sp_Var
  %lnjsi = getelementptr inbounds i64, i64* %lnjsh, i32 1
  %lnjsj = ptrtoint i64* %lnjsi to i64
  %lnjsk = inttoptr i64 %lnjsj to i64*
  store i64* %lnjsk, i64** %Sp_Var
  %lnjsl = load i64*, i64** %Sp_Var
  %lnjsm = getelementptr inbounds i64, i64* %lnjsl, i32 0
  %lnjsn = bitcast i64* %lnjsm to i64*
  %lnjso = load i64, i64* %lnjsn, !tbaa !2
  %lnjsp = inttoptr i64 %lnjso to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjsq = load i64*, i64** %Sp_Var
  %lnjsr = load i64*, i64** %Hp_Var
  %lnjss = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjsp( i64* %Base_Arg, i64* %lnjsq, i64* %lnjsr, i64 %lnjss, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjpe:
  %lnjst = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnjst, !tbaa !5
  %lnjsu = load i64, i64* %R3_Var
  store i64 %lnjsu, i64* %R3_Var
  %lnjsv = load i64, i64* %R2_Var
  store i64 %lnjsv, i64* %R2_Var
  %lnjsw = load i64, i64* %R1_Var
  store i64 %lnjsw, i64* %R1_Var
  %lnjsx = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjsy = load i64*, i64** %Sp_Var
  %lnjsz = load i64*, i64** %Hp_Var
  %lnjsA = load i64, i64* %R1_Var
  %lnjsB = load i64, i64* %R2_Var
  %lnjsC = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjsx( i64* %Base_Arg, i64* %lnjsy, i64* %lnjsz, i64 %lnjsA, i64 %lnjsB, i64 %lnjsC, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Xg_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xg_info$def to i8*)
define internal ghccc void @s7Xg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8589934593, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xg_info$def to i64)) to i32),i32 0)}>
{
njsD:
  %ls7Xf = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjpw
cjpw:
  %lnjsE = load i64*, i64** %Sp_Var
  %lnjsF = getelementptr inbounds i64, i64* %lnjsE, i32 -2
  %lnjsG = ptrtoint i64* %lnjsF to i64
  %lnjsH = icmp ult i64 %lnjsG, %SpLim_Arg
  %lnjsI = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjsH, i1 0 )
  br i1 %lnjsI, label %cjpx, label %cjpy
cjpy:
  %lnjsK = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjsJ = load i64*, i64** %Sp_Var
  %lnjsL = getelementptr inbounds i64, i64* %lnjsJ, i32 -2
  store i64 %lnjsK, i64* %lnjsL, !tbaa !2
  %lnjsN = load i64, i64* %R1_Var
  %lnjsM = load i64*, i64** %Sp_Var
  %lnjsO = getelementptr inbounds i64, i64* %lnjsM, i32 -1
  store i64 %lnjsN, i64* %lnjsO, !tbaa !2
  %lnjsR = load i64, i64* %R1_Var
  %lnjsS = add i64 %lnjsR, 24
  %lnjsT = inttoptr i64 %lnjsS to i64*
  %lnjsU = load i64, i64* %lnjsT, !tbaa !4
  store i64 %lnjsU, i64* %ls7Xf
  %lnjsV = load i64, i64* %ls7Xf
  %lnjsY = load i64, i64* %R1_Var
  %lnjsZ = add i64 %lnjsY, 32
  %lnjt0 = inttoptr i64 %lnjsZ to i64*
  %lnjt1 = load i64, i64* %lnjt0, !tbaa !4
  %lnjt2 = icmp eq i64 %lnjsV, %lnjt1
  %lnjt3 = zext i1 %lnjt2 to i64
  switch i64 %lnjt3, label %cjpu [i64 1, label %cjpv]
cjpu:
  %lnjt4 = load i64, i64* %ls7Xf
  %lnjt5 = add i64 %lnjt4, 1
  store i64 %lnjt5, i64* %R2_Var
  %lnjt8 = load i64, i64* %R1_Var
  %lnjt9 = add i64 %lnjt8, 16
  %lnjta = inttoptr i64 %lnjt9 to i64*
  %lnjtb = load i64, i64* %lnjta, !tbaa !4
  store i64 %lnjtb, i64* %R1_Var
  %lnjtc = load i64*, i64** %Sp_Var
  %lnjtd = getelementptr inbounds i64, i64* %lnjtc, i32 -2
  %lnjte = ptrtoint i64* %lnjtd to i64
  %lnjtf = inttoptr i64 %lnjte to i64*
  store i64* %lnjtf, i64** %Sp_Var
  %lnjtg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjth = load i64*, i64** %Sp_Var
  %lnjti = load i64, i64* %R1_Var
  %lnjtj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjtg( i64* %Base_Arg, i64* %lnjth, i64* %Hp_Arg, i64 %lnjti, i64 %lnjtj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjpv:
  %lnjtk = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnjtl = add i64 %lnjtk, 1
  store i64 %lnjtl, i64* %R1_Var
  %lnjtm = load i64*, i64** %Sp_Var
  %lnjtn = getelementptr inbounds i64, i64* %lnjtm, i32 -2
  %lnjto = ptrtoint i64* %lnjtn to i64
  %lnjtp = inttoptr i64 %lnjto to i64*
  store i64* %lnjtp, i64** %Sp_Var
  %lnjtq = load i64*, i64** %Sp_Var
  %lnjtr = getelementptr inbounds i64, i64* %lnjtq, i32 0
  %lnjts = bitcast i64* %lnjtr to i64*
  %lnjtt = load i64, i64* %lnjts, !tbaa !2
  %lnjtu = inttoptr i64 %lnjtt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjtv = load i64*, i64** %Sp_Var
  %lnjtw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjtu( i64* %Base_Arg, i64* %lnjtv, i64* %Hp_Arg, i64 %lnjtw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjpx:
  %lnjtx = load i64, i64* %R1_Var
  store i64 %lnjtx, i64* %R1_Var
  %lnjty = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjtz = bitcast i64* %lnjty to i64*
  %lnjtA = load i64, i64* %lnjtz, !tbaa !5
  %lnjtB = inttoptr i64 %lnjtA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjtC = load i64*, i64** %Sp_Var
  %lnjtD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjtB( i64* %Base_Arg, i64* %lnjtC, i64* %Hp_Arg, i64 %lnjtD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7XA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7XA_info$def to i8*)
define internal ghccc void @s7XA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8589934594, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7XA_info$def to i64)) to i32),i32 0)}>
{
njtE:
  %ls7Xn = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjpU
cjpU:
  %lnjtF = load i64*, i64** %Sp_Var
  %lnjtG = getelementptr inbounds i64, i64* %lnjtF, i32 -2
  %lnjtH = ptrtoint i64* %lnjtG to i64
  %lnjtI = icmp ult i64 %lnjtH, %SpLim_Arg
  %lnjtJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjtI, i1 0 )
  br i1 %lnjtJ, label %cjpV, label %cjpW
cjpW:
  %lnjtL = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjtK = load i64*, i64** %Sp_Var
  %lnjtM = getelementptr inbounds i64, i64* %lnjtK, i32 -2
  store i64 %lnjtL, i64* %lnjtM, !tbaa !2
  %lnjtO = load i64, i64* %R1_Var
  %lnjtN = load i64*, i64** %Sp_Var
  %lnjtP = getelementptr inbounds i64, i64* %lnjtN, i32 -1
  store i64 %lnjtO, i64* %lnjtP, !tbaa !2
  %lnjtS = load i64, i64* %R1_Var
  %lnjtT = add i64 %lnjtS, 32
  %lnjtU = inttoptr i64 %lnjtT to i64*
  %lnjtV = load i64, i64* %lnjtU, !tbaa !4
  store i64 %lnjtV, i64* %ls7Xn
  %lnjtW = load i64, i64* %ls7Xn
  %lnjtZ = load i64, i64* %R1_Var
  %lnju0 = add i64 %lnjtZ, 40
  %lnju1 = inttoptr i64 %lnju0 to i64*
  %lnju2 = load i64, i64* %lnju1, !tbaa !4
  %lnju3 = icmp eq i64 %lnjtW, %lnju2
  %lnju4 = zext i1 %lnju3 to i64
  switch i64 %lnju4, label %cjpS [i64 1, label %cjpT]
cjpS:
  %lnju5 = load i64, i64* %ls7Xn
  %lnju6 = add i64 %lnju5, 1
  store i64 %lnju6, i64* %R2_Var
  %lnju9 = load i64, i64* %R1_Var
  %lnjua = add i64 %lnju9, 16
  %lnjub = inttoptr i64 %lnjua to i64*
  %lnjuc = load i64, i64* %lnjub, !tbaa !4
  store i64 %lnjuc, i64* %R1_Var
  %lnjud = load i64*, i64** %Sp_Var
  %lnjue = getelementptr inbounds i64, i64* %lnjud, i32 -2
  %lnjuf = ptrtoint i64* %lnjue to i64
  %lnjug = inttoptr i64 %lnjuf to i64*
  store i64* %lnjug, i64** %Sp_Var
  %lnjuh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjui = load i64*, i64** %Sp_Var
  %lnjuj = load i64, i64* %R1_Var
  %lnjuk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjuh( i64* %Base_Arg, i64* %lnjui, i64* %Hp_Arg, i64 %lnjuj, i64 %lnjuk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjpT:
  %lnjun = load i64, i64* %R1_Var
  %lnjuo = add i64 %lnjun, 24
  %lnjup = inttoptr i64 %lnjuo to i64*
  %lnjuq = load i64, i64* %lnjup, !tbaa !4
  %lnjur = and i64 %lnjuq, -8
  store i64 %lnjur, i64* %R1_Var
  %lnjus = load i64*, i64** %Sp_Var
  %lnjut = getelementptr inbounds i64, i64* %lnjus, i32 -2
  %lnjuu = ptrtoint i64* %lnjut to i64
  %lnjuv = inttoptr i64 %lnjuu to i64*
  store i64* %lnjuv, i64** %Sp_Var
  %lnjux = load i64, i64* %R1_Var
  %lnjuy = inttoptr i64 %lnjux to i64*
  %lnjuz = load i64, i64* %lnjuy, !tbaa !4
  %lnjuA = inttoptr i64 %lnjuz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjuB = load i64*, i64** %Sp_Var
  %lnjuC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjuA( i64* %Base_Arg, i64* %lnjuB, i64* %Hp_Arg, i64 %lnjuC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjpV:
  %lnjuD = load i64, i64* %R1_Var
  store i64 %lnjuD, i64* %R1_Var
  %lnjuE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjuF = bitcast i64* %lnjuE to i64*
  %lnjuG = load i64, i64* %lnjuF, !tbaa !5
  %lnjuH = inttoptr i64 %lnjuG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjuI = load i64*, i64** %Sp_Var
  %lnjuJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjuH( i64* %Base_Arg, i64* %lnjuI, i64* %Hp_Arg, i64 %lnjuJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Xw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xw_info$def to i8*)
define internal ghccc void @s7Xw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967300, i32 15, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xw_info$def to i64)) to i32),i32 0)}>
{
njuK:
  %ls7Xw = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Xl = alloca i64, i32 1
  %ls7WZ = alloca i64, i32 1
  %ls7X4 = alloca i64, i32 1
  %ls7X9 = alloca i64, i32 1
  %ls7Xq = alloca double, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjq5
cjq5:
  %lnjuL = load i64, i64* %R1_Var
  store i64 %lnjuL, i64* %ls7Xw
  %lnjuM = load i64*, i64** %Sp_Var
  %lnjuN = getelementptr inbounds i64, i64* %lnjuM, i32 -5
  %lnjuO = ptrtoint i64* %lnjuN to i64
  %lnjuP = icmp ult i64 %lnjuO, %SpLim_Arg
  %lnjuQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjuP, i1 0 )
  br i1 %lnjuQ, label %cjqb, label %cjqc
cjqc:
  %lnjuR = load i64*, i64** %Hp_Var
  %lnjuS = getelementptr inbounds i64, i64* %lnjuR, i32 2
  %lnjuT = ptrtoint i64* %lnjuS to i64
  %lnjuU = inttoptr i64 %lnjuT to i64*
  store i64* %lnjuU, i64** %Hp_Var
  %lnjuV = load i64*, i64** %Hp_Var
  %lnjuW = ptrtoint i64* %lnjuV to i64
  %lnjuX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjuY = bitcast i64* %lnjuX to i64*
  %lnjuZ = load i64, i64* %lnjuY, !tbaa !5
  %lnjv0 = icmp ugt i64 %lnjuW, %lnjuZ
  %lnjv1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjv0, i1 0 )
  br i1 %lnjv1, label %cjqe, label %cjqd
cjqd:
  %lnjv3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnjv2 = load i64*, i64** %Sp_Var
  %lnjv4 = getelementptr inbounds i64, i64* %lnjv2, i32 -2
  store i64 %lnjv3, i64* %lnjv4, !tbaa !2
  %lnjv6 = load i64, i64* %ls7Xw
  %lnjv5 = load i64*, i64** %Sp_Var
  %lnjv7 = getelementptr inbounds i64, i64* %lnjv5, i32 -1
  store i64 %lnjv6, i64* %lnjv7, !tbaa !2
  %lnjv8 = load i64, i64* %ls7Xw
  %lnjv9 = add i64 %lnjv8, 16
  %lnjva = inttoptr i64 %lnjv9 to i64*
  %lnjvb = load i64, i64* %lnjva, !tbaa !1
  store i64 %lnjvb, i64* %ls7Xl
  %lnjvc = load i64, i64* %ls7Xw
  %lnjvd = add i64 %lnjvc, 24
  %lnjve = inttoptr i64 %lnjvd to i64*
  %lnjvf = load i64, i64* %lnjve, !tbaa !1
  store i64 %lnjvf, i64* %ls7WZ
  %lnjvg = load i64, i64* %ls7Xw
  %lnjvh = add i64 %lnjvg, 32
  %lnjvi = inttoptr i64 %lnjvh to i64*
  %lnjvj = load i64, i64* %lnjvi, !tbaa !1
  store i64 %lnjvj, i64* %ls7X4
  %lnjvk = load i64, i64* %ls7Xw
  %lnjvl = add i64 %lnjvk, 40
  %lnjvm = inttoptr i64 %lnjvl to i64*
  %lnjvn = load i64, i64* %lnjvm, !tbaa !1
  store i64 %lnjvn, i64* %ls7X9
  %lnjvo = load i64, i64* %ls7Xw
  %lnjvp = add i64 %lnjvo, 48
  %lnjvq = inttoptr i64 %lnjvp to i64*
  %lnjvr = load i64, i64* %lnjvq, !tbaa !1
  %lnjvs = sitofp i64 %lnjvr to double
  store double %lnjvs, double* %ls7Xq
  %lnjvu = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnjvt = load i64*, i64** %Hp_Var
  %lnjvv = getelementptr inbounds i64, i64* %lnjvt, i32 -1
  store i64 %lnjvu, i64* %lnjvv, !tbaa !3
  %lnjvx = load double, double* %ls7Xq
  %lnjvw = load i64*, i64** %Hp_Var
  %lnjvy = getelementptr inbounds i64, i64* %lnjvw, i32 0
  %lnjvz = bitcast i64* %lnjvy to double*
  store double %lnjvx, double* %lnjvz, !tbaa !3
  %lnjvB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjq8_info$def to i64
  %lnjvA = load i64*, i64** %Sp_Var
  %lnjvC = getelementptr inbounds i64, i64* %lnjvA, i32 -3
  store i64 %lnjvB, i64* %lnjvC, !tbaa !2
  %lnjvD = load i64, i64* %ls7WZ
  store i64 %lnjvD, i64* %R6_Var
  %lnjvF = load i64*, i64** %Hp_Var
  %lnjvG = ptrtoint i64* %lnjvF to i64
  %lnjvH = add i64 %lnjvG, -7
  store i64 %lnjvH, i64* %R5_Var
  %lnjvI = load i64, i64* %ls7Xl
  store i64 %lnjvI, i64* %R4_Var
  %lnjvJ = ptrtoint %Main_testlights_closure_struct* @Main_testlights_closure$def to i64
  %lnjvK = add i64 %lnjvJ, 2
  store i64 %lnjvK, i64* %R3_Var
  %lnjvL = ptrtoint %Main_testspheres_closure_struct* @Main_testspheres_closure$def to i64
  %lnjvM = add i64 %lnjvL, 2
  store i64 %lnjvM, i64* %R2_Var
  %lnjvO = load i64, i64* %ls7X4
  %lnjvN = load i64*, i64** %Sp_Var
  %lnjvP = getelementptr inbounds i64, i64* %lnjvN, i32 -5
  store i64 %lnjvO, i64* %lnjvP, !tbaa !2
  %lnjvR = load i64, i64* %ls7X9
  %lnjvQ = load i64*, i64** %Sp_Var
  %lnjvS = getelementptr inbounds i64, i64* %lnjvQ, i32 -4
  store i64 %lnjvR, i64* %lnjvS, !tbaa !2
  %lnjvT = load i64*, i64** %Sp_Var
  %lnjvU = getelementptr inbounds i64, i64* %lnjvT, i32 -5
  %lnjvV = ptrtoint i64* %lnjvU to i64
  %lnjvW = inttoptr i64 %lnjvV to i64*
  store i64* %lnjvW, i64** %Sp_Var
  %lnjvX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwtracepixel_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjvY = load i64*, i64** %Sp_Var
  %lnjvZ = load i64*, i64** %Hp_Var
  %lnjw0 = load i64, i64* %R1_Var
  %lnjw1 = load i64, i64* %R2_Var
  %lnjw2 = load i64, i64* %R3_Var
  %lnjw3 = load i64, i64* %R4_Var
  %lnjw4 = load i64, i64* %R5_Var
  %lnjw5 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjvX( i64* %Base_Arg, i64* %lnjvY, i64* %lnjvZ, i64 %lnjw0, i64 %lnjw1, i64 %lnjw2, i64 %lnjw3, i64 %lnjw4, i64 %lnjw5, i64 %SpLim_Arg ) nounwind
  ret void
cjqe:
  %lnjw6 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnjw6, !tbaa !5
  br label %cjqb
cjqb:
  %lnjw7 = load i64, i64* %ls7Xw
  store i64 %lnjw7, i64* %R1_Var
  %lnjw8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjw9 = bitcast i64* %lnjw8 to i64*
  %lnjwa = load i64, i64* %lnjw9, !tbaa !5
  %lnjwb = inttoptr i64 %lnjwa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjwc = load i64*, i64** %Sp_Var
  %lnjwd = load i64*, i64** %Hp_Var
  %lnjwe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjwb( i64* %Base_Arg, i64* %lnjwc, i64* %lnjwd, i64 %lnjwe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjq8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjq8_info$def to i8*)
define internal ghccc void @cjq8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njwf:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjq8
cjq8:
  %lnjwg = load i64*, i64** %Hp_Var
  %lnjwh = getelementptr inbounds i64, i64* %lnjwg, i32 4
  %lnjwi = ptrtoint i64* %lnjwh to i64
  %lnjwj = inttoptr i64 %lnjwi to i64*
  store i64* %lnjwj, i64** %Hp_Var
  %lnjwk = load i64*, i64** %Hp_Var
  %lnjwl = ptrtoint i64* %lnjwk to i64
  %lnjwm = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjwn = bitcast i64* %lnjwm to i64*
  %lnjwo = load i64, i64* %lnjwn, !tbaa !5
  %lnjwp = icmp ugt i64 %lnjwl, %lnjwo
  %lnjwq = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjwp, i1 0 )
  br i1 %lnjwq, label %cjqh, label %cjqg
cjqg:
  %lnjws = ptrtoint i8* @ghczmprim_GHCziTuple_Z3T_con_info to i64
  %lnjwr = load i64*, i64** %Hp_Var
  %lnjwt = getelementptr inbounds i64, i64* %lnjwr, i32 -3
  store i64 %lnjws, i64* %lnjwt, !tbaa !3
  %lnjwv = load i64, i64* %R1_Var
  %lnjwu = load i64*, i64** %Hp_Var
  %lnjww = getelementptr inbounds i64, i64* %lnjwu, i32 -2
  store i64 %lnjwv, i64* %lnjww, !tbaa !3
  %lnjwy = load i64, i64* %R2_Var
  %lnjwx = load i64*, i64** %Hp_Var
  %lnjwz = getelementptr inbounds i64, i64* %lnjwx, i32 -1
  store i64 %lnjwy, i64* %lnjwz, !tbaa !3
  %lnjwB = load i64, i64* %R3_Var
  %lnjwA = load i64*, i64** %Hp_Var
  %lnjwC = getelementptr inbounds i64, i64* %lnjwA, i32 0
  store i64 %lnjwB, i64* %lnjwC, !tbaa !3
  %lnjwE = load i64*, i64** %Hp_Var
  %lnjwF = ptrtoint i64* %lnjwE to i64
  %lnjwG = add i64 %lnjwF, -23
  store i64 %lnjwG, i64* %R1_Var
  %lnjwH = load i64*, i64** %Sp_Var
  %lnjwI = getelementptr inbounds i64, i64* %lnjwH, i32 1
  %lnjwJ = ptrtoint i64* %lnjwI to i64
  %lnjwK = inttoptr i64 %lnjwJ to i64*
  store i64* %lnjwK, i64** %Sp_Var
  %lnjwL = load i64*, i64** %Sp_Var
  %lnjwM = getelementptr inbounds i64, i64* %lnjwL, i32 0
  %lnjwN = bitcast i64* %lnjwM to i64*
  %lnjwO = load i64, i64* %lnjwN, !tbaa !2
  %lnjwP = inttoptr i64 %lnjwO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjwQ = load i64*, i64** %Sp_Var
  %lnjwR = load i64*, i64** %Hp_Var
  %lnjwS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjwP( i64* %Base_Arg, i64* %lnjwQ, i64* %lnjwR, i64 %lnjwS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjqh:
  %lnjwT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnjwT, !tbaa !5
  %lnjwU = load i64, i64* %R3_Var
  store i64 %lnjwU, i64* %R3_Var
  %lnjwV = load i64, i64* %R2_Var
  store i64 %lnjwV, i64* %R2_Var
  %lnjwW = load i64, i64* %R1_Var
  store i64 %lnjwW, i64* %R1_Var
  %lnjwX = bitcast i8* @stg_gc_ppp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjwY = load i64*, i64** %Sp_Var
  %lnjwZ = load i64*, i64** %Hp_Var
  %lnjx0 = load i64, i64* %R1_Var
  %lnjx1 = load i64, i64* %R2_Var
  %lnjx2 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjwX( i64* %Base_Arg, i64* %lnjwY, i64* %lnjwZ, i64 %lnjx0, i64 %lnjx1, i64 %lnjx2, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Xm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xm_info$def to i8*)
define internal ghccc void @s7Xm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967300, i64 4294967302, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xm_info$def to i64)) to i32),i32 0)}>
{
njx3:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Xl = alloca i64, i32 1
  %ls7WZ = alloca i64, i32 1
  %ls7X4 = alloca i64, i32 1
  %ls7X9 = alloca i64, i32 1
  %ls7Xj = alloca i64, i32 1
  %ls7Xg = alloca i64, i32 1
  %ls7WQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjqm
cjqm:
  %lnjx4 = load i64*, i64** %Hp_Var
  %lnjx5 = getelementptr inbounds i64, i64* %lnjx4, i32 24
  %lnjx6 = ptrtoint i64* %lnjx5 to i64
  %lnjx7 = inttoptr i64 %lnjx6 to i64*
  store i64* %lnjx7, i64** %Hp_Var
  %lnjx8 = load i64*, i64** %Hp_Var
  %lnjx9 = ptrtoint i64* %lnjx8 to i64
  %lnjxa = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjxb = bitcast i64* %lnjxa to i64*
  %lnjxc = load i64, i64* %lnjxb, !tbaa !5
  %lnjxd = icmp ugt i64 %lnjx9, %lnjxc
  %lnjxe = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjxd, i1 0 )
  br i1 %lnjxe, label %cjqq, label %cjqp
cjqp:
  %lnjxh = load i64, i64* %R1_Var
  %lnjxi = add i64 %lnjxh, 7
  %lnjxj = inttoptr i64 %lnjxi to i64*
  %lnjxk = load i64, i64* %lnjxj, !tbaa !4
  store i64 %lnjxk, i64* %ls7Xl
  %lnjxn = load i64, i64* %R1_Var
  %lnjxo = add i64 %lnjxn, 15
  %lnjxp = inttoptr i64 %lnjxo to i64*
  %lnjxq = load i64, i64* %lnjxp, !tbaa !4
  store i64 %lnjxq, i64* %ls7WZ
  %lnjxt = load i64, i64* %R1_Var
  %lnjxu = add i64 %lnjxt, 23
  %lnjxv = inttoptr i64 %lnjxu to i64*
  %lnjxw = load i64, i64* %lnjxv, !tbaa !4
  store i64 %lnjxw, i64* %ls7X4
  %lnjxz = load i64, i64* %R1_Var
  %lnjxA = add i64 %lnjxz, 31
  %lnjxB = inttoptr i64 %lnjxA to i64*
  %lnjxC = load i64, i64* %lnjxB, !tbaa !4
  store i64 %lnjxC, i64* %ls7X9
  %lnjxF = load i64, i64* %R1_Var
  %lnjxG = add i64 %lnjxF, 39
  %lnjxH = inttoptr i64 %lnjxG to i64*
  %lnjxI = load i64, i64* %lnjxH, !tbaa !4
  store i64 %lnjxI, i64* %ls7Xj
  %lnjxL = load i64, i64* %R1_Var
  %lnjxM = add i64 %lnjxL, 47
  %lnjxN = inttoptr i64 %lnjxM to i64*
  %lnjxO = load i64, i64* %lnjxN, !tbaa !4
  store i64 %lnjxO, i64* %ls7Xg
  %lnjxR = load i64, i64* %R1_Var
  %lnjxS = add i64 %lnjxR, 55
  %lnjxT = inttoptr i64 %lnjxS to i64*
  %lnjxU = load i64, i64* %lnjxT, !tbaa !4
  store i64 %lnjxU, i64* %ls7WQ
  %lnjxW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7XA_info$def to i64
  %lnjxV = load i64*, i64** %Hp_Var
  %lnjxX = getelementptr inbounds i64, i64* %lnjxV, i32 -23
  store i64 %lnjxW, i64* %lnjxX, !tbaa !3
  %lnjxZ = load i64, i64* %R1_Var
  %lnjxY = load i64*, i64** %Hp_Var
  %lnjy0 = getelementptr inbounds i64, i64* %lnjxY, i32 -21
  store i64 %lnjxZ, i64* %lnjy0, !tbaa !3
  %lnjy2 = load i64, i64* %ls7Xg
  %lnjy1 = load i64*, i64** %Hp_Var
  %lnjy3 = getelementptr inbounds i64, i64* %lnjy1, i32 -20
  store i64 %lnjy2, i64* %lnjy3, !tbaa !3
  %lnjy5 = load i64, i64* %R2_Var
  %lnjy4 = load i64*, i64** %Hp_Var
  %lnjy6 = getelementptr inbounds i64, i64* %lnjy4, i32 -19
  store i64 %lnjy5, i64* %lnjy6, !tbaa !3
  %lnjy8 = load i64, i64* %ls7WQ
  %lnjy7 = load i64*, i64** %Hp_Var
  %lnjy9 = getelementptr inbounds i64, i64* %lnjy7, i32 -18
  store i64 %lnjy8, i64* %lnjy9, !tbaa !3
  %lnjyb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xw_info$def to i64
  %lnjya = load i64*, i64** %Hp_Var
  %lnjyc = getelementptr inbounds i64, i64* %lnjya, i32 -17
  store i64 %lnjyb, i64* %lnjyc, !tbaa !3
  %lnjye = load i64, i64* %ls7Xl
  %lnjyd = load i64*, i64** %Hp_Var
  %lnjyf = getelementptr inbounds i64, i64* %lnjyd, i32 -15
  store i64 %lnjye, i64* %lnjyf, !tbaa !3
  %lnjyh = load i64, i64* %ls7WZ
  %lnjyg = load i64*, i64** %Hp_Var
  %lnjyi = getelementptr inbounds i64, i64* %lnjyg, i32 -14
  store i64 %lnjyh, i64* %lnjyi, !tbaa !3
  %lnjyk = load i64, i64* %ls7X4
  %lnjyj = load i64*, i64** %Hp_Var
  %lnjyl = getelementptr inbounds i64, i64* %lnjyj, i32 -13
  store i64 %lnjyk, i64* %lnjyl, !tbaa !3
  %lnjyn = load i64, i64* %ls7X9
  %lnjym = load i64*, i64** %Hp_Var
  %lnjyo = getelementptr inbounds i64, i64* %lnjym, i32 -12
  store i64 %lnjyn, i64* %lnjyo, !tbaa !3
  %lnjyq = load i64, i64* %R2_Var
  %lnjyp = load i64*, i64** %Hp_Var
  %lnjyr = getelementptr inbounds i64, i64* %lnjyp, i32 -11
  store i64 %lnjyq, i64* %lnjyr, !tbaa !3
  %lnjyt = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %lnjys = load i64*, i64** %Hp_Var
  %lnjyu = getelementptr inbounds i64, i64* %lnjys, i32 -10
  store i64 %lnjyt, i64* %lnjyu, !tbaa !3
  %lnjyw = load i64, i64* %R2_Var
  %lnjyv = load i64*, i64** %Hp_Var
  %lnjyx = getelementptr inbounds i64, i64* %lnjyv, i32 -9
  store i64 %lnjyw, i64* %lnjyx, !tbaa !3
  %lnjyz = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnjyy = load i64*, i64** %Hp_Var
  %lnjyA = getelementptr inbounds i64, i64* %lnjyy, i32 -8
  store i64 %lnjyz, i64* %lnjyA, !tbaa !3
  %lnjyC = load i64, i64* %ls7Xj
  %lnjyB = load i64*, i64** %Hp_Var
  %lnjyD = getelementptr inbounds i64, i64* %lnjyB, i32 -7
  store i64 %lnjyC, i64* %lnjyD, !tbaa !3
  %lnjyG = load i64*, i64** %Hp_Var
  %lnjyH = ptrtoint i64* %lnjyG to i64
  %lnjyI = add i64 %lnjyH, -79
  %lnjyE = load i64*, i64** %Hp_Var
  %lnjyJ = getelementptr inbounds i64, i64* %lnjyE, i32 -6
  store i64 %lnjyI, i64* %lnjyJ, !tbaa !3
  %lnjyL = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnjyK = load i64*, i64** %Hp_Var
  %lnjyM = getelementptr inbounds i64, i64* %lnjyK, i32 -5
  store i64 %lnjyL, i64* %lnjyM, !tbaa !3
  %lnjyP = load i64*, i64** %Hp_Var
  %lnjyQ = ptrtoint i64* %lnjyP to i64
  %lnjyR = add i64 %lnjyQ, -63
  %lnjyN = load i64*, i64** %Hp_Var
  %lnjyS = getelementptr inbounds i64, i64* %lnjyN, i32 -4
  store i64 %lnjyR, i64* %lnjyS, !tbaa !3
  %lnjyU = load i64*, i64** %Hp_Var
  %lnjyV = getelementptr inbounds i64, i64* %lnjyU, i32 -17
  %lnjyW = ptrtoint i64* %lnjyV to i64
  %lnjyT = load i64*, i64** %Hp_Var
  %lnjyX = getelementptr inbounds i64, i64* %lnjyT, i32 -3
  store i64 %lnjyW, i64* %lnjyX, !tbaa !3
  %lnjyZ = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnjyY = load i64*, i64** %Hp_Var
  %lnjz0 = getelementptr inbounds i64, i64* %lnjyY, i32 -2
  store i64 %lnjyZ, i64* %lnjz0, !tbaa !3
  %lnjz3 = load i64*, i64** %Hp_Var
  %lnjz4 = ptrtoint i64* %lnjz3 to i64
  %lnjz5 = add i64 %lnjz4, -39
  %lnjz1 = load i64*, i64** %Hp_Var
  %lnjz6 = getelementptr inbounds i64, i64* %lnjz1, i32 -1
  store i64 %lnjz5, i64* %lnjz6, !tbaa !3
  %lnjz8 = load i64*, i64** %Hp_Var
  %lnjz9 = getelementptr inbounds i64, i64* %lnjz8, i32 -23
  %lnjza = ptrtoint i64* %lnjz9 to i64
  %lnjz7 = load i64*, i64** %Hp_Var
  %lnjzb = getelementptr inbounds i64, i64* %lnjz7, i32 0
  store i64 %lnjza, i64* %lnjzb, !tbaa !3
  %lnjzd = load i64*, i64** %Hp_Var
  %lnjze = ptrtoint i64* %lnjzd to i64
  %lnjzf = add i64 %lnjze, -14
  store i64 %lnjzf, i64* %R1_Var
  %lnjzg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjzh = bitcast i64* %lnjzg to i64*
  %lnjzi = load i64, i64* %lnjzh, !tbaa !2
  %lnjzj = inttoptr i64 %lnjzi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjzk = load i64*, i64** %Hp_Var
  %lnjzl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjzj( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjzk, i64 %lnjzl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjqq:
  %lnjzm = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 192, i64* %lnjzm, !tbaa !5
  %lnjzn = load i64, i64* %R2_Var
  store i64 %lnjzn, i64* %R2_Var
  %lnjzo = load i64, i64* %R1_Var
  store i64 %lnjzo, i64* %R1_Var
  %lnjzp = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjzq = bitcast i64* %lnjzp to i64*
  %lnjzr = load i64, i64* %lnjzq, !tbaa !5
  %lnjzs = inttoptr i64 %lnjzr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjzt = load i64*, i64** %Hp_Var
  %lnjzu = load i64, i64* %R1_Var
  %lnjzv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjzs( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjzt, i64 %lnjzu, i64 %lnjzv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s7Xe_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xe_info$def to i8*)
define internal ghccc void @s7Xe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967300, i64 4294967299, i32 8, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xe_info$def to i64)) to i32),i32 0)}>
{
njzw:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7WZ = alloca i64, i32 1
  %ls7X4 = alloca i64, i32 1
  %ls7X9 = alloca i64, i32 1
  %ls7WQ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjqr
cjqr:
  %lnjzx = load i64*, i64** %Hp_Var
  %lnjzy = getelementptr inbounds i64, i64* %lnjzx, i32 17
  %lnjzz = ptrtoint i64* %lnjzy to i64
  %lnjzA = inttoptr i64 %lnjzz to i64*
  store i64* %lnjzA, i64** %Hp_Var
  %lnjzB = load i64*, i64** %Hp_Var
  %lnjzC = ptrtoint i64* %lnjzB to i64
  %lnjzD = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjzE = bitcast i64* %lnjzD to i64*
  %lnjzF = load i64, i64* %lnjzE, !tbaa !5
  %lnjzG = icmp ugt i64 %lnjzC, %lnjzF
  %lnjzH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjzG, i1 0 )
  br i1 %lnjzH, label %cjqv, label %cjqu
cjqu:
  %lnjzK = load i64, i64* %R1_Var
  %lnjzL = add i64 %lnjzK, 7
  %lnjzM = inttoptr i64 %lnjzL to i64*
  %lnjzN = load i64, i64* %lnjzM, !tbaa !4
  store i64 %lnjzN, i64* %ls7WZ
  %lnjzQ = load i64, i64* %R1_Var
  %lnjzR = add i64 %lnjzQ, 15
  %lnjzS = inttoptr i64 %lnjzR to i64*
  %lnjzT = load i64, i64* %lnjzS, !tbaa !4
  store i64 %lnjzT, i64* %ls7X4
  %lnjzW = load i64, i64* %R1_Var
  %lnjzX = add i64 %lnjzW, 23
  %lnjzY = inttoptr i64 %lnjzX to i64*
  %lnjzZ = load i64, i64* %lnjzY, !tbaa !4
  store i64 %lnjzZ, i64* %ls7X9
  %lnjA2 = load i64, i64* %R1_Var
  %lnjA3 = add i64 %lnjA2, 31
  %lnjA4 = inttoptr i64 %lnjA3 to i64*
  %lnjA5 = load i64, i64* %lnjA4, !tbaa !4
  store i64 %lnjA5, i64* %ls7WQ
  %lnjA7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xg_info$def to i64
  %lnjA6 = load i64*, i64** %Hp_Var
  %lnjA8 = getelementptr inbounds i64, i64* %lnjA6, i32 -16
  store i64 %lnjA7, i64* %lnjA8, !tbaa !3
  %lnjAa = load i64, i64* %R1_Var
  %lnjA9 = load i64*, i64** %Hp_Var
  %lnjAb = getelementptr inbounds i64, i64* %lnjA9, i32 -14
  store i64 %lnjAa, i64* %lnjAb, !tbaa !3
  %lnjAd = load i64, i64* %R2_Var
  %lnjAc = load i64*, i64** %Hp_Var
  %lnjAe = getelementptr inbounds i64, i64* %lnjAc, i32 -13
  store i64 %lnjAd, i64* %lnjAe, !tbaa !3
  %lnjAg = load i64, i64* %ls7WQ
  %lnjAf = load i64*, i64** %Hp_Var
  %lnjAh = getelementptr inbounds i64, i64* %lnjAf, i32 -12
  store i64 %lnjAg, i64* %lnjAh, !tbaa !3
  %lnjAj = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %lnjAi = load i64*, i64** %Hp_Var
  %lnjAk = getelementptr inbounds i64, i64* %lnjAi, i32 -11
  store i64 %lnjAj, i64* %lnjAk, !tbaa !3
  %lnjAm = load i64, i64* %R2_Var
  %lnjAl = load i64*, i64** %Hp_Var
  %lnjAn = getelementptr inbounds i64, i64* %lnjAl, i32 -10
  store i64 %lnjAm, i64* %lnjAn, !tbaa !3
  %lnjAp = ptrtoint i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64
  %lnjAo = load i64*, i64** %Hp_Var
  %lnjAq = getelementptr inbounds i64, i64* %lnjAo, i32 -9
  store i64 %lnjAp, i64* %lnjAq, !tbaa !3
  %lnjAs = load i64, i64* %R2_Var
  %lnjAt = sitofp i64 %lnjAs to double
  %lnjAr = load i64*, i64** %Hp_Var
  %lnjAu = getelementptr inbounds i64, i64* %lnjAr, i32 -8
  %lnjAv = bitcast i64* %lnjAu to double*
  store double %lnjAt, double* %lnjAv, !tbaa !3
  %lnjAx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xm_info$def to i64
  %lnjAw = load i64*, i64** %Hp_Var
  %lnjAy = getelementptr inbounds i64, i64* %lnjAw, i32 -7
  store i64 %lnjAx, i64* %lnjAy, !tbaa !3
  %lnjAB = load i64*, i64** %Hp_Var
  %lnjAC = ptrtoint i64* %lnjAB to i64
  %lnjAD = add i64 %lnjAC, -71
  %lnjAz = load i64*, i64** %Hp_Var
  %lnjAE = getelementptr inbounds i64, i64* %lnjAz, i32 -6
  store i64 %lnjAD, i64* %lnjAE, !tbaa !3
  %lnjAG = load i64, i64* %ls7WZ
  %lnjAF = load i64*, i64** %Hp_Var
  %lnjAH = getelementptr inbounds i64, i64* %lnjAF, i32 -5
  store i64 %lnjAG, i64* %lnjAH, !tbaa !3
  %lnjAJ = load i64, i64* %ls7X4
  %lnjAI = load i64*, i64** %Hp_Var
  %lnjAK = getelementptr inbounds i64, i64* %lnjAI, i32 -4
  store i64 %lnjAJ, i64* %lnjAK, !tbaa !3
  %lnjAM = load i64, i64* %ls7X9
  %lnjAL = load i64*, i64** %Hp_Var
  %lnjAN = getelementptr inbounds i64, i64* %lnjAL, i32 -3
  store i64 %lnjAM, i64* %lnjAN, !tbaa !3
  %lnjAQ = load i64*, i64** %Hp_Var
  %lnjAR = ptrtoint i64* %lnjAQ to i64
  %lnjAS = add i64 %lnjAR, -87
  %lnjAO = load i64*, i64** %Hp_Var
  %lnjAT = getelementptr inbounds i64, i64* %lnjAO, i32 -2
  store i64 %lnjAS, i64* %lnjAT, !tbaa !3
  %lnjAV = load i64*, i64** %Hp_Var
  %lnjAW = getelementptr inbounds i64, i64* %lnjAV, i32 -16
  %lnjAX = ptrtoint i64* %lnjAW to i64
  %lnjAU = load i64*, i64** %Hp_Var
  %lnjAY = getelementptr inbounds i64, i64* %lnjAU, i32 -1
  store i64 %lnjAX, i64* %lnjAY, !tbaa !3
  %lnjB0 = load i64, i64* %ls7WQ
  %lnjAZ = load i64*, i64** %Hp_Var
  %lnjB1 = getelementptr inbounds i64, i64* %lnjAZ, i32 0
  store i64 %lnjB0, i64* %lnjB1, !tbaa !3
  store i64 0, i64* %R2_Var
  %lnjB3 = load i64*, i64** %Hp_Var
  %lnjB4 = ptrtoint i64* %lnjB3 to i64
  %lnjB5 = add i64 %lnjB4, -55
  store i64 %lnjB5, i64* %R1_Var
  %lnjB6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xm_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjB7 = load i64*, i64** %Hp_Var
  %lnjB8 = load i64, i64* %R1_Var
  %lnjB9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjB6( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjB7, i64 %lnjB8, i64 %lnjB9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjqv:
  %lnjBa = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 136, i64* %lnjBa, !tbaa !5
  %lnjBb = load i64, i64* %R2_Var
  store i64 %lnjBb, i64* %R2_Var
  %lnjBc = load i64, i64* %R1_Var
  store i64 %lnjBc, i64* %R1_Var
  %lnjBd = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjBe = bitcast i64* %lnjBd to i64*
  %lnjBf = load i64, i64* %lnjBe, !tbaa !5
  %lnjBg = inttoptr i64 %lnjBf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjBh = load i64*, i64** %Hp_Var
  %lnjBi = load i64, i64* %R1_Var
  %lnjBj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjBg( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjBh, i64 %lnjBi, i64 %lnjBj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwray_info$def to i8*)
define ghccc void @Main_zdwray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967300, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwray_info$def to i64)) to i32),i32 0)}>
{
njBk:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7WQ = alloca i64, i32 1
  %lcjoW = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjqw
cjqw:
  %lnjBl = load i64*, i64** %Hp_Var
  %lnjBm = getelementptr inbounds i64, i64* %lnjBl, i32 17
  %lnjBn = ptrtoint i64* %lnjBm to i64
  %lnjBo = inttoptr i64 %lnjBn to i64*
  store i64* %lnjBo, i64** %Hp_Var
  %lnjBp = load i64*, i64** %Hp_Var
  %lnjBq = ptrtoint i64* %lnjBp to i64
  %lnjBr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjBs = bitcast i64* %lnjBr to i64*
  %lnjBt = load i64, i64* %lnjBs, !tbaa !5
  %lnjBu = icmp ugt i64 %lnjBq, %lnjBt
  %lnjBv = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjBu, i1 0 )
  br i1 %lnjBv, label %cjqA, label %cjqz
cjqz:
  %lnjBx = load i64, i64* %R2_Var
  %lnjBy = add i64 %lnjBx, -1
  store i64 %lnjBy, i64* %ls7WQ
  %lnjBz = load i64, i64* %ls7WQ
  %lnjBA = icmp sgt i64 0, %lnjBz
  %lnjBB = zext i1 %lnjBA to i64
  switch i64 %lnjBB, label %cjqC [i64 1, label %cjqD]
cjqC:
  %lnjBD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7WS_info$def to i64
  %lnjBC = load i64*, i64** %Hp_Var
  %lnjBE = getelementptr inbounds i64, i64* %lnjBC, i32 -16
  store i64 %lnjBD, i64* %lnjBE, !tbaa !3
  %lnjBG = load i64, i64* %R2_Var
  %lnjBF = load i64*, i64** %Hp_Var
  %lnjBH = getelementptr inbounds i64, i64* %lnjBF, i32 -14
  store i64 %lnjBG, i64* %lnjBH, !tbaa !3
  %lnjBJ = ptrtoint i8* @stg_sel_0_upd_info to i64
  %lnjBI = load i64*, i64** %Hp_Var
  %lnjBK = getelementptr inbounds i64, i64* %lnjBI, i32 -13
  store i64 %lnjBJ, i64* %lnjBK, !tbaa !3
  %lnjBL = load i64*, i64** %Hp_Var
  %lnjBM = getelementptr inbounds i64, i64* %lnjBL, i32 -16
  %lnjBN = ptrtoint i64* %lnjBM to i64
  store i64 %lnjBN, i64* %lcjoW
  %lnjBP = load i64, i64* %lcjoW
  %lnjBO = load i64*, i64** %Hp_Var
  %lnjBQ = getelementptr inbounds i64, i64* %lnjBO, i32 -11
  store i64 %lnjBP, i64* %lnjBQ, !tbaa !3
  %lnjBS = ptrtoint i8* @stg_sel_1_upd_info to i64
  %lnjBR = load i64*, i64** %Hp_Var
  %lnjBT = getelementptr inbounds i64, i64* %lnjBR, i32 -10
  store i64 %lnjBS, i64* %lnjBT, !tbaa !3
  %lnjBV = load i64, i64* %lcjoW
  %lnjBU = load i64*, i64** %Hp_Var
  %lnjBW = getelementptr inbounds i64, i64* %lnjBU, i32 -8
  store i64 %lnjBV, i64* %lnjBW, !tbaa !3
  %lnjBY = ptrtoint i8* @stg_sel_2_upd_info to i64
  %lnjBX = load i64*, i64** %Hp_Var
  %lnjBZ = getelementptr inbounds i64, i64* %lnjBX, i32 -7
  store i64 %lnjBY, i64* %lnjBZ, !tbaa !3
  %lnjC1 = load i64, i64* %lcjoW
  %lnjC0 = load i64*, i64** %Hp_Var
  %lnjC2 = getelementptr inbounds i64, i64* %lnjC0, i32 -5
  store i64 %lnjC1, i64* %lnjC2, !tbaa !3
  %lnjC4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xe_info$def to i64
  %lnjC3 = load i64*, i64** %Hp_Var
  %lnjC5 = getelementptr inbounds i64, i64* %lnjC3, i32 -4
  store i64 %lnjC4, i64* %lnjC5, !tbaa !3
  %lnjC7 = load i64*, i64** %Hp_Var
  %lnjC8 = getelementptr inbounds i64, i64* %lnjC7, i32 -13
  %lnjC9 = ptrtoint i64* %lnjC8 to i64
  %lnjC6 = load i64*, i64** %Hp_Var
  %lnjCa = getelementptr inbounds i64, i64* %lnjC6, i32 -3
  store i64 %lnjC9, i64* %lnjCa, !tbaa !3
  %lnjCc = load i64*, i64** %Hp_Var
  %lnjCd = getelementptr inbounds i64, i64* %lnjCc, i32 -10
  %lnjCe = ptrtoint i64* %lnjCd to i64
  %lnjCb = load i64*, i64** %Hp_Var
  %lnjCf = getelementptr inbounds i64, i64* %lnjCb, i32 -2
  store i64 %lnjCe, i64* %lnjCf, !tbaa !3
  %lnjCh = load i64*, i64** %Hp_Var
  %lnjCi = getelementptr inbounds i64, i64* %lnjCh, i32 -7
  %lnjCj = ptrtoint i64* %lnjCi to i64
  %lnjCg = load i64*, i64** %Hp_Var
  %lnjCk = getelementptr inbounds i64, i64* %lnjCg, i32 -1
  store i64 %lnjCj, i64* %lnjCk, !tbaa !3
  %lnjCm = load i64, i64* %ls7WQ
  %lnjCl = load i64*, i64** %Hp_Var
  %lnjCn = getelementptr inbounds i64, i64* %lnjCl, i32 0
  store i64 %lnjCm, i64* %lnjCn, !tbaa !3
  store i64 0, i64* %R2_Var
  %lnjCp = load i64*, i64** %Hp_Var
  %lnjCq = ptrtoint i64* %lnjCp to i64
  %lnjCr = add i64 %lnjCq, -31
  store i64 %lnjCr, i64* %R1_Var
  %lnjCs = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Xe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjCt = load i64*, i64** %Hp_Var
  %lnjCu = load i64, i64* %R1_Var
  %lnjCv = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjCs( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjCt, i64 %lnjCu, i64 %lnjCv, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjqD:
  %lnjCw = load i64*, i64** %Hp_Var
  %lnjCx = getelementptr inbounds i64, i64* %lnjCw, i32 -17
  %lnjCy = ptrtoint i64* %lnjCx to i64
  %lnjCz = inttoptr i64 %lnjCy to i64*
  store i64* %lnjCz, i64** %Hp_Var
  %lnjCA = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnjCB = add i64 %lnjCA, 1
  store i64 %lnjCB, i64* %R1_Var
  %lnjCC = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjCD = bitcast i64* %lnjCC to i64*
  %lnjCE = load i64, i64* %lnjCD, !tbaa !2
  %lnjCF = inttoptr i64 %lnjCE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjCG = load i64*, i64** %Hp_Var
  %lnjCH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjCF( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjCG, i64 %lnjCH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjqA:
  %lnjCI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 136, i64* %lnjCI, !tbaa !5
  %lnjCJ = load i64, i64* %R2_Var
  store i64 %lnjCJ, i64* %R2_Var
  %lnjCK = ptrtoint %Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64
  store i64 %lnjCK, i64* %R1_Var
  %lnjCL = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjCM = bitcast i64* %lnjCL to i64*
  %lnjCN = load i64, i64* %lnjCM, !tbaa !5
  %lnjCO = inttoptr i64 %lnjCN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjCP = load i64*, i64** %Hp_Var
  %lnjCQ = load i64, i64* %R1_Var
  %lnjCR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjCO( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjCP, i64 %lnjCQ, i64 %lnjCR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_ray_closure_struct = type <{i64, i64}>
@Main_ray_closure$def = internal global %Main_ray_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ray_info$def to i64), i64 0}>
@Main_ray_closure = alias i8, bitcast (%Main_ray_closure_struct* @Main_ray_closure$def to i8*)
@Main_ray_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ray_info$def to i8*)
define ghccc void @Main_ray_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_ray_info$def to i64)) to i32),i32 0)}>
{
njD6:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjCZ
cjCZ:
  %lnjD7 = load i64*, i64** %Sp_Var
  %lnjD8 = getelementptr inbounds i64, i64* %lnjD7, i32 -1
  %lnjD9 = ptrtoint i64* %lnjD8 to i64
  %lnjDa = icmp ult i64 %lnjD9, %SpLim_Arg
  %lnjDb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjDa, i1 0 )
  br i1 %lnjDb, label %cjD0, label %cjD1
cjD1:
  %lnjDd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjCW_info$def to i64
  %lnjDc = load i64*, i64** %Sp_Var
  %lnjDe = getelementptr inbounds i64, i64* %lnjDc, i32 -1
  store i64 %lnjDd, i64* %lnjDe, !tbaa !2
  %lnjDf = load i64, i64* %R2_Var
  store i64 %lnjDf, i64* %R1_Var
  %lnjDg = load i64*, i64** %Sp_Var
  %lnjDh = getelementptr inbounds i64, i64* %lnjDg, i32 -1
  %lnjDi = ptrtoint i64* %lnjDh to i64
  %lnjDj = inttoptr i64 %lnjDi to i64*
  store i64* %lnjDj, i64** %Sp_Var
  %lnjDk = load i64, i64* %R1_Var
  %lnjDl = and i64 %lnjDk, 7
  %lnjDm = icmp ne i64 %lnjDl, 0
  br i1 %lnjDm, label %ujD5, label %cjCX
cjCX:
  %lnjDo = load i64, i64* %R1_Var
  %lnjDp = inttoptr i64 %lnjDo to i64*
  %lnjDq = load i64, i64* %lnjDp, !tbaa !4
  %lnjDr = inttoptr i64 %lnjDq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjDs = load i64*, i64** %Sp_Var
  %lnjDt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjDr( i64* %Base_Arg, i64* %lnjDs, i64* %Hp_Arg, i64 %lnjDt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujD5:
  %lnjDu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjCW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjDv = load i64*, i64** %Sp_Var
  %lnjDw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjDu( i64* %Base_Arg, i64* %lnjDv, i64* %Hp_Arg, i64 %lnjDw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjD0:
  %lnjDx = load i64, i64* %R2_Var
  store i64 %lnjDx, i64* %R2_Var
  %lnjDy = ptrtoint %Main_ray_closure_struct* @Main_ray_closure$def to i64
  store i64 %lnjDy, i64* %R1_Var
  %lnjDz = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjDA = bitcast i64* %lnjDz to i64*
  %lnjDB = load i64, i64* %lnjDA, !tbaa !5
  %lnjDC = inttoptr i64 %lnjDB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjDD = load i64*, i64** %Sp_Var
  %lnjDE = load i64, i64* %R1_Var
  %lnjDF = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjDC( i64* %Base_Arg, i64* %lnjDD, i64* %Hp_Arg, i64 %lnjDE, i64 %lnjDF, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjCW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjCW_info$def to i8*)
define internal ghccc void @cjCW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjCW_info$def to i64)) to i32),i32 0)}>
{
njDG:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjCW
cjCW:
  %lnjDH = add i64 %R1_Arg, 7
  %lnjDI = inttoptr i64 %lnjDH to i64*
  %lnjDJ = load i64, i64* %lnjDI, !tbaa !4
  store i64 %lnjDJ, i64* %R2_Var
  %lnjDK = load i64*, i64** %Sp_Var
  %lnjDL = getelementptr inbounds i64, i64* %lnjDK, i32 1
  %lnjDM = ptrtoint i64* %lnjDL to i64
  %lnjDN = inttoptr i64 %lnjDM to i64*
  store i64* %lnjDN, i64** %Sp_Var
  %lnjDO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjDP = load i64*, i64** %Sp_Var
  %lnjDQ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjDO( i64* %Base_Arg, i64* %lnjDP, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjDQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_run1_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_run1_closure$def = internal global %Main_run1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run1_info$def to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStr2_closure to i64), i64 ptrtoint (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64), i64 0}>
@Main_run1_closure = alias i8, bitcast (%Main_run1_closure_struct* @Main_run1_closure$def to i8*)
@s7Ys_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ys_info$def to i8*)
define internal ghccc void @s7Ys_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ys_info$def to i64)) to i32),i32 0)}>
{
njEu:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjE2
cjE2:
  %lnjEv = load i64*, i64** %Sp_Var
  %lnjEw = getelementptr inbounds i64, i64* %lnjEv, i32 -1
  %lnjEx = ptrtoint i64* %lnjEw to i64
  %lnjEy = icmp ult i64 %lnjEx, %SpLim_Arg
  %lnjEz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjEy, i1 0 )
  br i1 %lnjEz, label %cjEg, label %cjEh
cjEh:
  %lnjEB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjDZ_info$def to i64
  %lnjEA = load i64*, i64** %Sp_Var
  %lnjEC = getelementptr inbounds i64, i64* %lnjEA, i32 -1
  store i64 %lnjEB, i64* %lnjEC, !tbaa !2
  %lnjEF = load i64, i64* %R1_Var
  %lnjEG = add i64 %lnjEF, 16
  %lnjEH = inttoptr i64 %lnjEG to i64*
  %lnjEI = load i64, i64* %lnjEH, !tbaa !4
  store i64 %lnjEI, i64* %R1_Var
  %lnjEJ = load i64*, i64** %Sp_Var
  %lnjEK = getelementptr inbounds i64, i64* %lnjEJ, i32 -1
  %lnjEL = ptrtoint i64* %lnjEK to i64
  %lnjEM = inttoptr i64 %lnjEL to i64*
  store i64* %lnjEM, i64** %Sp_Var
  %lnjEN = load i64, i64* %R1_Var
  %lnjEO = and i64 %lnjEN, 7
  %lnjEP = icmp ne i64 %lnjEO, 0
  br i1 %lnjEP, label %ujEo, label %cjE0
cjE0:
  %lnjER = load i64, i64* %R1_Var
  %lnjES = inttoptr i64 %lnjER to i64*
  %lnjET = load i64, i64* %lnjES, !tbaa !4
  %lnjEU = inttoptr i64 %lnjET to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjEV = load i64*, i64** %Sp_Var
  %lnjEW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjEU( i64* %Base_Arg, i64* %lnjEV, i64* %Hp_Arg, i64 %lnjEW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujEo:
  %lnjEX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjDZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjEY = load i64*, i64** %Sp_Var
  %lnjEZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjEX( i64* %Base_Arg, i64* %lnjEY, i64* %Hp_Arg, i64 %lnjEZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjEg:
  %lnjF0 = load i64, i64* %R1_Var
  store i64 %lnjF0, i64* %R1_Var
  %lnjF1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjF2 = bitcast i64* %lnjF1 to i64*
  %lnjF3 = load i64, i64* %lnjF2, !tbaa !5
  %lnjF4 = inttoptr i64 %lnjF3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjF5 = load i64*, i64** %Sp_Var
  %lnjF6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjF4( i64* %Base_Arg, i64* %lnjF5, i64* %Hp_Arg, i64 %lnjF6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjDZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjDZ_info$def to i8*)
define internal ghccc void @cjDZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjDZ_info$def to i64)) to i32),i32 0)}>
{
njF7:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjDZ
cjDZ:
  %lnjF8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjE5_info$def to i64
  %lnjF9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnjF8, i64* %lnjF9, !tbaa !2
  %lnjFa = add i64 %R1_Arg, 7
  %lnjFb = inttoptr i64 %lnjFa to i64*
  %lnjFc = load i64, i64* %lnjFb, !tbaa !4
  store i64 %lnjFc, i64* %R2_Var
  %lnjFd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwray_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjFe = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjFd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjFe, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjE5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjE5_info$def to i8*)
define internal ghccc void @cjE5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njFf:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjE5
cjE5:
  %lnjFg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjE9_info$def to i64
  %lnjFh = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnjFg, i64* %lnjFh, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnjFi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwgo2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjFj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjFi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjFj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjE9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjE9_info$def to i8*)
define internal ghccc void @cjE9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njFk:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjE9
cjE9:
  %lnjFl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjEd_info$def to i64
  %lnjFm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnjFl, i64* %lnjFm, !tbaa !2
  %lnjFn = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnjFo = add i64 %lnjFn, 1
  store i64 %lnjFo, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnjFp = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjFq = load i64, i64* %R2_Var
  %lnjFr = load i64, i64* %R3_Var
  %lnjFs = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjFp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjFq, i64 %lnjFr, i64 %lnjFs, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjEd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjEd_info$def to i8*)
define internal ghccc void @cjEd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
njFt:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjEd
cjEd:
  %lnjFu = load i64*, i64** %Hp_Var
  %lnjFv = getelementptr inbounds i64, i64* %lnjFu, i32 3
  %lnjFw = ptrtoint i64* %lnjFv to i64
  %lnjFx = inttoptr i64 %lnjFw to i64*
  store i64* %lnjFx, i64** %Hp_Var
  %lnjFy = load i64*, i64** %Hp_Var
  %lnjFz = ptrtoint i64* %lnjFy to i64
  %lnjFA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjFB = bitcast i64* %lnjFA to i64*
  %lnjFC = load i64, i64* %lnjFB, !tbaa !5
  %lnjFD = icmp ugt i64 %lnjFz, %lnjFC
  %lnjFE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjFD, i1 0 )
  br i1 %lnjFE, label %cjEn, label %cjEm
cjEm:
  %lnjFG = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnjFF = load i64*, i64** %Hp_Var
  %lnjFH = getelementptr inbounds i64, i64* %lnjFF, i32 -2
  store i64 %lnjFG, i64* %lnjFH, !tbaa !3
  %lnjFJ = load i64, i64* %R1_Var
  %lnjFI = load i64*, i64** %Hp_Var
  %lnjFK = getelementptr inbounds i64, i64* %lnjFI, i32 -1
  store i64 %lnjFJ, i64* %lnjFK, !tbaa !3
  %lnjFM = load i64, i64* %R2_Var
  %lnjFL = load i64*, i64** %Hp_Var
  %lnjFN = getelementptr inbounds i64, i64* %lnjFL, i32 0
  store i64 %lnjFM, i64* %lnjFN, !tbaa !3
  %lnjFP = load i64*, i64** %Hp_Var
  %lnjFQ = ptrtoint i64* %lnjFP to i64
  %lnjFR = add i64 %lnjFQ, -14
  store i64 %lnjFR, i64* %R1_Var
  %lnjFS = load i64*, i64** %Sp_Var
  %lnjFT = getelementptr inbounds i64, i64* %lnjFS, i32 1
  %lnjFU = ptrtoint i64* %lnjFT to i64
  %lnjFV = inttoptr i64 %lnjFU to i64*
  store i64* %lnjFV, i64** %Sp_Var
  %lnjFW = load i64*, i64** %Sp_Var
  %lnjFX = getelementptr inbounds i64, i64* %lnjFW, i32 0
  %lnjFY = bitcast i64* %lnjFX to i64*
  %lnjFZ = load i64, i64* %lnjFY, !tbaa !2
  %lnjG0 = inttoptr i64 %lnjFZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjG1 = load i64*, i64** %Sp_Var
  %lnjG2 = load i64*, i64** %Hp_Var
  %lnjG3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjG0( i64* %Base_Arg, i64* %lnjG1, i64* %lnjG2, i64 %lnjG3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjEn:
  %lnjG4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnjG4, !tbaa !5
  %lnjG5 = load i64, i64* %R2_Var
  store i64 %lnjG5, i64* %R2_Var
  %lnjG6 = load i64, i64* %R1_Var
  store i64 %lnjG6, i64* %R1_Var
  %lnjG7 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjG8 = load i64*, i64** %Sp_Var
  %lnjG9 = load i64*, i64** %Hp_Var
  %lnjGa = load i64, i64* %R1_Var
  %lnjGb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjG7( i64* %Base_Arg, i64* %lnjG8, i64* %lnjG9, i64 %lnjGa, i64 %lnjGb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_run1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run1_info$def to i8*)
define ghccc void @Main_run1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934597, i64 3, i32 14, i32 0}>
{
njGc:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjEp
cjEp:
  %lnjGd = load i64*, i64** %Hp_Var
  %lnjGe = getelementptr inbounds i64, i64* %lnjGd, i32 3
  %lnjGf = ptrtoint i64* %lnjGe to i64
  %lnjGg = inttoptr i64 %lnjGf to i64*
  store i64* %lnjGg, i64** %Hp_Var
  %lnjGh = load i64*, i64** %Hp_Var
  %lnjGi = ptrtoint i64* %lnjGh to i64
  %lnjGj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjGk = bitcast i64* %lnjGj to i64*
  %lnjGl = load i64, i64* %lnjGk, !tbaa !5
  %lnjGm = icmp ugt i64 %lnjGi, %lnjGl
  %lnjGn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjGm, i1 0 )
  br i1 %lnjGn, label %cjEt, label %cjEs
cjEs:
  %lnjGp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Ys_info$def to i64
  %lnjGo = load i64*, i64** %Hp_Var
  %lnjGq = getelementptr inbounds i64, i64* %lnjGo, i32 -2
  store i64 %lnjGp, i64* %lnjGq, !tbaa !3
  %lnjGs = load i64, i64* %R2_Var
  %lnjGr = load i64*, i64** %Hp_Var
  %lnjGt = getelementptr inbounds i64, i64* %lnjGr, i32 0
  store i64 %lnjGs, i64* %lnjGt, !tbaa !3
  %lnjGu = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnjGv = add i64 %lnjGu, 2
  store i64 %lnjGv, i64* %R4_Var
  %lnjGw = load i64*, i64** %Hp_Var
  %lnjGx = getelementptr inbounds i64, i64* %lnjGw, i32 -2
  %lnjGy = ptrtoint i64* %lnjGx to i64
  store i64 %lnjGy, i64* %R3_Var
  %lnjGz = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %lnjGz, i64* %R2_Var
  %lnjGA = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjGB = load i64*, i64** %Hp_Var
  %lnjGC = load i64, i64* %R1_Var
  %lnjGD = load i64, i64* %R2_Var
  %lnjGE = load i64, i64* %R3_Var
  %lnjGF = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjGA( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjGB, i64 %lnjGC, i64 %lnjGD, i64 %lnjGE, i64 %lnjGF, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjEt:
  %lnjGG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnjGG, !tbaa !5
  %lnjGH = load i64, i64* %R2_Var
  store i64 %lnjGH, i64* %R2_Var
  %lnjGI = ptrtoint %Main_run1_closure_struct* @Main_run1_closure$def to i64
  store i64 %lnjGI, i64* %R1_Var
  %lnjGJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjGK = bitcast i64* %lnjGJ to i64*
  %lnjGL = load i64, i64* %lnjGK, !tbaa !5
  %lnjGM = inttoptr i64 %lnjGL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjGN = load i64*, i64** %Hp_Var
  %lnjGO = load i64, i64* %R1_Var
  %lnjGP = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjGM( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnjGN, i64 %lnjGO, i64 %lnjGP, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_run_closure_struct = type <{i64, i64}>
@Main_run_closure$def = internal global %Main_run_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run_info$def to i64), i64 0}>
@Main_run_closure = alias i8, bitcast (%Main_run_closure_struct* @Main_run_closure$def to i8*)
@Main_run_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run_info$def to i8*)
define ghccc void @Main_run_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934597, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_run1_closure_struct* @Main_run1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run_info$def to i64)) to i32),i32 0)}>
{
njGX:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjGU
cjGU:
  %lnjGY = load i64, i64* %R2_Var
  store i64 %lnjGY, i64* %R2_Var
  %lnjGZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjH0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjGZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjH0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_epsilon_closure_struct = type <{i64, double}>
@Main_epsilon_closure$def = internal global %Main_epsilon_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Dzh_con_info to i64), double 0x3EB0C6F7A0B5ED8D}>
@Main_epsilon_closure = alias i8, bitcast (%Main_epsilon_closure_struct* @Main_epsilon_closure$def to i8*)
%_ujHa_srt_struct = type <{i64, i64, i64, i64}>
%r7me_closure_struct = type <{i64, i64, i64, i64}>
@_ujHa_srt$def = internal global %_ujHa_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @base_GHCziRead_zdfReadIntzuzdsreadNumber_closure to i64), i64 ptrtoint (i8* @base_GHCziRead_zdfReadInt2_closure to i64), i64 0}>
@_ujHa_srt = internal alias i8, bitcast (%_ujHa_srt_struct* @_ujHa_srt$def to i8*)
@r7me_closure$def = internal global %r7me_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7me_info$def to i64), i64 0, i64 0, i64 0}>
@r7me_closure = internal alias i8, bitcast (%r7me_closure_struct* @r7me_closure$def to i8*)
@r7me_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7me_info$def to i8*)
define internal ghccc void @r7me_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujHa_srt_struct* @_ujHa_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7me_info$def to i64)) to i32),i32 0)}>
{
njHb:
  %lcjH4 = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjH7
cjH7:
  %lnjHc = load i64*, i64** %Sp_Var
  %lnjHd = getelementptr inbounds i64, i64* %lnjHc, i32 -2
  %lnjHe = ptrtoint i64* %lnjHd to i64
  %lnjHf = icmp ult i64 %lnjHe, %SpLim_Arg
  %lnjHg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjHf, i1 0 )
  br i1 %lnjHg, label %cjH8, label %cjH9
cjH9:
  %lnjHh = ptrtoint i64* %Base_Arg to i64
  %lnjHi = inttoptr i64 %lnjHh to i8*
  %lnjHj = load i64, i64* %R1_Var
  %lnjHk = inttoptr i64 %lnjHj to i8*
  %lnjHl = bitcast i8* @newCAF to i8* (i8*, i8*)*
  %lnjHm = call ccc i8* (i8*, i8*) %lnjHl( i8* %lnjHi, i8* %lnjHk ) nounwind
  %lnjHn = ptrtoint i8* %lnjHm to i64
  store i64 %lnjHn, i64* %lcjH4
  %lnjHo = load i64, i64* %lcjH4
  %lnjHp = icmp eq i64 %lnjHo, 0
  br i1 %lnjHp, label %cjH6, label %cjH5
cjH5:
  %lnjHr = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnjHq = load i64*, i64** %Sp_Var
  %lnjHs = getelementptr inbounds i64, i64* %lnjHq, i32 -2
  store i64 %lnjHr, i64* %lnjHs, !tbaa !2
  %lnjHu = load i64, i64* %lcjH4
  %lnjHt = load i64*, i64** %Sp_Var
  %lnjHv = getelementptr inbounds i64, i64* %lnjHt, i32 -1
  store i64 %lnjHu, i64* %lnjHv, !tbaa !2
  %lnjHw = ptrtoint i8* @base_TextziRead_readEither7_closure to i64
  %lnjHx = add i64 %lnjHw, 1
  store i64 %lnjHx, i64* %R4_Var
  %lnjHy = ptrtoint i8* @base_TextziParserCombinatorsziReadPrec_minPrec_closure to i64
  %lnjHz = add i64 %lnjHy, 1
  store i64 %lnjHz, i64* %R3_Var
  %lnjHA = ptrtoint i8* @base_GHCziRead_zdfReadInt2_closure to i64
  %lnjHB = add i64 %lnjHA, 1
  store i64 %lnjHB, i64* %R2_Var
  %lnjHC = load i64*, i64** %Sp_Var
  %lnjHD = getelementptr inbounds i64, i64* %lnjHC, i32 -2
  %lnjHE = ptrtoint i64* %lnjHD to i64
  %lnjHF = inttoptr i64 %lnjHE to i64*
  store i64* %lnjHF, i64** %Sp_Var
  %lnjHG = bitcast i8* @base_GHCziRead_zdfReadIntzuzdsreadNumber_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjHH = load i64*, i64** %Sp_Var
  %lnjHI = load i64, i64* %R1_Var
  %lnjHJ = load i64, i64* %R2_Var
  %lnjHK = load i64, i64* %R3_Var
  %lnjHL = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjHG( i64* %Base_Arg, i64* %lnjHH, i64* %Hp_Arg, i64 %lnjHI, i64 %lnjHJ, i64 %lnjHK, i64 %lnjHL, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjH6:
  %lnjHN = load i64, i64* %R1_Var
  %lnjHO = inttoptr i64 %lnjHN to i64*
  %lnjHP = load i64, i64* %lnjHO, !tbaa !4
  %lnjHQ = inttoptr i64 %lnjHP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjHR = load i64*, i64** %Sp_Var
  %lnjHS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjHQ( i64* %Base_Arg, i64* %lnjHR, i64* %Hp_Arg, i64 %lnjHS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjH8:
  %lnjHT = load i64, i64* %R1_Var
  store i64 %lnjHT, i64* %R1_Var
  %lnjHU = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjHV = bitcast i64* %lnjHU to i64*
  %lnjHW = load i64, i64* %lnjHV, !tbaa !5
  %lnjHX = inttoptr i64 %lnjHW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjHY = load i64*, i64** %Sp_Var
  %lnjHZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjHX( i64* %Base_Arg, i64* %lnjHY, i64* %Hp_Arg, i64 %lnjHZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%_ujJy_srt_struct = type <{i64, i64, i64, i64}>
%_ujJz_srt_struct = type <{i64, i64, i64, i64}>
%_ujJA_srt_struct = type <{i64, i64, i64, i64, i64, i64}>
%Main_zdwloop_closure_struct = type <{i64, i64}>
@_ujJy_srt$def = internal global %_ujJy_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r7mF_closure_struct* @r7mF_closure$def to i64), i64 ptrtoint (%r7mG_closure_struct* @r7mG_closure$def to i64), i64 0}>
@_ujJy_srt = internal alias i8, bitcast (%_ujJy_srt_struct* @_ujJy_srt$def to i8*)
@_ujJz_srt$def = internal global %_ujJz_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (%r7me_closure_struct* @r7me_closure$def to i64), i64 ptrtoint (i8* @_ujJy_srt to i64), i64 0}>
@_ujJz_srt = internal alias i8, bitcast (%_ujJz_srt_struct* @_ujJz_srt$def to i8*)
@_ujJA_srt$def = internal global %_ujJA_srt_struct<{i64 ptrtoint (i8* @stg_SRT_4_info to i64), i64 ptrtoint (i8* @base_SystemziEnvironment_getArgs2_closure to i64), i64 ptrtoint (%Main_run1_closure_struct* @Main_run1_closure$def to i64), i64 ptrtoint (%r7mH_closure_struct* @r7mH_closure$def to i64), i64 ptrtoint (i8* @_ujJz_srt to i64), i64 0}>
@_ujJA_srt = internal alias i8, bitcast (%_ujJA_srt_struct* @_ujJA_srt$def to i8*)
@Main_zdwloop_closure$def = internal global %Main_zdwloop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64), i64 0}>
@Main_zdwloop_closure = alias i8, bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*)
@s7YL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7YL_info$def to i8*)
define internal ghccc void @s7YL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 16, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJz_srt_struct* @_ujJz_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7YL_info$def to i64)) to i32),i32 0)}>
{
njJB:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjIq
cjIq:
  %lnjJC = load i64*, i64** %Sp_Var
  %lnjJD = getelementptr inbounds i64, i64* %lnjJC, i32 -2
  %lnjJE = ptrtoint i64* %lnjJD to i64
  %lnjJF = icmp ult i64 %lnjJE, %SpLim_Arg
  %lnjJG = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjJF, i1 0 )
  br i1 %lnjJG, label %cjIr, label %cjIs
cjIs:
  %lnjJI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIo_info$def to i64
  %lnjJH = load i64*, i64** %Sp_Var
  %lnjJJ = getelementptr inbounds i64, i64* %lnjJH, i32 -1
  store i64 %lnjJI, i64* %lnjJJ, !tbaa !2
  %lnjJM = load i64, i64* %R1_Var
  %lnjJN = add i64 %lnjJM, 16
  %lnjJO = inttoptr i64 %lnjJN to i64*
  %lnjJP = load i64, i64* %lnjJO, !tbaa !4
  store i64 %lnjJP, i64* %R3_Var
  %lnjJQ = ptrtoint %r7me_closure_struct* @r7me_closure$def to i64
  store i64 %lnjJQ, i64* %R2_Var
  %lnjJR = load i64*, i64** %Sp_Var
  %lnjJS = getelementptr inbounds i64, i64* %lnjJR, i32 -1
  %lnjJT = ptrtoint i64* %lnjJS to i64
  %lnjJU = inttoptr i64 %lnjJT to i64*
  store i64* %lnjJU, i64** %Sp_Var
  %lnjJV = bitcast i8* @base_TextziParserCombinatorsziReadP_run_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjJW = load i64*, i64** %Sp_Var
  %lnjJX = load i64, i64* %R1_Var
  %lnjJY = load i64, i64* %R2_Var
  %lnjJZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjJV( i64* %Base_Arg, i64* %lnjJW, i64* %Hp_Arg, i64 %lnjJX, i64 %lnjJY, i64 %lnjJZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjIr:
  %lnjK0 = load i64, i64* %R1_Var
  store i64 %lnjK0, i64* %R1_Var
  %lnjK1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnjK2 = bitcast i64* %lnjK1 to i64*
  %lnjK3 = load i64, i64* %lnjK2, !tbaa !5
  %lnjK4 = inttoptr i64 %lnjK3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjK5 = load i64*, i64** %Sp_Var
  %lnjK6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjK4( i64* %Base_Arg, i64* %lnjK5, i64* %Hp_Arg, i64 %lnjK6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjIo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIo_info$def to i8*)
define internal ghccc void @cjIo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJy_srt_struct* @_ujJy_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIo_info$def to i64)) to i32),i32 0)}>
{
njK7:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjIo
cjIo:
  %lnjK8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIv_info$def to i64
  %lnjK9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnjK8, i64* %lnjK9, !tbaa !2
  store i64 %R1_Arg, i64* %R2_Var
  %lnjKa = bitcast i8* @base_TextziRead_readEither8_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjKb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjKa( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjKb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjIv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIv_info$def to i8*)
define internal ghccc void @cjIv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJy_srt_struct* @_ujJy_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIv_info$def to i64)) to i32),i32 0)}>
{
njKc:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7YG = alloca i64, i32 1
  br label %cjIv
cjIv:
  %lnjKd = load i64, i64* %R1_Var
  %lnjKe = and i64 %lnjKd, 7
  switch i64 %lnjKe, label %cjIC [i64 1, label %cjIC
i64 2, label %cjIH]
cjIC:
  %lnjKf = ptrtoint %r7mG_closure_struct* @r7mG_closure$def to i64
  store i64 %lnjKf, i64* %R1_Var
  %lnjKg = load i64*, i64** %Sp_Var
  %lnjKh = getelementptr inbounds i64, i64* %lnjKg, i32 1
  %lnjKi = ptrtoint i64* %lnjKh to i64
  %lnjKj = inttoptr i64 %lnjKi to i64*
  store i64* %lnjKj, i64** %Sp_Var
  %lnjKl = load i64, i64* %R1_Var
  %lnjKm = inttoptr i64 %lnjKl to i64*
  %lnjKn = load i64, i64* %lnjKm, !tbaa !4
  %lnjKo = inttoptr i64 %lnjKn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjKp = load i64*, i64** %Sp_Var
  %lnjKq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjKo( i64* %Base_Arg, i64* %lnjKp, i64* %Hp_Arg, i64 %lnjKq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjIH:
  %lnjKs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIF_info$def to i64
  %lnjKr = load i64*, i64** %Sp_Var
  %lnjKt = getelementptr inbounds i64, i64* %lnjKr, i32 -1
  store i64 %lnjKs, i64* %lnjKt, !tbaa !2
  %lnjKw = load i64, i64* %R1_Var
  %lnjKx = add i64 %lnjKw, 6
  %lnjKy = inttoptr i64 %lnjKx to i64*
  %lnjKz = load i64, i64* %lnjKy, !tbaa !4
  store i64 %lnjKz, i64* %ls7YG
  %lnjKC = load i64, i64* %R1_Var
  %lnjKD = add i64 %lnjKC, 14
  %lnjKE = inttoptr i64 %lnjKD to i64*
  %lnjKF = load i64, i64* %lnjKE, !tbaa !4
  store i64 %lnjKF, i64* %R1_Var
  %lnjKH = load i64, i64* %ls7YG
  %lnjKG = load i64*, i64** %Sp_Var
  %lnjKI = getelementptr inbounds i64, i64* %lnjKG, i32 0
  store i64 %lnjKH, i64* %lnjKI, !tbaa !2
  %lnjKJ = load i64*, i64** %Sp_Var
  %lnjKK = getelementptr inbounds i64, i64* %lnjKJ, i32 -1
  %lnjKL = ptrtoint i64* %lnjKK to i64
  %lnjKM = inttoptr i64 %lnjKL to i64*
  store i64* %lnjKM, i64** %Sp_Var
  %lnjKN = load i64, i64* %R1_Var
  %lnjKO = and i64 %lnjKN, 7
  %lnjKP = icmp ne i64 %lnjKO, 0
  br i1 %lnjKP, label %ujIV, label %cjII
cjII:
  %lnjKR = load i64, i64* %R1_Var
  %lnjKS = inttoptr i64 %lnjKR to i64*
  %lnjKT = load i64, i64* %lnjKS, !tbaa !4
  %lnjKU = inttoptr i64 %lnjKT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjKV = load i64*, i64** %Sp_Var
  %lnjKW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjKU( i64* %Base_Arg, i64* %lnjKV, i64* %Hp_Arg, i64 %lnjKW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujIV:
  %lnjKX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjKY = load i64*, i64** %Sp_Var
  %lnjKZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjKX( i64* %Base_Arg, i64* %lnjKY, i64* %Hp_Arg, i64 %lnjKZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjIF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIF_info$def to i8*)
define internal ghccc void @cjIF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%r7mF_closure_struct* @r7mF_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIF_info$def to i64)) to i32),i32 0)}>
{
njL0:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjIF
cjIF:
  %lnjL1 = load i64, i64* %R1_Var
  %lnjL2 = and i64 %lnjL1, 7
  switch i64 %lnjL2, label %cjIO [i64 1, label %cjIO
i64 2, label %cjIS]
cjIO:
  %lnjL3 = load i64*, i64** %Sp_Var
  %lnjL4 = getelementptr inbounds i64, i64* %lnjL3, i32 1
  %lnjL5 = bitcast i64* %lnjL4 to i64*
  %lnjL6 = load i64, i64* %lnjL5, !tbaa !2
  %lnjL7 = and i64 %lnjL6, -8
  store i64 %lnjL7, i64* %R1_Var
  %lnjL8 = load i64*, i64** %Sp_Var
  %lnjL9 = getelementptr inbounds i64, i64* %lnjL8, i32 2
  %lnjLa = ptrtoint i64* %lnjL9 to i64
  %lnjLb = inttoptr i64 %lnjLa to i64*
  store i64* %lnjLb, i64** %Sp_Var
  %lnjLd = load i64, i64* %R1_Var
  %lnjLe = inttoptr i64 %lnjLd to i64*
  %lnjLf = load i64, i64* %lnjLe, !tbaa !4
  %lnjLg = inttoptr i64 %lnjLf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjLh = load i64*, i64** %Sp_Var
  %lnjLi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjLg( i64* %Base_Arg, i64* %lnjLh, i64* %Hp_Arg, i64 %lnjLi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjIS:
  %lnjLj = ptrtoint %r7mF_closure_struct* @r7mF_closure$def to i64
  store i64 %lnjLj, i64* %R1_Var
  %lnjLk = load i64*, i64** %Sp_Var
  %lnjLl = getelementptr inbounds i64, i64* %lnjLk, i32 2
  %lnjLm = ptrtoint i64* %lnjLl to i64
  %lnjLn = inttoptr i64 %lnjLm to i64*
  store i64* %lnjLn, i64** %Sp_Var
  %lnjLp = load i64, i64* %R1_Var
  %lnjLq = inttoptr i64 %lnjLp to i64*
  %lnjLr = load i64, i64* %lnjLq, !tbaa !4
  %lnjLs = inttoptr i64 %lnjLr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjLt = load i64*, i64** %Sp_Var
  %lnjLu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjLs( i64* %Base_Arg, i64* %lnjLt, i64* %Hp_Arg, i64 %lnjLu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Main_zdwloop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i8*)
define ghccc void @Main_zdwloop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934596, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJA_srt_struct* @_ujJA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64)) to i32),i32 0)}>
{
njLv:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjIZ
cjIZ:
  %lnjLw = load i64*, i64** %Sp_Var
  %lnjLx = getelementptr inbounds i64, i64* %lnjLw, i32 -3
  %lnjLy = ptrtoint i64* %lnjLx to i64
  %lnjLz = icmp ult i64 %lnjLy, %SpLim_Arg
  %lnjLA = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjLz, i1 0 )
  br i1 %lnjLA, label %cjJ0, label %ujJo
ujJo:
  %lnjLC = load i64, i64* %R2_Var
  %lnjLB = load i64*, i64** %Sp_Var
  %lnjLD = getelementptr inbounds i64, i64* %lnjLB, i32 -1
  store i64 %lnjLC, i64* %lnjLD, !tbaa !2
  %lnjLE = load i64*, i64** %Sp_Var
  %lnjLF = getelementptr inbounds i64, i64* %lnjLE, i32 -1
  %lnjLG = ptrtoint i64* %lnjLF to i64
  %lnjLH = inttoptr i64 %lnjLG to i64*
  store i64* %lnjLH, i64** %Sp_Var
  %lnjLI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjI1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjLJ = load i64*, i64** %Sp_Var
  %lnjLK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjLI( i64* %Base_Arg, i64* %lnjLJ, i64* %Hp_Arg, i64 %lnjLK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjJ0:
  %lnjLL = load i64, i64* %R2_Var
  store i64 %lnjLL, i64* %R2_Var
  %lnjLM = ptrtoint %Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64
  store i64 %lnjLM, i64* %R1_Var
  %lnjLN = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjLO = bitcast i64* %lnjLN to i64*
  %lnjLP = load i64, i64* %lnjLO, !tbaa !5
  %lnjLQ = inttoptr i64 %lnjLP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjLR = load i64*, i64** %Sp_Var
  %lnjLS = load i64, i64* %R1_Var
  %lnjLT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjLQ( i64* %Base_Arg, i64* %lnjLR, i64* %Hp_Arg, i64 %lnjLS, i64 %lnjLT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cjI1 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjI1$def to i8*)
define internal ghccc void @_cjI1$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
njLU:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjI1
cjI1:
  %lnjLV = load i64*, i64** %Sp_Var
  %lnjLW = getelementptr inbounds i64, i64* %lnjLV, i32 0
  %lnjLX = bitcast i64* %lnjLW to i64*
  %lnjLY = load i64, i64* %lnjLX, !tbaa !2
  %lnjLZ = icmp sle i64 %lnjLY, 0
  %lnjM0 = zext i1 %lnjLZ to i64
  switch i64 %lnjM0, label %cjIX [i64 1, label %cjIY]
cjIX:
  %lnjM2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI7_info$def to i64
  %lnjM1 = load i64*, i64** %Sp_Var
  %lnjM3 = getelementptr inbounds i64, i64* %lnjM1, i32 -1
  store i64 %lnjM2, i64* %lnjM3, !tbaa !2
  %lnjM4 = ptrtoint i8* @base_SystemziEnvironment_getArgs2_closure to i64
  %lnjM5 = add i64 %lnjM4, 2
  store i64 %lnjM5, i64* %R4_Var
  store i64 4, i64* %R3_Var
  store i64 4, i64* %R2_Var
  %lnjM6 = load i64*, i64** %Sp_Var
  %lnjM7 = getelementptr inbounds i64, i64* %lnjM6, i32 -1
  %lnjM8 = ptrtoint i64* %lnjM7 to i64
  %lnjM9 = inttoptr i64 %lnjM8 to i64*
  store i64* %lnjM9, i64** %Sp_Var
  %lnjMa = bitcast i8* @base_ForeignziMarshalziAlloc_zdwallocaBytesAligned_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjMb = load i64*, i64** %Sp_Var
  %lnjMc = load i64, i64* %R1_Var
  %lnjMd = load i64, i64* %R2_Var
  %lnjMe = load i64, i64* %R3_Var
  %lnjMf = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjMa( i64* %Base_Arg, i64* %lnjMb, i64* %Hp_Arg, i64 %lnjMc, i64 %lnjMd, i64 %lnjMe, i64 %lnjMf, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjIY:
  %lnjMg = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %lnjMh = add i64 %lnjMg, 1
  store i64 %lnjMh, i64* %R1_Var
  %lnjMi = load i64*, i64** %Sp_Var
  %lnjMj = getelementptr inbounds i64, i64* %lnjMi, i32 1
  %lnjMk = ptrtoint i64* %lnjMj to i64
  %lnjMl = inttoptr i64 %lnjMk to i64*
  store i64* %lnjMl, i64** %Sp_Var
  %lnjMm = load i64*, i64** %Sp_Var
  %lnjMn = getelementptr inbounds i64, i64* %lnjMm, i32 0
  %lnjMo = bitcast i64* %lnjMn to i64*
  %lnjMp = load i64, i64* %lnjMo, !tbaa !2
  %lnjMq = inttoptr i64 %lnjMp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjMr = load i64*, i64** %Sp_Var
  %lnjMs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjMq( i64* %Base_Arg, i64* %lnjMr, i64* %Hp_Arg, i64 %lnjMs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjI7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI7_info$def to i8*)
define internal ghccc void @cjI7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJA_srt_struct* @_ujJA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI7_info$def to i64)) to i32),i32 0)}>
{
njMt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjI7
cjI7:
  %lnjMu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI9_info$def to i64
  %lnjMv = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnjMu, i64* %lnjMv, !tbaa !2
  %lnjMw = load i64, i64* %R1_Var
  store i64 %lnjMw, i64* %R1_Var
  %lnjMx = load i64, i64* %R1_Var
  %lnjMy = and i64 %lnjMx, 7
  %lnjMz = icmp ne i64 %lnjMy, 0
  br i1 %lnjMz, label %ujJs, label %cjIa
cjIa:
  %lnjMB = load i64, i64* %R1_Var
  %lnjMC = inttoptr i64 %lnjMB to i64*
  %lnjMD = load i64, i64* %lnjMC, !tbaa !4
  %lnjME = inttoptr i64 %lnjMD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjMF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjME( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjMF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujJs:
  %lnjMG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjMH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjMG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjMH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjI9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI9_info$def to i8*)
define internal ghccc void @cjI9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJA_srt_struct* @_ujJA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjI9_info$def to i64)) to i32),i32 0)}>
{
njMI:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7YB = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjI9
cjI9:
  %lnjMJ = load i64, i64* %R1_Var
  %lnjMK = and i64 %lnjMJ, 7
  switch i64 %lnjMK, label %ujJp [i64 1, label %ujJp
i64 2, label %cjJ8]
ujJp:
  %lnjML = load i64*, i64** %Sp_Var
  %lnjMM = getelementptr inbounds i64, i64* %lnjML, i32 2
  %lnjMN = ptrtoint i64* %lnjMM to i64
  %lnjMO = inttoptr i64 %lnjMN to i64*
  store i64* %lnjMO, i64** %Sp_Var
  %lnjMP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjJ6$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjMQ = load i64*, i64** %Sp_Var
  %lnjMR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjMP( i64* %Base_Arg, i64* %lnjMQ, i64* %Hp_Arg, i64 %lnjMR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjJ8:
  %lnjMT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIf_info$def to i64
  %lnjMS = load i64*, i64** %Sp_Var
  %lnjMU = getelementptr inbounds i64, i64* %lnjMS, i32 -1
  store i64 %lnjMT, i64* %lnjMU, !tbaa !2
  %lnjMX = load i64, i64* %R1_Var
  %lnjMY = add i64 %lnjMX, 6
  %lnjMZ = inttoptr i64 %lnjMY to i64*
  %lnjN0 = load i64, i64* %lnjMZ, !tbaa !4
  store i64 %lnjN0, i64* %ls7YB
  %lnjN3 = load i64, i64* %R1_Var
  %lnjN4 = add i64 %lnjN3, 14
  %lnjN5 = inttoptr i64 %lnjN4 to i64*
  %lnjN6 = load i64, i64* %lnjN5, !tbaa !4
  store i64 %lnjN6, i64* %R1_Var
  %lnjN8 = load i64, i64* %ls7YB
  %lnjN7 = load i64*, i64** %Sp_Var
  %lnjN9 = getelementptr inbounds i64, i64* %lnjN7, i32 0
  store i64 %lnjN8, i64* %lnjN9, !tbaa !2
  %lnjNa = load i64*, i64** %Sp_Var
  %lnjNb = getelementptr inbounds i64, i64* %lnjNa, i32 -1
  %lnjNc = ptrtoint i64* %lnjNb to i64
  %lnjNd = inttoptr i64 %lnjNc to i64*
  store i64* %lnjNd, i64** %Sp_Var
  %lnjNe = load i64, i64* %R1_Var
  %lnjNf = and i64 %lnjNe, 7
  %lnjNg = icmp ne i64 %lnjNf, 0
  br i1 %lnjNg, label %ujJt, label %cjIg
cjIg:
  %lnjNi = load i64, i64* %R1_Var
  %lnjNj = inttoptr i64 %lnjNi to i64*
  %lnjNk = load i64, i64* %lnjNj, !tbaa !4
  %lnjNl = inttoptr i64 %lnjNk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjNm = load i64*, i64** %Sp_Var
  %lnjNn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjNl( i64* %Base_Arg, i64* %lnjNm, i64* %Hp_Arg, i64 %lnjNn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujJt:
  %lnjNo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjNp = load i64*, i64** %Sp_Var
  %lnjNq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjNo( i64* %Base_Arg, i64* %lnjNp, i64* %Hp_Arg, i64 %lnjNq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjIf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIf_info$def to i8*)
define internal ghccc void @cjIf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 130, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJA_srt_struct* @_ujJA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjIf_info$def to i64)) to i32),i32 0)}>
{
njNr:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjIf
cjIf:
  %lnjNs = load i64, i64* %R1_Var
  %lnjNt = and i64 %lnjNs, 7
  switch i64 %lnjNt, label %cjJb [i64 1, label %cjJb
i64 2, label %ujJq]
cjJb:
  %lnjNu = load i64*, i64** %Hp_Var
  %lnjNv = getelementptr inbounds i64, i64* %lnjNu, i32 3
  %lnjNw = ptrtoint i64* %lnjNv to i64
  %lnjNx = inttoptr i64 %lnjNw to i64*
  store i64* %lnjNx, i64** %Hp_Var
  %lnjNy = load i64*, i64** %Hp_Var
  %lnjNz = ptrtoint i64* %lnjNy to i64
  %lnjNA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnjNB = bitcast i64* %lnjNA to i64*
  %lnjNC = load i64, i64* %lnjNB, !tbaa !5
  %lnjND = icmp ugt i64 %lnjNz, %lnjNC
  %lnjNE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjND, i1 0 )
  br i1 %lnjNE, label %cjJe, label %cjJd
cjJd:
  %lnjNG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7YL_info$def to i64
  %lnjNF = load i64*, i64** %Hp_Var
  %lnjNH = getelementptr inbounds i64, i64* %lnjNF, i32 -2
  store i64 %lnjNG, i64* %lnjNH, !tbaa !3
  %lnjNJ = load i64*, i64** %Sp_Var
  %lnjNK = getelementptr inbounds i64, i64* %lnjNJ, i32 1
  %lnjNL = bitcast i64* %lnjNK to i64*
  %lnjNM = load i64, i64* %lnjNL, !tbaa !2
  %lnjNI = load i64*, i64** %Hp_Var
  %lnjNN = getelementptr inbounds i64, i64* %lnjNI, i32 0
  store i64 %lnjNM, i64* %lnjNN, !tbaa !3
  %lnjNP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjJ9_info$def to i64
  %lnjNO = load i64*, i64** %Sp_Var
  %lnjNQ = getelementptr inbounds i64, i64* %lnjNO, i32 1
  store i64 %lnjNP, i64* %lnjNQ, !tbaa !2
  %lnjNR = load i64*, i64** %Hp_Var
  %lnjNS = getelementptr inbounds i64, i64* %lnjNR, i32 -2
  %lnjNT = ptrtoint i64* %lnjNS to i64
  store i64 %lnjNT, i64* %R2_Var
  %lnjNU = load i64*, i64** %Sp_Var
  %lnjNV = getelementptr inbounds i64, i64* %lnjNU, i32 1
  %lnjNW = ptrtoint i64* %lnjNV to i64
  %lnjNX = inttoptr i64 %lnjNW to i64*
  store i64* %lnjNX, i64** %Sp_Var
  %lnjNY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_run1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjNZ = load i64*, i64** %Sp_Var
  %lnjO0 = load i64*, i64** %Hp_Var
  %lnjO1 = load i64, i64* %R1_Var
  %lnjO2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjNY( i64* %Base_Arg, i64* %lnjNZ, i64* %lnjO0, i64 %lnjO1, i64 %lnjO2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjJe:
  %lnjO3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnjO3, !tbaa !5
  %lnjO4 = load i64, i64* %R1_Var
  store i64 %lnjO4, i64* %R1_Var
  %lnjO5 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjO6 = load i64*, i64** %Sp_Var
  %lnjO7 = load i64*, i64** %Hp_Var
  %lnjO8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjO5( i64* %Base_Arg, i64* %lnjO6, i64* %lnjO7, i64 %lnjO8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujJq:
  %lnjO9 = load i64*, i64** %Sp_Var
  %lnjOa = getelementptr inbounds i64, i64* %lnjO9, i32 3
  %lnjOb = ptrtoint i64* %lnjOa to i64
  %lnjOc = inttoptr i64 %lnjOb to i64*
  store i64* %lnjOc, i64** %Sp_Var
  %lnjOd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjJ6$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjOe = load i64*, i64** %Sp_Var
  %lnjOf = load i64*, i64** %Hp_Var
  %lnjOg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjOd( i64* %Base_Arg, i64* %lnjOe, i64* %lnjOf, i64 %lnjOg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjJ9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjJ9_info$def to i8*)
define internal ghccc void @cjJ9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_ujJA_srt_struct* @_ujJA_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjJ9_info$def to i64)) to i32),i32 0)}>
{
njOh:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjJ9
cjJ9:
  %lnjOj = load i64*, i64** %Sp_Var
  %lnjOk = getelementptr inbounds i64, i64* %lnjOj, i32 1
  %lnjOl = bitcast i64* %lnjOk to i64*
  %lnjOm = load i64, i64* %lnjOl, !tbaa !2
  %lnjOn = add i64 %lnjOm, -1
  %lnjOi = load i64*, i64** %Sp_Var
  %lnjOo = getelementptr inbounds i64, i64* %lnjOi, i32 1
  store i64 %lnjOn, i64* %lnjOo, !tbaa !2
  %lnjOp = load i64*, i64** %Sp_Var
  %lnjOq = getelementptr inbounds i64, i64* %lnjOp, i32 1
  %lnjOr = ptrtoint i64* %lnjOq to i64
  %lnjOs = inttoptr i64 %lnjOr to i64*
  store i64* %lnjOs, i64** %Sp_Var
  %lnjOt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjI1$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjOu = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjOt( i64* %Base_Arg, i64* %lnjOu, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@_cjJ6 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cjJ6$def to i8*)
define internal ghccc void @_cjJ6$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
njOv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjJ6
cjJ6:
  %lnjOw = ptrtoint %r7mH_closure_struct* @r7mH_closure$def to i64
  store i64 %lnjOw, i64* %R1_Var
  %lnjOx = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjOy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjOx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjOy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_mainzuloop_closure_struct = type <{i64, i64}>
@Main_mainzuloop_closure$def = internal global %Main_mainzuloop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i64), i64 0}>
@Main_mainzuloop_closure = alias i8, bitcast (%Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i8*)
@Main_mainzuloop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i8*)
define ghccc void @Main_mainzuloop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934597, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_mainzuloop_info$def to i64)) to i32),i32 0)}>
{
njON:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %cjOG
cjOG:
  %lnjOO = load i64*, i64** %Sp_Var
  %lnjOP = getelementptr inbounds i64, i64* %lnjOO, i32 -1
  %lnjOQ = ptrtoint i64* %lnjOP to i64
  %lnjOR = icmp ult i64 %lnjOQ, %SpLim_Arg
  %lnjOS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnjOR, i1 0 )
  br i1 %lnjOS, label %cjOH, label %cjOI
cjOI:
  %lnjOU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjOD_info$def to i64
  %lnjOT = load i64*, i64** %Sp_Var
  %lnjOV = getelementptr inbounds i64, i64* %lnjOT, i32 -1
  store i64 %lnjOU, i64* %lnjOV, !tbaa !2
  %lnjOW = load i64, i64* %R2_Var
  store i64 %lnjOW, i64* %R1_Var
  %lnjOX = load i64*, i64** %Sp_Var
  %lnjOY = getelementptr inbounds i64, i64* %lnjOX, i32 -1
  %lnjOZ = ptrtoint i64* %lnjOY to i64
  %lnjP0 = inttoptr i64 %lnjOZ to i64*
  store i64* %lnjP0, i64** %Sp_Var
  %lnjP1 = load i64, i64* %R1_Var
  %lnjP2 = and i64 %lnjP1, 7
  %lnjP3 = icmp ne i64 %lnjP2, 0
  br i1 %lnjP3, label %ujOM, label %cjOE
cjOE:
  %lnjP5 = load i64, i64* %R1_Var
  %lnjP6 = inttoptr i64 %lnjP5 to i64*
  %lnjP7 = load i64, i64* %lnjP6, !tbaa !4
  %lnjP8 = inttoptr i64 %lnjP7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjP9 = load i64*, i64** %Sp_Var
  %lnjPa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjP8( i64* %Base_Arg, i64* %lnjP9, i64* %Hp_Arg, i64 %lnjPa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ujOM:
  %lnjPb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjOD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjPc = load i64*, i64** %Sp_Var
  %lnjPd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjPb( i64* %Base_Arg, i64* %lnjPc, i64* %Hp_Arg, i64 %lnjPd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cjOH:
  %lnjPe = load i64, i64* %R2_Var
  store i64 %lnjPe, i64* %R2_Var
  %lnjPf = ptrtoint %Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i64
  store i64 %lnjPf, i64* %R1_Var
  %lnjPg = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnjPh = bitcast i64* %lnjPg to i64*
  %lnjPi = load i64, i64* %lnjPh, !tbaa !5
  %lnjPj = inttoptr i64 %lnjPi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjPk = load i64*, i64** %Sp_Var
  %lnjPl = load i64, i64* %R1_Var
  %lnjPm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjPj( i64* %Base_Arg, i64* %lnjPk, i64* %Hp_Arg, i64 %lnjPl, i64 %lnjPm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cjOD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjOD_info$def to i8*)
define internal ghccc void @cjOD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cjOD_info$def to i64)) to i32),i32 0)}>
{
njPn:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %cjOD
cjOD:
  %lnjPo = add i64 %R1_Arg, 7
  %lnjPp = inttoptr i64 %lnjPo to i64*
  %lnjPq = load i64, i64* %lnjPp, !tbaa !4
  store i64 %lnjPq, i64* %R2_Var
  %lnjPr = load i64*, i64** %Sp_Var
  %lnjPs = getelementptr inbounds i64, i64* %lnjPr, i32 1
  %lnjPt = ptrtoint i64* %lnjPs to i64
  %lnjPu = inttoptr i64 %lnjPt to i64*
  store i64* %lnjPu, i64** %Sp_Var
  %lnjPv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjPw = load i64*, i64** %Sp_Var
  %lnjPx = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjPv( i64* %Base_Arg, i64* %lnjPw, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjPx, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)
@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)) to i32),i32 0)}>
{
njPF:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjPC
cjPC:
  store i64 100, i64* %R2_Var
  %lnjPG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjPH = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjPG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjPH, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)
@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)) to i32),i32 0)}>
{
njPP:
  br label %cjPM
cjPM:
  %lnjPQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjPQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Main_main2_closure_struct = type <{i64, i64, i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)
@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
njPY:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %cjPV
cjPV:
  %lnjPZ = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %lnjQ0 = add i64 %lnjPZ, 1
  store i64 %lnjQ0, i64* %R2_Var
  %lnjQ1 = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjQ2 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQ1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnjQ2, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)
@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)) to i32),i32 0)}>
{
njQa:
  br label %cjQ7
cjQ7:
  %lnjQb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijQd_str_struct = type <{[17 x i8]}>
@ijQd_str$def = internal constant %ijQd_str_struct<{[17 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 83, i8 112, i8 104, i8 101, i8 114, i8 101, i8 0]}>, align 1
@ijQd_str = internal alias i8, bitcast (%ijQd_str_struct* @ijQd_str$def to i8*)
@Main_Sphere_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Sphere_con_info$def to i8*)
define ghccc void @Main_Sphere_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijQd_str_struct* @ijQd_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Sphere_con_info$def to i64)),i64 0), i64 3, i32 1, i32 0}>
{
njQe:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjQc
cjQc:
  %lnjQg = load i64, i64* %R1_Var
  %lnjQh = add i64 %lnjQg, 1
  store i64 %lnjQh, i64* %R1_Var
  %lnjQi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjQj = bitcast i64* %lnjQi to i64*
  %lnjQk = load i64, i64* %lnjQj, !tbaa !2
  %lnjQl = inttoptr i64 %lnjQk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjQm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjQm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijQo_str_struct = type <{[18 x i8]}>
@ijQo_str$def = internal constant %ijQo_str_struct<{[18 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 65, i8 109, i8 98, i8 105, i8 101, i8 110, i8 116, i8 0]}>, align 1
@ijQo_str = internal alias i8, bitcast (%ijQo_str_struct* @ijQo_str$def to i8*)
@Main_Ambient_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Ambient_con_info$def to i8*)
define ghccc void @Main_Ambient_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijQo_str_struct* @ijQo_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Ambient_con_info$def to i64)),i64 0), i64 1, i32 2, i32 0}>
{
njQp:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjQn
cjQn:
  %lnjQr = load i64, i64* %R1_Var
  %lnjQs = add i64 %lnjQr, 1
  store i64 %lnjQs, i64* %R1_Var
  %lnjQt = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjQu = bitcast i64* %lnjQt to i64*
  %lnjQv = load i64, i64* %lnjQu, !tbaa !2
  %lnjQw = inttoptr i64 %lnjQv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjQx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjQx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijQz_str_struct = type <{[18 x i8]}>
@ijQz_str$def = internal constant %ijQz_str_struct<{[18 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 68, i8 105, i8 102, i8 102, i8 117, i8 115, i8 101, i8 0]}>, align 1
@ijQz_str = internal alias i8, bitcast (%ijQz_str_struct* @ijQz_str$def to i8*)
@Main_Diffuse_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Diffuse_con_info$def to i8*)
define ghccc void @Main_Diffuse_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijQz_str_struct* @ijQz_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Diffuse_con_info$def to i64)),i64 0), i64 1, i32 2, i32 1}>
{
njQA:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjQy
cjQy:
  %lnjQC = load i64, i64* %R1_Var
  %lnjQD = add i64 %lnjQC, 2
  store i64 %lnjQD, i64* %R1_Var
  %lnjQE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjQF = bitcast i64* %lnjQE to i64*
  %lnjQG = load i64, i64* %lnjQF, !tbaa !2
  %lnjQH = inttoptr i64 %lnjQG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjQI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjQI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijQK_str_struct = type <{[19 x i8]}>
@ijQK_str$def = internal constant %ijQK_str_struct<{[19 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 83, i8 112, i8 101, i8 99, i8 117, i8 108, i8 97, i8 114, i8 0]}>, align 1
@ijQK_str = internal alias i8, bitcast (%ijQK_str_struct* @ijQK_str$def to i8*)
@Main_Specular_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specular_con_info$def to i8*)
define ghccc void @Main_Specular_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijQK_str_struct* @ijQK_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specular_con_info$def to i64)),i64 0), i64 1, i32 2, i32 2}>
{
njQL:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjQJ
cjQJ:
  %lnjQN = load i64, i64* %R1_Var
  %lnjQO = add i64 %lnjQN, 3
  store i64 %lnjQO, i64* %R1_Var
  %lnjQP = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjQQ = bitcast i64* %lnjQP to i64*
  %lnjQR = load i64, i64* %lnjQQ, !tbaa !2
  %lnjQS = inttoptr i64 %lnjQR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjQT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjQS( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjQT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijQV_str_struct = type <{[18 x i8]}>
@ijQV_str$def = internal constant %ijQV_str_struct<{[18 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 83, i8 112, i8 101, i8 99, i8 112, i8 111, i8 119, i8 0]}>, align 1
@ijQV_str = internal alias i8, bitcast (%ijQV_str_struct* @ijQV_str$def to i8*)
@Main_Specpow_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specpow_con_info$def to i8*)
define ghccc void @Main_Specpow_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijQV_str_struct* @ijQV_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Specpow_con_info$def to i64)),i64 0), i64 1, i32 2, i32 3}>
{
njQW:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjQU
cjQU:
  %lnjQY = load i64, i64* %R1_Var
  %lnjQZ = add i64 %lnjQY, 4
  store i64 %lnjQZ, i64* %R1_Var
  %lnjR0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjR1 = bitcast i64* %lnjR0 to i64*
  %lnjR2 = load i64, i64* %lnjR1, !tbaa !2
  %lnjR3 = inttoptr i64 %lnjR2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjR4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjR3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjR4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijR6_str_struct = type <{[18 x i8]}>
@ijR6_str$def = internal constant %ijR6_str_struct<{[18 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 82, i8 101, i8 102, i8 108, i8 101, i8 99, i8 116, i8 0]}>, align 1
@ijR6_str = internal alias i8, bitcast (%ijR6_str_struct* @ijR6_str$def to i8*)
@Main_Reflect_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Reflect_con_info$def to i8*)
define ghccc void @Main_Reflect_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijR6_str_struct* @ijR6_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Reflect_con_info$def to i64)),i64 0), i64 1, i32 2, i32 4}>
{
njR7:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjR5
cjR5:
  %lnjR9 = load i64, i64* %R1_Var
  %lnjRa = add i64 %lnjR9, 5
  store i64 %lnjRa, i64* %R1_Var
  %lnjRb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjRc = bitcast i64* %lnjRb to i64*
  %lnjRd = load i64, i64* %lnjRc, !tbaa !2
  %lnjRe = inttoptr i64 %lnjRd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjRf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjRe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjRf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijRh_str_struct = type <{[19 x i8]}>
@ijRh_str$def = internal constant %ijRh_str_struct<{[19 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 84, i8 114, i8 97, i8 110, i8 115, i8 109, i8 105, i8 116, i8 0]}>, align 1
@ijRh_str = internal alias i8, bitcast (%ijRh_str_struct* @ijRh_str$def to i8*)
@Main_Transmit_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Transmit_con_info$def to i8*)
define ghccc void @Main_Transmit_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijRh_str_struct* @ijRh_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Transmit_con_info$def to i64)),i64 0), i64 1, i32 2, i32 5}>
{
njRi:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjRg
cjRg:
  %lnjRk = load i64, i64* %R1_Var
  %lnjRl = add i64 %lnjRk, 6
  store i64 %lnjRl, i64* %R1_Var
  %lnjRm = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjRn = bitcast i64* %lnjRm to i64*
  %lnjRo = load i64, i64* %lnjRn, !tbaa !2
  %lnjRp = inttoptr i64 %lnjRo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjRq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjRp( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjRq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijRs_str_struct = type <{[18 x i8]}>
@ijRs_str$def = internal constant %ijRs_str_struct<{[18 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 82, i8 101, i8 102, i8 114, i8 97, i8 99, i8 116, i8 0]}>, align 1
@ijRs_str = internal alias i8, bitcast (%ijRs_str_struct* @ijRs_str$def to i8*)
@Main_Refract_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Refract_con_info$def to i8*)
define ghccc void @Main_Refract_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijRs_str_struct* @ijRs_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Refract_con_info$def to i64)),i64 0), i64 1, i32 2, i32 6}>
{
njRt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjRr
cjRr:
  %lnjRv = load i64, i64* %R1_Var
  %lnjRw = add i64 %lnjRv, 7
  store i64 %lnjRw, i64* %R1_Var
  %lnjRx = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjRy = bitcast i64* %lnjRx to i64*
  %lnjRz = load i64, i64* %lnjRy, !tbaa !2
  %lnjRA = inttoptr i64 %lnjRz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjRB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjRA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjRB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijRD_str_struct = type <{[15 x i8]}>
@ijRD_str$def = internal constant %ijRD_str_struct<{[15 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 66, i8 111, i8 100, i8 121, i8 0]}>, align 1
@ijRD_str = internal alias i8, bitcast (%ijRD_str_struct* @ijRD_str$def to i8*)
@Main_Body_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Body_con_info$def to i8*)
define ghccc void @Main_Body_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijRD_str_struct* @ijRD_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Body_con_info$def to i64)),i64 0), i64 1, i32 2, i32 7}>
{
njRE:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjRC
cjRC:
  %lnjRG = load i64, i64* %R1_Var
  %lnjRH = add i64 %lnjRG, 7
  store i64 %lnjRH, i64* %R1_Var
  %lnjRI = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjRJ = bitcast i64* %lnjRI to i64*
  %lnjRK = load i64, i64* %lnjRJ, !tbaa !2
  %lnjRL = inttoptr i64 %lnjRK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjRM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjRL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjRM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijRO_str_struct = type <{[22 x i8]}>
@ijRO_str$def = internal constant %ijRO_str_struct<{[22 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 68, i8 105, i8 114, i8 101, i8 99, i8 116, i8 105, i8 111, i8 110, i8 97, i8 108, i8 0]}>, align 1
@ijRO_str = internal alias i8, bitcast (%ijRO_str_struct* @ijRO_str$def to i8*)
@Main_Directional_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Directional_con_info$def to i8*)
define ghccc void @Main_Directional_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijRO_str_struct* @ijRO_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Directional_con_info$def to i64)),i64 0), i64 2, i32 4, i32 0}>
{
njRP:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjRN
cjRN:
  %lnjRR = load i64, i64* %R1_Var
  %lnjRS = add i64 %lnjRR, 1
  store i64 %lnjRS, i64* %R1_Var
  %lnjRT = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjRU = bitcast i64* %lnjRT to i64*
  %lnjRV = load i64, i64* %lnjRU, !tbaa !2
  %lnjRW = inttoptr i64 %lnjRV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjRX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjRW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjRX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ijRZ_str_struct = type <{[16 x i8]}>
@ijRZ_str$def = internal constant %ijRZ_str_struct<{[16 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 77, i8 97, i8 105, i8 110, i8 46, i8 80, i8 111, i8 105, i8 110, i8 116, i8 0]}>, align 1
@ijRZ_str = internal alias i8, bitcast (%ijRZ_str_struct* @ijRZ_str$def to i8*)
@Main_Point_con_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Point_con_info$def to i8*)
define ghccc void @Main_Point_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 add (i64 sub (i64 ptrtoint (%ijRZ_str_struct* @ijRZ_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_Point_con_info$def to i64)),i64 0), i64 2, i32 4, i32 1}>
{
njS0:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %cjRY
cjRY:
  %lnjS2 = load i64, i64* %R1_Var
  %lnjS3 = add i64 %lnjS2, 2
  store i64 %lnjS3, i64* %R1_Var
  %lnjS4 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnjS5 = bitcast i64* %lnjS4 to i64*
  %lnjS6 = load i64, i64* %lnjS5, !tbaa !2
  %lnjS7 = inttoptr i64 %lnjS6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnjS8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnjS7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnjS8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@rintDouble = external global i8
@stg_SRT_2_info = external global i8
@base_GHCziErr_errorWithoutStackTrace_closure = external global i8
@base_TextziRead_readEither5_closure = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziErr_errorWithoutStackTrace_info = external global i8
@base_TextziRead_readEither2_closure = external global i8
@base_ControlziExceptionziBase_patError_info = external global i8
@base_ControlziExceptionziBase_patError_closure = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@stg_gc_unbx_r1 = external global i8
@stg_upd_frame_info = external global i8
@ghczmprim_GHCziTypes_Dzh_con_info = external global i8
@stg_gc_unpt_r1 = external global i8
@ghczmprim_GHCziTuple_Z3T_con_info = external global i8
@base_GHCziFloat_divideDouble_info = external global i8
@ghczmprim_GHCziTuple_Z2T_con_info = external global i8
@stg_gc_pp = external global i8
@base_GHCziFloat_minusDouble_info = external global i8
@base_GHCziFloat_timesDouble_info = external global i8
@stg_gc_ppp = external global i8
@base_GHCziFloat_plusDouble_info = external global i8
@ghczmprim_GHCziTypes_Bool_closure_tbl = external global i8
@ghczmprim_GHCziTypes_False_closure = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_KindRepTyConApp_con_info = external global i8
@ghczmprim_GHCziTypes_zdtcDouble_closure = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@ghczmprim_GHCziTuple_zdtcZLz2cUz2cUZR_closure = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@ghczmprim_GHCziTypes_TyCon_con_info = external global i8
@ghczmprim_GHCziTypes_krepzdzt_closure = external global i8
@ghczmprim_GHCziTypes_KindRepFun_con_info = external global i8
@ghczmprim_GHCziTypes_zdtcZMZN_closure = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_GHCziList_badHead_closure = external global i8
@stg_ap_0_fast = external global i8
@stg_sel_1_upd_info = external global i8
@stg_sel_0_upd_info = external global i8
@stg_gc_noregs = external global i8
@stg_gc_d1 = external global i8
@stg_sel_2_upd_info = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_closure = external global i8
@base_GHCziShow_zdwshowSignedInt_info = external global i8
@base_GHCziIOziHandleziText_hPutStr2_info = external global i8
@base_GHCziRead_zdfReadIntzuzdsreadNumber_closure = external global i8
@base_GHCziRead_zdfReadInt2_closure = external global i8
@base_TextziRead_readEither7_closure = external global i8
@base_TextziParserCombinatorsziReadPrec_minPrec_closure = external global i8
@base_GHCziRead_zdfReadIntzuzdsreadNumber_info = external global i8
@stg_SRT_4_info = external global i8
@base_SystemziEnvironment_getArgs2_closure = external global i8
@base_TextziParserCombinatorsziReadP_run_info = external global i8
@base_TextziRead_readEither8_info = external global i8
@base_ForeignziMarshalziAlloc_zdwallocaBytesAligned_info = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@llvm.used = appending constant [294 x i8*] [i8* bitcast (%ijRZ_str_struct* @ijRZ_str$def to i8*), i8* bitcast (%ijRO_str_struct* @ijRO_str$def to i8*), i8* bitcast (%ijRD_str_struct* @ijRD_str$def to i8*), i8* bitcast (%ijRs_str_struct* @ijRs_str$def to i8*), i8* bitcast (%ijRh_str_struct* @ijRh_str$def to i8*), i8* bitcast (%ijR6_str_struct* @ijR6_str$def to i8*), i8* bitcast (%ijQV_str_struct* @ijQV_str$def to i8*), i8* bitcast (%ijQK_str_struct* @ijQK_str$def to i8*), i8* bitcast (%ijQz_str_struct* @ijQz_str$def to i8*), i8* bitcast (%ijQo_str_struct* @ijQo_str$def to i8*), i8* bitcast (%ijQd_str_struct* @ijQd_str$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%Main_mainzuloop_closure_struct* @Main_mainzuloop_closure$def to i8*), i8* bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*), i8* bitcast (%_ujJA_srt_struct* @_ujJA_srt$def to i8*), i8* bitcast (%_ujJz_srt_struct* @_ujJz_srt$def to i8*), i8* bitcast (%_ujJy_srt_struct* @_ujJy_srt$def to i8*), i8* bitcast (%r7me_closure_struct* @r7me_closure$def to i8*), i8* bitcast (%_ujHa_srt_struct* @_ujHa_srt$def to i8*), i8* bitcast (%Main_epsilon_closure_struct* @Main_epsilon_closure$def to i8*), i8* bitcast (%Main_run_closure_struct* @Main_run_closure$def to i8*), i8* bitcast (%Main_run1_closure_struct* @Main_run1_closure$def to i8*), i8* bitcast (%Main_ray_closure_struct* @Main_ray_closure$def to i8*), i8* bitcast (%Main_zdwray_closure_struct* @Main_zdwray_closure$def to i8*), i8* bitcast (%Main_tracepixel_closure_struct* @Main_tracepixel_closure$def to i8*), i8* bitcast (%Main_zdwtracepixel_closure_struct* @Main_zdwtracepixel_closure$def to i8*), i8* bitcast (%Main_shade_closure_struct* @Main_shade_closure$def to i8*), i8* bitcast (%Main_zdwshade_closure_struct* @Main_zdwshade_closure$def to i8*), i8* bitcast (%Main_transmitray_closure_struct* @Main_transmitray_closure$def to i8*), i8* bitcast (%Main_reflectray_closure_struct* @Main_reflectray_closure$def to i8*), i8* bitcast (%Main_lightray_closure_struct* @Main_lightray_closure$def to i8*), i8* bitcast (%Main_zdwlightray_closure_struct* @Main_zdwlightray_closure$def to i8*), i8* bitcast (%Main_shadowed_closure_struct* @Main_shadowed_closure$def to i8*), i8* bitcast (%Main_zdwshadowed_closure_struct* @Main_zdwshadowed_closure$def to i8*), i8* bitcast (%Main_trace_closure_struct* @Main_trace_closure$def to i8*), i8* bitcast (%Main_zdwtrace_closure_struct* @Main_zdwtrace_closure$def to i8*), i8* bitcast (%Main_lightdirection_closure_struct* @Main_lightdirection_closure$def to i8*), i8* bitcast (%Main_zdwlightdirection_closure_struct* @Main_zdwlightdirection_closure$def to i8*), i8* bitcast (%Main_infinity_closure_struct* @Main_infinity_closure$def to i8*), i8* bitcast (%Main_lightpos_closure_struct* @Main_lightpos_closure$def to i8*), i8* bitcast (%Main_lightpos1_closure_struct* @Main_lightpos1_closure$def to i8*), i8* bitcast (%r7mf_bytes_struct* @r7mf_bytes$def to i8*), i8* bitcast (%Main_lightcolour_closure_struct* @Main_lightcolour_closure$def to i8*), i8* bitcast (%Main_vecsum_closure_struct* @Main_vecsum_closure$def to i8*), i8* bitcast (%Main_zdwgo3_closure_struct* @Main_zdwgo3_closure$def to i8*), i8* bitcast (%Main_sphereintersect_closure_struct* @Main_sphereintersect_closure$def to i8*), i8* bitcast (%r7mB_closure_struct* @r7mB_closure$def to i8*), i8* bitcast (%Main_testspheres_closure_struct* @Main_testspheres_closure$def to i8*), i8* bitcast (%Main_testspheres1_closure_struct* @Main_testspheres1_closure$def to i8*), i8* bitcast (%Main_testspheres2_closure_struct* @Main_testspheres2_closure$def to i8*), i8* bitcast (%Main_testspheres3_closure_struct* @Main_testspheres3_closure$def to i8*), i8* bitcast (%Main_testspheres4_closure_struct* @Main_testspheres4_closure$def to i8*), i8* bitcast (%Main_testspheres5_closure_struct* @Main_testspheres5_closure$def to i8*), i8* bitcast (%Main_testspheres6_closure_struct* @Main_testspheres6_closure$def to i8*), i8* bitcast (%Main_testspheres7_closure_struct* @Main_testspheres7_closure$def to i8*), i8* bitcast (%Main_testspheres8_closure_struct* @Main_testspheres8_closure$def to i8*), i8* bitcast (%Main_testspheres9_closure_struct* @Main_testspheres9_closure$def to i8*), i8* bitcast (%Main_testspheres10_closure_struct* @Main_testspheres10_closure$def to i8*), i8* bitcast (%Main_testspheres12_closure_struct* @Main_testspheres12_closure$def to i8*), i8* bitcast (%Main_testspheres15_closure_struct* @Main_testspheres15_closure$def to i8*), i8* bitcast (%Main_testspheres16_closure_struct* @Main_testspheres16_closure$def to i8*), i8* bitcast (%Main_testspheres24_closure_struct* @Main_testspheres24_closure$def to i8*), i8* bitcast (%Main_testspheres25_closure_struct* @Main_testspheres25_closure$def to i8*), i8* bitcast (%Main_testspheres26_closure_struct* @Main_testspheres26_closure$def to i8*), i8* bitcast (%Main_testspheres27_closure_struct* @Main_testspheres27_closure$def to i8*), i8* bitcast (%Main_testspheres30_closure_struct* @Main_testspheres30_closure$def to i8*), i8* bitcast (%Main_testspheres31_closure_struct* @Main_testspheres31_closure$def to i8*), i8* bitcast (%Main_testspheres34_closure_struct* @Main_testspheres34_closure$def to i8*), i8* bitcast (%Main_testspheres35_closure_struct* @Main_testspheres35_closure$def to i8*), i8* bitcast (%Main_bluesurf_closure_struct* @Main_bluesurf_closure$def to i8*), i8* bitcast (%Main_bluesurf1_closure_struct* @Main_bluesurf1_closure$def to i8*), i8* bitcast (%Main_bluesurf7_closure_struct* @Main_bluesurf7_closure$def to i8*), i8* bitcast (%Main_bluesurf8_closure_struct* @Main_bluesurf8_closure$def to i8*), i8* bitcast (%Main_bluesurf10_closure_struct* @Main_bluesurf10_closure$def to i8*), i8* bitcast (%Main_bluesurf11_closure_struct* @Main_bluesurf11_closure$def to i8*), i8* bitcast (%Main_greensurf_closure_struct* @Main_greensurf_closure$def to i8*), i8* bitcast (%Main_greensurf1_closure_struct* @Main_greensurf1_closure$def to i8*), i8* bitcast (%Main_greensurf5_closure_struct* @Main_greensurf5_closure$def to i8*), i8* bitcast (%Main_greensurf6_closure_struct* @Main_greensurf6_closure$def to i8*), i8* bitcast (%Main_greensurf7_closure_struct* @Main_greensurf7_closure$def to i8*), i8* bitcast (%Main_greensurf8_closure_struct* @Main_greensurf8_closure$def to i8*), i8* bitcast (%Main_redsurf_closure_struct* @Main_redsurf_closure$def to i8*), i8* bitcast (%Main_redsurf1_closure_struct* @Main_redsurf1_closure$def to i8*), i8* bitcast (%Main_redsurf8_closure_struct* @Main_redsurf8_closure$def to i8*), i8* bitcast (%Main_redsurf9_closure_struct* @Main_redsurf9_closure$def to i8*), i8* bitcast (%Main_redsurf10_closure_struct* @Main_redsurf10_closure$def to i8*), i8* bitcast (%Main_redsurf11_closure_struct* @Main_redsurf11_closure$def to i8*), i8* bitcast (%Main_vup_closure_struct* @Main_vup_closure$def to i8*), i8* bitcast (%Main_transmitsurf_closure_struct* @Main_transmitsurf_closure$def to i8*), i8* bitcast (%r7ml_closure_struct* @r7ml_closure$def to i8*), i8* bitcast (%Main_reflectsurf_closure_struct* @Main_reflectsurf_closure$def to i8*), i8* bitcast (%r7mk_closure_struct* @r7mk_closure$def to i8*), i8* bitcast (%Main_refractray_closure_struct* @Main_refractray_closure$def to i8*), i8* bitcast (%r7mC_closure_struct* @r7mC_closure$def to i8*), i8* bitcast (%Main_testspheres39_closure_struct* @Main_testspheres39_closure$def to i8*), i8* bitcast (%Main_specularsurf_closure_struct* @Main_specularsurf_closure$def to i8*), i8* bitcast (%r7mi_closure_struct* @r7mi_closure$def to i8*), i8* bitcast (%Main_diffusesurf_closure_struct* @Main_diffusesurf_closure$def to i8*), i8* bitcast (%r7mh_closure_struct* @r7mh_closure$def to i8*), i8* bitcast (%Main_ambientsurf_closure_struct* @Main_ambientsurf_closure$def to i8*), i8* bitcast (%r7mg_closure_struct* @r7mg_closure$def to i8*), i8* bitcast (%Main_lookat_closure_struct* @Main_lookat_closure$def to i8*), i8* bitcast (%Main_lookat1_closure_struct* @Main_lookat1_closure$def to i8*), i8* bitcast (%Main_specpowsurf_closure_struct* @Main_specpowsurf_closure$def to i8*), i8* bitcast (%r7mj_closure_struct* @r7mj_closure$def to i8*), i8* bitcast (%Main_specpowsurf1_closure_struct* @Main_specpowsurf1_closure$def to i8*), i8* bitcast (%Main_testlights_closure_struct* @Main_testlights_closure$def to i8*), i8* bitcast (%Main_testlights1_closure_struct* @Main_testlights1_closure$def to i8*), i8* bitcast (%Main_testlights2_closure_struct* @Main_testlights2_closure$def to i8*), i8* bitcast (%Main_testlights3_closure_struct* @Main_testlights3_closure$def to i8*), i8* bitcast (%Main_testlights6_closure_struct* @Main_testlights6_closure$def to i8*), i8* bitcast (%Main_testlights9_closure_struct* @Main_testlights9_closure$def to i8*), i8* bitcast (%Main_testlights10_closure_struct* @Main_testlights10_closure$def to i8*), i8* bitcast (%Main_bodysurf_closure_struct* @Main_bodysurf_closure$def to i8*), i8* bitcast (%r7mn_closure_struct* @r7mn_closure$def to i8*), i8* bitcast (%Main_bodysurf1_closure_struct* @Main_bodysurf1_closure$def to i8*), i8* bitcast (%Main_refractsurf_closure_struct* @Main_refractsurf_closure$def to i8*), i8* bitcast (%r7mm_closure_struct* @r7mm_closure$def to i8*), i8* bitcast (%Main_bodysurf2_closure_struct* @Main_bodysurf2_closure$def to i8*), i8* bitcast (%Main_spheresurf_closure_struct* @Main_spheresurf_closure$def to i8*), i8* bitcast (%Main_fov_closure_struct* @Main_fov_closure$def to i8*), i8* bitcast (%Main_bluesurf12_closure_struct* @Main_bluesurf12_closure$def to i8*), i8* bitcast (%Main_bluesurf9_closure_struct* @Main_bluesurf9_closure$def to i8*), i8* bitcast (%Main_testspheres19_closure_struct* @Main_testspheres19_closure$def to i8*), i8* bitcast (%Main_testspheres28_closure_struct* @Main_testspheres28_closure$def to i8*), i8* bitcast (%Main_testspheres36_closure_struct* @Main_testspheres36_closure$def to i8*), i8* bitcast (%Main_s2_closure_struct* @Main_s2_closure$def to i8*), i8* bitcast (%Main_s1_closure_struct* @Main_s1_closure$def to i8*), i8* bitcast (%Main_s3_closure_struct* @Main_s3_closure$def to i8*), i8* bitcast (%Main_s9_closure_struct* @Main_s9_closure$def to i8*), i8* bitcast (%Main_s10_closure_struct* @Main_s10_closure$def to i8*), i8* bitcast (%Main_bluesurf2_closure_struct* @Main_bluesurf2_closure$def to i8*), i8* bitcast (%Main_bluesurf3_closure_struct* @Main_bluesurf3_closure$def to i8*), i8* bitcast (%Main_bluesurf4_closure_struct* @Main_bluesurf4_closure$def to i8*), i8* bitcast (%Main_greensurf2_closure_struct* @Main_greensurf2_closure$def to i8*), i8* bitcast (%Main_greensurf3_closure_struct* @Main_greensurf3_closure$def to i8*), i8* bitcast (%Main_greensurf4_closure_struct* @Main_greensurf4_closure$def to i8*), i8* bitcast (%Main_redsurf2_closure_struct* @Main_redsurf2_closure$def to i8*), i8* bitcast (%Main_redsurf6_closure_struct* @Main_redsurf6_closure$def to i8*), i8* bitcast (%Main_redsurf7_closure_struct* @Main_redsurf7_closure$def to i8*), i8* bitcast (%Main_bluesurf5_closure_struct* @Main_bluesurf5_closure$def to i8*), i8* bitcast (%Main_bluesurf6_closure_struct* @Main_bluesurf6_closure$def to i8*), i8* bitcast (%Main_redsurf3_closure_struct* @Main_redsurf3_closure$def to i8*), i8* bitcast (%Main_redsurf4_closure_struct* @Main_redsurf4_closure$def to i8*), i8* bitcast (%Main_redsurf5_closure_struct* @Main_redsurf5_closure$def to i8*), i8* bitcast (%Main_s15_closure_struct* @Main_s15_closure$def to i8*), i8* bitcast (%Main_s16_closure_struct* @Main_s16_closure$def to i8*), i8* bitcast (%Main_s19_closure_struct* @Main_s19_closure$def to i8*), i8* bitcast (%Main_s18_closure_struct* @Main_s18_closure$def to i8*), i8* bitcast (%Main_s17_closure_struct* @Main_s17_closure$def to i8*), i8* bitcast (%Main_s4_closure_struct* @Main_s4_closure$def to i8*), i8* bitcast (%Main_s5_closure_struct* @Main_s5_closure$def to i8*), i8* bitcast (%Main_s6_closure_struct* @Main_s6_closure$def to i8*), i8* bitcast (%Main_s11_closure_struct* @Main_s11_closure$def to i8*), i8* bitcast (%Main_s12_closure_struct* @Main_s12_closure$def to i8*), i8* bitcast (%Main_s7_closure_struct* @Main_s7_closure$def to i8*), i8* bitcast (%Main_s14_closure_struct* @Main_s14_closure$def to i8*), i8* bitcast (%Main_s13_closure_struct* @Main_s13_closure$def to i8*), i8* bitcast (%Main_testlights13_closure_struct* @Main_testlights13_closure$def to i8*), i8* bitcast (%Main_testlights14_closure_struct* @Main_testlights14_closure$def to i8*), i8* bitcast (%Main_s8_closure_struct* @Main_s8_closure$def to i8*), i8* bitcast (%Main_testlights16_closure_struct* @Main_testlights16_closure$def to i8*), i8* bitcast (%Main_lookfrom_closure_struct* @Main_lookfrom_closure$def to i8*), i8* bitcast (%Main_lookfrom3_closure_struct* @Main_lookfrom3_closure$def to i8*), i8* bitcast (%Main_lookfrom2_closure_struct* @Main_lookfrom2_closure$def to i8*), i8* bitcast (%Main_lookfrom1_closure_struct* @Main_lookfrom1_closure$def to i8*), i8* bitcast (%Main_background_closure_struct* @Main_background_closure$def to i8*), i8* bitcast (%Main_background3_closure_struct* @Main_background3_closure$def to i8*), i8* bitcast (%Main_background2_closure_struct* @Main_background2_closure$def to i8*), i8* bitcast (%Main_background1_closure_struct* @Main_background1_closure$def to i8*), i8* bitcast (%Main_zdtczqSphere_closure_struct* @Main_zdtczqSphere_closure$def to i8*), i8* bitcast (%Main_zdtczqSphere1_closure_struct* @Main_zdtczqSphere1_closure$def to i8*), i8* bitcast (%r7mA_closure_struct* @r7mA_closure$def to i8*), i8* bitcast (%r7mz_closure_struct* @r7mz_closure$def to i8*), i8* bitcast (%r7my_closure_struct* @r7my_closure$def to i8*), i8* bitcast (%Main_zdtcSphere_closure_struct* @Main_zdtcSphere_closure$def to i8*), i8* bitcast (%Main_zdtczqRefract_closure_struct* @Main_zdtczqRefract_closure$def to i8*), i8* bitcast (%Main_zdtczqTransmit_closure_struct* @Main_zdtczqTransmit_closure$def to i8*), i8* bitcast (%Main_zdtczqReflect_closure_struct* @Main_zdtczqReflect_closure$def to i8*), i8* bitcast (%Main_zdtczqSpecpow_closure_struct* @Main_zdtczqSpecpow_closure$def to i8*), i8* bitcast (%Main_zdtczqBody_closure_struct* @Main_zdtczqBody_closure$def to i8*), i8* bitcast (%Main_zdtczqSpecular_closure_struct* @Main_zdtczqSpecular_closure$def to i8*), i8* bitcast (%Main_zdtczqDiffuse_closure_struct* @Main_zdtczqDiffuse_closure$def to i8*), i8* bitcast (%Main_zdtczqAmbient_closure_struct* @Main_zdtczqAmbient_closure$def to i8*), i8* bitcast (%r7mx_closure_struct* @r7mx_closure$def to i8*), i8* bitcast (%r7mw_closure_struct* @r7mw_closure$def to i8*), i8* bitcast (%Main_zdtczqReflect1_closure_struct* @Main_zdtczqReflect1_closure$def to i8*), i8* bitcast (%Main_zdtczqAmbient1_closure_struct* @Main_zdtczqAmbient1_closure$def to i8*), i8* bitcast (%r7mv_closure_struct* @r7mv_closure$def to i8*), i8* bitcast (%Main_zdtcSurfspec_closure_struct* @Main_zdtcSurfspec_closure$def to i8*), i8* bitcast (%Main_zdtczqPoint_closure_struct* @Main_zdtczqPoint_closure$def to i8*), i8* bitcast (%Main_zdtczqDirectional_closure_struct* @Main_zdtczqDirectional_closure$def to i8*), i8* bitcast (%Main_zdtczqDirectional1_closure_struct* @Main_zdtczqDirectional1_closure$def to i8*), i8* bitcast (%r7mu_closure_struct* @r7mu_closure$def to i8*), i8* bitcast (%r7mt_closure_struct* @r7mt_closure$def to i8*), i8* bitcast (%Main_zdtcLight_closure_struct* @Main_zdtcLight_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%r7ms_closure_struct* @r7ms_closure$def to i8*), i8* bitcast (%r7mr_closure_struct* @r7mr_closure$def to i8*), i8* bitcast (%r7mq_closure_struct* @r7mq_closure$def to i8*), i8* bitcast (%r7mp_closure_struct* @r7mp_closure$def to i8*), i8* bitcast (%r7mo_closure_struct* @r7mo_closure$def to i8*), i8* bitcast (%Main_zdtcLight1_closure_struct* @Main_zdtcLight1_closure$def to i8*), i8* bitcast (%Main_zdtcLight2_bytes_struct* @Main_zdtcLight2_bytes$def to i8*), i8* bitcast (%Main_zdtczqDirectional2_closure_struct* @Main_zdtczqDirectional2_closure$def to i8*), i8* bitcast (%Main_zdtczqDirectional3_bytes_struct* @Main_zdtczqDirectional3_bytes$def to i8*), i8* bitcast (%Main_zdtczqPoint1_closure_struct* @Main_zdtczqPoint1_closure$def to i8*), i8* bitcast (%Main_zdtczqPoint2_bytes_struct* @Main_zdtczqPoint2_bytes$def to i8*), i8* bitcast (%Main_zdtcSurfspec1_closure_struct* @Main_zdtcSurfspec1_closure$def to i8*), i8* bitcast (%Main_zdtcSurfspec2_bytes_struct* @Main_zdtcSurfspec2_bytes$def to i8*), i8* bitcast (%Main_zdtczqAmbient2_closure_struct* @Main_zdtczqAmbient2_closure$def to i8*), i8* bitcast (%Main_zdtczqAmbient3_bytes_struct* @Main_zdtczqAmbient3_bytes$def to i8*), i8* bitcast (%Main_zdtczqDiffuse1_closure_struct* @Main_zdtczqDiffuse1_closure$def to i8*), i8* bitcast (%Main_zdtczqDiffuse2_bytes_struct* @Main_zdtczqDiffuse2_bytes$def to i8*), i8* bitcast (%Main_zdtczqSpecular1_closure_struct* @Main_zdtczqSpecular1_closure$def to i8*), i8* bitcast (%Main_zdtczqSpecular2_bytes_struct* @Main_zdtczqSpecular2_bytes$def to i8*), i8* bitcast (%Main_zdtczqBody1_closure_struct* @Main_zdtczqBody1_closure$def to i8*), i8* bitcast (%Main_zdtczqBody2_bytes_struct* @Main_zdtczqBody2_bytes$def to i8*), i8* bitcast (%Main_zdtczqSpecpow1_closure_struct* @Main_zdtczqSpecpow1_closure$def to i8*), i8* bitcast (%Main_zdtczqSpecpow2_bytes_struct* @Main_zdtczqSpecpow2_bytes$def to i8*), i8* bitcast (%Main_zdtczqReflect2_closure_struct* @Main_zdtczqReflect2_closure$def to i8*), i8* bitcast (%Main_zdtczqReflect3_bytes_struct* @Main_zdtczqReflect3_bytes$def to i8*), i8* bitcast (%Main_zdtczqTransmit1_closure_struct* @Main_zdtczqTransmit1_closure$def to i8*), i8* bitcast (%Main_zdtczqTransmit2_bytes_struct* @Main_zdtczqTransmit2_bytes$def to i8*), i8* bitcast (%Main_zdtczqRefract1_closure_struct* @Main_zdtczqRefract1_closure$def to i8*), i8* bitcast (%Main_zdtczqRefract2_bytes_struct* @Main_zdtczqRefract2_bytes$def to i8*), i8* bitcast (%Main_zdtcSphere1_closure_struct* @Main_zdtcSphere1_closure$def to i8*), i8* bitcast (%Main_zdtcSphere2_bytes_struct* @Main_zdtcSphere2_bytes$def to i8*), i8* bitcast (%Main_zdtczqSphere2_closure_struct* @Main_zdtczqSphere2_closure$def to i8*), i8* bitcast (%Main_zdtczqSphere3_bytes_struct* @Main_zdtczqSphere3_bytes$def to i8*), i8* bitcast (%Main_iszuzzerovector_closure_struct* @Main_iszuzzerovector_closure$def to i8*), i8* bitcast (%Main_testlights11_closure_struct* @Main_testlights11_closure$def to i8*), i8* bitcast (%Main_testlights15_closure_struct* @Main_testlights15_closure$def to i8*), i8* bitcast (%Main_testlights4_closure_struct* @Main_testlights4_closure$def to i8*), i8* bitcast (%Main_testlights5_closure_struct* @Main_testlights5_closure$def to i8*), i8* bitcast (%Main_testlights12_closure_struct* @Main_testlights12_closure$def to i8*), i8* bitcast (%Main_testlights8_closure_struct* @Main_testlights8_closure$def to i8*), i8* bitcast (%Main_testlights7_closure_struct* @Main_testlights7_closure$def to i8*), i8* bitcast (%Main_testspheres37_closure_struct* @Main_testspheres37_closure$def to i8*), i8* bitcast (%Main_testspheres38_closure_struct* @Main_testspheres38_closure$def to i8*), i8* bitcast (%Main_testspheres20_closure_struct* @Main_testspheres20_closure$def to i8*), i8* bitcast (%Main_testspheres29_closure_struct* @Main_testspheres29_closure$def to i8*), i8* bitcast (%Main_testspheres21_closure_struct* @Main_testspheres21_closure$def to i8*), i8* bitcast (%Main_testspheres11_closure_struct* @Main_testspheres11_closure$def to i8*), i8* bitcast (%Main_testspheres32_closure_struct* @Main_testspheres32_closure$def to i8*), i8* bitcast (%Main_testspheres33_closure_struct* @Main_testspheres33_closure$def to i8*), i8* bitcast (%Main_testspheres22_closure_struct* @Main_testspheres22_closure$def to i8*), i8* bitcast (%Main_testspheres23_closure_struct* @Main_testspheres23_closure$def to i8*), i8* bitcast (%Main_testspheres13_closure_struct* @Main_testspheres13_closure$def to i8*), i8* bitcast (%Main_testspheres14_closure_struct* @Main_testspheres14_closure$def to i8*), i8* bitcast (%Main_testspheres17_closure_struct* @Main_testspheres17_closure$def to i8*), i8* bitcast (%Main_testspheres18_closure_struct* @Main_testspheres18_closure$def to i8*), i8* bitcast (%Main_veccross_closure_struct* @Main_veccross_closure$def to i8*), i8* bitcast (%Main_vecdot_closure_struct* @Main_vecdot_closure$def to i8*), i8* bitcast (%Main_vecscale_closure_struct* @Main_vecscale_closure$def to i8*), i8* bitcast (%Main_vecmult_closure_struct* @Main_vecmult_closure$def to i8*), i8* bitcast (%Main_vecsub_closure_struct* @Main_vecsub_closure$def to i8*), i8* bitcast (%Main_vecadd_closure_struct* @Main_vecadd_closure$def to i8*), i8* bitcast (%Main_dtor_closure_struct* @Main_dtor_closure$def to i8*), i8* bitcast (%Main_camparams_closure_struct* @Main_camparams_closure$def to i8*), i8* bitcast (%Main_zdwcamparams_closure_struct* @Main_zdwcamparams_closure$def to i8*), i8* bitcast (%Main_lightdir_closure_struct* @Main_lightdir_closure$def to i8*), i8* bitcast (%Main_vecnorm_closure_struct* @Main_vecnorm_closure$def to i8*), i8* bitcast (%Main_zdwvecnorm_closure_struct* @Main_zdwvecnorm_closure$def to i8*), i8* bitcast (%Main_lightdir1_closure_struct* @Main_lightdir1_closure$def to i8*), i8* bitcast (%r7mD_bytes_struct* @r7mD_bytes$def to i8*), i8* bitcast (%Main_spherenormal_closure_struct* @Main_spherenormal_closure$def to i8*), i8* bitcast (%Main_hash_closure_struct* @Main_hash_closure$def to i8*), i8* bitcast (%Main_zdwgo1_closure_struct* @Main_zdwgo1_closure$def to i8*), i8* bitcast (%Main_zdwgo2_closure_struct* @Main_zdwgo2_closure$def to i8*), i8* bitcast (%r7mH_closure_struct* @r7mH_closure$def to i8*), i8* bitcast (%r7mE_bytes_struct* @r7mE_bytes$def to i8*), i8* bitcast (%r7mF_closure_struct* @r7mF_closure$def to i8*), i8* bitcast (%_u88Q_srt_struct* @_u88Q_srt$def to i8*), i8* bitcast (%r7mG_closure_struct* @r7mG_closure$def to i8*), i8* bitcast (%_u87Y_srt_struct* @_u87Y_srt$def to i8*), i8* bitcast (%Main_Sphere_closure_struct* @Main_Sphere_closure$def to i8*), i8* bitcast (%Main_Ambient_closure_struct* @Main_Ambient_closure$def to i8*), i8* bitcast (%Main_Diffuse_closure_struct* @Main_Diffuse_closure$def to i8*), i8* bitcast (%Main_Specular_closure_struct* @Main_Specular_closure$def to i8*), i8* bitcast (%Main_Specpow_closure_struct* @Main_Specpow_closure$def to i8*), i8* bitcast (%Main_Reflect_closure_struct* @Main_Reflect_closure$def to i8*), i8* bitcast (%Main_Transmit_closure_struct* @Main_Transmit_closure$def to i8*), i8* bitcast (%Main_Refract_closure_struct* @Main_Refract_closure$def to i8*), i8* bitcast (%Main_Body_closure_struct* @Main_Body_closure$def to i8*), i8* bitcast (%Main_Directional_closure_struct* @Main_Directional_closure$def to i8*), i8* bitcast (%Main_Point_closure_struct* @Main_Point_closure$def to i8*)], section "llvm.metadata"
